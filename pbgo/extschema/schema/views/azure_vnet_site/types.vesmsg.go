// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package azure_vnet_site

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_fleet "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet"
	ves_io_schema_network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
	ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AzureHubVnetType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureHubVnetType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureHubVnetType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetExpressRouteEnabled().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureHubVnetType.express_route_enabled")
	}

	return nil
}

func (m *AzureHubVnetType) DeepCopy() *AzureHubVnetType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureHubVnetType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureHubVnetType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureHubVnetType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureHubVnetTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAzureHubVnetType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureHubVnetType) ExpressRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for express_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureHubVnetType) SpokeVnetsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for spoke_vnets")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*VnetPeeringType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := VnetPeeringTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for spoke_vnets")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*VnetPeeringType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*VnetPeeringType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated spoke_vnets")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items spoke_vnets")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureHubVnetType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureHubVnetType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureHubVnetType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["express_route_choice"]; exists {
		val := m.GetExpressRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("express_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetExpressRouteChoice().(type) {
	case *AzureHubVnetType_ExpressRouteDisabled:
		if fv, exists := v.FldValidators["express_route_choice.express_route_disabled"]; exists {
			val := m.GetExpressRouteChoice().(*AzureHubVnetType_ExpressRouteDisabled).ExpressRouteDisabled
			vOpts := append(opts,
				db.WithValidateField("express_route_choice"),
				db.WithValidateField("express_route_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureHubVnetType_ExpressRouteEnabled:
		if fv, exists := v.FldValidators["express_route_choice.express_route_enabled"]; exists {
			val := m.GetExpressRouteChoice().(*AzureHubVnetType_ExpressRouteEnabled).ExpressRouteEnabled
			vOpts := append(opts,
				db.WithValidateField("express_route_choice"),
				db.WithValidateField("express_route_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["spoke_vnets"]; exists {
		vOpts := append(opts, db.WithValidateField("spoke_vnets"))
		if err := fv(ctx, m.GetSpokeVnets(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureHubVnetTypeValidator = func() *ValidateAzureHubVnetType {
	v := &ValidateAzureHubVnetType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExpressRouteChoice := v.ExpressRouteChoiceValidationRuleHandler
	rulesExpressRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhExpressRouteChoice(rulesExpressRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureHubVnetType.express_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["express_route_choice"] = vFn

	vrhSpokeVnets := v.SpokeVnetsValidationRuleHandler
	rulesSpokeVnets := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhSpokeVnets(rulesSpokeVnets)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureHubVnetType.spoke_vnets: %s", err)
		panic(errMsg)
	}
	v.FldValidators["spoke_vnets"] = vFn

	v.FldValidators["express_route_choice.express_route_enabled"] = ExpressRouteConfigTypeValidator().Validate

	return v
}()

func AzureHubVnetTypeValidator() db.Validator {
	return DefaultAzureHubVnetTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetIngressEgressGwARReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetIngressEgressGwARReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureVnetIngressEgressGwARReplaceType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetIngressEgressGwARReplaceType.global_network_list")
	}

	if err := m.GetHub().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetIngressEgressGwARReplaceType.hub")
	}

	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) DeepCopy() *AzureVnetIngressEgressGwARReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetIngressEgressGwARReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetIngressEgressGwARReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetIngressEgressGwARReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetIngressEgressGwARReplaceTypeValidator().Validate(ctx, m, opts...)
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetInsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetInsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *AzureVnetIngressEgressGwARReplaceType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup:

		return nil, nil

	case *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn:

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_outside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn:

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_inside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AzureVnetIngressEgressGwARReplaceType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup:

	case *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwARReplaceType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_NoForwardProxy:

		return nil, nil

	case *AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwARReplaceType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork:

		return nil, nil

	case *AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwARReplaceType) GetInsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetInsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes:

		return nil, nil

	case *AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes:

		drInfos, err := m.GetInsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "inside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwARReplaceType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy:

		return nil, nil

	case *AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwARReplaceType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes:

		return nil, nil

	case *AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateAzureVnetIngressEgressGwARReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetIngressEgressGwARReplaceType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARReplaceType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARReplaceType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARReplaceType) HubChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hub_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARReplaceType) InsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for inside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARReplaceType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARReplaceType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARReplaceType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetIngressEgressGwARReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetIngressEgressGwARReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn).DcClusterGroupOutsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_outside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn).DcClusterGroupInsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_inside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARReplaceType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["hub_choice"]; exists {
		val := m.GetHubChoice()
		vOpts := append(opts,
			db.WithValidateField("hub_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHubChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_NotHub:
		if fv, exists := v.FldValidators["hub_choice.not_hub"]; exists {
			val := m.GetHubChoice().(*AzureVnetIngressEgressGwARReplaceType_NotHub).NotHub
			vOpts := append(opts,
				db.WithValidateField("hub_choice"),
				db.WithValidateField("not_hub"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARReplaceType_Hub:
		if fv, exists := v.FldValidators["hub_choice.hub"]; exists {
			val := m.GetHubChoice().(*AzureVnetIngressEgressGwARReplaceType_Hub).Hub
			vOpts := append(opts,
				db.WithValidateField("hub_choice"),
				db.WithValidateField("hub"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["inside_static_route_choice"]; exists {
		val := m.GetInsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("inside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.no_inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes).NoInsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("no_inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes).InsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["node"]; exists {

		vOpts := append(opts, db.WithValidateField("node"))
		if err := fv(ctx, m.GetNode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetIngressEgressGwARReplaceTypeValidator = func() *ValidateAzureVnetIngressEgressGwARReplaceType {
	v := &ValidateAzureVnetIngressEgressGwARReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARReplaceType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARReplaceType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARReplaceType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhHubChoice := v.HubChoiceValidationRuleHandler
	rulesHubChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHubChoice(rulesHubChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARReplaceType.hub_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hub_choice"] = vFn

	vrhInsideStaticRouteChoice := v.InsideStaticRouteChoiceValidationRuleHandler
	rulesInsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsideStaticRouteChoice(rulesInsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARReplaceType.inside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["inside_static_route_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARReplaceType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARReplaceType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARReplaceType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["hub_choice.hub"] = AzureHubVnetTypeValidator().Validate

	v.FldValidators["inside_static_route_choice.inside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["node"] = ves_io_schema_views.AzureVnetTwoInterfaceNodeARTypeValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	return v
}()

func AzureVnetIngressEgressGwARReplaceTypeValidator() db.Validator {
	return DefaultAzureVnetIngressEgressGwARReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetIngressEgressGwARType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetIngressEgressGwARType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureVnetIngressEgressGwARType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetIngressEgressGwARType.global_network_list")
	}

	if err := m.GetHub().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetIngressEgressGwARType.hub")
	}

	return nil
}

func (m *AzureVnetIngressEgressGwARType) DeepCopy() *AzureVnetIngressEgressGwARType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetIngressEgressGwARType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetIngressEgressGwARType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetIngressEgressGwARType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetIngressEgressGwARTypeValidator().Validate(ctx, m, opts...)
}

func (m *AzureVnetIngressEgressGwARType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetInsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetInsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *AzureVnetIngressEgressGwARType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetIngressEgressGwARType_NoDcClusterGroup:

		return nil, nil

	case *AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn:

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_outside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn:

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_inside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AzureVnetIngressEgressGwARType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetIngressEgressGwARType_NoDcClusterGroup:

	case *AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwARType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetIngressEgressGwARType_NoForwardProxy:

		return nil, nil

	case *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwARType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetIngressEgressGwARType_NoGlobalNetwork:

		return nil, nil

	case *AzureVnetIngressEgressGwARType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwARType) GetInsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetInsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes:

		return nil, nil

	case *AzureVnetIngressEgressGwARType_InsideStaticRoutes:

		drInfos, err := m.GetInsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "inside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwARType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetIngressEgressGwARType_NoNetworkPolicy:

		return nil, nil

	case *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwARType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes:

		return nil, nil

	case *AzureVnetIngressEgressGwARType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateAzureVnetIngressEgressGwARType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetIngressEgressGwARType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARType) HubChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hub_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARType) InsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for inside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARType) AzureCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwARType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetIngressEgressGwARType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetIngressEgressGwARType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["accelerated_networking"]; exists {

		vOpts := append(opts, db.WithValidateField("accelerated_networking"))
		if err := fv(ctx, m.GetAcceleratedNetworking(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["azure_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_certified_hw"))
		if err := fv(ctx, m.GetAzureCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetIngressEgressGwARType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwARType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn).DcClusterGroupOutsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_outside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn).DcClusterGroupInsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_inside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetIngressEgressGwARType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetIngressEgressGwARType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwARType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwARType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["hub_choice"]; exists {
		val := m.GetHubChoice()
		vOpts := append(opts,
			db.WithValidateField("hub_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHubChoice().(type) {
	case *AzureVnetIngressEgressGwARType_NotHub:
		if fv, exists := v.FldValidators["hub_choice.not_hub"]; exists {
			val := m.GetHubChoice().(*AzureVnetIngressEgressGwARType_NotHub).NotHub
			vOpts := append(opts,
				db.WithValidateField("hub_choice"),
				db.WithValidateField("not_hub"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARType_Hub:
		if fv, exists := v.FldValidators["hub_choice.hub"]; exists {
			val := m.GetHubChoice().(*AzureVnetIngressEgressGwARType_Hub).Hub
			vOpts := append(opts,
				db.WithValidateField("hub_choice"),
				db.WithValidateField("hub"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["inside_static_route_choice"]; exists {
		val := m.GetInsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("inside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.no_inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwARType_NoInsideStaticRoutes).NoInsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("no_inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARType_InsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwARType_InsideStaticRoutes).InsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetIngressEgressGwARType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwARType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwARType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["node"]; exists {

		vOpts := append(opts, db.WithValidateField("node"))
		if err := fv(ctx, m.GetNode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwARType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *AzureVnetIngressEgressGwARType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwARType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwARType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwARType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetIngressEgressGwARTypeValidator = func() *ValidateAzureVnetIngressEgressGwARType {
	v := &ValidateAzureVnetIngressEgressGwARType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhHubChoice := v.HubChoiceValidationRuleHandler
	rulesHubChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHubChoice(rulesHubChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARType.hub_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hub_choice"] = vFn

	vrhInsideStaticRouteChoice := v.InsideStaticRouteChoiceValidationRuleHandler
	rulesInsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsideStaticRouteChoice(rulesInsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARType.inside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["inside_static_route_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	vrhAzureCertifiedHw := v.AzureCertifiedHwValidationRuleHandler
	rulesAzureCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"azure-byol-multi-nic-voltmesh\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhAzureCertifiedHw(rulesAzureCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwARType.azure_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_certified_hw"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["hub_choice.hub"] = AzureHubVnetTypeValidator().Validate

	v.FldValidators["inside_static_route_choice.inside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["node"] = ves_io_schema_views.AzureVnetTwoInterfaceNodeARTypeValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	v.FldValidators["accelerated_networking"] = ves_io_schema_views.AcceleratedNetworkingTypeValidator().Validate

	return v
}()

func AzureVnetIngressEgressGwARTypeValidator() db.Validator {
	return DefaultAzureVnetIngressEgressGwARTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetIngressEgressGwReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetIngressEgressGwReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureVnetIngressEgressGwReplaceType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetIngressEgressGwReplaceType.global_network_list")
	}

	if err := m.GetHub().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetIngressEgressGwReplaceType.hub")
	}

	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) DeepCopy() *AzureVnetIngressEgressGwReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetIngressEgressGwReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetIngressEgressGwReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetIngressEgressGwReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetIngressEgressGwReplaceTypeValidator().Validate(ctx, m, opts...)
}

func (m *AzureVnetIngressEgressGwReplaceType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetInsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetInsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *AzureVnetIngressEgressGwReplaceType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup:

		return nil, nil

	case *AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn:

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_outside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn:

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_inside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AzureVnetIngressEgressGwReplaceType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup:

	case *AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwReplaceType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoForwardProxy:

		return nil, nil

	case *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwReplaceType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork:

		return nil, nil

	case *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwReplaceType) GetInsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetInsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes:

		return nil, nil

	case *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes:

		drInfos, err := m.GetInsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "inside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwReplaceType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy:

		return nil, nil

	case *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwReplaceType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes:

		return nil, nil

	case *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateAzureVnetIngressEgressGwReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) HubChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hub_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) InsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for inside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetIngressEgressGwReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetIngressEgressGwReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn).DcClusterGroupOutsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_outside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn).DcClusterGroupInsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_inside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["hub_choice"]; exists {
		val := m.GetHubChoice()
		vOpts := append(opts,
			db.WithValidateField("hub_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHubChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NotHub:
		if fv, exists := v.FldValidators["hub_choice.not_hub"]; exists {
			val := m.GetHubChoice().(*AzureVnetIngressEgressGwReplaceType_NotHub).NotHub
			vOpts := append(opts,
				db.WithValidateField("hub_choice"),
				db.WithValidateField("not_hub"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_Hub:
		if fv, exists := v.FldValidators["hub_choice.hub"]; exists {
			val := m.GetHubChoice().(*AzureVnetIngressEgressGwReplaceType_Hub).Hub
			vOpts := append(opts,
				db.WithValidateField("hub_choice"),
				db.WithValidateField("hub"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["inside_static_route_choice"]; exists {
		val := m.GetInsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("inside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.no_inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes).NoInsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("no_inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes).InsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetIngressEgressGwReplaceTypeValidator = func() *ValidateAzureVnetIngressEgressGwReplaceType {
	v := &ValidateAzureVnetIngressEgressGwReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwReplaceType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwReplaceType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwReplaceType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhHubChoice := v.HubChoiceValidationRuleHandler
	rulesHubChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHubChoice(rulesHubChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwReplaceType.hub_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hub_choice"] = vFn

	vrhInsideStaticRouteChoice := v.InsideStaticRouteChoiceValidationRuleHandler
	rulesInsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsideStaticRouteChoice(rulesInsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwReplaceType.inside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["inside_static_route_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwReplaceType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwReplaceType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwReplaceType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["hub_choice.hub"] = AzureHubVnetTypeValidator().Validate

	v.FldValidators["inside_static_route_choice.inside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	return v
}()

func AzureVnetIngressEgressGwReplaceTypeValidator() db.Validator {
	return DefaultAzureVnetIngressEgressGwReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetIngressEgressGwType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetIngressEgressGwType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureVnetIngressEgressGwType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetIngressEgressGwType.global_network_list")
	}

	if err := m.GetHub().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetIngressEgressGwType.hub")
	}

	return nil
}

func (m *AzureVnetIngressEgressGwType) DeepCopy() *AzureVnetIngressEgressGwType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetIngressEgressGwType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetIngressEgressGwType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetIngressEgressGwType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetIngressEgressGwTypeValidator().Validate(ctx, m, opts...)
}

func (m *AzureVnetIngressEgressGwType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetInsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetInsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *AzureVnetIngressEgressGwType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoDcClusterGroup:

		return nil, nil

	case *AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn:

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_outside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *AzureVnetIngressEgressGwType_DcClusterGroupInsideVn:

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_inside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AzureVnetIngressEgressGwType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoDcClusterGroup:

	case *AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *AzureVnetIngressEgressGwType_DcClusterGroupInsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoForwardProxy:

		return nil, nil

	case *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetIngressEgressGwType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoGlobalNetwork:

		return nil, nil

	case *AzureVnetIngressEgressGwType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwType) GetInsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetInsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoInsideStaticRoutes:

		return nil, nil

	case *AzureVnetIngressEgressGwType_InsideStaticRoutes:

		drInfos, err := m.GetInsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "inside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoNetworkPolicy:

		return nil, nil

	case *AzureVnetIngressEgressGwType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes:

		return nil, nil

	case *AzureVnetIngressEgressGwType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateAzureVnetIngressEgressGwType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetIngressEgressGwType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) HubChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hub_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) InsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for inside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) AzNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for az_nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.AzureVnetTwoInterfaceNodeType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.AzureVnetTwoInterfaceNodeTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for az_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.AzureVnetTwoInterfaceNodeType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.AzureVnetTwoInterfaceNodeType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated az_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items az_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) AzureCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetIngressEgressGwType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetIngressEgressGwType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["accelerated_networking"]; exists {

		vOpts := append(opts, db.WithValidateField("accelerated_networking"))
		if err := fv(ctx, m.GetAcceleratedNetworking(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["az_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("az_nodes"))
		if err := fv(ctx, m.GetAzNodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["azure_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_certified_hw"))
		if err := fv(ctx, m.GetAzureCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn).DcClusterGroupOutsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_outside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_DcClusterGroupInsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwType_DcClusterGroupInsideVn).DcClusterGroupInsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_inside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["hub_choice"]; exists {
		val := m.GetHubChoice()
		vOpts := append(opts,
			db.WithValidateField("hub_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHubChoice().(type) {
	case *AzureVnetIngressEgressGwType_NotHub:
		if fv, exists := v.FldValidators["hub_choice.not_hub"]; exists {
			val := m.GetHubChoice().(*AzureVnetIngressEgressGwType_NotHub).NotHub
			vOpts := append(opts,
				db.WithValidateField("hub_choice"),
				db.WithValidateField("not_hub"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_Hub:
		if fv, exists := v.FldValidators["hub_choice.hub"]; exists {
			val := m.GetHubChoice().(*AzureVnetIngressEgressGwType_Hub).Hub
			vOpts := append(opts,
				db.WithValidateField("hub_choice"),
				db.WithValidateField("hub"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["inside_static_route_choice"]; exists {
		val := m.GetInsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("inside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoInsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.no_inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_NoInsideStaticRoutes).NoInsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("no_inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_InsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_InsideStaticRoutes).InsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *AzureVnetIngressEgressGwType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetIngressEgressGwTypeValidator = func() *ValidateAzureVnetIngressEgressGwType {
	v := &ValidateAzureVnetIngressEgressGwType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhHubChoice := v.HubChoiceValidationRuleHandler
	rulesHubChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHubChoice(rulesHubChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.hub_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hub_choice"] = vFn

	vrhInsideStaticRouteChoice := v.InsideStaticRouteChoiceValidationRuleHandler
	rulesInsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsideStaticRouteChoice(rulesInsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.inside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["inside_static_route_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	vrhAzNodes := v.AzNodesValidationRuleHandler
	rulesAzNodes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.num_items": "1,3",
	}
	vFn, err = vrhAzNodes(rulesAzNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.az_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["az_nodes"] = vFn

	vrhAzureCertifiedHw := v.AzureCertifiedHwValidationRuleHandler
	rulesAzureCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"azure-byol-multi-nic-voltmesh\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhAzureCertifiedHw(rulesAzureCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.azure_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_certified_hw"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["hub_choice.hub"] = AzureHubVnetTypeValidator().Validate

	v.FldValidators["inside_static_route_choice.inside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	v.FldValidators["accelerated_networking"] = ves_io_schema_views.AcceleratedNetworkingTypeValidator().Validate

	return v
}()

func AzureVnetIngressEgressGwTypeValidator() db.Validator {
	return DefaultAzureVnetIngressEgressGwTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetIngressGwARReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetIngressGwARReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureVnetIngressGwARReplaceType) DeepCopy() *AzureVnetIngressGwARReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetIngressGwARReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetIngressGwARReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetIngressGwARReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetIngressGwARReplaceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAzureVnetIngressGwARReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetIngressGwARReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetIngressGwARReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetIngressGwARReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetIngressGwARReplaceTypeValidator = func() *ValidateAzureVnetIngressGwARReplaceType {
	v := &ValidateAzureVnetIngressGwARReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AzureVnetIngressGwARReplaceTypeValidator() db.Validator {
	return DefaultAzureVnetIngressGwARReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetIngressGwARType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetIngressGwARType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureVnetIngressGwARType) DeepCopy() *AzureVnetIngressGwARType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetIngressGwARType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetIngressGwARType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetIngressGwARType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetIngressGwARTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAzureVnetIngressGwARType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetIngressGwARType) AzureCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressGwARType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetIngressGwARType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetIngressGwARType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["accelerated_networking"]; exists {

		vOpts := append(opts, db.WithValidateField("accelerated_networking"))
		if err := fv(ctx, m.GetAcceleratedNetworking(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["azure_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_certified_hw"))
		if err := fv(ctx, m.GetAzureCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["node"]; exists {

		vOpts := append(opts, db.WithValidateField("node"))
		if err := fv(ctx, m.GetNode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetIngressGwARTypeValidator = func() *ValidateAzureVnetIngressGwARType {
	v := &ValidateAzureVnetIngressGwARType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAzureCertifiedHw := v.AzureCertifiedHwValidationRuleHandler
	rulesAzureCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"azure-byol-voltmesh\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhAzureCertifiedHw(rulesAzureCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressGwARType.azure_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_certified_hw"] = vFn

	v.FldValidators["node"] = ves_io_schema_views.AzureVnetOneInterfaceNodeARTypeValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	v.FldValidators["accelerated_networking"] = ves_io_schema_views.AcceleratedNetworkingTypeValidator().Validate

	return v
}()

func AzureVnetIngressGwARTypeValidator() db.Validator {
	return DefaultAzureVnetIngressGwARTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetIngressGwReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetIngressGwReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureVnetIngressGwReplaceType) DeepCopy() *AzureVnetIngressGwReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetIngressGwReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetIngressGwReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetIngressGwReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetIngressGwReplaceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAzureVnetIngressGwReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetIngressGwReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetIngressGwReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetIngressGwReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetIngressGwReplaceTypeValidator = func() *ValidateAzureVnetIngressGwReplaceType {
	v := &ValidateAzureVnetIngressGwReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AzureVnetIngressGwReplaceTypeValidator() db.Validator {
	return DefaultAzureVnetIngressGwReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetIngressGwType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetIngressGwType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureVnetIngressGwType) DeepCopy() *AzureVnetIngressGwType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetIngressGwType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetIngressGwType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetIngressGwType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetIngressGwTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAzureVnetIngressGwType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetIngressGwType) AzNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for az_nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.AzureVnetOneInterfaceNodeType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.AzureVnetOneInterfaceNodeTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for az_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.AzureVnetOneInterfaceNodeType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.AzureVnetOneInterfaceNodeType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated az_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items az_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressGwType) AzureCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressGwType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetIngressGwType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetIngressGwType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["accelerated_networking"]; exists {

		vOpts := append(opts, db.WithValidateField("accelerated_networking"))
		if err := fv(ctx, m.GetAcceleratedNetworking(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["az_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("az_nodes"))
		if err := fv(ctx, m.GetAzNodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["azure_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_certified_hw"))
		if err := fv(ctx, m.GetAzureCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetIngressGwTypeValidator = func() *ValidateAzureVnetIngressGwType {
	v := &ValidateAzureVnetIngressGwType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAzNodes := v.AzNodesValidationRuleHandler
	rulesAzNodes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.num_items": "1,3",
	}
	vFn, err = vrhAzNodes(rulesAzNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressGwType.az_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["az_nodes"] = vFn

	vrhAzureCertifiedHw := v.AzureCertifiedHwValidationRuleHandler
	rulesAzureCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"azure-byol-voltmesh\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhAzureCertifiedHw(rulesAzureCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressGwType.azure_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_certified_hw"] = vFn

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	v.FldValidators["accelerated_networking"] = ves_io_schema_views.AcceleratedNetworkingTypeValidator().Validate

	return v
}()

func AzureVnetIngressGwTypeValidator() db.Validator {
	return DefaultAzureVnetIngressGwTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetSiteInfoType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetSiteInfoType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureVnetSiteInfoType) DeepCopy() *AzureVnetSiteInfoType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetSiteInfoType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetSiteInfoType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetSiteInfoType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetSiteInfoTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAzureVnetSiteInfoType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetSiteInfoType) PublicIpsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for public_ips")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for public_ips")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated public_ips")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items public_ips")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetSiteInfoType) PrivateIpsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for private_ips")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for private_ips")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated private_ips")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items private_ips")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetSiteInfoType) SpokeVnetPrefixInfoValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for spoke_vnet_prefix_info")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*VnetIpPrefixesType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := VnetIpPrefixesTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for spoke_vnet_prefix_info")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*VnetIpPrefixesType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*VnetIpPrefixesType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated spoke_vnet_prefix_info")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items spoke_vnet_prefix_info")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetSiteInfoType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetSiteInfoType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetSiteInfoType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["express_route_info"]; exists {

		vOpts := append(opts, db.WithValidateField("express_route_info"))
		if err := fv(ctx, m.GetExpressRouteInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["node_info"]; exists {

		vOpts := append(opts, db.WithValidateField("node_info"))
		for idx, item := range m.GetNodeInfo() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["private_ips"]; exists {
		vOpts := append(opts, db.WithValidateField("private_ips"))
		if err := fv(ctx, m.GetPrivateIps(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["public_ips"]; exists {
		vOpts := append(opts, db.WithValidateField("public_ips"))
		if err := fv(ctx, m.GetPublicIps(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["spoke_vnet_prefix_info"]; exists {
		vOpts := append(opts, db.WithValidateField("spoke_vnet_prefix_info"))
		if err := fv(ctx, m.GetSpokeVnetPrefixInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vnet"]; exists {

		vOpts := append(opts, db.WithValidateField("vnet"))
		if err := fv(ctx, m.GetVnet(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetSiteInfoTypeValidator = func() *ValidateAzureVnetSiteInfoType {
	v := &ValidateAzureVnetSiteInfoType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPublicIps := v.PublicIpsValidationRuleHandler
	rulesPublicIps := map[string]string{
		"ves.io.schema.rules.message.required":         "true",
		"ves.io.schema.rules.repeated.items.string.ip": "true",
		"ves.io.schema.rules.repeated.num_items":       "0,1,3",
		"ves.io.schema.rules.repeated.unique":          "true",
	}
	vFn, err = vrhPublicIps(rulesPublicIps)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetSiteInfoType.public_ips: %s", err)
		panic(errMsg)
	}
	v.FldValidators["public_ips"] = vFn

	vrhPrivateIps := v.PrivateIpsValidationRuleHandler
	rulesPrivateIps := map[string]string{
		"ves.io.schema.rules.message.required":         "true",
		"ves.io.schema.rules.repeated.items.string.ip": "true",
		"ves.io.schema.rules.repeated.num_items":       "0,1,3",
		"ves.io.schema.rules.repeated.unique":          "true",
	}
	vFn, err = vrhPrivateIps(rulesPrivateIps)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetSiteInfoType.private_ips: %s", err)
		panic(errMsg)
	}
	v.FldValidators["private_ips"] = vFn

	vrhSpokeVnetPrefixInfo := v.SpokeVnetPrefixInfoValidationRuleHandler
	rulesSpokeVnetPrefixInfo := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "500",
	}
	vFn, err = vrhSpokeVnetPrefixInfo(rulesSpokeVnetPrefixInfo)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetSiteInfoType.spoke_vnet_prefix_info: %s", err)
		panic(errMsg)
	}
	v.FldValidators["spoke_vnet_prefix_info"] = vFn

	v.FldValidators["node_info"] = NodeInstanceNameTypeValidator().Validate

	return v
}()

func AzureVnetSiteInfoTypeValidator() db.Validator {
	return DefaultAzureVnetSiteInfoTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetVoltstackClusterARReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetVoltstackClusterARReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureVnetVoltstackClusterARReplaceType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetVoltstackClusterARReplaceType.global_network_list")
	}

	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) DeepCopy() *AzureVnetVoltstackClusterARReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetVoltstackClusterARReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetVoltstackClusterARReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetVoltstackClusterARReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetVoltstackClusterARReplaceTypeValidator().Validate(ctx, m, opts...)
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *AzureVnetVoltstackClusterARReplaceType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup:

		return nil, nil

	case *AzureVnetVoltstackClusterARReplaceType_DcClusterGroup:

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AzureVnetVoltstackClusterARReplaceType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup:

	case *AzureVnetVoltstackClusterARReplaceType_DcClusterGroup:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterARReplaceType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetVoltstackClusterARReplaceType_NoForwardProxy:

		return nil, nil

	case *AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterARReplaceType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork:

		return nil, nil

	case *AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterARReplaceType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy:

		return nil, nil

	case *AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterARReplaceType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes:

		return nil, nil

	case *AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateAzureVnetVoltstackClusterARReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetVoltstackClusterARReplaceType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARReplaceType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARReplaceType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARReplaceType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARReplaceType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARReplaceType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetVoltstackClusterARReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetVoltstackClusterARReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARReplaceType_DcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterARReplaceType_DcClusterGroup).DcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetVoltstackClusterARReplaceType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARReplaceType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetVoltstackClusterARReplaceTypeValidator = func() *ValidateAzureVnetVoltstackClusterARReplaceType {
	v := &ValidateAzureVnetVoltstackClusterARReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARReplaceType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARReplaceType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARReplaceType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARReplaceType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARReplaceType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARReplaceType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	return v
}()

func AzureVnetVoltstackClusterARReplaceTypeValidator() db.Validator {
	return DefaultAzureVnetVoltstackClusterARReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetVoltstackClusterARType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetVoltstackClusterARType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureVnetVoltstackClusterARType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetVoltstackClusterARType.global_network_list")
	}

	return nil
}

func (m *AzureVnetVoltstackClusterARType) DeepCopy() *AzureVnetVoltstackClusterARType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetVoltstackClusterARType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetVoltstackClusterARType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetVoltstackClusterARType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetVoltstackClusterARTypeValidator().Validate(ctx, m, opts...)
}

func (m *AzureVnetVoltstackClusterARType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetK8SClusterChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetK8SClusterChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *AzureVnetVoltstackClusterARType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetVoltstackClusterARType_NoDcClusterGroup:

		return nil, nil

	case *AzureVnetVoltstackClusterARType_DcClusterGroup:

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AzureVnetVoltstackClusterARType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetVoltstackClusterARType_NoDcClusterGroup:

	case *AzureVnetVoltstackClusterARType_DcClusterGroup:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterARType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetVoltstackClusterARType_NoForwardProxy:

		return nil, nil

	case *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterARType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetVoltstackClusterARType_NoGlobalNetwork:

		return nil, nil

	case *AzureVnetVoltstackClusterARType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *AzureVnetVoltstackClusterARType) GetK8SClusterChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetK8SClusterChoice().(type) {
	case *AzureVnetVoltstackClusterARType_NoK8SCluster:

		return nil, nil

	case *AzureVnetVoltstackClusterARType_K8SCluster:

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("k8s_cluster.Object")
		dri := db.DRefInfo{
			RefdType:   "k8s_cluster.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "k8s_cluster",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetK8SClusterChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AzureVnetVoltstackClusterARType) GetK8SClusterChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetK8SClusterChoice().(type) {
	case *AzureVnetVoltstackClusterARType_NoK8SCluster:

	case *AzureVnetVoltstackClusterARType_K8SCluster:
		refdType, err := d.TypeForEntryKind("", "", "k8s_cluster.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: k8s_cluster")
		}

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "k8s_cluster.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterARType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetVoltstackClusterARType_NoNetworkPolicy:

		return nil, nil

	case *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterARType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes:

		return nil, nil

	case *AzureVnetVoltstackClusterARType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateAzureVnetVoltstackClusterARType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetVoltstackClusterARType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARType) K8SClusterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for k8s_cluster_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARType) StorageClassChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for storage_class_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARType) AzureCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterARType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetVoltstackClusterARType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetVoltstackClusterARType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["accelerated_networking"]; exists {

		vOpts := append(opts, db.WithValidateField("accelerated_networking"))
		if err := fv(ctx, m.GetAcceleratedNetworking(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["azure_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_certified_hw"))
		if err := fv(ctx, m.GetAzureCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetVoltstackClusterARType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterARType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARType_DcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterARType_DcClusterGroup).DcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetVoltstackClusterARType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetVoltstackClusterARType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterARType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterARType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["k8s_cluster_choice"]; exists {
		val := m.GetK8SClusterChoice()
		vOpts := append(opts,
			db.WithValidateField("k8s_cluster_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetK8SClusterChoice().(type) {
	case *AzureVnetVoltstackClusterARType_NoK8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.no_k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*AzureVnetVoltstackClusterARType_NoK8SCluster).NoK8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("no_k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARType_K8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*AzureVnetVoltstackClusterARType_K8SCluster).K8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetVoltstackClusterARType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterARType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterARType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["node"]; exists {

		vOpts := append(opts, db.WithValidateField("node"))
		if err := fv(ctx, m.GetNode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterARType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *AzureVnetVoltstackClusterARType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterARType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterARType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["storage_class_choice"]; exists {
		val := m.GetStorageClassChoice()
		vOpts := append(opts,
			db.WithValidateField("storage_class_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStorageClassChoice().(type) {
	case *AzureVnetVoltstackClusterARType_DefaultStorage:
		if fv, exists := v.FldValidators["storage_class_choice.default_storage"]; exists {
			val := m.GetStorageClassChoice().(*AzureVnetVoltstackClusterARType_DefaultStorage).DefaultStorage
			vOpts := append(opts,
				db.WithValidateField("storage_class_choice"),
				db.WithValidateField("default_storage"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterARType_StorageClassList:
		if fv, exists := v.FldValidators["storage_class_choice.storage_class_list"]; exists {
			val := m.GetStorageClassChoice().(*AzureVnetVoltstackClusterARType_StorageClassList).StorageClassList
			vOpts := append(opts,
				db.WithValidateField("storage_class_choice"),
				db.WithValidateField("storage_class_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetVoltstackClusterARTypeValidator = func() *ValidateAzureVnetVoltstackClusterARType {
	v := &ValidateAzureVnetVoltstackClusterARType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhK8SClusterChoice := v.K8SClusterChoiceValidationRuleHandler
	rulesK8SClusterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhK8SClusterChoice(rulesK8SClusterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARType.k8s_cluster_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["k8s_cluster_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	vrhStorageClassChoice := v.StorageClassChoiceValidationRuleHandler
	rulesStorageClassChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStorageClassChoice(rulesStorageClassChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARType.storage_class_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_class_choice"] = vFn

	vrhAzureCertifiedHw := v.AzureCertifiedHwValidationRuleHandler
	rulesAzureCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"azure-byol-voltstack-combo\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhAzureCertifiedHw(rulesAzureCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterARType.azure_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_certified_hw"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["k8s_cluster_choice.k8s_cluster"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["storage_class_choice.storage_class_list"] = ves_io_schema_views.StorageClassListTypeValidator().Validate

	v.FldValidators["node"] = ves_io_schema_views.AzureVnetOneInterfaceNodeARTypeValidator().Validate

	v.FldValidators["accelerated_networking"] = ves_io_schema_views.AcceleratedNetworkingTypeValidator().Validate

	return v
}()

func AzureVnetVoltstackClusterARTypeValidator() db.Validator {
	return DefaultAzureVnetVoltstackClusterARTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetVoltstackClusterReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetVoltstackClusterReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureVnetVoltstackClusterReplaceType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetVoltstackClusterReplaceType.global_network_list")
	}

	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) DeepCopy() *AzureVnetVoltstackClusterReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetVoltstackClusterReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetVoltstackClusterReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetVoltstackClusterReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetVoltstackClusterReplaceTypeValidator().Validate(ctx, m, opts...)
}

func (m *AzureVnetVoltstackClusterReplaceType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *AzureVnetVoltstackClusterReplaceType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup:

		return nil, nil

	case *AzureVnetVoltstackClusterReplaceType_DcClusterGroup:

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AzureVnetVoltstackClusterReplaceType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup:

	case *AzureVnetVoltstackClusterReplaceType_DcClusterGroup:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterReplaceType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoForwardProxy:

		return nil, nil

	case *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterReplaceType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork:

		return nil, nil

	case *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterReplaceType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy:

		return nil, nil

	case *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterReplaceType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes:

		return nil, nil

	case *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateAzureVnetVoltstackClusterReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetVoltstackClusterReplaceType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterReplaceType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterReplaceType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterReplaceType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterReplaceType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterReplaceType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetVoltstackClusterReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetVoltstackClusterReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterReplaceType_DcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterReplaceType_DcClusterGroup).DcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetVoltstackClusterReplaceTypeValidator = func() *ValidateAzureVnetVoltstackClusterReplaceType {
	v := &ValidateAzureVnetVoltstackClusterReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterReplaceType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterReplaceType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterReplaceType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterReplaceType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterReplaceType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterReplaceType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	return v
}()

func AzureVnetVoltstackClusterReplaceTypeValidator() db.Validator {
	return DefaultAzureVnetVoltstackClusterReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetVoltstackClusterType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetVoltstackClusterType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureVnetVoltstackClusterType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetVoltstackClusterType.global_network_list")
	}

	return nil
}

func (m *AzureVnetVoltstackClusterType) DeepCopy() *AzureVnetVoltstackClusterType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetVoltstackClusterType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetVoltstackClusterType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetVoltstackClusterType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetVoltstackClusterTypeValidator().Validate(ctx, m, opts...)
}

func (m *AzureVnetVoltstackClusterType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetK8SClusterChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetK8SClusterChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *AzureVnetVoltstackClusterType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoDcClusterGroup:

		return nil, nil

	case *AzureVnetVoltstackClusterType_DcClusterGroup:

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AzureVnetVoltstackClusterType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoDcClusterGroup:

	case *AzureVnetVoltstackClusterType_DcClusterGroup:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoForwardProxy:

		return nil, nil

	case *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetVoltstackClusterType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoGlobalNetwork:

		return nil, nil

	case *AzureVnetVoltstackClusterType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *AzureVnetVoltstackClusterType) GetK8SClusterChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetK8SClusterChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoK8SCluster:

		return nil, nil

	case *AzureVnetVoltstackClusterType_K8SCluster:

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("k8s_cluster.Object")
		dri := db.DRefInfo{
			RefdType:   "k8s_cluster.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "k8s_cluster",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetK8SClusterChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AzureVnetVoltstackClusterType) GetK8SClusterChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetK8SClusterChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoK8SCluster:

	case *AzureVnetVoltstackClusterType_K8SCluster:
		refdType, err := d.TypeForEntryKind("", "", "k8s_cluster.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: k8s_cluster")
		}

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "k8s_cluster.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoNetworkPolicy:

		return nil, nil

	case *AzureVnetVoltstackClusterType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes:

		return nil, nil

	case *AzureVnetVoltstackClusterType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateAzureVnetVoltstackClusterType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetVoltstackClusterType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) K8SClusterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for k8s_cluster_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) StorageClassChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for storage_class_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) AzureCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) AzNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for az_nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.AzureVnetOneInterfaceNodeType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.AzureVnetOneInterfaceNodeTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for az_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.AzureVnetOneInterfaceNodeType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.AzureVnetOneInterfaceNodeType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated az_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items az_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetVoltstackClusterType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetVoltstackClusterType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["accelerated_networking"]; exists {

		vOpts := append(opts, db.WithValidateField("accelerated_networking"))
		if err := fv(ctx, m.GetAcceleratedNetworking(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["az_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("az_nodes"))
		if err := fv(ctx, m.GetAzNodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["azure_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_certified_hw"))
		if err := fv(ctx, m.GetAzureCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_DcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterType_DcClusterGroup).DcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["k8s_cluster_choice"]; exists {
		val := m.GetK8SClusterChoice()
		vOpts := append(opts,
			db.WithValidateField("k8s_cluster_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetK8SClusterChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoK8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.no_k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*AzureVnetVoltstackClusterType_NoK8SCluster).NoK8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("no_k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_K8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*AzureVnetVoltstackClusterType_K8SCluster).K8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *AzureVnetVoltstackClusterType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["storage_class_choice"]; exists {
		val := m.GetStorageClassChoice()
		vOpts := append(opts,
			db.WithValidateField("storage_class_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStorageClassChoice().(type) {
	case *AzureVnetVoltstackClusterType_DefaultStorage:
		if fv, exists := v.FldValidators["storage_class_choice.default_storage"]; exists {
			val := m.GetStorageClassChoice().(*AzureVnetVoltstackClusterType_DefaultStorage).DefaultStorage
			vOpts := append(opts,
				db.WithValidateField("storage_class_choice"),
				db.WithValidateField("default_storage"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_StorageClassList:
		if fv, exists := v.FldValidators["storage_class_choice.storage_class_list"]; exists {
			val := m.GetStorageClassChoice().(*AzureVnetVoltstackClusterType_StorageClassList).StorageClassList
			vOpts := append(opts,
				db.WithValidateField("storage_class_choice"),
				db.WithValidateField("storage_class_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetVoltstackClusterTypeValidator = func() *ValidateAzureVnetVoltstackClusterType {
	v := &ValidateAzureVnetVoltstackClusterType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhK8SClusterChoice := v.K8SClusterChoiceValidationRuleHandler
	rulesK8SClusterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhK8SClusterChoice(rulesK8SClusterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.k8s_cluster_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["k8s_cluster_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	vrhStorageClassChoice := v.StorageClassChoiceValidationRuleHandler
	rulesStorageClassChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStorageClassChoice(rulesStorageClassChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.storage_class_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_class_choice"] = vFn

	vrhAzureCertifiedHw := v.AzureCertifiedHwValidationRuleHandler
	rulesAzureCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"azure-byol-voltstack-combo\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhAzureCertifiedHw(rulesAzureCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.azure_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_certified_hw"] = vFn

	vrhAzNodes := v.AzNodesValidationRuleHandler
	rulesAzNodes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.num_items": "1,3",
	}
	vFn, err = vrhAzNodes(rulesAzNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.az_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["az_nodes"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["k8s_cluster_choice.k8s_cluster"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["storage_class_choice.storage_class_list"] = ves_io_schema_views.StorageClassListTypeValidator().Validate

	v.FldValidators["accelerated_networking"] = ves_io_schema_views.AcceleratedNetworkingTypeValidator().Validate

	return v
}()

func AzureVnetVoltstackClusterTypeValidator() db.Validator {
	return DefaultAzureVnetVoltstackClusterTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.voltstack_cluster")
	}

	if err := m.GetIngressEgressGwAr().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.ingress_egress_gw_ar")
	}

	if err := m.GetVoltstackClusterAr().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.voltstack_cluster_ar")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDeploymentDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *CreateSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDeployment().(type) {
	case *CreateSpecType_AzureCred:

		vref := m.GetAzureCred()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		dri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "azure_cred",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *CreateSpecType_AzureCred:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetAzureCred()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

func (m *CreateSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:

		return nil, nil

	case *CreateSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:

	case *CreateSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteType() == nil {
		return nil, nil
	}
	switch m.GetSiteType().(type) {
	case *CreateSpecType_IngressGw:

		return nil, nil

	case *CreateSpecType_IngressEgressGw:

		drInfos, err := m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGw().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_VoltstackCluster:

		drInfos, err := m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackCluster().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_IngressGwAr:

		return nil, nil

	case *CreateSpecType_IngressEgressGwAr:

		drInfos, err := m.GetIngressEgressGwAr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGwAr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw_ar." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_VoltstackClusterAr:

		drInfos, err := m.GetVoltstackClusterAr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackClusterAr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster_ar." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RegionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for region_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RegionChoiceAzureRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AzureRegion, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_region")
	}
	return oValidatorFn_AzureRegion, nil
}
func (v *ValidateCreateSpecType) RegionChoiceAlternateRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AlternateRegion, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for alternate_region")
	}
	return oValidatorFn_AlternateRegion, nil
}

func (v *ValidateCreateSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for worker_nodes")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) WorkerNodesNodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_NodesPerAz, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}
	return oValidatorFn_NodesPerAz, nil
}
func (v *ValidateCreateSpecType) WorkerNodesTotalNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TotalNodes, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for total_nodes")
	}
	return oValidatorFn_TotalNodes, nil
}

func (v *ValidateCreateSpecType) ResourceGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for resource_group")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) VnetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for vnet")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.AzureVnetChoiceTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) MachineTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for machine_type")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) TagsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for tags")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for tags")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for tags")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map tags")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tags")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *CreateSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*CreateSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*CreateSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BlockAllServices:
		if fv, exists := v.FldValidators["blocked_services_choice.block_all_services"]; exists {
			val := m.GetBlockedServicesChoice().(*CreateSpecType_BlockAllServices).BlockAllServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("block_all_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *CreateSpecType_AzureCred:
		if fv, exists := v.FldValidators["deployment.azure_cred"]; exists {
			val := m.GetDeployment().(*CreateSpecType_AzureCred).AzureCred
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("azure_cred"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["kubernetes_upgrade_drain"]; exists {

		vOpts := append(opts, db.WithValidateField("kubernetes_upgrade_drain"))
		if err := fv(ctx, m.GetKubernetesUpgradeDrain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["machine_type"]; exists {

		vOpts := append(opts, db.WithValidateField("machine_type"))
		if err := fv(ctx, m.GetMachineType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["os"]; exists {

		vOpts := append(opts, db.WithValidateField("os"))
		if err := fv(ctx, m.GetOs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["region_choice"]; exists {
		val := m.GetRegionChoice()
		vOpts := append(opts,
			db.WithValidateField("region_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRegionChoice().(type) {
	case *CreateSpecType_AzureRegion:
		if fv, exists := v.FldValidators["region_choice.azure_region"]; exists {
			val := m.GetRegionChoice().(*CreateSpecType_AzureRegion).AzureRegion
			vOpts := append(opts,
				db.WithValidateField("region_choice"),
				db.WithValidateField("azure_region"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AlternateRegion:
		if fv, exists := v.FldValidators["region_choice.alternate_region"]; exists {
			val := m.GetRegionChoice().(*CreateSpecType_AlternateRegion).AlternateRegion
			vOpts := append(opts,
				db.WithValidateField("region_choice"),
				db.WithValidateField("alternate_region"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["resource_group"]; exists {

		vOpts := append(opts, db.WithValidateField("resource_group"))
		if err := fv(ctx, m.GetResourceGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *CreateSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*CreateSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*CreateSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*CreateSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IngressGwAr:
		if fv, exists := v.FldValidators["site_type.ingress_gw_ar"]; exists {
			val := m.GetSiteType().(*CreateSpecType_IngressGwAr).IngressGwAr
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw_ar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IngressEgressGwAr:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw_ar"]; exists {
			val := m.GetSiteType().(*CreateSpecType_IngressEgressGwAr).IngressEgressGwAr
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw_ar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_VoltstackClusterAr:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster_ar"]; exists {
			val := m.GetSiteType().(*CreateSpecType_VoltstackClusterAr).VoltstackClusterAr
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster_ar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sw"]; exists {

		vOpts := append(opts, db.WithValidateField("sw"))
		if err := fv(ctx, m.GetSw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {
		vOpts := append(opts, db.WithValidateField("tags"))
		if err := fv(ctx, m.GetTags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vnet"]; exists {

		vOpts := append(opts, db.WithValidateField("vnet"))
		if err := fv(ctx, m.GetVnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		val := m.GetWorkerNodes()
		vOpts := append(opts,
			db.WithValidateField("worker_nodes"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWorkerNodes().(type) {
	case *CreateSpecType_NodesPerAz:
		if fv, exists := v.FldValidators["worker_nodes.nodes_per_az"]; exists {
			val := m.GetWorkerNodes().(*CreateSpecType_NodesPerAz).NodesPerAz
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("nodes_per_az"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_TotalNodes:
		if fv, exists := v.FldValidators["worker_nodes.total_nodes"]; exists {
			val := m.GetWorkerNodes().(*CreateSpecType_TotalNodes).TotalNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("total_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NoWorkerNodes:
		if fv, exists := v.FldValidators["worker_nodes.no_worker_nodes"]; exists {
			val := m.GetWorkerNodes().(*CreateSpecType_NoWorkerNodes).NoWorkerNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("no_worker_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhRegionChoice := v.RegionChoiceValidationRuleHandler
	rulesRegionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRegionChoice(rulesRegionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.region_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["region_choice"] = vFn

	vrhRegionChoiceAzureRegion := v.RegionChoiceAzureRegionValidationRuleHandler
	rulesRegionChoiceAzureRegion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFnMap["region_choice.azure_region"], err = vrhRegionChoiceAzureRegion(rulesRegionChoiceAzureRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.region_choice_azure_region: %s", err)
		panic(errMsg)
	}
	vrhRegionChoiceAlternateRegion := v.RegionChoiceAlternateRegionValidationRuleHandler
	rulesRegionChoiceAlternateRegion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFnMap["region_choice.alternate_region"], err = vrhRegionChoiceAlternateRegion(rulesRegionChoiceAlternateRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.region_choice_alternate_region: %s", err)
		panic(errMsg)
	}

	v.FldValidators["region_choice.azure_region"] = vFnMap["region_choice.azure_region"]
	v.FldValidators["region_choice.alternate_region"] = vFnMap["region_choice.alternate_region"]

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhWorkerNodesNodesPerAz := v.WorkerNodesNodesPerAzValidationRuleHandler
	rulesWorkerNodesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFnMap["worker_nodes.nodes_per_az"], err = vrhWorkerNodesNodesPerAz(rulesWorkerNodesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.worker_nodes_nodes_per_az: %s", err)
		panic(errMsg)
	}
	vrhWorkerNodesTotalNodes := v.WorkerNodesTotalNodesValidationRuleHandler
	rulesWorkerNodesTotalNodes := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "61",
	}
	vFnMap["worker_nodes.total_nodes"], err = vrhWorkerNodesTotalNodes(rulesWorkerNodesTotalNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.worker_nodes_total_nodes: %s", err)
		panic(errMsg)
	}

	v.FldValidators["worker_nodes.nodes_per_az"] = vFnMap["worker_nodes.nodes_per_az"]
	v.FldValidators["worker_nodes.total_nodes"] = vFnMap["worker_nodes.total_nodes"]

	vrhResourceGroup := v.ResourceGroupValidationRuleHandler
	rulesResourceGroup := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhResourceGroup(rulesResourceGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.resource_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["resource_group"] = vFn

	vrhVnet := v.VnetValidationRuleHandler
	rulesVnet := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVnet(rulesVnet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.vnet: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vnet"] = vFn

	vrhMachineType := v.MachineTypeValidationRuleHandler
	rulesMachineType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhMachineType(rulesMachineType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.machine_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["machine_type"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "8192",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "4095",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhTags := v.TagsValidationRuleHandler
	rulesTags := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "127",
		"ves.io.schema.rules.map.max_pairs":             "40",
		"ves.io.schema.rules.map.values.string.max_len": "255",
	}
	vFn, err = vrhTags(rulesTags)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.tags: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tags"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["deployment.azure_cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["site_type.ingress_gw"] = AzureVnetIngressGwTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw"] = AzureVnetIngressEgressGwTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = AzureVnetVoltstackClusterTypeValidator().Validate
	v.FldValidators["site_type.ingress_gw_ar"] = AzureVnetIngressGwARTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw_ar"] = AzureVnetIngressEgressGwARTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster_ar"] = AzureVnetVoltstackClusterARTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["sw"] = ves_io_schema_views.VolterraSoftwareTypeValidator().Validate

	v.FldValidators["os"] = ves_io_schema_views.OperatingSystemTypeValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	v.FldValidators["kubernetes_upgrade_drain"] = ves_io_schema_views.KubernetesUpgradeDrainValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ExpressRouteConfigType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ExpressRouteConfigType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ExpressRouteConfigType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetConnections() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting ExpressRouteConfigType.connections idx %v", idx)
		}
	}

	return nil
}

func (m *ExpressRouteConfigType) DeepCopy() *ExpressRouteConfigType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ExpressRouteConfigType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ExpressRouteConfigType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ExpressRouteConfigType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ExpressRouteConfigTypeValidator().Validate(ctx, m, opts...)
}

type ValidateExpressRouteConfigType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateExpressRouteConfigType) AsnChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for asn_choice")
	}
	return validatorFn, nil
}

func (v *ValidateExpressRouteConfigType) AsnChoiceCustomAsnValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_CustomAsn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for custom_asn")
	}
	return oValidatorFn_CustomAsn, nil
}

func (v *ValidateExpressRouteConfigType) ConnectionsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for connections")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ExpressRouteConnectionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ExpressRouteConnectionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for connections")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ExpressRouteConnectionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ExpressRouteConnectionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated connections")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items connections")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateExpressRouteConfigType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ExpressRouteConfigType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ExpressRouteConfigType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["asn_choice"]; exists {
		val := m.GetAsnChoice()
		vOpts := append(opts,
			db.WithValidateField("asn_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAsnChoice().(type) {
	case *ExpressRouteConfigType_AutoAsn:
		if fv, exists := v.FldValidators["asn_choice.auto_asn"]; exists {
			val := m.GetAsnChoice().(*ExpressRouteConfigType_AutoAsn).AutoAsn
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("auto_asn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ExpressRouteConfigType_CustomAsn:
		if fv, exists := v.FldValidators["asn_choice.custom_asn"]; exists {
			val := m.GetAsnChoice().(*ExpressRouteConfigType_CustomAsn).CustomAsn
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("custom_asn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["connections"]; exists {
		vOpts := append(opts, db.WithValidateField("connections"))
		if err := fv(ctx, m.GetConnections(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetConnectivityOptions().(type) {
	case *ExpressRouteConfigType_SiteRegistrationOverInternet:
		if fv, exists := v.FldValidators["connectivity_options.site_registration_over_internet"]; exists {
			val := m.GetConnectivityOptions().(*ExpressRouteConfigType_SiteRegistrationOverInternet).SiteRegistrationOverInternet
			vOpts := append(opts,
				db.WithValidateField("connectivity_options"),
				db.WithValidateField("site_registration_over_internet"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ExpressRouteConfigType_SiteRegistrationOverExpressRoute:
		if fv, exists := v.FldValidators["connectivity_options.site_registration_over_express_route"]; exists {
			val := m.GetConnectivityOptions().(*ExpressRouteConfigType_SiteRegistrationOverExpressRoute).SiteRegistrationOverExpressRoute
			vOpts := append(opts,
				db.WithValidateField("connectivity_options"),
				db.WithValidateField("site_registration_over_express_route"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["gateway_subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("gateway_subnet"))
		if err := fv(ctx, m.GetGatewaySubnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["route_server_subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("route_server_subnet"))
		if err := fv(ctx, m.GetRouteServerSubnet(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetSkuChoice().(type) {
	case *ExpressRouteConfigType_SkuStandard:
		if fv, exists := v.FldValidators["sku_choice.sku_standard"]; exists {
			val := m.GetSkuChoice().(*ExpressRouteConfigType_SkuStandard).SkuStandard
			vOpts := append(opts,
				db.WithValidateField("sku_choice"),
				db.WithValidateField("sku_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ExpressRouteConfigType_SkuErgw1Az:
		if fv, exists := v.FldValidators["sku_choice.sku_ergw1az"]; exists {
			val := m.GetSkuChoice().(*ExpressRouteConfigType_SkuErgw1Az).SkuErgw1Az
			vOpts := append(opts,
				db.WithValidateField("sku_choice"),
				db.WithValidateField("sku_ergw1az"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ExpressRouteConfigType_SkuHighPerf:
		if fv, exists := v.FldValidators["sku_choice.sku_high_perf"]; exists {
			val := m.GetSkuChoice().(*ExpressRouteConfigType_SkuHighPerf).SkuHighPerf
			vOpts := append(opts,
				db.WithValidateField("sku_choice"),
				db.WithValidateField("sku_high_perf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ExpressRouteConfigType_SkuErgw2Az:
		if fv, exists := v.FldValidators["sku_choice.sku_ergw2az"]; exists {
			val := m.GetSkuChoice().(*ExpressRouteConfigType_SkuErgw2Az).SkuErgw2Az
			vOpts := append(opts,
				db.WithValidateField("sku_choice"),
				db.WithValidateField("sku_ergw2az"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetSpokeVnetRoutes().(type) {
	case *ExpressRouteConfigType_AdvertiseToRouteServer:
		if fv, exists := v.FldValidators["spoke_vnet_routes.advertise_to_route_server"]; exists {
			val := m.GetSpokeVnetRoutes().(*ExpressRouteConfigType_AdvertiseToRouteServer).AdvertiseToRouteServer
			vOpts := append(opts,
				db.WithValidateField("spoke_vnet_routes"),
				db.WithValidateField("advertise_to_route_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ExpressRouteConfigType_DoNotAdvertiseToRouteServer:
		if fv, exists := v.FldValidators["spoke_vnet_routes.do_not_advertise_to_route_server"]; exists {
			val := m.GetSpokeVnetRoutes().(*ExpressRouteConfigType_DoNotAdvertiseToRouteServer).DoNotAdvertiseToRouteServer
			vOpts := append(opts,
				db.WithValidateField("spoke_vnet_routes"),
				db.WithValidateField("do_not_advertise_to_route_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultExpressRouteConfigTypeValidator = func() *ValidateExpressRouteConfigType {
	v := &ValidateExpressRouteConfigType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAsnChoice := v.AsnChoiceValidationRuleHandler
	rulesAsnChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAsnChoice(rulesAsnChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ExpressRouteConfigType.asn_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["asn_choice"] = vFn

	vrhAsnChoiceCustomAsn := v.AsnChoiceCustomAsnValidationRuleHandler
	rulesAsnChoiceCustomAsn := map[string]string{
		"ves.io.schema.rules.uint32.gt":            "1",
		"ves.io.schema.rules.uint32.lte":           "65535",
		"ves.io.schema.rules.uint32.not_in_ranges": "65515,65517,65518,65519,65520,8074,8075,12076,23456",
	}
	vFnMap["asn_choice.custom_asn"], err = vrhAsnChoiceCustomAsn(rulesAsnChoiceCustomAsn)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ExpressRouteConfigType.asn_choice_custom_asn: %s", err)
		panic(errMsg)
	}

	v.FldValidators["asn_choice.custom_asn"] = vFnMap["asn_choice.custom_asn"]

	vrhConnections := v.ConnectionsValidationRuleHandler
	rulesConnections := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhConnections(rulesConnections)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ExpressRouteConfigType.connections: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connections"] = vFn

	v.FldValidators["connectivity_options.site_registration_over_express_route"] = ves_io_schema_views.CloudLinkADNTypeValidator().Validate

	v.FldValidators["gateway_subnet"] = ves_io_schema_views.AzureSubnetChoiceWithAutoTypeValidator().Validate

	v.FldValidators["route_server_subnet"] = ves_io_schema_views.AzureSubnetChoiceWithAutoTypeValidator().Validate

	return v
}()

func ExpressRouteConfigTypeValidator() db.Validator {
	return DefaultExpressRouteConfigTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ExpressRouteConnectionType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ExpressRouteConnectionType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ExpressRouteConnectionType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetOtherSubscription().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ExpressRouteConnectionType.other_subscription")
	}

	return nil
}

func (m *ExpressRouteConnectionType) DeepCopy() *ExpressRouteConnectionType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ExpressRouteConnectionType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ExpressRouteConnectionType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ExpressRouteConnectionType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ExpressRouteConnectionTypeValidator().Validate(ctx, m, opts...)
}

type ValidateExpressRouteConnectionType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateExpressRouteConnectionType) SubscriptionChoiceCircuitIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_CircuitId, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for circuit_id")
	}
	return oValidatorFn_CircuitId, nil
}

func (v *ValidateExpressRouteConnectionType) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateExpressRouteConnectionType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ExpressRouteConnectionType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ExpressRouteConnectionType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetSubscriptionChoice().(type) {
	case *ExpressRouteConnectionType_OtherSubscription:
		if fv, exists := v.FldValidators["subscription_choice.other_subscription"]; exists {
			val := m.GetSubscriptionChoice().(*ExpressRouteConnectionType_OtherSubscription).OtherSubscription
			vOpts := append(opts,
				db.WithValidateField("subscription_choice"),
				db.WithValidateField("other_subscription"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ExpressRouteConnectionType_CircuitId:
		if fv, exists := v.FldValidators["subscription_choice.circuit_id"]; exists {
			val := m.GetSubscriptionChoice().(*ExpressRouteConnectionType_CircuitId).CircuitId
			vOpts := append(opts,
				db.WithValidateField("subscription_choice"),
				db.WithValidateField("circuit_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["weight"]; exists {

		vOpts := append(opts, db.WithValidateField("weight"))
		if err := fv(ctx, m.GetWeight(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultExpressRouteConnectionTypeValidator = func() *ValidateExpressRouteConnectionType {
	v := &ValidateExpressRouteConnectionType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSubscriptionChoiceCircuitId := v.SubscriptionChoiceCircuitIdValidationRuleHandler
	rulesSubscriptionChoiceCircuitId := map[string]string{
		"ves.io.schema.rules.string.max_len": "512",
	}
	vFnMap["subscription_choice.circuit_id"], err = vrhSubscriptionChoiceCircuitId(rulesSubscriptionChoiceCircuitId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ExpressRouteConnectionType.subscription_choice_circuit_id: %s", err)
		panic(errMsg)
	}

	v.FldValidators["subscription_choice.circuit_id"] = vFnMap["subscription_choice.circuit_id"]

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ExpressRouteConnectionType.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	v.FldValidators["subscription_choice.other_subscription"] = ExpressRouteOtherSubscriptionConnectionValidator().Validate

	return v
}()

func ExpressRouteConnectionTypeValidator() db.Validator {
	return DefaultExpressRouteConnectionTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ExpressRouteInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ExpressRouteInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ExpressRouteInfo) DeepCopy() *ExpressRouteInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ExpressRouteInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ExpressRouteInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ExpressRouteInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ExpressRouteInfoValidator().Validate(ctx, m, opts...)
}

type ValidateExpressRouteInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateExpressRouteInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ExpressRouteInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ExpressRouteInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["route_server_asn"]; exists {

		vOpts := append(opts, db.WithValidateField("route_server_asn"))
		if err := fv(ctx, m.GetRouteServerAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["route_server_ips"]; exists {

		vOpts := append(opts, db.WithValidateField("route_server_ips"))
		for idx, item := range m.GetRouteServerIps() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultExpressRouteInfoValidator = func() *ValidateExpressRouteInfo {
	v := &ValidateExpressRouteInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ExpressRouteInfoValidator() db.Validator {
	return DefaultExpressRouteInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *ExpressRouteOtherSubscriptionConnection) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ExpressRouteOtherSubscriptionConnection) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ExpressRouteOtherSubscriptionConnection) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAuthorizedKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ExpressRouteOtherSubscriptionConnection.authorized_key")
	}

	return nil
}

func (m *ExpressRouteOtherSubscriptionConnection) DeepCopy() *ExpressRouteOtherSubscriptionConnection {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ExpressRouteOtherSubscriptionConnection{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ExpressRouteOtherSubscriptionConnection) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ExpressRouteOtherSubscriptionConnection) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ExpressRouteOtherSubscriptionConnectionValidator().Validate(ctx, m, opts...)
}

type ValidateExpressRouteOtherSubscriptionConnection struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateExpressRouteOtherSubscriptionConnection) CircuitIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for circuit_id")
	}

	return validatorFn, nil
}

func (v *ValidateExpressRouteOtherSubscriptionConnection) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ExpressRouteOtherSubscriptionConnection)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ExpressRouteOtherSubscriptionConnection got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["authorized_key"]; exists {

		vOpts := append(opts, db.WithValidateField("authorized_key"))
		if err := fv(ctx, m.GetAuthorizedKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["circuit_id"]; exists {

		vOpts := append(opts, db.WithValidateField("circuit_id"))
		if err := fv(ctx, m.GetCircuitId(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultExpressRouteOtherSubscriptionConnectionValidator = func() *ValidateExpressRouteOtherSubscriptionConnection {
	v := &ValidateExpressRouteOtherSubscriptionConnection{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCircuitId := v.CircuitIdValidationRuleHandler
	rulesCircuitId := map[string]string{
		"ves.io.schema.rules.string.max_len": "512",
	}
	vFn, err = vrhCircuitId(rulesCircuitId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ExpressRouteOtherSubscriptionConnection.circuit_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["circuit_id"] = vFn

	v.FldValidators["authorized_key"] = ves_io_schema.SecretTypeValidator().Validate

	return v
}()

func ExpressRouteOtherSubscriptionConnectionValidator() db.Validator {
	return DefaultExpressRouteOtherSubscriptionConnectionValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.voltstack_cluster")
	}

	if err := m.GetIngressEgressGwAr().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.ingress_egress_gw_ar")
	}

	if err := m.GetVoltstackClusterAr().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.voltstack_cluster_ar")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDeploymentDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GetSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDeployment().(type) {
	case *GetSpecType_AzureCred:

		vref := m.GetAzureCred()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		dri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "azure_cred",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GetSpecType_Assisted:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *GetSpecType_AzureCred:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetAzureCred()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GetSpecType_Assisted:

	}

	return entries, nil
}

func (m *GetSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:

		return nil, nil

	case *GetSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:

	case *GetSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteType() == nil {
		return nil, nil
	}
	switch m.GetSiteType().(type) {
	case *GetSpecType_IngressGw:

		return nil, nil

	case *GetSpecType_IngressEgressGw:

		drInfos, err := m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGw().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_VoltstackCluster:

		drInfos, err := m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackCluster().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_IngressGwAr:

		return nil, nil

	case *GetSpecType_IngressEgressGwAr:

		drInfos, err := m.GetIngressEgressGwAr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGwAr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw_ar." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_VoltstackClusterAr:

		drInfos, err := m.GetVoltstackClusterAr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackClusterAr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster_ar." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) RegionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for region_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) RegionChoiceAzureRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AzureRegion, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_region")
	}
	return oValidatorFn_AzureRegion, nil
}
func (v *ValidateGetSpecType) RegionChoiceAlternateRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AlternateRegion, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for alternate_region")
	}
	return oValidatorFn_AlternateRegion, nil
}

func (v *ValidateGetSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for worker_nodes")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) WorkerNodesNodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_NodesPerAz, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}
	return oValidatorFn_NodesPerAz, nil
}
func (v *ValidateGetSpecType) WorkerNodesTotalNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TotalNodes, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for total_nodes")
	}
	return oValidatorFn_TotalNodes, nil
}

func (v *ValidateGetSpecType) ResourceGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for resource_group")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) VnetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for vnet")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.AzureVnetChoiceTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) MachineTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for machine_type")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) VolterraSoftwareVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_software_version")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) OperatingSystemVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for operating_system_version")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) VipParamsPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for vip_params_per_az")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_site.PublishVIPParamsPerAz, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_site.PublishVIPParamsPerAzValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for vip_params_per_az")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_site.PublishVIPParamsPerAz)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_site.PublishVIPParamsPerAz, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated vip_params_per_az")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items vip_params_per_az")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) TagsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for tags")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for tags")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for tags")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map tags")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tags")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *GetSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GetSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GetSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BlockAllServices:
		if fv, exists := v.FldValidators["blocked_services_choice.block_all_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GetSpecType_BlockAllServices).BlockAllServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("block_all_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cloud_site_info"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_site_info"))
		if err := fv(ctx, m.GetCloudSiteInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *GetSpecType_AzureCred:
		if fv, exists := v.FldValidators["deployment.azure_cred"]; exists {
			val := m.GetDeployment().(*GetSpecType_AzureCred).AzureCred
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("azure_cred"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Assisted:
		if fv, exists := v.FldValidators["deployment.assisted"]; exists {
			val := m.GetDeployment().(*GetSpecType_Assisted).Assisted
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("assisted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["error_description"]; exists {

		vOpts := append(opts, db.WithValidateField("error_description"))
		if err := fv(ctx, m.GetErrorDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["kubernetes_upgrade_drain"]; exists {

		vOpts := append(opts, db.WithValidateField("kubernetes_upgrade_drain"))
		if err := fv(ctx, m.GetKubernetesUpgradeDrain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["machine_type"]; exists {

		vOpts := append(opts, db.WithValidateField("machine_type"))
		if err := fv(ctx, m.GetMachineType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["operating_system_version"]; exists {

		vOpts := append(opts, db.WithValidateField("operating_system_version"))
		if err := fv(ctx, m.GetOperatingSystemVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["region_choice"]; exists {
		val := m.GetRegionChoice()
		vOpts := append(opts,
			db.WithValidateField("region_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRegionChoice().(type) {
	case *GetSpecType_AzureRegion:
		if fv, exists := v.FldValidators["region_choice.azure_region"]; exists {
			val := m.GetRegionChoice().(*GetSpecType_AzureRegion).AzureRegion
			vOpts := append(opts,
				db.WithValidateField("region_choice"),
				db.WithValidateField("azure_region"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AlternateRegion:
		if fv, exists := v.FldValidators["region_choice.alternate_region"]; exists {
			val := m.GetRegionChoice().(*GetSpecType_AlternateRegion).AlternateRegion
			vOpts := append(opts,
				db.WithValidateField("region_choice"),
				db.WithValidateField("alternate_region"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["resource_group"]; exists {

		vOpts := append(opts, db.WithValidateField("resource_group"))
		if err := fv(ctx, m.GetResourceGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_errors"]; exists {

		vOpts := append(opts, db.WithValidateField("site_errors"))
		for idx, item := range m.GetSiteErrors() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_state"]; exists {

		vOpts := append(opts, db.WithValidateField("site_state"))
		if err := fv(ctx, m.GetSiteState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *GetSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*GetSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*GetSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*GetSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IngressGwAr:
		if fv, exists := v.FldValidators["site_type.ingress_gw_ar"]; exists {
			val := m.GetSiteType().(*GetSpecType_IngressGwAr).IngressGwAr
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw_ar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IngressEgressGwAr:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw_ar"]; exists {
			val := m.GetSiteType().(*GetSpecType_IngressEgressGwAr).IngressEgressGwAr
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw_ar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_VoltstackClusterAr:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster_ar"]; exists {
			val := m.GetSiteType().(*GetSpecType_VoltstackClusterAr).VoltstackClusterAr
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster_ar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["suggested_action"]; exists {

		vOpts := append(opts, db.WithValidateField("suggested_action"))
		if err := fv(ctx, m.GetSuggestedAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {
		vOpts := append(opts, db.WithValidateField("tags"))
		if err := fv(ctx, m.GetTags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_modification_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("user_modification_timestamp"))
		if err := fv(ctx, m.GetUserModificationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["validation_state"]; exists {

		vOpts := append(opts, db.WithValidateField("validation_state"))
		if err := fv(ctx, m.GetValidationState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_params_per_az"]; exists {
		vOpts := append(opts, db.WithValidateField("vip_params_per_az"))
		if err := fv(ctx, m.GetVipParamsPerAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vnet"]; exists {

		vOpts := append(opts, db.WithValidateField("vnet"))
		if err := fv(ctx, m.GetVnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_software_version"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_software_version"))
		if err := fv(ctx, m.GetVolterraSoftwareVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		val := m.GetWorkerNodes()
		vOpts := append(opts,
			db.WithValidateField("worker_nodes"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWorkerNodes().(type) {
	case *GetSpecType_NodesPerAz:
		if fv, exists := v.FldValidators["worker_nodes.nodes_per_az"]; exists {
			val := m.GetWorkerNodes().(*GetSpecType_NodesPerAz).NodesPerAz
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("nodes_per_az"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_TotalNodes:
		if fv, exists := v.FldValidators["worker_nodes.total_nodes"]; exists {
			val := m.GetWorkerNodes().(*GetSpecType_TotalNodes).TotalNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("total_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NoWorkerNodes:
		if fv, exists := v.FldValidators["worker_nodes.no_worker_nodes"]; exists {
			val := m.GetWorkerNodes().(*GetSpecType_NoWorkerNodes).NoWorkerNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("no_worker_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhRegionChoice := v.RegionChoiceValidationRuleHandler
	rulesRegionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRegionChoice(rulesRegionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.region_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["region_choice"] = vFn

	vrhRegionChoiceAzureRegion := v.RegionChoiceAzureRegionValidationRuleHandler
	rulesRegionChoiceAzureRegion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFnMap["region_choice.azure_region"], err = vrhRegionChoiceAzureRegion(rulesRegionChoiceAzureRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.region_choice_azure_region: %s", err)
		panic(errMsg)
	}
	vrhRegionChoiceAlternateRegion := v.RegionChoiceAlternateRegionValidationRuleHandler
	rulesRegionChoiceAlternateRegion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFnMap["region_choice.alternate_region"], err = vrhRegionChoiceAlternateRegion(rulesRegionChoiceAlternateRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.region_choice_alternate_region: %s", err)
		panic(errMsg)
	}

	v.FldValidators["region_choice.azure_region"] = vFnMap["region_choice.azure_region"]
	v.FldValidators["region_choice.alternate_region"] = vFnMap["region_choice.alternate_region"]

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhWorkerNodesNodesPerAz := v.WorkerNodesNodesPerAzValidationRuleHandler
	rulesWorkerNodesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFnMap["worker_nodes.nodes_per_az"], err = vrhWorkerNodesNodesPerAz(rulesWorkerNodesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.worker_nodes_nodes_per_az: %s", err)
		panic(errMsg)
	}
	vrhWorkerNodesTotalNodes := v.WorkerNodesTotalNodesValidationRuleHandler
	rulesWorkerNodesTotalNodes := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "61",
	}
	vFnMap["worker_nodes.total_nodes"], err = vrhWorkerNodesTotalNodes(rulesWorkerNodesTotalNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.worker_nodes_total_nodes: %s", err)
		panic(errMsg)
	}

	v.FldValidators["worker_nodes.nodes_per_az"] = vFnMap["worker_nodes.nodes_per_az"]
	v.FldValidators["worker_nodes.total_nodes"] = vFnMap["worker_nodes.total_nodes"]

	vrhResourceGroup := v.ResourceGroupValidationRuleHandler
	rulesResourceGroup := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhResourceGroup(rulesResourceGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.resource_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["resource_group"] = vFn

	vrhVnet := v.VnetValidationRuleHandler
	rulesVnet := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVnet(rulesVnet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.vnet: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vnet"] = vFn

	vrhMachineType := v.MachineTypeValidationRuleHandler
	rulesMachineType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhMachineType(rulesMachineType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.machine_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["machine_type"] = vFn

	vrhVolterraSoftwareVersion := v.VolterraSoftwareVersionValidationRuleHandler
	rulesVolterraSoftwareVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhVolterraSoftwareVersion(rulesVolterraSoftwareVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.volterra_software_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_software_version"] = vFn

	vrhOperatingSystemVersion := v.OperatingSystemVersionValidationRuleHandler
	rulesOperatingSystemVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhOperatingSystemVersion(rulesOperatingSystemVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.operating_system_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["operating_system_version"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "8192",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "4095",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhVipParamsPerAz := v.VipParamsPerAzValidationRuleHandler
	rulesVipParamsPerAz := map[string]string{
		"ves.io.schema.rules.repeated.num_items": "0,1,2,3",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhVipParamsPerAz(rulesVipParamsPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.vip_params_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_params_per_az"] = vFn

	vrhTags := v.TagsValidationRuleHandler
	rulesTags := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "127",
		"ves.io.schema.rules.map.max_pairs":             "40",
		"ves.io.schema.rules.map.values.string.max_len": "255",
	}
	vFn, err = vrhTags(rulesTags)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.tags: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tags"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["deployment.azure_cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["site_type.ingress_gw"] = AzureVnetIngressGwTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw"] = AzureVnetIngressEgressGwTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = AzureVnetVoltstackClusterTypeValidator().Validate
	v.FldValidators["site_type.ingress_gw_ar"] = AzureVnetIngressGwARTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw_ar"] = AzureVnetIngressEgressGwARTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster_ar"] = AzureVnetVoltstackClusterARTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	v.FldValidators["kubernetes_upgrade_drain"] = ves_io_schema_views.KubernetesUpgradeDrainValidator().Validate

	v.FldValidators["cloud_site_info"] = AzureVnetSiteInfoTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.voltstack_cluster")
	}

	if err := m.GetIngressEgressGwAr().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.ingress_egress_gw_ar")
	}

	if err := m.GetVoltstackClusterAr().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.voltstack_cluster_ar")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDeploymentDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetTfParamsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetTfParamsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDeployment().(type) {
	case *GlobalSpecType_AzureCred:

		vref := m.GetAzureCred()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		dri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "azure_cred",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GlobalSpecType_Assisted:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *GlobalSpecType_AzureCred:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetAzureCred()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GlobalSpecType_Assisted:

	}

	return entries, nil
}

func (m *GlobalSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:

		return nil, nil

	case *GlobalSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:

	case *GlobalSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteType() == nil {
		return nil, nil
	}
	switch m.GetSiteType().(type) {
	case *GlobalSpecType_IngressGw:

		return nil, nil

	case *GlobalSpecType_IngressEgressGw:

		drInfos, err := m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGw().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_VoltstackCluster:

		drInfos, err := m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackCluster().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_IngressGwAr:

		return nil, nil

	case *GlobalSpecType_IngressEgressGwAr:

		drInfos, err := m.GetIngressEgressGwAr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGwAr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw_ar." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_VoltstackClusterAr:

		drInfos, err := m.GetVoltstackClusterAr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackClusterAr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster_ar." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetTfParamsDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetTfParams()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("terraform_parameters.Object")
	dri := db.DRefInfo{
		RefdType:   "terraform_parameters.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "tf_params",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetTfParamsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetTfParamsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "terraform_parameters.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: terraform_parameters")
	}

	vref := m.GetTfParams()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "terraform_parameters.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RegionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for region_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RegionChoiceAzureRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AzureRegion, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_region")
	}
	return oValidatorFn_AzureRegion, nil
}
func (v *ValidateGlobalSpecType) RegionChoiceAlternateRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AlternateRegion, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for alternate_region")
	}
	return oValidatorFn_AlternateRegion, nil
}

func (v *ValidateGlobalSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for worker_nodes")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) WorkerNodesNodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_NodesPerAz, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}
	return oValidatorFn_NodesPerAz, nil
}
func (v *ValidateGlobalSpecType) WorkerNodesTotalNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TotalNodes, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for total_nodes")
	}
	return oValidatorFn_TotalNodes, nil
}

func (v *ValidateGlobalSpecType) ResourceGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for resource_group")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VnetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for vnet")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.AzureVnetChoiceTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) MachineTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for machine_type")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VolterraSoftwareVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_software_version")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) OperatingSystemVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for operating_system_version")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VipParamsPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for vip_params_per_az")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_site.PublishVIPParamsPerAz, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_site.PublishVIPParamsPerAzValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for vip_params_per_az")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_site.PublishVIPParamsPerAz)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_site.PublishVIPParamsPerAz, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated vip_params_per_az")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items vip_params_per_az")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TagsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for tags")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for tags")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for tags")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map tags")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tags")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *GlobalSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GlobalSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BlockAllServices:
		if fv, exists := v.FldValidators["blocked_services_choice.block_all_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockAllServices).BlockAllServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("block_all_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cloud_site_info"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_site_info"))
		if err := fv(ctx, m.GetCloudSiteInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *GlobalSpecType_AzureCred:
		if fv, exists := v.FldValidators["deployment.azure_cred"]; exists {
			val := m.GetDeployment().(*GlobalSpecType_AzureCred).AzureCred
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("azure_cred"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Assisted:
		if fv, exists := v.FldValidators["deployment.assisted"]; exists {
			val := m.GetDeployment().(*GlobalSpecType_Assisted).Assisted
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("assisted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["error_description"]; exists {

		vOpts := append(opts, db.WithValidateField("error_description"))
		if err := fv(ctx, m.GetErrorDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["kubernetes_upgrade_drain"]; exists {

		vOpts := append(opts, db.WithValidateField("kubernetes_upgrade_drain"))
		if err := fv(ctx, m.GetKubernetesUpgradeDrain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["machine_type"]; exists {

		vOpts := append(opts, db.WithValidateField("machine_type"))
		if err := fv(ctx, m.GetMachineType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["operating_system_version"]; exists {

		vOpts := append(opts, db.WithValidateField("operating_system_version"))
		if err := fv(ctx, m.GetOperatingSystemVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["os"]; exists {

		vOpts := append(opts, db.WithValidateField("os"))
		if err := fv(ctx, m.GetOs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["region_choice"]; exists {
		val := m.GetRegionChoice()
		vOpts := append(opts,
			db.WithValidateField("region_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRegionChoice().(type) {
	case *GlobalSpecType_AzureRegion:
		if fv, exists := v.FldValidators["region_choice.azure_region"]; exists {
			val := m.GetRegionChoice().(*GlobalSpecType_AzureRegion).AzureRegion
			vOpts := append(opts,
				db.WithValidateField("region_choice"),
				db.WithValidateField("azure_region"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AlternateRegion:
		if fv, exists := v.FldValidators["region_choice.alternate_region"]; exists {
			val := m.GetRegionChoice().(*GlobalSpecType_AlternateRegion).AlternateRegion
			vOpts := append(opts,
				db.WithValidateField("region_choice"),
				db.WithValidateField("alternate_region"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["resource_group"]; exists {

		vOpts := append(opts, db.WithValidateField("resource_group"))
		if err := fv(ctx, m.GetResourceGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_errors"]; exists {

		vOpts := append(opts, db.WithValidateField("site_errors"))
		for idx, item := range m.GetSiteErrors() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_to_site_tunnel_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("site_to_site_tunnel_ip"))
		if err := fv(ctx, m.GetSiteToSiteTunnelIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *GlobalSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IngressGwAr:
		if fv, exists := v.FldValidators["site_type.ingress_gw_ar"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_IngressGwAr).IngressGwAr
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw_ar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IngressEgressGwAr:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw_ar"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_IngressEgressGwAr).IngressEgressGwAr
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw_ar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_VoltstackClusterAr:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster_ar"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_VoltstackClusterAr).VoltstackClusterAr
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster_ar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["suggested_action"]; exists {

		vOpts := append(opts, db.WithValidateField("suggested_action"))
		if err := fv(ctx, m.GetSuggestedAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sw"]; exists {

		vOpts := append(opts, db.WithValidateField("sw"))
		if err := fv(ctx, m.GetSw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {
		vOpts := append(opts, db.WithValidateField("tags"))
		if err := fv(ctx, m.GetTags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tf_params"]; exists {

		vOpts := append(opts, db.WithValidateField("tf_params"))
		if err := fv(ctx, m.GetTfParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_modification_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("user_modification_timestamp"))
		if err := fv(ctx, m.GetUserModificationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["validation_state"]; exists {

		vOpts := append(opts, db.WithValidateField("validation_state"))
		if err := fv(ctx, m.GetValidationState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_params_per_az"]; exists {
		vOpts := append(opts, db.WithValidateField("vip_params_per_az"))
		if err := fv(ctx, m.GetVipParamsPerAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vnet"]; exists {

		vOpts := append(opts, db.WithValidateField("vnet"))
		if err := fv(ctx, m.GetVnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_software_version"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_software_version"))
		if err := fv(ctx, m.GetVolterraSoftwareVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		val := m.GetWorkerNodes()
		vOpts := append(opts,
			db.WithValidateField("worker_nodes"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWorkerNodes().(type) {
	case *GlobalSpecType_NodesPerAz:
		if fv, exists := v.FldValidators["worker_nodes.nodes_per_az"]; exists {
			val := m.GetWorkerNodes().(*GlobalSpecType_NodesPerAz).NodesPerAz
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("nodes_per_az"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_TotalNodes:
		if fv, exists := v.FldValidators["worker_nodes.total_nodes"]; exists {
			val := m.GetWorkerNodes().(*GlobalSpecType_TotalNodes).TotalNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("total_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NoWorkerNodes:
		if fv, exists := v.FldValidators["worker_nodes.no_worker_nodes"]; exists {
			val := m.GetWorkerNodes().(*GlobalSpecType_NoWorkerNodes).NoWorkerNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("no_worker_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhRegionChoice := v.RegionChoiceValidationRuleHandler
	rulesRegionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRegionChoice(rulesRegionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.region_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["region_choice"] = vFn

	vrhRegionChoiceAzureRegion := v.RegionChoiceAzureRegionValidationRuleHandler
	rulesRegionChoiceAzureRegion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFnMap["region_choice.azure_region"], err = vrhRegionChoiceAzureRegion(rulesRegionChoiceAzureRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.region_choice_azure_region: %s", err)
		panic(errMsg)
	}
	vrhRegionChoiceAlternateRegion := v.RegionChoiceAlternateRegionValidationRuleHandler
	rulesRegionChoiceAlternateRegion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFnMap["region_choice.alternate_region"], err = vrhRegionChoiceAlternateRegion(rulesRegionChoiceAlternateRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.region_choice_alternate_region: %s", err)
		panic(errMsg)
	}

	v.FldValidators["region_choice.azure_region"] = vFnMap["region_choice.azure_region"]
	v.FldValidators["region_choice.alternate_region"] = vFnMap["region_choice.alternate_region"]

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhWorkerNodesNodesPerAz := v.WorkerNodesNodesPerAzValidationRuleHandler
	rulesWorkerNodesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFnMap["worker_nodes.nodes_per_az"], err = vrhWorkerNodesNodesPerAz(rulesWorkerNodesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.worker_nodes_nodes_per_az: %s", err)
		panic(errMsg)
	}
	vrhWorkerNodesTotalNodes := v.WorkerNodesTotalNodesValidationRuleHandler
	rulesWorkerNodesTotalNodes := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "61",
	}
	vFnMap["worker_nodes.total_nodes"], err = vrhWorkerNodesTotalNodes(rulesWorkerNodesTotalNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.worker_nodes_total_nodes: %s", err)
		panic(errMsg)
	}

	v.FldValidators["worker_nodes.nodes_per_az"] = vFnMap["worker_nodes.nodes_per_az"]
	v.FldValidators["worker_nodes.total_nodes"] = vFnMap["worker_nodes.total_nodes"]

	vrhResourceGroup := v.ResourceGroupValidationRuleHandler
	rulesResourceGroup := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhResourceGroup(rulesResourceGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.resource_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["resource_group"] = vFn

	vrhVnet := v.VnetValidationRuleHandler
	rulesVnet := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVnet(rulesVnet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.vnet: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vnet"] = vFn

	vrhMachineType := v.MachineTypeValidationRuleHandler
	rulesMachineType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhMachineType(rulesMachineType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.machine_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["machine_type"] = vFn

	vrhVolterraSoftwareVersion := v.VolterraSoftwareVersionValidationRuleHandler
	rulesVolterraSoftwareVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhVolterraSoftwareVersion(rulesVolterraSoftwareVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.volterra_software_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_software_version"] = vFn

	vrhOperatingSystemVersion := v.OperatingSystemVersionValidationRuleHandler
	rulesOperatingSystemVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhOperatingSystemVersion(rulesOperatingSystemVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.operating_system_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["operating_system_version"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "8192",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "4095",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhVipParamsPerAz := v.VipParamsPerAzValidationRuleHandler
	rulesVipParamsPerAz := map[string]string{
		"ves.io.schema.rules.repeated.num_items": "0,1,2,3",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhVipParamsPerAz(rulesVipParamsPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.vip_params_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_params_per_az"] = vFn

	vrhTags := v.TagsValidationRuleHandler
	rulesTags := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "127",
		"ves.io.schema.rules.map.max_pairs":             "40",
		"ves.io.schema.rules.map.values.string.max_len": "255",
	}
	vFn, err = vrhTags(rulesTags)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.tags: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tags"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["deployment.azure_cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["site_type.ingress_gw"] = AzureVnetIngressGwTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw"] = AzureVnetIngressEgressGwTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = AzureVnetVoltstackClusterTypeValidator().Validate
	v.FldValidators["site_type.ingress_gw_ar"] = AzureVnetIngressGwARTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw_ar"] = AzureVnetIngressEgressGwARTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster_ar"] = AzureVnetVoltstackClusterARTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["sw"] = ves_io_schema_views.VolterraSoftwareTypeValidator().Validate

	v.FldValidators["os"] = ves_io_schema_views.OperatingSystemTypeValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	v.FldValidators["kubernetes_upgrade_drain"] = ves_io_schema_views.KubernetesUpgradeDrainValidator().Validate

	v.FldValidators["tf_params"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cloud_site_info"] = AzureVnetSiteInfoTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *NodeInstanceNameType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NodeInstanceNameType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NodeInstanceNameType) DeepCopy() *NodeInstanceNameType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NodeInstanceNameType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NodeInstanceNameType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NodeInstanceNameType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NodeInstanceNameTypeValidator().Validate(ctx, m, opts...)
}

type ValidateNodeInstanceNameType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNodeInstanceNameType) NodeInstanceNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for node_instance_name")
	}

	return validatorFn, nil
}

func (v *ValidateNodeInstanceNameType) NodeIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for node_id")
	}

	return validatorFn, nil
}

func (v *ValidateNodeInstanceNameType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NodeInstanceNameType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NodeInstanceNameType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["node_id"]; exists {

		vOpts := append(opts, db.WithValidateField("node_id"))
		if err := fv(ctx, m.GetNodeId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["node_instance_name"]; exists {

		vOpts := append(opts, db.WithValidateField("node_instance_name"))
		if err := fv(ctx, m.GetNodeInstanceName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNodeInstanceNameTypeValidator = func() *ValidateNodeInstanceNameType {
	v := &ValidateNodeInstanceNameType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNodeInstanceName := v.NodeInstanceNameValidationRuleHandler
	rulesNodeInstanceName := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
		"ves.io.schema.rules.string.min_len": "1",
	}
	vFn, err = vrhNodeInstanceName(rulesNodeInstanceName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NodeInstanceNameType.node_instance_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["node_instance_name"] = vFn

	vrhNodeId := v.NodeIdValidationRuleHandler
	rulesNodeId := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhNodeId(rulesNodeId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NodeInstanceNameType.node_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["node_id"] = vFn

	return v
}()

func NodeInstanceNameTypeValidator() db.Validator {
	return DefaultNodeInstanceNameTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.voltstack_cluster")
	}

	if err := m.GetIngressEgressGwAr().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.ingress_egress_gw_ar")
	}

	if err := m.GetVoltstackClusterAr().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.voltstack_cluster_ar")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDeploymentDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *ReplaceSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDeployment().(type) {
	case *ReplaceSpecType_AzureCred:

		vref := m.GetAzureCred()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		dri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "azure_cred",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *ReplaceSpecType_AzureCred:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetAzureCred()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

func (m *ReplaceSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:

		return nil, nil

	case *ReplaceSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:

	case *ReplaceSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteType() == nil {
		return nil, nil
	}
	switch m.GetSiteType().(type) {
	case *ReplaceSpecType_IngressGw:

		return nil, nil

	case *ReplaceSpecType_IngressEgressGw:

		drInfos, err := m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGw().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_VoltstackCluster:

		drInfos, err := m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackCluster().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_IngressGwAr:

		return nil, nil

	case *ReplaceSpecType_IngressEgressGwAr:

		drInfos, err := m.GetIngressEgressGwAr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGwAr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw_ar." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_VoltstackClusterAr:

		drInfos, err := m.GetVoltstackClusterAr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackClusterAr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster_ar." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RegionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for region_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RegionChoiceAzureRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AzureRegion, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_region")
	}
	return oValidatorFn_AzureRegion, nil
}
func (v *ValidateReplaceSpecType) RegionChoiceAlternateRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AlternateRegion, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for alternate_region")
	}
	return oValidatorFn_AlternateRegion, nil
}

func (v *ValidateReplaceSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for worker_nodes")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) WorkerNodesNodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_NodesPerAz, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}
	return oValidatorFn_NodesPerAz, nil
}
func (v *ValidateReplaceSpecType) WorkerNodesTotalNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TotalNodes, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for total_nodes")
	}
	return oValidatorFn_TotalNodes, nil
}

func (v *ValidateReplaceSpecType) ResourceGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for resource_group")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) VnetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for vnet")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.AzureVnetChoiceTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) MachineTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for machine_type")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *ReplaceSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*ReplaceSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BlockAllServices:
		if fv, exists := v.FldValidators["blocked_services_choice.block_all_services"]; exists {
			val := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockAllServices).BlockAllServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("block_all_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *ReplaceSpecType_AzureCred:
		if fv, exists := v.FldValidators["deployment.azure_cred"]; exists {
			val := m.GetDeployment().(*ReplaceSpecType_AzureCred).AzureCred
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("azure_cred"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["kubernetes_upgrade_drain"]; exists {

		vOpts := append(opts, db.WithValidateField("kubernetes_upgrade_drain"))
		if err := fv(ctx, m.GetKubernetesUpgradeDrain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["machine_type"]; exists {

		vOpts := append(opts, db.WithValidateField("machine_type"))
		if err := fv(ctx, m.GetMachineType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["region_choice"]; exists {
		val := m.GetRegionChoice()
		vOpts := append(opts,
			db.WithValidateField("region_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRegionChoice().(type) {
	case *ReplaceSpecType_AzureRegion:
		if fv, exists := v.FldValidators["region_choice.azure_region"]; exists {
			val := m.GetRegionChoice().(*ReplaceSpecType_AzureRegion).AzureRegion
			vOpts := append(opts,
				db.WithValidateField("region_choice"),
				db.WithValidateField("azure_region"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AlternateRegion:
		if fv, exists := v.FldValidators["region_choice.alternate_region"]; exists {
			val := m.GetRegionChoice().(*ReplaceSpecType_AlternateRegion).AlternateRegion
			vOpts := append(opts,
				db.WithValidateField("region_choice"),
				db.WithValidateField("alternate_region"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["resource_group"]; exists {

		vOpts := append(opts, db.WithValidateField("resource_group"))
		if err := fv(ctx, m.GetResourceGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *ReplaceSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IngressGwAr:
		if fv, exists := v.FldValidators["site_type.ingress_gw_ar"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_IngressGwAr).IngressGwAr
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw_ar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IngressEgressGwAr:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw_ar"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_IngressEgressGwAr).IngressEgressGwAr
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw_ar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_VoltstackClusterAr:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster_ar"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_VoltstackClusterAr).VoltstackClusterAr
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster_ar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vnet"]; exists {

		vOpts := append(opts, db.WithValidateField("vnet"))
		if err := fv(ctx, m.GetVnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		val := m.GetWorkerNodes()
		vOpts := append(opts,
			db.WithValidateField("worker_nodes"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWorkerNodes().(type) {
	case *ReplaceSpecType_NodesPerAz:
		if fv, exists := v.FldValidators["worker_nodes.nodes_per_az"]; exists {
			val := m.GetWorkerNodes().(*ReplaceSpecType_NodesPerAz).NodesPerAz
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("nodes_per_az"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_TotalNodes:
		if fv, exists := v.FldValidators["worker_nodes.total_nodes"]; exists {
			val := m.GetWorkerNodes().(*ReplaceSpecType_TotalNodes).TotalNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("total_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NoWorkerNodes:
		if fv, exists := v.FldValidators["worker_nodes.no_worker_nodes"]; exists {
			val := m.GetWorkerNodes().(*ReplaceSpecType_NoWorkerNodes).NoWorkerNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("no_worker_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhRegionChoice := v.RegionChoiceValidationRuleHandler
	rulesRegionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRegionChoice(rulesRegionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.region_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["region_choice"] = vFn

	vrhRegionChoiceAzureRegion := v.RegionChoiceAzureRegionValidationRuleHandler
	rulesRegionChoiceAzureRegion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFnMap["region_choice.azure_region"], err = vrhRegionChoiceAzureRegion(rulesRegionChoiceAzureRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.region_choice_azure_region: %s", err)
		panic(errMsg)
	}
	vrhRegionChoiceAlternateRegion := v.RegionChoiceAlternateRegionValidationRuleHandler
	rulesRegionChoiceAlternateRegion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFnMap["region_choice.alternate_region"], err = vrhRegionChoiceAlternateRegion(rulesRegionChoiceAlternateRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.region_choice_alternate_region: %s", err)
		panic(errMsg)
	}

	v.FldValidators["region_choice.azure_region"] = vFnMap["region_choice.azure_region"]
	v.FldValidators["region_choice.alternate_region"] = vFnMap["region_choice.alternate_region"]

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhWorkerNodesNodesPerAz := v.WorkerNodesNodesPerAzValidationRuleHandler
	rulesWorkerNodesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFnMap["worker_nodes.nodes_per_az"], err = vrhWorkerNodesNodesPerAz(rulesWorkerNodesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.worker_nodes_nodes_per_az: %s", err)
		panic(errMsg)
	}
	vrhWorkerNodesTotalNodes := v.WorkerNodesTotalNodesValidationRuleHandler
	rulesWorkerNodesTotalNodes := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "61",
	}
	vFnMap["worker_nodes.total_nodes"], err = vrhWorkerNodesTotalNodes(rulesWorkerNodesTotalNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.worker_nodes_total_nodes: %s", err)
		panic(errMsg)
	}

	v.FldValidators["worker_nodes.nodes_per_az"] = vFnMap["worker_nodes.nodes_per_az"]
	v.FldValidators["worker_nodes.total_nodes"] = vFnMap["worker_nodes.total_nodes"]

	vrhResourceGroup := v.ResourceGroupValidationRuleHandler
	rulesResourceGroup := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhResourceGroup(rulesResourceGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.resource_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["resource_group"] = vFn

	vrhVnet := v.VnetValidationRuleHandler
	rulesVnet := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVnet(rulesVnet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.vnet: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vnet"] = vFn

	vrhMachineType := v.MachineTypeValidationRuleHandler
	rulesMachineType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhMachineType(rulesMachineType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.machine_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["machine_type"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "8192",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "4095",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["deployment.azure_cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["site_type.ingress_egress_gw"] = AzureVnetIngressEgressGwReplaceTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = AzureVnetVoltstackClusterReplaceTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw_ar"] = AzureVnetIngressEgressGwARReplaceTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster_ar"] = AzureVnetVoltstackClusterARReplaceTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	v.FldValidators["kubernetes_upgrade_drain"] = ves_io_schema_views.KubernetesUpgradeDrainValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *VNETInfoType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VNETInfoType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VNETInfoType) DeepCopy() *VNETInfoType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VNETInfoType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VNETInfoType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VNETInfoType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VNETInfoTypeValidator().Validate(ctx, m, opts...)
}

type ValidateVNETInfoType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVNETInfoType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VNETInfoType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VNETInfoType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["resource_id"]; exists {

		vOpts := append(opts, db.WithValidateField("resource_id"))
		if err := fv(ctx, m.GetResourceId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vnet_name"]; exists {

		vOpts := append(opts, db.WithValidateField("vnet_name"))
		if err := fv(ctx, m.GetVnetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVNETInfoTypeValidator = func() *ValidateVNETInfoType {
	v := &ValidateVNETInfoType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func VNETInfoTypeValidator() db.Validator {
	return DefaultVNETInfoTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *VnetIpPrefixesType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VnetIpPrefixesType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VnetIpPrefixesType) DeepCopy() *VnetIpPrefixesType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VnetIpPrefixesType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VnetIpPrefixesType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VnetIpPrefixesType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VnetIpPrefixesTypeValidator().Validate(ctx, m, opts...)
}

type ValidateVnetIpPrefixesType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVnetIpPrefixesType) PrefixesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for prefixes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for prefixes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated prefixes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items prefixes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateVnetIpPrefixesType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VnetIpPrefixesType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VnetIpPrefixesType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["prefixes"]; exists {
		vOpts := append(opts, db.WithValidateField("prefixes"))
		if err := fv(ctx, m.GetPrefixes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vnet"]; exists {

		vOpts := append(opts, db.WithValidateField("vnet"))
		if err := fv(ctx, m.GetVnet(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVnetIpPrefixesTypeValidator = func() *ValidateVnetIpPrefixesType {
	v := &ValidateVnetIpPrefixesType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPrefixes := v.PrefixesValidationRuleHandler
	rulesPrefixes := map[string]string{
		"ves.io.schema.rules.message.required":                  "true",
		"ves.io.schema.rules.repeated.items.string.ipv4_prefix": "true",
		"ves.io.schema.rules.repeated.max_items":                "1024",
		"ves.io.schema.rules.repeated.min_items":                "1",
		"ves.io.schema.rules.repeated.unique":                   "true",
	}
	vFn, err = vrhPrefixes(rulesPrefixes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VnetIpPrefixesType.prefixes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["prefixes"] = vFn

	v.FldValidators["vnet"] = ves_io_schema_views.AzureVnetTypeValidator().Validate

	return v
}()

func VnetIpPrefixesTypeValidator() db.Validator {
	return DefaultVnetIpPrefixesTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *VnetPeeringType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VnetPeeringType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VnetPeeringType) DeepCopy() *VnetPeeringType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VnetPeeringType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VnetPeeringType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VnetPeeringType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VnetPeeringTypeValidator().Validate(ctx, m, opts...)
}

type ValidateVnetPeeringType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVnetPeeringType) RoutingChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for routing_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVnetPeeringType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VnetPeeringType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VnetPeeringType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["labels"]; exists {

		vOpts := append(opts, db.WithValidateField("labels"))
		for key, value := range m.GetLabels() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["routing_choice"]; exists {
		val := m.GetRoutingChoice()
		vOpts := append(opts,
			db.WithValidateField("routing_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRoutingChoice().(type) {
	case *VnetPeeringType_Auto:
		if fv, exists := v.FldValidators["routing_choice.auto"]; exists {
			val := m.GetRoutingChoice().(*VnetPeeringType_Auto).Auto
			vOpts := append(opts,
				db.WithValidateField("routing_choice"),
				db.WithValidateField("auto"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VnetPeeringType_Manual:
		if fv, exists := v.FldValidators["routing_choice.manual"]; exists {
			val := m.GetRoutingChoice().(*VnetPeeringType_Manual).Manual
			vOpts := append(opts,
				db.WithValidateField("routing_choice"),
				db.WithValidateField("manual"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["vnet"]; exists {

		vOpts := append(opts, db.WithValidateField("vnet"))
		if err := fv(ctx, m.GetVnet(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVnetPeeringTypeValidator = func() *ValidateVnetPeeringType {
	v := &ValidateVnetPeeringType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRoutingChoice := v.RoutingChoiceValidationRuleHandler
	rulesRoutingChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRoutingChoice(rulesRoutingChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VnetPeeringType.routing_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routing_choice"] = vFn

	v.FldValidators["vnet"] = ves_io_schema_views.AzureVnetTypeValidator().Validate

	return v
}()

func VnetPeeringTypeValidator() db.Validator {
	return DefaultVnetPeeringTypeValidator
}

// create setters in AzureVnetIngressEgressGwARReplaceType from AzureVnetIngressEgressGwARType for oneof fields
func (r *AzureVnetIngressEgressGwARReplaceType) SetDcClusterGroupChoiceToAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := r.DcClusterGroupChoice.(type) {
	case nil:
		o.DcClusterGroupChoice = nil

	case *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn:
		o.DcClusterGroupChoice = &AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn{DcClusterGroupInsideVn: of.DcClusterGroupInsideVn}

	case *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn:
		o.DcClusterGroupChoice = &AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn{DcClusterGroupOutsideVn: of.DcClusterGroupOutsideVn}

	case *AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup:
		o.DcClusterGroupChoice = &AzureVnetIngressEgressGwARType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwARReplaceType) GetDcClusterGroupChoiceFromAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := o.DcClusterGroupChoice.(type) {
	case nil:
		r.DcClusterGroupChoice = nil

	case *AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn:
		r.DcClusterGroupChoice = &AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn{DcClusterGroupInsideVn: of.DcClusterGroupInsideVn}

	case *AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn:
		r.DcClusterGroupChoice = &AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn{DcClusterGroupOutsideVn: of.DcClusterGroupOutsideVn}

	case *AzureVnetIngressEgressGwARType_NoDcClusterGroup:
		r.DcClusterGroupChoice = &AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwARReplaceType from AzureVnetIngressEgressGwARType for oneof fields
func (r *AzureVnetIngressEgressGwARReplaceType) SetForwardProxyChoiceToAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := r.ForwardProxyChoice.(type) {
	case nil:
		o.ForwardProxyChoice = nil

	case *AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies:
		o.ForwardProxyChoice = &AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll:
		o.ForwardProxyChoice = &AzureVnetIngressEgressGwARType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AzureVnetIngressEgressGwARReplaceType_NoForwardProxy:
		o.ForwardProxyChoice = &AzureVnetIngressEgressGwARType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwARReplaceType) GetForwardProxyChoiceFromAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := o.ForwardProxyChoice.(type) {
	case nil:
		r.ForwardProxyChoice = nil

	case *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies:
		r.ForwardProxyChoice = &AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll:
		r.ForwardProxyChoice = &AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AzureVnetIngressEgressGwARType_NoForwardProxy:
		r.ForwardProxyChoice = &AzureVnetIngressEgressGwARReplaceType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwARReplaceType from AzureVnetIngressEgressGwARType for oneof fields
func (r *AzureVnetIngressEgressGwARReplaceType) SetGlobalNetworkChoiceToAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := r.GlobalNetworkChoice.(type) {
	case nil:
		o.GlobalNetworkChoice = nil

	case *AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList:
		o.GlobalNetworkChoice = &AzureVnetIngressEgressGwARType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork:
		o.GlobalNetworkChoice = &AzureVnetIngressEgressGwARType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwARReplaceType) GetGlobalNetworkChoiceFromAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := o.GlobalNetworkChoice.(type) {
	case nil:
		r.GlobalNetworkChoice = nil

	case *AzureVnetIngressEgressGwARType_GlobalNetworkList:
		r.GlobalNetworkChoice = &AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AzureVnetIngressEgressGwARType_NoGlobalNetwork:
		r.GlobalNetworkChoice = &AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwARReplaceType from AzureVnetIngressEgressGwARType for oneof fields
func (r *AzureVnetIngressEgressGwARReplaceType) SetHubChoiceToAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := r.HubChoice.(type) {
	case nil:
		o.HubChoice = nil

	case *AzureVnetIngressEgressGwARReplaceType_Hub:
		o.HubChoice = &AzureVnetIngressEgressGwARType_Hub{Hub: of.Hub}

	case *AzureVnetIngressEgressGwARReplaceType_NotHub:
		o.HubChoice = &AzureVnetIngressEgressGwARType_NotHub{NotHub: of.NotHub}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwARReplaceType) GetHubChoiceFromAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := o.HubChoice.(type) {
	case nil:
		r.HubChoice = nil

	case *AzureVnetIngressEgressGwARType_Hub:
		r.HubChoice = &AzureVnetIngressEgressGwARReplaceType_Hub{Hub: of.Hub}

	case *AzureVnetIngressEgressGwARType_NotHub:
		r.HubChoice = &AzureVnetIngressEgressGwARReplaceType_NotHub{NotHub: of.NotHub}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwARReplaceType from AzureVnetIngressEgressGwARType for oneof fields
func (r *AzureVnetIngressEgressGwARReplaceType) SetInsideStaticRouteChoiceToAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := r.InsideStaticRouteChoice.(type) {
	case nil:
		o.InsideStaticRouteChoice = nil

	case *AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes:
		o.InsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_InsideStaticRoutes{InsideStaticRoutes: of.InsideStaticRoutes}

	case *AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes:
		o.InsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_NoInsideStaticRoutes{NoInsideStaticRoutes: of.NoInsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwARReplaceType) GetInsideStaticRouteChoiceFromAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := o.InsideStaticRouteChoice.(type) {
	case nil:
		r.InsideStaticRouteChoice = nil

	case *AzureVnetIngressEgressGwARType_InsideStaticRoutes:
		r.InsideStaticRouteChoice = &AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes{InsideStaticRoutes: of.InsideStaticRoutes}

	case *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes:
		r.InsideStaticRouteChoice = &AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes{NoInsideStaticRoutes: of.NoInsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwARReplaceType from AzureVnetIngressEgressGwARType for oneof fields
func (r *AzureVnetIngressEgressGwARReplaceType) SetNetworkPolicyChoiceToAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := r.NetworkPolicyChoice.(type) {
	case nil:
		o.NetworkPolicyChoice = nil

	case *AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies:
		o.NetworkPolicyChoice = &AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies:
		o.NetworkPolicyChoice = &AzureVnetIngressEgressGwARType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy:
		o.NetworkPolicyChoice = &AzureVnetIngressEgressGwARType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwARReplaceType) GetNetworkPolicyChoiceFromAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := o.NetworkPolicyChoice.(type) {
	case nil:
		r.NetworkPolicyChoice = nil

	case *AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies:
		r.NetworkPolicyChoice = &AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies:
		r.NetworkPolicyChoice = &AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AzureVnetIngressEgressGwARType_NoNetworkPolicy:
		r.NetworkPolicyChoice = &AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwARReplaceType from AzureVnetIngressEgressGwARType for oneof fields
func (r *AzureVnetIngressEgressGwARReplaceType) SetOutsideStaticRouteChoiceToAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := r.OutsideStaticRouteChoice.(type) {
	case nil:
		o.OutsideStaticRouteChoice = nil

	case *AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwARReplaceType) GetOutsideStaticRouteChoiceFromAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := o.OutsideStaticRouteChoice.(type) {
	case nil:
		r.OutsideStaticRouteChoice = nil

	case *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AzureVnetIngressEgressGwARType_OutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwARReplaceType from AzureVnetIngressEgressGwARType for oneof fields
func (r *AzureVnetIngressEgressGwARReplaceType) SetSiteMeshGroupChoiceToAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := r.SiteMeshGroupChoice.(type) {
	case nil:
		o.SiteMeshGroupChoice = nil

	case *AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp:
		o.SiteMeshGroupChoice = &AzureVnetIngressEgressGwARType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp:
		o.SiteMeshGroupChoice = &AzureVnetIngressEgressGwARType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwARReplaceType) GetSiteMeshGroupChoiceFromAzureVnetIngressEgressGwARType(o *AzureVnetIngressEgressGwARType) error {
	switch of := o.SiteMeshGroupChoice.(type) {
	case nil:
		r.SiteMeshGroupChoice = nil

	case *AzureVnetIngressEgressGwARType_SmConnectionPublicIp:
		r.SiteMeshGroupChoice = &AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *AzureVnetIngressEgressGwARType_SmConnectionPvtIp:
		r.SiteMeshGroupChoice = &AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) fromAzureVnetIngressEgressGwARType(f *AzureVnetIngressEgressGwARType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetDcClusterGroupChoiceFromAzureVnetIngressEgressGwARType(f)
	m.GetForwardProxyChoiceFromAzureVnetIngressEgressGwARType(f)
	m.GetGlobalNetworkChoiceFromAzureVnetIngressEgressGwARType(f)
	m.GetHubChoiceFromAzureVnetIngressEgressGwARType(f)
	m.GetInsideStaticRouteChoiceFromAzureVnetIngressEgressGwARType(f)
	m.GetNetworkPolicyChoiceFromAzureVnetIngressEgressGwARType(f)
	m.Node = f.GetNode()
	m.GetOutsideStaticRouteChoiceFromAzureVnetIngressEgressGwARType(f)
	m.PerformanceEnhancementMode = f.GetPerformanceEnhancementMode()
	m.GetSiteMeshGroupChoiceFromAzureVnetIngressEgressGwARType(f)
}

func (m *AzureVnetIngressEgressGwARReplaceType) FromAzureVnetIngressEgressGwARType(f *AzureVnetIngressEgressGwARType) {
	m.fromAzureVnetIngressEgressGwARType(f, true)
}

func (m *AzureVnetIngressEgressGwARReplaceType) FromAzureVnetIngressEgressGwARTypeWithoutDeepCopy(f *AzureVnetIngressEgressGwARType) {
	m.fromAzureVnetIngressEgressGwARType(f, false)
}

func (m *AzureVnetIngressEgressGwARReplaceType) toAzureVnetIngressEgressGwARType(f *AzureVnetIngressEgressGwARType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetDcClusterGroupChoiceToAzureVnetIngressEgressGwARType(f)
	m1.SetForwardProxyChoiceToAzureVnetIngressEgressGwARType(f)
	m1.SetGlobalNetworkChoiceToAzureVnetIngressEgressGwARType(f)
	m1.SetHubChoiceToAzureVnetIngressEgressGwARType(f)
	m1.SetInsideStaticRouteChoiceToAzureVnetIngressEgressGwARType(f)
	m1.SetNetworkPolicyChoiceToAzureVnetIngressEgressGwARType(f)
	f.Node = m1.Node
	m1.SetOutsideStaticRouteChoiceToAzureVnetIngressEgressGwARType(f)
	f.PerformanceEnhancementMode = m1.PerformanceEnhancementMode
	m1.SetSiteMeshGroupChoiceToAzureVnetIngressEgressGwARType(f)
}

func (m *AzureVnetIngressEgressGwARReplaceType) ToAzureVnetIngressEgressGwARType(f *AzureVnetIngressEgressGwARType) {
	m.toAzureVnetIngressEgressGwARType(f, true)
}

func (m *AzureVnetIngressEgressGwARReplaceType) ToAzureVnetIngressEgressGwARTypeWithoutDeepCopy(f *AzureVnetIngressEgressGwARType) {
	m.toAzureVnetIngressEgressGwARType(f, false)
}

// create setters in AzureVnetIngressEgressGwReplaceType from AzureVnetIngressEgressGwType for oneof fields
func (r *AzureVnetIngressEgressGwReplaceType) SetDcClusterGroupChoiceToAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := r.DcClusterGroupChoice.(type) {
	case nil:
		o.DcClusterGroupChoice = nil

	case *AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn:
		o.DcClusterGroupChoice = &AzureVnetIngressEgressGwType_DcClusterGroupInsideVn{DcClusterGroupInsideVn: of.DcClusterGroupInsideVn}

	case *AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn:
		o.DcClusterGroupChoice = &AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn{DcClusterGroupOutsideVn: of.DcClusterGroupOutsideVn}

	case *AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup:
		o.DcClusterGroupChoice = &AzureVnetIngressEgressGwType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwReplaceType) GetDcClusterGroupChoiceFromAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := o.DcClusterGroupChoice.(type) {
	case nil:
		r.DcClusterGroupChoice = nil

	case *AzureVnetIngressEgressGwType_DcClusterGroupInsideVn:
		r.DcClusterGroupChoice = &AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn{DcClusterGroupInsideVn: of.DcClusterGroupInsideVn}

	case *AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn:
		r.DcClusterGroupChoice = &AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn{DcClusterGroupOutsideVn: of.DcClusterGroupOutsideVn}

	case *AzureVnetIngressEgressGwType_NoDcClusterGroup:
		r.DcClusterGroupChoice = &AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwReplaceType from AzureVnetIngressEgressGwType for oneof fields
func (r *AzureVnetIngressEgressGwReplaceType) SetForwardProxyChoiceToAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := r.ForwardProxyChoice.(type) {
	case nil:
		o.ForwardProxyChoice = nil

	case *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies:
		o.ForwardProxyChoice = &AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll:
		o.ForwardProxyChoice = &AzureVnetIngressEgressGwType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AzureVnetIngressEgressGwReplaceType_NoForwardProxy:
		o.ForwardProxyChoice = &AzureVnetIngressEgressGwType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwReplaceType) GetForwardProxyChoiceFromAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := o.ForwardProxyChoice.(type) {
	case nil:
		r.ForwardProxyChoice = nil

	case *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies:
		r.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AzureVnetIngressEgressGwType_ForwardProxyAllowAll:
		r.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AzureVnetIngressEgressGwType_NoForwardProxy:
		r.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwReplaceType from AzureVnetIngressEgressGwType for oneof fields
func (r *AzureVnetIngressEgressGwReplaceType) SetGlobalNetworkChoiceToAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := r.GlobalNetworkChoice.(type) {
	case nil:
		o.GlobalNetworkChoice = nil

	case *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList:
		o.GlobalNetworkChoice = &AzureVnetIngressEgressGwType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork:
		o.GlobalNetworkChoice = &AzureVnetIngressEgressGwType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwReplaceType) GetGlobalNetworkChoiceFromAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := o.GlobalNetworkChoice.(type) {
	case nil:
		r.GlobalNetworkChoice = nil

	case *AzureVnetIngressEgressGwType_GlobalNetworkList:
		r.GlobalNetworkChoice = &AzureVnetIngressEgressGwReplaceType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AzureVnetIngressEgressGwType_NoGlobalNetwork:
		r.GlobalNetworkChoice = &AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwReplaceType from AzureVnetIngressEgressGwType for oneof fields
func (r *AzureVnetIngressEgressGwReplaceType) SetHubChoiceToAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := r.HubChoice.(type) {
	case nil:
		o.HubChoice = nil

	case *AzureVnetIngressEgressGwReplaceType_Hub:
		o.HubChoice = &AzureVnetIngressEgressGwType_Hub{Hub: of.Hub}

	case *AzureVnetIngressEgressGwReplaceType_NotHub:
		o.HubChoice = &AzureVnetIngressEgressGwType_NotHub{NotHub: of.NotHub}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwReplaceType) GetHubChoiceFromAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := o.HubChoice.(type) {
	case nil:
		r.HubChoice = nil

	case *AzureVnetIngressEgressGwType_Hub:
		r.HubChoice = &AzureVnetIngressEgressGwReplaceType_Hub{Hub: of.Hub}

	case *AzureVnetIngressEgressGwType_NotHub:
		r.HubChoice = &AzureVnetIngressEgressGwReplaceType_NotHub{NotHub: of.NotHub}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwReplaceType from AzureVnetIngressEgressGwType for oneof fields
func (r *AzureVnetIngressEgressGwReplaceType) SetInsideStaticRouteChoiceToAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := r.InsideStaticRouteChoice.(type) {
	case nil:
		o.InsideStaticRouteChoice = nil

	case *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes:
		o.InsideStaticRouteChoice = &AzureVnetIngressEgressGwType_InsideStaticRoutes{InsideStaticRoutes: of.InsideStaticRoutes}

	case *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes:
		o.InsideStaticRouteChoice = &AzureVnetIngressEgressGwType_NoInsideStaticRoutes{NoInsideStaticRoutes: of.NoInsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwReplaceType) GetInsideStaticRouteChoiceFromAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := o.InsideStaticRouteChoice.(type) {
	case nil:
		r.InsideStaticRouteChoice = nil

	case *AzureVnetIngressEgressGwType_InsideStaticRoutes:
		r.InsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes{InsideStaticRoutes: of.InsideStaticRoutes}

	case *AzureVnetIngressEgressGwType_NoInsideStaticRoutes:
		r.InsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes{NoInsideStaticRoutes: of.NoInsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwReplaceType from AzureVnetIngressEgressGwType for oneof fields
func (r *AzureVnetIngressEgressGwReplaceType) SetNetworkPolicyChoiceToAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := r.NetworkPolicyChoice.(type) {
	case nil:
		o.NetworkPolicyChoice = nil

	case *AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies:
		o.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies:
		o.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy:
		o.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwReplaceType) GetNetworkPolicyChoiceFromAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := o.NetworkPolicyChoice.(type) {
	case nil:
		r.NetworkPolicyChoice = nil

	case *AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies:
		r.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *AzureVnetIngressEgressGwType_ActiveNetworkPolicies:
		r.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AzureVnetIngressEgressGwType_NoNetworkPolicy:
		r.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwReplaceType from AzureVnetIngressEgressGwType for oneof fields
func (r *AzureVnetIngressEgressGwReplaceType) SetOutsideStaticRouteChoiceToAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := r.OutsideStaticRouteChoice.(type) {
	case nil:
		o.OutsideStaticRouteChoice = nil

	case *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwReplaceType) GetOutsideStaticRouteChoiceFromAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := o.OutsideStaticRouteChoice.(type) {
	case nil:
		r.OutsideStaticRouteChoice = nil

	case *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AzureVnetIngressEgressGwType_OutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwReplaceType from AzureVnetIngressEgressGwType for oneof fields
func (r *AzureVnetIngressEgressGwReplaceType) SetSiteMeshGroupChoiceToAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := r.SiteMeshGroupChoice.(type) {
	case nil:
		o.SiteMeshGroupChoice = nil

	case *AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp:
		o.SiteMeshGroupChoice = &AzureVnetIngressEgressGwType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp:
		o.SiteMeshGroupChoice = &AzureVnetIngressEgressGwType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwReplaceType) GetSiteMeshGroupChoiceFromAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := o.SiteMeshGroupChoice.(type) {
	case nil:
		r.SiteMeshGroupChoice = nil

	case *AzureVnetIngressEgressGwType_SmConnectionPublicIp:
		r.SiteMeshGroupChoice = &AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *AzureVnetIngressEgressGwType_SmConnectionPvtIp:
		r.SiteMeshGroupChoice = &AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) fromAzureVnetIngressEgressGwType(f *AzureVnetIngressEgressGwType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetDcClusterGroupChoiceFromAzureVnetIngressEgressGwType(f)
	m.GetForwardProxyChoiceFromAzureVnetIngressEgressGwType(f)
	m.GetGlobalNetworkChoiceFromAzureVnetIngressEgressGwType(f)
	m.GetHubChoiceFromAzureVnetIngressEgressGwType(f)
	m.GetInsideStaticRouteChoiceFromAzureVnetIngressEgressGwType(f)
	m.GetNetworkPolicyChoiceFromAzureVnetIngressEgressGwType(f)
	m.GetOutsideStaticRouteChoiceFromAzureVnetIngressEgressGwType(f)
	m.PerformanceEnhancementMode = f.GetPerformanceEnhancementMode()
	m.GetSiteMeshGroupChoiceFromAzureVnetIngressEgressGwType(f)
}

func (m *AzureVnetIngressEgressGwReplaceType) FromAzureVnetIngressEgressGwType(f *AzureVnetIngressEgressGwType) {
	m.fromAzureVnetIngressEgressGwType(f, true)
}

func (m *AzureVnetIngressEgressGwReplaceType) FromAzureVnetIngressEgressGwTypeWithoutDeepCopy(f *AzureVnetIngressEgressGwType) {
	m.fromAzureVnetIngressEgressGwType(f, false)
}

func (m *AzureVnetIngressEgressGwReplaceType) toAzureVnetIngressEgressGwType(f *AzureVnetIngressEgressGwType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetDcClusterGroupChoiceToAzureVnetIngressEgressGwType(f)
	m1.SetForwardProxyChoiceToAzureVnetIngressEgressGwType(f)
	m1.SetGlobalNetworkChoiceToAzureVnetIngressEgressGwType(f)
	m1.SetHubChoiceToAzureVnetIngressEgressGwType(f)
	m1.SetInsideStaticRouteChoiceToAzureVnetIngressEgressGwType(f)
	m1.SetNetworkPolicyChoiceToAzureVnetIngressEgressGwType(f)
	m1.SetOutsideStaticRouteChoiceToAzureVnetIngressEgressGwType(f)
	f.PerformanceEnhancementMode = m1.PerformanceEnhancementMode
	m1.SetSiteMeshGroupChoiceToAzureVnetIngressEgressGwType(f)
}

func (m *AzureVnetIngressEgressGwReplaceType) ToAzureVnetIngressEgressGwType(f *AzureVnetIngressEgressGwType) {
	m.toAzureVnetIngressEgressGwType(f, true)
}

func (m *AzureVnetIngressEgressGwReplaceType) ToAzureVnetIngressEgressGwTypeWithoutDeepCopy(f *AzureVnetIngressEgressGwType) {
	m.toAzureVnetIngressEgressGwType(f, false)
}

func (m *AzureVnetIngressGwARReplaceType) fromAzureVnetIngressGwARType(f *AzureVnetIngressGwARType, withDeepCopy bool) {
	if f == nil {
		return
	}
}

func (m *AzureVnetIngressGwARReplaceType) FromAzureVnetIngressGwARType(f *AzureVnetIngressGwARType) {
	m.fromAzureVnetIngressGwARType(f, true)
}

func (m *AzureVnetIngressGwARReplaceType) FromAzureVnetIngressGwARTypeWithoutDeepCopy(f *AzureVnetIngressGwARType) {
	m.fromAzureVnetIngressGwARType(f, false)
}

func (m *AzureVnetIngressGwARReplaceType) toAzureVnetIngressGwARType(f *AzureVnetIngressGwARType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

}

func (m *AzureVnetIngressGwARReplaceType) ToAzureVnetIngressGwARType(f *AzureVnetIngressGwARType) {
	m.toAzureVnetIngressGwARType(f, true)
}

func (m *AzureVnetIngressGwARReplaceType) ToAzureVnetIngressGwARTypeWithoutDeepCopy(f *AzureVnetIngressGwARType) {
	m.toAzureVnetIngressGwARType(f, false)
}

func (m *AzureVnetIngressGwReplaceType) fromAzureVnetIngressGwType(f *AzureVnetIngressGwType, withDeepCopy bool) {
	if f == nil {
		return
	}
}

func (m *AzureVnetIngressGwReplaceType) FromAzureVnetIngressGwType(f *AzureVnetIngressGwType) {
	m.fromAzureVnetIngressGwType(f, true)
}

func (m *AzureVnetIngressGwReplaceType) FromAzureVnetIngressGwTypeWithoutDeepCopy(f *AzureVnetIngressGwType) {
	m.fromAzureVnetIngressGwType(f, false)
}

func (m *AzureVnetIngressGwReplaceType) toAzureVnetIngressGwType(f *AzureVnetIngressGwType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

}

func (m *AzureVnetIngressGwReplaceType) ToAzureVnetIngressGwType(f *AzureVnetIngressGwType) {
	m.toAzureVnetIngressGwType(f, true)
}

func (m *AzureVnetIngressGwReplaceType) ToAzureVnetIngressGwTypeWithoutDeepCopy(f *AzureVnetIngressGwType) {
	m.toAzureVnetIngressGwType(f, false)
}

// create setters in AzureVnetVoltstackClusterARReplaceType from AzureVnetVoltstackClusterARType for oneof fields
func (r *AzureVnetVoltstackClusterARReplaceType) SetDcClusterGroupChoiceToAzureVnetVoltstackClusterARType(o *AzureVnetVoltstackClusterARType) error {
	switch of := r.DcClusterGroupChoice.(type) {
	case nil:
		o.DcClusterGroupChoice = nil

	case *AzureVnetVoltstackClusterARReplaceType_DcClusterGroup:
		o.DcClusterGroupChoice = &AzureVnetVoltstackClusterARType_DcClusterGroup{DcClusterGroup: of.DcClusterGroup}

	case *AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup:
		o.DcClusterGroupChoice = &AzureVnetVoltstackClusterARType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterARReplaceType) GetDcClusterGroupChoiceFromAzureVnetVoltstackClusterARType(o *AzureVnetVoltstackClusterARType) error {
	switch of := o.DcClusterGroupChoice.(type) {
	case nil:
		r.DcClusterGroupChoice = nil

	case *AzureVnetVoltstackClusterARType_DcClusterGroup:
		r.DcClusterGroupChoice = &AzureVnetVoltstackClusterARReplaceType_DcClusterGroup{DcClusterGroup: of.DcClusterGroup}

	case *AzureVnetVoltstackClusterARType_NoDcClusterGroup:
		r.DcClusterGroupChoice = &AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetVoltstackClusterARReplaceType from AzureVnetVoltstackClusterARType for oneof fields
func (r *AzureVnetVoltstackClusterARReplaceType) SetForwardProxyChoiceToAzureVnetVoltstackClusterARType(o *AzureVnetVoltstackClusterARType) error {
	switch of := r.ForwardProxyChoice.(type) {
	case nil:
		o.ForwardProxyChoice = nil

	case *AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies:
		o.ForwardProxyChoice = &AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll:
		o.ForwardProxyChoice = &AzureVnetVoltstackClusterARType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AzureVnetVoltstackClusterARReplaceType_NoForwardProxy:
		o.ForwardProxyChoice = &AzureVnetVoltstackClusterARType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterARReplaceType) GetForwardProxyChoiceFromAzureVnetVoltstackClusterARType(o *AzureVnetVoltstackClusterARType) error {
	switch of := o.ForwardProxyChoice.(type) {
	case nil:
		r.ForwardProxyChoice = nil

	case *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies:
		r.ForwardProxyChoice = &AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll:
		r.ForwardProxyChoice = &AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AzureVnetVoltstackClusterARType_NoForwardProxy:
		r.ForwardProxyChoice = &AzureVnetVoltstackClusterARReplaceType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetVoltstackClusterARReplaceType from AzureVnetVoltstackClusterARType for oneof fields
func (r *AzureVnetVoltstackClusterARReplaceType) SetGlobalNetworkChoiceToAzureVnetVoltstackClusterARType(o *AzureVnetVoltstackClusterARType) error {
	switch of := r.GlobalNetworkChoice.(type) {
	case nil:
		o.GlobalNetworkChoice = nil

	case *AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList:
		o.GlobalNetworkChoice = &AzureVnetVoltstackClusterARType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork:
		o.GlobalNetworkChoice = &AzureVnetVoltstackClusterARType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterARReplaceType) GetGlobalNetworkChoiceFromAzureVnetVoltstackClusterARType(o *AzureVnetVoltstackClusterARType) error {
	switch of := o.GlobalNetworkChoice.(type) {
	case nil:
		r.GlobalNetworkChoice = nil

	case *AzureVnetVoltstackClusterARType_GlobalNetworkList:
		r.GlobalNetworkChoice = &AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AzureVnetVoltstackClusterARType_NoGlobalNetwork:
		r.GlobalNetworkChoice = &AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetVoltstackClusterARReplaceType from AzureVnetVoltstackClusterARType for oneof fields
func (r *AzureVnetVoltstackClusterARReplaceType) SetNetworkPolicyChoiceToAzureVnetVoltstackClusterARType(o *AzureVnetVoltstackClusterARType) error {
	switch of := r.NetworkPolicyChoice.(type) {
	case nil:
		o.NetworkPolicyChoice = nil

	case *AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies:
		o.NetworkPolicyChoice = &AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies:
		o.NetworkPolicyChoice = &AzureVnetVoltstackClusterARType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy:
		o.NetworkPolicyChoice = &AzureVnetVoltstackClusterARType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterARReplaceType) GetNetworkPolicyChoiceFromAzureVnetVoltstackClusterARType(o *AzureVnetVoltstackClusterARType) error {
	switch of := o.NetworkPolicyChoice.(type) {
	case nil:
		r.NetworkPolicyChoice = nil

	case *AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies:
		r.NetworkPolicyChoice = &AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies:
		r.NetworkPolicyChoice = &AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AzureVnetVoltstackClusterARType_NoNetworkPolicy:
		r.NetworkPolicyChoice = &AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetVoltstackClusterARReplaceType from AzureVnetVoltstackClusterARType for oneof fields
func (r *AzureVnetVoltstackClusterARReplaceType) SetOutsideStaticRouteChoiceToAzureVnetVoltstackClusterARType(o *AzureVnetVoltstackClusterARType) error {
	switch of := r.OutsideStaticRouteChoice.(type) {
	case nil:
		o.OutsideStaticRouteChoice = nil

	case *AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterARType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterARReplaceType) GetOutsideStaticRouteChoiceFromAzureVnetVoltstackClusterARType(o *AzureVnetVoltstackClusterARType) error {
	switch of := o.OutsideStaticRouteChoice.(type) {
	case nil:
		r.OutsideStaticRouteChoice = nil

	case *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AzureVnetVoltstackClusterARType_OutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetVoltstackClusterARReplaceType from AzureVnetVoltstackClusterARType for oneof fields
func (r *AzureVnetVoltstackClusterARReplaceType) SetSiteMeshGroupChoiceToAzureVnetVoltstackClusterARType(o *AzureVnetVoltstackClusterARType) error {
	switch of := r.SiteMeshGroupChoice.(type) {
	case nil:
		o.SiteMeshGroupChoice = nil

	case *AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp:
		o.SiteMeshGroupChoice = &AzureVnetVoltstackClusterARType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp:
		o.SiteMeshGroupChoice = &AzureVnetVoltstackClusterARType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterARReplaceType) GetSiteMeshGroupChoiceFromAzureVnetVoltstackClusterARType(o *AzureVnetVoltstackClusterARType) error {
	switch of := o.SiteMeshGroupChoice.(type) {
	case nil:
		r.SiteMeshGroupChoice = nil

	case *AzureVnetVoltstackClusterARType_SmConnectionPublicIp:
		r.SiteMeshGroupChoice = &AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *AzureVnetVoltstackClusterARType_SmConnectionPvtIp:
		r.SiteMeshGroupChoice = &AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) fromAzureVnetVoltstackClusterARType(f *AzureVnetVoltstackClusterARType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetDcClusterGroupChoiceFromAzureVnetVoltstackClusterARType(f)
	m.GetForwardProxyChoiceFromAzureVnetVoltstackClusterARType(f)
	m.GetGlobalNetworkChoiceFromAzureVnetVoltstackClusterARType(f)
	m.GetNetworkPolicyChoiceFromAzureVnetVoltstackClusterARType(f)
	m.GetOutsideStaticRouteChoiceFromAzureVnetVoltstackClusterARType(f)
	m.GetSiteMeshGroupChoiceFromAzureVnetVoltstackClusterARType(f)
}

func (m *AzureVnetVoltstackClusterARReplaceType) FromAzureVnetVoltstackClusterARType(f *AzureVnetVoltstackClusterARType) {
	m.fromAzureVnetVoltstackClusterARType(f, true)
}

func (m *AzureVnetVoltstackClusterARReplaceType) FromAzureVnetVoltstackClusterARTypeWithoutDeepCopy(f *AzureVnetVoltstackClusterARType) {
	m.fromAzureVnetVoltstackClusterARType(f, false)
}

func (m *AzureVnetVoltstackClusterARReplaceType) toAzureVnetVoltstackClusterARType(f *AzureVnetVoltstackClusterARType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetDcClusterGroupChoiceToAzureVnetVoltstackClusterARType(f)
	m1.SetForwardProxyChoiceToAzureVnetVoltstackClusterARType(f)
	m1.SetGlobalNetworkChoiceToAzureVnetVoltstackClusterARType(f)
	m1.SetNetworkPolicyChoiceToAzureVnetVoltstackClusterARType(f)
	m1.SetOutsideStaticRouteChoiceToAzureVnetVoltstackClusterARType(f)
	m1.SetSiteMeshGroupChoiceToAzureVnetVoltstackClusterARType(f)
}

func (m *AzureVnetVoltstackClusterARReplaceType) ToAzureVnetVoltstackClusterARType(f *AzureVnetVoltstackClusterARType) {
	m.toAzureVnetVoltstackClusterARType(f, true)
}

func (m *AzureVnetVoltstackClusterARReplaceType) ToAzureVnetVoltstackClusterARTypeWithoutDeepCopy(f *AzureVnetVoltstackClusterARType) {
	m.toAzureVnetVoltstackClusterARType(f, false)
}

// create setters in AzureVnetVoltstackClusterReplaceType from AzureVnetVoltstackClusterType for oneof fields
func (r *AzureVnetVoltstackClusterReplaceType) SetDcClusterGroupChoiceToAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := r.DcClusterGroupChoice.(type) {
	case nil:
		o.DcClusterGroupChoice = nil

	case *AzureVnetVoltstackClusterReplaceType_DcClusterGroup:
		o.DcClusterGroupChoice = &AzureVnetVoltstackClusterType_DcClusterGroup{DcClusterGroup: of.DcClusterGroup}

	case *AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup:
		o.DcClusterGroupChoice = &AzureVnetVoltstackClusterType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterReplaceType) GetDcClusterGroupChoiceFromAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := o.DcClusterGroupChoice.(type) {
	case nil:
		r.DcClusterGroupChoice = nil

	case *AzureVnetVoltstackClusterType_DcClusterGroup:
		r.DcClusterGroupChoice = &AzureVnetVoltstackClusterReplaceType_DcClusterGroup{DcClusterGroup: of.DcClusterGroup}

	case *AzureVnetVoltstackClusterType_NoDcClusterGroup:
		r.DcClusterGroupChoice = &AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetVoltstackClusterReplaceType from AzureVnetVoltstackClusterType for oneof fields
func (r *AzureVnetVoltstackClusterReplaceType) SetForwardProxyChoiceToAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := r.ForwardProxyChoice.(type) {
	case nil:
		o.ForwardProxyChoice = nil

	case *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies:
		o.ForwardProxyChoice = &AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll:
		o.ForwardProxyChoice = &AzureVnetVoltstackClusterType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AzureVnetVoltstackClusterReplaceType_NoForwardProxy:
		o.ForwardProxyChoice = &AzureVnetVoltstackClusterType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterReplaceType) GetForwardProxyChoiceFromAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := o.ForwardProxyChoice.(type) {
	case nil:
		r.ForwardProxyChoice = nil

	case *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies:
		r.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AzureVnetVoltstackClusterType_ForwardProxyAllowAll:
		r.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AzureVnetVoltstackClusterType_NoForwardProxy:
		r.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetVoltstackClusterReplaceType from AzureVnetVoltstackClusterType for oneof fields
func (r *AzureVnetVoltstackClusterReplaceType) SetGlobalNetworkChoiceToAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := r.GlobalNetworkChoice.(type) {
	case nil:
		o.GlobalNetworkChoice = nil

	case *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList:
		o.GlobalNetworkChoice = &AzureVnetVoltstackClusterType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork:
		o.GlobalNetworkChoice = &AzureVnetVoltstackClusterType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterReplaceType) GetGlobalNetworkChoiceFromAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := o.GlobalNetworkChoice.(type) {
	case nil:
		r.GlobalNetworkChoice = nil

	case *AzureVnetVoltstackClusterType_GlobalNetworkList:
		r.GlobalNetworkChoice = &AzureVnetVoltstackClusterReplaceType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AzureVnetVoltstackClusterType_NoGlobalNetwork:
		r.GlobalNetworkChoice = &AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetVoltstackClusterReplaceType from AzureVnetVoltstackClusterType for oneof fields
func (r *AzureVnetVoltstackClusterReplaceType) SetNetworkPolicyChoiceToAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := r.NetworkPolicyChoice.(type) {
	case nil:
		o.NetworkPolicyChoice = nil

	case *AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies:
		o.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies:
		o.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy:
		o.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterReplaceType) GetNetworkPolicyChoiceFromAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := o.NetworkPolicyChoice.(type) {
	case nil:
		r.NetworkPolicyChoice = nil

	case *AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies:
		r.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *AzureVnetVoltstackClusterType_ActiveNetworkPolicies:
		r.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AzureVnetVoltstackClusterType_NoNetworkPolicy:
		r.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetVoltstackClusterReplaceType from AzureVnetVoltstackClusterType for oneof fields
func (r *AzureVnetVoltstackClusterReplaceType) SetOutsideStaticRouteChoiceToAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := r.OutsideStaticRouteChoice.(type) {
	case nil:
		o.OutsideStaticRouteChoice = nil

	case *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterReplaceType) GetOutsideStaticRouteChoiceFromAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := o.OutsideStaticRouteChoice.(type) {
	case nil:
		r.OutsideStaticRouteChoice = nil

	case *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AzureVnetVoltstackClusterType_OutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetVoltstackClusterReplaceType from AzureVnetVoltstackClusterType for oneof fields
func (r *AzureVnetVoltstackClusterReplaceType) SetSiteMeshGroupChoiceToAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := r.SiteMeshGroupChoice.(type) {
	case nil:
		o.SiteMeshGroupChoice = nil

	case *AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp:
		o.SiteMeshGroupChoice = &AzureVnetVoltstackClusterType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp:
		o.SiteMeshGroupChoice = &AzureVnetVoltstackClusterType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterReplaceType) GetSiteMeshGroupChoiceFromAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := o.SiteMeshGroupChoice.(type) {
	case nil:
		r.SiteMeshGroupChoice = nil

	case *AzureVnetVoltstackClusterType_SmConnectionPublicIp:
		r.SiteMeshGroupChoice = &AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *AzureVnetVoltstackClusterType_SmConnectionPvtIp:
		r.SiteMeshGroupChoice = &AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) fromAzureVnetVoltstackClusterType(f *AzureVnetVoltstackClusterType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetDcClusterGroupChoiceFromAzureVnetVoltstackClusterType(f)
	m.GetForwardProxyChoiceFromAzureVnetVoltstackClusterType(f)
	m.GetGlobalNetworkChoiceFromAzureVnetVoltstackClusterType(f)
	m.GetNetworkPolicyChoiceFromAzureVnetVoltstackClusterType(f)
	m.GetOutsideStaticRouteChoiceFromAzureVnetVoltstackClusterType(f)
	m.GetSiteMeshGroupChoiceFromAzureVnetVoltstackClusterType(f)
}

func (m *AzureVnetVoltstackClusterReplaceType) FromAzureVnetVoltstackClusterType(f *AzureVnetVoltstackClusterType) {
	m.fromAzureVnetVoltstackClusterType(f, true)
}

func (m *AzureVnetVoltstackClusterReplaceType) FromAzureVnetVoltstackClusterTypeWithoutDeepCopy(f *AzureVnetVoltstackClusterType) {
	m.fromAzureVnetVoltstackClusterType(f, false)
}

func (m *AzureVnetVoltstackClusterReplaceType) toAzureVnetVoltstackClusterType(f *AzureVnetVoltstackClusterType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetDcClusterGroupChoiceToAzureVnetVoltstackClusterType(f)
	m1.SetForwardProxyChoiceToAzureVnetVoltstackClusterType(f)
	m1.SetGlobalNetworkChoiceToAzureVnetVoltstackClusterType(f)
	m1.SetNetworkPolicyChoiceToAzureVnetVoltstackClusterType(f)
	m1.SetOutsideStaticRouteChoiceToAzureVnetVoltstackClusterType(f)
	m1.SetSiteMeshGroupChoiceToAzureVnetVoltstackClusterType(f)
}

func (m *AzureVnetVoltstackClusterReplaceType) ToAzureVnetVoltstackClusterType(f *AzureVnetVoltstackClusterType) {
	m.toAzureVnetVoltstackClusterType(f, true)
}

func (m *AzureVnetVoltstackClusterReplaceType) ToAzureVnetVoltstackClusterTypeWithoutDeepCopy(f *AzureVnetVoltstackClusterType) {
	m.toAzureVnetVoltstackClusterType(f, false)
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *CreateSpecType_BlockAllServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *CreateSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *CreateSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockAllServices:
		r.BlockedServicesChoice = &CreateSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &CreateSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &CreateSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetDeploymentToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Deployment.(type) {
	case nil:
		o.Deployment = nil

	case *CreateSpecType_AzureCred:
		o.Deployment = &GlobalSpecType_AzureCred{AzureCred: of.AzureCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetDeploymentFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Deployment.(type) {
	case nil:
		r.Deployment = nil

	case *GlobalSpecType_AzureCred:
		r.Deployment = &CreateSpecType_AzureCred{AzureCred: of.AzureCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *CreateSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *CreateSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &CreateSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetRegionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RegionChoice.(type) {
	case nil:
		o.RegionChoice = nil

	case *CreateSpecType_AlternateRegion:
		o.RegionChoice = &GlobalSpecType_AlternateRegion{AlternateRegion: of.AlternateRegion}

	case *CreateSpecType_AzureRegion:
		o.RegionChoice = &GlobalSpecType_AzureRegion{AzureRegion: of.AzureRegion}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetRegionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RegionChoice.(type) {
	case nil:
		r.RegionChoice = nil

	case *GlobalSpecType_AlternateRegion:
		r.RegionChoice = &CreateSpecType_AlternateRegion{AlternateRegion: of.AlternateRegion}

	case *GlobalSpecType_AzureRegion:
		r.RegionChoice = &CreateSpecType_AzureRegion{AzureRegion: of.AzureRegion}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetSiteTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteType.(type) {
	case nil:
		o.SiteType = nil

	case *CreateSpecType_IngressEgressGw:
		o.SiteType = &GlobalSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *CreateSpecType_IngressEgressGwAr:
		o.SiteType = &GlobalSpecType_IngressEgressGwAr{IngressEgressGwAr: of.IngressEgressGwAr}

	case *CreateSpecType_IngressGw:
		o.SiteType = &GlobalSpecType_IngressGw{IngressGw: of.IngressGw}

	case *CreateSpecType_IngressGwAr:
		o.SiteType = &GlobalSpecType_IngressGwAr{IngressGwAr: of.IngressGwAr}

	case *CreateSpecType_VoltstackCluster:
		o.SiteType = &GlobalSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	case *CreateSpecType_VoltstackClusterAr:
		o.SiteType = &GlobalSpecType_VoltstackClusterAr{VoltstackClusterAr: of.VoltstackClusterAr}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetSiteTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteType.(type) {
	case nil:
		r.SiteType = nil

	case *GlobalSpecType_IngressEgressGw:
		r.SiteType = &CreateSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *GlobalSpecType_IngressEgressGwAr:
		r.SiteType = &CreateSpecType_IngressEgressGwAr{IngressEgressGwAr: of.IngressEgressGwAr}

	case *GlobalSpecType_IngressGw:
		r.SiteType = &CreateSpecType_IngressGw{IngressGw: of.IngressGw}

	case *GlobalSpecType_IngressGwAr:
		r.SiteType = &CreateSpecType_IngressGwAr{IngressGwAr: of.IngressGwAr}

	case *GlobalSpecType_VoltstackCluster:
		r.SiteType = &CreateSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	case *GlobalSpecType_VoltstackClusterAr:
		r.SiteType = &CreateSpecType_VoltstackClusterAr{VoltstackClusterAr: of.VoltstackClusterAr}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetWorkerNodesToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WorkerNodes.(type) {
	case nil:
		o.WorkerNodes = nil

	case *CreateSpecType_NoWorkerNodes:
		o.WorkerNodes = &GlobalSpecType_NoWorkerNodes{NoWorkerNodes: of.NoWorkerNodes}

	case *CreateSpecType_NodesPerAz:
		o.WorkerNodes = &GlobalSpecType_NodesPerAz{NodesPerAz: of.NodesPerAz}

	case *CreateSpecType_TotalNodes:
		o.WorkerNodes = &GlobalSpecType_TotalNodes{TotalNodes: of.TotalNodes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetWorkerNodesFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WorkerNodes.(type) {
	case nil:
		r.WorkerNodes = nil

	case *GlobalSpecType_NoWorkerNodes:
		r.WorkerNodes = &CreateSpecType_NoWorkerNodes{NoWorkerNodes: of.NoWorkerNodes}

	case *GlobalSpecType_NodesPerAz:
		r.WorkerNodes = &CreateSpecType_NodesPerAz{NodesPerAz: of.NodesPerAz}

	case *GlobalSpecType_TotalNodes:
		r.WorkerNodes = &CreateSpecType_TotalNodes{TotalNodes: of.TotalNodes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.Coordinates = f.GetCoordinates()
	m.CustomDns = f.GetCustomDns()
	m.GetDeploymentFromGlobalSpecType(f)
	m.DiskSize = f.GetDiskSize()
	m.KubernetesUpgradeDrain = f.GetKubernetesUpgradeDrain()
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.MachineType = f.GetMachineType()
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.Os = f.GetOs()
	m.GetRegionChoiceFromGlobalSpecType(f)
	m.ResourceGroup = f.GetResourceGroup()
	m.GetSiteTypeFromGlobalSpecType(f)
	m.SshKey = f.GetSshKey()
	m.Sw = f.GetSw()
	m.Tags = f.GetTags()
	m.Vnet = f.GetVnet()
	m.GetWorkerNodesFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	f.Coordinates = m1.Coordinates
	f.CustomDns = m1.CustomDns
	m1.SetDeploymentToGlobalSpecType(f)
	f.DiskSize = m1.DiskSize
	f.KubernetesUpgradeDrain = m1.KubernetesUpgradeDrain
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.MachineType = m1.MachineType
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	f.Os = m1.Os
	m1.SetRegionChoiceToGlobalSpecType(f)
	f.ResourceGroup = m1.ResourceGroup
	m1.SetSiteTypeToGlobalSpecType(f)
	f.SshKey = m1.SshKey
	f.Sw = m1.Sw
	f.Tags = m1.Tags
	f.Vnet = m1.Vnet
	m1.SetWorkerNodesToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *GetSpecType_BlockAllServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *GetSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GetSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockAllServices:
		r.BlockedServicesChoice = &GetSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &GetSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &GetSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetDeploymentToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Deployment.(type) {
	case nil:
		o.Deployment = nil

	case *GetSpecType_Assisted:
		o.Deployment = &GlobalSpecType_Assisted{Assisted: of.Assisted}

	case *GetSpecType_AzureCred:
		o.Deployment = &GlobalSpecType_AzureCred{AzureCred: of.AzureCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetDeploymentFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Deployment.(type) {
	case nil:
		r.Deployment = nil

	case *GlobalSpecType_Assisted:
		r.Deployment = &GetSpecType_Assisted{Assisted: of.Assisted}

	case *GlobalSpecType_AzureCred:
		r.Deployment = &GetSpecType_AzureCred{AzureCred: of.AzureCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *GetSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GetSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &GetSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetRegionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RegionChoice.(type) {
	case nil:
		o.RegionChoice = nil

	case *GetSpecType_AlternateRegion:
		o.RegionChoice = &GlobalSpecType_AlternateRegion{AlternateRegion: of.AlternateRegion}

	case *GetSpecType_AzureRegion:
		o.RegionChoice = &GlobalSpecType_AzureRegion{AzureRegion: of.AzureRegion}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetRegionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RegionChoice.(type) {
	case nil:
		r.RegionChoice = nil

	case *GlobalSpecType_AlternateRegion:
		r.RegionChoice = &GetSpecType_AlternateRegion{AlternateRegion: of.AlternateRegion}

	case *GlobalSpecType_AzureRegion:
		r.RegionChoice = &GetSpecType_AzureRegion{AzureRegion: of.AzureRegion}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetSiteTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteType.(type) {
	case nil:
		o.SiteType = nil

	case *GetSpecType_IngressEgressGw:
		o.SiteType = &GlobalSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *GetSpecType_IngressEgressGwAr:
		o.SiteType = &GlobalSpecType_IngressEgressGwAr{IngressEgressGwAr: of.IngressEgressGwAr}

	case *GetSpecType_IngressGw:
		o.SiteType = &GlobalSpecType_IngressGw{IngressGw: of.IngressGw}

	case *GetSpecType_IngressGwAr:
		o.SiteType = &GlobalSpecType_IngressGwAr{IngressGwAr: of.IngressGwAr}

	case *GetSpecType_VoltstackCluster:
		o.SiteType = &GlobalSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	case *GetSpecType_VoltstackClusterAr:
		o.SiteType = &GlobalSpecType_VoltstackClusterAr{VoltstackClusterAr: of.VoltstackClusterAr}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetSiteTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteType.(type) {
	case nil:
		r.SiteType = nil

	case *GlobalSpecType_IngressEgressGw:
		r.SiteType = &GetSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *GlobalSpecType_IngressEgressGwAr:
		r.SiteType = &GetSpecType_IngressEgressGwAr{IngressEgressGwAr: of.IngressEgressGwAr}

	case *GlobalSpecType_IngressGw:
		r.SiteType = &GetSpecType_IngressGw{IngressGw: of.IngressGw}

	case *GlobalSpecType_IngressGwAr:
		r.SiteType = &GetSpecType_IngressGwAr{IngressGwAr: of.IngressGwAr}

	case *GlobalSpecType_VoltstackCluster:
		r.SiteType = &GetSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	case *GlobalSpecType_VoltstackClusterAr:
		r.SiteType = &GetSpecType_VoltstackClusterAr{VoltstackClusterAr: of.VoltstackClusterAr}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetWorkerNodesToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WorkerNodes.(type) {
	case nil:
		o.WorkerNodes = nil

	case *GetSpecType_NoWorkerNodes:
		o.WorkerNodes = &GlobalSpecType_NoWorkerNodes{NoWorkerNodes: of.NoWorkerNodes}

	case *GetSpecType_NodesPerAz:
		o.WorkerNodes = &GlobalSpecType_NodesPerAz{NodesPerAz: of.NodesPerAz}

	case *GetSpecType_TotalNodes:
		o.WorkerNodes = &GlobalSpecType_TotalNodes{TotalNodes: of.TotalNodes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetWorkerNodesFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WorkerNodes.(type) {
	case nil:
		r.WorkerNodes = nil

	case *GlobalSpecType_NoWorkerNodes:
		r.WorkerNodes = &GetSpecType_NoWorkerNodes{NoWorkerNodes: of.NoWorkerNodes}

	case *GlobalSpecType_NodesPerAz:
		r.WorkerNodes = &GetSpecType_NodesPerAz{NodesPerAz: of.NodesPerAz}

	case *GlobalSpecType_TotalNodes:
		r.WorkerNodes = &GetSpecType_TotalNodes{TotalNodes: of.TotalNodes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.CloudSiteInfo = f.GetCloudSiteInfo()
	m.Coordinates = f.GetCoordinates()
	m.CustomDns = f.GetCustomDns()
	m.GetDeploymentFromGlobalSpecType(f)
	m.DiskSize = f.GetDiskSize()
	m.ErrorDescription = f.GetErrorDescription()
	m.KubernetesUpgradeDrain = f.GetKubernetesUpgradeDrain()
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.MachineType = f.GetMachineType()
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.OperatingSystemVersion = f.GetOperatingSystemVersion()
	m.GetRegionChoiceFromGlobalSpecType(f)
	m.ResourceGroup = f.GetResourceGroup()
	m.SiteErrors = f.GetSiteErrors()

	m.GetSiteTypeFromGlobalSpecType(f)
	m.SshKey = f.GetSshKey()
	m.SuggestedAction = f.GetSuggestedAction()
	m.Tags = f.GetTags()
	m.UserModificationTimestamp = f.GetUserModificationTimestamp()
	m.ValidationState = f.GetValidationState()
	m.VipParamsPerAz = f.GetVipParamsPerAz()
	m.Vnet = f.GetVnet()
	m.VolterraSoftwareVersion = f.GetVolterraSoftwareVersion()
	m.GetWorkerNodesFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	f.CloudSiteInfo = m1.CloudSiteInfo
	f.Coordinates = m1.Coordinates
	f.CustomDns = m1.CustomDns
	m1.SetDeploymentToGlobalSpecType(f)
	f.DiskSize = m1.DiskSize
	f.ErrorDescription = m1.ErrorDescription
	f.KubernetesUpgradeDrain = m1.KubernetesUpgradeDrain
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.MachineType = m1.MachineType
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	f.OperatingSystemVersion = m1.OperatingSystemVersion
	m1.SetRegionChoiceToGlobalSpecType(f)
	f.ResourceGroup = m1.ResourceGroup
	f.SiteErrors = m1.SiteErrors

	m1.SetSiteTypeToGlobalSpecType(f)
	f.SshKey = m1.SshKey
	f.SuggestedAction = m1.SuggestedAction
	f.Tags = m1.Tags
	f.UserModificationTimestamp = m1.UserModificationTimestamp
	f.ValidationState = m1.ValidationState
	f.VipParamsPerAz = m1.VipParamsPerAz
	f.Vnet = m1.Vnet
	f.VolterraSoftwareVersion = m1.VolterraSoftwareVersion
	m1.SetWorkerNodesToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *ReplaceSpecType_BlockAllServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *ReplaceSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *ReplaceSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockAllServices:
		r.BlockedServicesChoice = &ReplaceSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &ReplaceSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &ReplaceSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetDeploymentToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Deployment.(type) {
	case nil:
		o.Deployment = nil

	case *ReplaceSpecType_AzureCred:
		o.Deployment = &GlobalSpecType_AzureCred{AzureCred: of.AzureCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetDeploymentFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Deployment.(type) {
	case nil:
		r.Deployment = nil

	case *GlobalSpecType_AzureCred:
		r.Deployment = &ReplaceSpecType_AzureCred{AzureCred: of.AzureCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *ReplaceSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *ReplaceSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetRegionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RegionChoice.(type) {
	case nil:
		o.RegionChoice = nil

	case *ReplaceSpecType_AlternateRegion:
		o.RegionChoice = &GlobalSpecType_AlternateRegion{AlternateRegion: of.AlternateRegion}

	case *ReplaceSpecType_AzureRegion:
		o.RegionChoice = &GlobalSpecType_AzureRegion{AzureRegion: of.AzureRegion}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetRegionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RegionChoice.(type) {
	case nil:
		r.RegionChoice = nil

	case *GlobalSpecType_AlternateRegion:
		r.RegionChoice = &ReplaceSpecType_AlternateRegion{AlternateRegion: of.AlternateRegion}

	case *GlobalSpecType_AzureRegion:
		r.RegionChoice = &ReplaceSpecType_AzureRegion{AzureRegion: of.AzureRegion}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetSiteTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteType.(type) {
	case nil:
		o.SiteType = nil

	case *ReplaceSpecType_IngressEgressGw:

		f1 := o.GetIngressEgressGw()
		if f1 == nil {
			f1 = &AzureVnetIngressEgressGwType{}
		}
		of.IngressEgressGw.ToAzureVnetIngressEgressGwTypeWithoutDeepCopy(f1)
		o.SiteType = &GlobalSpecType_IngressEgressGw{IngressEgressGw: f1}

	case *ReplaceSpecType_IngressEgressGwAr:

		f1 := o.GetIngressEgressGwAr()
		if f1 == nil {
			f1 = &AzureVnetIngressEgressGwARType{}
		}
		of.IngressEgressGwAr.ToAzureVnetIngressEgressGwARTypeWithoutDeepCopy(f1)
		o.SiteType = &GlobalSpecType_IngressEgressGwAr{IngressEgressGwAr: f1}

	case *ReplaceSpecType_IngressGw:

		f1 := o.GetIngressGw()
		if f1 == nil {
			f1 = &AzureVnetIngressGwType{}
		}
		of.IngressGw.ToAzureVnetIngressGwTypeWithoutDeepCopy(f1)
		o.SiteType = &GlobalSpecType_IngressGw{IngressGw: f1}

	case *ReplaceSpecType_IngressGwAr:

		f1 := o.GetIngressGwAr()
		if f1 == nil {
			f1 = &AzureVnetIngressGwARType{}
		}
		of.IngressGwAr.ToAzureVnetIngressGwARTypeWithoutDeepCopy(f1)
		o.SiteType = &GlobalSpecType_IngressGwAr{IngressGwAr: f1}

	case *ReplaceSpecType_VoltstackCluster:

		f1 := o.GetVoltstackCluster()
		if f1 == nil {
			f1 = &AzureVnetVoltstackClusterType{}
		}
		of.VoltstackCluster.ToAzureVnetVoltstackClusterTypeWithoutDeepCopy(f1)
		o.SiteType = &GlobalSpecType_VoltstackCluster{VoltstackCluster: f1}

	case *ReplaceSpecType_VoltstackClusterAr:

		f1 := o.GetVoltstackClusterAr()
		if f1 == nil {
			f1 = &AzureVnetVoltstackClusterARType{}
		}
		of.VoltstackClusterAr.ToAzureVnetVoltstackClusterARTypeWithoutDeepCopy(f1)
		o.SiteType = &GlobalSpecType_VoltstackClusterAr{VoltstackClusterAr: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetSiteTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteType.(type) {
	case nil:
		r.SiteType = nil

	case *GlobalSpecType_IngressEgressGw:

		f1 := &AzureVnetIngressEgressGwReplaceType{}
		f1.FromAzureVnetIngressEgressGwTypeWithoutDeepCopy(of.IngressEgressGw)
		r.SiteType = &ReplaceSpecType_IngressEgressGw{IngressEgressGw: f1}

	case *GlobalSpecType_IngressEgressGwAr:

		f1 := &AzureVnetIngressEgressGwARReplaceType{}
		f1.FromAzureVnetIngressEgressGwARTypeWithoutDeepCopy(of.IngressEgressGwAr)
		r.SiteType = &ReplaceSpecType_IngressEgressGwAr{IngressEgressGwAr: f1}

	case *GlobalSpecType_IngressGw:

		f1 := &AzureVnetIngressGwReplaceType{}
		f1.FromAzureVnetIngressGwTypeWithoutDeepCopy(of.IngressGw)
		r.SiteType = &ReplaceSpecType_IngressGw{IngressGw: f1}

	case *GlobalSpecType_IngressGwAr:

		f1 := &AzureVnetIngressGwARReplaceType{}
		f1.FromAzureVnetIngressGwARTypeWithoutDeepCopy(of.IngressGwAr)
		r.SiteType = &ReplaceSpecType_IngressGwAr{IngressGwAr: f1}

	case *GlobalSpecType_VoltstackCluster:

		f1 := &AzureVnetVoltstackClusterReplaceType{}
		f1.FromAzureVnetVoltstackClusterTypeWithoutDeepCopy(of.VoltstackCluster)
		r.SiteType = &ReplaceSpecType_VoltstackCluster{VoltstackCluster: f1}

	case *GlobalSpecType_VoltstackClusterAr:

		f1 := &AzureVnetVoltstackClusterARReplaceType{}
		f1.FromAzureVnetVoltstackClusterARTypeWithoutDeepCopy(of.VoltstackClusterAr)
		r.SiteType = &ReplaceSpecType_VoltstackClusterAr{VoltstackClusterAr: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetWorkerNodesToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WorkerNodes.(type) {
	case nil:
		o.WorkerNodes = nil

	case *ReplaceSpecType_NoWorkerNodes:
		o.WorkerNodes = &GlobalSpecType_NoWorkerNodes{NoWorkerNodes: of.NoWorkerNodes}

	case *ReplaceSpecType_NodesPerAz:
		o.WorkerNodes = &GlobalSpecType_NodesPerAz{NodesPerAz: of.NodesPerAz}

	case *ReplaceSpecType_TotalNodes:
		o.WorkerNodes = &GlobalSpecType_TotalNodes{TotalNodes: of.TotalNodes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetWorkerNodesFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WorkerNodes.(type) {
	case nil:
		r.WorkerNodes = nil

	case *GlobalSpecType_NoWorkerNodes:
		r.WorkerNodes = &ReplaceSpecType_NoWorkerNodes{NoWorkerNodes: of.NoWorkerNodes}

	case *GlobalSpecType_NodesPerAz:
		r.WorkerNodes = &ReplaceSpecType_NodesPerAz{NodesPerAz: of.NodesPerAz}

	case *GlobalSpecType_TotalNodes:
		r.WorkerNodes = &ReplaceSpecType_TotalNodes{TotalNodes: of.TotalNodes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.Coordinates = f.GetCoordinates()
	m.CustomDns = f.GetCustomDns()
	m.GetDeploymentFromGlobalSpecType(f)
	m.DiskSize = f.GetDiskSize()
	m.KubernetesUpgradeDrain = f.GetKubernetesUpgradeDrain()
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.MachineType = f.GetMachineType()
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.GetRegionChoiceFromGlobalSpecType(f)
	m.ResourceGroup = f.GetResourceGroup()
	m.GetSiteTypeFromGlobalSpecType(f)
	m.SshKey = f.GetSshKey()
	m.Vnet = f.GetVnet()
	m.GetWorkerNodesFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	f.Coordinates = m1.Coordinates
	f.CustomDns = m1.CustomDns
	m1.SetDeploymentToGlobalSpecType(f)
	f.DiskSize = m1.DiskSize
	f.KubernetesUpgradeDrain = m1.KubernetesUpgradeDrain
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.MachineType = m1.MachineType
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	m1.SetRegionChoiceToGlobalSpecType(f)
	f.ResourceGroup = m1.ResourceGroup
	m1.SetSiteTypeToGlobalSpecType(f)
	f.SshKey = m1.SshKey
	f.Vnet = m1.Vnet
	m1.SetWorkerNodesToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/azure_vnet_site/types.proto

package azure_vnet_site

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	fleet "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet"
	network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
	site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Azure Hub VNet Type
//
// x-displayName: "Hub VNet type"
// Hub VNet type
type AzureHubVnetType struct {
	// Spoke VNet Peering
	//
	// x-displayName: "Spoke VNet Peering"
	// Spoke VNet Peering
	SpokeVnets []*VnetPeeringType `protobuf:"bytes,1,rep,name=spoke_vnets,json=spokeVnets,proto3" json:"spoke_vnets,omitempty"`
	// Express Route Configuration
	//
	// x-displayName: "Express Route Configuration"
	// x-required
	// Express Route is disabled on this site or Express Route is enabled on this site
	//
	// Types that are valid to be assigned to ExpressRouteChoice:
	//	*AzureHubVnetType_ExpressRouteDisabled
	//	*AzureHubVnetType_ExpressRouteEnabled
	ExpressRouteChoice isAzureHubVnetType_ExpressRouteChoice `protobuf_oneof:"express_route_choice"`
}

func (m *AzureHubVnetType) Reset()      { *m = AzureHubVnetType{} }
func (*AzureHubVnetType) ProtoMessage() {}
func (*AzureHubVnetType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{0}
}
func (m *AzureHubVnetType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureHubVnetType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureHubVnetType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureHubVnetType.Merge(m, src)
}
func (m *AzureHubVnetType) XXX_Size() int {
	return m.Size()
}
func (m *AzureHubVnetType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureHubVnetType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureHubVnetType proto.InternalMessageInfo

type isAzureHubVnetType_ExpressRouteChoice interface {
	isAzureHubVnetType_ExpressRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureHubVnetType_ExpressRouteDisabled struct {
	ExpressRouteDisabled *schema.Empty `protobuf:"bytes,3,opt,name=express_route_disabled,json=expressRouteDisabled,proto3,oneof" json:"express_route_disabled,omitempty"`
}
type AzureHubVnetType_ExpressRouteEnabled struct {
	ExpressRouteEnabled *ExpressRouteConfigType `protobuf:"bytes,4,opt,name=express_route_enabled,json=expressRouteEnabled,proto3,oneof" json:"express_route_enabled,omitempty"`
}

func (*AzureHubVnetType_ExpressRouteDisabled) isAzureHubVnetType_ExpressRouteChoice() {}
func (*AzureHubVnetType_ExpressRouteEnabled) isAzureHubVnetType_ExpressRouteChoice()  {}

func (m *AzureHubVnetType) GetExpressRouteChoice() isAzureHubVnetType_ExpressRouteChoice {
	if m != nil {
		return m.ExpressRouteChoice
	}
	return nil
}

func (m *AzureHubVnetType) GetSpokeVnets() []*VnetPeeringType {
	if m != nil {
		return m.SpokeVnets
	}
	return nil
}

func (m *AzureHubVnetType) GetExpressRouteDisabled() *schema.Empty {
	if x, ok := m.GetExpressRouteChoice().(*AzureHubVnetType_ExpressRouteDisabled); ok {
		return x.ExpressRouteDisabled
	}
	return nil
}

func (m *AzureHubVnetType) GetExpressRouteEnabled() *ExpressRouteConfigType {
	if x, ok := m.GetExpressRouteChoice().(*AzureHubVnetType_ExpressRouteEnabled); ok {
		return x.ExpressRouteEnabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AzureHubVnetType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AzureHubVnetType_ExpressRouteDisabled)(nil),
		(*AzureHubVnetType_ExpressRouteEnabled)(nil),
	}
}

// VNet Peering
//
// x-displayName: "VNet Peering"
// VNet peering to azure VNet site
type VnetPeeringType struct {
	// VNet ID
	//
	// x-displayName: "VNet ID"
	// Information about existing VNet
	Vnet *views.AzureVnetType `protobuf:"bytes,1,opt,name=vnet,proto3" json:"vnet,omitempty"`
	// Choice of routing configuration
	//
	// x-displayName: "Select automatic or manual configuration for routes"
	// x-required
	// Select automatic or manual configuration for routes
	//
	// Types that are valid to be assigned to RoutingChoice:
	//	*VnetPeeringType_Auto
	//	*VnetPeeringType_Manual
	RoutingChoice isVnetPeeringType_RoutingChoice `protobuf_oneof:"routing_choice"`
	// Labels For VNet's Peering
	//
	// x-displayName: "Labels For VNets Peering"
	// x-example: "value"
	// Add Labels for each of the VNets peered with transit VNet, these labels can be used in firewall policy
	// These labels used must be from known key and label defined in shared namespace
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *VnetPeeringType) Reset()      { *m = VnetPeeringType{} }
func (*VnetPeeringType) ProtoMessage() {}
func (*VnetPeeringType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{1}
}
func (m *VnetPeeringType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VnetPeeringType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VnetPeeringType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VnetPeeringType.Merge(m, src)
}
func (m *VnetPeeringType) XXX_Size() int {
	return m.Size()
}
func (m *VnetPeeringType) XXX_DiscardUnknown() {
	xxx_messageInfo_VnetPeeringType.DiscardUnknown(m)
}

var xxx_messageInfo_VnetPeeringType proto.InternalMessageInfo

type isVnetPeeringType_RoutingChoice interface {
	isVnetPeeringType_RoutingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VnetPeeringType_Auto struct {
	Auto *schema.Empty `protobuf:"bytes,3,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
}
type VnetPeeringType_Manual struct {
	Manual *schema.Empty `protobuf:"bytes,4,opt,name=manual,proto3,oneof" json:"manual,omitempty"`
}

func (*VnetPeeringType_Auto) isVnetPeeringType_RoutingChoice()   {}
func (*VnetPeeringType_Manual) isVnetPeeringType_RoutingChoice() {}

func (m *VnetPeeringType) GetRoutingChoice() isVnetPeeringType_RoutingChoice {
	if m != nil {
		return m.RoutingChoice
	}
	return nil
}

func (m *VnetPeeringType) GetVnet() *views.AzureVnetType {
	if m != nil {
		return m.Vnet
	}
	return nil
}

func (m *VnetPeeringType) GetAuto() *schema.Empty {
	if x, ok := m.GetRoutingChoice().(*VnetPeeringType_Auto); ok {
		return x.Auto
	}
	return nil
}

func (m *VnetPeeringType) GetManual() *schema.Empty {
	if x, ok := m.GetRoutingChoice().(*VnetPeeringType_Manual); ok {
		return x.Manual
	}
	return nil
}

func (m *VnetPeeringType) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VnetPeeringType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VnetPeeringType_Auto)(nil),
		(*VnetPeeringType_Manual)(nil),
	}
}

// Azure Ingress Gateway on Recommended Region
//
// x-displayName: "Azure Ingress Gateway on Recommended Region"
// Single interface Azure ingress site on on Recommended Region
type AzureVnetIngressGwType struct {
	// Nodes
	//
	// x-displayName: "Ingress Gateway (One Interface) Nodes in AZ"
	// x-required
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	AzNodes []*views.AzureVnetOneInterfaceNodeType `protobuf:"bytes,1,rep,name=az_nodes,json=azNodes,proto3" json:"az_nodes,omitempty"`
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-voltmesh"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,2,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
	// Performance Enhancement Choice
	//
	// x-displayName: "Performance Enhancement Mode"
	// Performance Enhancement Mode to optimize for L3 or L7 networking
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,45,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	// Accelerated Networking
	//
	// x-displayName: "Accelerated Networking"
	// Accelerated Networking to reduce Latency, When Mode is toggled, traffic
	// disruption will be seen
	AcceleratedNetworking *views.AcceleratedNetworkingType `protobuf:"bytes,46,opt,name=accelerated_networking,json=acceleratedNetworking,proto3" json:"accelerated_networking,omitempty"`
}

func (m *AzureVnetIngressGwType) Reset()      { *m = AzureVnetIngressGwType{} }
func (*AzureVnetIngressGwType) ProtoMessage() {}
func (*AzureVnetIngressGwType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{2}
}
func (m *AzureVnetIngressGwType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureVnetIngressGwType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureVnetIngressGwType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureVnetIngressGwType.Merge(m, src)
}
func (m *AzureVnetIngressGwType) XXX_Size() int {
	return m.Size()
}
func (m *AzureVnetIngressGwType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureVnetIngressGwType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureVnetIngressGwType proto.InternalMessageInfo

func (m *AzureVnetIngressGwType) GetAzNodes() []*views.AzureVnetOneInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *AzureVnetIngressGwType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

func (m *AzureVnetIngressGwType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *AzureVnetIngressGwType) GetAcceleratedNetworking() *views.AcceleratedNetworkingType {
	if m != nil {
		return m.AcceleratedNetworking
	}
	return nil
}

// Azure Ingress Gateway on Alternate Region
//
// x-displayName: "Azure Ingress Gateway on Alternate Region"
// Single interface Azure ingress site
type AzureVnetIngressGwARType struct {
	// Node Information
	//
	// x-displayName: "Ingress Gateway (One Interface) Node information"
	// Ingress Gateway (One Interface) Node information
	Node *views.AzureVnetOneInterfaceNodeARType `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-voltmesh"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,2,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
	// Performance Enhancement Choice
	//
	// x-displayName: "Performance Enhancement Mode"
	// Performance Enhancement Mode to optimize for L3 or L7 networking
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,45,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	// Accelerated Networking
	//
	// x-displayName: "Accelerated Networking"
	// Accelerated Networking to reduce Latency, When Mode is toggled, traffic
	// disruption will be seen
	AcceleratedNetworking *views.AcceleratedNetworkingType `protobuf:"bytes,46,opt,name=accelerated_networking,json=acceleratedNetworking,proto3" json:"accelerated_networking,omitempty"`
}

func (m *AzureVnetIngressGwARType) Reset()      { *m = AzureVnetIngressGwARType{} }
func (*AzureVnetIngressGwARType) ProtoMessage() {}
func (*AzureVnetIngressGwARType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{3}
}
func (m *AzureVnetIngressGwARType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureVnetIngressGwARType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureVnetIngressGwARType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureVnetIngressGwARType.Merge(m, src)
}
func (m *AzureVnetIngressGwARType) XXX_Size() int {
	return m.Size()
}
func (m *AzureVnetIngressGwARType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureVnetIngressGwARType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureVnetIngressGwARType proto.InternalMessageInfo

func (m *AzureVnetIngressGwARType) GetNode() *views.AzureVnetOneInterfaceNodeARType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *AzureVnetIngressGwARType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

func (m *AzureVnetIngressGwARType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *AzureVnetIngressGwARType) GetAcceleratedNetworking() *views.AcceleratedNetworkingType {
	if m != nil {
		return m.AcceleratedNetworking
	}
	return nil
}

// Express Route Configuration
//
// x-displayName: "Express Route Configuration"
// Express Route Configuration
type ExpressRouteConfigType struct {
	// Connections
	//
	// x-required
	// x-displayName: "Connections"
	// Add the ExpressRoute Circuit Connections to this site
	Connections []*ExpressRouteConnectionType `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
	// Gateway SKU
	//
	// x-displayName: "Gateway SKU"
	// Gateway SKU to be used for Azure VNet Gateway
	//
	// Types that are valid to be assigned to SkuChoice:
	//	*ExpressRouteConfigType_SkuStandard
	//	*ExpressRouteConfigType_SkuErgw1Az
	//	*ExpressRouteConfigType_SkuHighPerf
	//	*ExpressRouteConfigType_SkuErgw2Az
	SkuChoice isExpressRouteConfigType_SkuChoice `protobuf_oneof:"sku_choice"`
	// Gateway Subnet
	//
	// x-displayName: "Subnet for Azure VNet Gateway"
	// Select the type of subnet to be used for VNet Gateway
	GatewaySubnet *views.AzureSubnetChoiceWithAutoType `protobuf:"bytes,10,opt,name=gateway_subnet,json=gatewaySubnet,proto3" json:"gateway_subnet,omitempty"`
	// Route Server Subnet
	//
	// x-displayName: "Subnet for Azure Route Server"
	// Select the type of subnet to be used for Azure Route Server
	RouteServerSubnet *views.AzureSubnetChoiceWithAutoType `protobuf:"bytes,11,opt,name=route_server_subnet,json=routeServerSubnet,proto3" json:"route_server_subnet,omitempty"`
	// Autonomous System Number (ASN) for F5XC Site
	//
	// x-displayName: "ASN for F5XC Site"
	// x-required
	// Autonomous System Number (ASN) for F5XC Site
	//
	// Types that are valid to be assigned to AsnChoice:
	//	*ExpressRouteConfigType_AutoAsn
	//	*ExpressRouteConfigType_CustomAsn
	AsnChoice isExpressRouteConfigType_AsnChoice `protobuf_oneof:"asn_choice"`
	// Site Registration & Connectivity to RE
	//
	// x-displayName: "Site Registration & Connectivity to RE"
	//
	// Types that are valid to be assigned to ConnectivityOptions:
	//	*ExpressRouteConfigType_SiteRegistrationOverInternet
	//	*ExpressRouteConfigType_SiteRegistrationOverExpressRoute
	ConnectivityOptions isExpressRouteConfigType_ConnectivityOptions `protobuf_oneof:"connectivity_options"`
	// Spoke Vnet Route Advertisement To Route Server
	//
	// x-displayName: "Spoke Vnet Route Advertisement To Route Server"
	//
	// Types that are valid to be assigned to SpokeVnetRoutes:
	//	*ExpressRouteConfigType_AdvertiseToRouteServer
	//	*ExpressRouteConfigType_DoNotAdvertiseToRouteServer
	SpokeVnetRoutes isExpressRouteConfigType_SpokeVnetRoutes `protobuf_oneof:"spoke_vnet_routes"`
}

func (m *ExpressRouteConfigType) Reset()      { *m = ExpressRouteConfigType{} }
func (*ExpressRouteConfigType) ProtoMessage() {}
func (*ExpressRouteConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{4}
}
func (m *ExpressRouteConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpressRouteConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExpressRouteConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressRouteConfigType.Merge(m, src)
}
func (m *ExpressRouteConfigType) XXX_Size() int {
	return m.Size()
}
func (m *ExpressRouteConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressRouteConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressRouteConfigType proto.InternalMessageInfo

type isExpressRouteConfigType_SkuChoice interface {
	isExpressRouteConfigType_SkuChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isExpressRouteConfigType_AsnChoice interface {
	isExpressRouteConfigType_AsnChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isExpressRouteConfigType_ConnectivityOptions interface {
	isExpressRouteConfigType_ConnectivityOptions()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isExpressRouteConfigType_SpokeVnetRoutes interface {
	isExpressRouteConfigType_SpokeVnetRoutes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExpressRouteConfigType_SkuStandard struct {
	SkuStandard *schema.Empty `protobuf:"bytes,6,opt,name=sku_standard,json=skuStandard,proto3,oneof" json:"sku_standard,omitempty"`
}
type ExpressRouteConfigType_SkuErgw1Az struct {
	SkuErgw1Az *schema.Empty `protobuf:"bytes,7,opt,name=sku_ergw1az,json=skuErgw1az,proto3,oneof" json:"sku_ergw1az,omitempty"`
}
type ExpressRouteConfigType_SkuHighPerf struct {
	SkuHighPerf *schema.Empty `protobuf:"bytes,8,opt,name=sku_high_perf,json=skuHighPerf,proto3,oneof" json:"sku_high_perf,omitempty"`
}
type ExpressRouteConfigType_SkuErgw2Az struct {
	SkuErgw2Az *schema.Empty `protobuf:"bytes,9,opt,name=sku_ergw2az,json=skuErgw2az,proto3,oneof" json:"sku_ergw2az,omitempty"`
}
type ExpressRouteConfigType_AutoAsn struct {
	AutoAsn *schema.Empty `protobuf:"bytes,13,opt,name=auto_asn,json=autoAsn,proto3,oneof" json:"auto_asn,omitempty"`
}
type ExpressRouteConfigType_CustomAsn struct {
	CustomAsn uint32 `protobuf:"varint,14,opt,name=custom_asn,json=customAsn,proto3,oneof" json:"custom_asn,omitempty"`
}
type ExpressRouteConfigType_SiteRegistrationOverInternet struct {
	SiteRegistrationOverInternet *schema.Empty `protobuf:"bytes,16,opt,name=site_registration_over_internet,json=siteRegistrationOverInternet,proto3,oneof" json:"site_registration_over_internet,omitempty"`
}
type ExpressRouteConfigType_SiteRegistrationOverExpressRoute struct {
	SiteRegistrationOverExpressRoute *views.CloudLinkADNType `protobuf:"bytes,18,opt,name=site_registration_over_express_route,json=siteRegistrationOverExpressRoute,proto3,oneof" json:"site_registration_over_express_route,omitempty"`
}
type ExpressRouteConfigType_AdvertiseToRouteServer struct {
	AdvertiseToRouteServer *schema.Empty `protobuf:"bytes,20,opt,name=advertise_to_route_server,json=advertiseToRouteServer,proto3,oneof" json:"advertise_to_route_server,omitempty"`
}
type ExpressRouteConfigType_DoNotAdvertiseToRouteServer struct {
	DoNotAdvertiseToRouteServer *schema.Empty `protobuf:"bytes,21,opt,name=do_not_advertise_to_route_server,json=doNotAdvertiseToRouteServer,proto3,oneof" json:"do_not_advertise_to_route_server,omitempty"`
}

func (*ExpressRouteConfigType_SkuStandard) isExpressRouteConfigType_SkuChoice() {}
func (*ExpressRouteConfigType_SkuErgw1Az) isExpressRouteConfigType_SkuChoice()  {}
func (*ExpressRouteConfigType_SkuHighPerf) isExpressRouteConfigType_SkuChoice() {}
func (*ExpressRouteConfigType_SkuErgw2Az) isExpressRouteConfigType_SkuChoice()  {}
func (*ExpressRouteConfigType_AutoAsn) isExpressRouteConfigType_AsnChoice()     {}
func (*ExpressRouteConfigType_CustomAsn) isExpressRouteConfigType_AsnChoice()   {}
func (*ExpressRouteConfigType_SiteRegistrationOverInternet) isExpressRouteConfigType_ConnectivityOptions() {
}
func (*ExpressRouteConfigType_SiteRegistrationOverExpressRoute) isExpressRouteConfigType_ConnectivityOptions() {
}
func (*ExpressRouteConfigType_AdvertiseToRouteServer) isExpressRouteConfigType_SpokeVnetRoutes() {}
func (*ExpressRouteConfigType_DoNotAdvertiseToRouteServer) isExpressRouteConfigType_SpokeVnetRoutes() {
}

func (m *ExpressRouteConfigType) GetSkuChoice() isExpressRouteConfigType_SkuChoice {
	if m != nil {
		return m.SkuChoice
	}
	return nil
}
func (m *ExpressRouteConfigType) GetAsnChoice() isExpressRouteConfigType_AsnChoice {
	if m != nil {
		return m.AsnChoice
	}
	return nil
}
func (m *ExpressRouteConfigType) GetConnectivityOptions() isExpressRouteConfigType_ConnectivityOptions {
	if m != nil {
		return m.ConnectivityOptions
	}
	return nil
}
func (m *ExpressRouteConfigType) GetSpokeVnetRoutes() isExpressRouteConfigType_SpokeVnetRoutes {
	if m != nil {
		return m.SpokeVnetRoutes
	}
	return nil
}

func (m *ExpressRouteConfigType) GetConnections() []*ExpressRouteConnectionType {
	if m != nil {
		return m.Connections
	}
	return nil
}

func (m *ExpressRouteConfigType) GetSkuStandard() *schema.Empty {
	if x, ok := m.GetSkuChoice().(*ExpressRouteConfigType_SkuStandard); ok {
		return x.SkuStandard
	}
	return nil
}

func (m *ExpressRouteConfigType) GetSkuErgw1Az() *schema.Empty {
	if x, ok := m.GetSkuChoice().(*ExpressRouteConfigType_SkuErgw1Az); ok {
		return x.SkuErgw1Az
	}
	return nil
}

func (m *ExpressRouteConfigType) GetSkuHighPerf() *schema.Empty {
	if x, ok := m.GetSkuChoice().(*ExpressRouteConfigType_SkuHighPerf); ok {
		return x.SkuHighPerf
	}
	return nil
}

func (m *ExpressRouteConfigType) GetSkuErgw2Az() *schema.Empty {
	if x, ok := m.GetSkuChoice().(*ExpressRouteConfigType_SkuErgw2Az); ok {
		return x.SkuErgw2Az
	}
	return nil
}

func (m *ExpressRouteConfigType) GetGatewaySubnet() *views.AzureSubnetChoiceWithAutoType {
	if m != nil {
		return m.GatewaySubnet
	}
	return nil
}

func (m *ExpressRouteConfigType) GetRouteServerSubnet() *views.AzureSubnetChoiceWithAutoType {
	if m != nil {
		return m.RouteServerSubnet
	}
	return nil
}

func (m *ExpressRouteConfigType) GetAutoAsn() *schema.Empty {
	if x, ok := m.GetAsnChoice().(*ExpressRouteConfigType_AutoAsn); ok {
		return x.AutoAsn
	}
	return nil
}

func (m *ExpressRouteConfigType) GetCustomAsn() uint32 {
	if x, ok := m.GetAsnChoice().(*ExpressRouteConfigType_CustomAsn); ok {
		return x.CustomAsn
	}
	return 0
}

func (m *ExpressRouteConfigType) GetSiteRegistrationOverInternet() *schema.Empty {
	if x, ok := m.GetConnectivityOptions().(*ExpressRouteConfigType_SiteRegistrationOverInternet); ok {
		return x.SiteRegistrationOverInternet
	}
	return nil
}

func (m *ExpressRouteConfigType) GetSiteRegistrationOverExpressRoute() *views.CloudLinkADNType {
	if x, ok := m.GetConnectivityOptions().(*ExpressRouteConfigType_SiteRegistrationOverExpressRoute); ok {
		return x.SiteRegistrationOverExpressRoute
	}
	return nil
}

func (m *ExpressRouteConfigType) GetAdvertiseToRouteServer() *schema.Empty {
	if x, ok := m.GetSpokeVnetRoutes().(*ExpressRouteConfigType_AdvertiseToRouteServer); ok {
		return x.AdvertiseToRouteServer
	}
	return nil
}

func (m *ExpressRouteConfigType) GetDoNotAdvertiseToRouteServer() *schema.Empty {
	if x, ok := m.GetSpokeVnetRoutes().(*ExpressRouteConfigType_DoNotAdvertiseToRouteServer); ok {
		return x.DoNotAdvertiseToRouteServer
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExpressRouteConfigType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExpressRouteConfigType_SkuStandard)(nil),
		(*ExpressRouteConfigType_SkuErgw1Az)(nil),
		(*ExpressRouteConfigType_SkuHighPerf)(nil),
		(*ExpressRouteConfigType_SkuErgw2Az)(nil),
		(*ExpressRouteConfigType_AutoAsn)(nil),
		(*ExpressRouteConfigType_CustomAsn)(nil),
		(*ExpressRouteConfigType_SiteRegistrationOverInternet)(nil),
		(*ExpressRouteConfigType_SiteRegistrationOverExpressRoute)(nil),
		(*ExpressRouteConfigType_AdvertiseToRouteServer)(nil),
		(*ExpressRouteConfigType_DoNotAdvertiseToRouteServer)(nil),
	}
}

// Express Route Circuit Config From Other Subscription
//
// x-displayName: "Express Route Circuit Config From Other Subscription"
// Express Route Circuit Config From Other Subscription
type ExpressRouteOtherSubscriptionConnection struct {
	// Circuit ID
	//
	// x-displayName: "Circuit ID"
	// x-example: "/subscriptions/81ab786c-56eb-4a4d-bb5f-f60329772466/resourceGroups/ExpressRouteResourceGroup/providers/Microsoft.Network/expressRouteCircuits/MyCircuit"
	// Circuit ID
	CircuitId string `protobuf:"bytes,1,opt,name=circuit_id,json=circuitId,proto3" json:"circuit_id,omitempty"`
	// Authorization Key
	//
	// x-displayName: "Authorization Key"
	// Authorization Key created by the circuit owner
	AuthorizedKey *schema.SecretType `protobuf:"bytes,2,opt,name=authorized_key,json=authorizedKey,proto3" json:"authorized_key,omitempty"`
}

func (m *ExpressRouteOtherSubscriptionConnection) Reset() {
	*m = ExpressRouteOtherSubscriptionConnection{}
}
func (*ExpressRouteOtherSubscriptionConnection) ProtoMessage() {}
func (*ExpressRouteOtherSubscriptionConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{5}
}
func (m *ExpressRouteOtherSubscriptionConnection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpressRouteOtherSubscriptionConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExpressRouteOtherSubscriptionConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressRouteOtherSubscriptionConnection.Merge(m, src)
}
func (m *ExpressRouteOtherSubscriptionConnection) XXX_Size() int {
	return m.Size()
}
func (m *ExpressRouteOtherSubscriptionConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressRouteOtherSubscriptionConnection.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressRouteOtherSubscriptionConnection proto.InternalMessageInfo

func (m *ExpressRouteOtherSubscriptionConnection) GetCircuitId() string {
	if m != nil {
		return m.CircuitId
	}
	return ""
}

func (m *ExpressRouteOtherSubscriptionConnection) GetAuthorizedKey() *schema.SecretType {
	if m != nil {
		return m.AuthorizedKey
	}
	return nil
}

// Express Route Connection Configuration
//
// x-displayName: "Express Route Connection Configuration"
// Express Route Connection Configuration
type ExpressRouteConnectionType struct {
	// Connection Metadata
	//
	// x-displayName: "Connection Metadata"
	// x-required
	// Connection Metadata like name and description
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Express Route Circuit Configuration
	//
	// x-displayName: "Express Route Circuit Configuration"
	// Select the type of Express Route Circuit Subscription
	//
	// Types that are valid to be assigned to SubscriptionChoice:
	//	*ExpressRouteConnectionType_CircuitId
	//	*ExpressRouteConnectionType_OtherSubscription
	SubscriptionChoice isExpressRouteConnectionType_SubscriptionChoice `protobuf_oneof:"subscription_choice"`
	// Routing Weight
	//
	// x-displayName: "Routing Weight"
	// x-example: "100"
	// The weight (or priority) for the routes received from this connection. The default value is 10.
	Weight uint32 `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *ExpressRouteConnectionType) Reset()      { *m = ExpressRouteConnectionType{} }
func (*ExpressRouteConnectionType) ProtoMessage() {}
func (*ExpressRouteConnectionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{6}
}
func (m *ExpressRouteConnectionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpressRouteConnectionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExpressRouteConnectionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressRouteConnectionType.Merge(m, src)
}
func (m *ExpressRouteConnectionType) XXX_Size() int {
	return m.Size()
}
func (m *ExpressRouteConnectionType) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressRouteConnectionType.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressRouteConnectionType proto.InternalMessageInfo

type isExpressRouteConnectionType_SubscriptionChoice interface {
	isExpressRouteConnectionType_SubscriptionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExpressRouteConnectionType_CircuitId struct {
	CircuitId string `protobuf:"bytes,6,opt,name=circuit_id,json=circuitId,proto3,oneof" json:"circuit_id,omitempty"`
}
type ExpressRouteConnectionType_OtherSubscription struct {
	OtherSubscription *ExpressRouteOtherSubscriptionConnection `protobuf:"bytes,4,opt,name=other_subscription,json=otherSubscription,proto3,oneof" json:"other_subscription,omitempty"`
}

func (*ExpressRouteConnectionType_CircuitId) isExpressRouteConnectionType_SubscriptionChoice() {}
func (*ExpressRouteConnectionType_OtherSubscription) isExpressRouteConnectionType_SubscriptionChoice() {
}

func (m *ExpressRouteConnectionType) GetSubscriptionChoice() isExpressRouteConnectionType_SubscriptionChoice {
	if m != nil {
		return m.SubscriptionChoice
	}
	return nil
}

func (m *ExpressRouteConnectionType) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ExpressRouteConnectionType) GetCircuitId() string {
	if x, ok := m.GetSubscriptionChoice().(*ExpressRouteConnectionType_CircuitId); ok {
		return x.CircuitId
	}
	return ""
}

func (m *ExpressRouteConnectionType) GetOtherSubscription() *ExpressRouteOtherSubscriptionConnection {
	if x, ok := m.GetSubscriptionChoice().(*ExpressRouteConnectionType_OtherSubscription); ok {
		return x.OtherSubscription
	}
	return nil
}

func (m *ExpressRouteConnectionType) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExpressRouteConnectionType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExpressRouteConnectionType_CircuitId)(nil),
		(*ExpressRouteConnectionType_OtherSubscription)(nil),
	}
}

// Azure Ingress Egress Gateway on Recommended Region
//
// x-displayName: "Azure Ingress/Egress Gateway on Recommended Region"
// Two interface Azure ingress/egress site
type AzureVnetIngressEgressGwType struct {
	// Nodes
	//
	// x-displayName: "Ingress/Egress Gateway (two Interface) Nodes in AZ"
	// x-required
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	AzNodes []*views.AzureVnetTwoInterfaceNodeType `protobuf:"bytes,1,rep,name=az_nodes,json=azNodes,proto3" json:"az_nodes,omitempty"`
	// Manage Firewall Policy
	//
	// x-displayName: "Manage Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetIngressEgressGwType_NoNetworkPolicy
	//	*AzureVnetIngressEgressGwType_ActiveNetworkPolicies
	//	*AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isAzureVnetIngressEgressGwType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetIngressEgressGwType_NoForwardProxy
	//	*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies
	//	*AzureVnetIngressEgressGwType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetIngressEgressGwType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-multi-nic-voltmesh"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,8,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
	// Manage Static Routes for Inside Network
	//
	// x-displayName: "Manage Static Routes for Inside Network"
	// x-required
	// Add static routes to inside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to InsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwType_NoInsideStaticRoutes
	//	*AzureVnetIngressEgressGwType_InsideStaticRoutes
	InsideStaticRouteChoice isAzureVnetIngressEgressGwType_InsideStaticRouteChoice `protobuf_oneof:"inside_static_route_choice"`
	// Manage Static Routes for Outside Network
	//
	// x-displayName: "Manage Static Routes for Outside Network"
	// x-required
	// Add static routes to outside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes
	//	*AzureVnetIngressEgressGwType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to inside or outside network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetIngressEgressGwType_NoGlobalNetwork
	//	*AzureVnetIngressEgressGwType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetIngressEgressGwType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via selected network type
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*AzureVnetIngressEgressGwType_NoDcClusterGroup
	//	*AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn
	//	*AzureVnetIngressEgressGwType_DcClusterGroupInsideVn
	DcClusterGroupChoice isAzureVnetIngressEgressGwType_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*AzureVnetIngressEgressGwType_SmConnectionPublicIp
	//	*AzureVnetIngressEgressGwType_SmConnectionPvtIp
	SiteMeshGroupChoice isAzureVnetIngressEgressGwType_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
	// Choice of VNet type
	//
	// x-displayName: "Select VNet type"
	// x-required
	// Select VNet is a hub or standalone
	//
	// Types that are valid to be assigned to HubChoice:
	//	*AzureVnetIngressEgressGwType_NotHub
	//	*AzureVnetIngressEgressGwType_Hub
	HubChoice isAzureVnetIngressEgressGwType_HubChoice `protobuf_oneof:"hub_choice"`
	// Performance Enhancement Choice
	//
	// x-displayName: "Performance Enhancement Mode"
	// Performance Enhancement Mode to optimize for L3 or L7 networking
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,45,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	// Accelerated Networking
	//
	// x-displayName: "Accelerated Networking"
	// Accelerated Networking to reduce Latency, When Mode is toggled, traffic
	// disruption will be seen
	AcceleratedNetworking *views.AcceleratedNetworkingType `protobuf:"bytes,46,opt,name=accelerated_networking,json=acceleratedNetworking,proto3" json:"accelerated_networking,omitempty"`
}

func (m *AzureVnetIngressEgressGwType) Reset()      { *m = AzureVnetIngressEgressGwType{} }
func (*AzureVnetIngressEgressGwType) ProtoMessage() {}
func (*AzureVnetIngressEgressGwType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{7}
}
func (m *AzureVnetIngressEgressGwType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureVnetIngressEgressGwType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureVnetIngressEgressGwType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureVnetIngressEgressGwType.Merge(m, src)
}
func (m *AzureVnetIngressEgressGwType) XXX_Size() int {
	return m.Size()
}
func (m *AzureVnetIngressEgressGwType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureVnetIngressEgressGwType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureVnetIngressEgressGwType proto.InternalMessageInfo

type isAzureVnetIngressEgressGwType_NetworkPolicyChoice interface {
	isAzureVnetIngressEgressGwType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_ForwardProxyChoice interface {
	isAzureVnetIngressEgressGwType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_InsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwType_InsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_GlobalNetworkChoice interface {
	isAzureVnetIngressEgressGwType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_DcClusterGroupChoice interface {
	isAzureVnetIngressEgressGwType_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_SiteMeshGroupChoice interface {
	isAzureVnetIngressEgressGwType_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_HubChoice interface {
	isAzureVnetIngressEgressGwType_HubChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetIngressEgressGwType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,2,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type AzureVnetIngressEgressGwType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,10,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,32,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type AzureVnetIngressEgressGwType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,4,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,9,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type AzureVnetIngressEgressGwType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,20,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type AzureVnetIngressEgressGwType_NoInsideStaticRoutes struct {
	NoInsideStaticRoutes *schema.Empty `protobuf:"bytes,12,opt,name=no_inside_static_routes,json=noInsideStaticRoutes,proto3,oneof" json:"no_inside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwType_InsideStaticRoutes struct {
	InsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,13,opt,name=inside_static_routes,json=insideStaticRoutes,proto3,oneof" json:"inside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *schema.Empty `protobuf:"bytes,15,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,proto3,oneof" json:"no_outside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,16,opt,name=outside_static_routes,json=outsideStaticRoutes,proto3,oneof" json:"outside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwType_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,18,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type AzureVnetIngressEgressGwType_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,19,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}
type AzureVnetIngressEgressGwType_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,22,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn struct {
	DcClusterGroupOutsideVn *views.ObjectRefType `protobuf:"bytes,23,opt,name=dc_cluster_group_outside_vn,json=dcClusterGroupOutsideVn,proto3,oneof" json:"dc_cluster_group_outside_vn,omitempty"`
}
type AzureVnetIngressEgressGwType_DcClusterGroupInsideVn struct {
	DcClusterGroupInsideVn *views.ObjectRefType `protobuf:"bytes,24,opt,name=dc_cluster_group_inside_vn,json=dcClusterGroupInsideVn,proto3,oneof" json:"dc_cluster_group_inside_vn,omitempty"`
}
type AzureVnetIngressEgressGwType_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,27,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type AzureVnetIngressEgressGwType_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,28,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}
type AzureVnetIngressEgressGwType_NotHub struct {
	NotHub *schema.Empty `protobuf:"bytes,30,opt,name=not_hub,json=notHub,proto3,oneof" json:"not_hub,omitempty"`
}
type AzureVnetIngressEgressGwType_Hub struct {
	Hub *AzureHubVnetType `protobuf:"bytes,31,opt,name=hub,proto3,oneof" json:"hub,omitempty"`
}

func (*AzureVnetIngressEgressGwType_NoNetworkPolicy) isAzureVnetIngressEgressGwType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwType_ActiveNetworkPolicies) isAzureVnetIngressEgressGwType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies) isAzureVnetIngressEgressGwType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwType_NoForwardProxy) isAzureVnetIngressEgressGwType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) isAzureVnetIngressEgressGwType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwType_ForwardProxyAllowAll) isAzureVnetIngressEgressGwType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwType_NoInsideStaticRoutes) isAzureVnetIngressEgressGwType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwType_InsideStaticRoutes) isAzureVnetIngressEgressGwType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwType_OutsideStaticRoutes) isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwType_NoGlobalNetwork) isAzureVnetIngressEgressGwType_GlobalNetworkChoice() {
}
func (*AzureVnetIngressEgressGwType_GlobalNetworkList) isAzureVnetIngressEgressGwType_GlobalNetworkChoice() {
}
func (*AzureVnetIngressEgressGwType_NoDcClusterGroup) isAzureVnetIngressEgressGwType_DcClusterGroupChoice() {
}
func (*AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn) isAzureVnetIngressEgressGwType_DcClusterGroupChoice() {
}
func (*AzureVnetIngressEgressGwType_DcClusterGroupInsideVn) isAzureVnetIngressEgressGwType_DcClusterGroupChoice() {
}
func (*AzureVnetIngressEgressGwType_SmConnectionPublicIp) isAzureVnetIngressEgressGwType_SiteMeshGroupChoice() {
}
func (*AzureVnetIngressEgressGwType_SmConnectionPvtIp) isAzureVnetIngressEgressGwType_SiteMeshGroupChoice() {
}
func (*AzureVnetIngressEgressGwType_NotHub) isAzureVnetIngressEgressGwType_HubChoice() {}
func (*AzureVnetIngressEgressGwType_Hub) isAzureVnetIngressEgressGwType_HubChoice()    {}

func (m *AzureVnetIngressEgressGwType) GetNetworkPolicyChoice() isAzureVnetIngressEgressGwType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetForwardProxyChoice() isAzureVnetIngressEgressGwType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetInsideStaticRouteChoice() isAzureVnetIngressEgressGwType_InsideStaticRouteChoice {
	if m != nil {
		return m.InsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetOutsideStaticRouteChoice() isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetGlobalNetworkChoice() isAzureVnetIngressEgressGwType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetDcClusterGroupChoice() isAzureVnetIngressEgressGwType_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetSiteMeshGroupChoice() isAzureVnetIngressEgressGwType_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetHubChoice() isAzureVnetIngressEgressGwType_HubChoice {
	if m != nil {
		return m.HubChoice
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetAzNodes() []*views.AzureVnetTwoInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

func (m *AzureVnetIngressEgressGwType) GetNoInsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_NoInsideStaticRoutes); ok {
		return x.NoInsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetInsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_InsideStaticRoutes); ok {
		return x.InsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetNoOutsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetOutsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwType_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetDcClusterGroupOutsideVn() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn); ok {
		return x.DcClusterGroupOutsideVn
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetDcClusterGroupInsideVn() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwType_DcClusterGroupInsideVn); ok {
		return x.DcClusterGroupInsideVn
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwType_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwType_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetNotHub() *schema.Empty {
	if x, ok := m.GetHubChoice().(*AzureVnetIngressEgressGwType_NotHub); ok {
		return x.NotHub
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetHub() *AzureHubVnetType {
	if x, ok := m.GetHubChoice().(*AzureVnetIngressEgressGwType_Hub); ok {
		return x.Hub
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetAcceleratedNetworking() *views.AcceleratedNetworkingType {
	if m != nil {
		return m.AcceleratedNetworking
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AzureVnetIngressEgressGwType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AzureVnetIngressEgressGwType_NoNetworkPolicy)(nil),
		(*AzureVnetIngressEgressGwType_ActiveNetworkPolicies)(nil),
		(*AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies)(nil),
		(*AzureVnetIngressEgressGwType_NoForwardProxy)(nil),
		(*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetIngressEgressGwType_ForwardProxyAllowAll)(nil),
		(*AzureVnetIngressEgressGwType_NoInsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwType_InsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwType_OutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwType_NoGlobalNetwork)(nil),
		(*AzureVnetIngressEgressGwType_GlobalNetworkList)(nil),
		(*AzureVnetIngressEgressGwType_NoDcClusterGroup)(nil),
		(*AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn)(nil),
		(*AzureVnetIngressEgressGwType_DcClusterGroupInsideVn)(nil),
		(*AzureVnetIngressEgressGwType_SmConnectionPublicIp)(nil),
		(*AzureVnetIngressEgressGwType_SmConnectionPvtIp)(nil),
		(*AzureVnetIngressEgressGwType_NotHub)(nil),
		(*AzureVnetIngressEgressGwType_Hub)(nil),
	}
}

// Azure Ingress Egress Gateway on Alternate Region
//
// x-displayName: "Azure Ingress/Egress Gateway on Alternate Region"
// Two interface Azure ingress/egress site on Alternate Region with no support for zones
type AzureVnetIngressEgressGwARType struct {
	// Node Information
	//
	// x-displayName: "Ingress/Egress Gateway (Two Interface) Node information"
	// Ingress/Egress Gateway (Two Interface) Node information.
	Node *views.AzureVnetTwoInterfaceNodeARType `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	// Manage Firewall Policy
	//
	// x-displayName: "Manage Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetIngressEgressGwARType_NoNetworkPolicy
	//	*AzureVnetIngressEgressGwARType_ActiveNetworkPolicies
	//	*AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isAzureVnetIngressEgressGwARType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetIngressEgressGwARType_NoForwardProxy
	//	*AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies
	//	*AzureVnetIngressEgressGwARType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetIngressEgressGwARType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-multi-nic-voltmesh"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,8,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
	// Manage Static Routes for Inside Network
	//
	// x-displayName: "Manage Static Routes for Inside Network"
	// x-required
	// Add static routes to inside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to InsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwARType_NoInsideStaticRoutes
	//	*AzureVnetIngressEgressGwARType_InsideStaticRoutes
	InsideStaticRouteChoice isAzureVnetIngressEgressGwARType_InsideStaticRouteChoice `protobuf_oneof:"inside_static_route_choice"`
	// Manage Static Routes for Outside Network
	//
	// x-displayName: "Manage Static Routes for Outside Network"
	// x-required
	// Add static routes to outside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes
	//	*AzureVnetIngressEgressGwARType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetIngressEgressGwARType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to inside or outside network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetIngressEgressGwARType_NoGlobalNetwork
	//	*AzureVnetIngressEgressGwARType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetIngressEgressGwARType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via selected network type
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*AzureVnetIngressEgressGwARType_NoDcClusterGroup
	//	*AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn
	//	*AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn
	DcClusterGroupChoice isAzureVnetIngressEgressGwARType_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*AzureVnetIngressEgressGwARType_SmConnectionPublicIp
	//	*AzureVnetIngressEgressGwARType_SmConnectionPvtIp
	SiteMeshGroupChoice isAzureVnetIngressEgressGwARType_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
	// Choice of VNet type
	//
	// x-displayName: "Select VNet type"
	// x-required
	// Select VNet is a hub or standalone
	//
	// Types that are valid to be assigned to HubChoice:
	//	*AzureVnetIngressEgressGwARType_NotHub
	//	*AzureVnetIngressEgressGwARType_Hub
	HubChoice isAzureVnetIngressEgressGwARType_HubChoice `protobuf_oneof:"hub_choice"`
	// Performance Enhancement Choice
	//
	// x-displayName: "Performance Enhancement Mode"
	// Performance Enhancement Mode to optimize for L3 or L7 networking
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,45,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	// Accelerated Networking
	//
	// x-displayName: "Accelerated Networking"
	// Accelerated Networking to reduce Latency, When Mode is toggled, traffic
	// disruption will be seen
	AcceleratedNetworking *views.AcceleratedNetworkingType `protobuf:"bytes,46,opt,name=accelerated_networking,json=acceleratedNetworking,proto3" json:"accelerated_networking,omitempty"`
}

func (m *AzureVnetIngressEgressGwARType) Reset()      { *m = AzureVnetIngressEgressGwARType{} }
func (*AzureVnetIngressEgressGwARType) ProtoMessage() {}
func (*AzureVnetIngressEgressGwARType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{8}
}
func (m *AzureVnetIngressEgressGwARType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureVnetIngressEgressGwARType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureVnetIngressEgressGwARType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureVnetIngressEgressGwARType.Merge(m, src)
}
func (m *AzureVnetIngressEgressGwARType) XXX_Size() int {
	return m.Size()
}
func (m *AzureVnetIngressEgressGwARType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureVnetIngressEgressGwARType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureVnetIngressEgressGwARType proto.InternalMessageInfo

type isAzureVnetIngressEgressGwARType_NetworkPolicyChoice interface {
	isAzureVnetIngressEgressGwARType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARType_ForwardProxyChoice interface {
	isAzureVnetIngressEgressGwARType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARType_InsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwARType_InsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARType_OutsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwARType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARType_GlobalNetworkChoice interface {
	isAzureVnetIngressEgressGwARType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARType_DcClusterGroupChoice interface {
	isAzureVnetIngressEgressGwARType_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARType_SiteMeshGroupChoice interface {
	isAzureVnetIngressEgressGwARType_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARType_HubChoice interface {
	isAzureVnetIngressEgressGwARType_HubChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetIngressEgressGwARType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,2,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type AzureVnetIngressEgressGwARType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,10,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,32,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type AzureVnetIngressEgressGwARType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,4,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,9,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type AzureVnetIngressEgressGwARType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,20,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type AzureVnetIngressEgressGwARType_NoInsideStaticRoutes struct {
	NoInsideStaticRoutes *schema.Empty `protobuf:"bytes,12,opt,name=no_inside_static_routes,json=noInsideStaticRoutes,proto3,oneof" json:"no_inside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwARType_InsideStaticRoutes struct {
	InsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,13,opt,name=inside_static_routes,json=insideStaticRoutes,proto3,oneof" json:"inside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *schema.Empty `protobuf:"bytes,15,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,proto3,oneof" json:"no_outside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwARType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,16,opt,name=outside_static_routes,json=outsideStaticRoutes,proto3,oneof" json:"outside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwARType_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,18,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type AzureVnetIngressEgressGwARType_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,19,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}
type AzureVnetIngressEgressGwARType_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,22,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn struct {
	DcClusterGroupOutsideVn *views.ObjectRefType `protobuf:"bytes,23,opt,name=dc_cluster_group_outside_vn,json=dcClusterGroupOutsideVn,proto3,oneof" json:"dc_cluster_group_outside_vn,omitempty"`
}
type AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn struct {
	DcClusterGroupInsideVn *views.ObjectRefType `protobuf:"bytes,24,opt,name=dc_cluster_group_inside_vn,json=dcClusterGroupInsideVn,proto3,oneof" json:"dc_cluster_group_inside_vn,omitempty"`
}
type AzureVnetIngressEgressGwARType_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,27,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type AzureVnetIngressEgressGwARType_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,28,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}
type AzureVnetIngressEgressGwARType_NotHub struct {
	NotHub *schema.Empty `protobuf:"bytes,30,opt,name=not_hub,json=notHub,proto3,oneof" json:"not_hub,omitempty"`
}
type AzureVnetIngressEgressGwARType_Hub struct {
	Hub *AzureHubVnetType `protobuf:"bytes,31,opt,name=hub,proto3,oneof" json:"hub,omitempty"`
}

func (*AzureVnetIngressEgressGwARType_NoNetworkPolicy) isAzureVnetIngressEgressGwARType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwARType_ActiveNetworkPolicies) isAzureVnetIngressEgressGwARType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies) isAzureVnetIngressEgressGwARType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwARType_NoForwardProxy) isAzureVnetIngressEgressGwARType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies) isAzureVnetIngressEgressGwARType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwARType_ForwardProxyAllowAll) isAzureVnetIngressEgressGwARType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwARType_NoInsideStaticRoutes) isAzureVnetIngressEgressGwARType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwARType_InsideStaticRoutes) isAzureVnetIngressEgressGwARType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes) isAzureVnetIngressEgressGwARType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwARType_OutsideStaticRoutes) isAzureVnetIngressEgressGwARType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwARType_NoGlobalNetwork) isAzureVnetIngressEgressGwARType_GlobalNetworkChoice() {
}
func (*AzureVnetIngressEgressGwARType_GlobalNetworkList) isAzureVnetIngressEgressGwARType_GlobalNetworkChoice() {
}
func (*AzureVnetIngressEgressGwARType_NoDcClusterGroup) isAzureVnetIngressEgressGwARType_DcClusterGroupChoice() {
}
func (*AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn) isAzureVnetIngressEgressGwARType_DcClusterGroupChoice() {
}
func (*AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn) isAzureVnetIngressEgressGwARType_DcClusterGroupChoice() {
}
func (*AzureVnetIngressEgressGwARType_SmConnectionPublicIp) isAzureVnetIngressEgressGwARType_SiteMeshGroupChoice() {
}
func (*AzureVnetIngressEgressGwARType_SmConnectionPvtIp) isAzureVnetIngressEgressGwARType_SiteMeshGroupChoice() {
}
func (*AzureVnetIngressEgressGwARType_NotHub) isAzureVnetIngressEgressGwARType_HubChoice() {}
func (*AzureVnetIngressEgressGwARType_Hub) isAzureVnetIngressEgressGwARType_HubChoice()    {}

func (m *AzureVnetIngressEgressGwARType) GetNetworkPolicyChoice() isAzureVnetIngressEgressGwARType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARType) GetForwardProxyChoice() isAzureVnetIngressEgressGwARType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARType) GetInsideStaticRouteChoice() isAzureVnetIngressEgressGwARType_InsideStaticRouteChoice {
	if m != nil {
		return m.InsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARType) GetOutsideStaticRouteChoice() isAzureVnetIngressEgressGwARType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARType) GetGlobalNetworkChoice() isAzureVnetIngressEgressGwARType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARType) GetDcClusterGroupChoice() isAzureVnetIngressEgressGwARType_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARType) GetSiteMeshGroupChoice() isAzureVnetIngressEgressGwARType_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARType) GetHubChoice() isAzureVnetIngressEgressGwARType_HubChoice {
	if m != nil {
		return m.HubChoice
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetNode() *views.AzureVnetTwoInterfaceNodeARType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwARType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwARType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

func (m *AzureVnetIngressEgressGwARType) GetNoInsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwARType_NoInsideStaticRoutes); ok {
		return x.NoInsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetInsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwARType_InsideStaticRoutes); ok {
		return x.InsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetNoOutsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetOutsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwARType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwARType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwARType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwARType_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetDcClusterGroupOutsideVn() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn); ok {
		return x.DcClusterGroupOutsideVn
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetDcClusterGroupInsideVn() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn); ok {
		return x.DcClusterGroupInsideVn
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwARType_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwARType_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetNotHub() *schema.Empty {
	if x, ok := m.GetHubChoice().(*AzureVnetIngressEgressGwARType_NotHub); ok {
		return x.NotHub
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetHub() *AzureHubVnetType {
	if x, ok := m.GetHubChoice().(*AzureVnetIngressEgressGwARType_Hub); ok {
		return x.Hub
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetAcceleratedNetworking() *views.AcceleratedNetworkingType {
	if m != nil {
		return m.AcceleratedNetworking
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AzureVnetIngressEgressGwARType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AzureVnetIngressEgressGwARType_NoNetworkPolicy)(nil),
		(*AzureVnetIngressEgressGwARType_ActiveNetworkPolicies)(nil),
		(*AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies)(nil),
		(*AzureVnetIngressEgressGwARType_NoForwardProxy)(nil),
		(*AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetIngressEgressGwARType_ForwardProxyAllowAll)(nil),
		(*AzureVnetIngressEgressGwARType_NoInsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwARType_InsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwARType_OutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwARType_NoGlobalNetwork)(nil),
		(*AzureVnetIngressEgressGwARType_GlobalNetworkList)(nil),
		(*AzureVnetIngressEgressGwARType_NoDcClusterGroup)(nil),
		(*AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn)(nil),
		(*AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn)(nil),
		(*AzureVnetIngressEgressGwARType_SmConnectionPublicIp)(nil),
		(*AzureVnetIngressEgressGwARType_SmConnectionPvtIp)(nil),
		(*AzureVnetIngressEgressGwARType_NotHub)(nil),
		(*AzureVnetIngressEgressGwARType_Hub)(nil),
	}
}

// Azure App Stack Cluster on Recommended Region
//
// x-displayName: "Azure App Stack Cluster on Recommended Region"
// App Stack Cluster of single interface Azure nodes
type AzureVnetVoltstackClusterType struct {
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-voltstack-combo"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,1,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
	// Nodes
	//
	// x-displayName: "App Stack Cluster (One Interface) Nodes in AZ"
	// x-required
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	AzNodes []*views.AzureVnetOneInterfaceNodeType `protobuf:"bytes,2,rep,name=az_nodes,json=azNodes,proto3" json:"az_nodes,omitempty"`
	// Manage Firewall Policy
	//
	// x-displayName: "Manage Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetVoltstackClusterType_NoNetworkPolicy
	//	*AzureVnetVoltstackClusterType_ActiveNetworkPolicies
	//	*AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isAzureVnetVoltstackClusterType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetVoltstackClusterType_NoForwardProxy
	//	*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies
	//	*AzureVnetVoltstackClusterType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetVoltstackClusterType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Site Local Network
	//
	// x-displayName: "Manage Static Routes for Site Local Network"
	// x-required
	// Add static routes to site local network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes
	//	*AzureVnetVoltstackClusterType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to site local network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetVoltstackClusterType_NoGlobalNetwork
	//	*AzureVnetVoltstackClusterType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetVoltstackClusterType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via selected network type
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*AzureVnetVoltstackClusterType_NoDcClusterGroup
	//	*AzureVnetVoltstackClusterType_DcClusterGroup
	DcClusterGroupChoice isAzureVnetVoltstackClusterType_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	// Site Local K8s API access
	//
	// x-displayName: "Site Local K8s API access"
	// x-required
	// Enable/Disable choice for site local K8s API access
	//
	// Types that are valid to be assigned to K8SClusterChoice:
	//	*AzureVnetVoltstackClusterType_NoK8SCluster
	//	*AzureVnetVoltstackClusterType_K8SCluster
	K8SClusterChoice isAzureVnetVoltstackClusterType_K8SClusterChoice `protobuf_oneof:"k8s_cluster_choice"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*AzureVnetVoltstackClusterType_SmConnectionPublicIp
	//	*AzureVnetVoltstackClusterType_SmConnectionPvtIp
	SiteMeshGroupChoice isAzureVnetVoltstackClusterType_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
	// Storage Class Configuration
	//
	// x-displayName: "Select Configuration for Storage Classes"
	// x-required
	// Configure custom storage classes in kubernetes for this site
	//
	// Types that are valid to be assigned to StorageClassChoice:
	//	*AzureVnetVoltstackClusterType_DefaultStorage
	//	*AzureVnetVoltstackClusterType_StorageClassList
	StorageClassChoice isAzureVnetVoltstackClusterType_StorageClassChoice `protobuf_oneof:"storage_class_choice"`
	// Accelerated Networking
	//
	// x-displayName: "Accelerated Networking"
	// Accelerated Networking to reduce Latency, When Mode is toggled, traffic
	// disruption will be seen
	AcceleratedNetworking *views.AcceleratedNetworkingType `protobuf:"bytes,37,opt,name=accelerated_networking,json=acceleratedNetworking,proto3" json:"accelerated_networking,omitempty"`
}

func (m *AzureVnetVoltstackClusterType) Reset()      { *m = AzureVnetVoltstackClusterType{} }
func (*AzureVnetVoltstackClusterType) ProtoMessage() {}
func (*AzureVnetVoltstackClusterType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{9}
}
func (m *AzureVnetVoltstackClusterType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureVnetVoltstackClusterType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureVnetVoltstackClusterType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureVnetVoltstackClusterType.Merge(m, src)
}
func (m *AzureVnetVoltstackClusterType) XXX_Size() int {
	return m.Size()
}
func (m *AzureVnetVoltstackClusterType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureVnetVoltstackClusterType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureVnetVoltstackClusterType proto.InternalMessageInfo

type isAzureVnetVoltstackClusterType_NetworkPolicyChoice interface {
	isAzureVnetVoltstackClusterType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterType_ForwardProxyChoice interface {
	isAzureVnetVoltstackClusterType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice interface {
	isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterType_GlobalNetworkChoice interface {
	isAzureVnetVoltstackClusterType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterType_DcClusterGroupChoice interface {
	isAzureVnetVoltstackClusterType_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterType_K8SClusterChoice interface {
	isAzureVnetVoltstackClusterType_K8SClusterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterType_SiteMeshGroupChoice interface {
	isAzureVnetVoltstackClusterType_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterType_StorageClassChoice interface {
	isAzureVnetVoltstackClusterType_StorageClassChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetVoltstackClusterType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,4,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type AzureVnetVoltstackClusterType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,5,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,36,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type AzureVnetVoltstackClusterType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,7,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,8,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type AzureVnetVoltstackClusterType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,15,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type AzureVnetVoltstackClusterType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *schema.Empty `protobuf:"bytes,10,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,proto3,oneof" json:"no_outside_static_routes,omitempty"`
}
type AzureVnetVoltstackClusterType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,11,opt,name=outside_static_routes,json=outsideStaticRoutes,proto3,oneof" json:"outside_static_routes,omitempty"`
}
type AzureVnetVoltstackClusterType_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,13,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type AzureVnetVoltstackClusterType_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,14,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}
type AzureVnetVoltstackClusterType_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,30,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type AzureVnetVoltstackClusterType_DcClusterGroup struct {
	DcClusterGroup *views.ObjectRefType `protobuf:"bytes,31,opt,name=dc_cluster_group,json=dcClusterGroup,proto3,oneof" json:"dc_cluster_group,omitempty"`
}
type AzureVnetVoltstackClusterType_NoK8SCluster struct {
	NoK8SCluster *schema.Empty `protobuf:"bytes,27,opt,name=no_k8s_cluster,json=noK8sCluster,proto3,oneof" json:"no_k8s_cluster,omitempty"`
}
type AzureVnetVoltstackClusterType_K8SCluster struct {
	K8SCluster *views.ObjectRefType `protobuf:"bytes,28,opt,name=k8s_cluster,json=k8sCluster,proto3,oneof" json:"k8s_cluster,omitempty"`
}
type AzureVnetVoltstackClusterType_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,34,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type AzureVnetVoltstackClusterType_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,35,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}
type AzureVnetVoltstackClusterType_DefaultStorage struct {
	DefaultStorage *schema.Empty `protobuf:"bytes,17,opt,name=default_storage,json=defaultStorage,proto3,oneof" json:"default_storage,omitempty"`
}
type AzureVnetVoltstackClusterType_StorageClassList struct {
	StorageClassList *views.StorageClassListType `protobuf:"bytes,18,opt,name=storage_class_list,json=storageClassList,proto3,oneof" json:"storage_class_list,omitempty"`
}

func (*AzureVnetVoltstackClusterType_NoNetworkPolicy) isAzureVnetVoltstackClusterType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterType_ActiveNetworkPolicies) isAzureVnetVoltstackClusterType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies) isAzureVnetVoltstackClusterType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterType_NoForwardProxy) isAzureVnetVoltstackClusterType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) isAzureVnetVoltstackClusterType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterType_ForwardProxyAllowAll) isAzureVnetVoltstackClusterType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterType_OutsideStaticRoutes) isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterType_NoGlobalNetwork) isAzureVnetVoltstackClusterType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterType_GlobalNetworkList) isAzureVnetVoltstackClusterType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterType_NoDcClusterGroup) isAzureVnetVoltstackClusterType_DcClusterGroupChoice() {
}
func (*AzureVnetVoltstackClusterType_DcClusterGroup) isAzureVnetVoltstackClusterType_DcClusterGroupChoice() {
}
func (*AzureVnetVoltstackClusterType_NoK8SCluster) isAzureVnetVoltstackClusterType_K8SClusterChoice() {
}
func (*AzureVnetVoltstackClusterType_K8SCluster) isAzureVnetVoltstackClusterType_K8SClusterChoice() {}
func (*AzureVnetVoltstackClusterType_SmConnectionPublicIp) isAzureVnetVoltstackClusterType_SiteMeshGroupChoice() {
}
func (*AzureVnetVoltstackClusterType_SmConnectionPvtIp) isAzureVnetVoltstackClusterType_SiteMeshGroupChoice() {
}
func (*AzureVnetVoltstackClusterType_DefaultStorage) isAzureVnetVoltstackClusterType_StorageClassChoice() {
}
func (*AzureVnetVoltstackClusterType_StorageClassList) isAzureVnetVoltstackClusterType_StorageClassChoice() {
}

func (m *AzureVnetVoltstackClusterType) GetNetworkPolicyChoice() isAzureVnetVoltstackClusterType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) GetForwardProxyChoice() isAzureVnetVoltstackClusterType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) GetOutsideStaticRouteChoice() isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) GetGlobalNetworkChoice() isAzureVnetVoltstackClusterType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) GetDcClusterGroupChoice() isAzureVnetVoltstackClusterType_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) GetK8SClusterChoice() isAzureVnetVoltstackClusterType_K8SClusterChoice {
	if m != nil {
		return m.K8SClusterChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) GetSiteMeshGroupChoice() isAzureVnetVoltstackClusterType_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) GetStorageClassChoice() isAzureVnetVoltstackClusterType_StorageClassChoice {
	if m != nil {
		return m.StorageClassChoice
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

func (m *AzureVnetVoltstackClusterType) GetAzNodes() []*views.AzureVnetOneInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoOutsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetOutsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterType_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetDcClusterGroup() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterType_DcClusterGroup); ok {
		return x.DcClusterGroup
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoK8SCluster() *schema.Empty {
	if x, ok := m.GetK8SClusterChoice().(*AzureVnetVoltstackClusterType_NoK8SCluster); ok {
		return x.NoK8SCluster
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetK8SCluster() *views.ObjectRefType {
	if x, ok := m.GetK8SClusterChoice().(*AzureVnetVoltstackClusterType_K8SCluster); ok {
		return x.K8SCluster
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterType_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterType_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetDefaultStorage() *schema.Empty {
	if x, ok := m.GetStorageClassChoice().(*AzureVnetVoltstackClusterType_DefaultStorage); ok {
		return x.DefaultStorage
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetStorageClassList() *views.StorageClassListType {
	if x, ok := m.GetStorageClassChoice().(*AzureVnetVoltstackClusterType_StorageClassList); ok {
		return x.StorageClassList
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetAcceleratedNetworking() *views.AcceleratedNetworkingType {
	if m != nil {
		return m.AcceleratedNetworking
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AzureVnetVoltstackClusterType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AzureVnetVoltstackClusterType_NoNetworkPolicy)(nil),
		(*AzureVnetVoltstackClusterType_ActiveNetworkPolicies)(nil),
		(*AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies)(nil),
		(*AzureVnetVoltstackClusterType_NoForwardProxy)(nil),
		(*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetVoltstackClusterType_ForwardProxyAllowAll)(nil),
		(*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterType_OutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterType_NoGlobalNetwork)(nil),
		(*AzureVnetVoltstackClusterType_GlobalNetworkList)(nil),
		(*AzureVnetVoltstackClusterType_NoDcClusterGroup)(nil),
		(*AzureVnetVoltstackClusterType_DcClusterGroup)(nil),
		(*AzureVnetVoltstackClusterType_NoK8SCluster)(nil),
		(*AzureVnetVoltstackClusterType_K8SCluster)(nil),
		(*AzureVnetVoltstackClusterType_SmConnectionPublicIp)(nil),
		(*AzureVnetVoltstackClusterType_SmConnectionPvtIp)(nil),
		(*AzureVnetVoltstackClusterType_DefaultStorage)(nil),
		(*AzureVnetVoltstackClusterType_StorageClassList)(nil),
	}
}

// Azure App Stack Cluster on Alternate Region
//
// x-displayName: "Azure App Stack Cluster on Alternate Region"
// App Stack Cluster of single interface Azure nodes
type AzureVnetVoltstackClusterARType struct {
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-voltstack-combo"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,1,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
	// Node Information
	//
	// x-displayName: "Ingress Gateway (One Interface) Node information"
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	Node *views.AzureVnetOneInterfaceNodeARType `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	// Manage Firewall Policy
	//
	// x-displayName: "Manage Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetVoltstackClusterARType_NoNetworkPolicy
	//	*AzureVnetVoltstackClusterARType_ActiveNetworkPolicies
	//	*AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isAzureVnetVoltstackClusterARType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetVoltstackClusterARType_NoForwardProxy
	//	*AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies
	//	*AzureVnetVoltstackClusterARType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetVoltstackClusterARType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Site Local Network
	//
	// x-displayName: "Manage Static Routes for Site Local Network"
	// x-required
	// Add static routes to site local network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes
	//	*AzureVnetVoltstackClusterARType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetVoltstackClusterARType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to site local network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetVoltstackClusterARType_NoGlobalNetwork
	//	*AzureVnetVoltstackClusterARType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetVoltstackClusterARType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via selected network type
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*AzureVnetVoltstackClusterARType_NoDcClusterGroup
	//	*AzureVnetVoltstackClusterARType_DcClusterGroup
	DcClusterGroupChoice isAzureVnetVoltstackClusterARType_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*AzureVnetVoltstackClusterARType_SmConnectionPublicIp
	//	*AzureVnetVoltstackClusterARType_SmConnectionPvtIp
	SiteMeshGroupChoice isAzureVnetVoltstackClusterARType_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
	// Site Local K8s API access
	//
	// x-displayName: "Site Local K8s API access"
	// x-required
	// Enable/Disable choice for site local K8s API access
	//
	// Types that are valid to be assigned to K8SClusterChoice:
	//	*AzureVnetVoltstackClusterARType_NoK8SCluster
	//	*AzureVnetVoltstackClusterARType_K8SCluster
	K8SClusterChoice isAzureVnetVoltstackClusterARType_K8SClusterChoice `protobuf_oneof:"k8s_cluster_choice"`
	// Storage Class Configuration
	//
	// x-displayName: "Select Configuration for Storage Classes"
	// x-required
	// Configure custom storage classes in kubernetes for this site
	//
	// Types that are valid to be assigned to StorageClassChoice:
	//	*AzureVnetVoltstackClusterARType_DefaultStorage
	//	*AzureVnetVoltstackClusterARType_StorageClassList
	StorageClassChoice isAzureVnetVoltstackClusterARType_StorageClassChoice `protobuf_oneof:"storage_class_choice"`
	// Accelerated Networking
	//
	// x-displayName: "Accelerated Networking"
	// Accelerated Networking to reduce Latency, When Mode is toggled, traffic
	// disruption will be seen
	AcceleratedNetworking *views.AcceleratedNetworkingType `protobuf:"bytes,37,opt,name=accelerated_networking,json=acceleratedNetworking,proto3" json:"accelerated_networking,omitempty"`
}

func (m *AzureVnetVoltstackClusterARType) Reset()      { *m = AzureVnetVoltstackClusterARType{} }
func (*AzureVnetVoltstackClusterARType) ProtoMessage() {}
func (*AzureVnetVoltstackClusterARType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{10}
}
func (m *AzureVnetVoltstackClusterARType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureVnetVoltstackClusterARType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureVnetVoltstackClusterARType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureVnetVoltstackClusterARType.Merge(m, src)
}
func (m *AzureVnetVoltstackClusterARType) XXX_Size() int {
	return m.Size()
}
func (m *AzureVnetVoltstackClusterARType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureVnetVoltstackClusterARType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureVnetVoltstackClusterARType proto.InternalMessageInfo

type isAzureVnetVoltstackClusterARType_NetworkPolicyChoice interface {
	isAzureVnetVoltstackClusterARType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARType_ForwardProxyChoice interface {
	isAzureVnetVoltstackClusterARType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARType_OutsideStaticRouteChoice interface {
	isAzureVnetVoltstackClusterARType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARType_GlobalNetworkChoice interface {
	isAzureVnetVoltstackClusterARType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARType_DcClusterGroupChoice interface {
	isAzureVnetVoltstackClusterARType_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARType_SiteMeshGroupChoice interface {
	isAzureVnetVoltstackClusterARType_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARType_K8SClusterChoice interface {
	isAzureVnetVoltstackClusterARType_K8SClusterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARType_StorageClassChoice interface {
	isAzureVnetVoltstackClusterARType_StorageClassChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetVoltstackClusterARType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,4,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type AzureVnetVoltstackClusterARType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,5,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,36,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type AzureVnetVoltstackClusterARType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,7,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,8,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type AzureVnetVoltstackClusterARType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,15,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *schema.Empty `protobuf:"bytes,10,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,proto3,oneof" json:"no_outside_static_routes,omitempty"`
}
type AzureVnetVoltstackClusterARType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,11,opt,name=outside_static_routes,json=outsideStaticRoutes,proto3,oneof" json:"outside_static_routes,omitempty"`
}
type AzureVnetVoltstackClusterARType_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,13,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type AzureVnetVoltstackClusterARType_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,14,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}
type AzureVnetVoltstackClusterARType_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,30,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type AzureVnetVoltstackClusterARType_DcClusterGroup struct {
	DcClusterGroup *views.ObjectRefType `protobuf:"bytes,31,opt,name=dc_cluster_group,json=dcClusterGroup,proto3,oneof" json:"dc_cluster_group,omitempty"`
}
type AzureVnetVoltstackClusterARType_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,34,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type AzureVnetVoltstackClusterARType_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,35,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}
type AzureVnetVoltstackClusterARType_NoK8SCluster struct {
	NoK8SCluster *schema.Empty `protobuf:"bytes,27,opt,name=no_k8s_cluster,json=noK8sCluster,proto3,oneof" json:"no_k8s_cluster,omitempty"`
}
type AzureVnetVoltstackClusterARType_K8SCluster struct {
	K8SCluster *views.ObjectRefType `protobuf:"bytes,28,opt,name=k8s_cluster,json=k8sCluster,proto3,oneof" json:"k8s_cluster,omitempty"`
}
type AzureVnetVoltstackClusterARType_DefaultStorage struct {
	DefaultStorage *schema.Empty `protobuf:"bytes,17,opt,name=default_storage,json=defaultStorage,proto3,oneof" json:"default_storage,omitempty"`
}
type AzureVnetVoltstackClusterARType_StorageClassList struct {
	StorageClassList *views.StorageClassListType `protobuf:"bytes,18,opt,name=storage_class_list,json=storageClassList,proto3,oneof" json:"storage_class_list,omitempty"`
}

func (*AzureVnetVoltstackClusterARType_NoNetworkPolicy) isAzureVnetVoltstackClusterARType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterARType_ActiveNetworkPolicies) isAzureVnetVoltstackClusterARType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies) isAzureVnetVoltstackClusterARType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterARType_NoForwardProxy) isAzureVnetVoltstackClusterARType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies) isAzureVnetVoltstackClusterARType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterARType_ForwardProxyAllowAll) isAzureVnetVoltstackClusterARType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes) isAzureVnetVoltstackClusterARType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterARType_OutsideStaticRoutes) isAzureVnetVoltstackClusterARType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterARType_NoGlobalNetwork) isAzureVnetVoltstackClusterARType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterARType_GlobalNetworkList) isAzureVnetVoltstackClusterARType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterARType_NoDcClusterGroup) isAzureVnetVoltstackClusterARType_DcClusterGroupChoice() {
}
func (*AzureVnetVoltstackClusterARType_DcClusterGroup) isAzureVnetVoltstackClusterARType_DcClusterGroupChoice() {
}
func (*AzureVnetVoltstackClusterARType_SmConnectionPublicIp) isAzureVnetVoltstackClusterARType_SiteMeshGroupChoice() {
}
func (*AzureVnetVoltstackClusterARType_SmConnectionPvtIp) isAzureVnetVoltstackClusterARType_SiteMeshGroupChoice() {
}
func (*AzureVnetVoltstackClusterARType_NoK8SCluster) isAzureVnetVoltstackClusterARType_K8SClusterChoice() {
}
func (*AzureVnetVoltstackClusterARType_K8SCluster) isAzureVnetVoltstackClusterARType_K8SClusterChoice() {
}
func (*AzureVnetVoltstackClusterARType_DefaultStorage) isAzureVnetVoltstackClusterARType_StorageClassChoice() {
}
func (*AzureVnetVoltstackClusterARType_StorageClassList) isAzureVnetVoltstackClusterARType_StorageClassChoice() {
}

func (m *AzureVnetVoltstackClusterARType) GetNetworkPolicyChoice() isAzureVnetVoltstackClusterARType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARType) GetForwardProxyChoice() isAzureVnetVoltstackClusterARType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARType) GetOutsideStaticRouteChoice() isAzureVnetVoltstackClusterARType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARType) GetGlobalNetworkChoice() isAzureVnetVoltstackClusterARType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARType) GetDcClusterGroupChoice() isAzureVnetVoltstackClusterARType_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARType) GetSiteMeshGroupChoice() isAzureVnetVoltstackClusterARType_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARType) GetK8SClusterChoice() isAzureVnetVoltstackClusterARType_K8SClusterChoice {
	if m != nil {
		return m.K8SClusterChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARType) GetStorageClassChoice() isAzureVnetVoltstackClusterARType_StorageClassChoice {
	if m != nil {
		return m.StorageClassChoice
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

func (m *AzureVnetVoltstackClusterARType) GetNode() *views.AzureVnetOneInterfaceNodeARType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterARType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterARType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetNoOutsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetOutsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterARType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterARType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterARType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterARType_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetDcClusterGroup() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterARType_DcClusterGroup); ok {
		return x.DcClusterGroup
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterARType_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterARType_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetNoK8SCluster() *schema.Empty {
	if x, ok := m.GetK8SClusterChoice().(*AzureVnetVoltstackClusterARType_NoK8SCluster); ok {
		return x.NoK8SCluster
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetK8SCluster() *views.ObjectRefType {
	if x, ok := m.GetK8SClusterChoice().(*AzureVnetVoltstackClusterARType_K8SCluster); ok {
		return x.K8SCluster
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetDefaultStorage() *schema.Empty {
	if x, ok := m.GetStorageClassChoice().(*AzureVnetVoltstackClusterARType_DefaultStorage); ok {
		return x.DefaultStorage
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetStorageClassList() *views.StorageClassListType {
	if x, ok := m.GetStorageClassChoice().(*AzureVnetVoltstackClusterARType_StorageClassList); ok {
		return x.StorageClassList
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetAcceleratedNetworking() *views.AcceleratedNetworkingType {
	if m != nil {
		return m.AcceleratedNetworking
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AzureVnetVoltstackClusterARType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AzureVnetVoltstackClusterARType_NoNetworkPolicy)(nil),
		(*AzureVnetVoltstackClusterARType_ActiveNetworkPolicies)(nil),
		(*AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies)(nil),
		(*AzureVnetVoltstackClusterARType_NoForwardProxy)(nil),
		(*AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetVoltstackClusterARType_ForwardProxyAllowAll)(nil),
		(*AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterARType_OutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterARType_NoGlobalNetwork)(nil),
		(*AzureVnetVoltstackClusterARType_GlobalNetworkList)(nil),
		(*AzureVnetVoltstackClusterARType_NoDcClusterGroup)(nil),
		(*AzureVnetVoltstackClusterARType_DcClusterGroup)(nil),
		(*AzureVnetVoltstackClusterARType_SmConnectionPublicIp)(nil),
		(*AzureVnetVoltstackClusterARType_SmConnectionPvtIp)(nil),
		(*AzureVnetVoltstackClusterARType_NoK8SCluster)(nil),
		(*AzureVnetVoltstackClusterARType_K8SCluster)(nil),
		(*AzureVnetVoltstackClusterARType_DefaultStorage)(nil),
		(*AzureVnetVoltstackClusterARType_StorageClassList)(nil),
	}
}

// Azure Ingress Gateway
//
// x-displayName: "Azure Ingress Gateway"
// Single interface Azure ingress site
type AzureVnetIngressGwReplaceType struct {
}

func (m *AzureVnetIngressGwReplaceType) Reset()      { *m = AzureVnetIngressGwReplaceType{} }
func (*AzureVnetIngressGwReplaceType) ProtoMessage() {}
func (*AzureVnetIngressGwReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{11}
}
func (m *AzureVnetIngressGwReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureVnetIngressGwReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureVnetIngressGwReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureVnetIngressGwReplaceType.Merge(m, src)
}
func (m *AzureVnetIngressGwReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *AzureVnetIngressGwReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureVnetIngressGwReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureVnetIngressGwReplaceType proto.InternalMessageInfo

// Azure Ingress Gateway for Alternate Region
//
// x-displayName: "Azure Ingress Gateway for Alternate Region"
// Single interface Azure ingress site for Alternate Region
type AzureVnetIngressGwARReplaceType struct {
}

func (m *AzureVnetIngressGwARReplaceType) Reset()      { *m = AzureVnetIngressGwARReplaceType{} }
func (*AzureVnetIngressGwARReplaceType) ProtoMessage() {}
func (*AzureVnetIngressGwARReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{12}
}
func (m *AzureVnetIngressGwARReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureVnetIngressGwARReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureVnetIngressGwARReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureVnetIngressGwARReplaceType.Merge(m, src)
}
func (m *AzureVnetIngressGwARReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *AzureVnetIngressGwARReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureVnetIngressGwARReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureVnetIngressGwARReplaceType proto.InternalMessageInfo

// Azure VNet IP prefixes Info
//
// x-displayName: "Azure VNet IP prefixes Info"
// Azure VNet IP prefixes Info
type VnetIpPrefixesType struct {
	// VNet Info
	//
	// x-displayName: "VNet Info"
	// Existing VNet Information
	Vnet *views.AzureVnetType `protobuf:"bytes,1,opt,name=vnet,proto3" json:"vnet,omitempty"`
	// VNet prefixes
	//
	// x-displayName: "VNet Prefixes"
	// x-required
	// x-example: "['10.2.1.0/24', '192.168.8.0/29', '10.7.64.160/27']"
	// An unordered list of IP prefixes.
	Prefixes []string `protobuf:"bytes,2,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (m *VnetIpPrefixesType) Reset()      { *m = VnetIpPrefixesType{} }
func (*VnetIpPrefixesType) ProtoMessage() {}
func (*VnetIpPrefixesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{13}
}
func (m *VnetIpPrefixesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VnetIpPrefixesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VnetIpPrefixesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VnetIpPrefixesType.Merge(m, src)
}
func (m *VnetIpPrefixesType) XXX_Size() int {
	return m.Size()
}
func (m *VnetIpPrefixesType) XXX_DiscardUnknown() {
	xxx_messageInfo_VnetIpPrefixesType.DiscardUnknown(m)
}

var xxx_messageInfo_VnetIpPrefixesType proto.InternalMessageInfo

func (m *VnetIpPrefixesType) GetVnet() *views.AzureVnetType {
	if m != nil {
		return m.Vnet
	}
	return nil
}

func (m *VnetIpPrefixesType) GetPrefixes() []string {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

// Azure Ingress Egress Gateway
//
// x-displayName: "Azure Ingress/Egress Gateway"
// Two interface Azure ingress/egress site
type AzureVnetIngressEgressGwReplaceType struct {
	// Manage Firewall Policy
	//
	// x-displayName: "Manage Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy
	//	*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies
	//	*AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoForwardProxy
	//	*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies
	//	*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Inside Network
	//
	// x-displayName: "Manage Static Routes for Inside Network"
	// x-required
	// Add static routes to inside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to InsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes
	//	*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes
	InsideStaticRouteChoice isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice `protobuf_oneof:"inside_static_route_choice"`
	// Manage Static Routes for Outside Network
	//
	// x-displayName: "Manage Static Routes for Outside Network"
	// x-required
	// Add static routes to outside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes
	//	*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to site local network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork
	//	*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via selected network type
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup
	//	*AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn
	//	*AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn
	DcClusterGroupChoice isAzureVnetIngressEgressGwReplaceType_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp
	//	*AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp
	SiteMeshGroupChoice isAzureVnetIngressEgressGwReplaceType_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
	// Choice of VNet type
	//
	// x-displayName: "Select VNet type"
	// x-required
	// Select VNet is a hub or standalone
	//
	// Types that are valid to be assigned to HubChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NotHub
	//	*AzureVnetIngressEgressGwReplaceType_Hub
	HubChoice isAzureVnetIngressEgressGwReplaceType_HubChoice `protobuf_oneof:"hub_choice"`
	// Performance Enhancement Choice
	//
	// x-displayName: "Performance Enhancement Mode"
	// Performance Enhancement Mode to optimize for L3 or L7 networking
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,45,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
}

func (m *AzureVnetIngressEgressGwReplaceType) Reset()      { *m = AzureVnetIngressEgressGwReplaceType{} }
func (*AzureVnetIngressEgressGwReplaceType) ProtoMessage() {}
func (*AzureVnetIngressEgressGwReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{14}
}
func (m *AzureVnetIngressEgressGwReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureVnetIngressEgressGwReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureVnetIngressEgressGwReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureVnetIngressEgressGwReplaceType.Merge(m, src)
}
func (m *AzureVnetIngressEgressGwReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *AzureVnetIngressEgressGwReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureVnetIngressEgressGwReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureVnetIngressEgressGwReplaceType proto.InternalMessageInfo

type isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice interface {
	isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice interface {
	isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice interface {
	isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_DcClusterGroupChoice interface {
	isAzureVnetIngressEgressGwReplaceType_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_SiteMeshGroupChoice interface {
	isAzureVnetIngressEgressGwReplaceType_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_HubChoice interface {
	isAzureVnetIngressEgressGwReplaceType_HubChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,2,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,10,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,32,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,4,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,9,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,20,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes struct {
	NoInsideStaticRoutes *schema.Empty `protobuf:"bytes,12,opt,name=no_inside_static_routes,json=noInsideStaticRoutes,proto3,oneof" json:"no_inside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes struct {
	InsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,13,opt,name=inside_static_routes,json=insideStaticRoutes,proto3,oneof" json:"inside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *schema.Empty `protobuf:"bytes,15,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,proto3,oneof" json:"no_outside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,16,opt,name=outside_static_routes,json=outsideStaticRoutes,proto3,oneof" json:"outside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,18,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,19,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,22,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn struct {
	DcClusterGroupOutsideVn *views.ObjectRefType `protobuf:"bytes,23,opt,name=dc_cluster_group_outside_vn,json=dcClusterGroupOutsideVn,proto3,oneof" json:"dc_cluster_group_outside_vn,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn struct {
	DcClusterGroupInsideVn *views.ObjectRefType `protobuf:"bytes,24,opt,name=dc_cluster_group_inside_vn,json=dcClusterGroupInsideVn,proto3,oneof" json:"dc_cluster_group_inside_vn,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,27,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,28,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_NotHub struct {
	NotHub *schema.Empty `protobuf:"bytes,30,opt,name=not_hub,json=notHub,proto3,oneof" json:"not_hub,omitempty"`
}
type AzureVnetIngressEgressGwReplaceType_Hub struct {
	Hub *AzureHubVnetType `protobuf:"bytes,31,opt,name=hub,proto3,oneof" json:"hub,omitempty"`
}

func (*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies) isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_NoForwardProxy) isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup) isAzureVnetIngressEgressGwReplaceType_DcClusterGroupChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn) isAzureVnetIngressEgressGwReplaceType_DcClusterGroupChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn) isAzureVnetIngressEgressGwReplaceType_DcClusterGroupChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp) isAzureVnetIngressEgressGwReplaceType_SiteMeshGroupChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp) isAzureVnetIngressEgressGwReplaceType_SiteMeshGroupChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_NotHub) isAzureVnetIngressEgressGwReplaceType_HubChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_Hub) isAzureVnetIngressEgressGwReplaceType_HubChoice() {}

func (m *AzureVnetIngressEgressGwReplaceType) GetNetworkPolicyChoice() isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetForwardProxyChoice() isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetInsideStaticRouteChoice() isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice {
	if m != nil {
		return m.InsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetOutsideStaticRouteChoice() isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetGlobalNetworkChoice() isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetDcClusterGroupChoice() isAzureVnetIngressEgressGwReplaceType_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetSiteMeshGroupChoice() isAzureVnetIngressEgressGwReplaceType_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetHubChoice() isAzureVnetIngressEgressGwReplaceType_HubChoice {
	if m != nil {
		return m.HubChoice
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoInsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes); ok {
		return x.NoInsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetInsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes); ok {
		return x.InsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoOutsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetOutsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetDcClusterGroupOutsideVn() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn); ok {
		return x.DcClusterGroupOutsideVn
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetDcClusterGroupInsideVn() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn); ok {
		return x.DcClusterGroupInsideVn
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNotHub() *schema.Empty {
	if x, ok := m.GetHubChoice().(*AzureVnetIngressEgressGwReplaceType_NotHub); ok {
		return x.NotHub
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetHub() *AzureHubVnetType {
	if x, ok := m.GetHubChoice().(*AzureVnetIngressEgressGwReplaceType_Hub); ok {
		return x.Hub
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AzureVnetIngressEgressGwReplaceType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy)(nil),
		(*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies)(nil),
		(*AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies)(nil),
		(*AzureVnetIngressEgressGwReplaceType_NoForwardProxy)(nil),
		(*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll)(nil),
		(*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork)(nil),
		(*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList)(nil),
		(*AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup)(nil),
		(*AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn)(nil),
		(*AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn)(nil),
		(*AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp)(nil),
		(*AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp)(nil),
		(*AzureVnetIngressEgressGwReplaceType_NotHub)(nil),
		(*AzureVnetIngressEgressGwReplaceType_Hub)(nil),
	}
}

// Azure Ingress Egress Gateway for Alternate Region
//
// x-displayName: "Azure Ingress/Egress Gateway for Alternate Region"
// Two interface Azure ingress/egress site for Alternate Region
type AzureVnetIngressEgressGwARReplaceType struct {
	// Manage Firewall Policy
	//
	// x-displayName: "Manage Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy
	//	*AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies
	//	*AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isAzureVnetIngressEgressGwARReplaceType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetIngressEgressGwARReplaceType_NoForwardProxy
	//	*AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies
	//	*AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetIngressEgressGwARReplaceType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Inside Network
	//
	// x-displayName: "Manage Static Routes for Inside Network"
	// x-required
	// Add static routes to inside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to InsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes
	//	*AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes
	InsideStaticRouteChoice isAzureVnetIngressEgressGwARReplaceType_InsideStaticRouteChoice `protobuf_oneof:"inside_static_route_choice"`
	// Manage Static Routes for Outside Network
	//
	// x-displayName: "Manage Static Routes for Outside Network"
	// x-required
	// Add static routes to outside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes
	//	*AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetIngressEgressGwARReplaceType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to site local network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork
	//	*AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetIngressEgressGwARReplaceType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via selected network type
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup
	//	*AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn
	//	*AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn
	DcClusterGroupChoice isAzureVnetIngressEgressGwARReplaceType_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp
	//	*AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp
	SiteMeshGroupChoice isAzureVnetIngressEgressGwARReplaceType_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
	// Choice of VNet type
	//
	// x-displayName: "Select VNet type"
	// x-required
	// Select VNet is a hub or standalone
	//
	// Types that are valid to be assigned to HubChoice:
	//	*AzureVnetIngressEgressGwARReplaceType_NotHub
	//	*AzureVnetIngressEgressGwARReplaceType_Hub
	HubChoice isAzureVnetIngressEgressGwARReplaceType_HubChoice `protobuf_oneof:"hub_choice"`
	// Performance Enhancement Choice
	//
	// x-displayName: "Performance Enhancement Mode"
	// Performance Enhancement Mode to optimize for L3 or L7 networking
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,45,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
}

func (m *AzureVnetIngressEgressGwARReplaceType) Reset()      { *m = AzureVnetIngressEgressGwARReplaceType{} }
func (*AzureVnetIngressEgressGwARReplaceType) ProtoMessage() {}
func (*AzureVnetIngressEgressGwARReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{15}
}
func (m *AzureVnetIngressEgressGwARReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureVnetIngressEgressGwARReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureVnetIngressEgressGwARReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureVnetIngressEgressGwARReplaceType.Merge(m, src)
}
func (m *AzureVnetIngressEgressGwARReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *AzureVnetIngressEgressGwARReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureVnetIngressEgressGwARReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureVnetIngressEgressGwARReplaceType proto.InternalMessageInfo

type isAzureVnetIngressEgressGwARReplaceType_NetworkPolicyChoice interface {
	isAzureVnetIngressEgressGwARReplaceType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARReplaceType_ForwardProxyChoice interface {
	isAzureVnetIngressEgressGwARReplaceType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARReplaceType_InsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwARReplaceType_InsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARReplaceType_OutsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwARReplaceType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARReplaceType_GlobalNetworkChoice interface {
	isAzureVnetIngressEgressGwARReplaceType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARReplaceType_DcClusterGroupChoice interface {
	isAzureVnetIngressEgressGwARReplaceType_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARReplaceType_SiteMeshGroupChoice interface {
	isAzureVnetIngressEgressGwARReplaceType_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARReplaceType_HubChoice interface {
	isAzureVnetIngressEgressGwARReplaceType_HubChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,2,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,10,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,32,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,4,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,9,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,20,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes struct {
	NoInsideStaticRoutes *schema.Empty `protobuf:"bytes,12,opt,name=no_inside_static_routes,json=noInsideStaticRoutes,proto3,oneof" json:"no_inside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes struct {
	InsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,13,opt,name=inside_static_routes,json=insideStaticRoutes,proto3,oneof" json:"inside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *schema.Empty `protobuf:"bytes,15,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,proto3,oneof" json:"no_outside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,16,opt,name=outside_static_routes,json=outsideStaticRoutes,proto3,oneof" json:"outside_static_routes,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,18,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,19,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,22,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn struct {
	DcClusterGroupOutsideVn *views.ObjectRefType `protobuf:"bytes,23,opt,name=dc_cluster_group_outside_vn,json=dcClusterGroupOutsideVn,proto3,oneof" json:"dc_cluster_group_outside_vn,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn struct {
	DcClusterGroupInsideVn *views.ObjectRefType `protobuf:"bytes,24,opt,name=dc_cluster_group_inside_vn,json=dcClusterGroupInsideVn,proto3,oneof" json:"dc_cluster_group_inside_vn,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,27,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,28,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_NotHub struct {
	NotHub *schema.Empty `protobuf:"bytes,30,opt,name=not_hub,json=notHub,proto3,oneof" json:"not_hub,omitempty"`
}
type AzureVnetIngressEgressGwARReplaceType_Hub struct {
	Hub *AzureHubVnetType `protobuf:"bytes,31,opt,name=hub,proto3,oneof" json:"hub,omitempty"`
}

func (*AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy) isAzureVnetIngressEgressGwARReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies) isAzureVnetIngressEgressGwARReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies) isAzureVnetIngressEgressGwARReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_NoForwardProxy) isAzureVnetIngressEgressGwARReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies) isAzureVnetIngressEgressGwARReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll) isAzureVnetIngressEgressGwARReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes) isAzureVnetIngressEgressGwARReplaceType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes) isAzureVnetIngressEgressGwARReplaceType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes) isAzureVnetIngressEgressGwARReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes) isAzureVnetIngressEgressGwARReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork) isAzureVnetIngressEgressGwARReplaceType_GlobalNetworkChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList) isAzureVnetIngressEgressGwARReplaceType_GlobalNetworkChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup) isAzureVnetIngressEgressGwARReplaceType_DcClusterGroupChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn) isAzureVnetIngressEgressGwARReplaceType_DcClusterGroupChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn) isAzureVnetIngressEgressGwARReplaceType_DcClusterGroupChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp) isAzureVnetIngressEgressGwARReplaceType_SiteMeshGroupChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp) isAzureVnetIngressEgressGwARReplaceType_SiteMeshGroupChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_NotHub) isAzureVnetIngressEgressGwARReplaceType_HubChoice() {
}
func (*AzureVnetIngressEgressGwARReplaceType_Hub) isAzureVnetIngressEgressGwARReplaceType_HubChoice() {
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetNetworkPolicyChoice() isAzureVnetIngressEgressGwARReplaceType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARReplaceType) GetForwardProxyChoice() isAzureVnetIngressEgressGwARReplaceType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARReplaceType) GetInsideStaticRouteChoice() isAzureVnetIngressEgressGwARReplaceType_InsideStaticRouteChoice {
	if m != nil {
		return m.InsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARReplaceType) GetOutsideStaticRouteChoice() isAzureVnetIngressEgressGwARReplaceType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARReplaceType) GetGlobalNetworkChoice() isAzureVnetIngressEgressGwARReplaceType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARReplaceType) GetDcClusterGroupChoice() isAzureVnetIngressEgressGwARReplaceType_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARReplaceType) GetSiteMeshGroupChoice() isAzureVnetIngressEgressGwARReplaceType_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARReplaceType) GetHubChoice() isAzureVnetIngressEgressGwARReplaceType_HubChoice {
	if m != nil {
		return m.HubChoice
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARReplaceType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetNoInsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes); ok {
		return x.NoInsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetInsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes); ok {
		return x.InsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetNoOutsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetOutsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetDcClusterGroupOutsideVn() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn); ok {
		return x.DcClusterGroupOutsideVn
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetDcClusterGroupInsideVn() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn); ok {
		return x.DcClusterGroupInsideVn
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetNotHub() *schema.Empty {
	if x, ok := m.GetHubChoice().(*AzureVnetIngressEgressGwARReplaceType_NotHub); ok {
		return x.NotHub
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetHub() *AzureHubVnetType {
	if x, ok := m.GetHubChoice().(*AzureVnetIngressEgressGwARReplaceType_Hub); ok {
		return x.Hub
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AzureVnetIngressEgressGwARReplaceType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_NoForwardProxy)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_NotHub)(nil),
		(*AzureVnetIngressEgressGwARReplaceType_Hub)(nil),
	}
}

// Azure App Stack Cluster
//
// x-displayName: "Azure App Stack Cluster"
// App Stack cluster of single interface Azure nodes
type AzureVnetVoltstackClusterReplaceType struct {
	// Manage Firewall Policy
	//
	// x-displayName: "Manage Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy
	//	*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies
	//	*AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetVoltstackClusterReplaceType_NoForwardProxy
	//	*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies
	//	*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Site Local Network
	//
	// x-displayName: "Manage Static Routes for Site Local Network"
	// x-required
	// Add static routes to site local network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes
	//	*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to inside or outside network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork
	//	*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via selected network type
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup
	//	*AzureVnetVoltstackClusterReplaceType_DcClusterGroup
	DcClusterGroupChoice isAzureVnetVoltstackClusterReplaceType_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp
	//	*AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp
	SiteMeshGroupChoice isAzureVnetVoltstackClusterReplaceType_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
}

func (m *AzureVnetVoltstackClusterReplaceType) Reset()      { *m = AzureVnetVoltstackClusterReplaceType{} }
func (*AzureVnetVoltstackClusterReplaceType) ProtoMessage() {}
func (*AzureVnetVoltstackClusterReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{16}
}
func (m *AzureVnetVoltstackClusterReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureVnetVoltstackClusterReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureVnetVoltstackClusterReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureVnetVoltstackClusterReplaceType.Merge(m, src)
}
func (m *AzureVnetVoltstackClusterReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *AzureVnetVoltstackClusterReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureVnetVoltstackClusterReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureVnetVoltstackClusterReplaceType proto.InternalMessageInfo

type isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice interface {
	isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice interface {
	isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice interface {
	isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice interface {
	isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterReplaceType_DcClusterGroupChoice interface {
	isAzureVnetVoltstackClusterReplaceType_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterReplaceType_SiteMeshGroupChoice interface {
	isAzureVnetVoltstackClusterReplaceType_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,4,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,5,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,36,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type AzureVnetVoltstackClusterReplaceType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,7,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,8,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,15,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *schema.Empty `protobuf:"bytes,10,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,proto3,oneof" json:"no_outside_static_routes,omitempty"`
}
type AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,11,opt,name=outside_static_routes,json=outsideStaticRoutes,proto3,oneof" json:"outside_static_routes,omitempty"`
}
type AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,13,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type AzureVnetVoltstackClusterReplaceType_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,14,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}
type AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,29,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type AzureVnetVoltstackClusterReplaceType_DcClusterGroup struct {
	DcClusterGroup *views.ObjectRefType `protobuf:"bytes,30,opt,name=dc_cluster_group,json=dcClusterGroup,proto3,oneof" json:"dc_cluster_group,omitempty"`
}
type AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,34,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,35,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}

func (*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies) isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_NoForwardProxy) isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup) isAzureVnetVoltstackClusterReplaceType_DcClusterGroupChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_DcClusterGroup) isAzureVnetVoltstackClusterReplaceType_DcClusterGroupChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp) isAzureVnetVoltstackClusterReplaceType_SiteMeshGroupChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp) isAzureVnetVoltstackClusterReplaceType_SiteMeshGroupChoice() {
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNetworkPolicyChoice() isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterReplaceType) GetForwardProxyChoice() isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterReplaceType) GetOutsideStaticRouteChoice() isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterReplaceType) GetGlobalNetworkChoice() isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterReplaceType) GetDcClusterGroupChoice() isAzureVnetVoltstackClusterReplaceType_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterReplaceType) GetSiteMeshGroupChoice() isAzureVnetVoltstackClusterReplaceType_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNoOutsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetOutsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetDcClusterGroup() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterReplaceType_DcClusterGroup); ok {
		return x.DcClusterGroup
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AzureVnetVoltstackClusterReplaceType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy)(nil),
		(*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies)(nil),
		(*AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies)(nil),
		(*AzureVnetVoltstackClusterReplaceType_NoForwardProxy)(nil),
		(*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll)(nil),
		(*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork)(nil),
		(*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList)(nil),
		(*AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup)(nil),
		(*AzureVnetVoltstackClusterReplaceType_DcClusterGroup)(nil),
		(*AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp)(nil),
		(*AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp)(nil),
	}
}

// Azure App Stack Cluster for Alternate Region
//
// x-displayName: "Azure App Stack Cluster for Alternate Region"
// App Stack cluster of single interface Azure nodes
type AzureVnetVoltstackClusterARReplaceType struct {
	// Manage Firewall Policy
	//
	// x-displayName: "Manage Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy
	//	*AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies
	//	*AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isAzureVnetVoltstackClusterARReplaceType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetVoltstackClusterARReplaceType_NoForwardProxy
	//	*AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies
	//	*AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetVoltstackClusterARReplaceType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Site Local Network
	//
	// x-displayName: "Manage Static Routes for Site Local Network"
	// x-required
	// Add static routes to site local network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes
	//	*AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetVoltstackClusterARReplaceType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to inside or outside network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork
	//	*AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetVoltstackClusterARReplaceType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via selected network type
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup
	//	*AzureVnetVoltstackClusterARReplaceType_DcClusterGroup
	DcClusterGroupChoice isAzureVnetVoltstackClusterARReplaceType_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp
	//	*AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp
	SiteMeshGroupChoice isAzureVnetVoltstackClusterARReplaceType_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
}

func (m *AzureVnetVoltstackClusterARReplaceType) Reset() {
	*m = AzureVnetVoltstackClusterARReplaceType{}
}
func (*AzureVnetVoltstackClusterARReplaceType) ProtoMessage() {}
func (*AzureVnetVoltstackClusterARReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{17}
}
func (m *AzureVnetVoltstackClusterARReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureVnetVoltstackClusterARReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureVnetVoltstackClusterARReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureVnetVoltstackClusterARReplaceType.Merge(m, src)
}
func (m *AzureVnetVoltstackClusterARReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *AzureVnetVoltstackClusterARReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureVnetVoltstackClusterARReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureVnetVoltstackClusterARReplaceType proto.InternalMessageInfo

type isAzureVnetVoltstackClusterARReplaceType_NetworkPolicyChoice interface {
	isAzureVnetVoltstackClusterARReplaceType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARReplaceType_ForwardProxyChoice interface {
	isAzureVnetVoltstackClusterARReplaceType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARReplaceType_OutsideStaticRouteChoice interface {
	isAzureVnetVoltstackClusterARReplaceType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARReplaceType_GlobalNetworkChoice interface {
	isAzureVnetVoltstackClusterARReplaceType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARReplaceType_DcClusterGroupChoice interface {
	isAzureVnetVoltstackClusterARReplaceType_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARReplaceType_SiteMeshGroupChoice interface {
	isAzureVnetVoltstackClusterARReplaceType_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,4,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,5,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,36,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type AzureVnetVoltstackClusterARReplaceType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,7,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,8,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,15,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *schema.Empty `protobuf:"bytes,10,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,proto3,oneof" json:"no_outside_static_routes,omitempty"`
}
type AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,11,opt,name=outside_static_routes,json=outsideStaticRoutes,proto3,oneof" json:"outside_static_routes,omitempty"`
}
type AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,13,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,14,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}
type AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,30,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type AzureVnetVoltstackClusterARReplaceType_DcClusterGroup struct {
	DcClusterGroup *views.ObjectRefType `protobuf:"bytes,31,opt,name=dc_cluster_group,json=dcClusterGroup,proto3,oneof" json:"dc_cluster_group,omitempty"`
}
type AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,34,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,35,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}

func (*AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy) isAzureVnetVoltstackClusterARReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies) isAzureVnetVoltstackClusterARReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies) isAzureVnetVoltstackClusterARReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterARReplaceType_NoForwardProxy) isAzureVnetVoltstackClusterARReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies) isAzureVnetVoltstackClusterARReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll) isAzureVnetVoltstackClusterARReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes) isAzureVnetVoltstackClusterARReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes) isAzureVnetVoltstackClusterARReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork) isAzureVnetVoltstackClusterARReplaceType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList) isAzureVnetVoltstackClusterARReplaceType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup) isAzureVnetVoltstackClusterARReplaceType_DcClusterGroupChoice() {
}
func (*AzureVnetVoltstackClusterARReplaceType_DcClusterGroup) isAzureVnetVoltstackClusterARReplaceType_DcClusterGroupChoice() {
}
func (*AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp) isAzureVnetVoltstackClusterARReplaceType_SiteMeshGroupChoice() {
}
func (*AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp) isAzureVnetVoltstackClusterARReplaceType_SiteMeshGroupChoice() {
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetNetworkPolicyChoice() isAzureVnetVoltstackClusterARReplaceType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARReplaceType) GetForwardProxyChoice() isAzureVnetVoltstackClusterARReplaceType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARReplaceType) GetOutsideStaticRouteChoice() isAzureVnetVoltstackClusterARReplaceType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARReplaceType) GetGlobalNetworkChoice() isAzureVnetVoltstackClusterARReplaceType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARReplaceType) GetDcClusterGroupChoice() isAzureVnetVoltstackClusterARReplaceType_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARReplaceType) GetSiteMeshGroupChoice() isAzureVnetVoltstackClusterARReplaceType_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARReplaceType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetNoOutsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetOutsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetDcClusterGroup() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AzureVnetVoltstackClusterARReplaceType_DcClusterGroup); ok {
		return x.DcClusterGroup
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AzureVnetVoltstackClusterARReplaceType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy)(nil),
		(*AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies)(nil),
		(*AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies)(nil),
		(*AzureVnetVoltstackClusterARReplaceType_NoForwardProxy)(nil),
		(*AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll)(nil),
		(*AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork)(nil),
		(*AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList)(nil),
		(*AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup)(nil),
		(*AzureVnetVoltstackClusterARReplaceType_DcClusterGroup)(nil),
		(*AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp)(nil),
		(*AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp)(nil),
	}
}

// Azure VNet Site Information Config
//
// x-displayName: "Azure VNet Site Information Config"
// Azure VNet Site information like
type AzureVnetSiteInfoType struct {
	// Azure VM Public IPs
	//
	// x-displayName: "Azure VM Public IPs"
	// x-required
	// x-example: "1.1.1.1, 2.2.2.2, 3.3.3.3"
	// Azure VM Public IPs used by the nodes
	PublicIps []string `protobuf:"bytes,1,rep,name=public_ips,json=publicIps,proto3" json:"public_ips,omitempty"`
	// Azure VM Private IPs
	//
	// x-displayName: "Azure VM Private IPs"
	// x-required
	// x-example: "10.0.0.1, 10.0.0.2, 10.0.0.3"
	// Azure VM Private IPs used by the nodes
	PrivateIps []string `protobuf:"bytes,2,rep,name=private_ips,json=privateIps,proto3" json:"private_ips,omitempty"`
	// Azure Spoke VNet Prefix Information
	//
	// x-displayName: "Azure Spoke VNet Prefix Information"
	// Azure Spoke VNet Prefix Information
	SpokeVnetPrefixInfo []*VnetIpPrefixesType `protobuf:"bytes,3,rep,name=spoke_vnet_prefix_info,json=spokeVnetPrefixInfo,proto3" json:"spoke_vnet_prefix_info,omitempty"`
	// Express Route Info
	//
	// x-displayName: "Express Route Info"
	// Express Route Info
	ExpressRouteInfo *ExpressRouteInfo `protobuf:"bytes,4,opt,name=express_route_info,json=expressRouteInfo,proto3" json:"express_route_info,omitempty"`
	// Azure Node Name
	//
	// x-displayName: "Azure Node Name"
	// Azure Node Name
	NodeInfo []*NodeInstanceNameType `protobuf:"bytes,5,rep,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
	// Services VNET ID
	//
	// x-displayName: "VNET ID"
	// VNET ID where the volterra site exists
	Vnet *VNETInfoType `protobuf:"bytes,6,opt,name=vnet,proto3" json:"vnet,omitempty"`
}

func (m *AzureVnetSiteInfoType) Reset()      { *m = AzureVnetSiteInfoType{} }
func (*AzureVnetSiteInfoType) ProtoMessage() {}
func (*AzureVnetSiteInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{18}
}
func (m *AzureVnetSiteInfoType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureVnetSiteInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureVnetSiteInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureVnetSiteInfoType.Merge(m, src)
}
func (m *AzureVnetSiteInfoType) XXX_Size() int {
	return m.Size()
}
func (m *AzureVnetSiteInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureVnetSiteInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureVnetSiteInfoType proto.InternalMessageInfo

func (m *AzureVnetSiteInfoType) GetPublicIps() []string {
	if m != nil {
		return m.PublicIps
	}
	return nil
}

func (m *AzureVnetSiteInfoType) GetPrivateIps() []string {
	if m != nil {
		return m.PrivateIps
	}
	return nil
}

func (m *AzureVnetSiteInfoType) GetSpokeVnetPrefixInfo() []*VnetIpPrefixesType {
	if m != nil {
		return m.SpokeVnetPrefixInfo
	}
	return nil
}

func (m *AzureVnetSiteInfoType) GetExpressRouteInfo() *ExpressRouteInfo {
	if m != nil {
		return m.ExpressRouteInfo
	}
	return nil
}

func (m *AzureVnetSiteInfoType) GetNodeInfo() []*NodeInstanceNameType {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

func (m *AzureVnetSiteInfoType) GetVnet() *VNETInfoType {
	if m != nil {
		return m.Vnet
	}
	return nil
}

// VNET Info Type
//
// x-displayName: "Azure VNET Info type"
// Azure Vnet Info Type
type VNETInfoType struct {
	// VNET Name
	//
	// x-displayName: "VNET Name"
	// x-example: "ves-vnet-auto-ks-azure-vnet-3-585b7768d9"
	// VNET Name
	VnetName string `protobuf:"bytes,1,opt,name=vnet_name,json=vnetName,proto3" json:"vnet_name,omitempty"`
	// VNET Resource ID
	//
	// x-displayName: "VNET Resource ID"
	// x-example: "/subscriptions/b07ce22b-a877-4fb7-8b91-412af79e32ea/resourceGroups/ks-azure-vnet-3/providers/Microsoft.Network/virtualNetworks/ves-vnet-auto-ks-azure-vnet-3-585b7768d9"
	// VNET Resource ID
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (m *VNETInfoType) Reset()      { *m = VNETInfoType{} }
func (*VNETInfoType) ProtoMessage() {}
func (*VNETInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{19}
}
func (m *VNETInfoType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VNETInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VNETInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VNETInfoType.Merge(m, src)
}
func (m *VNETInfoType) XXX_Size() int {
	return m.Size()
}
func (m *VNETInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_VNETInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_VNETInfoType proto.InternalMessageInfo

func (m *VNETInfoType) GetVnetName() string {
	if m != nil {
		return m.VnetName
	}
	return ""
}

func (m *VNETInfoType) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

// Express Route Info
//
// x-displayName: "Express Route Info"
// Express Route Info
type ExpressRouteInfo struct {
	// Route Server IPs
	//
	// x-displayName: "Route Server IPs"
	// x-example: "10.0.0.1"
	// Route Server IPs
	RouteServerIps []string `protobuf:"bytes,1,rep,name=route_server_ips,json=routeServerIps,proto3" json:"route_server_ips,omitempty"`
	// Route Server ASN
	//
	// x-displayName: "Route Server ASN"
	// x-example: "65441"
	// Route Server ASN
	RouteServerAsn uint32 `protobuf:"varint,2,opt,name=route_server_asn,json=routeServerAsn,proto3" json:"route_server_asn,omitempty"`
}

func (m *ExpressRouteInfo) Reset()      { *m = ExpressRouteInfo{} }
func (*ExpressRouteInfo) ProtoMessage() {}
func (*ExpressRouteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{20}
}
func (m *ExpressRouteInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpressRouteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExpressRouteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressRouteInfo.Merge(m, src)
}
func (m *ExpressRouteInfo) XXX_Size() int {
	return m.Size()
}
func (m *ExpressRouteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressRouteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressRouteInfo proto.InternalMessageInfo

func (m *ExpressRouteInfo) GetRouteServerIps() []string {
	if m != nil {
		return m.RouteServerIps
	}
	return nil
}

func (m *ExpressRouteInfo) GetRouteServerAsn() uint32 {
	if m != nil {
		return m.RouteServerAsn
	}
	return 0
}

// Node Instance Name
//
// x-displayName: "Node Instance Name"
// Node Instance Name
type NodeInstanceNameType struct {
	// Node Instance Name
	//
	// x-displayName: "Node Instance Name"
	// x-example: "ip-1-2-3-4-site1"
	// Node Instance Name used by dataplane
	NodeInstanceName string `protobuf:"bytes,1,opt,name=node_instance_name,json=nodeInstanceName,proto3" json:"node_instance_name,omitempty"`
	// Node ID
	//
	// x-displayName: "Node ID"
	// x-example: "ves-node-id-xxxxxx"
	// x-required
	// Node ID Information
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *NodeInstanceNameType) Reset()      { *m = NodeInstanceNameType{} }
func (*NodeInstanceNameType) ProtoMessage() {}
func (*NodeInstanceNameType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{21}
}
func (m *NodeInstanceNameType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInstanceNameType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeInstanceNameType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInstanceNameType.Merge(m, src)
}
func (m *NodeInstanceNameType) XXX_Size() int {
	return m.Size()
}
func (m *NodeInstanceNameType) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInstanceNameType.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInstanceNameType proto.InternalMessageInfo

func (m *NodeInstanceNameType) GetNodeInstanceName() string {
	if m != nil {
		return m.NodeInstanceName
	}
	return ""
}

func (m *NodeInstanceNameType) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the Azure VNet site specification
type GlobalSpecType struct {
	// Resource Group
	//
	// x-displayName: "Resource Group"
	// x-example: "my-resources"
	// x-required
	// Azure resource group for resources that will be created
	ResourceGroup string `protobuf:"bytes,1,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// Select Azure Region Type
	//
	// x-displayName: "Select Azure Region Type"
	// x-required
	// Choice of selecting recommended region or alternate region
	//
	// Types that are valid to be assigned to RegionChoice:
	//	*GlobalSpecType_AzureRegion
	//	*GlobalSpecType_AlternateRegion
	RegionChoice isGlobalSpecType_RegionChoice `protobuf_oneof:"region_choice"`
	// Vnet
	//
	// x-displayName: "Vnet"
	// x-required
	// Choice of using existing VNet or create new VNet
	Vnet *views.AzureVnetChoiceType `protobuf:"bytes,3,opt,name=vnet,proto3" json:"vnet,omitempty"`
	// Number of interfaces on CE
	//
	// x-displayName: "Select Ingress Gateway or Ingress/Egress Gateway"
	// x-required
	// Choice of deploying one interface or two interface site
	//
	// Types that are valid to be assigned to SiteType:
	//	*GlobalSpecType_IngressGw
	//	*GlobalSpecType_IngressEgressGw
	//	*GlobalSpecType_VoltstackCluster
	//	*GlobalSpecType_IngressGwAr
	//	*GlobalSpecType_IngressEgressGwAr
	//	*GlobalSpecType_VoltstackClusterAr
	SiteType isGlobalSpecType_SiteType `protobuf_oneof:"site_type"`
	// Cloud Disk size
	//
	// x-displayName: "Cloud Disk Size"
	// x-example: "80"
	// Disk size to be used for this instance in GiB. 80 is 80 GiB
	DiskSize uint32 `protobuf:"varint,16,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Automatic Deployment
	//
	// x-displayName: "Automatic Deployment"
	// x-required
	// Deploying automatic via volterra.
	//
	// Types that are valid to be assigned to Deployment:
	//	*GlobalSpecType_AzureCred
	//	*GlobalSpecType_Assisted
	Deployment isGlobalSpecType_Deployment `protobuf_oneof:"deployment"`
	// Machine Type
	//
	// x-displayName: "Azure Machine Type for Node"
	// x-example: "Standard_D3_v2"
	// x-required
	// Select Instance size based on performance needed.
	// The default setting for Accelerated Networking is enabled, thus make sure
	// you select a Virtual Machine that supports accelerated networking or
	// disable the setting under, Select Ingress Gateway or Ingress/Egress Gateway
	// > advanced options.
	MachineType string `protobuf:"bytes,10,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// Desired Worker Nodes Selection
	//
	// x-displayName: "Desired Worker Nodes Selection"
	// x-required
	// Choice of deploying desired number of worker nodes.
	//
	// Types that are valid to be assigned to WorkerNodes:
	//	*GlobalSpecType_NodesPerAz
	//	*GlobalSpecType_TotalNodes
	//	*GlobalSpecType_NoWorkerNodes
	WorkerNodes isGlobalSpecType_WorkerNodes `protobuf_oneof:"worker_nodes"`
	// volterra_software_version
	//
	// x-displayName: "Software Version"
	// x-example: "value"
	// Desired F5XC software version for this site, a string matching released set of software components.
	VolterraSoftwareVersion string `protobuf:"bytes,12,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	// operating_system_version
	//
	// x-displayName: "Operating System Version"
	// x-example: "value"
	// Desired Operating System version for this site.
	OperatingSystemVersion string `protobuf:"bytes,13,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// x-example: "ssh-rsa AAAAB..."
	// x-required
	// Public SSH key for accessing the site.
	SshKey string `protobuf:"bytes,14,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// address
	//
	// x-displayName: "Geographical Address"
	// x-example: "123 Street, city, country, postal code"
	// Site's geographical address that can be used determine its latitude and longitude.
	Address string `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	// coordinates
	//
	// x-displayName: "Co-ordinates"
	// Site longitude and latitude co-ordinates
	Coordinates *site.Coordinates `protobuf:"bytes,19,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Logs Streaming
	//
	// x-displayName: "Logs Streaming"
	// x-required
	// Select Logs receiver for logs streaming
	//
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GlobalSpecType_LogsStreamingDisabled
	//	*GlobalSpecType_LogReceiver
	LogsReceiverChoice isGlobalSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// F5XC Software
	//
	// x-displayName: "F5XC Software"
	// F5XC Software Details
	Sw *views.VolterraSoftwareType `protobuf:"bytes,23,opt,name=sw,proto3" json:"sw,omitempty"`
	// Operating System
	//
	// x-displayName: "Operating System"
	// Operating System Details
	Os *views.OperatingSystemType `protobuf:"bytes,24,opt,name=os,proto3" json:"os,omitempty"`
	// Azure Tags
	//
	// x-displayName: "Azure Tags"
	// x-example: "dev: staging"
	// Azure Tags is a label consisting of a user-defined key and value.
	// It helps to manage, identify, organize, search for, and filter resources in Azure console.
	Tags map[string]string `protobuf:"bytes,40,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// VIP Params Per Az
	//
	// x-displayName: "VIP Params Per AZ"
	// VIP Parameters Per AZ.
	VipParamsPerAz []*site.PublishVIPParamsPerAz `protobuf:"bytes,25,rep,name=vip_params_per_az,json=vipParamsPerAz,proto3" json:"vip_params_per_az,omitempty"`
	// site_to_site_tunnel_ip
	//
	// x-displayName: "Site To Site Tunnel IP"
	// x-example: "10.1.1.1"
	// Optional, VIP in the site_to_site_network_type configured above used for terminating IPSec/SSL tunnels created with SiteMeshGroup.
	SiteToSiteTunnelIp string `protobuf:"bytes,35,opt,name=site_to_site_tunnel_ip,json=siteToSiteTunnelIp,proto3" json:"site_to_site_tunnel_ip,omitempty"` // Deprecated: Do not use.
	// Blocked Services on Site
	//
	// x-displayName: "Services to be blocked on site"
	// x-required
	// By default webui, ssh and dns are all blocked, you can choose other options to unblock.
	//
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*GlobalSpecType_DefaultBlockedServices
	//	*GlobalSpecType_BlockAllServices
	//	*GlobalSpecType_BlockedServices
	BlockedServicesChoice isGlobalSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	// Offline Survivability Mode
	//
	// x-displayName: "Offline Survivability Mode"
	// Enable/Disable offline survivability mode
	OfflineSurvivabilityMode *views.OfflineSurvivabilityModeType `protobuf:"bytes,42,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	// user_modification_timestamp
	//
	// x-displayName: "User Modification Timestamp"
	// ModificationTimestamp is a timestamp representing time when the user
	// last modified the object.
	UserModificationTimestamp *types.Timestamp `protobuf:"bytes,50,opt,name=user_modification_timestamp,json=userModificationTimestamp,proto3" json:"user_modification_timestamp,omitempty"`
	// suggested_action
	//
	// x-displayName: "Suggested Action"
	// x-example: "value"
	// Suggested action for customer on error
	SuggestedAction string `protobuf:"bytes,51,opt,name=suggested_action,json=suggestedAction,proto3" json:"suggested_action,omitempty"`
	// error_description
	//
	// x-displayName: "Error Description"
	// x-example: "value"
	// Description of error on site
	ErrorDescription string `protobuf:"bytes,52,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	// site_errors
	//
	// x-displayName: "Site Errors"
	// x-example: "Site Errors"
	// Errors on site including suggested action
	SiteErrors []*views.SiteError `protobuf:"bytes,53,rep,name=site_errors,json=siteErrors,proto3" json:"site_errors,omitempty"`
	// validation_state
	//
	// x-displayName: "Validation State"
	// x-example: "Validation State"
	// Validation State of the Site
	ValidationState views.ConfigValidationState `protobuf:"varint,54,opt,name=validation_state,json=validationState,proto3,enum=ves.io.schema.views.ConfigValidationState" json:"validation_state,omitempty"`
	// custom_dns
	//
	// x-displayName: "Custom DNS"
	// custom dns configure to the CE site
	CustomDns *views.CustomDNS `protobuf:"bytes,55,opt,name=custom_dns,json=customDns,proto3" json:"custom_dns,omitempty"`
	// Reference to terraform parameters
	//
	// x-displayName: "Terraform Parameters"
	// Reference to view internal object
	TfParams *views.ObjectRefType `protobuf:"bytes,999,opt,name=tf_params,json=tfParams,proto3" json:"tf_params,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// Azure VNet Site Info
	//
	// x-displayName: "Azure VNet Site Info"
	// Azure VNet Site information obtained after creating the site
	CloudSiteInfo *AzureVnetSiteInfoType `protobuf:"bytes,1001,opt,name=cloud_site_info,json=cloudSiteInfo,proto3" json:"cloud_site_info,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{22}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_RegionChoice interface {
	isGlobalSpecType_RegionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_SiteType interface {
	isGlobalSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_Deployment interface {
	isGlobalSpecType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_WorkerNodes interface {
	isGlobalSpecType_WorkerNodes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_LogsReceiverChoice interface {
	isGlobalSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_BlockedServicesChoice interface {
	isGlobalSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_AzureRegion struct {
	AzureRegion string `protobuf:"bytes,2,opt,name=azure_region,json=azureRegion,proto3,oneof" json:"azure_region,omitempty"`
}
type GlobalSpecType_AlternateRegion struct {
	AlternateRegion string `protobuf:"bytes,31,opt,name=alternate_region,json=alternateRegion,proto3,oneof" json:"alternate_region,omitempty"`
}
type GlobalSpecType_IngressGw struct {
	IngressGw *AzureVnetIngressGwType `protobuf:"bytes,5,opt,name=ingress_gw,json=ingressGw,proto3,oneof" json:"ingress_gw,omitempty"`
}
type GlobalSpecType_IngressEgressGw struct {
	IngressEgressGw *AzureVnetIngressEgressGwType `protobuf:"bytes,6,opt,name=ingress_egress_gw,json=ingressEgressGw,proto3,oneof" json:"ingress_egress_gw,omitempty"`
}
type GlobalSpecType_VoltstackCluster struct {
	VoltstackCluster *AzureVnetVoltstackClusterType `protobuf:"bytes,17,opt,name=voltstack_cluster,json=voltstackCluster,proto3,oneof" json:"voltstack_cluster,omitempty"`
}
type GlobalSpecType_IngressGwAr struct {
	IngressGwAr *AzureVnetIngressGwARType `protobuf:"bytes,32,opt,name=ingress_gw_ar,json=ingressGwAr,proto3,oneof" json:"ingress_gw_ar,omitempty"`
}
type GlobalSpecType_IngressEgressGwAr struct {
	IngressEgressGwAr *AzureVnetIngressEgressGwARType `protobuf:"bytes,33,opt,name=ingress_egress_gw_ar,json=ingressEgressGwAr,proto3,oneof" json:"ingress_egress_gw_ar,omitempty"`
}
type GlobalSpecType_VoltstackClusterAr struct {
	VoltstackClusterAr *AzureVnetVoltstackClusterARType `protobuf:"bytes,34,opt,name=voltstack_cluster_ar,json=voltstackClusterAr,proto3,oneof" json:"voltstack_cluster_ar,omitempty"`
}
type GlobalSpecType_AzureCred struct {
	AzureCred *views.ObjectRefType `protobuf:"bytes,8,opt,name=azure_cred,json=azureCred,proto3,oneof" json:"azure_cred,omitempty"`
}
type GlobalSpecType_Assisted struct {
	Assisted *schema.Empty `protobuf:"bytes,9,opt,name=assisted,proto3,oneof" json:"assisted,omitempty"`
}
type GlobalSpecType_NodesPerAz struct {
	NodesPerAz uint32 `protobuf:"varint,15,opt,name=nodes_per_az,json=nodesPerAz,proto3,oneof" json:"nodes_per_az,omitempty"`
}
type GlobalSpecType_TotalNodes struct {
	TotalNodes uint32 `protobuf:"varint,27,opt,name=total_nodes,json=totalNodes,proto3,oneof" json:"total_nodes,omitempty"`
}
type GlobalSpecType_NoWorkerNodes struct {
	NoWorkerNodes *schema.Empty `protobuf:"bytes,28,opt,name=no_worker_nodes,json=noWorkerNodes,proto3,oneof" json:"no_worker_nodes,omitempty"`
}
type GlobalSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,21,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type GlobalSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,22,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type GlobalSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,37,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type GlobalSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,44,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type GlobalSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,41,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}

func (*GlobalSpecType_AzureRegion) isGlobalSpecType_RegionChoice()                     {}
func (*GlobalSpecType_AlternateRegion) isGlobalSpecType_RegionChoice()                 {}
func (*GlobalSpecType_IngressGw) isGlobalSpecType_SiteType()                           {}
func (*GlobalSpecType_IngressEgressGw) isGlobalSpecType_SiteType()                     {}
func (*GlobalSpecType_VoltstackCluster) isGlobalSpecType_SiteType()                    {}
func (*GlobalSpecType_IngressGwAr) isGlobalSpecType_SiteType()                         {}
func (*GlobalSpecType_IngressEgressGwAr) isGlobalSpecType_SiteType()                   {}
func (*GlobalSpecType_VoltstackClusterAr) isGlobalSpecType_SiteType()                  {}
func (*GlobalSpecType_AzureCred) isGlobalSpecType_Deployment()                         {}
func (*GlobalSpecType_Assisted) isGlobalSpecType_Deployment()                          {}
func (*GlobalSpecType_NodesPerAz) isGlobalSpecType_WorkerNodes()                       {}
func (*GlobalSpecType_TotalNodes) isGlobalSpecType_WorkerNodes()                       {}
func (*GlobalSpecType_NoWorkerNodes) isGlobalSpecType_WorkerNodes()                    {}
func (*GlobalSpecType_LogsStreamingDisabled) isGlobalSpecType_LogsReceiverChoice()     {}
func (*GlobalSpecType_LogReceiver) isGlobalSpecType_LogsReceiverChoice()               {}
func (*GlobalSpecType_DefaultBlockedServices) isGlobalSpecType_BlockedServicesChoice() {}
func (*GlobalSpecType_BlockAllServices) isGlobalSpecType_BlockedServicesChoice()       {}
func (*GlobalSpecType_BlockedServices) isGlobalSpecType_BlockedServicesChoice()        {}

func (m *GlobalSpecType) GetRegionChoice() isGlobalSpecType_RegionChoice {
	if m != nil {
		return m.RegionChoice
	}
	return nil
}
func (m *GlobalSpecType) GetSiteType() isGlobalSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *GlobalSpecType) GetDeployment() isGlobalSpecType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}
func (m *GlobalSpecType) GetWorkerNodes() isGlobalSpecType_WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}
func (m *GlobalSpecType) GetLogsReceiverChoice() isGlobalSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GlobalSpecType) GetBlockedServicesChoice() isGlobalSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}

func (m *GlobalSpecType) GetResourceGroup() string {
	if m != nil {
		return m.ResourceGroup
	}
	return ""
}

func (m *GlobalSpecType) GetAzureRegion() string {
	if x, ok := m.GetRegionChoice().(*GlobalSpecType_AzureRegion); ok {
		return x.AzureRegion
	}
	return ""
}

func (m *GlobalSpecType) GetAlternateRegion() string {
	if x, ok := m.GetRegionChoice().(*GlobalSpecType_AlternateRegion); ok {
		return x.AlternateRegion
	}
	return ""
}

func (m *GlobalSpecType) GetVnet() *views.AzureVnetChoiceType {
	if m != nil {
		return m.Vnet
	}
	return nil
}

func (m *GlobalSpecType) GetIngressGw() *AzureVnetIngressGwType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *GlobalSpecType) GetIngressEgressGw() *AzureVnetIngressEgressGwType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *GlobalSpecType) GetVoltstackCluster() *AzureVnetVoltstackClusterType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *GlobalSpecType) GetIngressGwAr() *AzureVnetIngressGwARType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_IngressGwAr); ok {
		return x.IngressGwAr
	}
	return nil
}

func (m *GlobalSpecType) GetIngressEgressGwAr() *AzureVnetIngressEgressGwARType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_IngressEgressGwAr); ok {
		return x.IngressEgressGwAr
	}
	return nil
}

func (m *GlobalSpecType) GetVoltstackClusterAr() *AzureVnetVoltstackClusterARType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_VoltstackClusterAr); ok {
		return x.VoltstackClusterAr
	}
	return nil
}

func (m *GlobalSpecType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *GlobalSpecType) GetAzureCred() *views.ObjectRefType {
	if x, ok := m.GetDeployment().(*GlobalSpecType_AzureCred); ok {
		return x.AzureCred
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetAssisted() *schema.Empty {
	if x, ok := m.GetDeployment().(*GlobalSpecType_Assisted); ok {
		return x.Assisted
	}
	return nil
}

func (m *GlobalSpecType) GetMachineType() string {
	if m != nil {
		return m.MachineType
	}
	return ""
}

func (m *GlobalSpecType) GetNodesPerAz() uint32 {
	if x, ok := m.GetWorkerNodes().(*GlobalSpecType_NodesPerAz); ok {
		return x.NodesPerAz
	}
	return 0
}

func (m *GlobalSpecType) GetTotalNodes() uint32 {
	if x, ok := m.GetWorkerNodes().(*GlobalSpecType_TotalNodes); ok {
		return x.TotalNodes
	}
	return 0
}

func (m *GlobalSpecType) GetNoWorkerNodes() *schema.Empty {
	if x, ok := m.GetWorkerNodes().(*GlobalSpecType_NoWorkerNodes); ok {
		return x.NoWorkerNodes
	}
	return nil
}

func (m *GlobalSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GlobalSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GlobalSpecType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *GlobalSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GlobalSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GlobalSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GlobalSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GlobalSpecType) GetSw() *views.VolterraSoftwareType {
	if m != nil {
		return m.Sw
	}
	return nil
}

func (m *GlobalSpecType) GetOs() *views.OperatingSystemType {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *GlobalSpecType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *GlobalSpecType) GetVipParamsPerAz() []*site.PublishVIPParamsPerAz {
	if m != nil {
		return m.VipParamsPerAz
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetSiteToSiteTunnelIp() string {
	if m != nil {
		return m.SiteToSiteTunnelIp
	}
	return ""
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *GlobalSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *GlobalSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *GlobalSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *GlobalSpecType) GetUserModificationTimestamp() *types.Timestamp {
	if m != nil {
		return m.UserModificationTimestamp
	}
	return nil
}

func (m *GlobalSpecType) GetSuggestedAction() string {
	if m != nil {
		return m.SuggestedAction
	}
	return ""
}

func (m *GlobalSpecType) GetErrorDescription() string {
	if m != nil {
		return m.ErrorDescription
	}
	return ""
}

func (m *GlobalSpecType) GetSiteErrors() []*views.SiteError {
	if m != nil {
		return m.SiteErrors
	}
	return nil
}

func (m *GlobalSpecType) GetValidationState() views.ConfigValidationState {
	if m != nil {
		return m.ValidationState
	}
	return views.VALIDATION_STATE_NONE
}

func (m *GlobalSpecType) GetCustomDns() *views.CustomDNS {
	if m != nil {
		return m.CustomDns
	}
	return nil
}

func (m *GlobalSpecType) GetTfParams() *views.ObjectRefType {
	if m != nil {
		return m.TfParams
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetCloudSiteInfo() *AzureVnetSiteInfoType {
	if m != nil {
		return m.CloudSiteInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_AzureRegion)(nil),
		(*GlobalSpecType_AlternateRegion)(nil),
		(*GlobalSpecType_IngressGw)(nil),
		(*GlobalSpecType_IngressEgressGw)(nil),
		(*GlobalSpecType_VoltstackCluster)(nil),
		(*GlobalSpecType_IngressGwAr)(nil),
		(*GlobalSpecType_IngressEgressGwAr)(nil),
		(*GlobalSpecType_VoltstackClusterAr)(nil),
		(*GlobalSpecType_AzureCred)(nil),
		(*GlobalSpecType_Assisted)(nil),
		(*GlobalSpecType_NodesPerAz)(nil),
		(*GlobalSpecType_TotalNodes)(nil),
		(*GlobalSpecType_NoWorkerNodes)(nil),
		(*GlobalSpecType_LogsStreamingDisabled)(nil),
		(*GlobalSpecType_LogReceiver)(nil),
		(*GlobalSpecType_DefaultBlockedServices)(nil),
		(*GlobalSpecType_BlockAllServices)(nil),
		(*GlobalSpecType_BlockedServices)(nil),
	}
}

// CreateSpecType
//
// x-displayName: "Create Azure VNet site"
// Shape of the Azure VNet site specification
type CreateSpecType struct {
	ResourceGroup string `protobuf:"bytes,1,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// Types that are valid to be assigned to RegionChoice:
	//	*CreateSpecType_AzureRegion
	//	*CreateSpecType_AlternateRegion
	RegionChoice isCreateSpecType_RegionChoice `protobuf_oneof:"region_choice"`
	Vnet         *views.AzureVnetChoiceType    `protobuf:"bytes,3,opt,name=vnet,proto3" json:"vnet,omitempty"`
	// Types that are valid to be assigned to SiteType:
	//	*CreateSpecType_IngressGw
	//	*CreateSpecType_IngressEgressGw
	//	*CreateSpecType_VoltstackCluster
	//	*CreateSpecType_IngressGwAr
	//	*CreateSpecType_IngressEgressGwAr
	//	*CreateSpecType_VoltstackClusterAr
	SiteType isCreateSpecType_SiteType `protobuf_oneof:"site_type"`
	// Types that are valid to be assigned to Deployment:
	//	*CreateSpecType_AzureCred
	Deployment  isCreateSpecType_Deployment `protobuf_oneof:"deployment"`
	MachineType string                      `protobuf:"bytes,10,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	DiskSize    uint32                      `protobuf:"varint,16,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	SshKey      string                      `protobuf:"bytes,14,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	Address     string                      `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates *site.Coordinates           `protobuf:"bytes,19,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*CreateSpecType_LogsStreamingDisabled
	//	*CreateSpecType_LogReceiver
	LogsReceiverChoice isCreateSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// F5XC Software
	//
	// x-displayName: "F5XC Software"
	// F5XC Software Details
	Sw *views.VolterraSoftwareType `protobuf:"bytes,23,opt,name=sw,proto3" json:"sw,omitempty"`
	// Operating System
	//
	// x-displayName: "Operating System"
	// Operating System Details
	Os   *views.OperatingSystemType `protobuf:"bytes,24,opt,name=os,proto3" json:"os,omitempty"`
	Tags map[string]string          `protobuf:"bytes,40,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are valid to be assigned to WorkerNodes:
	//	*CreateSpecType_NodesPerAz
	//	*CreateSpecType_TotalNodes
	//	*CreateSpecType_NoWorkerNodes
	WorkerNodes isCreateSpecType_WorkerNodes `protobuf_oneof:"worker_nodes"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*CreateSpecType_DefaultBlockedServices
	//	*CreateSpecType_BlockAllServices
	//	*CreateSpecType_BlockedServices
	BlockedServicesChoice    isCreateSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	OfflineSurvivabilityMode *views.OfflineSurvivabilityModeType    `protobuf:"bytes,42,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	// custom_dns
	//
	// x-displayName: "Custom DNS"
	// custom dns configure to the CE site
	CustomDns *views.CustomDNS `protobuf:"bytes,55,opt,name=custom_dns,json=customDns,proto3" json:"custom_dns,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{23}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_RegionChoice interface {
	isCreateSpecType_RegionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_SiteType interface {
	isCreateSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_Deployment interface {
	isCreateSpecType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_LogsReceiverChoice interface {
	isCreateSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_WorkerNodes interface {
	isCreateSpecType_WorkerNodes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_BlockedServicesChoice interface {
	isCreateSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_AzureRegion struct {
	AzureRegion string `protobuf:"bytes,2,opt,name=azure_region,json=azureRegion,proto3,oneof" json:"azure_region,omitempty"`
}
type CreateSpecType_AlternateRegion struct {
	AlternateRegion string `protobuf:"bytes,31,opt,name=alternate_region,json=alternateRegion,proto3,oneof" json:"alternate_region,omitempty"`
}
type CreateSpecType_IngressGw struct {
	IngressGw *AzureVnetIngressGwType `protobuf:"bytes,5,opt,name=ingress_gw,json=ingressGw,proto3,oneof" json:"ingress_gw,omitempty"`
}
type CreateSpecType_IngressEgressGw struct {
	IngressEgressGw *AzureVnetIngressEgressGwType `protobuf:"bytes,6,opt,name=ingress_egress_gw,json=ingressEgressGw,proto3,oneof" json:"ingress_egress_gw,omitempty"`
}
type CreateSpecType_VoltstackCluster struct {
	VoltstackCluster *AzureVnetVoltstackClusterType `protobuf:"bytes,17,opt,name=voltstack_cluster,json=voltstackCluster,proto3,oneof" json:"voltstack_cluster,omitempty"`
}
type CreateSpecType_IngressGwAr struct {
	IngressGwAr *AzureVnetIngressGwARType `protobuf:"bytes,32,opt,name=ingress_gw_ar,json=ingressGwAr,proto3,oneof" json:"ingress_gw_ar,omitempty"`
}
type CreateSpecType_IngressEgressGwAr struct {
	IngressEgressGwAr *AzureVnetIngressEgressGwARType `protobuf:"bytes,33,opt,name=ingress_egress_gw_ar,json=ingressEgressGwAr,proto3,oneof" json:"ingress_egress_gw_ar,omitempty"`
}
type CreateSpecType_VoltstackClusterAr struct {
	VoltstackClusterAr *AzureVnetVoltstackClusterARType `protobuf:"bytes,34,opt,name=voltstack_cluster_ar,json=voltstackClusterAr,proto3,oneof" json:"voltstack_cluster_ar,omitempty"`
}
type CreateSpecType_AzureCred struct {
	AzureCred *views.ObjectRefType `protobuf:"bytes,8,opt,name=azure_cred,json=azureCred,proto3,oneof" json:"azure_cred,omitempty"`
}
type CreateSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,21,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type CreateSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,22,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type CreateSpecType_NodesPerAz struct {
	NodesPerAz uint32 `protobuf:"varint,15,opt,name=nodes_per_az,json=nodesPerAz,proto3,oneof" json:"nodes_per_az,omitempty"`
}
type CreateSpecType_TotalNodes struct {
	TotalNodes uint32 `protobuf:"varint,27,opt,name=total_nodes,json=totalNodes,proto3,oneof" json:"total_nodes,omitempty"`
}
type CreateSpecType_NoWorkerNodes struct {
	NoWorkerNodes *schema.Empty `protobuf:"bytes,28,opt,name=no_worker_nodes,json=noWorkerNodes,proto3,oneof" json:"no_worker_nodes,omitempty"`
}
type CreateSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,37,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type CreateSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,44,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type CreateSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,41,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}

func (*CreateSpecType_AzureRegion) isCreateSpecType_RegionChoice()                     {}
func (*CreateSpecType_AlternateRegion) isCreateSpecType_RegionChoice()                 {}
func (*CreateSpecType_IngressGw) isCreateSpecType_SiteType()                           {}
func (*CreateSpecType_IngressEgressGw) isCreateSpecType_SiteType()                     {}
func (*CreateSpecType_VoltstackCluster) isCreateSpecType_SiteType()                    {}
func (*CreateSpecType_IngressGwAr) isCreateSpecType_SiteType()                         {}
func (*CreateSpecType_IngressEgressGwAr) isCreateSpecType_SiteType()                   {}
func (*CreateSpecType_VoltstackClusterAr) isCreateSpecType_SiteType()                  {}
func (*CreateSpecType_AzureCred) isCreateSpecType_Deployment()                         {}
func (*CreateSpecType_LogsStreamingDisabled) isCreateSpecType_LogsReceiverChoice()     {}
func (*CreateSpecType_LogReceiver) isCreateSpecType_LogsReceiverChoice()               {}
func (*CreateSpecType_NodesPerAz) isCreateSpecType_WorkerNodes()                       {}
func (*CreateSpecType_TotalNodes) isCreateSpecType_WorkerNodes()                       {}
func (*CreateSpecType_NoWorkerNodes) isCreateSpecType_WorkerNodes()                    {}
func (*CreateSpecType_DefaultBlockedServices) isCreateSpecType_BlockedServicesChoice() {}
func (*CreateSpecType_BlockAllServices) isCreateSpecType_BlockedServicesChoice()       {}
func (*CreateSpecType_BlockedServices) isCreateSpecType_BlockedServicesChoice()        {}

func (m *CreateSpecType) GetRegionChoice() isCreateSpecType_RegionChoice {
	if m != nil {
		return m.RegionChoice
	}
	return nil
}
func (m *CreateSpecType) GetSiteType() isCreateSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *CreateSpecType) GetDeployment() isCreateSpecType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}
func (m *CreateSpecType) GetLogsReceiverChoice() isCreateSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *CreateSpecType) GetWorkerNodes() isCreateSpecType_WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}
func (m *CreateSpecType) GetBlockedServicesChoice() isCreateSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}

func (m *CreateSpecType) GetResourceGroup() string {
	if m != nil {
		return m.ResourceGroup
	}
	return ""
}

func (m *CreateSpecType) GetAzureRegion() string {
	if x, ok := m.GetRegionChoice().(*CreateSpecType_AzureRegion); ok {
		return x.AzureRegion
	}
	return ""
}

func (m *CreateSpecType) GetAlternateRegion() string {
	if x, ok := m.GetRegionChoice().(*CreateSpecType_AlternateRegion); ok {
		return x.AlternateRegion
	}
	return ""
}

func (m *CreateSpecType) GetVnet() *views.AzureVnetChoiceType {
	if m != nil {
		return m.Vnet
	}
	return nil
}

func (m *CreateSpecType) GetIngressGw() *AzureVnetIngressGwType {
	if x, ok := m.GetSiteType().(*CreateSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *CreateSpecType) GetIngressEgressGw() *AzureVnetIngressEgressGwType {
	if x, ok := m.GetSiteType().(*CreateSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *CreateSpecType) GetVoltstackCluster() *AzureVnetVoltstackClusterType {
	if x, ok := m.GetSiteType().(*CreateSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *CreateSpecType) GetIngressGwAr() *AzureVnetIngressGwARType {
	if x, ok := m.GetSiteType().(*CreateSpecType_IngressGwAr); ok {
		return x.IngressGwAr
	}
	return nil
}

func (m *CreateSpecType) GetIngressEgressGwAr() *AzureVnetIngressEgressGwARType {
	if x, ok := m.GetSiteType().(*CreateSpecType_IngressEgressGwAr); ok {
		return x.IngressEgressGwAr
	}
	return nil
}

func (m *CreateSpecType) GetVoltstackClusterAr() *AzureVnetVoltstackClusterARType {
	if x, ok := m.GetSiteType().(*CreateSpecType_VoltstackClusterAr); ok {
		return x.VoltstackClusterAr
	}
	return nil
}

func (m *CreateSpecType) GetAzureCred() *views.ObjectRefType {
	if x, ok := m.GetDeployment().(*CreateSpecType_AzureCred); ok {
		return x.AzureCred
	}
	return nil
}

func (m *CreateSpecType) GetMachineType() string {
	if m != nil {
		return m.MachineType
	}
	return ""
}

func (m *CreateSpecType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *CreateSpecType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *CreateSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *CreateSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *CreateSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *CreateSpecType) GetSw() *views.VolterraSoftwareType {
	if m != nil {
		return m.Sw
	}
	return nil
}

func (m *CreateSpecType) GetOs() *views.OperatingSystemType {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *CreateSpecType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CreateSpecType) GetNodesPerAz() uint32 {
	if x, ok := m.GetWorkerNodes().(*CreateSpecType_NodesPerAz); ok {
		return x.NodesPerAz
	}
	return 0
}

func (m *CreateSpecType) GetTotalNodes() uint32 {
	if x, ok := m.GetWorkerNodes().(*CreateSpecType_TotalNodes); ok {
		return x.TotalNodes
	}
	return 0
}

func (m *CreateSpecType) GetNoWorkerNodes() *schema.Empty {
	if x, ok := m.GetWorkerNodes().(*CreateSpecType_NoWorkerNodes); ok {
		return x.NoWorkerNodes
	}
	return nil
}

func (m *CreateSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *CreateSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *CreateSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *CreateSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *CreateSpecType) GetCustomDns() *views.CustomDNS {
	if m != nil {
		return m.CustomDns
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_AzureRegion)(nil),
		(*CreateSpecType_AlternateRegion)(nil),
		(*CreateSpecType_IngressGw)(nil),
		(*CreateSpecType_IngressEgressGw)(nil),
		(*CreateSpecType_VoltstackCluster)(nil),
		(*CreateSpecType_IngressGwAr)(nil),
		(*CreateSpecType_IngressEgressGwAr)(nil),
		(*CreateSpecType_VoltstackClusterAr)(nil),
		(*CreateSpecType_AzureCred)(nil),
		(*CreateSpecType_LogsStreamingDisabled)(nil),
		(*CreateSpecType_LogReceiver)(nil),
		(*CreateSpecType_NodesPerAz)(nil),
		(*CreateSpecType_TotalNodes)(nil),
		(*CreateSpecType_NoWorkerNodes)(nil),
		(*CreateSpecType_DefaultBlockedServices)(nil),
		(*CreateSpecType_BlockAllServices)(nil),
		(*CreateSpecType_BlockedServices)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace Azure VNet site"
// Shape of the Azure VNet site replace specification
type ReplaceSpecType struct {
	// Site Type
	//
	// x-displayName: "Edit Networking Config"
	// x-required
	// Site Type ingress or ingress-egress gateway cannot be changed
	//
	// Types that are valid to be assigned to SiteType:
	//	*ReplaceSpecType_IngressGw
	//	*ReplaceSpecType_IngressEgressGw
	//	*ReplaceSpecType_VoltstackCluster
	//	*ReplaceSpecType_IngressGwAr
	//	*ReplaceSpecType_IngressEgressGwAr
	//	*ReplaceSpecType_VoltstackClusterAr
	SiteType isReplaceSpecType_SiteType `protobuf_oneof:"site_type"`
	// Types that are valid to be assigned to Deployment:
	//	*ReplaceSpecType_AzureCred
	Deployment  isReplaceSpecType_Deployment `protobuf_oneof:"deployment"`
	Address     string                       `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates *site.Coordinates            `protobuf:"bytes,19,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*ReplaceSpecType_LogsStreamingDisabled
	//	*ReplaceSpecType_LogReceiver
	LogsReceiverChoice isReplaceSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to WorkerNodes:
	//	*ReplaceSpecType_NodesPerAz
	//	*ReplaceSpecType_TotalNodes
	//	*ReplaceSpecType_NoWorkerNodes
	WorkerNodes isReplaceSpecType_WorkerNodes `protobuf_oneof:"worker_nodes"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*ReplaceSpecType_DefaultBlockedServices
	//	*ReplaceSpecType_BlockAllServices
	//	*ReplaceSpecType_BlockedServices
	BlockedServicesChoice    isReplaceSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	OfflineSurvivabilityMode *views.OfflineSurvivabilityModeType     `protobuf:"bytes,42,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	// custom_dns
	//
	// x-displayName: "Custom DNS"
	// custom dns configure to the CE site
	CustomDns *views.CustomDNS `protobuf:"bytes,55,opt,name=custom_dns,json=customDns,proto3" json:"custom_dns,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{24}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_SiteType interface {
	isReplaceSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_Deployment interface {
	isReplaceSpecType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_LogsReceiverChoice interface {
	isReplaceSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_WorkerNodes interface {
	isReplaceSpecType_WorkerNodes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_BlockedServicesChoice interface {
	isReplaceSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_IngressGw struct {
	IngressGw *AzureVnetIngressGwReplaceType `protobuf:"bytes,5,opt,name=ingress_gw,json=ingressGw,proto3,oneof" json:"ingress_gw,omitempty"`
}
type ReplaceSpecType_IngressEgressGw struct {
	IngressEgressGw *AzureVnetIngressEgressGwReplaceType `protobuf:"bytes,6,opt,name=ingress_egress_gw,json=ingressEgressGw,proto3,oneof" json:"ingress_egress_gw,omitempty"`
}
type ReplaceSpecType_VoltstackCluster struct {
	VoltstackCluster *AzureVnetVoltstackClusterReplaceType `protobuf:"bytes,17,opt,name=voltstack_cluster,json=voltstackCluster,proto3,oneof" json:"voltstack_cluster,omitempty"`
}
type ReplaceSpecType_IngressGwAr struct {
	IngressGwAr *AzureVnetIngressGwARReplaceType `protobuf:"bytes,32,opt,name=ingress_gw_ar,json=ingressGwAr,proto3,oneof" json:"ingress_gw_ar,omitempty"`
}
type ReplaceSpecType_IngressEgressGwAr struct {
	IngressEgressGwAr *AzureVnetIngressEgressGwARReplaceType `protobuf:"bytes,33,opt,name=ingress_egress_gw_ar,json=ingressEgressGwAr,proto3,oneof" json:"ingress_egress_gw_ar,omitempty"`
}
type ReplaceSpecType_VoltstackClusterAr struct {
	VoltstackClusterAr *AzureVnetVoltstackClusterARReplaceType `protobuf:"bytes,34,opt,name=voltstack_cluster_ar,json=voltstackClusterAr,proto3,oneof" json:"voltstack_cluster_ar,omitempty"`
}
type ReplaceSpecType_AzureCred struct {
	AzureCred *views.ObjectRefType `protobuf:"bytes,8,opt,name=azure_cred,json=azureCred,proto3,oneof" json:"azure_cred,omitempty"`
}
type ReplaceSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,21,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type ReplaceSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,22,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type ReplaceSpecType_NodesPerAz struct {
	NodesPerAz uint32 `protobuf:"varint,15,opt,name=nodes_per_az,json=nodesPerAz,proto3,oneof" json:"nodes_per_az,omitempty"`
}
type ReplaceSpecType_TotalNodes struct {
	TotalNodes uint32 `protobuf:"varint,27,opt,name=total_nodes,json=totalNodes,proto3,oneof" json:"total_nodes,omitempty"`
}
type ReplaceSpecType_NoWorkerNodes struct {
	NoWorkerNodes *schema.Empty `protobuf:"bytes,28,opt,name=no_worker_nodes,json=noWorkerNodes,proto3,oneof" json:"no_worker_nodes,omitempty"`
}
type ReplaceSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,37,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type ReplaceSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,44,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type ReplaceSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,41,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}

func (*ReplaceSpecType_IngressGw) isReplaceSpecType_SiteType()                           {}
func (*ReplaceSpecType_IngressEgressGw) isReplaceSpecType_SiteType()                     {}
func (*ReplaceSpecType_VoltstackCluster) isReplaceSpecType_SiteType()                    {}
func (*ReplaceSpecType_IngressGwAr) isReplaceSpecType_SiteType()                         {}
func (*ReplaceSpecType_IngressEgressGwAr) isReplaceSpecType_SiteType()                   {}
func (*ReplaceSpecType_VoltstackClusterAr) isReplaceSpecType_SiteType()                  {}
func (*ReplaceSpecType_AzureCred) isReplaceSpecType_Deployment()                         {}
func (*ReplaceSpecType_LogsStreamingDisabled) isReplaceSpecType_LogsReceiverChoice()     {}
func (*ReplaceSpecType_LogReceiver) isReplaceSpecType_LogsReceiverChoice()               {}
func (*ReplaceSpecType_NodesPerAz) isReplaceSpecType_WorkerNodes()                       {}
func (*ReplaceSpecType_TotalNodes) isReplaceSpecType_WorkerNodes()                       {}
func (*ReplaceSpecType_NoWorkerNodes) isReplaceSpecType_WorkerNodes()                    {}
func (*ReplaceSpecType_DefaultBlockedServices) isReplaceSpecType_BlockedServicesChoice() {}
func (*ReplaceSpecType_BlockAllServices) isReplaceSpecType_BlockedServicesChoice()       {}
func (*ReplaceSpecType_BlockedServices) isReplaceSpecType_BlockedServicesChoice()        {}

func (m *ReplaceSpecType) GetSiteType() isReplaceSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *ReplaceSpecType) GetDeployment() isReplaceSpecType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}
func (m *ReplaceSpecType) GetLogsReceiverChoice() isReplaceSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetWorkerNodes() isReplaceSpecType_WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}
func (m *ReplaceSpecType) GetBlockedServicesChoice() isReplaceSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetIngressGw() *AzureVnetIngressGwReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *ReplaceSpecType) GetIngressEgressGw() *AzureVnetIngressEgressGwReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *ReplaceSpecType) GetVoltstackCluster() *AzureVnetVoltstackClusterReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *ReplaceSpecType) GetIngressGwAr() *AzureVnetIngressGwARReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_IngressGwAr); ok {
		return x.IngressGwAr
	}
	return nil
}

func (m *ReplaceSpecType) GetIngressEgressGwAr() *AzureVnetIngressEgressGwARReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_IngressEgressGwAr); ok {
		return x.IngressEgressGwAr
	}
	return nil
}

func (m *ReplaceSpecType) GetVoltstackClusterAr() *AzureVnetVoltstackClusterARReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_VoltstackClusterAr); ok {
		return x.VoltstackClusterAr
	}
	return nil
}

func (m *ReplaceSpecType) GetAzureCred() *views.ObjectRefType {
	if x, ok := m.GetDeployment().(*ReplaceSpecType_AzureCred); ok {
		return x.AzureCred
	}
	return nil
}

func (m *ReplaceSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReplaceSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *ReplaceSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *ReplaceSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *ReplaceSpecType) GetNodesPerAz() uint32 {
	if x, ok := m.GetWorkerNodes().(*ReplaceSpecType_NodesPerAz); ok {
		return x.NodesPerAz
	}
	return 0
}

func (m *ReplaceSpecType) GetTotalNodes() uint32 {
	if x, ok := m.GetWorkerNodes().(*ReplaceSpecType_TotalNodes); ok {
		return x.TotalNodes
	}
	return 0
}

func (m *ReplaceSpecType) GetNoWorkerNodes() *schema.Empty {
	if x, ok := m.GetWorkerNodes().(*ReplaceSpecType_NoWorkerNodes); ok {
		return x.NoWorkerNodes
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *ReplaceSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomDns() *views.CustomDNS {
	if m != nil {
		return m.CustomDns
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_IngressGw)(nil),
		(*ReplaceSpecType_IngressEgressGw)(nil),
		(*ReplaceSpecType_VoltstackCluster)(nil),
		(*ReplaceSpecType_IngressGwAr)(nil),
		(*ReplaceSpecType_IngressEgressGwAr)(nil),
		(*ReplaceSpecType_VoltstackClusterAr)(nil),
		(*ReplaceSpecType_AzureCred)(nil),
		(*ReplaceSpecType_LogsStreamingDisabled)(nil),
		(*ReplaceSpecType_LogReceiver)(nil),
		(*ReplaceSpecType_NodesPerAz)(nil),
		(*ReplaceSpecType_TotalNodes)(nil),
		(*ReplaceSpecType_NoWorkerNodes)(nil),
		(*ReplaceSpecType_DefaultBlockedServices)(nil),
		(*ReplaceSpecType_BlockAllServices)(nil),
		(*ReplaceSpecType_BlockedServices)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get Azure VNet site"
// Shape of the Azure VNet site specification
type GetSpecType struct {
	ResourceGroup string `protobuf:"bytes,1,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// Types that are valid to be assigned to RegionChoice:
	//	*GetSpecType_AzureRegion
	//	*GetSpecType_AlternateRegion
	RegionChoice isGetSpecType_RegionChoice `protobuf_oneof:"region_choice"`
	Vnet         *views.AzureVnetChoiceType `protobuf:"bytes,3,opt,name=vnet,proto3" json:"vnet,omitempty"`
	// Types that are valid to be assigned to SiteType:
	//	*GetSpecType_IngressGw
	//	*GetSpecType_IngressEgressGw
	//	*GetSpecType_VoltstackCluster
	//	*GetSpecType_IngressGwAr
	//	*GetSpecType_IngressEgressGwAr
	//	*GetSpecType_VoltstackClusterAr
	SiteType isGetSpecType_SiteType `protobuf_oneof:"site_type"`
	// Types that are valid to be assigned to Deployment:
	//	*GetSpecType_AzureCred
	//	*GetSpecType_Assisted
	Deployment              isGetSpecType_Deployment `protobuf_oneof:"deployment"`
	MachineType             string                   `protobuf:"bytes,10,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	DiskSize                uint32                   `protobuf:"varint,16,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	VolterraSoftwareVersion string                   `protobuf:"bytes,12,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion  string                   `protobuf:"bytes,13,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	SshKey                  string                   `protobuf:"bytes,14,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	Address                 string                   `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates             *site.Coordinates        `protobuf:"bytes,19,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GetSpecType_LogsStreamingDisabled
	//	*GetSpecType_LogReceiver
	LogsReceiverChoice isGetSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	Tags               map[string]string                `protobuf:"bytes,40,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// site_state
	//
	// x-displayName: "Site State"
	// The operational phase of the site state machine.
	SiteState      site.SiteState                `protobuf:"varint,23,opt,name=site_state,json=siteState,proto3,enum=ves.io.schema.site.SiteState" json:"site_state,omitempty"`
	VipParamsPerAz []*site.PublishVIPParamsPerAz `protobuf:"bytes,25,rep,name=vip_params_per_az,json=vipParamsPerAz,proto3" json:"vip_params_per_az,omitempty"`
	// Types that are valid to be assigned to WorkerNodes:
	//	*GetSpecType_NodesPerAz
	//	*GetSpecType_TotalNodes
	//	*GetSpecType_NoWorkerNodes
	WorkerNodes isGetSpecType_WorkerNodes `protobuf_oneof:"worker_nodes"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*GetSpecType_DefaultBlockedServices
	//	*GetSpecType_BlockAllServices
	//	*GetSpecType_BlockedServices
	BlockedServicesChoice     isGetSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	OfflineSurvivabilityMode  *views.OfflineSurvivabilityModeType `protobuf:"bytes,42,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	UserModificationTimestamp *types.Timestamp                    `protobuf:"bytes,50,opt,name=user_modification_timestamp,json=userModificationTimestamp,proto3" json:"user_modification_timestamp,omitempty"`
	SuggestedAction           string                              `protobuf:"bytes,51,opt,name=suggested_action,json=suggestedAction,proto3" json:"suggested_action,omitempty"`
	ErrorDescription          string                              `protobuf:"bytes,52,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	SiteErrors                []*views.SiteError                  `protobuf:"bytes,53,rep,name=site_errors,json=siteErrors,proto3" json:"site_errors,omitempty"`
	ValidationState           views.ConfigValidationState         `protobuf:"varint,54,opt,name=validation_state,json=validationState,proto3,enum=ves.io.schema.views.ConfigValidationState" json:"validation_state,omitempty"`
	// custom_dns
	//
	// x-displayName: "Custom DNS"
	// custom dns configure to the CE site
	CustomDns     *views.CustomDNS       `protobuf:"bytes,55,opt,name=custom_dns,json=customDns,proto3" json:"custom_dns,omitempty"`
	CloudSiteInfo *AzureVnetSiteInfoType `protobuf:"bytes,1001,opt,name=cloud_site_info,json=cloudSiteInfo,proto3" json:"cloud_site_info,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c594b6b9dd0a0c2b, []int{25}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_RegionChoice interface {
	isGetSpecType_RegionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_SiteType interface {
	isGetSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_Deployment interface {
	isGetSpecType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_LogsReceiverChoice interface {
	isGetSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_WorkerNodes interface {
	isGetSpecType_WorkerNodes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_BlockedServicesChoice interface {
	isGetSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_AzureRegion struct {
	AzureRegion string `protobuf:"bytes,2,opt,name=azure_region,json=azureRegion,proto3,oneof" json:"azure_region,omitempty"`
}
type GetSpecType_AlternateRegion struct {
	AlternateRegion string `protobuf:"bytes,31,opt,name=alternate_region,json=alternateRegion,proto3,oneof" json:"alternate_region,omitempty"`
}
type GetSpecType_IngressGw struct {
	IngressGw *AzureVnetIngressGwType `protobuf:"bytes,5,opt,name=ingress_gw,json=ingressGw,proto3,oneof" json:"ingress_gw,omitempty"`
}
type GetSpecType_IngressEgressGw struct {
	IngressEgressGw *AzureVnetIngressEgressGwType `protobuf:"bytes,6,opt,name=ingress_egress_gw,json=ingressEgressGw,proto3,oneof" json:"ingress_egress_gw,omitempty"`
}
type GetSpecType_VoltstackCluster struct {
	VoltstackCluster *AzureVnetVoltstackClusterType `protobuf:"bytes,17,opt,name=voltstack_cluster,json=voltstackCluster,proto3,oneof" json:"voltstack_cluster,omitempty"`
}
type GetSpecType_IngressGwAr struct {
	IngressGwAr *AzureVnetIngressGwARType `protobuf:"bytes,32,opt,name=ingress_gw_ar,json=ingressGwAr,proto3,oneof" json:"ingress_gw_ar,omitempty"`
}
type GetSpecType_IngressEgressGwAr struct {
	IngressEgressGwAr *AzureVnetIngressEgressGwARType `protobuf:"bytes,33,opt,name=ingress_egress_gw_ar,json=ingressEgressGwAr,proto3,oneof" json:"ingress_egress_gw_ar,omitempty"`
}
type GetSpecType_VoltstackClusterAr struct {
	VoltstackClusterAr *AzureVnetVoltstackClusterARType `protobuf:"bytes,34,opt,name=voltstack_cluster_ar,json=voltstackClusterAr,proto3,oneof" json:"voltstack_cluster_ar,omitempty"`
}
type GetSpecType_AzureCred struct {
	AzureCred *views.ObjectRefType `protobuf:"bytes,8,opt,name=azure_cred,json=azureCred,proto3,oneof" json:"azure_cred,omitempty"`
}
type GetSpecType_Assisted struct {
	Assisted *schema.Empty `protobuf:"bytes,9,opt,name=assisted,proto3,oneof" json:"assisted,omitempty"`
}
type GetSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,21,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type GetSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,22,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type GetSpecType_NodesPerAz struct {
	NodesPerAz uint32 `protobuf:"varint,15,opt,name=nodes_per_az,json=nodesPerAz,proto3,oneof" json:"nodes_per_az,omitempty"`
}
type GetSpecType_TotalNodes struct {
	TotalNodes uint32 `protobuf:"varint,27,opt,name=total_nodes,json=totalNodes,proto3,oneof" json:"total_nodes,omitempty"`
}
type GetSpecType_NoWorkerNodes struct {
	NoWorkerNodes *schema.Empty `protobuf:"bytes,28,opt,name=no_worker_nodes,json=noWorkerNodes,proto3,oneof" json:"no_worker_nodes,omitempty"`
}
type GetSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,37,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type GetSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,44,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type GetSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,41,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}

func (*GetSpecType_AzureRegion) isGetSpecType_RegionChoice()                     {}
func (*GetSpecType_AlternateRegion) isGetSpecType_RegionChoice()                 {}
func (*GetSpecType_IngressGw) isGetSpecType_SiteType()                           {}
func (*GetSpecType_IngressEgressGw) isGetSpecType_SiteType()                     {}
func (*GetSpecType_VoltstackCluster) isGetSpecType_SiteType()                    {}
func (*GetSpecType_IngressGwAr) isGetSpecType_SiteType()                         {}
func (*GetSpecType_IngressEgressGwAr) isGetSpecType_SiteType()                   {}
func (*GetSpecType_VoltstackClusterAr) isGetSpecType_SiteType()                  {}
func (*GetSpecType_AzureCred) isGetSpecType_Deployment()                         {}
func (*GetSpecType_Assisted) isGetSpecType_Deployment()                          {}
func (*GetSpecType_LogsStreamingDisabled) isGetSpecType_LogsReceiverChoice()     {}
func (*GetSpecType_LogReceiver) isGetSpecType_LogsReceiverChoice()               {}
func (*GetSpecType_NodesPerAz) isGetSpecType_WorkerNodes()                       {}
func (*GetSpecType_TotalNodes) isGetSpecType_WorkerNodes()                       {}
func (*GetSpecType_NoWorkerNodes) isGetSpecType_WorkerNodes()                    {}
func (*GetSpecType_DefaultBlockedServices) isGetSpecType_BlockedServicesChoice() {}
func (*GetSpecType_BlockAllServices) isGetSpecType_BlockedServicesChoice()       {}
func (*GetSpecType_BlockedServices) isGetSpecType_BlockedServicesChoice()        {}

func (m *GetSpecType) GetRegionChoice() isGetSpecType_RegionChoice {
	if m != nil {
		return m.RegionChoice
	}
	return nil
}
func (m *GetSpecType) GetSiteType() isGetSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *GetSpecType) GetDeployment() isGetSpecType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}
func (m *GetSpecType) GetLogsReceiverChoice() isGetSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GetSpecType) GetWorkerNodes() isGetSpecType_WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}
func (m *GetSpecType) GetBlockedServicesChoice() isGetSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}

func (m *GetSpecType) GetResourceGroup() string {
	if m != nil {
		return m.ResourceGroup
	}
	return ""
}

func (m *GetSpecType) GetAzureRegion() string {
	if x, ok := m.GetRegionChoice().(*GetSpecType_AzureRegion); ok {
		return x.AzureRegion
	}
	return ""
}

func (m *GetSpecType) GetAlternateRegion() string {
	if x, ok := m.GetRegionChoice().(*GetSpecType_AlternateRegion); ok {
		return x.AlternateRegion
	}
	return ""
}

func (m *GetSpecType) GetVnet() *views.AzureVnetChoiceType {
	if m != nil {
		return m.Vnet
	}
	return nil
}

func (m *GetSpecType) GetIngressGw() *AzureVnetIngressGwType {
	if x, ok := m.GetSiteType().(*GetSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *GetSpecType) GetIngressEgressGw() *AzureVnetIngressEgressGwType {
	if x, ok := m.GetSiteType().(*GetSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *GetSpecType) GetVoltstackCluster() *AzureVnetVoltstackClusterType {
	if x, ok := m.GetSiteType().(*GetSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *GetSpecType) GetIngressGwAr() *AzureVnetIngressGwARType {
	if x, ok := m.GetSiteType().(*GetSpecType_IngressGwAr); ok {
		return x.IngressGwAr
	}
	return nil
}

func (m *GetSpecType) GetIngressEgressGwAr() *AzureVnetIngressEgressGwARType {
	if x, ok := m.GetSiteType().(*GetSpecType_IngressEgressGwAr); ok {
		return x.IngressEgressGwAr
	}
	return nil
}

func (m *GetSpecType) GetVoltstackClusterAr() *AzureVnetVoltstackClusterARType {
	if x, ok := m.GetSiteType().(*GetSpecType_VoltstackClusterAr); ok {
		return x.VoltstackClusterAr
	}
	return nil
}

func (m *GetSpecType) GetAzureCred() *views.ObjectRefType {
	if x, ok := m.GetDeployment().(*GetSpecType_AzureCred); ok {
		return x.AzureCred
	}
	return nil
}

func (m *GetSpecType) GetAssisted() *schema.Empty {
	if x, ok := m.GetDeployment().(*GetSpecType_Assisted); ok {
		return x.Assisted
	}
	return nil
}

func (m *GetSpecType) GetMachineType() string {
	if m != nil {
		return m.MachineType
	}
	return ""
}

func (m *GetSpecType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *GetSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GetSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GetSpecType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *GetSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GetSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GetSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GetSpecType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *GetSpecType) GetSiteState() site.SiteState {
	if m != nil {
		return m.SiteState
	}
	return site.ONLINE
}

func (m *GetSpecType) GetVipParamsPerAz() []*site.PublishVIPParamsPerAz {
	if m != nil {
		return m.VipParamsPerAz
	}
	return nil
}

func (m *GetSpecType) GetNodesPerAz() uint32 {
	if x, ok := m.GetWorkerNodes().(*GetSpecType_NodesPerAz); ok {
		return x.NodesPerAz
	}
	return 0
}

func (m *GetSpecType) GetTotalNodes() uint32 {
	if x, ok := m.GetWorkerNodes().(*GetSpecType_TotalNodes); ok {
		return x.TotalNodes
	}
	return 0
}

func (m *GetSpecType) GetNoWorkerNodes() *schema.Empty {
	if x, ok := m.GetWorkerNodes().(*GetSpecType_NoWorkerNodes); ok {
		return x.NoWorkerNodes
	}
	return nil
}

func (m *GetSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *GetSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *GetSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *GetSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *GetSpecType) GetUserModificationTimestamp() *types.Timestamp {
	if m != nil {
		return m.UserModificationTimestamp
	}
	return nil
}

func (m *GetSpecType) GetSuggestedAction() string {
	if m != nil {
		return m.SuggestedAction
	}
	return ""
}

func (m *GetSpecType) GetErrorDescription() string {
	if m != nil {
		return m.ErrorDescription
	}
	return ""
}

func (m *GetSpecType) GetSiteErrors() []*views.SiteError {
	if m != nil {
		return m.SiteErrors
	}
	return nil
}

func (m *GetSpecType) GetValidationState() views.ConfigValidationState {
	if m != nil {
		return m.ValidationState
	}
	return views.VALIDATION_STATE_NONE
}

func (m *GetSpecType) GetCustomDns() *views.CustomDNS {
	if m != nil {
		return m.CustomDns
	}
	return nil
}

func (m *GetSpecType) GetCloudSiteInfo() *AzureVnetSiteInfoType {
	if m != nil {
		return m.CloudSiteInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_AzureRegion)(nil),
		(*GetSpecType_AlternateRegion)(nil),
		(*GetSpecType_IngressGw)(nil),
		(*GetSpecType_IngressEgressGw)(nil),
		(*GetSpecType_VoltstackCluster)(nil),
		(*GetSpecType_IngressGwAr)(nil),
		(*GetSpecType_IngressEgressGwAr)(nil),
		(*GetSpecType_VoltstackClusterAr)(nil),
		(*GetSpecType_AzureCred)(nil),
		(*GetSpecType_Assisted)(nil),
		(*GetSpecType_LogsStreamingDisabled)(nil),
		(*GetSpecType_LogReceiver)(nil),
		(*GetSpecType_NodesPerAz)(nil),
		(*GetSpecType_TotalNodes)(nil),
		(*GetSpecType_NoWorkerNodes)(nil),
		(*GetSpecType_DefaultBlockedServices)(nil),
		(*GetSpecType_BlockAllServices)(nil),
		(*GetSpecType_BlockedServices)(nil),
	}
}

func init() {
	proto.RegisterType((*AzureHubVnetType)(nil), "ves.io.schema.views.azure_vnet_site.AzureHubVnetType")
	golang_proto.RegisterType((*AzureHubVnetType)(nil), "ves.io.schema.views.azure_vnet_site.AzureHubVnetType")
	proto.RegisterType((*VnetPeeringType)(nil), "ves.io.schema.views.azure_vnet_site.VnetPeeringType")
	golang_proto.RegisterType((*VnetPeeringType)(nil), "ves.io.schema.views.azure_vnet_site.VnetPeeringType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.azure_vnet_site.VnetPeeringType.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.azure_vnet_site.VnetPeeringType.LabelsEntry")
	proto.RegisterType((*AzureVnetIngressGwType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwType")
	golang_proto.RegisterType((*AzureVnetIngressGwType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwType")
	proto.RegisterType((*AzureVnetIngressGwARType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwARType")
	golang_proto.RegisterType((*AzureVnetIngressGwARType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwARType")
	proto.RegisterType((*ExpressRouteConfigType)(nil), "ves.io.schema.views.azure_vnet_site.ExpressRouteConfigType")
	golang_proto.RegisterType((*ExpressRouteConfigType)(nil), "ves.io.schema.views.azure_vnet_site.ExpressRouteConfigType")
	proto.RegisterType((*ExpressRouteOtherSubscriptionConnection)(nil), "ves.io.schema.views.azure_vnet_site.ExpressRouteOtherSubscriptionConnection")
	golang_proto.RegisterType((*ExpressRouteOtherSubscriptionConnection)(nil), "ves.io.schema.views.azure_vnet_site.ExpressRouteOtherSubscriptionConnection")
	proto.RegisterType((*ExpressRouteConnectionType)(nil), "ves.io.schema.views.azure_vnet_site.ExpressRouteConnectionType")
	golang_proto.RegisterType((*ExpressRouteConnectionType)(nil), "ves.io.schema.views.azure_vnet_site.ExpressRouteConnectionType")
	proto.RegisterType((*AzureVnetIngressEgressGwType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwType")
	golang_proto.RegisterType((*AzureVnetIngressEgressGwType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwType")
	proto.RegisterType((*AzureVnetIngressEgressGwARType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwARType")
	golang_proto.RegisterType((*AzureVnetIngressEgressGwARType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwARType")
	proto.RegisterType((*AzureVnetVoltstackClusterType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterType")
	golang_proto.RegisterType((*AzureVnetVoltstackClusterType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterType")
	proto.RegisterType((*AzureVnetVoltstackClusterARType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterARType")
	golang_proto.RegisterType((*AzureVnetVoltstackClusterARType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterARType")
	proto.RegisterType((*AzureVnetIngressGwReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwReplaceType")
	golang_proto.RegisterType((*AzureVnetIngressGwReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwReplaceType")
	proto.RegisterType((*AzureVnetIngressGwARReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwARReplaceType")
	golang_proto.RegisterType((*AzureVnetIngressGwARReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwARReplaceType")
	proto.RegisterType((*VnetIpPrefixesType)(nil), "ves.io.schema.views.azure_vnet_site.VnetIpPrefixesType")
	golang_proto.RegisterType((*VnetIpPrefixesType)(nil), "ves.io.schema.views.azure_vnet_site.VnetIpPrefixesType")
	proto.RegisterType((*AzureVnetIngressEgressGwReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwReplaceType")
	golang_proto.RegisterType((*AzureVnetIngressEgressGwReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwReplaceType")
	proto.RegisterType((*AzureVnetIngressEgressGwARReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwARReplaceType")
	golang_proto.RegisterType((*AzureVnetIngressEgressGwARReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwARReplaceType")
	proto.RegisterType((*AzureVnetVoltstackClusterReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterReplaceType")
	golang_proto.RegisterType((*AzureVnetVoltstackClusterReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterReplaceType")
	proto.RegisterType((*AzureVnetVoltstackClusterARReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterARReplaceType")
	golang_proto.RegisterType((*AzureVnetVoltstackClusterARReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterARReplaceType")
	proto.RegisterType((*AzureVnetSiteInfoType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetSiteInfoType")
	golang_proto.RegisterType((*AzureVnetSiteInfoType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetSiteInfoType")
	proto.RegisterType((*VNETInfoType)(nil), "ves.io.schema.views.azure_vnet_site.VNETInfoType")
	golang_proto.RegisterType((*VNETInfoType)(nil), "ves.io.schema.views.azure_vnet_site.VNETInfoType")
	proto.RegisterType((*ExpressRouteInfo)(nil), "ves.io.schema.views.azure_vnet_site.ExpressRouteInfo")
	golang_proto.RegisterType((*ExpressRouteInfo)(nil), "ves.io.schema.views.azure_vnet_site.ExpressRouteInfo")
	proto.RegisterType((*NodeInstanceNameType)(nil), "ves.io.schema.views.azure_vnet_site.NodeInstanceNameType")
	golang_proto.RegisterType((*NodeInstanceNameType)(nil), "ves.io.schema.views.azure_vnet_site.NodeInstanceNameType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.azure_vnet_site.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.azure_vnet_site.GlobalSpecType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.azure_vnet_site.GlobalSpecType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.azure_vnet_site.GlobalSpecType.TagsEntry")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.azure_vnet_site.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.azure_vnet_site.CreateSpecType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.azure_vnet_site.CreateSpecType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.azure_vnet_site.CreateSpecType.TagsEntry")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.azure_vnet_site.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.azure_vnet_site.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.azure_vnet_site.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.azure_vnet_site.GetSpecType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.azure_vnet_site.GetSpecType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.azure_vnet_site.GetSpecType.TagsEntry")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/azure_vnet_site/types.proto", fileDescriptor_c594b6b9dd0a0c2b)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/azure_vnet_site/types.proto", fileDescriptor_c594b6b9dd0a0c2b)
}

var fileDescriptor_c594b6b9dd0a0c2b = []byte{
	// 7033 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x4b, 0x70, 0x1b, 0xd7,
	0x99, 0xae, 0x0e, 0x00, 0x82, 0xe0, 0xcf, 0x57, 0xf3, 0xf0, 0x05, 0x91, 0x12, 0x04, 0x51, 0x2f,
	0x52, 0x6a, 0x91, 0x04, 0xc0, 0xb7, 0x63, 0x59, 0x84, 0x24, 0x8b, 0xa4, 0xac, 0x87, 0x9b, 0x92,
	0x1c, 0xa7, 0xe2, 0x8b, 0xdb, 0x04, 0x0e, 0xc1, 0x0e, 0xc1, 0x6e, 0xa4, 0xbb, 0x41, 0x9a, 0x4a,
	0x94, 0xa4, 0x94, 0xca, 0xad, 0x9b, 0xfb, 0xa8, 0x7b, 0xaf, 0x6e, 0xdd, 0xba, 0x33, 0x9e, 0x59,
	0x64, 0x33, 0x55, 0x29, 0xaf, 0x52, 0x35, 0x59, 0x05, 0x5e, 0xa8, 0x54, 0x35, 0x55, 0x19, 0xcd,
	0x2c, 0xb4, 0x1b, 0x97, 0x57, 0xb1, 0x5c, 0x35, 0x71, 0x56, 0xe3, 0x9a, 0xc9, 0x22, 0xa5, 0x59,
	0x78, 0xea, 0x9c, 0x7e, 0xa0, 0xbb, 0xd1, 0x00, 0x29, 0x92, 0xb2, 0x1d, 0x1b, 0x1b, 0x4a, 0xe8,
	0xf3, 0x3f, 0xce, 0xf3, 0x3f, 0xdf, 0xff, 0xff, 0xa7, 0xfb, 0xc0, 0xd8, 0x26, 0xd1, 0x46, 0x25,
	0x65, 0x4c, 0xcb, 0xae, 0x91, 0x0d, 0x71, 0x6c, 0x53, 0x22, 0x5b, 0xda, 0x98, 0x78, 0xaf, 0xa4,
	0x92, 0xcc, 0xa6, 0x4c, 0xf4, 0x8c, 0x26, 0xe9, 0x64, 0x4c, 0xdf, 0x2e, 0x12, 0x6d, 0xb4, 0xa8,
	0x2a, 0xba, 0x82, 0x4f, 0x18, 0x0c, 0xa3, 0x06, 0xc3, 0x28, 0x63, 0x18, 0xf5, 0x30, 0x0c, 0x9c,
	0xcf, 0x4b, 0xfa, 0x5a, 0x69, 0x65, 0x34, 0xab, 0x6c, 0x8c, 0xe5, 0x95, 0xbc, 0x32, 0xc6, 0x78,
	0x57, 0x4a, 0xab, 0xec, 0x17, 0xfb, 0xc1, 0xfe, 0x67, 0xc8, 0x1c, 0x38, 0x96, 0x57, 0x94, 0x7c,
	0x81, 0x54, 0xa8, 0x74, 0x69, 0x83, 0x68, 0xba, 0xb8, 0x51, 0xb4, 0x08, 0xdc, 0xb5, 0x5c, 0x2d,
	0x10, 0xa2, 0x3b, 0x6b, 0x35, 0x70, 0xd6, 0x4d, 0x20, 0x13, 0x7d, 0x4b, 0x51, 0xd7, 0x33, 0xab,
	0x92, 0x4a, 0xb6, 0xc4, 0x42, 0xc1, 0x45, 0x3b, 0xe8, 0xa6, 0x55, 0x8a, 0xba, 0xa4, 0xc8, 0x56,
	0x61, 0xcc, 0x5d, 0xe8, 0x6d, 0xfe, 0xc0, 0x61, 0x77, 0xb9, 0xb3, 0xe8, 0x88, 0xa7, 0x2b, 0xc5,
	0x82, 0x94, 0x13, 0x75, 0x62, 0x96, 0xc6, 0xab, 0x3b, 0x3a, 0xe3, 0x56, 0x7d, 0xd2, 0x6f, 0x28,
	0x68, 0x05, 0x32, 0x4e, 0x2d, 0x67, 0x7c, 0xa9, 0x74, 0x45, 0x15, 0xf3, 0x6e, 0xc2, 0x63, 0x7e,
	0x84, 0x0e, 0x82, 0xa1, 0x7f, 0x09, 0x00, 0x37, 0x4f, 0x07, 0x6e, 0xa1, 0xb4, 0x72, 0x57, 0x26,
	0xfa, 0xed, 0xed, 0x22, 0xc1, 0xeb, 0xd0, 0xaa, 0x15, 0x95, 0x75, 0x63, 0x30, 0xb5, 0x28, 0x8a,
	0x07, 0x87, 0x5b, 0x93, 0x13, 0xa3, 0xbb, 0x18, 0xf4, 0x51, 0x2a, 0xe3, 0x16, 0x21, 0xaa, 0x24,
	0xe7, 0xa9, 0xa8, 0x74, 0xcf, 0x6f, 0xfe, 0xf0, 0x28, 0xd8, 0xf4, 0x10, 0x05, 0xb8, 0x9c, 0xf5,
	0xbf, 0x28, 0x12, 0x80, 0x89, 0xa7, 0xb4, 0x1a, 0x7e, 0x03, 0xfa, 0xc8, 0xbb, 0x45, 0x95, 0x68,
	0x5a, 0x46, 0x55, 0x4a, 0x3a, 0xc9, 0xe4, 0x24, 0x4d, 0x5c, 0x29, 0x90, 0x5c, 0x34, 0x18, 0x47,
	0xc3, 0xad, 0xc9, 0x1e, 0x8f, 0xde, 0x2b, 0x1b, 0x45, 0x7d, 0x7b, 0xe1, 0x90, 0xd0, 0x63, 0x72,
	0x09, 0x94, 0xe9, 0xb2, 0xc9, 0x83, 0xbf, 0x0f, 0xbd, 0x6e, 0x69, 0x44, 0x36, 0x84, 0x85, 0x98,
	0xb0, 0x57, 0x76, 0xd5, 0x88, 0x2b, 0x0e, 0xc9, 0x97, 0x14, 0x79, 0x55, 0x62, 0x6d, 0x59, 0x38,
	0x24, 0x74, 0x3b, 0x75, 0x5e, 0x31, 0x24, 0xa7, 0xcf, 0x40, 0x8f, 0x5b, 0x65, 0x76, 0x4d, 0x91,
	0xb2, 0x04, 0x77, 0x3e, 0x2a, 0xa3, 0xe0, 0xd3, 0x32, 0x0a, 0x3c, 0x2b, 0xa3, 0x60, 0x8a, 0x9f,
	0x58, 0x0a, 0x45, 0x02, 0x5c, 0x70, 0xe8, 0x7f, 0x84, 0xa0, 0xd3, 0xd3, 0x4b, 0x78, 0x0a, 0x42,
	0x54, 0x7b, 0x14, 0xb1, 0x4a, 0x0e, 0xf9, 0x56, 0x92, 0x8d, 0x92, 0x35, 0x44, 0x02, 0xa3, 0xc7,
	0x67, 0x21, 0x24, 0x96, 0x74, 0x65, 0x87, 0x9e, 0x62, 0x34, 0x78, 0x14, 0xc2, 0x1b, 0xa2, 0x5c,
	0x12, 0x0b, 0x66, 0x57, 0xd4, 0xa2, 0x36, 0xa9, 0x70, 0x01, 0xc2, 0x05, 0x71, 0x85, 0x14, 0xb4,
	0x68, 0x13, 0x1b, 0xff, 0x8b, 0x7b, 0x19, 0xff, 0xd1, 0x37, 0x98, 0x88, 0x2b, 0xb2, 0xae, 0x6e,
	0xa7, 0xf1, 0x7b, 0x1f, 0xa0, 0x20, 0x20, 0xf4, 0xec, 0x77, 0x7f, 0x17, 0x0c, 0xff, 0xb7, 0x0f,
	0x50, 0x20, 0x72, 0x48, 0x30, 0x75, 0x0c, 0xcc, 0x42, 0xab, 0x83, 0x14, 0x73, 0x10, 0x5c, 0x27,
	0xdb, 0xac, 0x3f, 0x5a, 0x04, 0xfa, 0x5f, 0xdc, 0x03, 0x4d, 0x9b, 0x62, 0xa1, 0x44, 0xa2, 0x01,
	0xf6, 0xcc, 0xf8, 0x31, 0x17, 0x98, 0x41, 0x73, 0x0f, 0xd1, 0x93, 0x32, 0xfa, 0x9f, 0x08, 0xce,
	0x40, 0x87, 0x40, 0x34, 0xa5, 0xa4, 0x66, 0x49, 0xfc, 0xaa, 0xaa, 0x94, 0x8a, 0x03, 0xbd, 0xd0,
	0x4d, 0x6b, 0x36, 0xaa, 0x9a, 0x8f, 0x33, 0x79, 0xfa, 0x18, 0xa2, 0x10, 0xba, 0x21, 0x6e, 0x90,
	0x01, 0x0e, 0x3a, 0x58, 0x31, 0xab, 0xbd, 0x2c, 0x6e, 0x10, 0x48, 0x42, 0x33, 0x1d, 0x5a, 0x49,
	0xce, 0x9f, 0x3d, 0x03, 0xa7, 0xa0, 0xcb, 0xe8, 0xde, 0x64, 0xcb, 0x7c, 0x49, 0x57, 0x36, 0x44,
	0x5d, 0xca, 0x02, 0x67, 0xf5, 0x62, 0x32, 0x7c, 0x9d, 0xfd, 0x0b, 0x3d, 0x10, 0x36, 0x6a, 0xbe,
	0x04, 0x56, 0x8f, 0x71, 0x4d, 0xe9, 0xe3, 0xd0, 0xa1, 0x1a, 0x92, 0x76, 0x98, 0x0e, 0xff, 0x25,
	0x04, 0x7d, 0xf6, 0xd0, 0x2e, 0xca, 0x79, 0x3a, 0x8f, 0xae, 0x6e, 0xb1, 0x59, 0xf1, 0x5d, 0x88,
	0x88, 0xf7, 0x32, 0xb2, 0x92, 0x23, 0xd6, 0x1a, 0x4c, 0xd6, 0x9f, 0x19, 0x37, 0x65, 0xb2, 0x28,
	0xeb, 0x44, 0x5d, 0x15, 0xb3, 0xe4, 0x86, 0x92, 0x23, 0x6c, 0x05, 0xb6, 0xd3, 0x75, 0x17, 0x79,
	0x88, 0x9a, 0xce, 0x06, 0x13, 0x7c, 0x4a, 0x68, 0x16, 0xef, 0xd1, 0x22, 0x0d, 0xe7, 0x01, 0x1b,
	0x83, 0x97, 0x25, 0xaa, 0x2e, 0xad, 0x4a, 0x24, 0x97, 0x59, 0xdb, 0x32, 0x7a, 0x37, 0x3d, 0xfb,
	0x51, 0x19, 0x75, 0xb3, 0xd2, 0xf3, 0x2b, 0xdb, 0x4a, 0xe1, 0xfc, 0xa6, 0x52, 0xd0, 0x37, 0x88,
	0xb6, 0xf6, 0xa7, 0x32, 0x3a, 0x44, 0xc5, 0x1d, 0x56, 0xfb, 0xa3, 0x17, 0x05, 0x3f, 0x0a, 0x81,
	0x63, 0x0f, 0x2f, 0x59, 0x32, 0x17, 0xb6, 0xf0, 0x8f, 0xe1, 0x48, 0x91, 0xa8, 0xab, 0x8a, 0xba,
	0x21, 0xca, 0x59, 0xba, 0x20, 0xd7, 0xe8, 0xbf, 0x1b, 0x44, 0xd6, 0x33, 0x1b, 0x4a, 0x8e, 0x44,
	0xcf, 0xb3, 0xe9, 0x98, 0xf2, 0x6d, 0xda, 0xad, 0x0a, 0xe3, 0x95, 0x0a, 0xdf, 0x75, 0xab, 0x6d,
	0x91, 0x47, 0x65, 0x84, 0x3e, 0x2b, 0x23, 0x24, 0x0c, 0x14, 0x6b, 0x52, 0x62, 0x05, 0xfa, 0xc4,
	0x6c, 0x96, 0x14, 0x88, 0x2a, 0xea, 0x24, 0x97, 0x31, 0xf7, 0x05, 0x49, 0xce, 0x47, 0x47, 0x99,
	0xea, 0x51, 0xff, 0x5e, 0xad, 0xb0, 0xdc, 0xb0, 0x39, 0x3c, 0x5a, 0x7b, 0x45, 0x3f, 0xa2, 0xb9,
	0xf3, 0x8f, 0xcb, 0x68, 0x04, 0xda, 0xa0, 0xc9, 0xe8, 0xe9, 0x60, 0x92, 0x4f, 0xc0, 0x61, 0xe0,
	0xe6, 0x73, 0x9b, 0xb4, 0x5e, 0xb9, 0xf8, 0x4d, 0xc3, 0xe4, 0xe3, 0xa6, 0x89, 0x49, 0x7e, 0x62,
	0x6a, 0x29, 0x14, 0x09, 0x72, 0xa1, 0xa1, 0x3f, 0x06, 0x21, 0x5a, 0x3d, 0x11, 0xe6, 0x05, 0x36,
	0x15, 0x16, 0x20, 0x44, 0xe7, 0x81, 0x69, 0x20, 0x26, 0x5e, 0x6c, 0x1a, 0x18, 0x32, 0x04, 0x26,
	0xa1, 0x31, 0xec, 0x5f, 0xb1, 0x61, 0x7f, 0xd8, 0x0a, 0x7d, 0xfe, 0xfb, 0x0d, 0xde, 0x82, 0xd6,
	0xac, 0x22, 0xcb, 0x24, 0xcb, 0xd8, 0x4c, 0x13, 0xf0, 0xda, 0x5e, 0x76, 0x30, 0x53, 0x86, 0x67,
	0x47, 0x8e, 0x58, 0xff, 0x8b, 0x20, 0xc1, 0xa9, 0x09, 0xcf, 0x42, 0x9b, 0xb6, 0x5e, 0xca, 0x68,
	0xba, 0x28, 0xe7, 0x44, 0x35, 0x17, 0x0d, 0xd7, 0xdd, 0x30, 0x5a, 0xb5, 0xf5, 0xd2, 0xb2, 0x49,
	0x8a, 0xa7, 0x81, 0xfe, 0xcc, 0x10, 0x35, 0xbf, 0x95, 0x10, 0xef, 0x45, 0x9b, 0xeb, 0x72, 0x82,
	0xb6, 0x5e, 0xba, 0x62, 0x50, 0xe2, 0x39, 0x68, 0xa7, 0x8c, 0x6b, 0x52, 0x7e, 0x2d, 0x43, 0x07,
	0x35, 0x1a, 0xd9, 0x51, 0xe9, 0x82, 0x94, 0x5f, 0xa3, 0x33, 0xc5, 0xa9, 0x34, 0x29, 0xde, 0x8b,
	0xb6, 0xec, 0x4a, 0x69, 0x52, 0xbc, 0x87, 0xdf, 0x86, 0x8e, 0xbc, 0xa8, 0x93, 0x2d, 0x71, 0x3b,
	0xa3, 0x95, 0x56, 0xe8, 0x0e, 0x0c, 0x8c, 0xb7, 0x8e, 0x9d, 0x5d, 0x66, 0x74, 0x97, 0x98, 0x4d,
	0x7f, 0x4b, 0xd2, 0xd7, 0xe8, 0xd6, 0xc0, 0x96, 0x57, 0xbb, 0x29, 0xc9, 0x20, 0xc0, 0x2b, 0xd0,
	0x6d, 0xa0, 0x01, 0x8d, 0xa8, 0x9b, 0x44, 0xb5, 0xe4, 0xb7, 0xee, 0x59, 0x7e, 0x17, 0x13, 0xb7,
	0xcc, 0xa4, 0x99, 0x3a, 0x12, 0x10, 0xa1, 0xfb, 0x53, 0x46, 0xd4, 0xe4, 0x68, 0x7b, 0x9d, 0x46,
	0x23, 0xa1, 0x99, 0xd2, 0xcd, 0x6b, 0x32, 0xce, 0x02, 0x64, 0x4b, 0x9a, 0xae, 0x6c, 0x30, 0xa6,
	0x8e, 0x38, 0x1a, 0x6e, 0x4f, 0xa7, 0xe9, 0x3c, 0x78, 0xf5, 0xec, 0x2b, 0xd1, 0xcf, 0x3f, 0x0f,
	0xc6, 0xd1, 0x52, 0x6a, 0x6a, 0x72, 0x32, 0x31, 0xc9, 0xd3, 0xbf, 0xd3, 0xec, 0xef, 0x0c, 0xfb,
	0x3b, 0x4b, 0xff, 0x26, 0xc7, 0xf9, 0x99, 0xf1, 0xe9, 0x09, 0xfa, 0x67, 0x92, 0x4f, 0x24, 0xc7,
	0xa7, 0xa7, 0xf8, 0x64, 0x6a, 0x62, 0x72, 0x6a, 0x01, 0x09, 0x2d, 0x86, 0x5c, 0xaa, 0xe4, 0x1d,
	0x38, 0xc6, 0x20, 0xab, 0x4a, 0xf2, 0x92, 0xa6, 0xab, 0x22, 0x9d, 0x55, 0x19, 0x85, 0xf6, 0x82,
	0x44, 0xed, 0x12, 0xed, 0x07, 0xae, 0x4e, 0x75, 0x03, 0xc2, 0x11, 0xca, 0x2e, 0x38, 0xb8, 0x6f,
	0x6e, 0x12, 0x75, 0xd1, 0xe4, 0xc5, 0xf7, 0xe1, 0x64, 0x0d, 0xf1, 0x2e, 0x1c, 0x16, 0xc5, 0x4c,
	0xc7, 0x29, 0xdf, 0xbe, 0xbe, 0x54, 0x50, 0x4a, 0xb9, 0x37, 0x24, 0x79, 0x7d, 0xfe, 0xf2, 0x0d,
	0xb6, 0x2c, 0x42, 0xbf, 0xfa, 0x00, 0xa1, 0x85, 0x80, 0x10, 0xf7, 0x53, 0xed, 0x5c, 0x4e, 0xf8,
	0x4d, 0x38, 0x2c, 0xe6, 0x36, 0xa9, 0xa5, 0xd3, 0x48, 0x46, 0x57, 0x32, 0xce, 0x61, 0x8e, 0xf6,
	0xd4, 0x69, 0x57, 0x50, 0xe8, 0xb3, 0x19, 0x6f, 0x2b, 0x42, 0x65, 0x38, 0xf1, 0x3b, 0x10, 0xcf,
	0x29, 0x19, 0x59, 0xd1, 0x33, 0xb5, 0x25, 0xf7, 0xd6, 0x95, 0x3c, 0x98, 0x53, 0x6e, 0x28, 0xfa,
	0xbc, 0xaf, 0xf8, 0x39, 0xf9, 0x71, 0x19, 0x7d, 0x0f, 0xe2, 0x30, 0x58, 0x31, 0x05, 0x5a, 0xfc,
	0xb6, 0x12, 0xbf, 0x7b, 0x83, 0xe8, 0xf1, 0xab, 0xc6, 0xb4, 0xc5, 0x28, 0x01, 0xc3, 0x70, 0xd4,
	0xf9, 0x28, 0x3e, 0x2f, 0xe7, 0xe2, 0x4c, 0x4e, 0xdc, 0xac, 0x67, 0xf3, 0x24, 0x9f, 0x18, 0xe7,
	0x13, 0x09, 0x38, 0xe2, 0x63, 0xd6, 0x22, 0x89, 0x24, 0x9f, 0x98, 0xe4, 0x13, 0xb3, 0xe9, 0x53,
	0x40, 0x17, 0x99, 0x05, 0x7c, 0xfa, 0x1f, 0x95, 0x51, 0xf8, 0x69, 0x19, 0x35, 0x3d, 0x2b, 0xa3,
	0xe6, 0x29, 0x7e, 0x9a, 0x9f, 0xe1, 0x67, 0x3f, 0x2d, 0x23, 0x94, 0x3e, 0x01, 0x20, 0x6a, 0xb2,
	0x45, 0xd6, 0xfb, 0xa8, 0x8c, 0xda, 0x9f, 0x96, 0x51, 0xdb, 0xb3, 0x32, 0x6a, 0x4a, 0xa4, 0xf8,
	0xc4, 0x04, 0x23, 0x3a, 0x0f, 0x3d, 0x96, 0x69, 0xda, 0x94, 0xf4, 0x6d, 0xcb, 0x5d, 0x62, 0xe4,
	0xdc, 0xd3, 0x32, 0xea, 0x64, 0xe4, 0x53, 0x7c, 0x62, 0x86, 0x91, 0x9f, 0x86, 0xae, 0x8a, 0xeb,
	0x62, 0x74, 0xa0, 0x86, 0xbb, 0x1e, 0x95, 0x51, 0xcf, 0xd3, 0x32, 0xea, 0xa6, 0xb4, 0xc9, 0x71,
	0x3e, 0x99, 0x58, 0x0a, 0x45, 0x9a, 0xb8, 0xf0, 0x52, 0x28, 0xd2, 0xc6, 0xb5, 0x2f, 0x85, 0x22,
	0x5d, 0x1c, 0x5e, 0x0a, 0x45, 0x3a, 0x39, 0x6e, 0x29, 0x14, 0xe9, 0xe6, 0x7a, 0x86, 0xfe, 0x1a,
	0xc1, 0x19, 0xe7, 0x98, 0xdf, 0xd4, 0xd7, 0xd8, 0xa2, 0xd3, 0xb2, 0xaa, 0xc4, 0xf4, 0x57, 0x3a,
	0x12, 0x8f, 0x00, 0x64, 0x25, 0x35, 0x5b, 0x92, 0xf4, 0x8c, 0x94, 0x33, 0x10, 0x6b, 0x1a, 0x98,
	0x65, 0x55, 0x83, 0xd1, 0x9f, 0x84, 0x84, 0x16, 0xb3, 0x74, 0x31, 0x87, 0x5f, 0x87, 0x0e, 0xb1,
	0xa4, 0xaf, 0x29, 0xaa, 0x74, 0x8f, 0xe4, 0x32, 0x14, 0xe0, 0x06, 0xd8, 0xa0, 0x1e, 0xf6, 0x0c,
	0xea, 0x32, 0xc9, 0xaa, 0x06, 0xce, 0x4f, 0x87, 0x9e, 0xd2, 0x0d, 0xa7, 0xbd, 0xc2, 0x76, 0x8d,
	0x6c, 0x0f, 0xfd, 0x73, 0x10, 0x06, 0x6a, 0x5b, 0x78, 0x3c, 0x07, 0x91, 0x0d, 0xa2, 0x8b, 0x39,
	0x51, 0x17, 0x4d, 0xc0, 0x10, 0xf3, 0x28, 0xb8, 0x4e, 0x34, 0x4d, 0xcc, 0x93, 0xeb, 0x44, 0x17,
	0x99, 0x6d, 0xb1, 0xe9, 0xf1, 0x39, 0x57, 0x6b, 0xc2, 0xde, 0xd6, 0x2c, 0x1c, 0x72, 0xb6, 0xe7,
	0x3e, 0x60, 0x85, 0xf6, 0x0c, 0x35, 0x6e, 0x76, 0xd7, 0x98, 0xee, 0xc5, 0x1b, 0x2f, 0xbc, 0x4f,
	0xd5, 0xe9, 0xe4, 0x85, 0x43, 0x42, 0x97, 0xe2, 0x2d, 0xc6, 0x31, 0x08, 0x6f, 0x11, 0x29, 0xbf,
	0xa6, 0x47, 0x9b, 0x98, 0x1d, 0x0b, 0x7f, 0x54, 0x46, 0x81, 0xc4, 0xb8, 0x60, 0x3e, 0x9d, 0xfb,
	0xef, 0xe8, 0x5f, 0x2f, 0xa0, 0xd4, 0x93, 0x32, 0x7a, 0x80, 0xa0, 0xdf, 0xc4, 0xfc, 0x9d, 0xd0,
	0x6e, 0xb5, 0x75, 0x94, 0x41, 0x7e, 0x0c, 0xe1, 0xb7, 0x18, 0xf9, 0x40, 0xc4, 0x12, 0x07, 0xcb,
	0xd0, 0x73, 0xc9, 0x68, 0x64, 0xdc, 0xa9, 0x70, 0xe8, 0x15, 0xbf, 0xf6, 0x62, 0xcc, 0x2a, 0xee,
	0xa2, 0x1c, 0xe8, 0x5a, 0x96, 0xe8, 0xaa, 0x71, 0x3c, 0x4a, 0x9f, 0x86, 0x6e, 0x27, 0x9b, 0xd3,
	0x2d, 0x08, 0x5b, 0x6e, 0xc1, 0x14, 0x73, 0x0b, 0x82, 0x5c, 0xc8, 0x74, 0x0e, 0x7e, 0xd6, 0x07,
	0x47, 0xbc, 0x98, 0xf0, 0xca, 0xbe, 0x5c, 0x84, 0xdb, 0x5b, 0xca, 0xee, 0x5d, 0x84, 0x34, 0x74,
	0xc9, 0x8a, 0x05, 0x9c, 0x32, 0x45, 0xa5, 0x20, 0x65, 0xad, 0x29, 0x5b, 0x6b, 0x77, 0xed, 0x94,
	0x15, 0x13, 0x11, 0xdd, 0x62, 0xe4, 0x78, 0x1b, 0xfa, 0x45, 0xba, 0x76, 0x89, 0x5b, 0x8e, 0x44,
	0x34, 0x73, 0xaf, 0x9d, 0xf5, 0x48, 0xf2, 0x86, 0x6d, 0x46, 0xe7, 0x19, 0xbb, 0x53, 0xaa, 0x44,
	0x34, 0x87, 0xcd, 0x3e, 0x44, 0xf1, 0x98, 0x0f, 0x09, 0xfe, 0x7f, 0x08, 0x8e, 0x9b, 0xba, 0x4d,
	0xf4, 0x99, 0xb3, 0xa5, 0x56, 0x6a, 0x11, 0x67, 0xb5, 0x48, 0xef, 0xae, 0x16, 0x26, 0xc6, 0xcc,
	0xbd, 0x6e, 0x3e, 0xf6, 0xad, 0x4e, 0x4c, 0xac, 0x4b, 0x8b, 0x2f, 0x02, 0x27, 0x2b, 0x99, 0x55,
	0x45, 0xdd, 0x12, 0xd5, 0x5c, 0xa6, 0xa8, 0x2a, 0xef, 0x6e, 0xd7, 0xf5, 0xc9, 0x91, 0xd0, 0x21,
	0x2b, 0xaf, 0x1b, 0xe4, 0xb7, 0x28, 0x35, 0xfe, 0x29, 0x82, 0xa3, 0x66, 0xcb, 0x5c, 0x62, 0x2a,
	0xad, 0x32, 0x30, 0xd0, 0x85, 0xdd, 0xb5, 0xca, 0x29, 0xdb, 0xd9, 0xa2, 0x05, 0x24, 0x0c, 0x88,
	0x35, 0x29, 0xf0, 0x75, 0xe8, 0x77, 0x6b, 0x17, 0x0b, 0x05, 0x65, 0x8b, 0xfe, 0xad, 0xbb, 0x0d,
	0x22, 0xa1, 0x67, 0xd5, 0x21, 0x6e, 0x9e, 0x32, 0xcd, 0x17, 0x0a, 0xf8, 0x07, 0xbe, 0x9e, 0x49,
	0x84, 0x99, 0xa0, 0xeb, 0x1f, 0x95, 0xd1, 0x51, 0x87, 0xdf, 0xb1, 0x51, 0x2a, 0xe8, 0xd2, 0x79,
	0x59, 0xca, 0x56, 0xf9, 0x28, 0x27, 0xd4, 0xe3, 0xd1, 0x8b, 0x42, 0x7d, 0x5a, 0x1f, 0x6f, 0x65,
	0x19, 0xfa, 0x65, 0x25, 0x23, 0xc9, 0x9a, 0x94, 0x23, 0x14, 0xf8, 0xea, 0x52, 0xd6, 0xdc, 0x3d,
	0xa2, 0x6d, 0xb5, 0xdb, 0x92, 0x0e, 0x51, 0x9f, 0x60, 0x21, 0x20, 0xf4, 0xc8, 0xca, 0x22, 0xe3,
	0x5d, 0x66, 0xac, 0x82, 0xb1, 0xef, 0xe4, 0xa1, 0xc7, 0x57, 0xa2, 0x81, 0xd5, 0xce, 0xfb, 0xae,
	0x54, 0x6a, 0x38, 0x9c, 0x42, 0xde, 0x90, 0x34, 0x73, 0x27, 0x30, 0x55, 0x61, 0xa9, 0x5a, 0xd1,
	0x1d, 0x88, 0xca, 0x4a, 0x46, 0x29, 0xe9, 0x3e, 0xca, 0x3a, 0x77, 0xac, 0x7e, 0x50, 0xe8, 0x95,
	0x95, 0x9b, 0x06, 0xb3, 0x4b, 0xac, 0x04, 0xbd, 0xfe, 0x32, 0xb9, 0xbd, 0x37, 0x20, 0x28, 0x74,
	0x2b, 0x3e, 0xaa, 0x0c, 0x53, 0x93, 0x2f, 0x28, 0x2b, 0x62, 0xc1, 0xb2, 0x14, 0x26, 0x80, 0xf3,
	0x9f, 0x45, 0x21, 0x6a, 0x6a, 0xae, 0x32, 0x7a, 0x73, 0xdd, 0xe3, 0x55, 0xe8, 0x76, 0x0b, 0xc8,
	0x14, 0x24, 0x4d, 0x8f, 0x76, 0xd7, 0xf1, 0x99, 0x5d, 0x02, 0x2a, 0xfb, 0x8d, 0x55, 0xe7, 0x85,
	0x90, 0xd0, 0x95, 0x77, 0x92, 0xd0, 0x02, 0x7c, 0x0d, 0xba, 0x65, 0x25, 0x93, 0xcb, 0x66, 0xb2,
	0x85, 0x92, 0xa6, 0x13, 0xd5, 0x08, 0x2b, 0x45, 0xfb, 0x76, 0xec, 0xe8, 0x26, 0x81, 0x93, 0x95,
	0xcb, 0xd9, 0x4b, 0x06, 0x1b, 0x8b, 0x51, 0xe1, 0x1f, 0xc0, 0xa0, 0x57, 0x92, 0x3d, 0x90, 0x9b,
	0x72, 0xb4, 0xbf, 0x4e, 0x44, 0xf0, 0xe6, 0xca, 0xf7, 0x48, 0x56, 0x17, 0xc8, 0x2a, 0xeb, 0xde,
	0xfe, 0xf7, 0xef, 0x73, 0x5e, 0x49, 0xa6, 0xd6, 0xfe, 0x9c, 0x4b, 0xa7, 0x39, 0xd4, 0x77, 0x65,
	0xbc, 0x0d, 0x03, 0x55, 0xca, 0xcd, 0x19, 0xbb, 0x29, 0x47, 0xa3, 0x07, 0xa1, 0xbb, 0xcf, 0xad,
	0xdb, 0x58, 0x25, 0x77, 0x65, 0xba, 0xe0, 0xb4, 0x8d, 0x4c, 0xc5, 0xeb, 0xcc, 0x14, 0x4b, 0x2b,
	0x05, 0x29, 0x9b, 0x91, 0x8a, 0xd1, 0xc1, 0x1d, 0x3b, 0x32, 0x2c, 0xf4, 0x68, 0x1b, 0x95, 0xe1,
	0xba, 0xc5, 0x58, 0x17, 0x8b, 0xf8, 0x3a, 0xf4, 0x78, 0x84, 0x6e, 0xea, 0x54, 0xe2, 0x91, 0x5d,
	0x48, 0xec, 0x72, 0x49, 0xdc, 0xd4, 0x17, 0x8b, 0x78, 0x0c, 0x9a, 0x29, 0x26, 0x5f, 0x2b, 0xad,
	0x44, 0x63, 0x75, 0xa6, 0x62, 0xb3, 0x10, 0x96, 0x15, 0x7d, 0xa1, 0xb4, 0x82, 0x6f, 0x42, 0x90,
	0x12, 0x1f, 0x63, 0xc4, 0x93, 0xbb, 0x42, 0x40, 0xde, 0xe0, 0xbb, 0x81, 0xf8, 0x16, 0x9a, 0x05,
	0x2a, 0xe9, 0x1b, 0x18, 0x44, 0x79, 0xe7, 0x71, 0x19, 0xbd, 0xed, 0x08, 0xa2, 0xcc, 0xf0, 0xd4,
	0xdb, 0xe8, 0x65, 0x78, 0xca, 0x24, 0x8b, 0x5b, 0x3b, 0x2a, 0x0e, 0x4e, 0xf1, 0xd3, 0x70, 0xce,
	0xc7, 0x17, 0xe9, 0x4f, 0x4c, 0xf3, 0xc9, 0x04, 0x9f, 0x9c, 0xe2, 0x13, 0x09, 0x3e, 0x31, 0xc1,
	0x27, 0x67, 0x79, 0x16, 0x74, 0x49, 0xf3, 0xd0, 0xeb, 0xc6, 0x33, 0x16, 0x0e, 0xeb, 0x7e, 0x54,
	0x46, 0x81, 0xa7, 0x65, 0x14, 0xa6, 0x5e, 0x4a, 0x92, 0x4f, 0x25, 0xf9, 0xc4, 0x78, 0xfa, 0x2c,
	0xf4, 0xb8, 0x77, 0x38, 0x93, 0x18, 0x3f, 0x2a, 0x23, 0x3a, 0x4e, 0xcd, 0xcf, 0xca, 0x28, 0x3c,
	0xc1, 0x27, 0xc7, 0xf9, 0xd9, 0x74, 0x0a, 0x06, 0x7c, 0x8c, 0xbd, 0xd3, 0xbb, 0x69, 0xfb, 0x6d,
	0x19, 0xa1, 0xa7, 0x65, 0xd4, 0xca, 0x5c, 0x96, 0x24, 0x9f, 0x48, 0xa5, 0x27, 0x60, 0xd0, 0xcf,
	0xc2, 0x3a, 0xb9, 0x3a, 0x4d, 0xae, 0x0e, 0xc6, 0x35, 0xc9, 0x27, 0xa6, 0xd2, 0xa3, 0xd0, 0xeb,
	0x31, 0x74, 0x0e, 0x7a, 0x6c, 0xd2, 0x77, 0x31, 0xfa, 0x19, 0xea, 0x8f, 0xa5, 0xa0, 0xbf, 0x6a,
	0x99, 0x9b, 0x1c, 0xd1, 0x47, 0x65, 0xd4, 0x67, 0x72, 0xf4, 0x3e, 0x2b, 0xa3, 0x48, 0x32, 0xc9,
	0x27, 0x53, 0x7c, 0x72, 0x22, 0x3d, 0x06, 0x7d, 0xcc, 0xcb, 0xa6, 0x1b, 0xa6, 0x9b, 0x87, 0x6a,
	0x19, 0x34, 0x79, 0x06, 0x98, 0x4b, 0x35, 0xcd, 0x27, 0x67, 0xa8, 0x3b, 0xb7, 0x56, 0x5a, 0x71,
	0x12, 0xc5, 0x4c, 0xa2, 0xa3, 0x94, 0x28, 0x35, 0xce, 0xa7, 0xa8, 0xdf, 0x15, 0xe6, 0x9a, 0x97,
	0x42, 0x91, 0x66, 0x2e, 0xb2, 0x14, 0x8a, 0xb4, 0x72, 0x6d, 0x4b, 0xa1, 0x48, 0x07, 0xd7, 0x69,
	0xfb, 0x60, 0xbd, 0x5c, 0xdf, 0x52, 0x28, 0x32, 0xc0, 0x0d, 0x2e, 0x85, 0x22, 0x87, 0xb9, 0x81,
	0xa5, 0x50, 0xe4, 0x28, 0x17, 0x1b, 0xfa, 0x7d, 0x2f, 0xc4, 0x6a, 0xe1, 0xe0, 0xbd, 0x44, 0x48,
	0xbd, 0x28, 0xd8, 0x15, 0x21, 0x3d, 0x08, 0xd4, 0xab, 0xbd, 0x3c, 0xd4, 0x5b, 0x1b, 0xef, 0xfe,
	0xaf, 0x2f, 0x16, 0xef, 0x36, 0x90, 0x6e, 0x03, 0xe9, 0x36, 0x90, 0x6e, 0x03, 0xe9, 0x36, 0x90,
	0x6e, 0x03, 0xe9, 0x36, 0x90, 0x6e, 0x03, 0xe9, 0x36, 0x90, 0xee, 0x01, 0x20, 0xdd, 0x7f, 0xeb,
	0x86, 0xa3, 0x36, 0x4c, 0xbd, 0xab, 0x14, 0x74, 0x4d, 0x17, 0xb3, 0xeb, 0xa6, 0x5d, 0x61, 0x40,
	0xb7, 0xe4, 0x0b, 0x1e, 0x8c, 0xbc, 0xc3, 0xd5, 0x8f, 0xca, 0x68, 0xc0, 0x93, 0x9e, 0x67, 0x02,
	0xce, 0x67, 0x95, 0x8d, 0x15, 0xc5, 0x42, 0x0e, 0x71, 0x35, 0x16, 0xbd, 0x28, 0xd4, 0x21, 0xf4,
	0x81, 0x0d, 0xce, 0x48, 0x73, 0xe0, 0xc0, 0x0f, 0xa3, 0xf8, 0x62, 0xee, 0xd0, 0x81, 0x61, 0xee,
	0xa6, 0x2f, 0x19, 0x73, 0x9f, 0xfc, 0x92, 0x31, 0x77, 0xf3, 0x01, 0x63, 0xee, 0xc8, 0x97, 0x8b,
	0xb9, 0x3b, 0xf7, 0x80, 0xb9, 0xeb, 0x01, 0x47, 0xd8, 0x05, 0xee, 0x7d, 0x51, 0xe0, 0xd8, 0xba,
	0x1f, 0xe4, 0xbb, 0x7b, 0xe0, 0xd8, 0x5e, 0x37, 0x2b, 0xbc, 0x5b, 0xe0, 0xd8, 0xb1, 0x0f, 0xe0,
	0x18, 0x7c, 0x01, 0xe0, 0x18, 0xdb, 0xb1, 0xa3, 0x43, 0x3e, 0xc0, 0x31, 0x0f, 0x55, 0x90, 0xcb,
	0x04, 0x1e, 0xfb, 0x42, 0x6c, 0x21, 0xa1, 0xc3, 0x8d, 0xd8, 0x70, 0x1a, 0x3a, 0x64, 0x25, 0xb3,
	0x3e, 0xa3, 0x59, 0xd4, 0xbb, 0x00, 0x68, 0x4d, 0x42, 0x9b, 0xac, 0x5c, 0x9b, 0xd1, 0x4c, 0x41,
	0xf8, 0x6d, 0x68, 0x75, 0x0a, 0x38, 0xb2, 0xeb, 0x7a, 0xe2, 0xf7, 0xef, 0x3b, 0x39, 0x4d, 0xe1,
	0xb0, 0x5e, 0x11, 0x5d, 0x07, 0x48, 0x0e, 0x1d, 0x38, 0x90, 0x3c, 0xb1, 0x37, 0x20, 0xf9, 0x1a,
	0x74, 0xe6, 0xc8, 0xaa, 0x58, 0x2a, 0xe8, 0x19, 0xf3, 0x3c, 0x72, 0xb4, 0xab, 0x2e, 0xa0, 0xec,
	0x30, 0xc9, 0x97, 0x0d, 0x6a, 0xfc, 0x36, 0x60, 0xeb, 0x20, 0x73, 0xb6, 0x20, 0x6a, 0x9a, 0x31,
	0x41, 0x0d, 0xff, 0x68, 0xc4, 0x7f, 0x35, 0x19, 0xe4, 0x97, 0x28, 0xb5, 0x3d, 0x2b, 0x9b, 0x05,
	0x4e, 0xf3, 0x3c, 0xaf, 0x83, 0xf0, 0x4e, 0xbd, 0x1c, 0x84, 0xa7, 0x3d, 0x2e, 0x23, 0xc5, 0x81,
	0xf0, 0x12, 0x7c, 0xb2, 0x0e, 0xc2, 0x4b, 0xf1, 0x53, 0x30, 0x08, 0xbd, 0x66, 0x73, 0xe2, 0xc6,
	0x41, 0xb0, 0x92, 0x71, 0x08, 0x05, 0x07, 0x12, 0x53, 0x70, 0xd2, 0x07, 0xfe, 0x71, 0xb3, 0x7c,
	0x22, 0x49, 0x41, 0x5f, 0x2a, 0x45, 0x31, 0x60, 0x6a, 0x3a, 0x7d, 0xae, 0x16, 0xee, 0xb3, 0xa0,
	0x5c, 0xd0, 0x80, 0x72, 0xa9, 0x29, 0x7e, 0xb2, 0x2e, 0xec, 0x6b, 0x36, 0x31, 0x62, 0x78, 0x9a,
	0x4f, 0x4c, 0xf2, 0x33, 0xbb, 0x41, 0x70, 0x60, 0xc2, 0xa0, 0x16, 0x86, 0xc8, 0xc6, 0xf9, 0x44,
	0xa2, 0x3e, 0x82, 0x6b, 0x37, 0xe9, 0x2b, 0x67, 0x3e, 0xd2, 0xe3, 0xb5, 0x11, 0x9c, 0x3f, 0xd0,
	0x4a, 0x9f, 0x03, 0xec, 0x58, 0x37, 0x3b, 0x40, 0xb7, 0xfa, 0x58, 0x6f, 0xc8, 0x64, 0x38, 0xce,
	0xa4, 0x4f, 0xf0, 0xa9, 0xc9, 0xf4, 0x79, 0xe8, 0x71, 0xcf, 0x47, 0x07, 0x79, 0x97, 0x49, 0xce,
	0xb1, 0xea, 0x4f, 0xf3, 0x89, 0x19, 0x3b, 0x7b, 0x6f, 0x60, 0xbf, 0x16, 0x0e, 0xec, 0x33, 0x26,
	0x47, 0xb9, 0x98, 0x8d, 0xf7, 0x8e, 0x73, 0x43, 0x4b, 0xa1, 0x08, 0xc7, 0x75, 0x2d, 0x85, 0x22,
	0x71, 0xee, 0xf8, 0xd0, 0xc7, 0xdd, 0x70, 0xac, 0x26, 0xea, 0x33, 0x03, 0x9c, 0x5f, 0x12, 0xee,
	0xb3, 0xe2, 0xaa, 0x81, 0x7d, 0x9f, 0x3c, 0x6d, 0x60, 0xbc, 0x06, 0xc6, 0x6b, 0x60, 0xbc, 0x06,
	0xc6, 0xfb, 0x72, 0x31, 0xde, 0xbe, 0x40, 0x54, 0xd3, 0x81, 0x83, 0xa8, 0x26, 0x3f, 0x10, 0xb5,
	0x17, 0x1c, 0x1a, 0x7e, 0x99, 0x38, 0x34, 0xec, 0xc2, 0xa1, 0x0d, 0x8c, 0xd7, 0xc0, 0x78, 0x5f,
	0x30, 0xc6, 0x7b, 0x61, 0xd8, 0xf6, 0x42, 0xa0, 0xf0, 0x80, 0x31, 0x9e, 0x81, 0xee, 0x0c, 0xa4,
	0x57, 0xc1, 0x78, 0x17, 0x1d, 0x81, 0x3d, 0xfb, 0xf5, 0x1e, 0x81, 0x14, 0x0b, 0x62, 0x96, 0xc5,
	0xc6, 0xe6, 0x0e, 0x3f, 0xb9, 0x50, 0xe3, 0x4d, 0x30, 0xf3, 0x55, 0x91, 0xcb, 0x0e, 0x90, 0xe8,
	0x78, 0x41, 0xc8, 0x29, 0x63, 0xf0, 0xc9, 0x85, 0x9a, 0x2f, 0x11, 0x99, 0x52, 0x7e, 0x81, 0x00,
	0xb3, 0xd2, 0xe2, 0x2d, 0x95, 0xac, 0x4a, 0xef, 0x1a, 0x1b, 0xf5, 0x9e, 0x5f, 0x41, 0x5c, 0x82,
	0x48, 0xd1, 0x94, 0xc3, 0xe2, 0x82, 0x2d, 0xe9, 0x51, 0x0a, 0x35, 0xe1, 0x21, 0x6a, 0x1e, 0x6a,
	0x52, 0x83, 0x7f, 0x42, 0x88, 0xfe, 0x0c, 0x3f, 0x44, 0x41, 0xee, 0x27, 0x8e, 0x17, 0x4e, 0x1c,
	0x2f, 0x83, 0xda, 0xfc, 0x73, 0xe1, 0x27, 0x65, 0x14, 0xe0, 0xd0, 0xd0, 0x5f, 0xf4, 0xc2, 0x89,
	0x5a, 0xe9, 0x7e, 0x47, 0x6b, 0x1b, 0x99, 0xfa, 0x46, 0xa6, 0xfe, 0x25, 0x67, 0xea, 0x1b, 0xc9,
	0xf2, 0x46, 0xb2, 0xbc, 0x91, 0x2c, 0x6f, 0x24, 0xcb, 0x1b, 0xc9, 0x72, 0x17, 0xe5, 0xdc, 0xfa,
	0x93, 0x0b, 0x75, 0x5f, 0x4c, 0x79, 0x5c, 0x46, 0x0b, 0x3b, 0x24, 0xb3, 0x87, 0x7d, 0x90, 0x6e,
	0x8f, 0x5f, 0x32, 0x3b, 0x7d, 0xa5, 0x16, 0xda, 0xe5, 0x7d, 0x32, 0xd9, 0x0f, 0x9e, 0x23, 0x7f,
	0xea, 0x74, 0xba, 0x06, 0x0e, 0x3e, 0x5b, 0x9d, 0xe2, 0x7e, 0xf0, 0x1c, 0xf9, 0xd2, 0xa6, 0xdf,
	0xac, 0x9b, 0xfa, 0x4e, 0xf9, 0xa6, 0xbe, 0x1f, 0x3c, 0x47, 0x75, 0x98, 0xd2, 0xcb, 0xf5, 0x21,
	0xf7, 0x84, 0x6f, 0x62, 0xfc, 0xc1, 0x73, 0x54, 0x8f, 0x2b, 0x7d, 0xb5, 0x16, 0x22, 0x1f, 0xf5,
	0xcd, 0x9b, 0xd3, 0x4e, 0xf3, 0xa5, 0x4f, 0xdf, 0xa8, 0x0d, 0xd5, 0x53, 0xb5, 0x12, 0xea, 0x0f,
	0x9e, 0xa3, 0x5a, 0x4c, 0xe9, 0xc5, 0x9a, 0x40, 0x7e, 0xcc, 0x17, 0x9b, 0x3f, 0x78, 0x8e, 0x6a,
	0x30, 0xa4, 0x13, 0xae, 0x2c, 0xfc, 0x09, 0x5f, 0xc7, 0xe1, 0xc1, 0x73, 0xe4, 0x20, 0x5a, 0x0a,
	0x45, 0x10, 0x17, 0xd8, 0x5b, 0x66, 0x7e, 0x29, 0x14, 0x19, 0xe5, 0xc6, 0x86, 0xfe, 0xb2, 0x17,
	0x4e, 0xd5, 0x3e, 0x89, 0xda, 0x00, 0xa7, 0x0d, 0x70, 0xda, 0x00, 0xa7, 0x0d, 0x70, 0xda, 0x00,
	0xa7, 0x0d, 0x70, 0xda, 0x00, 0xa7, 0x5f, 0x16, 0x38, 0xdd, 0x78, 0x72, 0x61, 0x87, 0xb7, 0x45,
	0x1a, 0xf0, 0xf4, 0x6b, 0x02, 0x4f, 0xaf, 0xd5, 0x86, 0xa7, 0xe3, 0x1e, 0x78, 0xda, 0xc4, 0xe0,
	0xe9, 0xd7, 0x19, 0x9b, 0xfe, 0xaa, 0x13, 0x4e, 0xd6, 0x3c, 0x45, 0xb0, 0x23, 0x34, 0x6d, 0x64,
	0xe2, 0x1b, 0x99, 0xf8, 0x46, 0x26, 0xfe, 0xeb, 0x94, 0x89, 0x3f, 0x7a, 0x60, 0x99, 0xf8, 0xd8,
	0x37, 0x34, 0x13, 0x3f, 0xb7, 0xf2, 0xe4, 0x42, 0xfd, 0xe3, 0xf8, 0x8f, 0xcb, 0xe8, 0xc2, 0x0e,
	0xf9, 0xde, 0x98, 0x0f, 0x92, 0x00, 0x23, 0xa5, 0x3b, 0xc3, 0xa7, 0x52, 0xe9, 0xcb, 0xb5, 0xf0,
	0xc3, 0xb9, 0xea, 0x64, 0xee, 0xde, 0xe0, 0x83, 0x27, 0xcb, 0x5b, 0x13, 0x3e, 0xec, 0x62, 0xaf,
	0xaf, 0xce, 0xfe, 0xee, 0x6b, 0xaf, 0xaf, 0x4e, 0x0e, 0xef, 0x79, 0xaf, 0x3f, 0x6a, 0x8a, 0x3a,
	0xc2, 0xf6, 0xe7, 0x59, 0x3e, 0x35, 0xbe, 0xf7, 0xbd, 0xbe, 0x3a, 0xa1, 0x5c, 0x7b, 0xaf, 0xb7,
	0x37, 0xee, 0x00, 0x17, 0xac, 0x93, 0x1a, 0x3e, 0xc2, 0x1d, 0xb5, 0x53, 0xc3, 0x71, 0xee, 0xf8,
	0x52, 0x28, 0x72, 0x8a, 0x3b, 0x3d, 0xf4, 0xeb, 0x4e, 0x38, 0x5d, 0xe7, 0xe0, 0x5f, 0x63, 0xd3,
	0x6e, 0x6c, 0xda, 0x8d, 0x4d, 0xbb, 0x71, 0x7c, 0xae, 0x71, 0x7c, 0xee, 0x45, 0x36, 0xed, 0xdc,
	0x93, 0x0b, 0x3b, 0x9d, 0xa6, 0xde, 0xdf, 0xb6, 0x3d, 0xdb, 0xd8, 0xb6, 0x0f, 0x6c, 0xdb, 0xf6,
	0xf5, 0x8b, 0xbf, 0x3a, 0xdb, 0xb6, 0xf3, 0x44, 0x57, 0x65, 0xdb, 0xfe, 0x65, 0x08, 0x7a, 0xed,
	0x19, 0x46, 0xe7, 0xd0, 0xa2, 0xbc, 0xca, 0xbe, 0xd2, 0x8a, 0x5f, 0x07, 0xb0, 0x57, 0x84, 0xf1,
	0x49, 0xbe, 0x96, 0xf4, 0x99, 0xdf, 0xfc, 0xe1, 0x51, 0xb0, 0xe5, 0x21, 0x0a, 0x0f, 0x85, 0xd4,
	0x40, 0x11, 0x59, 0xc7, 0xa3, 0xce, 0x36, 0x8d, 0xf3, 0x09, 0x3e, 0xe5, 0x38, 0x09, 0xd5, 0x52,
	0x34, 0x57, 0x84, 0x86, 0x17, 0xa0, 0xb5, 0xa8, 0x4a, 0x9b, 0xa2, 0x4e, 0x98, 0xa0, 0xc0, 0x8b,
	0x09, 0x02, 0x93, 0x97, 0x4a, 0xda, 0x86, 0x3e, 0xc7, 0x17, 0x31, 0x8d, 0xb3, 0x56, 0x19, 0x49,
	0x5e, 0x55, 0xa2, 0x41, 0xf6, 0x1a, 0xe7, 0xf4, 0xae, 0xbf, 0xeb, 0xee, 0x3e, 0x31, 0x96, 0x6e,
	0xb5, 0x0f, 0x76, 0xfd, 0x31, 0x28, 0x74, 0xdb, 0x5f, 0xf4, 0x37, 0x68, 0x68, 0x87, 0xe0, 0x2c,
	0x60, 0xf7, 0x97, 0xf1, 0x99, 0xda, 0xd0, 0x0b, 0x44, 0x1a, 0x9d, 0xdf, 0x87, 0xa4, 0x22, 0x05,
	0x8e, 0x78, 0x9e, 0xe0, 0xbb, 0xd0, 0x22, 0x2b, 0x39, 0x53, 0xb6, 0xf1, 0xa9, 0xfa, 0xd9, 0x5d,
	0xc9, 0xbe, 0xa1, 0xe4, 0xc8, 0xa2, 0xac, 0xe9, 0x74, 0x89, 0xdf, 0x10, 0x37, 0x88, 0xf1, 0x25,
	0x4c, 0x99, 0x3d, 0x5d, 0x55, 0xf0, 0x15, 0xf3, 0x40, 0x9c, 0xf1, 0xf1, 0xe3, 0xc4, 0xee, 0x7a,
	0xe9, 0xc6, 0x95, 0xdb, 0xd6, 0x54, 0x30, 0xce, 0xc7, 0x0d, 0xbd, 0x01, 0x6d, 0xce, 0xa7, 0x78,
	0x10, 0x5a, 0xec, 0xef, 0xcd, 0x9b, 0xdf, 0xb7, 0x8f, 0xd0, 0x07, 0xb4, 0x06, 0xf8, 0x18, 0xb4,
	0xda, 0xdf, 0xaa, 0x97, 0x72, 0xe6, 0xa7, 0xee, 0xc1, 0x7a, 0xb4, 0x98, 0x1b, 0x5a, 0x05, 0xce,
	0xdb, 0x25, 0x78, 0x18, 0x38, 0xd7, 0x97, 0x86, 0xed, 0x89, 0x27, 0x74, 0x38, 0x3e, 0x19, 0x4c,
	0xa7, 0x82, 0x97, 0x52, 0xd4, 0x64, 0xa6, 0xa3, 0xdd, 0x45, 0x39, 0xaf, 0xc9, 0x43, 0x5b, 0xd0,
	0xe3, 0xd7, 0x3d, 0x78, 0x16, 0xb0, 0xd9, 0xd9, 0x46, 0x81, 0xa3, 0x19, 0xe6, 0x7c, 0x50, 0x43,
	0x1c, 0x8a, 0x5e, 0xa4, 0x5b, 0x94, 0x9b, 0x1d, 0x9f, 0x84, 0x66, 0x83, 0xd5, 0xb8, 0xd8, 0xc1,
	0x43, 0x1f, 0x66, 0xf4, 0xb9, 0xa1, 0x7f, 0x1c, 0x85, 0x0e, 0x63, 0x3b, 0x5d, 0x2e, 0x92, 0xac,
	0x79, 0x32, 0xb1, 0xc3, 0xfd, 0x01, 0x7f, 0x53, 0x5f, 0xa7, 0xf5, 0x5a, 0x8b, 0x25, 0xa3, 0xdd,
	0x22, 0x33, 0xb6, 0xaa, 0x7f, 0x00, 0x68, 0x33, 0x06, 0x48, 0x25, 0x79, 0x49, 0x91, 0xcd, 0x8f,
	0x9c, 0xff, 0x0d, 0x50, 0xbe, 0x87, 0x1f, 0xa0, 0xff, 0x0b, 0x30, 0x05, 0x9c, 0xa6, 0x94, 0xf4,
	0x35, 0x71, 0x55, 0x95, 0xb2, 0xa2, 0xac, 0xa8, 0xfa, 0x1a, 0x1e, 0x1a, 0x9e, 0x67, 0xbf, 0x46,
	0xe2, 0xcb, 0xb4, 0x28, 0x6e, 0xfc, 0x8a, 0xdf, 0xa0, 0x85, 0x71, 0x81, 0x49, 0x82, 0x49, 0x68,
	0x17, 0x4b, 0x9a, 0xae, 0x8a, 0x05, 0x49, 0x24, 0xa2, 0xa6, 0xe3, 0x93, 0xc3, 0xf3, 0x9a, 0x24,
	0xc6, 0x6f, 0x89, 0x59, 0x69, 0x55, 0xca, 0x8e, 0xc4, 0xe7, 0xad, 0xd2, 0xf8, 0x15, 0x51, 0xd3,
	0x2d, 0xb6, 0x14, 0xb4, 0x65, 0x89, 0xcc, 0x0a, 0xe4, 0x9c, 0x24, 0xe2, 0x13, 0x1e, 0xae, 0x4b,
	0x46, 0x61, 0x7c, 0x91, 0x96, 0x5a, 0x4c, 0xe7, 0x20, 0x42, 0x55, 0x88, 0x9a, 0x24, 0xe2, 0x63,
	0x1e, 0x06, 0x26, 0x9c, 0x3d, 0x32, 0x89, 0xcf, 0x43, 0xcb, 0xf7, 0xc4, 0xa2, 0x28, 0xb3, 0x4a,
	0xc5, 0x3d, 0xd4, 0x4b, 0xb4, 0xc4, 0x5b, 0xa1, 0x75, 0x45, 0x25, 0xa2, 0x59, 0xab, 0xaa, 0x0a,
	0x5d, 0xa3, 0x85, 0x76, 0xb5, 0x2a, 0x8d, 0x67, 0x9d, 0x66, 0xd7, 0xca, 0xdb, 0xf8, 0x65, 0xab,
	0xd4, 0x55, 0xb5, 0x31, 0x68, 0xcf, 0x8a, 0xb2, 0x98, 0xb3, 0x95, 0xc5, 0x86, 0x2f, 0xb1, 0xdf,
	0x23, 0x71, 0xe3, 0x5f, 0xaf, 0x9e, 0x31, 0x68, 0x5f, 0x55, 0xe9, 0xf4, 0xa9, 0x30, 0x5c, 0x29,
	0xa9, 0x4a, 0x91, 0x8c, 0xc4, 0x5f, 0x67, 0xcf, 0xbd, 0x0c, 0x73, 0x80, 0xf3, 0x44, 0xdd, 0x10,
	0xe5, 0xed, 0x2d, 0xa2, 0xe9, 0x16, 0xd7, 0x49, 0x9b, 0xeb, 0xaa, 0x51, 0x18, 0x7f, 0x8b, 0x68,
	0xba, 0x97, 0x77, 0x04, 0x40, 0xd2, 0xc5, 0xc2, 0xb6, 0x31, 0x07, 0x06, 0x6d, 0x9e, 0x45, 0xfa,
	0xd0, 0x3d, 0xf8, 0xe7, 0xa0, 0x95, 0x51, 0x11, 0x46, 0x82, 0x8f, 0xd8, 0xb4, 0x06, 0x95, 0xf1,
	0xcb, 0x21, 0x57, 0xa6, 0x7b, 0xf6, 0x36, 0x1b, 0x91, 0x41, 0x27, 0xed, 0x96, 0xb8, 0xed, 0x1a,
	0x8c, 0x31, 0x68, 0x2f, 0x2a, 0x05, 0x51, 0xce, 0x55, 0xb7, 0xf7, 0x16, 0x7b, 0xee, 0xd3, 0x41,
	0xda, 0x16, 0xc9, 0x11, 0xb9, 0x9a, 0x61, 0x99, 0x3d, 0xaf, 0x1e, 0x39, 0x4e, 0xdb, 0x92, 0xf4,
	0x7b, 0x44, 0xa5, 0xe2, 0x8c, 0xa6, 0x1e, 0x77, 0xf0, 0xd8, 0x45, 0xee, 0x06, 0x9f, 0x80, 0xe6,
	0xd2, 0x3a, 0x1b, 0x72, 0x1c, 0xb5, 0xa9, 0xef, 0x5c, 0x33, 0xd7, 0x47, 0xa5, 0xa1, 0xb4, 0xd7,
	0xcd, 0x4e, 0xa9, 0x34, 0x94, 0x75, 0xb6, 0xbb, 0x4f, 0x26, 0xa0, 0x5d, 0xd2, 0x54, 0x91, 0x14,
	0x2a, 0xd3, 0xee, 0xba, 0x94, 0xcb, 0x15, 0x08, 0xeb, 0x8e, 0x91, 0xf8, 0x22, 0x2b, 0xf4, 0x56,
	0x3e, 0x09, 0x6d, 0xdf, 0x17, 0x75, 0x51, 0xb5, 0x98, 0x86, 0xdc, 0x4c, 0x6f, 0xd2, 0x32, 0x2f,
	0xcf, 0x59, 0x88, 0x94, 0x44, 0x62, 0x34, 0x34, 0xe6, 0xa6, 0xbf, 0x33, 0x7f, 0xc5, 0xdd, 0xca,
	0x24, 0xb4, 0xae, 0xa8, 0xe2, 0x3d, 0xa9, 0x60, 0xb4, 0xf4, 0xc4, 0xb0, 0xb9, 0xfc, 0x37, 0x88,
	0x61, 0x0d, 0xd2, 0xac, 0xd0, 0xdd, 0xe8, 0x23, 0xd0, 0x62, 0x56, 0xa7, 0xa4, 0xe1, 0xce, 0xe1,
	0x3b, 0xcb, 0x95, 0x35, 0x7c, 0x67, 0x19, 0x8e, 0x42, 0x98, 0x8e, 0x7a, 0x49, 0xc3, 0xdd, 0xac,
	0x88, 0x0d, 0xf6, 0x9d, 0x65, 0x8b, 0x39, 0x0e, 0xcd, 0x46, 0x71, 0x12, 0xf7, 0xba, 0xca, 0x93,
	0x16, 0xc5, 0x28, 0x74, 0xb0, 0xca, 0x54, 0x74, 0x1c, 0x61, 0x84, 0x46, 0x1d, 0x2a, 0x9a, 0x1c,
	0x12, 0xe9, 0x18, 0x54, 0x24, 0xb2, 0xce, 0x77, 0x4a, 0xb4, 0x29, 0x52, 0x1e, 0x8a, 0x94, 0x49,
	0x41, 0xed, 0x69, 0x48, 0x0d, 0x44, 0x2f, 0x2e, 0x1c, 0x12, 0x5a, 0x99, 0xf5, 0x34, 0x9e, 0xe3,
	0xbf, 0x0f, 0x01, 0x27, 0x16, 0x74, 0xa2, 0xca, 0xa2, 0x6e, 0x5b, 0xd4, 0x63, 0xcc, 0xa2, 0xfe,
	0x55, 0xc8, 0xb4, 0xa8, 0x3f, 0x0f, 0xc1, 0x2b, 0xc0, 0xd9, 0x96, 0xd1, 0x1a, 0xa9, 0x33, 0x35,
	0x8d, 0xa3, 0x67, 0xb8, 0x5e, 0x03, 0x6c, 0x33, 0xdb, 0x26, 0x06, 0x8f, 0xd4, 0x64, 0xaf, 0x18,
	0x1a, 0x8f, 0xf9, 0xa3, 0x6d, 0xac, 0x61, 0xfe, 0x58, 0x83, 0xed, 0x05, 0x04, 0xcc, 0xfc, 0x19,
	0x23, 0x7e, 0xdc, 0xd7, 0xf8, 0xb9, 0xc6, 0x7b, 0x0c, 0x80, 0xd1, 0x1a, 0xe6, 0xfb, 0xb8, 0x9f,
	0xdd, 0x73, 0x1b, 0xef, 0xf3, 0xd0, 0x42, 0xeb, 0x62, 0xd0, 0x7b, 0x2b, 0xc4, 0xaa, 0xe2, 0x22,
	0x1f, 0x01, 0x30, 0x6c, 0xa4, 0x69, 0x2d, 0x3c, 0x06, 0xd2, 0x69, 0x2d, 0x8e, 0x43, 0xb8, 0xb4,
	0xce, 0xda, 0xd9, 0xef, 0x5c, 0x93, 0xce, 0xe6, 0x8d, 0x42, 0x07, 0x9b, 0xfa, 0xde, 0xe9, 0x63,
	0x4c, 0xfb, 0xea, 0xe9, 0xc3, 0x43, 0xbb, 0xc3, 0x70, 0x96, 0x34, 0x3c, 0x58, 0x99, 0x22, 0xd5,
	0xd4, 0x47, 0x21, 0x6c, 0x4c, 0x25, 0x73, 0x76, 0x5b, 0x33, 0xa9, 0x7a, 0x1e, 0x75, 0xda, 0xf3,
	0xc6, 0x9c, 0x4b, 0x69, 0x13, 0x5a, 0x19, 0xd7, 0x16, 0x0d, 0xd7, 0x7f, 0xd7, 0xc0, 0xb8, 0x0a,
	0xa1, 0xf2, 0x81, 0x65, 0xf3, 0xbd, 0x83, 0x15, 0x00, 0xc9, 0x48, 0xed, 0x66, 0xf2, 0x5b, 0x66,
	0xf4, 0xea, 0x95, 0xdd, 0x67, 0xaf, 0xab, 0xde, 0xb1, 0x30, 0x73, 0xd8, 0x48, 0x68, 0x91, 0xac,
	0xc7, 0xb8, 0x04, 0x5d, 0x96, 0x0e, 0x62, 0xab, 0x32, 0xf0, 0xe0, 0xfc, 0x9e, 0x54, 0x5d, 0xf1,
	0x53, 0xd8, 0x29, 0xb9, 0x0b, 0xf1, 0x16, 0x74, 0xd9, 0xef, 0xe5, 0xda, 0x2f, 0x70, 0x75, 0xf9,
	0xc6, 0xc7, 0x76, 0x50, 0xeb, 0x17, 0xb1, 0xb6, 0xf5, 0x72, 0x9b, 0x9e, 0x52, 0x2c, 0x41, 0x7b,
	0xa5, 0x4f, 0x33, 0xa2, 0x6a, 0x1e, 0xf2, 0x7a, 0x75, 0x8f, 0xdd, 0x6a, 0xb8, 0xda, 0xb6, 0xbe,
	0x56, 0xbb, 0x63, 0xe7, 0x55, 0xfc, 0x43, 0xe8, 0xa9, 0xea, 0x5a, 0xaa, 0xf1, 0x38, 0xd3, 0x78,
	0x69, 0x5f, 0xbd, 0xeb, 0xd1, 0xdb, 0xe5, 0xe9, 0xdf, 0x79, 0x15, 0xff, 0x08, 0x7a, 0xaa, 0x7a,
	0x98, 0x6a, 0x37, 0x42, 0x18, 0x97, 0xf7, 0xd7, 0xc9, 0x1e, 0xf5, 0xd8, 0xdb, 0xcd, 0xf3, 0x2a,
	0x4e, 0x41, 0x4b, 0x4e, 0xd2, 0xd6, 0x33, 0x9a, 0x74, 0x8f, 0xb0, 0x83, 0x49, 0xed, 0xe9, 0xbe,
	0x47, 0x65, 0x84, 0xa8, 0x1d, 0xfd, 0xaf, 0x1f, 0xa0, 0x2e, 0xe6, 0xca, 0x9d, 0x0d, 0x46, 0x3f,
	0x3f, 0x26, 0x44, 0x28, 0xe1, 0xb2, 0x74, 0x8f, 0xe0, 0x75, 0x00, 0xf3, 0x05, 0x70, 0x95, 0xe4,
	0xcc, 0xf8, 0xe2, 0x6e, 0xa2, 0x3b, 0xa7, 0xdf, 0xbf, 0xdf, 0x95, 0x2d, 0x28, 0xa5, 0x1c, 0x63,
	0x24, 0xb2, 0x2e, 0x89, 0x05, 0xed, 0x37, 0x1f, 0xa0, 0x8e, 0x08, 0x1a, 0x46, 0xe3, 0x68, 0x2e,
	0x9c, 0x65, 0x6f, 0xa1, 0x2d, 0x04, 0x84, 0x16, 0xe3, 0xed, 0x6f, 0x95, 0xe4, 0xf0, 0xab, 0x10,
	0x11, 0x35, 0x4d, 0xd2, 0x74, 0x92, 0xab, 0x77, 0x9f, 0x4a, 0xba, 0xe5, 0xc3, 0xfb, 0xe8, 0xd3,
	0x32, 0x42, 0x51, 0xb4, 0x10, 0x10, 0x6c, 0x16, 0xfc, 0xef, 0x08, 0xda, 0x36, 0xc4, 0xec, 0x9a,
	0x24, 0x1b, 0xf7, 0xd1, 0xb1, 0xf8, 0x61, 0x4b, 0xfa, 0x9f, 0xd0, 0x47, 0x65, 0xd4, 0x61, 0x5d,
	0x16, 0x93, 0xb9, 0x9c, 0xca, 0x6c, 0x26, 0xcd, 0xbd, 0xe3, 0x6f, 0x11, 0xcc, 0x82, 0xa7, 0x08,
	0x9f, 0x19, 0x9e, 0x88, 0xbf, 0x1b, 0xdf, 0xbc, 0x74, 0xeb, 0x0e, 0x1f, 0x4f, 0x4c, 0x5c, 0x4d,
	0xc7, 0x85, 0xf9, 0xeb, 0x23, 0xf1, 0x0d, 0x92, 0x93, 0x4a, 0x1b, 0x71, 0xc7, 0x09, 0x10, 0x98,
	0x76, 0xb2, 0x4e, 0x50, 0xd6, 0x53, 0xc3, 0x33, 0x36, 0x6b, 0x72, 0xc6, 0x62, 0x5d, 0x93, 0xf2,
	0x6b, 0x2e, 0xc6, 0x57, 0x9d, 0x8c, 0x93, 0x94, 0xf1, 0xdc, 0x70, 0x62, 0xca, 0xe6, 0x9c, 0x9c,
	0xb2, 0x38, 0x37, 0x89, 0xba, 0x5d, 0xc5, 0x6e, 0x5b, 0x39, 0xa1, 0xd5, 0x6c, 0xad, 0xe9, 0xb1,
	0xb4, 0xb1, 0x0f, 0x25, 0x65, 0x8a, 0x74, 0x5a, 0xdd, 0x63, 0xc1, 0xd8, 0xf6, 0x34, 0xfe, 0xa8,
	0x8c, 0xd0, 0xb8, 0xe5, 0xb4, 0x84, 0xce, 0x06, 0xa2, 0xbd, 0x0b, 0x41, 0x01, 0x18, 0xe5, 0x2d,
	0xa2, 0xce, 0xdf, 0xc3, 0x93, 0xd0, 0xaa, 0x2b, 0xba, 0x58, 0x30, 0x3f, 0xb3, 0x34, 0x58, 0x83,
	0xed, 0x55, 0xca, 0xc6, 0x08, 0x8d, 0x77, 0x0e, 0x2f, 0x40, 0xa7, 0xac, 0x64, 0xb6, 0x14, 0x75,
	0x9d, 0xa8, 0x26, 0xeb, 0x91, 0xba, 0x31, 0xcf, 0x76, 0x59, 0x79, 0x8b, 0x51, 0x1b, 0xfc, 0xb7,
	0xe0, 0x30, 0x9d, 0xa3, 0x44, 0x55, 0xc5, 0x8c, 0xa6, 0xac, 0xea, 0x5b, 0x22, 0x9d, 0xe8, 0x44,
	0xd5, 0xe8, 0x16, 0xdf, 0xc6, 0x06, 0xae, 0xc7, 0x1c, 0x66, 0xbb, 0x1a, 0xac, 0xd1, 0xfd, 0x16,
	0xdb, 0xb2, 0xc9, 0x75, 0xd7, 0x60, 0xc2, 0x37, 0x20, 0xaa, 0x14, 0x89, 0x2a, 0xb2, 0xfb, 0xcf,
	0xb4, 0x6d, 0x4d, 0x27, 0x1b, 0xb6, 0xc0, 0xf6, 0x3a, 0x02, 0xfb, 0x6c, 0xae, 0x65, 0xc6, 0x64,
	0xc9, 0x3b, 0x03, 0xcd, 0x9a, 0xb6, 0xc6, 0x6e, 0xcc, 0xe8, 0x60, 0xec, 0x1d, 0x7f, 0x2a, 0xa3,
	0xa0, 0x7d, 0x2d, 0xc5, 0x45, 0x21, 0xac, 0x69, 0x6b, 0xd7, 0xc8, 0x36, 0x1e, 0x86, 0x66, 0x31,
	0x97, 0xa3, 0xeb, 0x9c, 0x1d, 0xc4, 0x6b, 0x49, 0x77, 0xd0, 0x65, 0x65, 0x13, 0x06, 0x04, 0xab,
	0x18, 0x5f, 0x85, 0xd6, 0xac, 0xa2, 0xa8, 0x39, 0x89, 0xee, 0x4b, 0x9a, 0x79, 0xe0, 0xee, 0x98,
	0xa7, 0xc3, 0xd8, 0x42, 0xbf, 0x54, 0x21, 0x33, 0xa2, 0x8e, 0x82, 0x93, 0x13, 0xdf, 0x80, 0xfe,
	0x82, 0x92, 0xd7, 0x32, 0x9a, 0xae, 0x12, 0x71, 0x83, 0x36, 0xd8, 0xbe, 0xc0, 0xb0, 0xb7, 0xee,
	0x59, 0xc0, 0x5e, 0xca, 0xb6, 0x6c, 0x71, 0xd9, 0x37, 0x18, 0x7e, 0x1b, 0xda, 0x0a, 0x4a, 0x3e,
	0xa3, 0x92, 0x2c, 0x91, 0x36, 0x89, 0x6a, 0x1e, 0xd1, 0xdb, 0xcd, 0x42, 0xef, 0x7c, 0xff, 0xbe,
	0x8b, 0x75, 0x21, 0x24, 0xb4, 0x16, 0x94, 0xbc, 0x60, 0xfe, 0xc4, 0x97, 0x20, 0xa0, 0x6d, 0x99,
	0xa7, 0xf3, 0xfc, 0x5f, 0xb3, 0xbd, 0xeb, 0x19, 0x4f, 0xcf, 0xa1, 0xab, 0x80, 0xb6, 0x85, 0xd3,
	0x10, 0x50, 0x34, 0xf3, 0x98, 0x9d, 0xff, 0xce, 0x7d, 0xd3, 0x3d, 0x86, 0x5e, 0x19, 0x8a, 0x86,
	0x7f, 0x8e, 0x20, 0xa4, 0x8b, 0x79, 0x2d, 0x3a, 0xcc, 0xc2, 0x35, 0xbb, 0xdb, 0x5f, 0xdc, 0x51,
	0x81, 0xd1, 0xdb, 0x62, 0xde, 0xbc, 0x56, 0x70, 0xca, 0x1a, 0xe2, 0x96, 0xf7, 0x8c, 0xc8, 0x58,
	0xf4, 0xc7, 0x6c, 0xc0, 0xdf, 0x43, 0x01, 0x6e, 0x98, 0xc5, 0xc8, 0xde, 0x43, 0xcd, 0x67, 0xe9,
	0xf8, 0x7f, 0xee, 0xba, 0x7a, 0x90, 0x55, 0x01, 0xbf, 0x0b, 0x5d, 0x9b, 0x52, 0x31, 0x53, 0x14,
	0x55, 0x71, 0xc3, 0x5e, 0xb0, 0x87, 0x59, 0xbd, 0x46, 0xfc, 0x66, 0x03, 0x0b, 0x5a, 0x6b, 0x6b,
	0x77, 0x17, 0x6f, 0xdd, 0x62, 0x2c, 0x6c, 0xe5, 0xa6, 0x87, 0xcc, 0xe9, 0x4c, 0xd5, 0xb5, 0x3d,
	0x44, 0x2d, 0x67, 0x9b, 0xc7, 0xf9, 0x04, 0x9f, 0x74, 0x05, 0xe5, 0x3a, 0x36, 0xa5, 0xa2, 0x83,
	0x07, 0xbf, 0x6a, 0xc6, 0x32, 0x75, 0x25, 0x63, 0xfc, 0x5b, 0x92, 0x65, 0x52, 0xb0, 0xe2, 0xde,
	0x2d, 0x0e, 0xd3, 0x2a, 0x60, 0x4a, 0x70, 0x5b, 0x59, 0xa6, 0x7f, 0x19, 0xd5, 0x62, 0x11, 0x7f,
	0x1b, 0xa2, 0xd6, 0x5b, 0xd8, 0x2b, 0x05, 0x25, 0xbb, 0x4e, 0x72, 0x2c, 0xac, 0x23, 0x65, 0x89,
	0x66, 0xbe, 0xeb, 0xec, 0x6f, 0xb1, 0xc3, 0x8f, 0x0c, 0x73, 0xdd, 0x24, 0xf4, 0x99, 0xfc, 0x69,
	0x83, 0x7d, 0xd9, 0xe4, 0xc6, 0x97, 0x01, 0x33, 0x89, 0x19, 0xb1, 0x50, 0xa8, 0xc8, 0xe4, 0xeb,
	0x4c, 0xe6, 0x26, 0x81, 0x63, 0x1c, 0xf3, 0x85, 0x82, 0x2d, 0xe5, 0x6d, 0xe0, 0xaa, 0xea, 0x35,
	0xc2, 0x64, 0xf0, 0x1e, 0x19, 0xec, 0x26, 0xd7, 0x51, 0x4f, 0x2d, 0xec, 0xe4, 0x49, 0x93, 0xd0,
	0xb9, 0xe2, 0xa9, 0xe0, 0x36, 0x0c, 0x28, 0xab, 0xab, 0x05, 0xba, 0xb9, 0x68, 0x25, 0x75, 0x53,
	0xda, 0x14, 0x57, 0xa4, 0x82, 0xa4, 0x6f, 0x1b, 0xe7, 0x0b, 0xcf, 0xd6, 0x09, 0xd8, 0xdd, 0x34,
	0xd8, 0x96, 0x9d, 0x5c, 0x3e, 0xa7, 0x0b, 0xa3, 0x4a, 0x0d, 0x3a, 0xfc, 0x9f, 0x61, 0xb0, 0xa4,
	0x11, 0x95, 0x6a, 0xa2, 0x20, 0xde, 0xb8, 0x7b, 0xca, 0xbe, 0xa9, 0x36, 0x9a, 0x64, 0xba, 0x07,
	0x46, 0x8d, 0xbb, 0x6c, 0x47, 0xad, 0xbb, 0x6c, 0x47, 0x6f, 0x5b, 0x14, 0xe9, 0x10, 0x1d, 0x52,
	0xe1, 0x30, 0x15, 0x72, 0xdd, 0x21, 0xc3, 0x26, 0xc0, 0x23, 0xc0, 0x69, 0xa5, 0x7c, 0x9e, 0xfa,
	0xd2, 0xb9, 0x8c, 0xc8, 0xd2, 0x1a, 0xd1, 0x14, 0x0b, 0x04, 0x76, 0xda, 0xcf, 0xe7, 0x8d, 0xab,
	0x87, 0xce, 0x41, 0x17, 0x51, 0x55, 0x45, 0xcd, 0xe4, 0x48, 0xe5, 0xfa, 0x9d, 0x09, 0x46, 0xcb,
	0xb1, 0x82, 0xcb, 0x95, 0xe7, 0xf8, 0x35, 0x68, 0x65, 0xd3, 0x8c, 0x15, 0x68, 0xd1, 0x49, 0x36,
	0xc5, 0x63, 0x35, 0x93, 0x6f, 0x57, 0x28, 0x99, 0x00, 0x9a, 0xf5, 0x5f, 0x0d, 0xdf, 0x01, 0xce,
	0xbc, 0xce, 0x96, 0xb6, 0x59, 0xd3, 0x45, 0x9d, 0x44, 0xa7, 0xe2, 0x68, 0xb8, 0x23, 0x79, 0xd6,
	0xff, 0x8a, 0x2d, 0x06, 0x2b, 0xee, 0xda, 0x2c, 0xcb, 0x94, 0x43, 0xe8, 0xdc, 0x74, 0x3f, 0xc0,
	0x97, 0xec, 0x1b, 0xc9, 0x72, 0xb2, 0x16, 0x9d, 0xf6, 0xbd, 0xaf, 0xc8, 0x14, 0xc8, 0xc8, 0x2e,
	0xdf, 0x58, 0x36, 0xcd, 0xb0, 0x79, 0xe3, 0xd8, 0x65, 0x59, 0xc3, 0xef, 0x40, 0x8b, 0xbe, 0x6a,
	0x2e, 0xe2, 0xe8, 0xef, 0x9b, 0x77, 0x6d, 0x32, 0x07, 0xdf, 0xbf, 0xdf, 0xc3, 0x2c, 0x1e, 0xdd,
	0xd1, 0x0d, 0x7e, 0xa2, 0x13, 0x55, 0x63, 0x83, 0x14, 0xd1, 0x57, 0x8d, 0xf5, 0x8a, 0xff, 0x13,
	0xb4, 0xb3, 0xbb, 0x7a, 0x8d, 0xeb, 0xcb, 0xc4, 0x42, 0xf4, 0xd3, 0xdd, 0xab, 0xe8, 0x79, 0xff,
	0xbe, 0x9b, 0x99, 0xc9, 0x6e, 0xa3, 0x8f, 0x16, 0xcd, 0x27, 0x38, 0x0b, 0x9d, 0x06, 0x42, 0x63,
	0x23, 0xc4, 0x22, 0xd9, 0x7f, 0x30, 0x34, 0xcc, 0xbd, 0x18, 0x16, 0x75, 0xe6, 0x22, 0x84, 0x76,
	0x26, 0xd3, 0x7a, 0x34, 0x30, 0x0d, 0x2d, 0xb6, 0xd1, 0x7c, 0xa1, 0x0b, 0x56, 0x1f, 0xa0, 0xc7,
	0x65, 0xf4, 0x23, 0x38, 0x0e, 0xdd, 0x2c, 0x5d, 0x46, 0x65, 0xc7, 0x97, 0x49, 0xc1, 0xbc, 0xff,
	0x0a, 0xa6, 0xf9, 0x04, 0x9f, 0x1a, 0xe7, 0x53, 0xfc, 0x04, 0x9c, 0x86, 0x1e, 0x23, 0xa3, 0xa6,
	0xe4, 0x48, 0xfc, 0x96, 0xdd, 0x9b, 0xb8, 0x23, 0x31, 0xce, 0x27, 0xa6, 0xf8, 0xc4, 0x04, 0xcf,
	0xce, 0x73, 0x42, 0x02, 0xfa, 0xec, 0xdc, 0x9a, 0xfb, 0x1b, 0x08, 0xfd, 0xc9, 0x71, 0xe3, 0x25,
	0x22, 0x7e, 0x62, 0x9c, 0x25, 0xda, 0xa6, 0xf8, 0x89, 0x24, 0x3f, 0x39, 0x99, 0x3e, 0x0d, 0xed,
	0x46, 0xd0, 0xc1, 0xf9, 0x72, 0x7e, 0xe0, 0x69, 0x19, 0xc5, 0xd8, 0x79, 0x0f, 0x3e, 0x9e, 0x4a,
	0xb0, 0x0b, 0xc0, 0x78, 0x68, 0xb1, 0xaf, 0x4b, 0xc6, 0xc7, 0x1e, 0x95, 0x51, 0xd3, 0xd3, 0x32,
	0x0a, 0x3d, 0x2b, 0xa3, 0xce, 0x49, 0x7e, 0x8a, 0x4f, 0x4c, 0xf3, 0xa9, 0x24, 0x9f, 0x4a, 0xf1,
	0x29, 0xe3, 0x76, 0xb1, 0x63, 0x00, 0x39, 0x52, 0x2c, 0x28, 0xdb, 0x1b, 0x44, 0xd6, 0xd9, 0x3d,
	0x61, 0x11, 0xf3, 0xa8, 0x2d, 0x9a, 0xf9, 0xc5, 0x07, 0x08, 0xa5, 0x87, 0xa1, 0xcd, 0x09, 0xac,
	0xd8, 0x57, 0x44, 0x8f, 0x38, 0x52, 0x56, 0x91, 0xc4, 0x24, 0x6f, 0x7c, 0x44, 0x60, 0x04, 0x7a,
	0x18, 0x0e, 0xb0, 0x76, 0x5f, 0xab, 0x9e, 0x54, 0x68, 0xef, 0xd3, 0x32, 0xea, 0x61, 0xf5, 0x4c,
	0xf0, 0xc9, 0x64, 0x9a, 0x87, 0x7e, 0xaf, 0x69, 0x74, 0x52, 0xf3, 0x4f, 0xcb, 0xe8, 0x24, 0xa5,
	0x9e, 0x98, 0xe0, 0x27, 0x12, 0x4b, 0xa1, 0x48, 0x8c, 0x3b, 0xb6, 0x14, 0x8a, 0x84, 0xb8, 0x26,
	0xfb, 0x60, 0xa8, 0x91, 0x96, 0x32, 0x8e, 0x87, 0xf6, 0x70, 0xbd, 0x4b, 0xa1, 0xc8, 0x49, 0xee,
	0xd4, 0x52, 0x28, 0x72, 0x9a, 0x3b, 0xb3, 0x14, 0x8a, 0x9c, 0xe1, 0x86, 0x97, 0x42, 0x91, 0x73,
	0x1c, 0x3f, 0xf4, 0x7f, 0xba, 0xa1, 0xe3, 0x92, 0x4a, 0x44, 0x9d, 0xd8, 0xe1, 0xf4, 0x53, 0xfe,
	0xe1, 0x74, 0x6f, 0xf4, 0xfc, 0x84, 0x5f, 0xf0, 0xdc, 0x1b, 0x14, 0x3a, 0x57, 0x2b, 0x26, 0xe4,
	0xe7, 0xf5, 0x7f, 0x6b, 0x6f, 0x5e, 0xbf, 0xe9, 0xef, 0x7f, 0xf7, 0x80, 0xfd, 0x7d, 0xb7, 0xa7,
	0xaf, 0xbc, 0x4c, 0x4f, 0xdf, 0xcf, 0xc7, 0xff, 0xfe, 0x4b, 0xf5, 0xf1, 0x7d, 0xbd, 0xfb, 0xec,
	0xcb, 0xf0, 0xee, 0xbd, 0x7e, 0xfd, 0xe6, 0x4b, 0xf7, 0xeb, 0xfd, 0x3d, 0xfa, 0x77, 0x5f, 0xbe,
	0x47, 0x5f, 0xc3, 0x97, 0x7f, 0x7b, 0x8f, 0x6e, 0x79, 0x8f, 0x9f, 0x5b, 0xee, 0x76, 0xc2, 0x8f,
	0xfb, 0x39, 0xd1, 0x6e, 0x57, 0x73, 0xb0, 0x2a, 0x92, 0xe0, 0x88, 0x18, 0xf4, 0x7b, 0xdc, 0x26,
	0xdb, 0x4d, 0x8a, 0x7a, 0xdc, 0xa4, 0x8a, 0x5b, 0x34, 0xbf, 0x17, 0xb7, 0xe8, 0x40, 0x1c, 0xa2,
	0xe0, 0x17, 0xe0, 0x10, 0x05, 0xdd, 0x0e, 0xd1, 0x6b, 0x7b, 0x73, 0x88, 0x42, 0xb6, 0x33, 0x74,
	0x61, 0x4f, 0xce, 0x50, 0xc8, 0x76, 0x84, 0xde, 0xdc, 0x83, 0x1f, 0xe4, 0x36, 0xe7, 0x15, 0x3f,
	0xc8, 0xf4, 0x67, 0x86, 0xfc, 0x62, 0x0f, 0x0b, 0x21, 0x57, 0x9c, 0xe1, 0xb8, 0x4f, 0x9c, 0x81,
	0x92, 0xec, 0x3d, 0xa6, 0x10, 0xaa, 0x8e, 0x29, 0xec, 0xc9, 0x3b, 0xf9, 0x73, 0xf6, 0x4a, 0x94,
	0x97, 0xe2, 0x95, 0xd4, 0xf1, 0x45, 0x0e, 0x02, 0x39, 0xef, 0x1d, 0x15, 0x76, 0x3d, 0xb9, 0xe0,
	0xc9, 0xd4, 0xa7, 0x87, 0xbc, 0x18, 0xad, 0xeb, 0xc1, 0x73, 0xe4, 0x7e, 0x94, 0x1e, 0x70, 0xe2,
	0xb3, 0xf6, 0x07, 0xcf, 0x51, 0xe5, 0x67, 0xfa, 0x88, 0x0b, 0x8d, 0x75, 0x3c, 0x78, 0x8e, 0x1c,
	0xbf, 0xd3, 0xe3, 0x35, 0x00, 0x56, 0xf4, 0xc1, 0x73, 0xe4, 0x5b, 0x92, 0x8e, 0x7b, 0xc0, 0x1b,
	0xf7, 0xe0, 0x39, 0x72, 0x3d, 0x49, 0x4f, 0xd5, 0x46, 0x62, 0x83, 0x0f, 0x9e, 0xa3, 0x5a, 0x85,
	0x1e, 0x34, 0x66, 0x1c, 0x15, 0x6a, 0xe7, 0x3a, 0x6c, 0x34, 0x76, 0x82, 0x3b, 0x59, 0x13, 0x93,
	0xfd, 0x9a, 0x83, 0x4e, 0xf3, 0x60, 0xaf, 0x0d, 0xca, 0x24, 0x1f, 0x74, 0x93, 0xde, 0xe3, 0xc6,
	0xec, 0x38, 0x34, 0x6c, 0x06, 0xa1, 0x0f, 0x39, 0xa1, 0xce, 0x0f, 0x6b, 0x43, 0x9d, 0x85, 0x7d,
	0x6d, 0xcf, 0x7e, 0x7a, 0xab, 0x70, 0xcf, 0x8f, 0x6a, 0xe3, 0x9e, 0xc5, 0xfd, 0x6d, 0xd2, 0x7e,
	0xea, 0xab, 0x41, 0x50, 0xd1, 0x1f, 0x04, 0x5d, 0xde, 0x33, 0x08, 0xf2, 0x53, 0xeb, 0x42, 0x44,
	0x3f, 0x45, 0x75, 0x21, 0xd1, 0xd2, 0x3e, 0x21, 0x91, 0x9f, 0x7e, 0x1f, 0x7c, 0xf4, 0x33, 0x54,
	0x17, 0x20, 0x5d, 0xdb, 0x2f, 0x40, 0xf2, 0xab, 0xc6, 0xcb, 0x47, 0x4b, 0xc8, 0x89, 0x96, 0xbe,
	0x8a, 0xa0, 0x26, 0xf0, 0x05, 0x80, 0x9a, 0x80, 0x1b, 0xd4, 0xf8, 0x03, 0x80, 0xe0, 0xce, 0x00,
	0xe0, 0xa0, 0x93, 0x0a, 0x7b, 0x03, 0x00, 0xa1, 0x03, 0x04, 0x00, 0xa1, 0x97, 0x08, 0x00, 0x42,
	0x5f, 0x13, 0x00, 0x30, 0x77, 0xaf, 0x6a, 0x1f, 0x7f, 0x5c, 0x46, 0x04, 0x06, 0xfc, 0xa3, 0x3d,
	0xc1, 0x09, 0x7e, 0x1a, 0xe2, 0x35, 0xc2, 0x3c, 0x11, 0x16, 0xdd, 0xe1, 0x93, 0xb3, 0x70, 0xaa,
	0x66, 0x80, 0xa7, 0x35, 0x39, 0x5e, 0x09, 0xea, 0x7c, 0x5d, 0xc0, 0x80, 0xf3, 0x24, 0xb1, 0x13,
	0x18, 0x00, 0xd7, 0xea, 0x81, 0x07, 0xc6, 0xbb, 0xbc, 0xc6, 0x57, 0x21, 0x0d, 0xa8, 0x60, 0x04,
	0x77, 0x8e, 0x71, 0xf1, 0x1d, 0x60, 0xc3, 0x67, 0xfd, 0xd0, 0x7a, 0x95, 0xe8, 0x8d, 0x38, 0x4e,
	0x23, 0x8e, 0xd3, 0x88, 0xe3, 0xfc, 0x79, 0xc5, 0x71, 0x92, 0xbb, 0x3b, 0x4c, 0xe1, 0x3a, 0x41,
	0xb1, 0xdf, 0xd8, 0xcf, 0xdc, 0x8e, 0x49, 0xfd, 0xda, 0xe9, 0xfb, 0x99, 0x9d, 0xd2, 0xf7, 0x35,
	0x13, 0xf5, 0x8d, 0x88, 0x53, 0xfd, 0x88, 0xd3, 0x0d, 0x57, 0xc0, 0x67, 0x77, 0xc9, 0x1d, 0x87,
	0xd1, 0xaf, 0x8a, 0xf6, 0x7c, 0x0b, 0x58, 0x86, 0xce, 0xcc, 0xc6, 0xf5, 0xb3, 0x6c, 0xdc, 0x51,
	0xbf, 0xbe, 0xb3, 0xde, 0xa7, 0x23, 0x02, 0xdb, 0x62, 0x8d, 0xd4, 0xdb, 0xed, 0x83, 0xc8, 0x7d,
	0x57, 0xe5, 0xb5, 0x1b, 0x11, 0xa8, 0x6f, 0x4c, 0x04, 0xea, 0x3b, 0xfb, 0xcc, 0x86, 0x37, 0xf2,
	0xe0, 0x07, 0x9c, 0x07, 0xff, 0x6a, 0x27, 0x92, 0x7b, 0xaa, 0x5c, 0x8d, 0x4f, 0x2f, 0xa0, 0x6f,
	0x6c, 0xd4, 0x70, 0xc7, 0x48, 0x61, 0xfa, 0xff, 0xa3, 0xa7, 0x1f, 0xc7, 0x0e, 0x7d, 0xf8, 0x71,
	0xec, 0xd0, 0x67, 0x1f, 0xc7, 0xd0, 0x4f, 0x9e, 0xc5, 0xd0, 0x2f, 0x9f, 0xc5, 0xd0, 0x6f, 0x9f,
	0xc5, 0xd0, 0xd3, 0x67, 0x31, 0xf4, 0xe1, 0xb3, 0x18, 0xfa, 0xdd, 0xb3, 0x18, 0xfa, 0xf4, 0x59,
	0xec, 0xd0, 0x67, 0xcf, 0x62, 0xe8, 0x7f, 0x7f, 0x12, 0x3b, 0xf4, 0xe8, 0x93, 0x18, 0x7a, 0xfa,
	0x49, 0xec, 0xd0, 0x87, 0x9f, 0xc4, 0x0e, 0x7d, 0xe7, 0xed, 0xbc, 0x52, 0x5c, 0xcf, 0x8f, 0x5a,
	0xbb, 0xfc, 0x68, 0x49, 0x1b, 0xb3, 0xcf, 0x3a, 0x9c, 0x2f, 0xaa, 0xca, 0xa6, 0x94, 0x23, 0xea,
	0x79, 0xab, 0x78, 0xac, 0xb8, 0x92, 0x57, 0xc6, 0xc8, 0xbb, 0xba, 0x31, 0x41, 0xc6, 0xcc, 0x7f,
	0xd8, 0x3c, 0x19, 0xf3, 0xcc, 0x93, 0x95, 0x30, 0x5b, 0xcb, 0xa9, 0xff, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xfe, 0x8c, 0x7b, 0x4f, 0x3a, 0x9a, 0x00, 0x00,
}

func (this *AzureHubVnetType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureHubVnetType)
	if !ok {
		that2, ok := that.(AzureHubVnetType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SpokeVnets) != len(that1.SpokeVnets) {
		return false
	}
	for i := range this.SpokeVnets {
		if !this.SpokeVnets[i].Equal(that1.SpokeVnets[i]) {
			return false
		}
	}
	if that1.ExpressRouteChoice == nil {
		if this.ExpressRouteChoice != nil {
			return false
		}
	} else if this.ExpressRouteChoice == nil {
		return false
	} else if !this.ExpressRouteChoice.Equal(that1.ExpressRouteChoice) {
		return false
	}
	return true
}
func (this *AzureHubVnetType_ExpressRouteDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureHubVnetType_ExpressRouteDisabled)
	if !ok {
		that2, ok := that.(AzureHubVnetType_ExpressRouteDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExpressRouteDisabled.Equal(that1.ExpressRouteDisabled) {
		return false
	}
	return true
}
func (this *AzureHubVnetType_ExpressRouteEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureHubVnetType_ExpressRouteEnabled)
	if !ok {
		that2, ok := that.(AzureHubVnetType_ExpressRouteEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExpressRouteEnabled.Equal(that1.ExpressRouteEnabled) {
		return false
	}
	return true
}
func (this *VnetPeeringType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnetPeeringType)
	if !ok {
		that2, ok := that.(VnetPeeringType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vnet.Equal(that1.Vnet) {
		return false
	}
	if that1.RoutingChoice == nil {
		if this.RoutingChoice != nil {
			return false
		}
	} else if this.RoutingChoice == nil {
		return false
	} else if !this.RoutingChoice.Equal(that1.RoutingChoice) {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	return true
}
func (this *VnetPeeringType_Auto) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnetPeeringType_Auto)
	if !ok {
		that2, ok := that.(VnetPeeringType_Auto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Auto.Equal(that1.Auto) {
		return false
	}
	return true
}
func (this *VnetPeeringType_Manual) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnetPeeringType_Manual)
	if !ok {
		that2, ok := that.(VnetPeeringType_Manual)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Manual.Equal(that1.Manual) {
		return false
	}
	return true
}
func (this *AzureVnetIngressGwType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressGwType)
	if !ok {
		that2, ok := that.(AzureVnetIngressGwType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if !this.AcceleratedNetworking.Equal(that1.AcceleratedNetworking) {
		return false
	}
	return true
}
func (this *AzureVnetIngressGwARType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressGwARType)
	if !ok {
		that2, ok := that.(AzureVnetIngressGwARType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Node.Equal(that1.Node) {
		return false
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if !this.AcceleratedNetworking.Equal(that1.AcceleratedNetworking) {
		return false
	}
	return true
}
func (this *ExpressRouteConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteConfigType)
	if !ok {
		that2, ok := that.(ExpressRouteConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Connections) != len(that1.Connections) {
		return false
	}
	for i := range this.Connections {
		if !this.Connections[i].Equal(that1.Connections[i]) {
			return false
		}
	}
	if that1.SkuChoice == nil {
		if this.SkuChoice != nil {
			return false
		}
	} else if this.SkuChoice == nil {
		return false
	} else if !this.SkuChoice.Equal(that1.SkuChoice) {
		return false
	}
	if !this.GatewaySubnet.Equal(that1.GatewaySubnet) {
		return false
	}
	if !this.RouteServerSubnet.Equal(that1.RouteServerSubnet) {
		return false
	}
	if that1.AsnChoice == nil {
		if this.AsnChoice != nil {
			return false
		}
	} else if this.AsnChoice == nil {
		return false
	} else if !this.AsnChoice.Equal(that1.AsnChoice) {
		return false
	}
	if that1.ConnectivityOptions == nil {
		if this.ConnectivityOptions != nil {
			return false
		}
	} else if this.ConnectivityOptions == nil {
		return false
	} else if !this.ConnectivityOptions.Equal(that1.ConnectivityOptions) {
		return false
	}
	if that1.SpokeVnetRoutes == nil {
		if this.SpokeVnetRoutes != nil {
			return false
		}
	} else if this.SpokeVnetRoutes == nil {
		return false
	} else if !this.SpokeVnetRoutes.Equal(that1.SpokeVnetRoutes) {
		return false
	}
	return true
}
func (this *ExpressRouteConfigType_SkuStandard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteConfigType_SkuStandard)
	if !ok {
		that2, ok := that.(ExpressRouteConfigType_SkuStandard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SkuStandard.Equal(that1.SkuStandard) {
		return false
	}
	return true
}
func (this *ExpressRouteConfigType_SkuErgw1Az) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteConfigType_SkuErgw1Az)
	if !ok {
		that2, ok := that.(ExpressRouteConfigType_SkuErgw1Az)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SkuErgw1Az.Equal(that1.SkuErgw1Az) {
		return false
	}
	return true
}
func (this *ExpressRouteConfigType_SkuHighPerf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteConfigType_SkuHighPerf)
	if !ok {
		that2, ok := that.(ExpressRouteConfigType_SkuHighPerf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SkuHighPerf.Equal(that1.SkuHighPerf) {
		return false
	}
	return true
}
func (this *ExpressRouteConfigType_SkuErgw2Az) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteConfigType_SkuErgw2Az)
	if !ok {
		that2, ok := that.(ExpressRouteConfigType_SkuErgw2Az)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SkuErgw2Az.Equal(that1.SkuErgw2Az) {
		return false
	}
	return true
}
func (this *ExpressRouteConfigType_AutoAsn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteConfigType_AutoAsn)
	if !ok {
		that2, ok := that.(ExpressRouteConfigType_AutoAsn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoAsn.Equal(that1.AutoAsn) {
		return false
	}
	return true
}
func (this *ExpressRouteConfigType_CustomAsn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteConfigType_CustomAsn)
	if !ok {
		that2, ok := that.(ExpressRouteConfigType_CustomAsn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomAsn != that1.CustomAsn {
		return false
	}
	return true
}
func (this *ExpressRouteConfigType_SiteRegistrationOverInternet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteConfigType_SiteRegistrationOverInternet)
	if !ok {
		that2, ok := that.(ExpressRouteConfigType_SiteRegistrationOverInternet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteRegistrationOverInternet.Equal(that1.SiteRegistrationOverInternet) {
		return false
	}
	return true
}
func (this *ExpressRouteConfigType_SiteRegistrationOverExpressRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteConfigType_SiteRegistrationOverExpressRoute)
	if !ok {
		that2, ok := that.(ExpressRouteConfigType_SiteRegistrationOverExpressRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteRegistrationOverExpressRoute.Equal(that1.SiteRegistrationOverExpressRoute) {
		return false
	}
	return true
}
func (this *ExpressRouteConfigType_AdvertiseToRouteServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteConfigType_AdvertiseToRouteServer)
	if !ok {
		that2, ok := that.(ExpressRouteConfigType_AdvertiseToRouteServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseToRouteServer.Equal(that1.AdvertiseToRouteServer) {
		return false
	}
	return true
}
func (this *ExpressRouteConfigType_DoNotAdvertiseToRouteServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteConfigType_DoNotAdvertiseToRouteServer)
	if !ok {
		that2, ok := that.(ExpressRouteConfigType_DoNotAdvertiseToRouteServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertiseToRouteServer.Equal(that1.DoNotAdvertiseToRouteServer) {
		return false
	}
	return true
}
func (this *ExpressRouteOtherSubscriptionConnection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteOtherSubscriptionConnection)
	if !ok {
		that2, ok := that.(ExpressRouteOtherSubscriptionConnection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CircuitId != that1.CircuitId {
		return false
	}
	if !this.AuthorizedKey.Equal(that1.AuthorizedKey) {
		return false
	}
	return true
}
func (this *ExpressRouteConnectionType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteConnectionType)
	if !ok {
		that2, ok := that.(ExpressRouteConnectionType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.SubscriptionChoice == nil {
		if this.SubscriptionChoice != nil {
			return false
		}
	} else if this.SubscriptionChoice == nil {
		return false
	} else if !this.SubscriptionChoice.Equal(that1.SubscriptionChoice) {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	return true
}
func (this *ExpressRouteConnectionType_CircuitId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteConnectionType_CircuitId)
	if !ok {
		that2, ok := that.(ExpressRouteConnectionType_CircuitId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CircuitId != that1.CircuitId {
		return false
	}
	return true
}
func (this *ExpressRouteConnectionType_OtherSubscription) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteConnectionType_OtherSubscription)
	if !ok {
		that2, ok := that.(ExpressRouteConnectionType_OtherSubscription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OtherSubscription.Equal(that1.OtherSubscription) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	if that1.InsideStaticRouteChoice == nil {
		if this.InsideStaticRouteChoice != nil {
			return false
		}
	} else if this.InsideStaticRouteChoice == nil {
		return false
	} else if !this.InsideStaticRouteChoice.Equal(that1.InsideStaticRouteChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	if that1.HubChoice == nil {
		if this.HubChoice != nil {
			return false
		}
	} else if this.HubChoice == nil {
		return false
	} else if !this.HubChoice.Equal(that1.HubChoice) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if !this.AcceleratedNetworking.Equal(that1.AcceleratedNetworking) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoInsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoInsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoInsideStaticRoutes.Equal(that1.NoInsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_InsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_InsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_InsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideStaticRoutes.Equal(that1.InsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupOutsideVn.Equal(that1.DcClusterGroupOutsideVn) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_DcClusterGroupInsideVn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_DcClusterGroupInsideVn)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_DcClusterGroupInsideVn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupInsideVn.Equal(that1.DcClusterGroupInsideVn) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NotHub) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NotHub)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NotHub)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotHub.Equal(that1.NotHub) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_Hub) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_Hub)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_Hub)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hub.Equal(that1.Hub) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Node.Equal(that1.Node) {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	if that1.InsideStaticRouteChoice == nil {
		if this.InsideStaticRouteChoice != nil {
			return false
		}
	} else if this.InsideStaticRouteChoice == nil {
		return false
	} else if !this.InsideStaticRouteChoice.Equal(that1.InsideStaticRouteChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	if that1.HubChoice == nil {
		if this.HubChoice != nil {
			return false
		}
	} else if this.HubChoice == nil {
		return false
	} else if !this.HubChoice.Equal(that1.HubChoice) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if !this.AcceleratedNetworking.Equal(that1.AcceleratedNetworking) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_NoInsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_NoInsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoInsideStaticRoutes.Equal(that1.NoInsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_InsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_InsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_InsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideStaticRoutes.Equal(that1.InsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupOutsideVn.Equal(that1.DcClusterGroupOutsideVn) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupInsideVn.Equal(that1.DcClusterGroupInsideVn) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_NotHub) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_NotHub)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_NotHub)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotHub.Equal(that1.NotHub) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_Hub) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_Hub)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_Hub)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hub.Equal(that1.Hub) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if that1.K8SClusterChoice == nil {
		if this.K8SClusterChoice != nil {
			return false
		}
	} else if this.K8SClusterChoice == nil {
		return false
	} else if !this.K8SClusterChoice.Equal(that1.K8SClusterChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	if that1.StorageClassChoice == nil {
		if this.StorageClassChoice != nil {
			return false
		}
	} else if this.StorageClassChoice == nil {
		return false
	} else if !this.StorageClassChoice.Equal(that1.StorageClassChoice) {
		return false
	}
	if !this.AcceleratedNetworking.Equal(that1.AcceleratedNetworking) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_DcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_DcClusterGroup)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_DcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroup.Equal(that1.DcClusterGroup) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoK8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoK8SCluster)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoK8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoK8SCluster.Equal(that1.NoK8SCluster) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_K8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_K8SCluster)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_K8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SCluster.Equal(that1.K8SCluster) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_DefaultStorage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_DefaultStorage)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_DefaultStorage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultStorage.Equal(that1.DefaultStorage) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_StorageClassList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_StorageClassList)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_StorageClassList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StorageClassList.Equal(that1.StorageClassList) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	if !this.Node.Equal(that1.Node) {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	if that1.K8SClusterChoice == nil {
		if this.K8SClusterChoice != nil {
			return false
		}
	} else if this.K8SClusterChoice == nil {
		return false
	} else if !this.K8SClusterChoice.Equal(that1.K8SClusterChoice) {
		return false
	}
	if that1.StorageClassChoice == nil {
		if this.StorageClassChoice != nil {
			return false
		}
	} else if this.StorageClassChoice == nil {
		return false
	} else if !this.StorageClassChoice.Equal(that1.StorageClassChoice) {
		return false
	}
	if !this.AcceleratedNetworking.Equal(that1.AcceleratedNetworking) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_DcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_DcClusterGroup)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_DcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroup.Equal(that1.DcClusterGroup) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_NoK8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_NoK8SCluster)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_NoK8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoK8SCluster.Equal(that1.NoK8SCluster) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_K8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_K8SCluster)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_K8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SCluster.Equal(that1.K8SCluster) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_DefaultStorage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_DefaultStorage)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_DefaultStorage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultStorage.Equal(that1.DefaultStorage) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_StorageClassList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_StorageClassList)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_StorageClassList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StorageClassList.Equal(that1.StorageClassList) {
		return false
	}
	return true
}
func (this *AzureVnetIngressGwReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressGwReplaceType)
	if !ok {
		that2, ok := that.(AzureVnetIngressGwReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AzureVnetIngressGwARReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressGwARReplaceType)
	if !ok {
		that2, ok := that.(AzureVnetIngressGwARReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VnetIpPrefixesType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnetIpPrefixesType)
	if !ok {
		that2, ok := that.(VnetIpPrefixesType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vnet.Equal(that1.Vnet) {
		return false
	}
	if len(this.Prefixes) != len(that1.Prefixes) {
		return false
	}
	for i := range this.Prefixes {
		if this.Prefixes[i] != that1.Prefixes[i] {
			return false
		}
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.InsideStaticRouteChoice == nil {
		if this.InsideStaticRouteChoice != nil {
			return false
		}
	} else if this.InsideStaticRouteChoice == nil {
		return false
	} else if !this.InsideStaticRouteChoice.Equal(that1.InsideStaticRouteChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	if that1.HubChoice == nil {
		if this.HubChoice != nil {
			return false
		}
	} else if this.HubChoice == nil {
		return false
	} else if !this.HubChoice.Equal(that1.HubChoice) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoInsideStaticRoutes.Equal(that1.NoInsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideStaticRoutes.Equal(that1.InsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupOutsideVn.Equal(that1.DcClusterGroupOutsideVn) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupInsideVn.Equal(that1.DcClusterGroupInsideVn) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NotHub) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NotHub)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NotHub)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotHub.Equal(that1.NotHub) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_Hub) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_Hub)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_Hub)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hub.Equal(that1.Hub) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.InsideStaticRouteChoice == nil {
		if this.InsideStaticRouteChoice != nil {
			return false
		}
	} else if this.InsideStaticRouteChoice == nil {
		return false
	} else if !this.InsideStaticRouteChoice.Equal(that1.InsideStaticRouteChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	if that1.HubChoice == nil {
		if this.HubChoice != nil {
			return false
		}
	} else if this.HubChoice == nil {
		return false
	} else if !this.HubChoice.Equal(that1.HubChoice) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoInsideStaticRoutes.Equal(that1.NoInsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideStaticRoutes.Equal(that1.InsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupOutsideVn.Equal(that1.DcClusterGroupOutsideVn) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupInsideVn.Equal(that1.DcClusterGroupInsideVn) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_NotHub) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_NotHub)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_NotHub)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotHub.Equal(that1.NotHub) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARReplaceType_Hub) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARReplaceType_Hub)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARReplaceType_Hub)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hub.Equal(that1.Hub) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_DcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_DcClusterGroup)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_DcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroup.Equal(that1.DcClusterGroup) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType_DcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType_DcClusterGroup)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType_DcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroup.Equal(that1.DcClusterGroup) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *AzureVnetSiteInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetSiteInfoType)
	if !ok {
		that2, ok := that.(AzureVnetSiteInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PublicIps) != len(that1.PublicIps) {
		return false
	}
	for i := range this.PublicIps {
		if this.PublicIps[i] != that1.PublicIps[i] {
			return false
		}
	}
	if len(this.PrivateIps) != len(that1.PrivateIps) {
		return false
	}
	for i := range this.PrivateIps {
		if this.PrivateIps[i] != that1.PrivateIps[i] {
			return false
		}
	}
	if len(this.SpokeVnetPrefixInfo) != len(that1.SpokeVnetPrefixInfo) {
		return false
	}
	for i := range this.SpokeVnetPrefixInfo {
		if !this.SpokeVnetPrefixInfo[i].Equal(that1.SpokeVnetPrefixInfo[i]) {
			return false
		}
	}
	if !this.ExpressRouteInfo.Equal(that1.ExpressRouteInfo) {
		return false
	}
	if len(this.NodeInfo) != len(that1.NodeInfo) {
		return false
	}
	for i := range this.NodeInfo {
		if !this.NodeInfo[i].Equal(that1.NodeInfo[i]) {
			return false
		}
	}
	if !this.Vnet.Equal(that1.Vnet) {
		return false
	}
	return true
}
func (this *VNETInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VNETInfoType)
	if !ok {
		that2, ok := that.(VNETInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VnetName != that1.VnetName {
		return false
	}
	if this.ResourceId != that1.ResourceId {
		return false
	}
	return true
}
func (this *ExpressRouteInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressRouteInfo)
	if !ok {
		that2, ok := that.(ExpressRouteInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RouteServerIps) != len(that1.RouteServerIps) {
		return false
	}
	for i := range this.RouteServerIps {
		if this.RouteServerIps[i] != that1.RouteServerIps[i] {
			return false
		}
	}
	if this.RouteServerAsn != that1.RouteServerAsn {
		return false
	}
	return true
}
func (this *NodeInstanceNameType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInstanceNameType)
	if !ok {
		that2, ok := that.(NodeInstanceNameType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeInstanceName != that1.NodeInstanceName {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResourceGroup != that1.ResourceGroup {
		return false
	}
	if that1.RegionChoice == nil {
		if this.RegionChoice != nil {
			return false
		}
	} else if this.RegionChoice == nil {
		return false
	} else if !this.RegionChoice.Equal(that1.RegionChoice) {
		return false
	}
	if !this.Vnet.Equal(that1.Vnet) {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.MachineType != that1.MachineType {
		return false
	}
	if that1.WorkerNodes == nil {
		if this.WorkerNodes != nil {
			return false
		}
	} else if this.WorkerNodes == nil {
		return false
	} else if !this.WorkerNodes.Equal(that1.WorkerNodes) {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if !this.Sw.Equal(that1.Sw) {
		return false
	}
	if !this.Os.Equal(that1.Os) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if len(this.VipParamsPerAz) != len(that1.VipParamsPerAz) {
		return false
	}
	for i := range this.VipParamsPerAz {
		if !this.VipParamsPerAz[i].Equal(that1.VipParamsPerAz[i]) {
			return false
		}
	}
	if this.SiteToSiteTunnelIp != that1.SiteToSiteTunnelIp {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if !this.UserModificationTimestamp.Equal(that1.UserModificationTimestamp) {
		return false
	}
	if this.SuggestedAction != that1.SuggestedAction {
		return false
	}
	if this.ErrorDescription != that1.ErrorDescription {
		return false
	}
	if len(this.SiteErrors) != len(that1.SiteErrors) {
		return false
	}
	for i := range this.SiteErrors {
		if !this.SiteErrors[i].Equal(that1.SiteErrors[i]) {
			return false
		}
	}
	if this.ValidationState != that1.ValidationState {
		return false
	}
	if !this.CustomDns.Equal(that1.CustomDns) {
		return false
	}
	if !this.TfParams.Equal(that1.TfParams) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if !this.CloudSiteInfo.Equal(that1.CloudSiteInfo) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AzureRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AzureRegion)
	if !ok {
		that2, ok := that.(GlobalSpecType_AzureRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AzureRegion != that1.AzureRegion {
		return false
	}
	return true
}
func (this *GlobalSpecType_AlternateRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AlternateRegion)
	if !ok {
		that2, ok := that.(GlobalSpecType_AlternateRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AlternateRegion != that1.AlternateRegion {
		return false
	}
	return true
}
func (this *GlobalSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IngressGw)
	if !ok {
		that2, ok := that.(GlobalSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(GlobalSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *GlobalSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(GlobalSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IngressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IngressGwAr)
	if !ok {
		that2, ok := that.(GlobalSpecType_IngressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGwAr.Equal(that1.IngressGwAr) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IngressEgressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IngressEgressGwAr)
	if !ok {
		that2, ok := that.(GlobalSpecType_IngressEgressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGwAr.Equal(that1.IngressEgressGwAr) {
		return false
	}
	return true
}
func (this *GlobalSpecType_VoltstackClusterAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_VoltstackClusterAr)
	if !ok {
		that2, ok := that.(GlobalSpecType_VoltstackClusterAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackClusterAr.Equal(that1.VoltstackClusterAr) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AzureCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AzureCred)
	if !ok {
		that2, ok := that.(GlobalSpecType_AzureCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureCred.Equal(that1.AzureCred) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Assisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Assisted)
	if !ok {
		that2, ok := that.(GlobalSpecType_Assisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assisted.Equal(that1.Assisted) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NodesPerAz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NodesPerAz)
	if !ok {
		that2, ok := that.(GlobalSpecType_NodesPerAz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	return true
}
func (this *GlobalSpecType_TotalNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TotalNodes)
	if !ok {
		that2, ok := that.(GlobalSpecType_TotalNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalNodes != that1.TotalNodes {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoWorkerNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoWorkerNodes)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoWorkerNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoWorkerNodes.Equal(that1.NoWorkerNodes) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResourceGroup != that1.ResourceGroup {
		return false
	}
	if that1.RegionChoice == nil {
		if this.RegionChoice != nil {
			return false
		}
	} else if this.RegionChoice == nil {
		return false
	} else if !this.RegionChoice.Equal(that1.RegionChoice) {
		return false
	}
	if !this.Vnet.Equal(that1.Vnet) {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.MachineType != that1.MachineType {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if !this.Sw.Equal(that1.Sw) {
		return false
	}
	if !this.Os.Equal(that1.Os) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if that1.WorkerNodes == nil {
		if this.WorkerNodes != nil {
			return false
		}
	} else if this.WorkerNodes == nil {
		return false
	} else if !this.WorkerNodes.Equal(that1.WorkerNodes) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if !this.CustomDns.Equal(that1.CustomDns) {
		return false
	}
	return true
}
func (this *CreateSpecType_AzureRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AzureRegion)
	if !ok {
		that2, ok := that.(CreateSpecType_AzureRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AzureRegion != that1.AzureRegion {
		return false
	}
	return true
}
func (this *CreateSpecType_AlternateRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AlternateRegion)
	if !ok {
		that2, ok := that.(CreateSpecType_AlternateRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AlternateRegion != that1.AlternateRegion {
		return false
	}
	return true
}
func (this *CreateSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IngressGw)
	if !ok {
		that2, ok := that.(CreateSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *CreateSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(CreateSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *CreateSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(CreateSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *CreateSpecType_IngressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IngressGwAr)
	if !ok {
		that2, ok := that.(CreateSpecType_IngressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGwAr.Equal(that1.IngressGwAr) {
		return false
	}
	return true
}
func (this *CreateSpecType_IngressEgressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IngressEgressGwAr)
	if !ok {
		that2, ok := that.(CreateSpecType_IngressEgressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGwAr.Equal(that1.IngressEgressGwAr) {
		return false
	}
	return true
}
func (this *CreateSpecType_VoltstackClusterAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_VoltstackClusterAr)
	if !ok {
		that2, ok := that.(CreateSpecType_VoltstackClusterAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackClusterAr.Equal(that1.VoltstackClusterAr) {
		return false
	}
	return true
}
func (this *CreateSpecType_AzureCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AzureCred)
	if !ok {
		that2, ok := that.(CreateSpecType_AzureCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureCred.Equal(that1.AzureCred) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(CreateSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(CreateSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *CreateSpecType_NodesPerAz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NodesPerAz)
	if !ok {
		that2, ok := that.(CreateSpecType_NodesPerAz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	return true
}
func (this *CreateSpecType_TotalNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_TotalNodes)
	if !ok {
		that2, ok := that.(CreateSpecType_TotalNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalNodes != that1.TotalNodes {
		return false
	}
	return true
}
func (this *CreateSpecType_NoWorkerNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoWorkerNodes)
	if !ok {
		that2, ok := that.(CreateSpecType_NoWorkerNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoWorkerNodes.Equal(that1.NoWorkerNodes) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *CreateSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(CreateSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *CreateSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(CreateSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.WorkerNodes == nil {
		if this.WorkerNodes != nil {
			return false
		}
	} else if this.WorkerNodes == nil {
		return false
	} else if !this.WorkerNodes.Equal(that1.WorkerNodes) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if !this.CustomDns.Equal(that1.CustomDns) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IngressGw)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(ReplaceSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IngressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IngressGwAr)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IngressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGwAr.Equal(that1.IngressGwAr) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IngressEgressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IngressEgressGwAr)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IngressEgressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGwAr.Equal(that1.IngressEgressGwAr) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_VoltstackClusterAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_VoltstackClusterAr)
	if !ok {
		that2, ok := that.(ReplaceSpecType_VoltstackClusterAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackClusterAr.Equal(that1.VoltstackClusterAr) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AzureCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AzureCred)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AzureCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureCred.Equal(that1.AzureCred) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NodesPerAz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NodesPerAz)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NodesPerAz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	return true
}
func (this *ReplaceSpecType_TotalNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_TotalNodes)
	if !ok {
		that2, ok := that.(ReplaceSpecType_TotalNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalNodes != that1.TotalNodes {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoWorkerNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoWorkerNodes)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoWorkerNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoWorkerNodes.Equal(that1.NoWorkerNodes) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResourceGroup != that1.ResourceGroup {
		return false
	}
	if that1.RegionChoice == nil {
		if this.RegionChoice != nil {
			return false
		}
	} else if this.RegionChoice == nil {
		return false
	} else if !this.RegionChoice.Equal(that1.RegionChoice) {
		return false
	}
	if !this.Vnet.Equal(that1.Vnet) {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.MachineType != that1.MachineType {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if this.SiteState != that1.SiteState {
		return false
	}
	if len(this.VipParamsPerAz) != len(that1.VipParamsPerAz) {
		return false
	}
	for i := range this.VipParamsPerAz {
		if !this.VipParamsPerAz[i].Equal(that1.VipParamsPerAz[i]) {
			return false
		}
	}
	if that1.WorkerNodes == nil {
		if this.WorkerNodes != nil {
			return false
		}
	} else if this.WorkerNodes == nil {
		return false
	} else if !this.WorkerNodes.Equal(that1.WorkerNodes) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if !this.UserModificationTimestamp.Equal(that1.UserModificationTimestamp) {
		return false
	}
	if this.SuggestedAction != that1.SuggestedAction {
		return false
	}
	if this.ErrorDescription != that1.ErrorDescription {
		return false
	}
	if len(this.SiteErrors) != len(that1.SiteErrors) {
		return false
	}
	for i := range this.SiteErrors {
		if !this.SiteErrors[i].Equal(that1.SiteErrors[i]) {
			return false
		}
	}
	if this.ValidationState != that1.ValidationState {
		return false
	}
	if !this.CustomDns.Equal(that1.CustomDns) {
		return false
	}
	if !this.CloudSiteInfo.Equal(that1.CloudSiteInfo) {
		return false
	}
	return true
}
func (this *GetSpecType_AzureRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AzureRegion)
	if !ok {
		that2, ok := that.(GetSpecType_AzureRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AzureRegion != that1.AzureRegion {
		return false
	}
	return true
}
func (this *GetSpecType_AlternateRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AlternateRegion)
	if !ok {
		that2, ok := that.(GetSpecType_AlternateRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AlternateRegion != that1.AlternateRegion {
		return false
	}
	return true
}
func (this *GetSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IngressGw)
	if !ok {
		that2, ok := that.(GetSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *GetSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(GetSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *GetSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(GetSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *GetSpecType_IngressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IngressGwAr)
	if !ok {
		that2, ok := that.(GetSpecType_IngressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGwAr.Equal(that1.IngressGwAr) {
		return false
	}
	return true
}
func (this *GetSpecType_IngressEgressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IngressEgressGwAr)
	if !ok {
		that2, ok := that.(GetSpecType_IngressEgressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGwAr.Equal(that1.IngressEgressGwAr) {
		return false
	}
	return true
}
func (this *GetSpecType_VoltstackClusterAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_VoltstackClusterAr)
	if !ok {
		that2, ok := that.(GetSpecType_VoltstackClusterAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackClusterAr.Equal(that1.VoltstackClusterAr) {
		return false
	}
	return true
}
func (this *GetSpecType_AzureCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AzureCred)
	if !ok {
		that2, ok := that.(GetSpecType_AzureCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureCred.Equal(that1.AzureCred) {
		return false
	}
	return true
}
func (this *GetSpecType_Assisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Assisted)
	if !ok {
		that2, ok := that.(GetSpecType_Assisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assisted.Equal(that1.Assisted) {
		return false
	}
	return true
}
func (this *GetSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GetSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GetSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GetSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GetSpecType_NodesPerAz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NodesPerAz)
	if !ok {
		that2, ok := that.(GetSpecType_NodesPerAz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	return true
}
func (this *GetSpecType_TotalNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_TotalNodes)
	if !ok {
		that2, ok := that.(GetSpecType_TotalNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalNodes != that1.TotalNodes {
		return false
	}
	return true
}
func (this *GetSpecType_NoWorkerNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoWorkerNodes)
	if !ok {
		that2, ok := that.(GetSpecType_NoWorkerNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoWorkerNodes.Equal(that1.NoWorkerNodes) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *GetSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(GetSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *GetSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(GetSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *AzureHubVnetType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&azure_vnet_site.AzureHubVnetType{")
	if this.SpokeVnets != nil {
		s = append(s, "SpokeVnets: "+fmt.Sprintf("%#v", this.SpokeVnets)+",\n")
	}
	if this.ExpressRouteChoice != nil {
		s = append(s, "ExpressRouteChoice: "+fmt.Sprintf("%#v", this.ExpressRouteChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureHubVnetType_ExpressRouteDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureHubVnetType_ExpressRouteDisabled{` +
		`ExpressRouteDisabled:` + fmt.Sprintf("%#v", this.ExpressRouteDisabled) + `}`}, ", ")
	return s
}
func (this *AzureHubVnetType_ExpressRouteEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureHubVnetType_ExpressRouteEnabled{` +
		`ExpressRouteEnabled:` + fmt.Sprintf("%#v", this.ExpressRouteEnabled) + `}`}, ", ")
	return s
}
func (this *VnetPeeringType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&azure_vnet_site.VnetPeeringType{")
	if this.Vnet != nil {
		s = append(s, "Vnet: "+fmt.Sprintf("%#v", this.Vnet)+",\n")
	}
	if this.RoutingChoice != nil {
		s = append(s, "RoutingChoice: "+fmt.Sprintf("%#v", this.RoutingChoice)+",\n")
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VnetPeeringType_Auto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.VnetPeeringType_Auto{` +
		`Auto:` + fmt.Sprintf("%#v", this.Auto) + `}`}, ", ")
	return s
}
func (this *VnetPeeringType_Manual) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.VnetPeeringType_Manual{` +
		`Manual:` + fmt.Sprintf("%#v", this.Manual) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressGwType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&azure_vnet_site.AzureVnetIngressGwType{")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	if this.AcceleratedNetworking != nil {
		s = append(s, "AcceleratedNetworking: "+fmt.Sprintf("%#v", this.AcceleratedNetworking)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressGwARType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&azure_vnet_site.AzureVnetIngressGwARType{")
	if this.Node != nil {
		s = append(s, "Node: "+fmt.Sprintf("%#v", this.Node)+",\n")
	}
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	if this.AcceleratedNetworking != nil {
		s = append(s, "AcceleratedNetworking: "+fmt.Sprintf("%#v", this.AcceleratedNetworking)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExpressRouteConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&azure_vnet_site.ExpressRouteConfigType{")
	if this.Connections != nil {
		s = append(s, "Connections: "+fmt.Sprintf("%#v", this.Connections)+",\n")
	}
	if this.SkuChoice != nil {
		s = append(s, "SkuChoice: "+fmt.Sprintf("%#v", this.SkuChoice)+",\n")
	}
	if this.GatewaySubnet != nil {
		s = append(s, "GatewaySubnet: "+fmt.Sprintf("%#v", this.GatewaySubnet)+",\n")
	}
	if this.RouteServerSubnet != nil {
		s = append(s, "RouteServerSubnet: "+fmt.Sprintf("%#v", this.RouteServerSubnet)+",\n")
	}
	if this.AsnChoice != nil {
		s = append(s, "AsnChoice: "+fmt.Sprintf("%#v", this.AsnChoice)+",\n")
	}
	if this.ConnectivityOptions != nil {
		s = append(s, "ConnectivityOptions: "+fmt.Sprintf("%#v", this.ConnectivityOptions)+",\n")
	}
	if this.SpokeVnetRoutes != nil {
		s = append(s, "SpokeVnetRoutes: "+fmt.Sprintf("%#v", this.SpokeVnetRoutes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExpressRouteConfigType_SkuStandard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ExpressRouteConfigType_SkuStandard{` +
		`SkuStandard:` + fmt.Sprintf("%#v", this.SkuStandard) + `}`}, ", ")
	return s
}
func (this *ExpressRouteConfigType_SkuErgw1Az) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ExpressRouteConfigType_SkuErgw1Az{` +
		`SkuErgw1Az:` + fmt.Sprintf("%#v", this.SkuErgw1Az) + `}`}, ", ")
	return s
}
func (this *ExpressRouteConfigType_SkuHighPerf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ExpressRouteConfigType_SkuHighPerf{` +
		`SkuHighPerf:` + fmt.Sprintf("%#v", this.SkuHighPerf) + `}`}, ", ")
	return s
}
func (this *ExpressRouteConfigType_SkuErgw2Az) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ExpressRouteConfigType_SkuErgw2Az{` +
		`SkuErgw2Az:` + fmt.Sprintf("%#v", this.SkuErgw2Az) + `}`}, ", ")
	return s
}
func (this *ExpressRouteConfigType_AutoAsn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ExpressRouteConfigType_AutoAsn{` +
		`AutoAsn:` + fmt.Sprintf("%#v", this.AutoAsn) + `}`}, ", ")
	return s
}
func (this *ExpressRouteConfigType_CustomAsn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ExpressRouteConfigType_CustomAsn{` +
		`CustomAsn:` + fmt.Sprintf("%#v", this.CustomAsn) + `}`}, ", ")
	return s
}
func (this *ExpressRouteConfigType_SiteRegistrationOverInternet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ExpressRouteConfigType_SiteRegistrationOverInternet{` +
		`SiteRegistrationOverInternet:` + fmt.Sprintf("%#v", this.SiteRegistrationOverInternet) + `}`}, ", ")
	return s
}
func (this *ExpressRouteConfigType_SiteRegistrationOverExpressRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ExpressRouteConfigType_SiteRegistrationOverExpressRoute{` +
		`SiteRegistrationOverExpressRoute:` + fmt.Sprintf("%#v", this.SiteRegistrationOverExpressRoute) + `}`}, ", ")
	return s
}
func (this *ExpressRouteConfigType_AdvertiseToRouteServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ExpressRouteConfigType_AdvertiseToRouteServer{` +
		`AdvertiseToRouteServer:` + fmt.Sprintf("%#v", this.AdvertiseToRouteServer) + `}`}, ", ")
	return s
}
func (this *ExpressRouteConfigType_DoNotAdvertiseToRouteServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ExpressRouteConfigType_DoNotAdvertiseToRouteServer{` +
		`DoNotAdvertiseToRouteServer:` + fmt.Sprintf("%#v", this.DoNotAdvertiseToRouteServer) + `}`}, ", ")
	return s
}
func (this *ExpressRouteOtherSubscriptionConnection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&azure_vnet_site.ExpressRouteOtherSubscriptionConnection{")
	s = append(s, "CircuitId: "+fmt.Sprintf("%#v", this.CircuitId)+",\n")
	if this.AuthorizedKey != nil {
		s = append(s, "AuthorizedKey: "+fmt.Sprintf("%#v", this.AuthorizedKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExpressRouteConnectionType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&azure_vnet_site.ExpressRouteConnectionType{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SubscriptionChoice != nil {
		s = append(s, "SubscriptionChoice: "+fmt.Sprintf("%#v", this.SubscriptionChoice)+",\n")
	}
	s = append(s, "Weight: "+fmt.Sprintf("%#v", this.Weight)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExpressRouteConnectionType_CircuitId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ExpressRouteConnectionType_CircuitId{` +
		`CircuitId:` + fmt.Sprintf("%#v", this.CircuitId) + `}`}, ", ")
	return s
}
func (this *ExpressRouteConnectionType_OtherSubscription) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ExpressRouteConnectionType_OtherSubscription{` +
		`OtherSubscription:` + fmt.Sprintf("%#v", this.OtherSubscription) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 27)
	s = append(s, "&azure_vnet_site.AzureVnetIngressEgressGwType{")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	if this.InsideStaticRouteChoice != nil {
		s = append(s, "InsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.InsideStaticRouteChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	if this.HubChoice != nil {
		s = append(s, "HubChoice: "+fmt.Sprintf("%#v", this.HubChoice)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	if this.AcceleratedNetworking != nil {
		s = append(s, "AcceleratedNetworking: "+fmt.Sprintf("%#v", this.AcceleratedNetworking)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressEgressGwType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoInsideStaticRoutes{` +
		`NoInsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoInsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_InsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_InsideStaticRoutes{` +
		`InsideStaticRoutes:` + fmt.Sprintf("%#v", this.InsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn{` +
		`DcClusterGroupOutsideVn:` + fmt.Sprintf("%#v", this.DcClusterGroupOutsideVn) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_DcClusterGroupInsideVn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_DcClusterGroupInsideVn{` +
		`DcClusterGroupInsideVn:` + fmt.Sprintf("%#v", this.DcClusterGroupInsideVn) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_NotHub) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NotHub{` +
		`NotHub:` + fmt.Sprintf("%#v", this.NotHub) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_Hub) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_Hub{` +
		`Hub:` + fmt.Sprintf("%#v", this.Hub) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 27)
	s = append(s, "&azure_vnet_site.AzureVnetIngressEgressGwARType{")
	if this.Node != nil {
		s = append(s, "Node: "+fmt.Sprintf("%#v", this.Node)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	if this.InsideStaticRouteChoice != nil {
		s = append(s, "InsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.InsideStaticRouteChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	if this.HubChoice != nil {
		s = append(s, "HubChoice: "+fmt.Sprintf("%#v", this.HubChoice)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	if this.AcceleratedNetworking != nil {
		s = append(s, "AcceleratedNetworking: "+fmt.Sprintf("%#v", this.AcceleratedNetworking)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressEgressGwARType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_NoInsideStaticRoutes{` +
		`NoInsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoInsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_InsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_InsideStaticRoutes{` +
		`InsideStaticRoutes:` + fmt.Sprintf("%#v", this.InsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn{` +
		`DcClusterGroupOutsideVn:` + fmt.Sprintf("%#v", this.DcClusterGroupOutsideVn) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn{` +
		`DcClusterGroupInsideVn:` + fmt.Sprintf("%#v", this.DcClusterGroupInsideVn) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NotHub) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_NotHub{` +
		`NotHub:` + fmt.Sprintf("%#v", this.NotHub) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_Hub) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_Hub{` +
		`Hub:` + fmt.Sprintf("%#v", this.Hub) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&azure_vnet_site.AzureVnetVoltstackClusterType{")
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.K8SClusterChoice != nil {
		s = append(s, "K8SClusterChoice: "+fmt.Sprintf("%#v", this.K8SClusterChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	if this.StorageClassChoice != nil {
		s = append(s, "StorageClassChoice: "+fmt.Sprintf("%#v", this.StorageClassChoice)+",\n")
	}
	if this.AcceleratedNetworking != nil {
		s = append(s, "AcceleratedNetworking: "+fmt.Sprintf("%#v", this.AcceleratedNetworking)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetVoltstackClusterType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_DcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_DcClusterGroup{` +
		`DcClusterGroup:` + fmt.Sprintf("%#v", this.DcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoK8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoK8SCluster{` +
		`NoK8SCluster:` + fmt.Sprintf("%#v", this.NoK8SCluster) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_K8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_K8SCluster{` +
		`K8SCluster:` + fmt.Sprintf("%#v", this.K8SCluster) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_DefaultStorage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_DefaultStorage{` +
		`DefaultStorage:` + fmt.Sprintf("%#v", this.DefaultStorage) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_StorageClassList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_StorageClassList{` +
		`StorageClassList:` + fmt.Sprintf("%#v", this.StorageClassList) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&azure_vnet_site.AzureVnetVoltstackClusterARType{")
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	if this.Node != nil {
		s = append(s, "Node: "+fmt.Sprintf("%#v", this.Node)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	if this.K8SClusterChoice != nil {
		s = append(s, "K8SClusterChoice: "+fmt.Sprintf("%#v", this.K8SClusterChoice)+",\n")
	}
	if this.StorageClassChoice != nil {
		s = append(s, "StorageClassChoice: "+fmt.Sprintf("%#v", this.StorageClassChoice)+",\n")
	}
	if this.AcceleratedNetworking != nil {
		s = append(s, "AcceleratedNetworking: "+fmt.Sprintf("%#v", this.AcceleratedNetworking)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetVoltstackClusterARType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_DcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_DcClusterGroup{` +
		`DcClusterGroup:` + fmt.Sprintf("%#v", this.DcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoK8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_NoK8SCluster{` +
		`NoK8SCluster:` + fmt.Sprintf("%#v", this.NoK8SCluster) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_K8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_K8SCluster{` +
		`K8SCluster:` + fmt.Sprintf("%#v", this.K8SCluster) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_DefaultStorage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_DefaultStorage{` +
		`DefaultStorage:` + fmt.Sprintf("%#v", this.DefaultStorage) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_StorageClassList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_StorageClassList{` +
		`StorageClassList:` + fmt.Sprintf("%#v", this.StorageClassList) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressGwReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&azure_vnet_site.AzureVnetIngressGwReplaceType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressGwARReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&azure_vnet_site.AzureVnetIngressGwARReplaceType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VnetIpPrefixesType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&azure_vnet_site.VnetIpPrefixesType{")
	if this.Vnet != nil {
		s = append(s, "Vnet: "+fmt.Sprintf("%#v", this.Vnet)+",\n")
	}
	s = append(s, "Prefixes: "+fmt.Sprintf("%#v", this.Prefixes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressEgressGwReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 24)
	s = append(s, "&azure_vnet_site.AzureVnetIngressEgressGwReplaceType{")
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.InsideStaticRouteChoice != nil {
		s = append(s, "InsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.InsideStaticRouteChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	if this.HubChoice != nil {
		s = append(s, "HubChoice: "+fmt.Sprintf("%#v", this.HubChoice)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes{` +
		`NoInsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoInsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes{` +
		`InsideStaticRoutes:` + fmt.Sprintf("%#v", this.InsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn{` +
		`DcClusterGroupOutsideVn:` + fmt.Sprintf("%#v", this.DcClusterGroupOutsideVn) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn{` +
		`DcClusterGroupInsideVn:` + fmt.Sprintf("%#v", this.DcClusterGroupInsideVn) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NotHub) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NotHub{` +
		`NotHub:` + fmt.Sprintf("%#v", this.NotHub) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_Hub) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_Hub{` +
		`Hub:` + fmt.Sprintf("%#v", this.Hub) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 24)
	s = append(s, "&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType{")
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.InsideStaticRouteChoice != nil {
		s = append(s, "InsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.InsideStaticRouteChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	if this.HubChoice != nil {
		s = append(s, "HubChoice: "+fmt.Sprintf("%#v", this.HubChoice)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes{` +
		`NoInsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoInsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes{` +
		`InsideStaticRoutes:` + fmt.Sprintf("%#v", this.InsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn{` +
		`DcClusterGroupOutsideVn:` + fmt.Sprintf("%#v", this.DcClusterGroupOutsideVn) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn{` +
		`DcClusterGroupInsideVn:` + fmt.Sprintf("%#v", this.DcClusterGroupInsideVn) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_NotHub) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_NotHub{` +
		`NotHub:` + fmt.Sprintf("%#v", this.NotHub) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_Hub) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARReplaceType_Hub{` +
		`Hub:` + fmt.Sprintf("%#v", this.Hub) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&azure_vnet_site.AzureVnetVoltstackClusterReplaceType{")
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_DcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_DcClusterGroup{` +
		`DcClusterGroup:` + fmt.Sprintf("%#v", this.DcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType{")
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_DcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType_DcClusterGroup{` +
		`DcClusterGroup:` + fmt.Sprintf("%#v", this.DcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *AzureVnetSiteInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&azure_vnet_site.AzureVnetSiteInfoType{")
	s = append(s, "PublicIps: "+fmt.Sprintf("%#v", this.PublicIps)+",\n")
	s = append(s, "PrivateIps: "+fmt.Sprintf("%#v", this.PrivateIps)+",\n")
	if this.SpokeVnetPrefixInfo != nil {
		s = append(s, "SpokeVnetPrefixInfo: "+fmt.Sprintf("%#v", this.SpokeVnetPrefixInfo)+",\n")
	}
	if this.ExpressRouteInfo != nil {
		s = append(s, "ExpressRouteInfo: "+fmt.Sprintf("%#v", this.ExpressRouteInfo)+",\n")
	}
	if this.NodeInfo != nil {
		s = append(s, "NodeInfo: "+fmt.Sprintf("%#v", this.NodeInfo)+",\n")
	}
	if this.Vnet != nil {
		s = append(s, "Vnet: "+fmt.Sprintf("%#v", this.Vnet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VNETInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&azure_vnet_site.VNETInfoType{")
	s = append(s, "VnetName: "+fmt.Sprintf("%#v", this.VnetName)+",\n")
	s = append(s, "ResourceId: "+fmt.Sprintf("%#v", this.ResourceId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExpressRouteInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&azure_vnet_site.ExpressRouteInfo{")
	s = append(s, "RouteServerIps: "+fmt.Sprintf("%#v", this.RouteServerIps)+",\n")
	s = append(s, "RouteServerAsn: "+fmt.Sprintf("%#v", this.RouteServerAsn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeInstanceNameType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&azure_vnet_site.NodeInstanceNameType{")
	s = append(s, "NodeInstanceName: "+fmt.Sprintf("%#v", this.NodeInstanceName)+",\n")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 46)
	s = append(s, "&azure_vnet_site.GlobalSpecType{")
	s = append(s, "ResourceGroup: "+fmt.Sprintf("%#v", this.ResourceGroup)+",\n")
	if this.RegionChoice != nil {
		s = append(s, "RegionChoice: "+fmt.Sprintf("%#v", this.RegionChoice)+",\n")
	}
	if this.Vnet != nil {
		s = append(s, "Vnet: "+fmt.Sprintf("%#v", this.Vnet)+",\n")
	}
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "MachineType: "+fmt.Sprintf("%#v", this.MachineType)+",\n")
	if this.WorkerNodes != nil {
		s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	}
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.Sw != nil {
		s = append(s, "Sw: "+fmt.Sprintf("%#v", this.Sw)+",\n")
	}
	if this.Os != nil {
		s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	if this.VipParamsPerAz != nil {
		s = append(s, "VipParamsPerAz: "+fmt.Sprintf("%#v", this.VipParamsPerAz)+",\n")
	}
	s = append(s, "SiteToSiteTunnelIp: "+fmt.Sprintf("%#v", this.SiteToSiteTunnelIp)+",\n")
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.UserModificationTimestamp != nil {
		s = append(s, "UserModificationTimestamp: "+fmt.Sprintf("%#v", this.UserModificationTimestamp)+",\n")
	}
	s = append(s, "SuggestedAction: "+fmt.Sprintf("%#v", this.SuggestedAction)+",\n")
	s = append(s, "ErrorDescription: "+fmt.Sprintf("%#v", this.ErrorDescription)+",\n")
	if this.SiteErrors != nil {
		s = append(s, "SiteErrors: "+fmt.Sprintf("%#v", this.SiteErrors)+",\n")
	}
	s = append(s, "ValidationState: "+fmt.Sprintf("%#v", this.ValidationState)+",\n")
	if this.CustomDns != nil {
		s = append(s, "CustomDns: "+fmt.Sprintf("%#v", this.CustomDns)+",\n")
	}
	if this.TfParams != nil {
		s = append(s, "TfParams: "+fmt.Sprintf("%#v", this.TfParams)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	if this.CloudSiteInfo != nil {
		s = append(s, "CloudSiteInfo: "+fmt.Sprintf("%#v", this.CloudSiteInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_AzureRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_AzureRegion{` +
		`AzureRegion:` + fmt.Sprintf("%#v", this.AzureRegion) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AlternateRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_AlternateRegion{` +
		`AlternateRegion:` + fmt.Sprintf("%#v", this.AlternateRegion) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IngressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_IngressGwAr{` +
		`IngressGwAr:` + fmt.Sprintf("%#v", this.IngressGwAr) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IngressEgressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_IngressEgressGwAr{` +
		`IngressEgressGwAr:` + fmt.Sprintf("%#v", this.IngressEgressGwAr) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_VoltstackClusterAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_VoltstackClusterAr{` +
		`VoltstackClusterAr:` + fmt.Sprintf("%#v", this.VoltstackClusterAr) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AzureCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_AzureCred{` +
		`AzureCred:` + fmt.Sprintf("%#v", this.AzureCred) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Assisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_Assisted{` +
		`Assisted:` + fmt.Sprintf("%#v", this.Assisted) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NodesPerAz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_NodesPerAz{` +
		`NodesPerAz:` + fmt.Sprintf("%#v", this.NodesPerAz) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_TotalNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_TotalNodes{` +
		`TotalNodes:` + fmt.Sprintf("%#v", this.TotalNodes) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoWorkerNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_NoWorkerNodes{` +
		`NoWorkerNodes:` + fmt.Sprintf("%#v", this.NoWorkerNodes) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 33)
	s = append(s, "&azure_vnet_site.CreateSpecType{")
	s = append(s, "ResourceGroup: "+fmt.Sprintf("%#v", this.ResourceGroup)+",\n")
	if this.RegionChoice != nil {
		s = append(s, "RegionChoice: "+fmt.Sprintf("%#v", this.RegionChoice)+",\n")
	}
	if this.Vnet != nil {
		s = append(s, "Vnet: "+fmt.Sprintf("%#v", this.Vnet)+",\n")
	}
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "MachineType: "+fmt.Sprintf("%#v", this.MachineType)+",\n")
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.Sw != nil {
		s = append(s, "Sw: "+fmt.Sprintf("%#v", this.Sw)+",\n")
	}
	if this.Os != nil {
		s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	if this.WorkerNodes != nil {
		s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.CustomDns != nil {
		s = append(s, "CustomDns: "+fmt.Sprintf("%#v", this.CustomDns)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_AzureRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_AzureRegion{` +
		`AzureRegion:` + fmt.Sprintf("%#v", this.AzureRegion) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AlternateRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_AlternateRegion{` +
		`AlternateRegion:` + fmt.Sprintf("%#v", this.AlternateRegion) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IngressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_IngressGwAr{` +
		`IngressGwAr:` + fmt.Sprintf("%#v", this.IngressGwAr) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IngressEgressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_IngressEgressGwAr{` +
		`IngressEgressGwAr:` + fmt.Sprintf("%#v", this.IngressEgressGwAr) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_VoltstackClusterAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_VoltstackClusterAr{` +
		`VoltstackClusterAr:` + fmt.Sprintf("%#v", this.VoltstackClusterAr) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AzureCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_AzureCred{` +
		`AzureCred:` + fmt.Sprintf("%#v", this.AzureCred) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NodesPerAz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_NodesPerAz{` +
		`NodesPerAz:` + fmt.Sprintf("%#v", this.NodesPerAz) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_TotalNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_TotalNodes{` +
		`TotalNodes:` + fmt.Sprintf("%#v", this.TotalNodes) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoWorkerNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_NoWorkerNodes{` +
		`NoWorkerNodes:` + fmt.Sprintf("%#v", this.NoWorkerNodes) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&azure_vnet_site.ReplaceSpecType{")
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.WorkerNodes != nil {
		s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.CustomDns != nil {
		s = append(s, "CustomDns: "+fmt.Sprintf("%#v", this.CustomDns)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IngressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_IngressGwAr{` +
		`IngressGwAr:` + fmt.Sprintf("%#v", this.IngressGwAr) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IngressEgressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_IngressEgressGwAr{` +
		`IngressEgressGwAr:` + fmt.Sprintf("%#v", this.IngressEgressGwAr) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_VoltstackClusterAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_VoltstackClusterAr{` +
		`VoltstackClusterAr:` + fmt.Sprintf("%#v", this.VoltstackClusterAr) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AzureCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_AzureCred{` +
		`AzureCred:` + fmt.Sprintf("%#v", this.AzureCred) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NodesPerAz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_NodesPerAz{` +
		`NodesPerAz:` + fmt.Sprintf("%#v", this.NodesPerAz) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_TotalNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_TotalNodes{` +
		`TotalNodes:` + fmt.Sprintf("%#v", this.TotalNodes) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoWorkerNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_NoWorkerNodes{` +
		`NoWorkerNodes:` + fmt.Sprintf("%#v", this.NoWorkerNodes) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 42)
	s = append(s, "&azure_vnet_site.GetSpecType{")
	s = append(s, "ResourceGroup: "+fmt.Sprintf("%#v", this.ResourceGroup)+",\n")
	if this.RegionChoice != nil {
		s = append(s, "RegionChoice: "+fmt.Sprintf("%#v", this.RegionChoice)+",\n")
	}
	if this.Vnet != nil {
		s = append(s, "Vnet: "+fmt.Sprintf("%#v", this.Vnet)+",\n")
	}
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "MachineType: "+fmt.Sprintf("%#v", this.MachineType)+",\n")
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "SiteState: "+fmt.Sprintf("%#v", this.SiteState)+",\n")
	if this.VipParamsPerAz != nil {
		s = append(s, "VipParamsPerAz: "+fmt.Sprintf("%#v", this.VipParamsPerAz)+",\n")
	}
	if this.WorkerNodes != nil {
		s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.UserModificationTimestamp != nil {
		s = append(s, "UserModificationTimestamp: "+fmt.Sprintf("%#v", this.UserModificationTimestamp)+",\n")
	}
	s = append(s, "SuggestedAction: "+fmt.Sprintf("%#v", this.SuggestedAction)+",\n")
	s = append(s, "ErrorDescription: "+fmt.Sprintf("%#v", this.ErrorDescription)+",\n")
	if this.SiteErrors != nil {
		s = append(s, "SiteErrors: "+fmt.Sprintf("%#v", this.SiteErrors)+",\n")
	}
	s = append(s, "ValidationState: "+fmt.Sprintf("%#v", this.ValidationState)+",\n")
	if this.CustomDns != nil {
		s = append(s, "CustomDns: "+fmt.Sprintf("%#v", this.CustomDns)+",\n")
	}
	if this.CloudSiteInfo != nil {
		s = append(s, "CloudSiteInfo: "+fmt.Sprintf("%#v", this.CloudSiteInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_AzureRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_AzureRegion{` +
		`AzureRegion:` + fmt.Sprintf("%#v", this.AzureRegion) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AlternateRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_AlternateRegion{` +
		`AlternateRegion:` + fmt.Sprintf("%#v", this.AlternateRegion) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *GetSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IngressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_IngressGwAr{` +
		`IngressGwAr:` + fmt.Sprintf("%#v", this.IngressGwAr) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IngressEgressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_IngressEgressGwAr{` +
		`IngressEgressGwAr:` + fmt.Sprintf("%#v", this.IngressEgressGwAr) + `}`}, ", ")
	return s
}
func (this *GetSpecType_VoltstackClusterAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_VoltstackClusterAr{` +
		`VoltstackClusterAr:` + fmt.Sprintf("%#v", this.VoltstackClusterAr) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AzureCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_AzureCred{` +
		`AzureCred:` + fmt.Sprintf("%#v", this.AzureCred) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Assisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_Assisted{` +
		`Assisted:` + fmt.Sprintf("%#v", this.Assisted) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NodesPerAz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_NodesPerAz{` +
		`NodesPerAz:` + fmt.Sprintf("%#v", this.NodesPerAz) + `}`}, ", ")
	return s
}
func (this *GetSpecType_TotalNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_TotalNodes{` +
		`TotalNodes:` + fmt.Sprintf("%#v", this.TotalNodes) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoWorkerNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_NoWorkerNodes{` +
		`NoWorkerNodes:` + fmt.Sprintf("%#v", this.NoWorkerNodes) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AzureHubVnetType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureHubVnetType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureHubVnetType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpressRouteChoice != nil {
		{
			size := m.ExpressRouteChoice.Size()
			i -= size
			if _, err := m.ExpressRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.SpokeVnets) > 0 {
		for iNdEx := len(m.SpokeVnets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpokeVnets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AzureHubVnetType_ExpressRouteDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureHubVnetType_ExpressRouteDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExpressRouteDisabled != nil {
		{
			size, err := m.ExpressRouteDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AzureHubVnetType_ExpressRouteEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureHubVnetType_ExpressRouteEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExpressRouteEnabled != nil {
		{
			size, err := m.ExpressRouteEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *VnetPeeringType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VnetPeeringType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnetPeeringType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
		for iNdEx := len(keysForLabels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Labels[string(keysForLabels[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForLabels[iNdEx])
			copy(dAtA[i:], keysForLabels[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForLabels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.RoutingChoice != nil {
		{
			size := m.RoutingChoice.Size()
			i -= size
			if _, err := m.RoutingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Vnet != nil {
		{
			size, err := m.Vnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VnetPeeringType_Auto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnetPeeringType_Auto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Auto != nil {
		{
			size, err := m.Auto.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *VnetPeeringType_Manual) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnetPeeringType_Manual) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Manual != nil {
		{
			size, err := m.Manual.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressGwType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressGwType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressGwType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AcceleratedNetworking != nil {
		{
			size, err := m.AcceleratedNetworking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if len(m.AzureCertifiedHw) > 0 {
		i -= len(m.AzureCertifiedHw)
		copy(dAtA[i:], m.AzureCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AzNodes) > 0 {
		for iNdEx := len(m.AzNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AzNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AzureVnetIngressGwARType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressGwARType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressGwARType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AcceleratedNetworking != nil {
		{
			size, err := m.AcceleratedNetworking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if len(m.AzureCertifiedHw) > 0 {
		i -= len(m.AzureCertifiedHw)
		copy(dAtA[i:], m.AzureCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i--
		dAtA[i] = 0x12
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExpressRouteConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpressRouteConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpokeVnetRoutes != nil {
		{
			size := m.SpokeVnetRoutes.Size()
			i -= size
			if _, err := m.SpokeVnetRoutes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ConnectivityOptions != nil {
		{
			size := m.ConnectivityOptions.Size()
			i -= size
			if _, err := m.ConnectivityOptions.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AsnChoice != nil {
		{
			size := m.AsnChoice.Size()
			i -= size
			if _, err := m.AsnChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RouteServerSubnet != nil {
		{
			size, err := m.RouteServerSubnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.GatewaySubnet != nil {
		{
			size, err := m.GatewaySubnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.SkuChoice != nil {
		{
			size := m.SkuChoice.Size()
			i -= size
			if _, err := m.SkuChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Connections) > 0 {
		for iNdEx := len(m.Connections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Connections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExpressRouteConfigType_SkuStandard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteConfigType_SkuStandard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SkuStandard != nil {
		{
			size, err := m.SkuStandard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ExpressRouteConfigType_SkuErgw1Az) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteConfigType_SkuErgw1Az) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SkuErgw1Az != nil {
		{
			size, err := m.SkuErgw1Az.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ExpressRouteConfigType_SkuHighPerf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteConfigType_SkuHighPerf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SkuHighPerf != nil {
		{
			size, err := m.SkuHighPerf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ExpressRouteConfigType_SkuErgw2Az) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteConfigType_SkuErgw2Az) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SkuErgw2Az != nil {
		{
			size, err := m.SkuErgw2Az.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ExpressRouteConfigType_AutoAsn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteConfigType_AutoAsn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AutoAsn != nil {
		{
			size, err := m.AutoAsn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ExpressRouteConfigType_CustomAsn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteConfigType_CustomAsn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.CustomAsn))
	i--
	dAtA[i] = 0x70
	return len(dAtA) - i, nil
}
func (m *ExpressRouteConfigType_SiteRegistrationOverInternet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteConfigType_SiteRegistrationOverInternet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteRegistrationOverInternet != nil {
		{
			size, err := m.SiteRegistrationOverInternet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ExpressRouteConfigType_SiteRegistrationOverExpressRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteConfigType_SiteRegistrationOverExpressRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteRegistrationOverExpressRoute != nil {
		{
			size, err := m.SiteRegistrationOverExpressRoute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ExpressRouteConfigType_AdvertiseToRouteServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteConfigType_AdvertiseToRouteServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseToRouteServer != nil {
		{
			size, err := m.AdvertiseToRouteServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ExpressRouteConfigType_DoNotAdvertiseToRouteServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteConfigType_DoNotAdvertiseToRouteServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertiseToRouteServer != nil {
		{
			size, err := m.DoNotAdvertiseToRouteServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ExpressRouteOtherSubscriptionConnection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpressRouteOtherSubscriptionConnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteOtherSubscriptionConnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthorizedKey != nil {
		{
			size, err := m.AuthorizedKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CircuitId) > 0 {
		i -= len(m.CircuitId)
		copy(dAtA[i:], m.CircuitId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CircuitId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExpressRouteConnectionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpressRouteConnectionType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteConnectionType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubscriptionChoice != nil {
		{
			size := m.SubscriptionChoice.Size()
			i -= size
			if _, err := m.SubscriptionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Weight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x28
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExpressRouteConnectionType_OtherSubscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteConnectionType_OtherSubscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OtherSubscription != nil {
		{
			size, err := m.OtherSubscription.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ExpressRouteConnectionType_CircuitId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteConnectionType_CircuitId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.CircuitId)
	copy(dAtA[i:], m.CircuitId)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.CircuitId)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressEgressGwType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AcceleratedNetworking != nil {
		{
			size, err := m.AcceleratedNetworking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HubChoice != nil {
		{
			size := m.HubChoice.Size()
			i -= size
			if _, err := m.HubChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OutsideStaticRouteChoice != nil {
		{
			size := m.OutsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InsideStaticRouteChoice != nil {
		{
			size := m.InsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.InsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AzureCertifiedHw) > 0 {
		i -= len(m.AzureCertifiedHw)
		copy(dAtA[i:], m.AzureCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AzNodes) > 0 {
		for iNdEx := len(m.AzNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AzNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AzureVnetIngressEgressGwType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoInsideStaticRoutes != nil {
		{
			size, err := m.NoInsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_InsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_InsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InsideStaticRoutes != nil {
		{
			size, err := m.InsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoOutsideStaticRoutes != nil {
		{
			size, err := m.NoOutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_OutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideStaticRoutes != nil {
		{
			size, err := m.OutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupOutsideVn != nil {
		{
			size, err := m.DcClusterGroupOutsideVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_DcClusterGroupInsideVn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_DcClusterGroupInsideVn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupInsideVn != nil {
		{
			size, err := m.DcClusterGroupInsideVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_NotHub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_NotHub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotHub != nil {
		{
			size, err := m.NotHub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_Hub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_Hub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hub != nil {
		{
			size, err := m.Hub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressEgressGwARType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AcceleratedNetworking != nil {
		{
			size, err := m.AcceleratedNetworking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HubChoice != nil {
		{
			size := m.HubChoice.Size()
			i -= size
			if _, err := m.HubChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OutsideStaticRouteChoice != nil {
		{
			size := m.OutsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InsideStaticRouteChoice != nil {
		{
			size := m.InsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.InsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AzureCertifiedHw) > 0 {
		i -= len(m.AzureCertifiedHw)
		copy(dAtA[i:], m.AzureCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i--
		dAtA[i] = 0x42
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AzureVnetIngressEgressGwARType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoInsideStaticRoutes != nil {
		{
			size, err := m.NoInsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_InsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_InsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InsideStaticRoutes != nil {
		{
			size, err := m.InsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoOutsideStaticRoutes != nil {
		{
			size, err := m.NoOutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_OutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideStaticRoutes != nil {
		{
			size, err := m.OutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupOutsideVn != nil {
		{
			size, err := m.DcClusterGroupOutsideVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupInsideVn != nil {
		{
			size, err := m.DcClusterGroupInsideVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_NotHub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_NotHub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotHub != nil {
		{
			size, err := m.NotHub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_Hub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_Hub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hub != nil {
		{
			size, err := m.Hub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetVoltstackClusterType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AcceleratedNetworking != nil {
		{
			size, err := m.AcceleratedNetworking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.K8SClusterChoice != nil {
		{
			size := m.K8SClusterChoice.Size()
			i -= size
			if _, err := m.K8SClusterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StorageClassChoice != nil {
		{
			size := m.StorageClassChoice.Size()
			i -= size
			if _, err := m.StorageClassChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OutsideStaticRouteChoice != nil {
		{
			size := m.OutsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AzNodes) > 0 {
		for iNdEx := len(m.AzNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AzNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AzureCertifiedHw) > 0 {
		i -= len(m.AzureCertifiedHw)
		copy(dAtA[i:], m.AzureCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AzureVnetVoltstackClusterType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoOutsideStaticRoutes != nil {
		{
			size, err := m.NoOutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_OutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideStaticRoutes != nil {
		{
			size, err := m.OutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_DefaultStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_DefaultStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultStorage != nil {
		{
			size, err := m.DefaultStorage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_StorageClassList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_StorageClassList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StorageClassList != nil {
		{
			size, err := m.StorageClassList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_NoK8SCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_NoK8SCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoK8SCluster != nil {
		{
			size, err := m.NoK8SCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_K8SCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_K8SCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.K8SCluster != nil {
		{
			size, err := m.K8SCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_DcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_DcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroup != nil {
		{
			size, err := m.DcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetVoltstackClusterARType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AcceleratedNetworking != nil {
		{
			size, err := m.AcceleratedNetworking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.K8SClusterChoice != nil {
		{
			size := m.K8SClusterChoice.Size()
			i -= size
			if _, err := m.K8SClusterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StorageClassChoice != nil {
		{
			size := m.StorageClassChoice.Size()
			i -= size
			if _, err := m.StorageClassChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OutsideStaticRouteChoice != nil {
		{
			size := m.OutsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AzureCertifiedHw) > 0 {
		i -= len(m.AzureCertifiedHw)
		copy(dAtA[i:], m.AzureCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AzureVnetVoltstackClusterARType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoOutsideStaticRoutes != nil {
		{
			size, err := m.NoOutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_OutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideStaticRoutes != nil {
		{
			size, err := m.OutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_DefaultStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_DefaultStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultStorage != nil {
		{
			size, err := m.DefaultStorage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_StorageClassList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_StorageClassList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StorageClassList != nil {
		{
			size, err := m.StorageClassList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_NoK8SCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_NoK8SCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoK8SCluster != nil {
		{
			size, err := m.NoK8SCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_K8SCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_K8SCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.K8SCluster != nil {
		{
			size, err := m.K8SCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_DcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_DcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroup != nil {
		{
			size, err := m.DcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressGwReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressGwReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressGwReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AzureVnetIngressGwARReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressGwARReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressGwARReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VnetIpPrefixesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VnetIpPrefixesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnetIpPrefixesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for iNdEx := len(m.Prefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Prefixes[iNdEx])
			copy(dAtA[i:], m.Prefixes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Prefixes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Vnet != nil {
		{
			size, err := m.Vnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AzureVnetIngressEgressGwReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressEgressGwReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HubChoice != nil {
		{
			size := m.HubChoice.Size()
			i -= size
			if _, err := m.HubChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OutsideStaticRouteChoice != nil {
		{
			size := m.OutsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InsideStaticRouteChoice != nil {
		{
			size := m.InsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.InsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoInsideStaticRoutes != nil {
		{
			size, err := m.NoInsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InsideStaticRoutes != nil {
		{
			size, err := m.InsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoOutsideStaticRoutes != nil {
		{
			size, err := m.NoOutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideStaticRoutes != nil {
		{
			size, err := m.OutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupOutsideVn != nil {
		{
			size, err := m.DcClusterGroupOutsideVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupInsideVn != nil {
		{
			size, err := m.DcClusterGroupInsideVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_NotHub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_NotHub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotHub != nil {
		{
			size, err := m.NotHub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_Hub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_Hub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hub != nil {
		{
			size, err := m.Hub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressEgressGwARReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HubChoice != nil {
		{
			size := m.HubChoice.Size()
			i -= size
			if _, err := m.HubChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OutsideStaticRouteChoice != nil {
		{
			size := m.OutsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InsideStaticRouteChoice != nil {
		{
			size := m.InsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.InsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoInsideStaticRoutes != nil {
		{
			size, err := m.NoInsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InsideStaticRoutes != nil {
		{
			size, err := m.InsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoOutsideStaticRoutes != nil {
		{
			size, err := m.NoOutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideStaticRoutes != nil {
		{
			size, err := m.OutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupOutsideVn != nil {
		{
			size, err := m.DcClusterGroupOutsideVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupInsideVn != nil {
		{
			size, err := m.DcClusterGroupInsideVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_NotHub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_NotHub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotHub != nil {
		{
			size, err := m.NotHub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_Hub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_Hub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hub != nil {
		{
			size, err := m.Hub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetVoltstackClusterReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OutsideStaticRouteChoice != nil {
		{
			size := m.OutsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoOutsideStaticRoutes != nil {
		{
			size, err := m.NoOutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideStaticRoutes != nil {
		{
			size, err := m.OutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_DcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType_DcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroup != nil {
		{
			size, err := m.DcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetVoltstackClusterARReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OutsideStaticRouteChoice != nil {
		{
			size := m.OutsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARReplaceType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoOutsideStaticRoutes != nil {
		{
			size, err := m.NoOutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideStaticRoutes != nil {
		{
			size, err := m.OutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARReplaceType_DcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType_DcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroup != nil {
		{
			size, err := m.DcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *AzureVnetSiteInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetSiteInfoType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureVnetSiteInfoType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vnet != nil {
		{
			size, err := m.Vnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.NodeInfo) > 0 {
		for iNdEx := len(m.NodeInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ExpressRouteInfo != nil {
		{
			size, err := m.ExpressRouteInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.SpokeVnetPrefixInfo) > 0 {
		for iNdEx := len(m.SpokeVnetPrefixInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpokeVnetPrefixInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PrivateIps) > 0 {
		for iNdEx := len(m.PrivateIps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrivateIps[iNdEx])
			copy(dAtA[i:], m.PrivateIps[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.PrivateIps[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PublicIps) > 0 {
		for iNdEx := len(m.PublicIps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PublicIps[iNdEx])
			copy(dAtA[i:], m.PublicIps[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicIps[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VNETInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VNETInfoType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VNETInfoType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResourceId) > 0 {
		i -= len(m.ResourceId)
		copy(dAtA[i:], m.ResourceId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VnetName) > 0 {
		i -= len(m.VnetName)
		copy(dAtA[i:], m.VnetName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VnetName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExpressRouteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpressRouteInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressRouteInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RouteServerAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RouteServerAsn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RouteServerIps) > 0 {
		for iNdEx := len(m.RouteServerIps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RouteServerIps[iNdEx])
			copy(dAtA[i:], m.RouteServerIps[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RouteServerIps[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodeInstanceNameType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInstanceNameType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInstanceNameType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeInstanceName) > 0 {
		i -= len(m.NodeInstanceName)
		copy(dAtA[i:], m.NodeInstanceName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeInstanceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloudSiteInfo != nil {
		{
			size, err := m.CloudSiteInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.TfParams != nil {
		{
			size, err := m.TfParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xba
	}
	if m.CustomDns != nil {
		{
			size, err := m.CustomDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.ValidationState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidationState))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if len(m.SiteErrors) > 0 {
		for iNdEx := len(m.SiteErrors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SiteErrors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.ErrorDescription) > 0 {
		i -= len(m.ErrorDescription)
		copy(dAtA[i:], m.ErrorDescription)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ErrorDescription)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if len(m.SuggestedAction) > 0 {
		i -= len(m.SuggestedAction)
		copy(dAtA[i:], m.SuggestedAction)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SuggestedAction)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if m.UserModificationTimestamp != nil {
		{
			size, err := m.UserModificationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.SiteToSiteTunnelIp) > 0 {
		i -= len(m.SiteToSiteTunnelIp)
		copy(dAtA[i:], m.SiteToSiteTunnelIp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SiteToSiteTunnelIp)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.SiteType != nil {
		{
			size := m.SiteType.Size()
			i -= size
			if _, err := m.SiteType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RegionChoice != nil {
		{
			size := m.RegionChoice.Size()
			i -= size
			if _, err := m.RegionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WorkerNodes != nil {
		{
			size := m.WorkerNodes.Size()
			i -= size
			if _, err := m.WorkerNodes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.VipParamsPerAz) > 0 {
		for iNdEx := len(m.VipParamsPerAz) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VipParamsPerAz[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if m.Os != nil {
		{
			size, err := m.Os.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Sw != nil {
		{
			size, err := m.Sw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.DiskSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.OperatingSystemVersion) > 0 {
		i -= len(m.OperatingSystemVersion)
		copy(dAtA[i:], m.OperatingSystemVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		i -= len(m.VolterraSoftwareVersion)
		copy(dAtA[i:], m.VolterraSoftwareVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.MachineType) > 0 {
		i -= len(m.MachineType)
		copy(dAtA[i:], m.MachineType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MachineType)))
		i--
		dAtA[i] = 0x52
	}
	if m.Deployment != nil {
		{
			size := m.Deployment.Size()
			i -= size
			if _, err := m.Deployment.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Vnet != nil {
		{
			size, err := m.Vnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResourceGroup) > 0 {
		i -= len(m.ResourceGroup)
		copy(dAtA[i:], m.ResourceGroup)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceGroup)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_AzureRegion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AzureRegion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AzureRegion)
	copy(dAtA[i:], m.AzureRegion)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureRegion)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_IngressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressGw != nil {
		{
			size, err := m.IngressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_IngressEgressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressEgressGw != nil {
		{
			size, err := m.IngressEgressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AzureCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AzureCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AzureCred != nil {
		{
			size, err := m.AzureCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Assisted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Assisted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Assisted != nil {
		{
			size, err := m.Assisted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NodesPerAz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NodesPerAz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	i--
	dAtA[i] = 0x78
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_VoltstackCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VoltstackCluster != nil {
		{
			size, err := m.VoltstackCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_TotalNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_TotalNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.TotalNodes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoWorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoWorkerNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoWorkerNodes != nil {
		{
			size, err := m.NoWorkerNodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AlternateRegion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AlternateRegion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AlternateRegion)
	copy(dAtA[i:], m.AlternateRegion)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AlternateRegion)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xfa
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_IngressGwAr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_IngressGwAr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressGwAr != nil {
		{
			size, err := m.IngressGwAr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_IngressEgressGwAr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_IngressEgressGwAr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressEgressGwAr != nil {
		{
			size, err := m.IngressEgressGwAr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_VoltstackClusterAr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_VoltstackClusterAr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VoltstackClusterAr != nil {
		{
			size, err := m.VoltstackClusterAr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CustomDns != nil {
		{
			size, err := m.CustomDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.SiteType != nil {
		{
			size := m.SiteType.Size()
			i -= size
			if _, err := m.SiteType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RegionChoice != nil {
		{
			size := m.RegionChoice.Size()
			i -= size
			if _, err := m.RegionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WorkerNodes != nil {
		{
			size := m.WorkerNodes.Size()
			i -= size
			if _, err := m.WorkerNodes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Os != nil {
		{
			size, err := m.Os.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Sw != nil {
		{
			size, err := m.Sw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.DiskSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.MachineType) > 0 {
		i -= len(m.MachineType)
		copy(dAtA[i:], m.MachineType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MachineType)))
		i--
		dAtA[i] = 0x52
	}
	if m.Deployment != nil {
		{
			size := m.Deployment.Size()
			i -= size
			if _, err := m.Deployment.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Vnet != nil {
		{
			size, err := m.Vnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResourceGroup) > 0 {
		i -= len(m.ResourceGroup)
		copy(dAtA[i:], m.ResourceGroup)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceGroup)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_AzureRegion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AzureRegion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AzureRegion)
	copy(dAtA[i:], m.AzureRegion)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureRegion)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_IngressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressGw != nil {
		{
			size, err := m.IngressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_IngressEgressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressEgressGw != nil {
		{
			size, err := m.IngressEgressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AzureCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AzureCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AzureCred != nil {
		{
			size, err := m.AzureCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NodesPerAz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NodesPerAz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	i--
	dAtA[i] = 0x78
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_VoltstackCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VoltstackCluster != nil {
		{
			size, err := m.VoltstackCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_TotalNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_TotalNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.TotalNodes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoWorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoWorkerNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoWorkerNodes != nil {
		{
			size, err := m.NoWorkerNodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AlternateRegion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AlternateRegion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AlternateRegion)
	copy(dAtA[i:], m.AlternateRegion)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AlternateRegion)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xfa
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_IngressGwAr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_IngressGwAr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressGwAr != nil {
		{
			size, err := m.IngressGwAr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_IngressEgressGwAr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_IngressEgressGwAr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressEgressGwAr != nil {
		{
			size, err := m.IngressEgressGwAr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_VoltstackClusterAr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_VoltstackClusterAr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VoltstackClusterAr != nil {
		{
			size, err := m.VoltstackClusterAr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CustomDns != nil {
		{
			size, err := m.CustomDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	if m.SiteType != nil {
		{
			size := m.SiteType.Size()
			i -= size
			if _, err := m.SiteType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WorkerNodes != nil {
		{
			size := m.WorkerNodes.Size()
			i -= size
			if _, err := m.WorkerNodes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Deployment != nil {
		{
			size := m.Deployment.Size()
			i -= size
			if _, err := m.Deployment.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_IngressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressGw != nil {
		{
			size, err := m.IngressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_IngressEgressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressEgressGw != nil {
		{
			size, err := m.IngressEgressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AzureCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AzureCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AzureCred != nil {
		{
			size, err := m.AzureCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NodesPerAz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NodesPerAz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	i--
	dAtA[i] = 0x78
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_VoltstackCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VoltstackCluster != nil {
		{
			size, err := m.VoltstackCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_TotalNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_TotalNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.TotalNodes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoWorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoWorkerNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoWorkerNodes != nil {
		{
			size, err := m.NoWorkerNodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_IngressGwAr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_IngressGwAr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressGwAr != nil {
		{
			size, err := m.IngressGwAr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_IngressEgressGwAr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_IngressEgressGwAr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressEgressGwAr != nil {
		{
			size, err := m.IngressEgressGwAr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_VoltstackClusterAr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_VoltstackClusterAr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VoltstackClusterAr != nil {
		{
			size, err := m.VoltstackClusterAr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloudSiteInfo != nil {
		{
			size, err := m.CloudSiteInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.CustomDns != nil {
		{
			size, err := m.CustomDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.ValidationState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidationState))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if len(m.SiteErrors) > 0 {
		for iNdEx := len(m.SiteErrors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SiteErrors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.ErrorDescription) > 0 {
		i -= len(m.ErrorDescription)
		copy(dAtA[i:], m.ErrorDescription)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ErrorDescription)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if len(m.SuggestedAction) > 0 {
		i -= len(m.SuggestedAction)
		copy(dAtA[i:], m.SuggestedAction)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SuggestedAction)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if m.UserModificationTimestamp != nil {
		{
			size, err := m.UserModificationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.SiteType != nil {
		{
			size := m.SiteType.Size()
			i -= size
			if _, err := m.SiteType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RegionChoice != nil {
		{
			size := m.RegionChoice.Size()
			i -= size
			if _, err := m.RegionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WorkerNodes != nil {
		{
			size := m.WorkerNodes.Size()
			i -= size
			if _, err := m.WorkerNodes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.VipParamsPerAz) > 0 {
		for iNdEx := len(m.VipParamsPerAz) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VipParamsPerAz[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if m.SiteState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteState))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.DiskSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.OperatingSystemVersion) > 0 {
		i -= len(m.OperatingSystemVersion)
		copy(dAtA[i:], m.OperatingSystemVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		i -= len(m.VolterraSoftwareVersion)
		copy(dAtA[i:], m.VolterraSoftwareVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.MachineType) > 0 {
		i -= len(m.MachineType)
		copy(dAtA[i:], m.MachineType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MachineType)))
		i--
		dAtA[i] = 0x52
	}
	if m.Deployment != nil {
		{
			size := m.Deployment.Size()
			i -= size
			if _, err := m.Deployment.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Vnet != nil {
		{
			size, err := m.Vnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResourceGroup) > 0 {
		i -= len(m.ResourceGroup)
		copy(dAtA[i:], m.ResourceGroup)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceGroup)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_AzureRegion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AzureRegion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AzureRegion)
	copy(dAtA[i:], m.AzureRegion)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureRegion)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *GetSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_IngressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressGw != nil {
		{
			size, err := m.IngressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_IngressEgressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressEgressGw != nil {
		{
			size, err := m.IngressEgressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AzureCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AzureCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AzureCred != nil {
		{
			size, err := m.AzureCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Assisted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Assisted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Assisted != nil {
		{
			size, err := m.Assisted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NodesPerAz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NodesPerAz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	i--
	dAtA[i] = 0x78
	return len(dAtA) - i, nil
}
func (m *GetSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_VoltstackCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VoltstackCluster != nil {
		{
			size, err := m.VoltstackCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_TotalNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_TotalNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.TotalNodes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoWorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoWorkerNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoWorkerNodes != nil {
		{
			size, err := m.NoWorkerNodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AlternateRegion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AlternateRegion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AlternateRegion)
	copy(dAtA[i:], m.AlternateRegion)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AlternateRegion)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xfa
	return len(dAtA) - i, nil
}
func (m *GetSpecType_IngressGwAr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_IngressGwAr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressGwAr != nil {
		{
			size, err := m.IngressGwAr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_IngressEgressGwAr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_IngressEgressGwAr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressEgressGwAr != nil {
		{
			size, err := m.IngressEgressGwAr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_VoltstackClusterAr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_VoltstackClusterAr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VoltstackClusterAr != nil {
		{
			size, err := m.VoltstackClusterAr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AzureHubVnetType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpokeVnets) > 0 {
		for _, e := range m.SpokeVnets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ExpressRouteChoice != nil {
		n += m.ExpressRouteChoice.Size()
	}
	return n
}

func (m *AzureHubVnetType_ExpressRouteDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpressRouteDisabled != nil {
		l = m.ExpressRouteDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureHubVnetType_ExpressRouteEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpressRouteEnabled != nil {
		l = m.ExpressRouteEnabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnetPeeringType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vnet != nil {
		l = m.Vnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RoutingChoice != nil {
		n += m.RoutingChoice.Size()
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *VnetPeeringType_Auto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auto != nil {
		l = m.Auto.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnetPeeringType_Manual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Manual != nil {
		l = m.Manual.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressGwType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AcceleratedNetworking != nil {
		l = m.AcceleratedNetworking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AzureVnetIngressGwARType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AcceleratedNetworking != nil {
		l = m.AcceleratedNetworking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ExpressRouteConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Connections) > 0 {
		for _, e := range m.Connections {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.SkuChoice != nil {
		n += m.SkuChoice.Size()
	}
	if m.GatewaySubnet != nil {
		l = m.GatewaySubnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RouteServerSubnet != nil {
		l = m.RouteServerSubnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AsnChoice != nil {
		n += m.AsnChoice.Size()
	}
	if m.ConnectivityOptions != nil {
		n += m.ConnectivityOptions.Size()
	}
	if m.SpokeVnetRoutes != nil {
		n += m.SpokeVnetRoutes.Size()
	}
	return n
}

func (m *ExpressRouteConfigType_SkuStandard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkuStandard != nil {
		l = m.SkuStandard.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ExpressRouteConfigType_SkuErgw1Az) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkuErgw1Az != nil {
		l = m.SkuErgw1Az.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ExpressRouteConfigType_SkuHighPerf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkuHighPerf != nil {
		l = m.SkuHighPerf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ExpressRouteConfigType_SkuErgw2Az) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkuErgw2Az != nil {
		l = m.SkuErgw2Az.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ExpressRouteConfigType_AutoAsn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoAsn != nil {
		l = m.AutoAsn.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ExpressRouteConfigType_CustomAsn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.CustomAsn))
	return n
}
func (m *ExpressRouteConfigType_SiteRegistrationOverInternet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteRegistrationOverInternet != nil {
		l = m.SiteRegistrationOverInternet.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ExpressRouteConfigType_SiteRegistrationOverExpressRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteRegistrationOverExpressRoute != nil {
		l = m.SiteRegistrationOverExpressRoute.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ExpressRouteConfigType_AdvertiseToRouteServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseToRouteServer != nil {
		l = m.AdvertiseToRouteServer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ExpressRouteConfigType_DoNotAdvertiseToRouteServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertiseToRouteServer != nil {
		l = m.DoNotAdvertiseToRouteServer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ExpressRouteOtherSubscriptionConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CircuitId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AuthorizedKey != nil {
		l = m.AuthorizedKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ExpressRouteConnectionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SubscriptionChoice != nil {
		n += m.SubscriptionChoice.Size()
	}
	if m.Weight != 0 {
		n += 1 + sovTypes(uint64(m.Weight))
	}
	return n
}

func (m *ExpressRouteConnectionType_OtherSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OtherSubscription != nil {
		l = m.OtherSubscription.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ExpressRouteConnectionType_CircuitId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CircuitId)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *AzureVnetIngressEgressGwType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.InsideStaticRouteChoice != nil {
		n += m.InsideStaticRouteChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	if m.HubChoice != nil {
		n += m.HubChoice.Size()
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AcceleratedNetworking != nil {
		l = m.AcceleratedNetworking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AzureVnetIngressEgressGwType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoInsideStaticRoutes != nil {
		l = m.NoInsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_InsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideStaticRoutes != nil {
		l = m.InsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_OutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupOutsideVn != nil {
		l = m.DcClusterGroupOutsideVn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_DcClusterGroupInsideVn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupInsideVn != nil {
		l = m.DcClusterGroupInsideVn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_NotHub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotHub != nil {
		l = m.NotHub.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_Hub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hub != nil {
		l = m.Hub.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.InsideStaticRouteChoice != nil {
		n += m.InsideStaticRouteChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	if m.HubChoice != nil {
		n += m.HubChoice.Size()
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AcceleratedNetworking != nil {
		l = m.AcceleratedNetworking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AzureVnetIngressEgressGwARType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoInsideStaticRoutes != nil {
		l = m.NoInsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_InsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideStaticRoutes != nil {
		l = m.InsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_OutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupOutsideVn != nil {
		l = m.DcClusterGroupOutsideVn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupInsideVn != nil {
		l = m.DcClusterGroupInsideVn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_NotHub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotHub != nil {
		l = m.NotHub.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_Hub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hub != nil {
		l = m.Hub.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.StorageClassChoice != nil {
		n += m.StorageClassChoice.Size()
	}
	if m.K8SClusterChoice != nil {
		n += m.K8SClusterChoice.Size()
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	if m.AcceleratedNetworking != nil {
		l = m.AcceleratedNetworking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AzureVnetVoltstackClusterType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_OutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_DefaultStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultStorage != nil {
		l = m.DefaultStorage.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_StorageClassList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageClassList != nil {
		l = m.StorageClassList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_NoK8SCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoK8SCluster != nil {
		l = m.NoK8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_K8SCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SCluster != nil {
		l = m.K8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_DcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroup != nil {
		l = m.DcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.StorageClassChoice != nil {
		n += m.StorageClassChoice.Size()
	}
	if m.K8SClusterChoice != nil {
		n += m.K8SClusterChoice.Size()
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	if m.AcceleratedNetworking != nil {
		l = m.AcceleratedNetworking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AzureVnetVoltstackClusterARType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_OutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_DefaultStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultStorage != nil {
		l = m.DefaultStorage.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_StorageClassList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageClassList != nil {
		l = m.StorageClassList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_NoK8SCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoK8SCluster != nil {
		l = m.NoK8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_K8SCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SCluster != nil {
		l = m.K8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_DcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroup != nil {
		l = m.DcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressGwReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AzureVnetIngressGwARReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VnetIpPrefixesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vnet != nil {
		l = m.Vnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Prefixes) > 0 {
		for _, s := range m.Prefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AzureVnetIngressEgressGwReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.InsideStaticRouteChoice != nil {
		n += m.InsideStaticRouteChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	if m.HubChoice != nil {
		n += m.HubChoice.Size()
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoInsideStaticRoutes != nil {
		l = m.NoInsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideStaticRoutes != nil {
		l = m.InsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupOutsideVn != nil {
		l = m.DcClusterGroupOutsideVn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupInsideVn != nil {
		l = m.DcClusterGroupInsideVn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_NotHub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotHub != nil {
		l = m.NotHub.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_Hub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hub != nil {
		l = m.Hub.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.InsideStaticRouteChoice != nil {
		n += m.InsideStaticRouteChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	if m.HubChoice != nil {
		n += m.HubChoice.Size()
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoInsideStaticRoutes != nil {
		l = m.NoInsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideStaticRoutes != nil {
		l = m.InsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupOutsideVn != nil {
		l = m.DcClusterGroupOutsideVn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupInsideVn != nil {
		l = m.DcClusterGroupInsideVn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_NotHub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotHub != nil {
		l = m.NotHub.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_Hub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hub != nil {
		l = m.Hub.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	return n
}

func (m *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_DcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroup != nil {
		l = m.DcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	return n
}

func (m *AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARReplaceType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARReplaceType_DcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroup != nil {
		l = m.DcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetSiteInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PublicIps) > 0 {
		for _, s := range m.PublicIps {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.PrivateIps) > 0 {
		for _, s := range m.PrivateIps {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.SpokeVnetPrefixInfo) > 0 {
		for _, e := range m.SpokeVnetPrefixInfo {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ExpressRouteInfo != nil {
		l = m.ExpressRouteInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.NodeInfo) > 0 {
		for _, e := range m.NodeInfo {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Vnet != nil {
		l = m.Vnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *VNETInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VnetName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ExpressRouteInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RouteServerIps) > 0 {
		for _, s := range m.RouteServerIps {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.RouteServerAsn != 0 {
		n += 1 + sovTypes(uint64(m.RouteServerAsn))
	}
	return n
}

func (m *NodeInstanceNameType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeInstanceName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResourceGroup)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RegionChoice != nil {
		n += m.RegionChoice.Size()
	}
	if m.Vnet != nil {
		l = m.Vnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	l = len(m.MachineType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WorkerNodes != nil {
		n += m.WorkerNodes.Size()
	}
	if m.DiskSize != 0 {
		n += 2 + sovTypes(uint64(m.DiskSize))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.Sw != nil {
		l = m.Sw.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Os != nil {
		l = m.Os.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.VipParamsPerAz) > 0 {
		for _, e := range m.VipParamsPerAz {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.SiteToSiteTunnelIp)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserModificationTimestamp != nil {
		l = m.UserModificationTimestamp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.SuggestedAction)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.ErrorDescription)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.SiteErrors) > 0 {
		for _, e := range m.SiteErrors {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ValidationState != 0 {
		n += 2 + sovTypes(uint64(m.ValidationState))
	}
	if m.CustomDns != nil {
		l = m.CustomDns.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TfParams != nil {
		l = m.TfParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CloudSiteInfo != nil {
		l = m.CloudSiteInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_AzureRegion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AzureRegion)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_IngressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_IngressEgressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AzureCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AzureCred != nil {
		l = m.AzureCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Assisted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Assisted != nil {
		l = m.Assisted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NodesPerAz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.NodesPerAz))
	return n
}
func (m *GlobalSpecType_VoltstackCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_TotalNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.TotalNodes))
	return n
}
func (m *GlobalSpecType_NoWorkerNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWorkerNodes != nil {
		l = m.NoWorkerNodes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AlternateRegion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AlternateRegion)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_IngressGwAr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressGwAr != nil {
		l = m.IngressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_IngressEgressGwAr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressEgressGwAr != nil {
		l = m.IngressEgressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_VoltstackClusterAr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltstackClusterAr != nil {
		l = m.VoltstackClusterAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResourceGroup)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RegionChoice != nil {
		n += m.RegionChoice.Size()
	}
	if m.Vnet != nil {
		l = m.Vnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	l = len(m.MachineType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WorkerNodes != nil {
		n += m.WorkerNodes.Size()
	}
	if m.DiskSize != 0 {
		n += 2 + sovTypes(uint64(m.DiskSize))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.Sw != nil {
		l = m.Sw.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Os != nil {
		l = m.Os.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CustomDns != nil {
		l = m.CustomDns.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_AzureRegion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AzureRegion)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType_IngressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_IngressEgressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AzureCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AzureCred != nil {
		l = m.AzureCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NodesPerAz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.NodesPerAz))
	return n
}
func (m *CreateSpecType_VoltstackCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_TotalNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.TotalNodes))
	return n
}
func (m *CreateSpecType_NoWorkerNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWorkerNodes != nil {
		l = m.NoWorkerNodes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AlternateRegion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AlternateRegion)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType_IngressGwAr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressGwAr != nil {
		l = m.IngressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_IngressEgressGwAr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressEgressGwAr != nil {
		l = m.IngressEgressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_VoltstackClusterAr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltstackClusterAr != nil {
		l = m.VoltstackClusterAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	if m.WorkerNodes != nil {
		n += m.WorkerNodes.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CustomDns != nil {
		l = m.CustomDns.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_IngressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IngressEgressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AzureCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AzureCred != nil {
		l = m.AzureCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NodesPerAz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.NodesPerAz))
	return n
}
func (m *ReplaceSpecType_VoltstackCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_TotalNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.TotalNodes))
	return n
}
func (m *ReplaceSpecType_NoWorkerNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWorkerNodes != nil {
		l = m.NoWorkerNodes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IngressGwAr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressGwAr != nil {
		l = m.IngressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IngressEgressGwAr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressEgressGwAr != nil {
		l = m.IngressEgressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_VoltstackClusterAr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltstackClusterAr != nil {
		l = m.VoltstackClusterAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResourceGroup)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RegionChoice != nil {
		n += m.RegionChoice.Size()
	}
	if m.Vnet != nil {
		l = m.Vnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	l = len(m.MachineType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WorkerNodes != nil {
		n += m.WorkerNodes.Size()
	}
	if m.DiskSize != 0 {
		n += 2 + sovTypes(uint64(m.DiskSize))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.SiteState != 0 {
		n += 2 + sovTypes(uint64(m.SiteState))
	}
	if len(m.VipParamsPerAz) > 0 {
		for _, e := range m.VipParamsPerAz {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserModificationTimestamp != nil {
		l = m.UserModificationTimestamp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.SuggestedAction)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.ErrorDescription)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.SiteErrors) > 0 {
		for _, e := range m.SiteErrors {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ValidationState != 0 {
		n += 2 + sovTypes(uint64(m.ValidationState))
	}
	if m.CustomDns != nil {
		l = m.CustomDns.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CloudSiteInfo != nil {
		l = m.CloudSiteInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_AzureRegion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AzureRegion)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType_IngressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_IngressEgressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AzureCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AzureCred != nil {
		l = m.AzureCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Assisted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Assisted != nil {
		l = m.Assisted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NodesPerAz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.NodesPerAz))
	return n
}
func (m *GetSpecType_VoltstackCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_TotalNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.TotalNodes))
	return n
}
func (m *GetSpecType_NoWorkerNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWorkerNodes != nil {
		l = m.NoWorkerNodes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AlternateRegion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AlternateRegion)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType_IngressGwAr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressGwAr != nil {
		l = m.IngressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_IngressEgressGwAr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressEgressGwAr != nil {
		l = m.IngressEgressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_VoltstackClusterAr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltstackClusterAr != nil {
		l = m.VoltstackClusterAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AzureHubVnetType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSpokeVnets := "[]*VnetPeeringType{"
	for _, f := range this.SpokeVnets {
		repeatedStringForSpokeVnets += strings.Replace(f.String(), "VnetPeeringType", "VnetPeeringType", 1) + ","
	}
	repeatedStringForSpokeVnets += "}"
	s := strings.Join([]string{`&AzureHubVnetType{`,
		`SpokeVnets:` + repeatedStringForSpokeVnets + `,`,
		`ExpressRouteChoice:` + fmt.Sprintf("%v", this.ExpressRouteChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureHubVnetType_ExpressRouteDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureHubVnetType_ExpressRouteDisabled{`,
		`ExpressRouteDisabled:` + strings.Replace(fmt.Sprintf("%v", this.ExpressRouteDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureHubVnetType_ExpressRouteEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureHubVnetType_ExpressRouteEnabled{`,
		`ExpressRouteEnabled:` + strings.Replace(fmt.Sprintf("%v", this.ExpressRouteEnabled), "ExpressRouteConfigType", "ExpressRouteConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnetPeeringType) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&VnetPeeringType{`,
		`Vnet:` + strings.Replace(fmt.Sprintf("%v", this.Vnet), "AzureVnetType", "views.AzureVnetType", 1) + `,`,
		`RoutingChoice:` + fmt.Sprintf("%v", this.RoutingChoice) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnetPeeringType_Auto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnetPeeringType_Auto{`,
		`Auto:` + strings.Replace(fmt.Sprintf("%v", this.Auto), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnetPeeringType_Manual) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnetPeeringType_Manual{`,
		`Manual:` + strings.Replace(fmt.Sprintf("%v", this.Manual), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressGwType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAzNodes := "[]*AzureVnetOneInterfaceNodeType{"
	for _, f := range this.AzNodes {
		repeatedStringForAzNodes += strings.Replace(fmt.Sprintf("%v", f), "AzureVnetOneInterfaceNodeType", "views.AzureVnetOneInterfaceNodeType", 1) + ","
	}
	repeatedStringForAzNodes += "}"
	s := strings.Join([]string{`&AzureVnetIngressGwType{`,
		`AzNodes:` + repeatedStringForAzNodes + `,`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`AcceleratedNetworking:` + strings.Replace(fmt.Sprintf("%v", this.AcceleratedNetworking), "AcceleratedNetworkingType", "views.AcceleratedNetworkingType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressGwARType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressGwARType{`,
		`Node:` + strings.Replace(fmt.Sprintf("%v", this.Node), "AzureVnetOneInterfaceNodeARType", "views.AzureVnetOneInterfaceNodeARType", 1) + `,`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`AcceleratedNetworking:` + strings.Replace(fmt.Sprintf("%v", this.AcceleratedNetworking), "AcceleratedNetworkingType", "views.AcceleratedNetworkingType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteConfigType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConnections := "[]*ExpressRouteConnectionType{"
	for _, f := range this.Connections {
		repeatedStringForConnections += strings.Replace(f.String(), "ExpressRouteConnectionType", "ExpressRouteConnectionType", 1) + ","
	}
	repeatedStringForConnections += "}"
	s := strings.Join([]string{`&ExpressRouteConfigType{`,
		`Connections:` + repeatedStringForConnections + `,`,
		`SkuChoice:` + fmt.Sprintf("%v", this.SkuChoice) + `,`,
		`GatewaySubnet:` + strings.Replace(fmt.Sprintf("%v", this.GatewaySubnet), "AzureSubnetChoiceWithAutoType", "views.AzureSubnetChoiceWithAutoType", 1) + `,`,
		`RouteServerSubnet:` + strings.Replace(fmt.Sprintf("%v", this.RouteServerSubnet), "AzureSubnetChoiceWithAutoType", "views.AzureSubnetChoiceWithAutoType", 1) + `,`,
		`AsnChoice:` + fmt.Sprintf("%v", this.AsnChoice) + `,`,
		`ConnectivityOptions:` + fmt.Sprintf("%v", this.ConnectivityOptions) + `,`,
		`SpokeVnetRoutes:` + fmt.Sprintf("%v", this.SpokeVnetRoutes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteConfigType_SkuStandard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteConfigType_SkuStandard{`,
		`SkuStandard:` + strings.Replace(fmt.Sprintf("%v", this.SkuStandard), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteConfigType_SkuErgw1Az) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteConfigType_SkuErgw1Az{`,
		`SkuErgw1Az:` + strings.Replace(fmt.Sprintf("%v", this.SkuErgw1Az), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteConfigType_SkuHighPerf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteConfigType_SkuHighPerf{`,
		`SkuHighPerf:` + strings.Replace(fmt.Sprintf("%v", this.SkuHighPerf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteConfigType_SkuErgw2Az) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteConfigType_SkuErgw2Az{`,
		`SkuErgw2Az:` + strings.Replace(fmt.Sprintf("%v", this.SkuErgw2Az), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteConfigType_AutoAsn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteConfigType_AutoAsn{`,
		`AutoAsn:` + strings.Replace(fmt.Sprintf("%v", this.AutoAsn), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteConfigType_CustomAsn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteConfigType_CustomAsn{`,
		`CustomAsn:` + fmt.Sprintf("%v", this.CustomAsn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteConfigType_SiteRegistrationOverInternet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteConfigType_SiteRegistrationOverInternet{`,
		`SiteRegistrationOverInternet:` + strings.Replace(fmt.Sprintf("%v", this.SiteRegistrationOverInternet), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteConfigType_SiteRegistrationOverExpressRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteConfigType_SiteRegistrationOverExpressRoute{`,
		`SiteRegistrationOverExpressRoute:` + strings.Replace(fmt.Sprintf("%v", this.SiteRegistrationOverExpressRoute), "CloudLinkADNType", "views.CloudLinkADNType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteConfigType_AdvertiseToRouteServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteConfigType_AdvertiseToRouteServer{`,
		`AdvertiseToRouteServer:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseToRouteServer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteConfigType_DoNotAdvertiseToRouteServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteConfigType_DoNotAdvertiseToRouteServer{`,
		`DoNotAdvertiseToRouteServer:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertiseToRouteServer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteOtherSubscriptionConnection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteOtherSubscriptionConnection{`,
		`CircuitId:` + fmt.Sprintf("%v", this.CircuitId) + `,`,
		`AuthorizedKey:` + strings.Replace(fmt.Sprintf("%v", this.AuthorizedKey), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteConnectionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteConnectionType{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`SubscriptionChoice:` + fmt.Sprintf("%v", this.SubscriptionChoice) + `,`,
		`Weight:` + fmt.Sprintf("%v", this.Weight) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteConnectionType_OtherSubscription) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteConnectionType_OtherSubscription{`,
		`OtherSubscription:` + strings.Replace(fmt.Sprintf("%v", this.OtherSubscription), "ExpressRouteOtherSubscriptionConnection", "ExpressRouteOtherSubscriptionConnection", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteConnectionType_CircuitId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteConnectionType_CircuitId{`,
		`CircuitId:` + fmt.Sprintf("%v", this.CircuitId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAzNodes := "[]*AzureVnetTwoInterfaceNodeType{"
	for _, f := range this.AzNodes {
		repeatedStringForAzNodes += strings.Replace(fmt.Sprintf("%v", f), "AzureVnetTwoInterfaceNodeType", "views.AzureVnetTwoInterfaceNodeType", 1) + ","
	}
	repeatedStringForAzNodes += "}"
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType{`,
		`AzNodes:` + repeatedStringForAzNodes + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`InsideStaticRouteChoice:` + fmt.Sprintf("%v", this.InsideStaticRouteChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`HubChoice:` + fmt.Sprintf("%v", this.HubChoice) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`AcceleratedNetworking:` + strings.Replace(fmt.Sprintf("%v", this.AcceleratedNetworking), "AcceleratedNetworkingType", "views.AcceleratedNetworkingType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoInsideStaticRoutes{`,
		`NoInsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoInsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_InsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_InsideStaticRoutes{`,
		`InsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.InsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn{`,
		`DcClusterGroupOutsideVn:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupOutsideVn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_DcClusterGroupInsideVn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_DcClusterGroupInsideVn{`,
		`DcClusterGroupInsideVn:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupInsideVn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NotHub) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NotHub{`,
		`NotHub:` + strings.Replace(fmt.Sprintf("%v", this.NotHub), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_Hub) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_Hub{`,
		`Hub:` + strings.Replace(fmt.Sprintf("%v", this.Hub), "AzureHubVnetType", "AzureHubVnetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType{`,
		`Node:` + strings.Replace(fmt.Sprintf("%v", this.Node), "AzureVnetTwoInterfaceNodeARType", "views.AzureVnetTwoInterfaceNodeARType", 1) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`InsideStaticRouteChoice:` + fmt.Sprintf("%v", this.InsideStaticRouteChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`HubChoice:` + fmt.Sprintf("%v", this.HubChoice) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`AcceleratedNetworking:` + strings.Replace(fmt.Sprintf("%v", this.AcceleratedNetworking), "AcceleratedNetworkingType", "views.AcceleratedNetworkingType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_NoInsideStaticRoutes{`,
		`NoInsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoInsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_InsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_InsideStaticRoutes{`,
		`InsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.InsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn{`,
		`DcClusterGroupOutsideVn:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupOutsideVn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn{`,
		`DcClusterGroupInsideVn:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupInsideVn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NotHub) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_NotHub{`,
		`NotHub:` + strings.Replace(fmt.Sprintf("%v", this.NotHub), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_Hub) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_Hub{`,
		`Hub:` + strings.Replace(fmt.Sprintf("%v", this.Hub), "AzureHubVnetType", "AzureHubVnetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAzNodes := "[]*AzureVnetOneInterfaceNodeType{"
	for _, f := range this.AzNodes {
		repeatedStringForAzNodes += strings.Replace(fmt.Sprintf("%v", f), "AzureVnetOneInterfaceNodeType", "views.AzureVnetOneInterfaceNodeType", 1) + ","
	}
	repeatedStringForAzNodes += "}"
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType{`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`AzNodes:` + repeatedStringForAzNodes + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`StorageClassChoice:` + fmt.Sprintf("%v", this.StorageClassChoice) + `,`,
		`K8SClusterChoice:` + fmt.Sprintf("%v", this.K8SClusterChoice) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`AcceleratedNetworking:` + strings.Replace(fmt.Sprintf("%v", this.AcceleratedNetworking), "AcceleratedNetworkingType", "views.AcceleratedNetworkingType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_DefaultStorage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_DefaultStorage{`,
		`DefaultStorage:` + strings.Replace(fmt.Sprintf("%v", this.DefaultStorage), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_StorageClassList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_StorageClassList{`,
		`StorageClassList:` + strings.Replace(fmt.Sprintf("%v", this.StorageClassList), "StorageClassListType", "views.StorageClassListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoK8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoK8SCluster{`,
		`NoK8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.NoK8SCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_K8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_K8SCluster{`,
		`K8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.K8SCluster), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_DcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_DcClusterGroup{`,
		`DcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroup), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType{`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`Node:` + strings.Replace(fmt.Sprintf("%v", this.Node), "AzureVnetOneInterfaceNodeARType", "views.AzureVnetOneInterfaceNodeARType", 1) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`StorageClassChoice:` + fmt.Sprintf("%v", this.StorageClassChoice) + `,`,
		`K8SClusterChoice:` + fmt.Sprintf("%v", this.K8SClusterChoice) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`AcceleratedNetworking:` + strings.Replace(fmt.Sprintf("%v", this.AcceleratedNetworking), "AcceleratedNetworkingType", "views.AcceleratedNetworkingType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_DefaultStorage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_DefaultStorage{`,
		`DefaultStorage:` + strings.Replace(fmt.Sprintf("%v", this.DefaultStorage), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_StorageClassList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_StorageClassList{`,
		`StorageClassList:` + strings.Replace(fmt.Sprintf("%v", this.StorageClassList), "StorageClassListType", "views.StorageClassListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoK8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_NoK8SCluster{`,
		`NoK8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.NoK8SCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_K8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_K8SCluster{`,
		`K8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.K8SCluster), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_DcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_DcClusterGroup{`,
		`DcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroup), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressGwReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressGwReplaceType{`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressGwARReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressGwARReplaceType{`,
		`}`,
	}, "")
	return s
}
func (this *VnetIpPrefixesType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnetIpPrefixesType{`,
		`Vnet:` + strings.Replace(fmt.Sprintf("%v", this.Vnet), "AzureVnetType", "views.AzureVnetType", 1) + `,`,
		`Prefixes:` + fmt.Sprintf("%v", this.Prefixes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType{`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`InsideStaticRouteChoice:` + fmt.Sprintf("%v", this.InsideStaticRouteChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`HubChoice:` + fmt.Sprintf("%v", this.HubChoice) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes{`,
		`NoInsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoInsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes{`,
		`InsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.InsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn{`,
		`DcClusterGroupOutsideVn:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupOutsideVn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn{`,
		`DcClusterGroupInsideVn:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupInsideVn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NotHub) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NotHub{`,
		`NotHub:` + strings.Replace(fmt.Sprintf("%v", this.NotHub), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_Hub) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_Hub{`,
		`Hub:` + strings.Replace(fmt.Sprintf("%v", this.Hub), "AzureHubVnetType", "AzureHubVnetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType{`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`InsideStaticRouteChoice:` + fmt.Sprintf("%v", this.InsideStaticRouteChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`HubChoice:` + fmt.Sprintf("%v", this.HubChoice) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes{`,
		`NoInsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoInsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes{`,
		`InsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.InsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn{`,
		`DcClusterGroupOutsideVn:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupOutsideVn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn{`,
		`DcClusterGroupInsideVn:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupInsideVn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_NotHub) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_NotHub{`,
		`NotHub:` + strings.Replace(fmt.Sprintf("%v", this.NotHub), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_Hub) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_Hub{`,
		`Hub:` + strings.Replace(fmt.Sprintf("%v", this.Hub), "AzureHubVnetType", "AzureHubVnetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType{`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_DcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_DcClusterGroup{`,
		`DcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroup), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType{`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_DcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType_DcClusterGroup{`,
		`DcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroup), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetSiteInfoType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSpokeVnetPrefixInfo := "[]*VnetIpPrefixesType{"
	for _, f := range this.SpokeVnetPrefixInfo {
		repeatedStringForSpokeVnetPrefixInfo += strings.Replace(f.String(), "VnetIpPrefixesType", "VnetIpPrefixesType", 1) + ","
	}
	repeatedStringForSpokeVnetPrefixInfo += "}"
	repeatedStringForNodeInfo := "[]*NodeInstanceNameType{"
	for _, f := range this.NodeInfo {
		repeatedStringForNodeInfo += strings.Replace(f.String(), "NodeInstanceNameType", "NodeInstanceNameType", 1) + ","
	}
	repeatedStringForNodeInfo += "}"
	s := strings.Join([]string{`&AzureVnetSiteInfoType{`,
		`PublicIps:` + fmt.Sprintf("%v", this.PublicIps) + `,`,
		`PrivateIps:` + fmt.Sprintf("%v", this.PrivateIps) + `,`,
		`SpokeVnetPrefixInfo:` + repeatedStringForSpokeVnetPrefixInfo + `,`,
		`ExpressRouteInfo:` + strings.Replace(this.ExpressRouteInfo.String(), "ExpressRouteInfo", "ExpressRouteInfo", 1) + `,`,
		`NodeInfo:` + repeatedStringForNodeInfo + `,`,
		`Vnet:` + strings.Replace(this.Vnet.String(), "VNETInfoType", "VNETInfoType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VNETInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VNETInfoType{`,
		`VnetName:` + fmt.Sprintf("%v", this.VnetName) + `,`,
		`ResourceId:` + fmt.Sprintf("%v", this.ResourceId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressRouteInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpressRouteInfo{`,
		`RouteServerIps:` + fmt.Sprintf("%v", this.RouteServerIps) + `,`,
		`RouteServerAsn:` + fmt.Sprintf("%v", this.RouteServerAsn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInstanceNameType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInstanceNameType{`,
		`NodeInstanceName:` + fmt.Sprintf("%v", this.NodeInstanceName) + `,`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVipParamsPerAz := "[]*PublishVIPParamsPerAz{"
	for _, f := range this.VipParamsPerAz {
		repeatedStringForVipParamsPerAz += strings.Replace(fmt.Sprintf("%v", f), "PublishVIPParamsPerAz", "site.PublishVIPParamsPerAz", 1) + ","
	}
	repeatedStringForVipParamsPerAz += "}"
	repeatedStringForSiteErrors := "[]*SiteError{"
	for _, f := range this.SiteErrors {
		repeatedStringForSiteErrors += strings.Replace(fmt.Sprintf("%v", f), "SiteError", "views.SiteError", 1) + ","
	}
	repeatedStringForSiteErrors += "}"
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ResourceGroup:` + fmt.Sprintf("%v", this.ResourceGroup) + `,`,
		`RegionChoice:` + fmt.Sprintf("%v", this.RegionChoice) + `,`,
		`Vnet:` + strings.Replace(fmt.Sprintf("%v", this.Vnet), "AzureVnetChoiceType", "views.AzureVnetChoiceType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`MachineType:` + fmt.Sprintf("%v", this.MachineType) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`Sw:` + strings.Replace(fmt.Sprintf("%v", this.Sw), "VolterraSoftwareType", "views.VolterraSoftwareType", 1) + `,`,
		`Os:` + strings.Replace(fmt.Sprintf("%v", this.Os), "OperatingSystemType", "views.OperatingSystemType", 1) + `,`,
		`VipParamsPerAz:` + repeatedStringForVipParamsPerAz + `,`,
		`SiteToSiteTunnelIp:` + fmt.Sprintf("%v", this.SiteToSiteTunnelIp) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`UserModificationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.UserModificationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`SuggestedAction:` + fmt.Sprintf("%v", this.SuggestedAction) + `,`,
		`ErrorDescription:` + fmt.Sprintf("%v", this.ErrorDescription) + `,`,
		`SiteErrors:` + repeatedStringForSiteErrors + `,`,
		`ValidationState:` + fmt.Sprintf("%v", this.ValidationState) + `,`,
		`CustomDns:` + strings.Replace(fmt.Sprintf("%v", this.CustomDns), "CustomDNS", "views.CustomDNS", 1) + `,`,
		`TfParams:` + strings.Replace(fmt.Sprintf("%v", this.TfParams), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`CloudSiteInfo:` + strings.Replace(this.CloudSiteInfo.String(), "AzureVnetSiteInfoType", "AzureVnetSiteInfoType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AzureRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AzureRegion{`,
		`AzureRegion:` + fmt.Sprintf("%v", this.AzureRegion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AzureVnetIngressGwType", "AzureVnetIngressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AzureVnetIngressEgressGwType", "AzureVnetIngressEgressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AzureCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AzureCred{`,
		`AzureCred:` + strings.Replace(fmt.Sprintf("%v", this.AzureCred), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Assisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Assisted{`,
		`Assisted:` + strings.Replace(fmt.Sprintf("%v", this.Assisted), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NodesPerAz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NodesPerAz{`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AzureVnetVoltstackClusterType", "AzureVnetVoltstackClusterType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TotalNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TotalNodes{`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoWorkerNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoWorkerNodes{`,
		`NoWorkerNodes:` + strings.Replace(fmt.Sprintf("%v", this.NoWorkerNodes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AlternateRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AlternateRegion{`,
		`AlternateRegion:` + fmt.Sprintf("%v", this.AlternateRegion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IngressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IngressGwAr{`,
		`IngressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressGwAr), "AzureVnetIngressGwARType", "AzureVnetIngressGwARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IngressEgressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IngressEgressGwAr{`,
		`IngressEgressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGwAr), "AzureVnetIngressEgressGwARType", "AzureVnetIngressEgressGwARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_VoltstackClusterAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_VoltstackClusterAr{`,
		`VoltstackClusterAr:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackClusterAr), "AzureVnetVoltstackClusterARType", "AzureVnetVoltstackClusterARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`ResourceGroup:` + fmt.Sprintf("%v", this.ResourceGroup) + `,`,
		`RegionChoice:` + fmt.Sprintf("%v", this.RegionChoice) + `,`,
		`Vnet:` + strings.Replace(fmt.Sprintf("%v", this.Vnet), "AzureVnetChoiceType", "views.AzureVnetChoiceType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`MachineType:` + fmt.Sprintf("%v", this.MachineType) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`Sw:` + strings.Replace(fmt.Sprintf("%v", this.Sw), "VolterraSoftwareType", "views.VolterraSoftwareType", 1) + `,`,
		`Os:` + strings.Replace(fmt.Sprintf("%v", this.Os), "OperatingSystemType", "views.OperatingSystemType", 1) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`CustomDns:` + strings.Replace(fmt.Sprintf("%v", this.CustomDns), "CustomDNS", "views.CustomDNS", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AzureRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AzureRegion{`,
		`AzureRegion:` + fmt.Sprintf("%v", this.AzureRegion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AzureVnetIngressGwType", "AzureVnetIngressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AzureVnetIngressEgressGwType", "AzureVnetIngressEgressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AzureCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AzureCred{`,
		`AzureCred:` + strings.Replace(fmt.Sprintf("%v", this.AzureCred), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NodesPerAz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NodesPerAz{`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AzureVnetVoltstackClusterType", "AzureVnetVoltstackClusterType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_TotalNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_TotalNodes{`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoWorkerNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoWorkerNodes{`,
		`NoWorkerNodes:` + strings.Replace(fmt.Sprintf("%v", this.NoWorkerNodes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AlternateRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AlternateRegion{`,
		`AlternateRegion:` + fmt.Sprintf("%v", this.AlternateRegion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IngressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IngressGwAr{`,
		`IngressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressGwAr), "AzureVnetIngressGwARType", "AzureVnetIngressGwARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IngressEgressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IngressEgressGwAr{`,
		`IngressEgressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGwAr), "AzureVnetIngressEgressGwARType", "AzureVnetIngressEgressGwARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_VoltstackClusterAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_VoltstackClusterAr{`,
		`VoltstackClusterAr:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackClusterAr), "AzureVnetVoltstackClusterARType", "AzureVnetVoltstackClusterARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`CustomDns:` + strings.Replace(fmt.Sprintf("%v", this.CustomDns), "CustomDNS", "views.CustomDNS", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AzureVnetIngressGwReplaceType", "AzureVnetIngressGwReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AzureVnetIngressEgressGwReplaceType", "AzureVnetIngressEgressGwReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AzureCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AzureCred{`,
		`AzureCred:` + strings.Replace(fmt.Sprintf("%v", this.AzureCred), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NodesPerAz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NodesPerAz{`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AzureVnetVoltstackClusterReplaceType", "AzureVnetVoltstackClusterReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_TotalNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_TotalNodes{`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoWorkerNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoWorkerNodes{`,
		`NoWorkerNodes:` + strings.Replace(fmt.Sprintf("%v", this.NoWorkerNodes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IngressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IngressGwAr{`,
		`IngressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressGwAr), "AzureVnetIngressGwARReplaceType", "AzureVnetIngressGwARReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IngressEgressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IngressEgressGwAr{`,
		`IngressEgressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGwAr), "AzureVnetIngressEgressGwARReplaceType", "AzureVnetIngressEgressGwARReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_VoltstackClusterAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_VoltstackClusterAr{`,
		`VoltstackClusterAr:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackClusterAr), "AzureVnetVoltstackClusterARReplaceType", "AzureVnetVoltstackClusterARReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVipParamsPerAz := "[]*PublishVIPParamsPerAz{"
	for _, f := range this.VipParamsPerAz {
		repeatedStringForVipParamsPerAz += strings.Replace(fmt.Sprintf("%v", f), "PublishVIPParamsPerAz", "site.PublishVIPParamsPerAz", 1) + ","
	}
	repeatedStringForVipParamsPerAz += "}"
	repeatedStringForSiteErrors := "[]*SiteError{"
	for _, f := range this.SiteErrors {
		repeatedStringForSiteErrors += strings.Replace(fmt.Sprintf("%v", f), "SiteError", "views.SiteError", 1) + ","
	}
	repeatedStringForSiteErrors += "}"
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`ResourceGroup:` + fmt.Sprintf("%v", this.ResourceGroup) + `,`,
		`RegionChoice:` + fmt.Sprintf("%v", this.RegionChoice) + `,`,
		`Vnet:` + strings.Replace(fmt.Sprintf("%v", this.Vnet), "AzureVnetChoiceType", "views.AzureVnetChoiceType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`MachineType:` + fmt.Sprintf("%v", this.MachineType) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`SiteState:` + fmt.Sprintf("%v", this.SiteState) + `,`,
		`VipParamsPerAz:` + repeatedStringForVipParamsPerAz + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`UserModificationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.UserModificationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`SuggestedAction:` + fmt.Sprintf("%v", this.SuggestedAction) + `,`,
		`ErrorDescription:` + fmt.Sprintf("%v", this.ErrorDescription) + `,`,
		`SiteErrors:` + repeatedStringForSiteErrors + `,`,
		`ValidationState:` + fmt.Sprintf("%v", this.ValidationState) + `,`,
		`CustomDns:` + strings.Replace(fmt.Sprintf("%v", this.CustomDns), "CustomDNS", "views.CustomDNS", 1) + `,`,
		`CloudSiteInfo:` + strings.Replace(this.CloudSiteInfo.String(), "AzureVnetSiteInfoType", "AzureVnetSiteInfoType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AzureRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AzureRegion{`,
		`AzureRegion:` + fmt.Sprintf("%v", this.AzureRegion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AzureVnetIngressGwType", "AzureVnetIngressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AzureVnetIngressEgressGwType", "AzureVnetIngressEgressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AzureCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AzureCred{`,
		`AzureCred:` + strings.Replace(fmt.Sprintf("%v", this.AzureCred), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Assisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Assisted{`,
		`Assisted:` + strings.Replace(fmt.Sprintf("%v", this.Assisted), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NodesPerAz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NodesPerAz{`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AzureVnetVoltstackClusterType", "AzureVnetVoltstackClusterType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_TotalNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_TotalNodes{`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoWorkerNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoWorkerNodes{`,
		`NoWorkerNodes:` + strings.Replace(fmt.Sprintf("%v", this.NoWorkerNodes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AlternateRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AlternateRegion{`,
		`AlternateRegion:` + fmt.Sprintf("%v", this.AlternateRegion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IngressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IngressGwAr{`,
		`IngressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressGwAr), "AzureVnetIngressGwARType", "AzureVnetIngressGwARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IngressEgressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IngressEgressGwAr{`,
		`IngressEgressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGwAr), "AzureVnetIngressEgressGwARType", "AzureVnetIngressEgressGwARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_VoltstackClusterAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_VoltstackClusterAr{`,
		`VoltstackClusterAr:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackClusterAr), "AzureVnetVoltstackClusterARType", "AzureVnetVoltstackClusterARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AzureHubVnetType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureHubVnetType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureHubVnetType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpokeVnets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpokeVnets = append(m.SpokeVnets, &VnetPeeringType{})
			if err := m.SpokeVnets[len(m.SpokeVnets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressRouteDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExpressRouteChoice = &AzureHubVnetType_ExpressRouteDisabled{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressRouteEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExpressRouteConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExpressRouteChoice = &AzureHubVnetType_ExpressRouteEnabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VnetPeeringType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VnetPeeringType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VnetPeeringType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnet == nil {
				m.Vnet = &views.AzureVnetType{}
			}
			if err := m.Vnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RoutingChoice = &VnetPeeringType_Auto{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manual", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RoutingChoice = &VnetPeeringType_Manual{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressGwType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressGwType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressGwType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &views.AzureVnetOneInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceleratedNetworking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceleratedNetworking == nil {
				m.AcceleratedNetworking = &views.AcceleratedNetworkingType{}
			}
			if err := m.AcceleratedNetworking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressGwARType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressGwARType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressGwARType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &views.AzureVnetOneInterfaceNodeARType{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceleratedNetworking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceleratedNetworking == nil {
				m.AcceleratedNetworking = &views.AcceleratedNetworkingType{}
			}
			if err := m.AcceleratedNetworking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpressRouteConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpressRouteConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpressRouteConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Connections = append(m.Connections, &ExpressRouteConnectionType{})
			if err := m.Connections[len(m.Connections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkuStandard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SkuChoice = &ExpressRouteConfigType_SkuStandard{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkuErgw1Az", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SkuChoice = &ExpressRouteConfigType_SkuErgw1Az{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkuHighPerf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SkuChoice = &ExpressRouteConfigType_SkuHighPerf{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkuErgw2Az", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SkuChoice = &ExpressRouteConfigType_SkuErgw2Az{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewaySubnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewaySubnet == nil {
				m.GatewaySubnet = &views.AzureSubnetChoiceWithAutoType{}
			}
			if err := m.GatewaySubnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteServerSubnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteServerSubnet == nil {
				m.RouteServerSubnet = &views.AzureSubnetChoiceWithAutoType{}
			}
			if err := m.RouteServerSubnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoAsn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsnChoice = &ExpressRouteConfigType_AutoAsn{v}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomAsn", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsnChoice = &ExpressRouteConfigType_CustomAsn{v}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteRegistrationOverInternet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectivityOptions = &ExpressRouteConfigType_SiteRegistrationOverInternet{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteRegistrationOverExpressRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.CloudLinkADNType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectivityOptions = &ExpressRouteConfigType_SiteRegistrationOverExpressRoute{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseToRouteServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SpokeVnetRoutes = &ExpressRouteConfigType_AdvertiseToRouteServer{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertiseToRouteServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SpokeVnetRoutes = &ExpressRouteConfigType_DoNotAdvertiseToRouteServer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpressRouteOtherSubscriptionConnection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpressRouteOtherSubscriptionConnection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpressRouteOtherSubscriptionConnection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CircuitId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CircuitId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizedKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorizedKey == nil {
				m.AuthorizedKey = &schema.SecretType{}
			}
			if err := m.AuthorizedKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpressRouteConnectionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpressRouteConnectionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpressRouteConnectionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExpressRouteOtherSubscriptionConnection{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SubscriptionChoice = &ExpressRouteConnectionType_OtherSubscription{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CircuitId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionChoice = &ExpressRouteConnectionType_CircuitId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &views.AzureVnetTwoInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoInsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwType_NoInsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwType_InsideStaticRoutes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetIngressEgressGwType_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupOutsideVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetIngressEgressGwType_DcClusterGroupOutsideVn{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupInsideVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetIngressEgressGwType_DcClusterGroupInsideVn{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetIngressEgressGwType_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetIngressEgressGwType_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotHub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HubChoice = &AzureVnetIngressEgressGwType_NotHub{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureHubVnetType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HubChoice = &AzureVnetIngressEgressGwType_Hub{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceleratedNetworking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceleratedNetworking == nil {
				m.AcceleratedNetworking = &views.AcceleratedNetworkingType{}
			}
			if err := m.AcceleratedNetworking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwARType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwARType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &views.AzureVnetTwoInterfaceNodeARType{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwARType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwARType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwARType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoInsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_NoInsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_InsideStaticRoutes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwARType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwARType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwARType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetIngressEgressGwARType_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupOutsideVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetIngressEgressGwARType_DcClusterGroupOutsideVn{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupInsideVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetIngressEgressGwARType_DcClusterGroupInsideVn{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetIngressEgressGwARType_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetIngressEgressGwARType_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotHub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HubChoice = &AzureVnetIngressEgressGwARType_NotHub{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureHubVnetType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HubChoice = &AzureVnetIngressEgressGwARType_Hub{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwARType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceleratedNetworking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceleratedNetworking == nil {
				m.AcceleratedNetworking = &views.AcceleratedNetworkingType{}
			}
			if err := m.AcceleratedNetworking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &views.AzureVnetOneInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageClassChoice = &AzureVnetVoltstackClusterType_DefaultStorage{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageClassList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.StorageClassListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageClassChoice = &AzureVnetVoltstackClusterType_StorageClassList{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoK8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &AzureVnetVoltstackClusterType_NoK8SCluster{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &AzureVnetVoltstackClusterType_K8SCluster{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetVoltstackClusterType_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetVoltstackClusterType_DcClusterGroup{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetVoltstackClusterType_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetVoltstackClusterType_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceleratedNetworking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceleratedNetworking == nil {
				m.AcceleratedNetworking = &views.AcceleratedNetworkingType{}
			}
			if err := m.AcceleratedNetworking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterARType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterARType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &views.AzureVnetOneInterfaceNodeARType{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterARType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterARType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterARType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterARType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterARType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterARType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterARType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageClassChoice = &AzureVnetVoltstackClusterARType_DefaultStorage{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageClassList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.StorageClassListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageClassChoice = &AzureVnetVoltstackClusterARType_StorageClassList{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoK8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &AzureVnetVoltstackClusterARType_NoK8SCluster{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &AzureVnetVoltstackClusterARType_K8SCluster{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetVoltstackClusterARType_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetVoltstackClusterARType_DcClusterGroup{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetVoltstackClusterARType_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetVoltstackClusterARType_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterARType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceleratedNetworking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceleratedNetworking == nil {
				m.AcceleratedNetworking = &views.AcceleratedNetworkingType{}
			}
			if err := m.AcceleratedNetworking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressGwReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressGwReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressGwReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressGwARReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressGwARReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressGwARReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VnetIpPrefixesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VnetIpPrefixesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VnetIpPrefixesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnet == nil {
				m.Vnet = &views.AzureVnetType{}
			}
			if err := m.Vnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefixes = append(m.Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_NoForwardProxy{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoInsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwReplaceType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetIngressEgressGwReplaceType_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupOutsideVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetIngressEgressGwReplaceType_DcClusterGroupOutsideVn{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupInsideVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetIngressEgressGwReplaceType_DcClusterGroupInsideVn{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetIngressEgressGwReplaceType_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetIngressEgressGwReplaceType_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotHub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HubChoice = &AzureVnetIngressEgressGwReplaceType_NotHub{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureHubVnetType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HubChoice = &AzureVnetIngressEgressGwReplaceType_Hub{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwARReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwARReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwARReplaceType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwARReplaceType_NoForwardProxy{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwARReplaceType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwARReplaceType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoInsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwARReplaceType_NoInsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwARReplaceType_InsideStaticRoutes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwARReplaceType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwARReplaceType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwARReplaceType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwARReplaceType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwARReplaceType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetIngressEgressGwARReplaceType_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupOutsideVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetIngressEgressGwARReplaceType_DcClusterGroupOutsideVn{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupInsideVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetIngressEgressGwARReplaceType_DcClusterGroupInsideVn{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetIngressEgressGwARReplaceType_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetIngressEgressGwARReplaceType_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotHub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HubChoice = &AzureVnetIngressEgressGwARReplaceType_NotHub{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureHubVnetType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HubChoice = &AzureVnetIngressEgressGwARReplaceType_Hub{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwARReplaceType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetVoltstackClusterReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterReplaceType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetVoltstackClusterReplaceType_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetVoltstackClusterReplaceType_DcClusterGroup{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetVoltstackClusterReplaceType_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetVoltstackClusterReplaceType_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterARReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterARReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterARReplaceType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterARReplaceType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterARReplaceType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterARReplaceType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterARReplaceType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterARReplaceType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterARReplaceType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterARReplaceType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterARReplaceType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetVoltstackClusterARReplaceType_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AzureVnetVoltstackClusterARReplaceType_DcClusterGroup{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetVoltstackClusterARReplaceType_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AzureVnetVoltstackClusterARReplaceType_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterARReplaceType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetSiteInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetSiteInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetSiteInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIps = append(m.PublicIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIps = append(m.PrivateIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpokeVnetPrefixInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpokeVnetPrefixInfo = append(m.SpokeVnetPrefixInfo, &VnetIpPrefixesType{})
			if err := m.SpokeVnetPrefixInfo[len(m.SpokeVnetPrefixInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressRouteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpressRouteInfo == nil {
				m.ExpressRouteInfo = &ExpressRouteInfo{}
			}
			if err := m.ExpressRouteInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeInfo = append(m.NodeInfo, &NodeInstanceNameType{})
			if err := m.NodeInfo[len(m.NodeInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnet == nil {
				m.Vnet = &VNETInfoType{}
			}
			if err := m.Vnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VNETInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VNETInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VNETInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VnetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpressRouteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpressRouteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpressRouteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteServerIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteServerIps = append(m.RouteServerIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteServerAsn", wireType)
			}
			m.RouteServerAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteServerAsn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInstanceNameType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInstanceNameType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInstanceNameType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInstanceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeInstanceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionChoice = &GlobalSpecType_AzureRegion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnet == nil {
				m.Vnet = &views.AzureVnetChoiceType{}
			}
			if err := m.Vnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_IngressGw{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GlobalSpecType_AzureCred{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GlobalSpecType_Assisted{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &GlobalSpecType_NodesPerAz{v}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sw == nil {
				m.Sw = &views.VolterraSoftwareType{}
			}
			if err := m.Sw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Os == nil {
				m.Os = &views.OperatingSystemType{}
			}
			if err := m.Os.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipParamsPerAz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipParamsPerAz = append(m.VipParamsPerAz, &site.PublishVIPParamsPerAz{})
			if err := m.VipParamsPerAz[len(m.VipParamsPerAz)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &GlobalSpecType_TotalNodes{v}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WorkerNodes = &GlobalSpecType_NoWorkerNodes{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlternateRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionChoice = &GlobalSpecType_AlternateRegion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_IngressGwAr{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_IngressEgressGwAr{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackClusterAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_VoltstackClusterAr{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteToSiteTunnelIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteToSiteTunnelIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserModificationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserModificationTimestamp == nil {
				m.UserModificationTimestamp = &types.Timestamp{}
			}
			if err := m.UserModificationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestedAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteErrors = append(m.SiteErrors, &views.SiteError{})
			if err := m.SiteErrors[len(m.SiteErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationState", wireType)
			}
			m.ValidationState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationState |= views.ConfigValidationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomDns == nil {
				m.CustomDns = &views.CustomDNS{}
			}
			if err := m.CustomDns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 999:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TfParams == nil {
				m.TfParams = &views.ObjectRefType{}
			}
			if err := m.TfParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudSiteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudSiteInfo == nil {
				m.CloudSiteInfo = &AzureVnetSiteInfoType{}
			}
			if err := m.CloudSiteInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionChoice = &CreateSpecType_AzureRegion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnet == nil {
				m.Vnet = &views.AzureVnetChoiceType{}
			}
			if err := m.Vnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_IngressGw{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &CreateSpecType_AzureCred{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &CreateSpecType_NodesPerAz{v}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sw == nil {
				m.Sw = &views.VolterraSoftwareType{}
			}
			if err := m.Sw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Os == nil {
				m.Os = &views.OperatingSystemType{}
			}
			if err := m.Os.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &CreateSpecType_TotalNodes{v}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WorkerNodes = &CreateSpecType_NoWorkerNodes{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlternateRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionChoice = &CreateSpecType_AlternateRegion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_IngressGwAr{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_IngressEgressGwAr{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackClusterAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_VoltstackClusterAr{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomDns == nil {
				m.CustomDns = &views.CustomDNS{}
			}
			if err := m.CustomDns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_IngressGw{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &ReplaceSpecType_AzureCred{v}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &ReplaceSpecType_NodesPerAz{v}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &ReplaceSpecType_TotalNodes{v}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WorkerNodes = &ReplaceSpecType_NoWorkerNodes{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwARReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_IngressGwAr{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwARReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_IngressEgressGwAr{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackClusterAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterARReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_VoltstackClusterAr{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomDns == nil {
				m.CustomDns = &views.CustomDNS{}
			}
			if err := m.CustomDns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionChoice = &GetSpecType_AzureRegion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnet == nil {
				m.Vnet = &views.AzureVnetChoiceType{}
			}
			if err := m.Vnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_IngressGw{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GetSpecType_AzureCred{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GetSpecType_Assisted{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &GetSpecType_NodesPerAz{v}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteState", wireType)
			}
			m.SiteState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteState |= site.SiteState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipParamsPerAz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipParamsPerAz = append(m.VipParamsPerAz, &site.PublishVIPParamsPerAz{})
			if err := m.VipParamsPerAz[len(m.VipParamsPerAz)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &GetSpecType_TotalNodes{v}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WorkerNodes = &GetSpecType_NoWorkerNodes{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlternateRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionChoice = &GetSpecType_AlternateRegion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_IngressGwAr{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_IngressEgressGwAr{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackClusterAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_VoltstackClusterAr{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserModificationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserModificationTimestamp == nil {
				m.UserModificationTimestamp = &types.Timestamp{}
			}
			if err := m.UserModificationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestedAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteErrors = append(m.SiteErrors, &views.SiteError{})
			if err := m.SiteErrors[len(m.SiteErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationState", wireType)
			}
			m.ValidationState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationState |= views.ConfigValidationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomDns == nil {
				m.CustomDns = &views.CustomDNS{}
			}
			if err := m.CustomDns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudSiteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudSiteInfo == nil {
				m.CloudSiteInfo = &AzureVnetSiteInfoType{}
			}
			if err := m.CloudSiteInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

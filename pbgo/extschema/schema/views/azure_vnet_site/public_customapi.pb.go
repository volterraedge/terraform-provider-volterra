// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/azure_vnet_site/public_customapi.proto

// Azure Vnet site
//
// x-displayName: "Configure Azure Vnet Site"
// Azure Vnet site view defines a required parameters that can be used in CRUD, to create and manage a volterra site in Azure Vnet.
// It can be used to either automatically create or Manually assisted site creation in Azure Vnet.
//
// View will create following child objects.
//
// * Site
//

package azure_vnet_site

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Request to configure Azure Vnet Site VIP information
//
// x-displayName: "Request to configure Azure Vnet Site VIP information"
// Request to configure Azure Vnet Site VIP information
type SetVIPInfoRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "default"
	// Namespace for the object to be configured
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "aws-vpc-site-1"
	// Name of the object to be configured
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// VIP Params Per AZ
	//
	// x-displayName: "VIP Params Per AZ"
	// x-example: "master-0"
	// VIP Parameters per AZ
	VipParamsPerAz []*site.PublishVIPParamsPerAz `protobuf:"bytes,3,rep,name=vip_params_per_az,json=vipParamsPerAz,proto3" json:"vip_params_per_az,omitempty"`
}

func (m *SetVIPInfoRequest) Reset()      { *m = SetVIPInfoRequest{} }
func (*SetVIPInfoRequest) ProtoMessage() {}
func (*SetVIPInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9248f4176755194d, []int{0}
}
func (m *SetVIPInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetVIPInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetVIPInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetVIPInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetVIPInfoRequest.Merge(m, src)
}
func (m *SetVIPInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetVIPInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetVIPInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetVIPInfoRequest proto.InternalMessageInfo

func (m *SetVIPInfoRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetVIPInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetVIPInfoRequest) GetVipParamsPerAz() []*site.PublishVIPParamsPerAz {
	if m != nil {
		return m.VipParamsPerAz
	}
	return nil
}

// Response to configure Azure Vnet Site VIP Information
//
// x-displayName: "Response to configure Azure Vnet Site VIP Information"
type SetVIPInfoResponse struct {
}

func (m *SetVIPInfoResponse) Reset()      { *m = SetVIPInfoResponse{} }
func (*SetVIPInfoResponse) ProtoMessage() {}
func (*SetVIPInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9248f4176755194d, []int{1}
}
func (m *SetVIPInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetVIPInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetVIPInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetVIPInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetVIPInfoResponse.Merge(m, src)
}
func (m *SetVIPInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetVIPInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetVIPInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetVIPInfoResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SetVIPInfoRequest)(nil), "ves.io.schema.views.azure_vnet_site.SetVIPInfoRequest")
	golang_proto.RegisterType((*SetVIPInfoRequest)(nil), "ves.io.schema.views.azure_vnet_site.SetVIPInfoRequest")
	proto.RegisterType((*SetVIPInfoResponse)(nil), "ves.io.schema.views.azure_vnet_site.SetVIPInfoResponse")
	golang_proto.RegisterType((*SetVIPInfoResponse)(nil), "ves.io.schema.views.azure_vnet_site.SetVIPInfoResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/azure_vnet_site/public_customapi.proto", fileDescriptor_9248f4176755194d)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/azure_vnet_site/public_customapi.proto", fileDescriptor_9248f4176755194d)
}

var fileDescriptor_9248f4176755194d = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x6b, 0x14, 0x31,
	0x18, 0xc6, 0x27, 0xbb, 0x2a, 0x76, 0x44, 0xb1, 0x83, 0x87, 0x65, 0x2d, 0xa1, 0xac, 0x97, 0x5a,
	0x9c, 0x44, 0x5b, 0x50, 0xe9, 0xad, 0xf5, 0x20, 0x7b, 0x72, 0xa8, 0x50, 0xd0, 0xcb, 0x90, 0x99,
	0xbe, 0x3b, 0x8d, 0xee, 0x4c, 0x62, 0x92, 0x99, 0x6a, 0xa5, 0x20, 0xfd, 0x04, 0x62, 0xbf, 0x84,
	0x78, 0xf5, 0x66, 0x2f, 0xbd, 0xe9, 0x49, 0x8a, 0x5e, 0x7a, 0xb4, 0xb3, 0x1e, 0x14, 0x2f, 0xfd,
	0x08, 0xb2, 0xd9, 0x6d, 0xbb, 0x7f, 0x40, 0xd6, 0xdb, 0xfb, 0xce, 0x2f, 0xcf, 0xe4, 0xc9, 0x9b,
	0x27, 0xee, 0x52, 0x01, 0x9a, 0x70, 0x41, 0x75, 0xbc, 0x01, 0x29, 0xa3, 0x05, 0x87, 0x4d, 0x4d,
	0xd9, 0x56, 0xae, 0x20, 0x2c, 0x32, 0x30, 0xa1, 0xe6, 0x06, 0xa8, 0xcc, 0xa3, 0x36, 0x8f, 0xc3,
	0x38, 0xd7, 0x46, 0xa4, 0x4c, 0x72, 0x22, 0x95, 0x30, 0xc2, 0xbb, 0xd1, 0xd3, 0x92, 0x9e, 0x96,
	0x58, 0x2d, 0x19, 0xd1, 0xd6, 0xfd, 0x84, 0x9b, 0x8d, 0x3c, 0x22, 0xb1, 0x48, 0x69, 0x22, 0x12,
	0x41, 0xad, 0x36, 0xca, 0x5b, 0xb6, 0xb3, 0x8d, 0xad, 0x7a, 0xff, 0xac, 0xcf, 0x24, 0x42, 0x24,
	0x6d, 0xa0, 0x4c, 0x72, 0xca, 0xb2, 0x4c, 0x18, 0x66, 0xb8, 0xc8, 0x74, 0x9f, 0x5e, 0x1f, 0x76,
	0x2b, 0xe4, 0x20, 0xc4, 0xc3, 0xd0, 0x3a, 0x37, 0xaf, 0x24, 0x9c, 0xf0, 0x99, 0x91, 0xa3, 0xb2,
	0x36, 0x5f, 0x67, 0x06, 0xfa, 0xb4, 0x31, 0x42, 0x41, 0x43, 0x56, 0x8c, 0xec, 0x30, 0x3b, 0x3e,
	0xac, 0x70, 0x78, 0xc5, 0xed, 0x49, 0xc6, 0x29, 0xa2, 0x67, 0x10, 0x9b, 0xbe, 0x82, 0x4e, 0xa2,
	0x18, 0x38, 0x46, 0xe3, 0x03, 0x72, 0xa7, 0x1f, 0x83, 0x59, 0x6b, 0x06, 0xcd, 0xac, 0x25, 0x56,
	0xe1, 0x45, 0x0e, 0xda, 0x78, 0x33, 0xee, 0x54, 0xc6, 0x52, 0xd0, 0x92, 0xc5, 0x50, 0x43, 0xb3,
	0x68, 0x6e, 0x6a, 0xf5, 0xec, 0x83, 0xe7, 0xb9, 0xe7, 0xba, 0x4d, 0xad, 0x62, 0x81, 0xad, 0xbd,
	0xd8, 0x9d, 0x2e, 0xb8, 0x0c, 0x25, 0x53, 0x2c, 0xd5, 0xa1, 0x04, 0x15, 0xb2, 0xad, 0x5a, 0x75,
	0xb6, 0x3a, 0x77, 0x69, 0xe1, 0x26, 0x19, 0xbe, 0xd9, 0xae, 0x07, 0x12, 0x74, 0x43, 0xa0, 0x37,
	0xd6, 0x9a, 0x41, 0x60, 0x25, 0x01, 0xa8, 0xe5, 0xad, 0x95, 0xcb, 0x9f, 0x7e, 0xef, 0x57, 0x2f,
	0xbe, 0x43, 0xe7, 0xe7, 0xab, 0x77, 0x6e, 0x2d, 0xae, 0x5e, 0x29, 0xb8, 0x1c, 0xc0, 0x8d, 0x6b,
	0xae, 0x37, 0xe8, 0x55, 0x4b, 0x91, 0x69, 0x58, 0xf8, 0x58, 0x71, 0xa7, 0x1e, 0xd8, 0x30, 0x2d,
	0x07, 0x4d, 0xef, 0x0f, 0x72, 0xdd, 0xb3, 0x45, 0xde, 0x5d, 0x32, 0x41, 0xac, 0xc8, 0xd8, 0x04,
	0xea, 0xf7, 0xfe, 0x5b, 0xd7, 0x73, 0xd3, 0x68, 0x97, 0x9f, 0x6b, 0xdd, 0x60, 0xf9, 0x5c, 0xf8,
	0x3c, 0x6b, 0x29, 0xa6, 0x8d, 0xca, 0x63, 0x93, 0x2b, 0xf0, 0x37, 0x15, 0x37, 0xb0, 0xf3, 0xfd,
	0xe7, 0x6e, 0xe5, 0x61, 0x63, 0xa5, 0xff, 0x0c, 0xe8, 0xe9, 0x58, 0x35, 0x7d, 0x7d, 0x5a, 0x6f,
	0x8f, 0xdd, 0x99, 0x65, 0xdb, 0x54, 0x83, 0x09, 0xbb, 0x73, 0xe6, 0x59, 0x4b, 0x2c, 0xa1, 0xf9,
	0xfa, 0xfd, 0xfd, 0x3d, 0x54, 0xfd, 0xb6, 0x87, 0xe6, 0x27, 0x71, 0xfb, 0xc8, 0x26, 0x65, 0xe7,
	0x6b, 0xad, 0x72, 0x15, 0xad, 0xec, 0xa2, 0x83, 0x23, 0xec, 0x1c, 0x1e, 0x61, 0xe7, 0xf8, 0x08,
	0xa3, 0x37, 0x25, 0x46, 0xef, 0x4b, 0x8c, 0xbe, 0x94, 0x18, 0x1d, 0x94, 0x18, 0xfd, 0x28, 0x31,
	0xfa, 0x55, 0x62, 0xe7, 0xb8, 0xc4, 0xe8, 0x6d, 0x07, 0x3b, 0xfb, 0x1d, 0x8c, 0x0e, 0x3a, 0xd8,
	0x39, 0xec, 0x60, 0xe7, 0xe9, 0x93, 0x44, 0xc8, 0xe7, 0x09, 0x29, 0x44, 0xdb, 0x80, 0x52, 0x8c,
	0xe4, 0x9a, 0xda, 0xa2, 0x25, 0x54, 0xea, 0x4b, 0x25, 0x0a, 0xbe, 0x0e, 0xca, 0x3f, 0xc1, 0x54,
	0x46, 0x89, 0xa0, 0xf0, 0xd2, 0x9c, 0xbc, 0xa4, 0x7f, 0x44, 0x33, 0xba, 0x60, 0x53, 0xb9, 0xf8,
	0x37, 0x00, 0x00, 0xff, 0xff, 0x10, 0x4b, 0x7e, 0x44, 0x49, 0x04, 0x00, 0x00,
}

func (this *SetVIPInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetVIPInfoRequest)
	if !ok {
		that2, ok := that.(SetVIPInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.VipParamsPerAz) != len(that1.VipParamsPerAz) {
		return false
	}
	for i := range this.VipParamsPerAz {
		if !this.VipParamsPerAz[i].Equal(that1.VipParamsPerAz[i]) {
			return false
		}
	}
	return true
}
func (this *SetVIPInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetVIPInfoResponse)
	if !ok {
		that2, ok := that.(SetVIPInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetVIPInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&azure_vnet_site.SetVIPInfoRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.VipParamsPerAz != nil {
		s = append(s, "VipParamsPerAz: "+fmt.Sprintf("%#v", this.VipParamsPerAz)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetVIPInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&azure_vnet_site.SetVIPInfoResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Configure Azure Vnet Site VIP Information
	//
	// x-displayName: "Configure Azure Vnet Site VIP Information"
	// Configure Azure Vnet Site VIP Information
	SetVIPInfo(ctx context.Context, in *SetVIPInfoRequest, opts ...grpc.CallOption) (*SetVIPInfoResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) SetVIPInfo(ctx context.Context, in *SetVIPInfoRequest, opts ...grpc.CallOption) (*SetVIPInfoResponse, error) {
	out := new(SetVIPInfoResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.azure_vnet_site.CustomAPI/SetVIPInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Configure Azure Vnet Site VIP Information
	//
	// x-displayName: "Configure Azure Vnet Site VIP Information"
	// Configure Azure Vnet Site VIP Information
	SetVIPInfo(context.Context, *SetVIPInfoRequest) (*SetVIPInfoResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) SetVIPInfo(ctx context.Context, req *SetVIPInfoRequest) (*SetVIPInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVIPInfo not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_SetVIPInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVIPInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).SetVIPInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.azure_vnet_site.CustomAPI/SetVIPInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).SetVIPInfo(ctx, req.(*SetVIPInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.azure_vnet_site.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetVIPInfo",
			Handler:    _CustomAPI_SetVIPInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/azure_vnet_site/public_customapi.proto",
}

func (m *SetVIPInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetVIPInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetVIPInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VipParamsPerAz) > 0 {
		for iNdEx := len(m.VipParamsPerAz) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VipParamsPerAz[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetVIPInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetVIPInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetVIPInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetVIPInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.VipParamsPerAz) > 0 {
		for _, e := range m.VipParamsPerAz {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *SetVIPInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SetVIPInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVipParamsPerAz := "[]*PublishVIPParamsPerAz{"
	for _, f := range this.VipParamsPerAz {
		repeatedStringForVipParamsPerAz += strings.Replace(fmt.Sprintf("%v", f), "PublishVIPParamsPerAz", "site.PublishVIPParamsPerAz", 1) + ","
	}
	repeatedStringForVipParamsPerAz += "}"
	s := strings.Join([]string{`&SetVIPInfoRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`VipParamsPerAz:` + repeatedStringForVipParamsPerAz + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetVIPInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetVIPInfoResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SetVIPInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetVIPInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetVIPInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipParamsPerAz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipParamsPerAz = append(m.VipParamsPerAz, &site.PublishVIPParamsPerAz{})
			if err := m.VipParamsPerAz[len(m.VipParamsPerAz)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetVIPInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetVIPInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetVIPInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

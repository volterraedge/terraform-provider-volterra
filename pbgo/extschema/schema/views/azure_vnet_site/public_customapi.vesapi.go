// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package azure_vnet_site

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"

	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomAPI GRPC Client satisfying server.CustomClient
type CustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomAPIGrpcClient) doRPCSetCloudSiteInfo(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &SetCloudSiteInfoRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.azure_vnet_site.SetCloudSiteInfoRequest", yamlReq)
	}
	rsp, err := c.grpcClient.SetCloudSiteInfo(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCSetVIPInfo(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &SetVIPInfoRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.azure_vnet_site.SetVIPInfoRequest", yamlReq)
	}
	rsp, err := c.grpcClient.SetVIPInfo(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCValidateConfig(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ves_io_schema_views.ValidateConfigRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.ValidateConfigRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ValidateConfig(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["SetCloudSiteInfo"] = ccl.doRPCSetCloudSiteInfo

	rpcFns["SetVIPInfo"] = ccl.doRPCSetVIPInfo

	rpcFns["ValidateConfig"] = ccl.doRPCValidateConfig

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPI REST Client satisfying server.CustomClient
type CustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomAPIRestClient) doRPCSetCloudSiteInfo(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &SetCloudSiteInfoRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.azure_vnet_site.SetCloudSiteInfoRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("azure_vnet_info", fmt.Sprintf("%v", req.AzureVnetInfo))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &SetCloudSiteInfoResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.views.azure_vnet_site.SetCloudSiteInfoResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCSetVIPInfo(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &SetVIPInfoRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.azure_vnet_site.SetVIPInfoRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		for _, item := range req.VipParamsPerAz {
			q.Add("vip_params_per_az", fmt.Sprintf("%v", item))
		}

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &SetVIPInfoResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.views.azure_vnet_site.SetVIPInfoResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCValidateConfig(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ves_io_schema_views.ValidateConfigRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.ValidateConfigRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ves_io_schema_views.ValidateConfigResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.views.ValidateConfigResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["SetCloudSiteInfo"] = ccl.doRPCSetCloudSiteInfo

	rpcFns["SetVIPInfo"] = ccl.doRPCSetVIPInfo

	rpcFns["ValidateConfig"] = ccl.doRPCValidateConfig

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customAPIInprocClient

// INPROC Client (satisfying CustomAPIClient interface)
type customAPIInprocClient struct {
	CustomAPIServer
}

func (c *customAPIInprocClient) SetCloudSiteInfo(ctx context.Context, in *SetCloudSiteInfoRequest, opts ...grpc.CallOption) (*SetCloudSiteInfoResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.views.azure_vnet_site.CustomAPI.SetCloudSiteInfo")
	return c.CustomAPIServer.SetCloudSiteInfo(ctx, in)
}
func (c *customAPIInprocClient) SetVIPInfo(ctx context.Context, in *SetVIPInfoRequest, opts ...grpc.CallOption) (*SetVIPInfoResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.views.azure_vnet_site.CustomAPI.SetVIPInfo")
	return c.CustomAPIServer.SetVIPInfo(ctx, in)
}
func (c *customAPIInprocClient) ValidateConfig(ctx context.Context, in *ves_io_schema_views.ValidateConfigRequest, opts ...grpc.CallOption) (*ves_io_schema_views.ValidateConfigResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.views.azure_vnet_site.CustomAPI.ValidateConfig")
	return c.CustomAPIServer.ValidateConfig(ctx, in)
}

func NewCustomAPIInprocClient(svc svcfw.Service) CustomAPIClient {
	return &customAPIInprocClient{CustomAPIServer: NewCustomAPIServer(svc)}
}

// RegisterGwCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomAPIHandlerClient(ctx, mux, NewCustomAPIInprocClient(s))
}

// Create customAPISrv

// SERVER (satisfying CustomAPIServer interface)
type customAPISrv struct {
	svc svcfw.Service
}

func (s *customAPISrv) SetCloudSiteInfo(ctx context.Context, in *SetCloudSiteInfoRequest) (*SetCloudSiteInfoResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.views.azure_vnet_site.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *SetCloudSiteInfoResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.views.azure_vnet_site.SetCloudSiteInfoRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.SetCloudSiteInfo' operation on 'azure_vnet_site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.views.azure_vnet_site.CustomAPI.SetCloudSiteInfo"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.SetCloudSiteInfo(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.views.azure_vnet_site.SetCloudSiteInfoResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) SetVIPInfo(ctx context.Context, in *SetVIPInfoRequest) (*SetVIPInfoResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.views.azure_vnet_site.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *SetVIPInfoResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.views.azure_vnet_site.SetVIPInfoRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.SetVIPInfo' operation on 'azure_vnet_site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.views.azure_vnet_site.CustomAPI.SetVIPInfo"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.SetVIPInfo(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.views.azure_vnet_site.SetVIPInfoResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) ValidateConfig(ctx context.Context, in *ves_io_schema_views.ValidateConfigRequest) (*ves_io_schema_views.ValidateConfigResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.views.azure_vnet_site.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *ves_io_schema_views.ValidateConfigResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.views.ValidateConfigRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ValidateConfig' operation on 'azure_vnet_site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.views.azure_vnet_site.CustomAPI.ValidateConfig"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ValidateConfig(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.views.ValidateConfigResponse", rsp)...)

	return rsp, nil
}

func NewCustomAPIServer(svc svcfw.Service) CustomAPIServer {
	return &customAPISrv{svc: svc}
}

var CustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Azure VNet site",
        "description": "Azure VNet site view defines a required parameters that can be used in CRUD, to create and manage a volterra site in Azure VNet.\nIt can be used to either automatically create or Manually assisted site creation in Azure VNet.\n\nView will create following child objects.\n\n* Site",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/{namespace}/azure_vnet_site/{name}/set_cloud_site_info": {
            "post": {
                "summary": "Configure Azure VNet Site Information",
                "description": "Configure Azure VNet Site Information like public, private ips, subnet ids and others",
                "operationId": "ves.io.schema.views.azure_vnet_site.CustomAPI.SetCloudSiteInfo",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/azure_vnet_siteSetCloudSiteInfoResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"default\"\nNamespace for the object to be configured",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "Name\n\nx-example: \"vnet-site-1\"\nName of the object to be configured",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/azure_vnet_siteSetCloudSiteInfoRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-views-azure_vnet_site-customapi-setcloudsiteinfo"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.azure_vnet_site.CustomAPI.SetCloudSiteInfo"
            },
            "x-displayname": "Custom API for Azure VNet site",
            "x-ves-proto-service": "ves.io.schema.views.azure_vnet_site.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/azure_vnet_site/{name}/set_vip_info": {
            "post": {
                "summary": "Configure Azure VNet Site VIP Information",
                "description": "Configure Azure VNet Site VIP Information",
                "operationId": "ves.io.schema.views.azure_vnet_site.CustomAPI.SetVIPInfo",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/azure_vnet_siteSetVIPInfoResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"default\"\nNamespace for the object to be configured",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "Name\n\nx-example: \"vnet-site-1\"\nName of the object to be configured",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/azure_vnet_siteSetVIPInfoRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-views-azure_vnet_site-customapi-setvipinfo"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.azure_vnet_site.CustomAPI.SetVIPInfo"
            },
            "x-displayname": "Custom API for Azure VNet site",
            "x-ves-proto-service": "ves.io.schema.views.azure_vnet_site.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/azure_vnet_site/{name}/validate_config": {
            "post": {
                "summary": "Validate Azure VNET Site Config",
                "description": "Validate Azure VNET Site Config",
                "operationId": "ves.io.schema.views.azure_vnet_site.CustomAPI.ValidateConfig",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/viewsValidateConfigResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"default\"\nNamespace for the object to be configured",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "Name\n\nx-example: \"aws-vpc-site-1\"\nName of the object to be configured",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/viewsValidateConfigRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-views-azure_vnet_site-customapi-validateconfig"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.azure_vnet_site.CustomAPI.ValidateConfig"
            },
            "x-displayname": "Custom API for Azure VNet site",
            "x-ves-proto-service": "ves.io.schema.views.azure_vnet_site.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "azure_vnet_siteAzureVnetSiteInfoType": {
            "type": "object",
            "description": "Azure VNet Site information like",
            "title": "Azure VNet Site Information Config",
            "x-displayname": "Azure VNet Site Information Config",
            "x-ves-proto-message": "ves.io.schema.views.azure_vnet_site.AzureVnetSiteInfoType",
            "properties": {
                "express_route_info": {
                    "description": " Express Route Info",
                    "title": "Express Route Info",
                    "$ref": "#/definitions/azure_vnet_siteExpressRouteInfo",
                    "x-displayname": "Express Route Info"
                },
                "node_info": {
                    "type": "array",
                    "description": " Azure Node Name",
                    "title": "Azure Node Name",
                    "items": {
                        "$ref": "#/definitions/azure_vnet_siteNodeInstanceNameType"
                    },
                    "x-displayname": "Azure Node Name"
                },
                "private_ips": {
                    "type": "array",
                    "description": " Azure VM Private IPs used by the nodes\n\nExample: - \"10.0.0.1, 10.0.0.2, 10.0.0.3\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.ip: true\n  ves.io.schema.rules.repeated.num_items: 0,1,3\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Azure VM Private IPs",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Azure VM Private IPs",
                    "x-ves-example": "10.0.0.1, 10.0.0.2, 10.0.0.3",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.ip": "true",
                        "ves.io.schema.rules.repeated.num_items": "0,1,3",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "public_ips": {
                    "type": "array",
                    "description": " Azure VM Public IPs used by the nodes\n\nExample: - \"1.1.1.1, 2.2.2.2, 3.3.3.3\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.ip: true\n  ves.io.schema.rules.repeated.num_items: 0,1,3\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Azure VM Public IPs",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Azure VM Public IPs",
                    "x-ves-example": "1.1.1.1, 2.2.2.2, 3.3.3.3",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.ip": "true",
                        "ves.io.schema.rules.repeated.num_items": "0,1,3",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "spoke_vnet_prefix_info": {
                    "type": "array",
                    "description": " Azure Spoke VNet Prefix Information\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 500\n",
                    "title": "Azure Spoke VNet Prefix Information",
                    "maxItems": 500,
                    "items": {
                        "$ref": "#/definitions/azure_vnet_siteVnetIpPrefixesType"
                    },
                    "x-displayname": "Azure Spoke VNet Prefix Information",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "500"
                    }
                },
                "vnet": {
                    "description": " VNET ID where the volterra site exists",
                    "title": "Services VNET ID",
                    "$ref": "#/definitions/azure_vnet_siteVNETInfoType",
                    "x-displayname": "VNET ID"
                }
            }
        },
        "azure_vnet_siteExpressRouteInfo": {
            "type": "object",
            "description": "Express Route Info",
            "title": "Express Route Info",
            "x-displayname": "Express Route Info",
            "x-ves-proto-message": "ves.io.schema.views.azure_vnet_site.ExpressRouteInfo",
            "properties": {
                "route_server_asn": {
                    "type": "integer",
                    "description": " Route Server ASN\n\nExample: - \"65441\"-",
                    "title": "Route Server ASN",
                    "format": "int64",
                    "x-displayname": "Route Server ASN",
                    "x-ves-example": "65441"
                },
                "route_server_ips": {
                    "type": "array",
                    "description": " Route Server IPs\n\nExample: - \"10.0.0.1\"-",
                    "title": "Route Server IPs",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Route Server IPs",
                    "x-ves-example": "10.0.0.1"
                }
            }
        },
        "azure_vnet_siteNodeInstanceNameType": {
            "type": "object",
            "description": "Node Instance Name",
            "title": "Node Instance Name",
            "x-displayname": "Node Instance Name",
            "x-ves-proto-message": "ves.io.schema.views.azure_vnet_site.NodeInstanceNameType",
            "properties": {
                "node_id": {
                    "type": "string",
                    "description": " Node ID Information\n\nExample: - \"ves-node-id-xxxxxx\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 64\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Node ID",
                    "minLength": 1,
                    "maxLength": 64,
                    "x-displayname": "Node ID",
                    "x-ves-example": "ves-node-id-xxxxxx",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "64",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                },
                "node_instance_name": {
                    "type": "string",
                    "description": " Node Instance Name used by dataplane\n\nExample: - \"ip-1-2-3-4-site1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 64\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Node Instance Name",
                    "minLength": 1,
                    "maxLength": 64,
                    "x-displayname": "Node Instance Name",
                    "x-ves-example": "ip-1-2-3-4-site1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "64",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                }
            }
        },
        "azure_vnet_siteSetCloudSiteInfoRequest": {
            "type": "object",
            "description": "Request to configure Cloud Site Information",
            "title": "Request to configure Cloud Site Information",
            "x-displayname": "Request to configure Cloud Site Information",
            "x-ves-proto-message": "ves.io.schema.views.azure_vnet_site.SetCloudSiteInfoRequest",
            "properties": {
                "azure_vnet_info": {
                    "description": " Azure VNet Site Info Config",
                    "title": "Azure VNet Site Info Config",
                    "$ref": "#/definitions/azure_vnet_siteAzureVnetSiteInfoType",
                    "x-displayname": "Azure VNet Site Info Config"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the object to be configured\n\nExample: - \"vnet-site-1\"-",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "vnet-site-1"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace for the object to be configured\n\nExample: - \"default\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "default"
                }
            }
        },
        "azure_vnet_siteSetCloudSiteInfoResponse": {
            "type": "object",
            "description": "Response to configure configure Cloud Site Information",
            "title": "Response to configure Cloud Site Information",
            "x-displayname": "Response to configure Cloud Site Information",
            "x-ves-proto-message": "ves.io.schema.views.azure_vnet_site.SetCloudSiteInfoResponse"
        },
        "azure_vnet_siteSetVIPInfoRequest": {
            "type": "object",
            "description": "Request to configure Azure VNet Site VIP information",
            "title": "Request to configure Azure VNet Site VIP information",
            "x-displayname": "Request to configure Azure VNet Site VIP information",
            "x-ves-proto-message": "ves.io.schema.views.azure_vnet_site.SetVIPInfoRequest",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Name of the object to be configured\n\nExample: - \"vnet-site-1\"-",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "vnet-site-1"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace for the object to be configured\n\nExample: - \"default\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "default"
                },
                "vip_params_per_az": {
                    "type": "array",
                    "description": " VIP Parameters per AZ\n\nExample: - \"master-0\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.num_items: 1,2,3\n",
                    "title": "VIP Params Per AZ",
                    "items": {
                        "$ref": "#/definitions/sitePublishVIPParamsPerAz"
                    },
                    "x-displayname": "VIP Params Per AZ",
                    "x-ves-example": "master-0",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.num_items": "1,2,3"
                    }
                }
            }
        },
        "azure_vnet_siteSetVIPInfoResponse": {
            "type": "object",
            "title": "Response to configure Azure VNet Site VIP Information",
            "x-displayname": "Response to configure Azure VNet Site VIP Information",
            "x-ves-proto-message": "ves.io.schema.views.azure_vnet_site.SetVIPInfoResponse"
        },
        "azure_vnet_siteVNETInfoType": {
            "type": "object",
            "description": "Azure Vnet Info Type",
            "title": "VNET Info Type",
            "x-displayname": "Azure VNET Info type",
            "x-ves-proto-message": "ves.io.schema.views.azure_vnet_site.VNETInfoType",
            "properties": {
                "resource_id": {
                    "type": "string",
                    "description": " VNET Resource ID\n\nExample: - \"/subscriptions/b07ce22b-a877-4fb7-8b91-412af79e32ea/resourceGroups/ks-azure-vnet-3/providers/Microsoft.Network/virtualNetworks/ves-vnet-auto-ks-azure-vnet-3-585b7768d9\"-",
                    "title": "VNET Resource ID",
                    "x-displayname": "VNET Resource ID",
                    "x-ves-example": "/subscriptions/b07ce22b-a877-4fb7-8b91-412af79e32ea/resourceGroups/ks-azure-vnet-3/providers/Microsoft.Network/virtualNetworks/ves-vnet-auto-ks-azure-vnet-3-585b7768d9"
                },
                "vnet_name": {
                    "type": "string",
                    "description": " VNET Name\n\nExample: - \"ves-vnet-auto-ks-azure-vnet-3-585b7768d9\"-",
                    "title": "VNET Name",
                    "x-displayname": "VNET Name",
                    "x-ves-example": "ves-vnet-auto-ks-azure-vnet-3-585b7768d9"
                }
            }
        },
        "azure_vnet_siteVnetIpPrefixesType": {
            "type": "object",
            "description": "Azure VNet IP prefixes Info",
            "title": "Azure VNet IP prefixes Info",
            "x-displayname": "Azure VNet IP prefixes Info",
            "x-ves-proto-message": "ves.io.schema.views.azure_vnet_site.VnetIpPrefixesType",
            "properties": {
                "prefixes": {
                    "type": "array",
                    "description": " An unordered list of IP prefixes.\n\nExample: - \"['10.2.1.0/24', '192.168.8.0/29', '10.7.64.160/27']\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.ipv4_prefix: true\n  ves.io.schema.rules.repeated.max_items: 1024\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "VNet prefixes",
                    "minItems": 1,
                    "maxItems": 1024,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "VNet Prefixes",
                    "x-ves-example": "['10.2.1.0/24', '192.168.8.0/29', '10.7.64.160/27']",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.ipv4_prefix": "true",
                        "ves.io.schema.rules.repeated.max_items": "1024",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "vnet": {
                    "description": " Existing VNet Information",
                    "title": "VNet Info",
                    "$ref": "#/definitions/viewsAzureVnetType",
                    "x-displayname": "VNet Info"
                }
            }
        },
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "sitePublishVIPParamsPerAz": {
            "type": "object",
            "description": "Per AZ parameters needed to publish VIP for public cloud sites",
            "title": "Publish VIP Params Per AZ",
            "x-displayname": "Publish VIP Params Per AZ",
            "x-ves-proto-message": "ves.io.schema.site.PublishVIPParamsPerAz",
            "properties": {
                "az_name": {
                    "type": "string",
                    "description": " Name of the Availability zone\n\nExample: - \"us-east-2a\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^[1-5]{1}$|^AzureAlternateRegion$|^[a-z]{2}-(?:gov-)?[a-z0-9]{4,20}-[a-z0-9]{2}$|^[a-z]{4,15}-[a-z0-9]{4,20}-[a-z]{1}$\n",
                    "title": "AZ Name",
                    "x-displayname": "AZ Name",
                    "x-ves-example": "us-east-2a",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^[1-5]{1}$|^AzureAlternateRegion$|^[a-z]{2}-(?:gov-)?[a-z0-9]{4,20}-[a-z0-9]{2}$|^[a-z]{4,15}-[a-z0-9]{4,20}-[a-z]{1}$"
                    }
                },
                "inside_vip": {
                    "type": "array",
                    "description": " List of Inside VIPs for an AZ\n\nExample: - \"192.168.0.156\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.string.ipv4: true\n  ves.io.schema.rules.repeated.max_items: 3\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Inside VIP(s)",
                    "maxItems": 3,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Inside VIP(s)",
                    "x-ves-example": "192.168.0.156",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.string.ipv4": "true",
                        "ves.io.schema.rules.repeated.max_items": "3",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "inside_vip_cname": {
                    "type": "string",
                    "description": " CNAME value for the inside VIP,\n These are usually public cloud generated CNAME\n\nExample: - \"test.56670-387196482.useast2.ves.io\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 256\n",
                    "title": "Inside VIP CNAME",
                    "maxLength": 256,
                    "x-displayname": "Inside VIP CNAME",
                    "x-ves-example": "test.56670-387196482.useast2.ves.io",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "256"
                    }
                },
                "inside_vip_v6": {
                    "type": "array",
                    "description": " Optional list of Inside IPv6 VIPs for an AZ\n\nExample: - \"2001::1\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.string.ipv6: true\n  ves.io.schema.rules.repeated.max_items: 3\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Inside IPv6 VIP(s)",
                    "maxItems": 3,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Inside IPv6 VIP(s)",
                    "x-ves-example": "2001::1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.string.ipv6": "true",
                        "ves.io.schema.rules.repeated.max_items": "3",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "outside_vip": {
                    "type": "array",
                    "description": " List of Outside VIPs for an AZ\n\nExample: - \"192.168.0.156\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.ipv4: true\n  ves.io.schema.rules.repeated.max_items: 3\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Outside VIP(s)",
                    "minItems": 1,
                    "maxItems": 3,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Outside VIP(s)",
                    "x-ves-example": "192.168.0.156",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.ipv4": "true",
                        "ves.io.schema.rules.repeated.max_items": "3",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "outside_vip_cname": {
                    "type": "string",
                    "description": " CNAME value for the outside VIP\n These are usually public cloud generated CNAME\n\nExample: - \"test.56670-387196482.useast2.ves.io\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 256\n",
                    "title": "Outside VIP CNAME",
                    "maxLength": 256,
                    "x-displayname": "Outside VIP CNAME",
                    "x-ves-example": "test.56670-387196482.useast2.ves.io",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "256"
                    }
                },
                "outside_vip_v6": {
                    "type": "array",
                    "description": " Optional list of Outside IPv6 VIPs for an AZ\n\nExample: - \"2001::1\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.string.ipv6: true\n  ves.io.schema.rules.repeated.max_items: 3\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Outside IPv6 VIP(s)",
                    "maxItems": 3,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Outside IPv6 VIP(s)",
                    "x-ves-example": "2001::1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.string.ipv6": "true",
                        "ves.io.schema.rules.repeated.max_items": "3",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "viewsAzureVnetType": {
            "type": "object",
            "description": "Resource group and name of existing Azure Vnet",
            "title": "Azure Existing Vnet Type",
            "x-displayname": "Azure Existing Vnet Type",
            "x-ves-oneof-field-routing_type": "[\"f5_orchestrated_routing\",\"manual_routing\"]",
            "x-ves-proto-message": "ves.io.schema.views.AzureVnetType",
            "properties": {
                "f5_orchestrated_routing": {
                    "description": "Exclusive with [manual_routing]\n F5 will orchestrate required routes for SLO Route Table towards Internet and SLI RT towards the CE.",
                    "title": "F5 Orchestrated Routing",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "F5 Orchestrated Routing"
                },
                "manual_routing": {
                    "description": "Exclusive with [f5_orchestrated_routing]\n  In this mode, F5 will not create nor alter any route tables or routes within the existing VPCs/Vnets providing better integration for existing environments. ",
                    "title": "Manual Routing",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Manual Routing"
                },
                "resource_group": {
                    "type": "string",
                    "description": " Resource group of existing Vnet\n\nExample: - \"MyResourceGroup\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 64\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Existing Vnet Resource Group",
                    "minLength": 1,
                    "maxLength": 64,
                    "x-displayname": "Existing Vnet Resource Group",
                    "x-ves-example": "MyResourceGroup",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "64",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                },
                "vnet_name": {
                    "type": "string",
                    "description": " Name of existing Vnet\n\nExample: - \"MyVnet\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 64\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Existing Vnet Name",
                    "minLength": 1,
                    "maxLength": 64,
                    "x-displayname": "Existing Vnet Name",
                    "x-ves-example": "MyVnet",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "64",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                }
            }
        },
        "viewsValidateConfigRequest": {
            "type": "object",
            "description": "Request to validate AWS VPC site configuration",
            "title": "Request to validate AWS VPC site configuration",
            "x-displayname": "Request to validate AWS VPC site configuration",
            "x-ves-proto-message": "ves.io.schema.views.ValidateConfigRequest",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Name of the object to be configured\n\nExample: - \"aws-vpc-site-1\"-",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "aws-vpc-site-1"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace for the object to be configured\n\nExample: - \"default\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "default"
                }
            }
        },
        "viewsValidateConfigResponse": {
            "type": "object",
            "title": "Response to validate AWS VPC site configuration",
            "x-displayname": "Response to validate AWS VPC site configuration",
            "x-ves-proto-message": "ves.io.schema.views.ValidateConfigResponse"
        }
    },
    "x-displayname": "Configure Azure VNet Site",
    "x-ves-proto-file": "ves.io/schema/views/azure_vnet_site/public_customapi.proto"
}`

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package common_node

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_fleet "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet"
	ves_io_schema_network_interface "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *EthernetInterfaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EthernetInterfaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EthernetInterfaceType) DeepCopy() *EthernetInterfaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EthernetInterfaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EthernetInterfaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EthernetInterfaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EthernetInterfaceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateEthernetInterfaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEthernetInterfaceType) DeviceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for device")
	}

	return validatorFn, nil
}

func (v *ValidateEthernetInterfaceType) MacValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mac")
	}

	return validatorFn, nil
}

func (v *ValidateEthernetInterfaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EthernetInterfaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EthernetInterfaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["device"]; exists {

		vOpts := append(opts, db.WithValidateField("device"))
		if err := fv(ctx, m.GetDevice(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mac"]; exists {

		vOpts := append(opts, db.WithValidateField("mac"))
		if err := fv(ctx, m.GetMac(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEthernetInterfaceTypeValidator = func() *ValidateEthernetInterfaceType {
	v := &ValidateEthernetInterfaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDevice := v.DeviceValidationRuleHandler
	rulesDevice := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhDevice(rulesDevice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EthernetInterfaceType.device: %s", err)
		panic(errMsg)
	}
	v.FldValidators["device"] = vFn

	vrhMac := v.MacValidationRuleHandler
	rulesMac := map[string]string{
		"ves.io.schema.rules.string.mac": "true",
	}
	vFn, err = vrhMac(rulesMac)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EthernetInterfaceType.mac: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mac"] = vFn

	return v
}()

func EthernetInterfaceTypeValidator() db.Validator {
	return DefaultEthernetInterfaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Interface) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Interface) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Interface) DeepCopy() *Interface {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Interface{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Interface) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Interface) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return InterfaceValidator().Validate(ctx, m, opts...)
}

func (m *Interface) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAddressChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAddressChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIpv6AddressChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIpv6AddressChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkOptionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkOptionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *Interface) GetAddressChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAddressChoice() == nil {
		return nil, nil
	}
	switch m.GetAddressChoice().(type) {
	case *Interface_DhcpClient:

		return nil, nil

	case *Interface_StaticIp:

		return nil, nil

	case *Interface_DhcpServer:

		drInfos, err := m.GetDhcpServer().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDhcpServer().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "dhcp_server." + dri.DRField
		}
		return drInfos, err

	case *Interface_NoIpv4Address:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *Interface) GetIpv6AddressChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetIpv6AddressChoice() == nil {
		return nil, nil
	}
	switch m.GetIpv6AddressChoice().(type) {
	case *Interface_NoIpv6Address:

		return nil, nil

	case *Interface_StaticIpv6Address:

		drInfos, err := m.GetStaticIpv6Address().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticIpv6Address().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "static_ipv6_address." + dri.DRField
		}
		return drInfos, err

	case *Interface_Ipv6AutoConfig:

		drInfos, err := m.GetIpv6AutoConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIpv6AutoConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ipv6_auto_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *Interface) GetNetworkOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkOption() == nil {
		return nil, nil
	}

	drInfos, err := m.GetNetworkOption().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetNetworkOption().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "network_option." + dri.DRField
	}
	return drInfos, err

}

type ValidateInterface struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateInterface) AddressChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address_choice")
	}
	return validatorFn, nil
}

func (v *ValidateInterface) InterfaceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for interface_choice")
	}
	return validatorFn, nil
}

func (v *ValidateInterface) DescriptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for description")
	}

	return validatorFn, nil
}

func (v *ValidateInterface) LabelsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for labels")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for labels")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for labels")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map labels")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items labels")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateInterface) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateInterface) MtuValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mtu")
	}

	return validatorFn, nil
}

func (v *ValidateInterface) NetworkOptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for network_option")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateInterface) PriorityValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for priority")
	}

	return validatorFn, nil
}

func (v *ValidateInterface) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Interface)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Interface got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address_choice"]; exists {
		val := m.GetAddressChoice()
		vOpts := append(opts,
			db.WithValidateField("address_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAddressChoice().(type) {
	case *Interface_DhcpClient:
		if fv, exists := v.FldValidators["address_choice.dhcp_client"]; exists {
			val := m.GetAddressChoice().(*Interface_DhcpClient).DhcpClient
			vOpts := append(opts,
				db.WithValidateField("address_choice"),
				db.WithValidateField("dhcp_client"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_StaticIp:
		if fv, exists := v.FldValidators["address_choice.static_ip"]; exists {
			val := m.GetAddressChoice().(*Interface_StaticIp).StaticIp
			vOpts := append(opts,
				db.WithValidateField("address_choice"),
				db.WithValidateField("static_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_DhcpServer:
		if fv, exists := v.FldValidators["address_choice.dhcp_server"]; exists {
			val := m.GetAddressChoice().(*Interface_DhcpServer).DhcpServer
			vOpts := append(opts,
				db.WithValidateField("address_choice"),
				db.WithValidateField("dhcp_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_NoIpv4Address:
		if fv, exists := v.FldValidators["address_choice.no_ipv4_address"]; exists {
			val := m.GetAddressChoice().(*Interface_NoIpv4Address).NoIpv4Address
			vOpts := append(opts,
				db.WithValidateField("address_choice"),
				db.WithValidateField("no_ipv4_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["description"]; exists {

		vOpts := append(opts, db.WithValidateField("description"))
		if err := fv(ctx, m.GetDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interface_choice"]; exists {
		val := m.GetInterfaceChoice()
		vOpts := append(opts,
			db.WithValidateField("interface_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInterfaceChoice().(type) {
	case *Interface_EthernetInterface:
		if fv, exists := v.FldValidators["interface_choice.ethernet_interface"]; exists {
			val := m.GetInterfaceChoice().(*Interface_EthernetInterface).EthernetInterface
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("ethernet_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_VlanInterface:
		if fv, exists := v.FldValidators["interface_choice.vlan_interface"]; exists {
			val := m.GetInterfaceChoice().(*Interface_VlanInterface).VlanInterface
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("vlan_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_BondInterface:
		if fv, exists := v.FldValidators["interface_choice.bond_interface"]; exists {
			val := m.GetInterfaceChoice().(*Interface_BondInterface).BondInterface
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("bond_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetIpv6AddressChoice().(type) {
	case *Interface_NoIpv6Address:
		if fv, exists := v.FldValidators["ipv6_address_choice.no_ipv6_address"]; exists {
			val := m.GetIpv6AddressChoice().(*Interface_NoIpv6Address).NoIpv6Address
			vOpts := append(opts,
				db.WithValidateField("ipv6_address_choice"),
				db.WithValidateField("no_ipv6_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_StaticIpv6Address:
		if fv, exists := v.FldValidators["ipv6_address_choice.static_ipv6_address"]; exists {
			val := m.GetIpv6AddressChoice().(*Interface_StaticIpv6Address).StaticIpv6Address
			vOpts := append(opts,
				db.WithValidateField("ipv6_address_choice"),
				db.WithValidateField("static_ipv6_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_Ipv6AutoConfig:
		if fv, exists := v.FldValidators["ipv6_address_choice.ipv6_auto_config"]; exists {
			val := m.GetIpv6AddressChoice().(*Interface_Ipv6AutoConfig).Ipv6AutoConfig
			vOpts := append(opts,
				db.WithValidateField("ipv6_address_choice"),
				db.WithValidateField("ipv6_auto_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["is_management"]; exists {

		vOpts := append(opts, db.WithValidateField("is_management"))
		if err := fv(ctx, m.GetIsManagement(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["is_primary"]; exists {

		vOpts := append(opts, db.WithValidateField("is_primary"))
		if err := fv(ctx, m.GetIsPrimary(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["labels"]; exists {
		vOpts := append(opts, db.WithValidateField("labels"))
		if err := fv(ctx, m.GetLabels(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMonitoringChoice().(type) {
	case *Interface_MonitorDisabled:
		if fv, exists := v.FldValidators["monitoring_choice.monitor_disabled"]; exists {
			val := m.GetMonitoringChoice().(*Interface_MonitorDisabled).MonitorDisabled
			vOpts := append(opts,
				db.WithValidateField("monitoring_choice"),
				db.WithValidateField("monitor_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_Monitor:
		if fv, exists := v.FldValidators["monitoring_choice.monitor"]; exists {
			val := m.GetMonitoringChoice().(*Interface_Monitor).Monitor
			vOpts := append(opts,
				db.WithValidateField("monitoring_choice"),
				db.WithValidateField("monitor"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mtu"]; exists {

		vOpts := append(opts, db.WithValidateField("mtu"))
		if err := fv(ctx, m.GetMtu(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_option"]; exists {

		vOpts := append(opts, db.WithValidateField("network_option"))
		if err := fv(ctx, m.GetNetworkOption(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["priority"]; exists {

		vOpts := append(opts, db.WithValidateField("priority"))
		if err := fv(ctx, m.GetPriority(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetSiteToSiteConnectivityInterfaceChoice().(type) {
	case *Interface_SiteToSiteConnectivityInterfaceDisabled:
		if fv, exists := v.FldValidators["site_to_site_connectivity_interface_choice.site_to_site_connectivity_interface_disabled"]; exists {
			val := m.GetSiteToSiteConnectivityInterfaceChoice().(*Interface_SiteToSiteConnectivityInterfaceDisabled).SiteToSiteConnectivityInterfaceDisabled
			vOpts := append(opts,
				db.WithValidateField("site_to_site_connectivity_interface_choice"),
				db.WithValidateField("site_to_site_connectivity_interface_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_SiteToSiteConnectivityInterfaceEnabled:
		if fv, exists := v.FldValidators["site_to_site_connectivity_interface_choice.site_to_site_connectivity_interface_enabled"]; exists {
			val := m.GetSiteToSiteConnectivityInterfaceChoice().(*Interface_SiteToSiteConnectivityInterfaceEnabled).SiteToSiteConnectivityInterfaceEnabled
			vOpts := append(opts,
				db.WithValidateField("site_to_site_connectivity_interface_choice"),
				db.WithValidateField("site_to_site_connectivity_interface_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultInterfaceValidator = func() *ValidateInterface {
	v := &ValidateInterface{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAddressChoice := v.AddressChoiceValidationRuleHandler
	rulesAddressChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAddressChoice(rulesAddressChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.address_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address_choice"] = vFn

	vrhInterfaceChoice := v.InterfaceChoiceValidationRuleHandler
	rulesInterfaceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInterfaceChoice(rulesInterfaceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.interface_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interface_choice"] = vFn

	vrhDescription := v.DescriptionValidationRuleHandler
	rulesDescription := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhDescription(rulesDescription)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.description: %s", err)
		panic(errMsg)
	}
	v.FldValidators["description"] = vFn

	vrhLabels := v.LabelsValidationRuleHandler
	rulesLabels := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "64",
		"ves.io.schema.rules.map.keys.string.min_len":   "1",
		"ves.io.schema.rules.map.max_pairs":             "16",
		"ves.io.schema.rules.map.values.string.max_len": "64",
		"ves.io.schema.rules.map.values.string.min_len": "1",
	}
	vFn, err = vrhLabels(rulesLabels)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.labels: %s", err)
		panic(errMsg)
	}
	v.FldValidators["labels"] = vFn

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhMtu := v.MtuValidationRuleHandler
	rulesMtu := map[string]string{
		"ves.io.schema.rules.uint32.ranges": "0,512-16384",
	}
	vFn, err = vrhMtu(rulesMtu)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.mtu: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mtu"] = vFn

	vrhNetworkOption := v.NetworkOptionValidationRuleHandler
	rulesNetworkOption := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNetworkOption(rulesNetworkOption)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.network_option: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_option"] = vFn

	vrhPriority := v.PriorityValidationRuleHandler
	rulesPriority := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "255",
	}
	vFn, err = vrhPriority(rulesPriority)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.priority: %s", err)
		panic(errMsg)
	}
	v.FldValidators["priority"] = vFn

	v.FldValidators["address_choice.static_ip"] = ves_io_schema_network_interface.StaticIpParametersNodeTypeValidator().Validate
	v.FldValidators["address_choice.dhcp_server"] = ves_io_schema_network_interface.DHCPServerParametersTypeValidator().Validate

	v.FldValidators["interface_choice.ethernet_interface"] = EthernetInterfaceTypeValidator().Validate
	v.FldValidators["interface_choice.vlan_interface"] = VlanInterfaceTypeValidator().Validate
	v.FldValidators["interface_choice.bond_interface"] = ves_io_schema_fleet.FleetBondDeviceTypeValidator().Validate

	v.FldValidators["ipv6_address_choice.static_ipv6_address"] = ves_io_schema_network_interface.StaticIPParametersTypeValidator().Validate
	v.FldValidators["ipv6_address_choice.ipv6_auto_config"] = ves_io_schema_network_interface.IPV6AutoConfigTypeValidator().Validate

	return v
}()

func InterfaceValidator() db.Validator {
	return DefaultInterfaceValidator
}

// augmented methods on protoc/std generated struct

func (m *NetworkSelectType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NetworkSelectType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NetworkSelectType) DeepCopy() *NetworkSelectType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NetworkSelectType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NetworkSelectType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NetworkSelectType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NetworkSelectTypeValidator().Validate(ctx, m, opts...)
}

func (m *NetworkSelectType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNetworkChoiceDRefInfo()

}

func (m *NetworkSelectType) GetNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetNetworkChoice().(type) {
	case *NetworkSelectType_SiteLocalNetwork:

		return nil, nil

	case *NetworkSelectType_SiteLocalInsideNetwork:

		return nil, nil

	case *NetworkSelectType_SegmentNetwork:

		vref := m.GetSegmentNetwork()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("segment.Object")
		dri := db.DRefInfo{
			RefdType:   "segment.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "segment_network",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetNetworkChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *NetworkSelectType) GetNetworkChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetNetworkChoice().(type) {
	case *NetworkSelectType_SiteLocalNetwork:

	case *NetworkSelectType_SiteLocalInsideNetwork:

	case *NetworkSelectType_SegmentNetwork:
		refdType, err := d.TypeForEntryKind("", "", "segment.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: segment")
		}

		vref := m.GetSegmentNetwork()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "segment.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateNetworkSelectType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNetworkSelectType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NetworkSelectType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NetworkSelectType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetNetworkChoice().(type) {
	case *NetworkSelectType_SiteLocalNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_network"]; exists {
			val := m.GetNetworkChoice().(*NetworkSelectType_SiteLocalNetwork).SiteLocalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NetworkSelectType_SiteLocalInsideNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_inside_network"]; exists {
			val := m.GetNetworkChoice().(*NetworkSelectType_SiteLocalInsideNetwork).SiteLocalInsideNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_inside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NetworkSelectType_SegmentNetwork:
		if fv, exists := v.FldValidators["network_choice.segment_network"]; exists {
			val := m.GetNetworkChoice().(*NetworkSelectType_SegmentNetwork).SegmentNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("segment_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNetworkSelectTypeValidator = func() *ValidateNetworkSelectType {
	v := &ValidateNetworkSelectType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["network_choice.segment_network"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func NetworkSelectTypeValidator() db.Validator {
	return DefaultNetworkSelectTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Node) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Node) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Node) DeepCopy() *Node {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Node{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Node) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Node) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NodeValidator().Validate(ctx, m, opts...)
}

func (m *Node) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInterfaceListDRefInfo()

}

// GetDRefInfo for the field's type
func (m *Node) GetInterfaceListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInterfaceList() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetInterfaceList() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInterfaceList() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("interface_list[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateNode struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNode) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateNode) HostnameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hostname")
	}

	return validatorFn, nil
}

func (v *ValidateNode) PublicIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for public_ip")
	}

	return validatorFn, nil
}

func (v *ValidateNode) InterfaceListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for interface_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Interface, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := InterfaceValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for interface_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Interface)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Interface, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated interface_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items interface_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateNode) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Node)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Node got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["hostname"]; exists {

		vOpts := append(opts, db.WithValidateField("hostname"))
		if err := fv(ctx, m.GetHostname(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interface_list"]; exists {
		vOpts := append(opts, db.WithValidateField("interface_list"))
		if err := fv(ctx, m.GetInterfaceList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["public_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("public_ip"))
		if err := fv(ctx, m.GetPublicIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNodeValidator = func() *ValidateNode {
	v := &ValidateNode{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.string.in": "[\"Control\",\"Worker\"]",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Node.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	vrhHostname := v.HostnameValidationRuleHandler
	rulesHostname := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhHostname(rulesHostname)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Node.hostname: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hostname"] = vFn

	vrhPublicIp := v.PublicIpValidationRuleHandler
	rulesPublicIp := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhPublicIp(rulesPublicIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Node.public_ip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["public_ip"] = vFn

	vrhInterfaceList := v.InterfaceListValidationRuleHandler
	rulesInterfaceList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhInterfaceList(rulesInterfaceList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Node.interface_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interface_list"] = vFn

	return v
}()

func NodeValidator() db.Validator {
	return DefaultNodeValidator
}

// augmented methods on protoc/std generated struct

func (m *VlanInterfaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VlanInterfaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VlanInterfaceType) DeepCopy() *VlanInterfaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VlanInterfaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VlanInterfaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VlanInterfaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VlanInterfaceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateVlanInterfaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVlanInterfaceType) DeviceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for device")
	}

	return validatorFn, nil
}

func (v *ValidateVlanInterfaceType) VlanIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vlan_id")
	}

	return validatorFn, nil
}

func (v *ValidateVlanInterfaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VlanInterfaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VlanInterfaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["device"]; exists {

		vOpts := append(opts, db.WithValidateField("device"))
		if err := fv(ctx, m.GetDevice(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vlan_id"]; exists {

		vOpts := append(opts, db.WithValidateField("vlan_id"))
		if err := fv(ctx, m.GetVlanId(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVlanInterfaceTypeValidator = func() *ValidateVlanInterfaceType {
	v := &ValidateVlanInterfaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDevice := v.DeviceValidationRuleHandler
	rulesDevice := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhDevice(rulesDevice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VlanInterfaceType.device: %s", err)
		panic(errMsg)
	}
	v.FldValidators["device"] = vFn

	vrhVlanId := v.VlanIdValidationRuleHandler
	rulesVlanId := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1",
		"ves.io.schema.rules.uint32.lte": "4095",
	}
	vFn, err = vrhVlanId(rulesVlanId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VlanInterfaceType.vlan_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vlan_id"] = vFn

	return v
}()

func VlanInterfaceTypeValidator() db.Validator {
	return DefaultVlanInterfaceTypeValidator
}

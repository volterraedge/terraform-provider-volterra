// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/types.proto

package views

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SiteNetwork
//
// x-displayName: "Site Network"
// This defines network types to be used on site
type SiteNetwork int32

const (
	// x-displayName: "Inside and Outside Network"
	// All inside and outside networks.
	SITE_NETWORK_INSIDE_AND_OUTSIDE SiteNetwork = 0
	// x-displayName: "Inside and Outside Network with Internet VIP"
	// All inside and outside networks with internet VIP support.
	SITE_NETWORK_INSIDE_AND_OUTSIDE_WITH_INTERNET_VIP SiteNetwork = 5
	// x-displayName: "Inside Network"
	// All inside networks.
	SITE_NETWORK_INSIDE SiteNetwork = 1
	// x-displayName: "Outside Network"
	// All outside networks.
	SITE_NETWORK_OUTSIDE SiteNetwork = 2
	// x-displayName: "Outside Network with internet VIP"
	// All outside networks with internet VIP support.
	SITE_NETWORK_OUTSIDE_WITH_INTERNET_VIP SiteNetwork = 4
	// x-displayName: "vK8s Service Network"
	// vK8s service network.
	SITE_NETWORK_SERVICE SiteNetwork = 3
	// VER IP Fabric network for the site
	//
	// x-displayName: "Site IP Fabric Network"
	// This Virtual network type is used for exposing virtual host on IP Fabric network on the VER site or
	// for endpoint in IP Fabric network
	SITE_NETWORK_IP_FABRIC SiteNetwork = 6
)

var SiteNetwork_name = map[int32]string{
	0: "SITE_NETWORK_INSIDE_AND_OUTSIDE",
	5: "SITE_NETWORK_INSIDE_AND_OUTSIDE_WITH_INTERNET_VIP",
	1: "SITE_NETWORK_INSIDE",
	2: "SITE_NETWORK_OUTSIDE",
	4: "SITE_NETWORK_OUTSIDE_WITH_INTERNET_VIP",
	3: "SITE_NETWORK_SERVICE",
	6: "SITE_NETWORK_IP_FABRIC",
}

var SiteNetwork_value = map[string]int32{
	"SITE_NETWORK_INSIDE_AND_OUTSIDE":                   0,
	"SITE_NETWORK_INSIDE_AND_OUTSIDE_WITH_INTERNET_VIP": 5,
	"SITE_NETWORK_INSIDE":                               1,
	"SITE_NETWORK_OUTSIDE":                              2,
	"SITE_NETWORK_OUTSIDE_WITH_INTERNET_VIP":            4,
	"SITE_NETWORK_SERVICE":                              3,
	"SITE_NETWORK_IP_FABRIC":                            6,
}

func (SiteNetwork) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{0}
}

// SiteNetworkSpecifiedVIP
//
// x-displayName: "Site Network"
// This defines network types to be used on virtual-site with specified VIP
type SiteNetworkSpecifiedVIP int32

const (
	// x-displayName: "Outside Network"
	// All outside networks.
	SITE_NETWORK_SPECIFIED_VIP_OUTSIDE SiteNetworkSpecifiedVIP = 0
	// x-displayName: "Inside Network"
	// All inside networks.
	SITE_NETWORK_SPECIFIED_VIP_INSIDE SiteNetworkSpecifiedVIP = 1
)

var SiteNetworkSpecifiedVIP_name = map[int32]string{
	0: "SITE_NETWORK_SPECIFIED_VIP_OUTSIDE",
	1: "SITE_NETWORK_SPECIFIED_VIP_INSIDE",
}

var SiteNetworkSpecifiedVIP_value = map[string]int32{
	"SITE_NETWORK_SPECIFIED_VIP_OUTSIDE": 0,
	"SITE_NETWORK_SPECIFIED_VIP_INSIDE":  1,
}

func (SiteNetworkSpecifiedVIP) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{1}
}

// ObjectRefType
//
// x-displayName: "Object reference"
// This type establishes a direct reference from one object(the referrer) to another(the referred).
// Such a reference is in form of tenant/namespace/name
type ObjectRefType struct {
	// tenant
	//
	// x-displayName: "Tenant"
	// x-example: "acmecorp"
	// When a configuration object(e.g. virtual_host) refers to another(e.g route)
	// then tenant will hold the referred object's(e.g. route's) tenant.
	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// When a configuration object(e.g. virtual_host) refers to another(e.g route)
	// then namespace will hold the referred object's(e.g. route's) namespace.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "contacts-route"
	// x-required
	// When a configuration object(e.g. virtual_host) refers to another(e.g route)
	// then name will hold the referred object's(e.g. route's) name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ObjectRefType) Reset()      { *m = ObjectRefType{} }
func (*ObjectRefType) ProtoMessage() {}
func (*ObjectRefType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{0}
}
func (m *ObjectRefType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectRefType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ObjectRefType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectRefType.Merge(m, src)
}
func (m *ObjectRefType) XXX_Size() int {
	return m.Size()
}
func (m *ObjectRefType) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectRefType.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectRefType proto.InternalMessageInfo

func (m *ObjectRefType) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ObjectRefType) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ObjectRefType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// LinkRefType
// This message defines a reference to hyperlink that can be accessed via web.
type LinkRefType struct {
	// HyperlinkRef
	//
	// x-displayName: "Hyperlink reference"
	// x-example: "https://f5.com/link/resource_a"
	// Referred link's location. This can be treated as equivalent of href in html.
	Href string `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	// Name
	//
	// x-displayName: "Link Name"
	// x-example: "Resource A"
	// Name to use for displaying above link in href
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *LinkRefType) Reset()      { *m = LinkRefType{} }
func (*LinkRefType) ProtoMessage() {}
func (*LinkRefType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{1}
}
func (m *LinkRefType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkRefType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LinkRefType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkRefType.Merge(m, src)
}
func (m *LinkRefType) XXX_Size() int {
	return m.Size()
}
func (m *LinkRefType) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkRefType.DiscardUnknown(m)
}

var xxx_messageInfo_LinkRefType proto.InternalMessageInfo

func (m *LinkRefType) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *LinkRefType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// SiteLocator
//
// x-displayName: "Site or Virtual Site"
// This message defines a reference to a site or virtual site object
type SiteLocator struct {
	// SiteLocator
	//
	// x-displayName: "Select Site or Virtual Site"
	// x-required
	//
	// Types that are valid to be assigned to Choice:
	//	*SiteLocator_Site
	//	*SiteLocator_VirtualSite
	Choice isSiteLocator_Choice `protobuf_oneof:"choice"`
}

func (m *SiteLocator) Reset()      { *m = SiteLocator{} }
func (*SiteLocator) ProtoMessage() {}
func (*SiteLocator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{2}
}
func (m *SiteLocator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SiteLocator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SiteLocator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteLocator.Merge(m, src)
}
func (m *SiteLocator) XXX_Size() int {
	return m.Size()
}
func (m *SiteLocator) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteLocator.DiscardUnknown(m)
}

var xxx_messageInfo_SiteLocator proto.InternalMessageInfo

type isSiteLocator_Choice interface {
	isSiteLocator_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SiteLocator_Site struct {
	Site *ObjectRefType `protobuf:"bytes,1,opt,name=site,proto3,oneof" json:"site,omitempty"`
}
type SiteLocator_VirtualSite struct {
	VirtualSite *ObjectRefType `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,proto3,oneof" json:"virtual_site,omitempty"`
}

func (*SiteLocator_Site) isSiteLocator_Choice()        {}
func (*SiteLocator_VirtualSite) isSiteLocator_Choice() {}

func (m *SiteLocator) GetChoice() isSiteLocator_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *SiteLocator) GetSite() *ObjectRefType {
	if x, ok := m.GetChoice().(*SiteLocator_Site); ok {
		return x.Site
	}
	return nil
}

func (m *SiteLocator) GetVirtualSite() *ObjectRefType {
	if x, ok := m.GetChoice().(*SiteLocator_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SiteLocator) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SiteLocator_Site)(nil),
		(*SiteLocator_VirtualSite)(nil),
	}
}

// SiteReferenceListType
//
// x-displayName: "List of sites"
// Carries the references to one or more sites
type SiteReferenceListType struct {
	// Site References
	//
	// x-displayName: "Site References"
	// Reference to one or more sites
	Refs []*ObjectRefType `protobuf:"bytes,1,rep,name=refs,proto3" json:"refs,omitempty"`
}

func (m *SiteReferenceListType) Reset()      { *m = SiteReferenceListType{} }
func (*SiteReferenceListType) ProtoMessage() {}
func (*SiteReferenceListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{3}
}
func (m *SiteReferenceListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SiteReferenceListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SiteReferenceListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteReferenceListType.Merge(m, src)
}
func (m *SiteReferenceListType) XXX_Size() int {
	return m.Size()
}
func (m *SiteReferenceListType) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteReferenceListType.DiscardUnknown(m)
}

var xxx_messageInfo_SiteReferenceListType proto.InternalMessageInfo

func (m *SiteReferenceListType) GetRefs() []*ObjectRefType {
	if m != nil {
		return m.Refs
	}
	return nil
}

// SiteRegionLocator
//
// x-displayName: "Select Site or Virtual Site or Cloud Edge"
// This message defines reference to site or virtual site or a cloud-re-region object
type SiteRegionLocator struct {
	// SiteRegionLocator
	//
	// x-displayName: "Select a site, virtual site or a cloud edge"
	// x-required
	//
	// Types that are valid to be assigned to Choice:
	//	*SiteRegionLocator_Site
	//	*SiteRegionLocator_CloudReRegion
	//	*SiteRegionLocator_VirtualSite
	Choice isSiteRegionLocator_Choice `protobuf_oneof:"choice"`
}

func (m *SiteRegionLocator) Reset()      { *m = SiteRegionLocator{} }
func (*SiteRegionLocator) ProtoMessage() {}
func (*SiteRegionLocator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{4}
}
func (m *SiteRegionLocator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SiteRegionLocator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SiteRegionLocator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteRegionLocator.Merge(m, src)
}
func (m *SiteRegionLocator) XXX_Size() int {
	return m.Size()
}
func (m *SiteRegionLocator) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteRegionLocator.DiscardUnknown(m)
}

var xxx_messageInfo_SiteRegionLocator proto.InternalMessageInfo

type isSiteRegionLocator_Choice interface {
	isSiteRegionLocator_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SiteRegionLocator_Site struct {
	Site *ObjectRefType `protobuf:"bytes,2,opt,name=site,proto3,oneof" json:"site,omitempty"`
}
type SiteRegionLocator_CloudReRegion struct {
	CloudReRegion *ObjectRefType `protobuf:"bytes,3,opt,name=cloud_re_region,json=cloudReRegion,proto3,oneof" json:"cloud_re_region,omitempty"`
}
type SiteRegionLocator_VirtualSite struct {
	VirtualSite *ObjectRefType `protobuf:"bytes,4,opt,name=virtual_site,json=virtualSite,proto3,oneof" json:"virtual_site,omitempty"`
}

func (*SiteRegionLocator_Site) isSiteRegionLocator_Choice()          {}
func (*SiteRegionLocator_CloudReRegion) isSiteRegionLocator_Choice() {}
func (*SiteRegionLocator_VirtualSite) isSiteRegionLocator_Choice()   {}

func (m *SiteRegionLocator) GetChoice() isSiteRegionLocator_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *SiteRegionLocator) GetSite() *ObjectRefType {
	if x, ok := m.GetChoice().(*SiteRegionLocator_Site); ok {
		return x.Site
	}
	return nil
}

func (m *SiteRegionLocator) GetCloudReRegion() *ObjectRefType {
	if x, ok := m.GetChoice().(*SiteRegionLocator_CloudReRegion); ok {
		return x.CloudReRegion
	}
	return nil
}

func (m *SiteRegionLocator) GetVirtualSite() *ObjectRefType {
	if x, ok := m.GetChoice().(*SiteRegionLocator_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SiteRegionLocator) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SiteRegionLocator_Site)(nil),
		(*SiteRegionLocator_CloudReRegion)(nil),
		(*SiteRegionLocator_VirtualSite)(nil),
	}
}

// WhereVirtualNetwork
//
// x-displayName: "Virtual Network"
// Parameters to advertise on a given virtual network
type WhereVirtualNetwork struct {
	// Network
	//
	// x-displayName: "Network"
	// x-required
	// Select network reference
	VirtualNetwork *ObjectRefType `protobuf:"bytes,1,opt,name=virtual_network,json=virtualNetwork,proto3" json:"virtual_network,omitempty"`
	// Select VIP
	//
	// x-displayName: "Select V4 VIP"
	// Select default V4 VIP or specify V4 ip address
	//
	// Types that are valid to be assigned to VipChoice:
	//	*WhereVirtualNetwork_DefaultVip
	//	*WhereVirtualNetwork_SpecificVip
	VipChoice isWhereVirtualNetwork_VipChoice `protobuf_oneof:"vip_choice"`
	// Select V6 VIP
	//
	// x-displayName: "Select V6 VIP"
	// Select default V6 VIP or specify ipv6 address
	//
	// Types that are valid to be assigned to V6VipChoice:
	//	*WhereVirtualNetwork_DefaultV6Vip
	//	*WhereVirtualNetwork_SpecificV6Vip
	V6VipChoice isWhereVirtualNetwork_V6VipChoice `protobuf_oneof:"v6_vip_choice"`
}

func (m *WhereVirtualNetwork) Reset()      { *m = WhereVirtualNetwork{} }
func (*WhereVirtualNetwork) ProtoMessage() {}
func (*WhereVirtualNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{5}
}
func (m *WhereVirtualNetwork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereVirtualNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereVirtualNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereVirtualNetwork.Merge(m, src)
}
func (m *WhereVirtualNetwork) XXX_Size() int {
	return m.Size()
}
func (m *WhereVirtualNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereVirtualNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_WhereVirtualNetwork proto.InternalMessageInfo

type isWhereVirtualNetwork_VipChoice interface {
	isWhereVirtualNetwork_VipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isWhereVirtualNetwork_V6VipChoice interface {
	isWhereVirtualNetwork_V6VipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WhereVirtualNetwork_DefaultVip struct {
	DefaultVip *schema.Empty `protobuf:"bytes,3,opt,name=default_vip,json=defaultVip,proto3,oneof" json:"default_vip,omitempty"`
}
type WhereVirtualNetwork_SpecificVip struct {
	SpecificVip string `protobuf:"bytes,4,opt,name=specific_vip,json=specificVip,proto3,oneof" json:"specific_vip,omitempty"`
}
type WhereVirtualNetwork_DefaultV6Vip struct {
	DefaultV6Vip *schema.Empty `protobuf:"bytes,11,opt,name=default_v6_vip,json=defaultV6Vip,proto3,oneof" json:"default_v6_vip,omitempty"`
}
type WhereVirtualNetwork_SpecificV6Vip struct {
	SpecificV6Vip string `protobuf:"bytes,12,opt,name=specific_v6_vip,json=specificV6Vip,proto3,oneof" json:"specific_v6_vip,omitempty"`
}

func (*WhereVirtualNetwork_DefaultVip) isWhereVirtualNetwork_VipChoice()      {}
func (*WhereVirtualNetwork_SpecificVip) isWhereVirtualNetwork_VipChoice()     {}
func (*WhereVirtualNetwork_DefaultV6Vip) isWhereVirtualNetwork_V6VipChoice()  {}
func (*WhereVirtualNetwork_SpecificV6Vip) isWhereVirtualNetwork_V6VipChoice() {}

func (m *WhereVirtualNetwork) GetVipChoice() isWhereVirtualNetwork_VipChoice {
	if m != nil {
		return m.VipChoice
	}
	return nil
}
func (m *WhereVirtualNetwork) GetV6VipChoice() isWhereVirtualNetwork_V6VipChoice {
	if m != nil {
		return m.V6VipChoice
	}
	return nil
}

func (m *WhereVirtualNetwork) GetVirtualNetwork() *ObjectRefType {
	if m != nil {
		return m.VirtualNetwork
	}
	return nil
}

func (m *WhereVirtualNetwork) GetDefaultVip() *schema.Empty {
	if x, ok := m.GetVipChoice().(*WhereVirtualNetwork_DefaultVip); ok {
		return x.DefaultVip
	}
	return nil
}

func (m *WhereVirtualNetwork) GetSpecificVip() string {
	if x, ok := m.GetVipChoice().(*WhereVirtualNetwork_SpecificVip); ok {
		return x.SpecificVip
	}
	return ""
}

func (m *WhereVirtualNetwork) GetDefaultV6Vip() *schema.Empty {
	if x, ok := m.GetV6VipChoice().(*WhereVirtualNetwork_DefaultV6Vip); ok {
		return x.DefaultV6Vip
	}
	return nil
}

func (m *WhereVirtualNetwork) GetSpecificV6Vip() string {
	if x, ok := m.GetV6VipChoice().(*WhereVirtualNetwork_SpecificV6Vip); ok {
		return x.SpecificV6Vip
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WhereVirtualNetwork) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WhereVirtualNetwork_DefaultVip)(nil),
		(*WhereVirtualNetwork_SpecificVip)(nil),
		(*WhereVirtualNetwork_DefaultV6Vip)(nil),
		(*WhereVirtualNetwork_SpecificV6Vip)(nil),
	}
}

// WhereVirtualNetwork
//
// x-displayName: "Virtual Network"
// Parameters to advertise on a given virtual network
type WhereSegment struct {
	// Segment
	//
	// x-displayName: "Segment"
	// x-required
	Segment *ObjectRefType `protobuf:"bytes,1,opt,name=segment,proto3" json:"segment,omitempty"`
	// IPv4 VIP
	//
	// x-displayName: "IPV4 VIP"
	// x-required
	// Configure IPV4 VIP address
	Ipv4Vip string `protobuf:"bytes,4,opt,name=ipv4_vip,json=ipv4Vip,proto3" json:"ipv4_vip,omitempty"`
	// IPv6 VIP
	//
	// x-displayName: "IPV6 VIP"
	// Configure IPV6 VIP address
	Ipv6Vip string `protobuf:"bytes,5,opt,name=ipv6_vip,json=ipv6Vip,proto3" json:"ipv6_vip,omitempty"`
}

func (m *WhereSegment) Reset()      { *m = WhereSegment{} }
func (*WhereSegment) ProtoMessage() {}
func (*WhereSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{6}
}
func (m *WhereSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereSegment.Merge(m, src)
}
func (m *WhereSegment) XXX_Size() int {
	return m.Size()
}
func (m *WhereSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereSegment.DiscardUnknown(m)
}

var xxx_messageInfo_WhereSegment proto.InternalMessageInfo

func (m *WhereSegment) GetSegment() *ObjectRefType {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (m *WhereSegment) GetIpv4Vip() string {
	if m != nil {
		return m.Ipv4Vip
	}
	return ""
}

func (m *WhereSegment) GetIpv6Vip() string {
	if m != nil {
		return m.Ipv6Vip
	}
	return ""
}

// WhereSite
//
// x-displayName: "Site"
// This defines a reference to a CE site along with network type and an optional ip address where a load balancer could be advertised
type WhereSite struct {
	// Network
	//
	// x-displayName: "Network"
	// x-required
	// Select network types to be used on site
	// By default VIP chosen as ip address of primary network interface in the network
	Network SiteNetwork `protobuf:"varint,1,opt,name=network,proto3,enum=ves.io.schema.views.SiteNetwork" json:"network,omitempty"`
	// Site
	//
	// x-displayName: "Site Reference"
	// x-required
	// Reference to site object
	Site *ObjectRefType `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
	// IP address on the site
	//
	// x-displayName: "IP Address"
	// x-example: "8.8.8.8"
	// Use given IP address as VIP on the site
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// IPv6 address on the site
	//
	// x-displayName: "IPv6 Address"
	// x-example: "2001::1"
	// Use given IPv6 address as VIP on the site
	Ipv6 string `protobuf:"bytes,4,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (m *WhereSite) Reset()      { *m = WhereSite{} }
func (*WhereSite) ProtoMessage() {}
func (*WhereSite) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{7}
}
func (m *WhereSite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereSite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereSite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereSite.Merge(m, src)
}
func (m *WhereSite) XXX_Size() int {
	return m.Size()
}
func (m *WhereSite) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereSite.DiscardUnknown(m)
}

var xxx_messageInfo_WhereSite proto.InternalMessageInfo

func (m *WhereSite) GetNetwork() SiteNetwork {
	if m != nil {
		return m.Network
	}
	return SITE_NETWORK_INSIDE_AND_OUTSIDE
}

func (m *WhereSite) GetSite() *ObjectRefType {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *WhereSite) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *WhereSite) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

// WhereSiteSegment
//
// x-displayName: "Segment on Site"
// This defines a reference to a Segment on a Site and an optional ip address where a load balancer could be advertised
type WhereSiteSegment struct {
	// Segment
	//
	// x-displayName: "Segment"
	// x-required
	Segment *ObjectRefType `protobuf:"bytes,1,opt,name=segment,proto3" json:"segment,omitempty"`
	// Site
	//
	// x-displayName: "Site"
	// x-required
	Site *ObjectRefType `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
	// IP address on the site
	//
	// x-displayName: "IP Address"
	// x-required
	// x-example: "8.8.8.8"
	// Use given IP address as VIP on the site
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// IPv6 address on the site
	//
	// x-displayName: "IPv6 Address"
	// x-example: "2001::1"
	// Use given IPv6 address as VIP on the site
	Ipv6 string `protobuf:"bytes,4,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (m *WhereSiteSegment) Reset()      { *m = WhereSiteSegment{} }
func (*WhereSiteSegment) ProtoMessage() {}
func (*WhereSiteSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{8}
}
func (m *WhereSiteSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereSiteSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereSiteSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereSiteSegment.Merge(m, src)
}
func (m *WhereSiteSegment) XXX_Size() int {
	return m.Size()
}
func (m *WhereSiteSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereSiteSegment.DiscardUnknown(m)
}

var xxx_messageInfo_WhereSiteSegment proto.InternalMessageInfo

func (m *WhereSiteSegment) GetSegment() *ObjectRefType {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (m *WhereSiteSegment) GetSite() *ObjectRefType {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *WhereSiteSegment) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *WhereSiteSegment) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

// WhereCloudEdgeSegment
//
// x-displayName: "Segment on a Cloud Edge"
// This defines a reference to a Segment on a Cloud Edge and an optional ip address where a load balancer could be advertised
type WhereCloudEdgeSegment struct {
	// Segment
	//
	// x-displayName: "Segment"
	// x-required
	Segment *ObjectRefType `protobuf:"bytes,1,opt,name=segment,proto3" json:"segment,omitempty"`
	// Site
	//
	// x-displayName: "Cloud Edge"
	// x-required
	CloudEdge *ObjectRefType `protobuf:"bytes,2,opt,name=cloud_edge,json=cloudEdge,proto3" json:"cloud_edge,omitempty"`
	// IP address on the Cloud Edge
	//
	// x-displayName: "IP Address"
	// x-required
	// x-example: "8.8.8.8"
	// Use given IP address as VIP on the Cloud Edge
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// IPv6 address on the Cloud Edge
	//
	// x-displayName: "IPv6 Address"
	// x-example: "2001::1"
	// Use given IPv6 address as VIP on the Cloud Edge
	Ipv6 string `protobuf:"bytes,4,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (m *WhereCloudEdgeSegment) Reset()      { *m = WhereCloudEdgeSegment{} }
func (*WhereCloudEdgeSegment) ProtoMessage() {}
func (*WhereCloudEdgeSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{9}
}
func (m *WhereCloudEdgeSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereCloudEdgeSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereCloudEdgeSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereCloudEdgeSegment.Merge(m, src)
}
func (m *WhereCloudEdgeSegment) XXX_Size() int {
	return m.Size()
}
func (m *WhereCloudEdgeSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereCloudEdgeSegment.DiscardUnknown(m)
}

var xxx_messageInfo_WhereCloudEdgeSegment proto.InternalMessageInfo

func (m *WhereCloudEdgeSegment) GetSegment() *ObjectRefType {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (m *WhereCloudEdgeSegment) GetCloudEdge() *ObjectRefType {
	if m != nil {
		return m.CloudEdge
	}
	return nil
}

func (m *WhereCloudEdgeSegment) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *WhereCloudEdgeSegment) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

// WhereVirtualSite
//
// x-displayName: "Virtual Site"
// This defines a reference to a customer site virtual site along with network type where a load balancer could be advertised
type WhereVirtualSite struct {
	// Network
	//
	// x-displayName: "Network"
	// x-required
	// Select network types to be used on site.
	// IP address of primary network interface in the network
	Network SiteNetwork `protobuf:"varint,1,opt,name=network,proto3,enum=ves.io.schema.views.SiteNetwork" json:"network,omitempty"`
	// Virtual Site
	//
	// x-displayName: "Virtual Site Reference"
	// x-required
	// Reference to virtual site object
	VirtualSite *ObjectRefType `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,proto3" json:"virtual_site,omitempty"`
}

func (m *WhereVirtualSite) Reset()      { *m = WhereVirtualSite{} }
func (*WhereVirtualSite) ProtoMessage() {}
func (*WhereVirtualSite) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{10}
}
func (m *WhereVirtualSite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereVirtualSite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereVirtualSite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereVirtualSite.Merge(m, src)
}
func (m *WhereVirtualSite) XXX_Size() int {
	return m.Size()
}
func (m *WhereVirtualSite) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereVirtualSite.DiscardUnknown(m)
}

var xxx_messageInfo_WhereVirtualSite proto.InternalMessageInfo

func (m *WhereVirtualSite) GetNetwork() SiteNetwork {
	if m != nil {
		return m.Network
	}
	return SITE_NETWORK_INSIDE_AND_OUTSIDE
}

func (m *WhereVirtualSite) GetVirtualSite() *ObjectRefType {
	if m != nil {
		return m.VirtualSite
	}
	return nil
}

// WhereVirtualSiteSpecifiedVIP
//
// x-displayName: "Virtual Site with Specified VIP"
// This defines a reference to a customer site virtual site along with network type and IP where a load balancer could be advertised
type WhereVirtualSiteSpecifiedVIP struct {
	// Network
	//
	// x-displayName: "Network"
	// x-required
	// Select network types to be used on site.
	// IP address of primary network interface in the network
	Network SiteNetworkSpecifiedVIP `protobuf:"varint,1,opt,name=network,proto3,enum=ves.io.schema.views.SiteNetworkSpecifiedVIP" json:"network,omitempty"`
	// Virtual Site
	//
	// x-displayName: "Virtual Site Reference"
	// x-required
	// Reference to virtual site object
	VirtualSite *ObjectRefType `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,proto3" json:"virtual_site,omitempty"`
	// IP address on the site
	//
	// x-displayName: "IP Address"
	// x-example: "8.8.8.8"
	// Use given IP address as VIP on the site
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// IPv6 address on the site
	//
	// x-displayName: "IPv6 Address"
	// x-example: "2001::1"
	// Use given IPv6 address as VIP on the site
	Ipv6 string `protobuf:"bytes,4,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (m *WhereVirtualSiteSpecifiedVIP) Reset()      { *m = WhereVirtualSiteSpecifiedVIP{} }
func (*WhereVirtualSiteSpecifiedVIP) ProtoMessage() {}
func (*WhereVirtualSiteSpecifiedVIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{11}
}
func (m *WhereVirtualSiteSpecifiedVIP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereVirtualSiteSpecifiedVIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereVirtualSiteSpecifiedVIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereVirtualSiteSpecifiedVIP.Merge(m, src)
}
func (m *WhereVirtualSiteSpecifiedVIP) XXX_Size() int {
	return m.Size()
}
func (m *WhereVirtualSiteSpecifiedVIP) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereVirtualSiteSpecifiedVIP.DiscardUnknown(m)
}

var xxx_messageInfo_WhereVirtualSiteSpecifiedVIP proto.InternalMessageInfo

func (m *WhereVirtualSiteSpecifiedVIP) GetNetwork() SiteNetworkSpecifiedVIP {
	if m != nil {
		return m.Network
	}
	return SITE_NETWORK_SPECIFIED_VIP_OUTSIDE
}

func (m *WhereVirtualSiteSpecifiedVIP) GetVirtualSite() *ObjectRefType {
	if m != nil {
		return m.VirtualSite
	}
	return nil
}

func (m *WhereVirtualSiteSpecifiedVIP) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *WhereVirtualSiteSpecifiedVIP) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

// WhereVirtualSiteSegment
//
// x-displayName: "Virtual Site"
// This defines a reference to a customer site virtual site along with network type where a load balancer could be advertised
type WhereVirtualSiteSegment struct {
	// Segment
	//
	// x-displayName: "Segment"
	// x-required
	Segment *ObjectRefType `protobuf:"bytes,1,opt,name=segment,proto3" json:"segment,omitempty"`
	// Virtual Site
	//
	// x-displayName: "Virtual Site Reference"
	// x-required
	// Reference to virtual site object
	VirtualSite *ObjectRefType `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,proto3" json:"virtual_site,omitempty"`
	// IP address on the site
	//
	// x-displayName: "IP Address"
	// x-required
	// x-example: "8.8.8.8"
	// Use given IP address as VIP on the site
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// IPv6 address on the site
	//
	// x-displayName: "IPv6 Address"
	// x-example: "2001::1"
	// Use given IPv6 address as VIP on the site
	Ipv6 string `protobuf:"bytes,4,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (m *WhereVirtualSiteSegment) Reset()      { *m = WhereVirtualSiteSegment{} }
func (*WhereVirtualSiteSegment) ProtoMessage() {}
func (*WhereVirtualSiteSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{12}
}
func (m *WhereVirtualSiteSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereVirtualSiteSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereVirtualSiteSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereVirtualSiteSegment.Merge(m, src)
}
func (m *WhereVirtualSiteSegment) XXX_Size() int {
	return m.Size()
}
func (m *WhereVirtualSiteSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereVirtualSiteSegment.DiscardUnknown(m)
}

var xxx_messageInfo_WhereVirtualSiteSegment proto.InternalMessageInfo

func (m *WhereVirtualSiteSegment) GetSegment() *ObjectRefType {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (m *WhereVirtualSiteSegment) GetVirtualSite() *ObjectRefType {
	if m != nil {
		return m.VirtualSite
	}
	return nil
}

func (m *WhereVirtualSiteSegment) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *WhereVirtualSiteSegment) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

// WhereVK8SService
//
// x-displayName: "vK8s Services on RE"
// This defines a reference to a RE site or virtual site where a load balancer could be advertised in the vK8s service network
type WhereVK8SService struct {
	// RE or RE Virtual Site
	//
	// x-displayName: "RE or RE Virtual Site"
	// x-required
	// This defines a reference to a RE site or virtual site where a VIP could be advertised in the vK8s service network
	//
	// Types that are valid to be assigned to Choice:
	//	*WhereVK8SService_Site
	//	*WhereVK8SService_VirtualSite
	Choice isWhereVK8SService_Choice `protobuf_oneof:"choice"`
}

func (m *WhereVK8SService) Reset()      { *m = WhereVK8SService{} }
func (*WhereVK8SService) ProtoMessage() {}
func (*WhereVK8SService) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{13}
}
func (m *WhereVK8SService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereVK8SService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereVK8SService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereVK8SService.Merge(m, src)
}
func (m *WhereVK8SService) XXX_Size() int {
	return m.Size()
}
func (m *WhereVK8SService) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereVK8SService.DiscardUnknown(m)
}

var xxx_messageInfo_WhereVK8SService proto.InternalMessageInfo

type isWhereVK8SService_Choice interface {
	isWhereVK8SService_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WhereVK8SService_Site struct {
	Site *ObjectRefType `protobuf:"bytes,1,opt,name=site,proto3,oneof" json:"site,omitempty"`
}
type WhereVK8SService_VirtualSite struct {
	VirtualSite *ObjectRefType `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,proto3,oneof" json:"virtual_site,omitempty"`
}

func (*WhereVK8SService_Site) isWhereVK8SService_Choice()        {}
func (*WhereVK8SService_VirtualSite) isWhereVK8SService_Choice() {}

func (m *WhereVK8SService) GetChoice() isWhereVK8SService_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *WhereVK8SService) GetSite() *ObjectRefType {
	if x, ok := m.GetChoice().(*WhereVK8SService_Site); ok {
		return x.Site
	}
	return nil
}

func (m *WhereVK8SService) GetVirtualSite() *ObjectRefType {
	if x, ok := m.GetChoice().(*WhereVK8SService_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WhereVK8SService) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WhereVK8SService_Site)(nil),
		(*WhereVK8SService_VirtualSite)(nil),
	}
}

// WhereType
//
// x-displayName: "Select Where to Advertise"
// This defines various options where a Loadbalancer could be advertised
type WhereType struct {
	// Advertise choice
	//
	// x-displayName: "Select Where to Advertise"
	// x-required
	// This defines various options where a Loadbalancer could be advertised
	//
	// Types that are valid to be assigned to Choice:
	//	*WhereType_Site
	//	*WhereType_VirtualSite
	//	*WhereType_VirtualSiteWithVip
	//	*WhereType_Vk8SService
	//	*WhereType_VirtualNetwork
	//	*WhereType_SiteSegment
	//	*WhereType_VirtualSiteSegment
	//	*WhereType_CloudEdgeSegment
	//	*WhereType_Segment
	//	*WhereType_AdvertiseOnPublic
	Choice isWhereType_Choice `protobuf_oneof:"choice"`
	//  Listen Port Choice
	//
	// x-displayName: "Listen Port Choice"
	// x-required
	// Available options: user provided port or inherit from the load balancer configuration.
	//
	// Types that are valid to be assigned to PortChoice:
	//	*WhereType_UseDefaultPort
	//	*WhereType_Port
	//	*WhereType_PortRanges
	PortChoice isWhereType_PortChoice `protobuf_oneof:"port_choice"`
}

func (m *WhereType) Reset()      { *m = WhereType{} }
func (*WhereType) ProtoMessage() {}
func (*WhereType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{14}
}
func (m *WhereType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereType.Merge(m, src)
}
func (m *WhereType) XXX_Size() int {
	return m.Size()
}
func (m *WhereType) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereType.DiscardUnknown(m)
}

var xxx_messageInfo_WhereType proto.InternalMessageInfo

type isWhereType_Choice interface {
	isWhereType_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isWhereType_PortChoice interface {
	isWhereType_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WhereType_Site struct {
	Site *WhereSite `protobuf:"bytes,1,opt,name=site,proto3,oneof" json:"site,omitempty"`
}
type WhereType_VirtualSite struct {
	VirtualSite *WhereVirtualSite `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,proto3,oneof" json:"virtual_site,omitempty"`
}
type WhereType_VirtualSiteWithVip struct {
	VirtualSiteWithVip *WhereVirtualSiteSpecifiedVIP `protobuf:"bytes,16,opt,name=virtual_site_with_vip,json=virtualSiteWithVip,proto3,oneof" json:"virtual_site_with_vip,omitempty"`
}
type WhereType_Vk8SService struct {
	Vk8SService *WhereVK8SService `protobuf:"bytes,3,opt,name=vk8s_service,json=vk8sService,proto3,oneof" json:"vk8s_service,omitempty"`
}
type WhereType_VirtualNetwork struct {
	VirtualNetwork *WhereVirtualNetwork `protobuf:"bytes,9,opt,name=virtual_network,json=virtualNetwork,proto3,oneof" json:"virtual_network,omitempty"`
}
type WhereType_SiteSegment struct {
	SiteSegment *WhereSiteSegment `protobuf:"bytes,11,opt,name=site_segment,json=siteSegment,proto3,oneof" json:"site_segment,omitempty"`
}
type WhereType_VirtualSiteSegment struct {
	VirtualSiteSegment *WhereVirtualSiteSegment `protobuf:"bytes,12,opt,name=virtual_site_segment,json=virtualSiteSegment,proto3,oneof" json:"virtual_site_segment,omitempty"`
}
type WhereType_CloudEdgeSegment struct {
	CloudEdgeSegment *WhereCloudEdgeSegment `protobuf:"bytes,14,opt,name=cloud_edge_segment,json=cloudEdgeSegment,proto3,oneof" json:"cloud_edge_segment,omitempty"`
}
type WhereType_Segment struct {
	Segment *WhereSegment `protobuf:"bytes,13,opt,name=segment,proto3,oneof" json:"segment,omitempty"`
}
type WhereType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *AdvertisePublic `protobuf:"bytes,17,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type WhereType_UseDefaultPort struct {
	UseDefaultPort *schema.Empty `protobuf:"bytes,6,opt,name=use_default_port,json=useDefaultPort,proto3,oneof" json:"use_default_port,omitempty"`
}
type WhereType_Port struct {
	Port uint32 `protobuf:"varint,7,opt,name=port,proto3,oneof" json:"port,omitempty"`
}
type WhereType_PortRanges struct {
	PortRanges string `protobuf:"bytes,15,opt,name=port_ranges,json=portRanges,proto3,oneof" json:"port_ranges,omitempty"`
}

func (*WhereType_Site) isWhereType_Choice()               {}
func (*WhereType_VirtualSite) isWhereType_Choice()        {}
func (*WhereType_VirtualSiteWithVip) isWhereType_Choice() {}
func (*WhereType_Vk8SService) isWhereType_Choice()        {}
func (*WhereType_VirtualNetwork) isWhereType_Choice()     {}
func (*WhereType_SiteSegment) isWhereType_Choice()        {}
func (*WhereType_VirtualSiteSegment) isWhereType_Choice() {}
func (*WhereType_CloudEdgeSegment) isWhereType_Choice()   {}
func (*WhereType_Segment) isWhereType_Choice()            {}
func (*WhereType_AdvertiseOnPublic) isWhereType_Choice()  {}
func (*WhereType_UseDefaultPort) isWhereType_PortChoice() {}
func (*WhereType_Port) isWhereType_PortChoice()           {}
func (*WhereType_PortRanges) isWhereType_PortChoice()     {}

func (m *WhereType) GetChoice() isWhereType_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}
func (m *WhereType) GetPortChoice() isWhereType_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}

func (m *WhereType) GetSite() *WhereSite {
	if x, ok := m.GetChoice().(*WhereType_Site); ok {
		return x.Site
	}
	return nil
}

func (m *WhereType) GetVirtualSite() *WhereVirtualSite {
	if x, ok := m.GetChoice().(*WhereType_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

func (m *WhereType) GetVirtualSiteWithVip() *WhereVirtualSiteSpecifiedVIP {
	if x, ok := m.GetChoice().(*WhereType_VirtualSiteWithVip); ok {
		return x.VirtualSiteWithVip
	}
	return nil
}

func (m *WhereType) GetVk8SService() *WhereVK8SService {
	if x, ok := m.GetChoice().(*WhereType_Vk8SService); ok {
		return x.Vk8SService
	}
	return nil
}

func (m *WhereType) GetVirtualNetwork() *WhereVirtualNetwork {
	if x, ok := m.GetChoice().(*WhereType_VirtualNetwork); ok {
		return x.VirtualNetwork
	}
	return nil
}

func (m *WhereType) GetSiteSegment() *WhereSiteSegment {
	if x, ok := m.GetChoice().(*WhereType_SiteSegment); ok {
		return x.SiteSegment
	}
	return nil
}

func (m *WhereType) GetVirtualSiteSegment() *WhereVirtualSiteSegment {
	if x, ok := m.GetChoice().(*WhereType_VirtualSiteSegment); ok {
		return x.VirtualSiteSegment
	}
	return nil
}

func (m *WhereType) GetCloudEdgeSegment() *WhereCloudEdgeSegment {
	if x, ok := m.GetChoice().(*WhereType_CloudEdgeSegment); ok {
		return x.CloudEdgeSegment
	}
	return nil
}

func (m *WhereType) GetSegment() *WhereSegment {
	if x, ok := m.GetChoice().(*WhereType_Segment); ok {
		return x.Segment
	}
	return nil
}

func (m *WhereType) GetAdvertiseOnPublic() *AdvertisePublic {
	if x, ok := m.GetChoice().(*WhereType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *WhereType) GetUseDefaultPort() *schema.Empty {
	if x, ok := m.GetPortChoice().(*WhereType_UseDefaultPort); ok {
		return x.UseDefaultPort
	}
	return nil
}

func (m *WhereType) GetPort() uint32 {
	if x, ok := m.GetPortChoice().(*WhereType_Port); ok {
		return x.Port
	}
	return 0
}

func (m *WhereType) GetPortRanges() string {
	if x, ok := m.GetPortChoice().(*WhereType_PortRanges); ok {
		return x.PortRanges
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WhereType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WhereType_Site)(nil),
		(*WhereType_VirtualSite)(nil),
		(*WhereType_VirtualSiteWithVip)(nil),
		(*WhereType_Vk8SService)(nil),
		(*WhereType_VirtualNetwork)(nil),
		(*WhereType_SiteSegment)(nil),
		(*WhereType_VirtualSiteSegment)(nil),
		(*WhereType_CloudEdgeSegment)(nil),
		(*WhereType_Segment)(nil),
		(*WhereType_AdvertiseOnPublic)(nil),
		(*WhereType_UseDefaultPort)(nil),
		(*WhereType_Port)(nil),
		(*WhereType_PortRanges)(nil),
	}
}

// WhereTypeSiteVsite
//
// x-displayName: "Select Where to Advertise"
// This defines various options where a Loadbalancer could be advertised
type WhereTypeSiteVsite struct {
	// Advertise choice
	//
	// x-displayName: "Select Where to Advertise"
	// x-required
	// This defines various options where a Loadbalancer could be advertised
	//
	// Types that are valid to be assigned to Choice:
	//	*WhereTypeSiteVsite_Site
	//	*WhereTypeSiteVsite_VirtualSite
	Choice isWhereTypeSiteVsite_Choice `protobuf_oneof:"choice"`
	//  Listen TCP Port Choice
	//
	// x-displayName: "TCP Listen Port Choice"
	// Available options: user provided port or system default port
	//
	// Types that are valid to be assigned to PortChoice:
	//	*WhereTypeSiteVsite_UseDefaultPort
	//	*WhereTypeSiteVsite_Port
	PortChoice isWhereTypeSiteVsite_PortChoice `protobuf_oneof:"port_choice"`
}

func (m *WhereTypeSiteVsite) Reset()      { *m = WhereTypeSiteVsite{} }
func (*WhereTypeSiteVsite) ProtoMessage() {}
func (*WhereTypeSiteVsite) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{15}
}
func (m *WhereTypeSiteVsite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereTypeSiteVsite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereTypeSiteVsite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereTypeSiteVsite.Merge(m, src)
}
func (m *WhereTypeSiteVsite) XXX_Size() int {
	return m.Size()
}
func (m *WhereTypeSiteVsite) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereTypeSiteVsite.DiscardUnknown(m)
}

var xxx_messageInfo_WhereTypeSiteVsite proto.InternalMessageInfo

type isWhereTypeSiteVsite_Choice interface {
	isWhereTypeSiteVsite_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isWhereTypeSiteVsite_PortChoice interface {
	isWhereTypeSiteVsite_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WhereTypeSiteVsite_Site struct {
	Site *WhereSite `protobuf:"bytes,1,opt,name=site,proto3,oneof" json:"site,omitempty"`
}
type WhereTypeSiteVsite_VirtualSite struct {
	VirtualSite *WhereVirtualSite `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,proto3,oneof" json:"virtual_site,omitempty"`
}
type WhereTypeSiteVsite_UseDefaultPort struct {
	UseDefaultPort *schema.Empty `protobuf:"bytes,5,opt,name=use_default_port,json=useDefaultPort,proto3,oneof" json:"use_default_port,omitempty"`
}
type WhereTypeSiteVsite_Port struct {
	Port uint32 `protobuf:"varint,6,opt,name=port,proto3,oneof" json:"port,omitempty"`
}

func (*WhereTypeSiteVsite_Site) isWhereTypeSiteVsite_Choice()               {}
func (*WhereTypeSiteVsite_VirtualSite) isWhereTypeSiteVsite_Choice()        {}
func (*WhereTypeSiteVsite_UseDefaultPort) isWhereTypeSiteVsite_PortChoice() {}
func (*WhereTypeSiteVsite_Port) isWhereTypeSiteVsite_PortChoice()           {}

func (m *WhereTypeSiteVsite) GetChoice() isWhereTypeSiteVsite_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}
func (m *WhereTypeSiteVsite) GetPortChoice() isWhereTypeSiteVsite_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}

func (m *WhereTypeSiteVsite) GetSite() *WhereSite {
	if x, ok := m.GetChoice().(*WhereTypeSiteVsite_Site); ok {
		return x.Site
	}
	return nil
}

func (m *WhereTypeSiteVsite) GetVirtualSite() *WhereVirtualSite {
	if x, ok := m.GetChoice().(*WhereTypeSiteVsite_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

func (m *WhereTypeSiteVsite) GetUseDefaultPort() *schema.Empty {
	if x, ok := m.GetPortChoice().(*WhereTypeSiteVsite_UseDefaultPort); ok {
		return x.UseDefaultPort
	}
	return nil
}

func (m *WhereTypeSiteVsite) GetPort() uint32 {
	if x, ok := m.GetPortChoice().(*WhereTypeSiteVsite_Port); ok {
		return x.Port
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WhereTypeSiteVsite) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WhereTypeSiteVsite_Site)(nil),
		(*WhereTypeSiteVsite_VirtualSite)(nil),
		(*WhereTypeSiteVsite_UseDefaultPort)(nil),
		(*WhereTypeSiteVsite_Port)(nil),
	}
}

// AdvertisePublic
//
// x-displayName: "Advertise Public"
// This defines a way to advertise a load balancer on public. If optional public_ip is provided, it will only be advertised on RE sites where that public_ip is available
type AdvertisePublic struct {
	// Public IP
	//
	// x-displayName: "Public IP"
	// x-required
	// Dedicated Public IP, which is allocated by F5 Distributed Cloud on request, is used as a VIP.
	PublicIp *ObjectRefType `protobuf:"bytes,1,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
}

func (m *AdvertisePublic) Reset()      { *m = AdvertisePublic{} }
func (*AdvertisePublic) ProtoMessage() {}
func (*AdvertisePublic) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{16}
}
func (m *AdvertisePublic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvertisePublic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdvertisePublic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvertisePublic.Merge(m, src)
}
func (m *AdvertisePublic) XXX_Size() int {
	return m.Size()
}
func (m *AdvertisePublic) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvertisePublic.DiscardUnknown(m)
}

var xxx_messageInfo_AdvertisePublic proto.InternalMessageInfo

func (m *AdvertisePublic) GetPublicIp() *ObjectRefType {
	if m != nil {
		return m.PublicIp
	}
	return nil
}

// AdvertiseWhere
//
// x-displayName: "Advertise Custom"
// This defines a way to advertise a VIP on specific sites
type AdvertiseCustom struct {
	// Advertise Where
	//
	// x-displayName: "List of Sites to Advertise"
	// x-required
	// Where should this load balancer be available
	AdvertiseWhere []*WhereType `protobuf:"bytes,1,rep,name=advertise_where,json=advertiseWhere,proto3" json:"advertise_where,omitempty"`
}

func (m *AdvertiseCustom) Reset()      { *m = AdvertiseCustom{} }
func (*AdvertiseCustom) ProtoMessage() {}
func (*AdvertiseCustom) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{17}
}
func (m *AdvertiseCustom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvertiseCustom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdvertiseCustom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvertiseCustom.Merge(m, src)
}
func (m *AdvertiseCustom) XXX_Size() int {
	return m.Size()
}
func (m *AdvertiseCustom) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvertiseCustom.DiscardUnknown(m)
}

var xxx_messageInfo_AdvertiseCustom proto.InternalMessageInfo

func (m *AdvertiseCustom) GetAdvertiseWhere() []*WhereType {
	if m != nil {
		return m.AdvertiseWhere
	}
	return nil
}

// AdvertiseSiteVsite
//
// x-displayName: "Advertise Site or Virtual Site"
// This defines a way to advertise a VIP on specific sites
type AdvertiseSiteVsite struct {
	// Advertise Where
	//
	// x-displayName: "List of Sites to Advertise"
	// x-required
	// Where should this load balancer be available
	AdvertiseWhere []*WhereTypeSiteVsite `protobuf:"bytes,1,rep,name=advertise_where,json=advertiseWhere,proto3" json:"advertise_where,omitempty"`
}

func (m *AdvertiseSiteVsite) Reset()      { *m = AdvertiseSiteVsite{} }
func (*AdvertiseSiteVsite) ProtoMessage() {}
func (*AdvertiseSiteVsite) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{18}
}
func (m *AdvertiseSiteVsite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvertiseSiteVsite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdvertiseSiteVsite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvertiseSiteVsite.Merge(m, src)
}
func (m *AdvertiseSiteVsite) XXX_Size() int {
	return m.Size()
}
func (m *AdvertiseSiteVsite) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvertiseSiteVsite.DiscardUnknown(m)
}

var xxx_messageInfo_AdvertiseSiteVsite proto.InternalMessageInfo

func (m *AdvertiseSiteVsite) GetAdvertiseWhere() []*WhereTypeSiteVsite {
	if m != nil {
		return m.AdvertiseWhere
	}
	return nil
}

// CustomCiphers
//
// x-displayName: "Custom Ciphers"
// This defines TLS protocol config including min/max versions and allowed ciphers
type CustomCiphers struct {
	// minimum_protocol_version
	//
	// x-displayName: "Minimum TLS version"
	// Minimum TLS protocol version.
	MinVersion schema.TlsProtocol `protobuf:"varint,1,opt,name=min_version,json=minVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"min_version,omitempty"`
	// maximum_protocol_version
	//
	// x-displayName: "Maximum TLS version"
	// Maximum TLS protocol version.
	MaxVersion schema.TlsProtocol `protobuf:"varint,2,opt,name=max_version,json=maxVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"max_version,omitempty"`
	// cipher_suites
	//
	// x-displayName: "Cipher Suites"
	// x-example: "TLS_AES_128_GCM_SHA256"
	// x-required
	// The TLS listener will only support the specified cipher list.
	CipherSuites []string `protobuf:"bytes,3,rep,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
}

func (m *CustomCiphers) Reset()      { *m = CustomCiphers{} }
func (*CustomCiphers) ProtoMessage() {}
func (*CustomCiphers) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{19}
}
func (m *CustomCiphers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomCiphers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomCiphers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomCiphers.Merge(m, src)
}
func (m *CustomCiphers) XXX_Size() int {
	return m.Size()
}
func (m *CustomCiphers) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomCiphers.DiscardUnknown(m)
}

var xxx_messageInfo_CustomCiphers proto.InternalMessageInfo

func (m *CustomCiphers) GetMinVersion() schema.TlsProtocol {
	if m != nil {
		return m.MinVersion
	}
	return schema.TLS_AUTO
}

func (m *CustomCiphers) GetMaxVersion() schema.TlsProtocol {
	if m != nil {
		return m.MaxVersion
	}
	return schema.TLS_AUTO
}

func (m *CustomCiphers) GetCipherSuites() []string {
	if m != nil {
		return m.CipherSuites
	}
	return nil
}

// TlsConfig
//
// x-displayName: "TLS Config"
// This defines various options to configure TLS configuration parameters
type TlsConfig struct {
	// TLS Security Level
	//
	// x-displayName: "TLS Security Level"
	// x-required
	// The security level for TLS handshake between client/server and the platform.
	//
	// Types that are valid to be assigned to Choice:
	//	*TlsConfig_DefaultSecurity
	//	*TlsConfig_MediumSecurity
	//	*TlsConfig_LowSecurity
	//	*TlsConfig_CustomSecurity
	Choice isTlsConfig_Choice `protobuf_oneof:"choice"`
}

func (m *TlsConfig) Reset()      { *m = TlsConfig{} }
func (*TlsConfig) ProtoMessage() {}
func (*TlsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{20}
}
func (m *TlsConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TlsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TlsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TlsConfig.Merge(m, src)
}
func (m *TlsConfig) XXX_Size() int {
	return m.Size()
}
func (m *TlsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TlsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TlsConfig proto.InternalMessageInfo

type isTlsConfig_Choice interface {
	isTlsConfig_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TlsConfig_DefaultSecurity struct {
	DefaultSecurity *schema.Empty `protobuf:"bytes,1,opt,name=default_security,json=defaultSecurity,proto3,oneof" json:"default_security,omitempty"`
}
type TlsConfig_MediumSecurity struct {
	MediumSecurity *schema.Empty `protobuf:"bytes,2,opt,name=medium_security,json=mediumSecurity,proto3,oneof" json:"medium_security,omitempty"`
}
type TlsConfig_LowSecurity struct {
	LowSecurity *schema.Empty `protobuf:"bytes,3,opt,name=low_security,json=lowSecurity,proto3,oneof" json:"low_security,omitempty"`
}
type TlsConfig_CustomSecurity struct {
	CustomSecurity *CustomCiphers `protobuf:"bytes,4,opt,name=custom_security,json=customSecurity,proto3,oneof" json:"custom_security,omitempty"`
}

func (*TlsConfig_DefaultSecurity) isTlsConfig_Choice() {}
func (*TlsConfig_MediumSecurity) isTlsConfig_Choice()  {}
func (*TlsConfig_LowSecurity) isTlsConfig_Choice()     {}
func (*TlsConfig_CustomSecurity) isTlsConfig_Choice()  {}

func (m *TlsConfig) GetChoice() isTlsConfig_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *TlsConfig) GetDefaultSecurity() *schema.Empty {
	if x, ok := m.GetChoice().(*TlsConfig_DefaultSecurity); ok {
		return x.DefaultSecurity
	}
	return nil
}

func (m *TlsConfig) GetMediumSecurity() *schema.Empty {
	if x, ok := m.GetChoice().(*TlsConfig_MediumSecurity); ok {
		return x.MediumSecurity
	}
	return nil
}

func (m *TlsConfig) GetLowSecurity() *schema.Empty {
	if x, ok := m.GetChoice().(*TlsConfig_LowSecurity); ok {
		return x.LowSecurity
	}
	return nil
}

func (m *TlsConfig) GetCustomSecurity() *CustomCiphers {
	if x, ok := m.GetChoice().(*TlsConfig_CustomSecurity); ok {
		return x.CustomSecurity
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TlsConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TlsConfig_DefaultSecurity)(nil),
		(*TlsConfig_MediumSecurity)(nil),
		(*TlsConfig_LowSecurity)(nil),
		(*TlsConfig_CustomSecurity)(nil),
	}
}

// DownstreamTlsParamsType
//
// x-displayName: "Inline TLS Parameters"
// Inline TLS parameters
type DownstreamTlsParamsType struct {
	// TLS Config
	//
	// x-displayName: "TLS"
	// Configuration of TLS settings such as min/max TLS version and ciphersuites
	TlsConfig *TlsConfig `protobuf:"bytes,1,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	// tls_certificates
	//
	// x-displayName: "TLS Certificates"
	// x-required
	// Users can add one or more certificates that share the same set of domains.
	// for example, domain.com and *.domain.com - but use different signature algorithms
	TlsCertificates []*schema.TlsCertificateType `protobuf:"bytes,2,rep,name=tls_certificates,json=tlsCertificates,proto3" json:"tls_certificates,omitempty"`
	// mTLS choice
	//
	// x-displayName: "mTLS"
	// x-required
	// mTLS authentication between clients and HTTPS load balancer
	//
	// Types that are valid to be assigned to MtlsChoice:
	//	*DownstreamTlsParamsType_NoMtls
	//	*DownstreamTlsParamsType_UseMtls
	MtlsChoice isDownstreamTlsParamsType_MtlsChoice `protobuf_oneof:"mtls_choice"`
}

func (m *DownstreamTlsParamsType) Reset()      { *m = DownstreamTlsParamsType{} }
func (*DownstreamTlsParamsType) ProtoMessage() {}
func (*DownstreamTlsParamsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{21}
}
func (m *DownstreamTlsParamsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamTlsParamsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DownstreamTlsParamsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamTlsParamsType.Merge(m, src)
}
func (m *DownstreamTlsParamsType) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamTlsParamsType) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamTlsParamsType.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamTlsParamsType proto.InternalMessageInfo

type isDownstreamTlsParamsType_MtlsChoice interface {
	isDownstreamTlsParamsType_MtlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DownstreamTlsParamsType_NoMtls struct {
	NoMtls *schema.Empty `protobuf:"bytes,3,opt,name=no_mtls,json=noMtls,proto3,oneof" json:"no_mtls,omitempty"`
}
type DownstreamTlsParamsType_UseMtls struct {
	UseMtls *DownstreamTlsValidationContext `protobuf:"bytes,4,opt,name=use_mtls,json=useMtls,proto3,oneof" json:"use_mtls,omitempty"`
}

func (*DownstreamTlsParamsType_NoMtls) isDownstreamTlsParamsType_MtlsChoice()  {}
func (*DownstreamTlsParamsType_UseMtls) isDownstreamTlsParamsType_MtlsChoice() {}

func (m *DownstreamTlsParamsType) GetMtlsChoice() isDownstreamTlsParamsType_MtlsChoice {
	if m != nil {
		return m.MtlsChoice
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetTlsConfig() *TlsConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetTlsCertificates() []*schema.TlsCertificateType {
	if m != nil {
		return m.TlsCertificates
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetNoMtls() *schema.Empty {
	if x, ok := m.GetMtlsChoice().(*DownstreamTlsParamsType_NoMtls); ok {
		return x.NoMtls
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetUseMtls() *DownstreamTlsValidationContext {
	if x, ok := m.GetMtlsChoice().(*DownstreamTlsParamsType_UseMtls); ok {
		return x.UseMtls
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DownstreamTlsParamsType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DownstreamTlsParamsType_NoMtls)(nil),
		(*DownstreamTlsParamsType_UseMtls)(nil),
	}
}

// DownstreamTLSCertsParams
//
// x-displayName: "TLS Parameters"
// Select TLS Parameters and Certificates
type DownstreamTLSCertsParams struct {
	// TLS Config
	//
	// x-displayName: "TLS"
	// Configuration of TLS settings such as min/max TLS version and ciphersuites
	TlsConfig *TlsConfig `protobuf:"bytes,1,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	// certificates
	//
	// x-displayName: "Certificates"
	// x-required
	// Select one or more certificates with any domain names.
	Certificates []*ObjectRefType `protobuf:"bytes,2,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// mTLS choice
	//
	// x-displayName: "mTLS"
	// x-required
	// mTLS authentication between clients and HTTPS load balancer
	//
	// Types that are valid to be assigned to MtlsChoice:
	//	*DownstreamTLSCertsParams_NoMtls
	//	*DownstreamTLSCertsParams_UseMtls
	MtlsChoice isDownstreamTLSCertsParams_MtlsChoice `protobuf_oneof:"mtls_choice"`
}

func (m *DownstreamTLSCertsParams) Reset()      { *m = DownstreamTLSCertsParams{} }
func (*DownstreamTLSCertsParams) ProtoMessage() {}
func (*DownstreamTLSCertsParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{22}
}
func (m *DownstreamTLSCertsParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamTLSCertsParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DownstreamTLSCertsParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamTLSCertsParams.Merge(m, src)
}
func (m *DownstreamTLSCertsParams) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamTLSCertsParams) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamTLSCertsParams.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamTLSCertsParams proto.InternalMessageInfo

type isDownstreamTLSCertsParams_MtlsChoice interface {
	isDownstreamTLSCertsParams_MtlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DownstreamTLSCertsParams_NoMtls struct {
	NoMtls *schema.Empty `protobuf:"bytes,4,opt,name=no_mtls,json=noMtls,proto3,oneof" json:"no_mtls,omitempty"`
}
type DownstreamTLSCertsParams_UseMtls struct {
	UseMtls *DownstreamTlsValidationContext `protobuf:"bytes,5,opt,name=use_mtls,json=useMtls,proto3,oneof" json:"use_mtls,omitempty"`
}

func (*DownstreamTLSCertsParams_NoMtls) isDownstreamTLSCertsParams_MtlsChoice()  {}
func (*DownstreamTLSCertsParams_UseMtls) isDownstreamTLSCertsParams_MtlsChoice() {}

func (m *DownstreamTLSCertsParams) GetMtlsChoice() isDownstreamTLSCertsParams_MtlsChoice {
	if m != nil {
		return m.MtlsChoice
	}
	return nil
}

func (m *DownstreamTLSCertsParams) GetTlsConfig() *TlsConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *DownstreamTLSCertsParams) GetCertificates() []*ObjectRefType {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *DownstreamTLSCertsParams) GetNoMtls() *schema.Empty {
	if x, ok := m.GetMtlsChoice().(*DownstreamTLSCertsParams_NoMtls); ok {
		return x.NoMtls
	}
	return nil
}

func (m *DownstreamTLSCertsParams) GetUseMtls() *DownstreamTlsValidationContext {
	if x, ok := m.GetMtlsChoice().(*DownstreamTLSCertsParams_UseMtls); ok {
		return x.UseMtls
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DownstreamTLSCertsParams) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DownstreamTLSCertsParams_NoMtls)(nil),
		(*DownstreamTLSCertsParams_UseMtls)(nil),
	}
}

// XfccHeaderKeys
//
// x-displayName: "XFCC Header Elements"
// X-Forwarded-Client-Cert header elements to be added to requests
type XfccHeaderKeys struct {
	// XFCC Header
	//
	// x-displayName: "XFCC Header Elements"
	// x-required
	// X-Forwarded-Client-Cert header elements to be added to requests
	XfccHeaderElements []schema.XfccElement `protobuf:"varint,1,rep,packed,name=xfcc_header_elements,json=xfccHeaderElements,proto3,enum=ves.io.schema.XfccElement" json:"xfcc_header_elements,omitempty"`
}

func (m *XfccHeaderKeys) Reset()      { *m = XfccHeaderKeys{} }
func (*XfccHeaderKeys) ProtoMessage() {}
func (*XfccHeaderKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{23}
}
func (m *XfccHeaderKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XfccHeaderKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *XfccHeaderKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XfccHeaderKeys.Merge(m, src)
}
func (m *XfccHeaderKeys) XXX_Size() int {
	return m.Size()
}
func (m *XfccHeaderKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_XfccHeaderKeys.DiscardUnknown(m)
}

var xxx_messageInfo_XfccHeaderKeys proto.InternalMessageInfo

func (m *XfccHeaderKeys) GetXfccHeaderElements() []schema.XfccElement {
	if m != nil {
		return m.XfccHeaderElements
	}
	return nil
}

// DownstreamTlsValidationContext
//
// x-displayName: "Clients TLS validation context"
// Validation context for downstream client TLS connections
type DownstreamTlsValidationContext struct {
	// trusted_ca_choice
	//
	// x-displayName: "Root CA Configuration Method"
	// x-required
	// Root CA configuration for downstream TLS connections
	//
	// Types that are valid to be assigned to TrustedCaChoice:
	//	*DownstreamTlsValidationContext_TrustedCaUrl
	//	*DownstreamTlsValidationContext_TrustedCa
	TrustedCaChoice isDownstreamTlsValidationContext_TrustedCaChoice `protobuf_oneof:"trusted_ca_choice"`
	// client_certificate_optional
	//
	// x-displayName: "Client Certificate Optional"
	// Client certificate is optional. If the client has provided a certificate,
	// the load balancer will verify it. If certification verification fails,
	// the connection will be terminated. If the client does not provide a certificate,
	// the connection will be accepted.
	ClientCertificateOptional bool `protobuf:"varint,11,opt,name=client_certificate_optional,json=clientCertificateOptional,proto3" json:"client_certificate_optional,omitempty"`
	// crl choice
	//
	// x-displayName: "Verify client certificate with CRL"
	// Whether to verify client certificate revocation status with
	// certificate revocation list
	//
	// Types that are valid to be assigned to CrlChoice:
	//	*DownstreamTlsValidationContext_NoCrl
	//	*DownstreamTlsValidationContext_Crl
	CrlChoice isDownstreamTlsValidationContext_CrlChoice `protobuf_oneof:"crl_choice"`
	// xfcc header
	//
	// x-displayName: "Add X-Forwarded-Client-Cert Header"
	// Whether to add the XFCC header with information about the client certificate
	//
	// Types that are valid to be assigned to XfccHeader:
	//	*DownstreamTlsValidationContext_XfccDisabled
	//	*DownstreamTlsValidationContext_XfccOptions
	XfccHeader isDownstreamTlsValidationContext_XfccHeader `protobuf_oneof:"xfcc_header"`
}

func (m *DownstreamTlsValidationContext) Reset()      { *m = DownstreamTlsValidationContext{} }
func (*DownstreamTlsValidationContext) ProtoMessage() {}
func (*DownstreamTlsValidationContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{24}
}
func (m *DownstreamTlsValidationContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamTlsValidationContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DownstreamTlsValidationContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamTlsValidationContext.Merge(m, src)
}
func (m *DownstreamTlsValidationContext) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamTlsValidationContext) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamTlsValidationContext.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamTlsValidationContext proto.InternalMessageInfo

type isDownstreamTlsValidationContext_TrustedCaChoice interface {
	isDownstreamTlsValidationContext_TrustedCaChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDownstreamTlsValidationContext_CrlChoice interface {
	isDownstreamTlsValidationContext_CrlChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDownstreamTlsValidationContext_XfccHeader interface {
	isDownstreamTlsValidationContext_XfccHeader()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DownstreamTlsValidationContext_TrustedCaUrl struct {
	TrustedCaUrl string `protobuf:"bytes,2,opt,name=trusted_ca_url,json=trustedCaUrl,proto3,oneof" json:"trusted_ca_url,omitempty"`
}
type DownstreamTlsValidationContext_TrustedCa struct {
	TrustedCa *ObjectRefType `protobuf:"bytes,10,opt,name=trusted_ca,json=trustedCa,proto3,oneof" json:"trusted_ca,omitempty"`
}
type DownstreamTlsValidationContext_NoCrl struct {
	NoCrl *schema.Empty `protobuf:"bytes,4,opt,name=no_crl,json=noCrl,proto3,oneof" json:"no_crl,omitempty"`
}
type DownstreamTlsValidationContext_Crl struct {
	Crl *ObjectRefType `protobuf:"bytes,5,opt,name=crl,proto3,oneof" json:"crl,omitempty"`
}
type DownstreamTlsValidationContext_XfccDisabled struct {
	XfccDisabled *schema.Empty `protobuf:"bytes,7,opt,name=xfcc_disabled,json=xfccDisabled,proto3,oneof" json:"xfcc_disabled,omitempty"`
}
type DownstreamTlsValidationContext_XfccOptions struct {
	XfccOptions *XfccHeaderKeys `protobuf:"bytes,8,opt,name=xfcc_options,json=xfccOptions,proto3,oneof" json:"xfcc_options,omitempty"`
}

func (*DownstreamTlsValidationContext_TrustedCaUrl) isDownstreamTlsValidationContext_TrustedCaChoice() {
}
func (*DownstreamTlsValidationContext_TrustedCa) isDownstreamTlsValidationContext_TrustedCaChoice() {}
func (*DownstreamTlsValidationContext_NoCrl) isDownstreamTlsValidationContext_CrlChoice()           {}
func (*DownstreamTlsValidationContext_Crl) isDownstreamTlsValidationContext_CrlChoice()             {}
func (*DownstreamTlsValidationContext_XfccDisabled) isDownstreamTlsValidationContext_XfccHeader()   {}
func (*DownstreamTlsValidationContext_XfccOptions) isDownstreamTlsValidationContext_XfccHeader()    {}

func (m *DownstreamTlsValidationContext) GetTrustedCaChoice() isDownstreamTlsValidationContext_TrustedCaChoice {
	if m != nil {
		return m.TrustedCaChoice
	}
	return nil
}
func (m *DownstreamTlsValidationContext) GetCrlChoice() isDownstreamTlsValidationContext_CrlChoice {
	if m != nil {
		return m.CrlChoice
	}
	return nil
}
func (m *DownstreamTlsValidationContext) GetXfccHeader() isDownstreamTlsValidationContext_XfccHeader {
	if m != nil {
		return m.XfccHeader
	}
	return nil
}

func (m *DownstreamTlsValidationContext) GetTrustedCaUrl() string {
	if x, ok := m.GetTrustedCaChoice().(*DownstreamTlsValidationContext_TrustedCaUrl); ok {
		return x.TrustedCaUrl
	}
	return ""
}

func (m *DownstreamTlsValidationContext) GetTrustedCa() *ObjectRefType {
	if x, ok := m.GetTrustedCaChoice().(*DownstreamTlsValidationContext_TrustedCa); ok {
		return x.TrustedCa
	}
	return nil
}

func (m *DownstreamTlsValidationContext) GetClientCertificateOptional() bool {
	if m != nil {
		return m.ClientCertificateOptional
	}
	return false
}

func (m *DownstreamTlsValidationContext) GetNoCrl() *schema.Empty {
	if x, ok := m.GetCrlChoice().(*DownstreamTlsValidationContext_NoCrl); ok {
		return x.NoCrl
	}
	return nil
}

func (m *DownstreamTlsValidationContext) GetCrl() *ObjectRefType {
	if x, ok := m.GetCrlChoice().(*DownstreamTlsValidationContext_Crl); ok {
		return x.Crl
	}
	return nil
}

func (m *DownstreamTlsValidationContext) GetXfccDisabled() *schema.Empty {
	if x, ok := m.GetXfccHeader().(*DownstreamTlsValidationContext_XfccDisabled); ok {
		return x.XfccDisabled
	}
	return nil
}

func (m *DownstreamTlsValidationContext) GetXfccOptions() *XfccHeaderKeys {
	if x, ok := m.GetXfccHeader().(*DownstreamTlsValidationContext_XfccOptions); ok {
		return x.XfccOptions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DownstreamTlsValidationContext) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DownstreamTlsValidationContext_TrustedCaUrl)(nil),
		(*DownstreamTlsValidationContext_TrustedCa)(nil),
		(*DownstreamTlsValidationContext_NoCrl)(nil),
		(*DownstreamTlsValidationContext_Crl)(nil),
		(*DownstreamTlsValidationContext_XfccDisabled)(nil),
		(*DownstreamTlsValidationContext_XfccOptions)(nil),
	}
}

// OriginPoolWithWeight
//
// x-displayName: "Origin Pool with Weight"
// This defines a combination of origin pool with weight and priority
type OriginPoolWithWeight struct {
	// Pool Choice
	//
	// x-displayName: "Select Origin Pool Method"
	// x-required
	// Select origin pool method, simple origin pool method or more flexible cluster object.
	//
	// Types that are valid to be assigned to PoolChoice:
	//	*OriginPoolWithWeight_Pool
	//	*OriginPoolWithWeight_Cluster
	PoolChoice isOriginPoolWithWeight_PoolChoice `protobuf_oneof:"pool_choice"`
	// Weight
	//
	// x-displayName: "Weight"
	// x-example: "1"
	// Weight of this origin pool, valid only with multiple origin pool. Value of 0 will disable the pool
	Weight uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	// Priority
	//
	// x-displayName: "Priority"
	// x-example: "1"
	// Priority of this origin pool, valid only with multiple origin pools.
	// Value of 0 will make the pool as lowest priority origin pool
	// Priority of 1 means highest priority and is considered active.
	// When active origin pool is not available, lower priority origin pools are
	// made active as per the increasing priority.
	Priority uint32 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	// Origin Servers Subset
	//
	// x-displayName: "Origin Servers Subsets"
	// x-example: "value"
	// Upstream origin pool may be configured to divide its origin servers into subsets based on metadata
	// attached to the origin servers. Routes may then specify the metadata that a endpoint must match in
	// order to be selected by the load balancer
	//
	// For origin servers which are discovered in K8S or Consul cluster, the label of the service is merged with
	// endpoint's labels. In case of Consul, the label is derived from the "Tag" field.
	// For labels that are common between configured endpoint and discovered service, labels from discovered service
	// takes precedence.
	//
	// List of key-value pairs that will be used as matching metadata. Only those origin servers of
	// upstream origin pool which match this metadata will be selected for load balancing
	EndpointSubsets map[string]string `protobuf:"bytes,5,rep,name=endpoint_subsets,json=endpointSubsets,proto3" json:"endpoint_subsets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *OriginPoolWithWeight) Reset()      { *m = OriginPoolWithWeight{} }
func (*OriginPoolWithWeight) ProtoMessage() {}
func (*OriginPoolWithWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{25}
}
func (m *OriginPoolWithWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OriginPoolWithWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OriginPoolWithWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginPoolWithWeight.Merge(m, src)
}
func (m *OriginPoolWithWeight) XXX_Size() int {
	return m.Size()
}
func (m *OriginPoolWithWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginPoolWithWeight.DiscardUnknown(m)
}

var xxx_messageInfo_OriginPoolWithWeight proto.InternalMessageInfo

type isOriginPoolWithWeight_PoolChoice interface {
	isOriginPoolWithWeight_PoolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OriginPoolWithWeight_Pool struct {
	Pool *ObjectRefType `protobuf:"bytes,1,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
}
type OriginPoolWithWeight_Cluster struct {
	Cluster *ObjectRefType `protobuf:"bytes,4,opt,name=cluster,proto3,oneof" json:"cluster,omitempty"`
}

func (*OriginPoolWithWeight_Pool) isOriginPoolWithWeight_PoolChoice()    {}
func (*OriginPoolWithWeight_Cluster) isOriginPoolWithWeight_PoolChoice() {}

func (m *OriginPoolWithWeight) GetPoolChoice() isOriginPoolWithWeight_PoolChoice {
	if m != nil {
		return m.PoolChoice
	}
	return nil
}

func (m *OriginPoolWithWeight) GetPool() *ObjectRefType {
	if x, ok := m.GetPoolChoice().(*OriginPoolWithWeight_Pool); ok {
		return x.Pool
	}
	return nil
}

func (m *OriginPoolWithWeight) GetCluster() *ObjectRefType {
	if x, ok := m.GetPoolChoice().(*OriginPoolWithWeight_Cluster); ok {
		return x.Cluster
	}
	return nil
}

func (m *OriginPoolWithWeight) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *OriginPoolWithWeight) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *OriginPoolWithWeight) GetEndpointSubsets() map[string]string {
	if m != nil {
		return m.EndpointSubsets
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OriginPoolWithWeight) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OriginPoolWithWeight_Pool)(nil),
		(*OriginPoolWithWeight_Cluster)(nil),
	}
}

// OriginPoolListType
//
// x-displayName: "Origin Pool List Type"
// List of Origin Pools
type OriginPoolListType struct {
	// Pools
	//
	// x-displayName: "Origin Pools"
	// List of Origin Pools
	Pools []*OriginPoolWithWeight `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (m *OriginPoolListType) Reset()      { *m = OriginPoolListType{} }
func (*OriginPoolListType) ProtoMessage() {}
func (*OriginPoolListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{26}
}
func (m *OriginPoolListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OriginPoolListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OriginPoolListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginPoolListType.Merge(m, src)
}
func (m *OriginPoolListType) XXX_Size() int {
	return m.Size()
}
func (m *OriginPoolListType) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginPoolListType.DiscardUnknown(m)
}

var xxx_messageInfo_OriginPoolListType proto.InternalMessageInfo

func (m *OriginPoolListType) GetPools() []*OriginPoolWithWeight {
	if m != nil {
		return m.Pools
	}
	return nil
}

// ipv4 prefix list
//
// x-displayName: "IPv4 Prefix List"
// x-example: "192.168.20.0/24"
// List of IPv4 prefixes that represent an endpoint
type PrefixStringListType struct {
	// ipv4 prefix list
	//
	// x-displayName: "IPv4 Prefix List"
	// x-example: "192.168.20.0/24"
	// List of IPv4 prefixes that represent an endpoint
	Prefixes []string `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	// ipv6 prefixes
	//
	// x-displayName: "IPv6 Prefix List"
	// x-example: "fd48:fa09:d9d4::/48"
	// List of IPv6 prefix strings.
	Ipv6Prefixes []string `protobuf:"bytes,2,rep,name=ipv6_prefixes,json=ipv6Prefixes,proto3" json:"ipv6_prefixes,omitempty"`
}

func (m *PrefixStringListType) Reset()      { *m = PrefixStringListType{} }
func (*PrefixStringListType) ProtoMessage() {}
func (*PrefixStringListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{27}
}
func (m *PrefixStringListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrefixStringListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PrefixStringListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixStringListType.Merge(m, src)
}
func (m *PrefixStringListType) XXX_Size() int {
	return m.Size()
}
func (m *PrefixStringListType) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixStringListType.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixStringListType proto.InternalMessageInfo

func (m *PrefixStringListType) GetPrefixes() []string {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

func (m *PrefixStringListType) GetIpv6Prefixes() []string {
	if m != nil {
		return m.Ipv6Prefixes
	}
	return nil
}

// Global Network
//
// x-displayName: "Global Network"
// Global network reference for direct connection
type GlobalConnectorType struct {
	// Virtual Network
	//
	// x-displayName: "Global Virtual Network"
	// x-required
	// Select Virtual Network of Global Type
	GlobalVn *ObjectRefType `protobuf:"bytes,1,opt,name=global_vn,json=globalVn,proto3" json:"global_vn,omitempty"`
}

func (m *GlobalConnectorType) Reset()      { *m = GlobalConnectorType{} }
func (*GlobalConnectorType) ProtoMessage() {}
func (*GlobalConnectorType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{28}
}
func (m *GlobalConnectorType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalConnectorType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalConnectorType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalConnectorType.Merge(m, src)
}
func (m *GlobalConnectorType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalConnectorType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalConnectorType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalConnectorType proto.InternalMessageInfo

func (m *GlobalConnectorType) GetGlobalVn() *ObjectRefType {
	if m != nil {
		return m.GlobalVn
	}
	return nil
}

// Segment List
//
// x-displayName: "Segment List"
// List of references to Segments
type SegmentRefList struct {
	// Segments
	//
	// x-displayName: "Segments"
	// x-required
	// Select list of segments
	Segments []*ObjectRefType `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (m *SegmentRefList) Reset()      { *m = SegmentRefList{} }
func (*SegmentRefList) ProtoMessage() {}
func (*SegmentRefList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{29}
}
func (m *SegmentRefList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentRefList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SegmentRefList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRefList.Merge(m, src)
}
func (m *SegmentRefList) XXX_Size() int {
	return m.Size()
}
func (m *SegmentRefList) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRefList.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRefList proto.InternalMessageInfo

func (m *SegmentRefList) GetSegments() []*ObjectRefType {
	if m != nil {
		return m.Segments
	}
	return nil
}

// F5XC Software Version
//
// x-displayName: "F5XC Software Version"
// Select the F5XC Software Version for the site. By default, latest available F5XC Software Version will be used.
// Refer to release notes to find required released SW versions.
type VolterraSoftwareType struct {
	// F5XC Software Version
	//
	// x-displayName: "F5XC Software Version"
	// x-required
	// Select the F5XC Software Version for the site. By default, latest available F5XC Software Version will be used.
	// Refer to release notes to find required released SW versions.
	//
	// Types that are valid to be assigned to VolterraSwVersionChoice:
	//	*VolterraSoftwareType_DefaultSwVersion
	//	*VolterraSoftwareType_VolterraSoftwareVersion
	VolterraSwVersionChoice isVolterraSoftwareType_VolterraSwVersionChoice `protobuf_oneof:"volterra_sw_version_choice"`
}

func (m *VolterraSoftwareType) Reset()      { *m = VolterraSoftwareType{} }
func (*VolterraSoftwareType) ProtoMessage() {}
func (*VolterraSoftwareType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{30}
}
func (m *VolterraSoftwareType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VolterraSoftwareType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VolterraSoftwareType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolterraSoftwareType.Merge(m, src)
}
func (m *VolterraSoftwareType) XXX_Size() int {
	return m.Size()
}
func (m *VolterraSoftwareType) XXX_DiscardUnknown() {
	xxx_messageInfo_VolterraSoftwareType.DiscardUnknown(m)
}

var xxx_messageInfo_VolterraSoftwareType proto.InternalMessageInfo

type isVolterraSoftwareType_VolterraSwVersionChoice interface {
	isVolterraSoftwareType_VolterraSwVersionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VolterraSoftwareType_DefaultSwVersion struct {
	DefaultSwVersion *schema.Empty `protobuf:"bytes,2,opt,name=default_sw_version,json=defaultSwVersion,proto3,oneof" json:"default_sw_version,omitempty"`
}
type VolterraSoftwareType_VolterraSoftwareVersion struct {
	VolterraSoftwareVersion string `protobuf:"bytes,3,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3,oneof" json:"volterra_software_version,omitempty"`
}

func (*VolterraSoftwareType_DefaultSwVersion) isVolterraSoftwareType_VolterraSwVersionChoice() {}
func (*VolterraSoftwareType_VolterraSoftwareVersion) isVolterraSoftwareType_VolterraSwVersionChoice() {
}

func (m *VolterraSoftwareType) GetVolterraSwVersionChoice() isVolterraSoftwareType_VolterraSwVersionChoice {
	if m != nil {
		return m.VolterraSwVersionChoice
	}
	return nil
}

func (m *VolterraSoftwareType) GetDefaultSwVersion() *schema.Empty {
	if x, ok := m.GetVolterraSwVersionChoice().(*VolterraSoftwareType_DefaultSwVersion); ok {
		return x.DefaultSwVersion
	}
	return nil
}

func (m *VolterraSoftwareType) GetVolterraSoftwareVersion() string {
	if x, ok := m.GetVolterraSwVersionChoice().(*VolterraSoftwareType_VolterraSoftwareVersion); ok {
		return x.VolterraSoftwareVersion
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VolterraSoftwareType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VolterraSoftwareType_DefaultSwVersion)(nil),
		(*VolterraSoftwareType_VolterraSoftwareVersion)(nil),
	}
}

// Operating System Version
//
// x-displayName: "Operating System Version"
// Select the F5XC Operating System Version for the site. By default, latest available OS Version will be used.
// Refer to release notes to find required released OS versions.
type OperatingSystemType struct {
	// Operating System Version
	//
	// x-displayName: "Operating System Version"
	// x-required
	// Select the F5XC Operating System Version for the site. By default, latest available OS Version will be used.
	// Refer to release notes to find required released OS versions.
	//
	// Types that are valid to be assigned to OperatingSystemVersionChoice:
	//	*OperatingSystemType_DefaultOsVersion
	//	*OperatingSystemType_OperatingSystemVersion
	OperatingSystemVersionChoice isOperatingSystemType_OperatingSystemVersionChoice `protobuf_oneof:"operating_system_version_choice"`
}

func (m *OperatingSystemType) Reset()      { *m = OperatingSystemType{} }
func (*OperatingSystemType) ProtoMessage() {}
func (*OperatingSystemType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{31}
}
func (m *OperatingSystemType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatingSystemType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OperatingSystemType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatingSystemType.Merge(m, src)
}
func (m *OperatingSystemType) XXX_Size() int {
	return m.Size()
}
func (m *OperatingSystemType) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatingSystemType.DiscardUnknown(m)
}

var xxx_messageInfo_OperatingSystemType proto.InternalMessageInfo

type isOperatingSystemType_OperatingSystemVersionChoice interface {
	isOperatingSystemType_OperatingSystemVersionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OperatingSystemType_DefaultOsVersion struct {
	DefaultOsVersion *schema.Empty `protobuf:"bytes,2,opt,name=default_os_version,json=defaultOsVersion,proto3,oneof" json:"default_os_version,omitempty"`
}
type OperatingSystemType_OperatingSystemVersion struct {
	OperatingSystemVersion string `protobuf:"bytes,3,opt,name=operating_system_version,json=operatingSystemVersion,proto3,oneof" json:"operating_system_version,omitempty"`
}

func (*OperatingSystemType_DefaultOsVersion) isOperatingSystemType_OperatingSystemVersionChoice() {}
func (*OperatingSystemType_OperatingSystemVersion) isOperatingSystemType_OperatingSystemVersionChoice() {
}

func (m *OperatingSystemType) GetOperatingSystemVersionChoice() isOperatingSystemType_OperatingSystemVersionChoice {
	if m != nil {
		return m.OperatingSystemVersionChoice
	}
	return nil
}

func (m *OperatingSystemType) GetDefaultOsVersion() *schema.Empty {
	if x, ok := m.GetOperatingSystemVersionChoice().(*OperatingSystemType_DefaultOsVersion); ok {
		return x.DefaultOsVersion
	}
	return nil
}

func (m *OperatingSystemType) GetOperatingSystemVersion() string {
	if x, ok := m.GetOperatingSystemVersionChoice().(*OperatingSystemType_OperatingSystemVersion); ok {
		return x.OperatingSystemVersion
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OperatingSystemType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OperatingSystemType_DefaultOsVersion)(nil),
		(*OperatingSystemType_OperatingSystemVersion)(nil),
	}
}

// Node by Node Upgrade
//
// x-displayName: "Node by Node Upgrade"
// Specify how worker nodes within a site will be upgraded.
type KubernetesUpgradeDrain struct {
	// F5XC Enable/Disable Node by Node Upgrade
	//
	// x-displayName: "Node by Node Upgrade"
	// x-required
	// Specify how nodes within a site will be upgraded. If enabled, you can specify number of Worker nodes to be upgraded in parallel.
	// Note: This does not influence Control nodes. This is benefitial for sites with large number of nodes.
	//
	// Types that are valid to be assigned to KubernetesUpgradeDrainEnableChoice:
	//	*KubernetesUpgradeDrain_EnableUpgradeDrain
	//	*KubernetesUpgradeDrain_DisableUpgradeDrain
	KubernetesUpgradeDrainEnableChoice isKubernetesUpgradeDrain_KubernetesUpgradeDrainEnableChoice `protobuf_oneof:"kubernetes_upgrade_drain_enable_choice"`
}

func (m *KubernetesUpgradeDrain) Reset()      { *m = KubernetesUpgradeDrain{} }
func (*KubernetesUpgradeDrain) ProtoMessage() {}
func (*KubernetesUpgradeDrain) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{32}
}
func (m *KubernetesUpgradeDrain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubernetesUpgradeDrain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubernetesUpgradeDrain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesUpgradeDrain.Merge(m, src)
}
func (m *KubernetesUpgradeDrain) XXX_Size() int {
	return m.Size()
}
func (m *KubernetesUpgradeDrain) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesUpgradeDrain.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesUpgradeDrain proto.InternalMessageInfo

type isKubernetesUpgradeDrain_KubernetesUpgradeDrainEnableChoice interface {
	isKubernetesUpgradeDrain_KubernetesUpgradeDrainEnableChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type KubernetesUpgradeDrain_EnableUpgradeDrain struct {
	EnableUpgradeDrain *KubernetesUpgradeDrainConfig `protobuf:"bytes,2,opt,name=enable_upgrade_drain,json=enableUpgradeDrain,proto3,oneof" json:"enable_upgrade_drain,omitempty"`
}
type KubernetesUpgradeDrain_DisableUpgradeDrain struct {
	DisableUpgradeDrain *schema.Empty `protobuf:"bytes,3,opt,name=disable_upgrade_drain,json=disableUpgradeDrain,proto3,oneof" json:"disable_upgrade_drain,omitempty"`
}

func (*KubernetesUpgradeDrain_EnableUpgradeDrain) isKubernetesUpgradeDrain_KubernetesUpgradeDrainEnableChoice() {
}
func (*KubernetesUpgradeDrain_DisableUpgradeDrain) isKubernetesUpgradeDrain_KubernetesUpgradeDrainEnableChoice() {
}

func (m *KubernetesUpgradeDrain) GetKubernetesUpgradeDrainEnableChoice() isKubernetesUpgradeDrain_KubernetesUpgradeDrainEnableChoice {
	if m != nil {
		return m.KubernetesUpgradeDrainEnableChoice
	}
	return nil
}

func (m *KubernetesUpgradeDrain) GetEnableUpgradeDrain() *KubernetesUpgradeDrainConfig {
	if x, ok := m.GetKubernetesUpgradeDrainEnableChoice().(*KubernetesUpgradeDrain_EnableUpgradeDrain); ok {
		return x.EnableUpgradeDrain
	}
	return nil
}

func (m *KubernetesUpgradeDrain) GetDisableUpgradeDrain() *schema.Empty {
	if x, ok := m.GetKubernetesUpgradeDrainEnableChoice().(*KubernetesUpgradeDrain_DisableUpgradeDrain); ok {
		return x.DisableUpgradeDrain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*KubernetesUpgradeDrain) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*KubernetesUpgradeDrain_EnableUpgradeDrain)(nil),
		(*KubernetesUpgradeDrain_DisableUpgradeDrain)(nil),
	}
}

// Regional Edge Selection
//
// x-displayName: "Regional Edge Selection"
// Selection criteria to connect the site with F5 Distributed Cloud Regional Edge(s).
type RegionalEdgeSelection struct {
	// Regional Edge Selection
	//
	// x-displayName: "Regional Edge Selection"
	// Selection criteria to connect the site with F5 Distributed Cloud Regional Edge(s). By default, REs in closest proximity to the site will be selected based on the public IP address of the control nodes of the site.
	//
	// Types that are valid to be assigned to ReSelectionChoice:
	//	*RegionalEdgeSelection_GeoProximity
	//	*RegionalEdgeSelection_SpecificGeography
	//	*RegionalEdgeSelection_SpecificRe
	ReSelectionChoice isRegionalEdgeSelection_ReSelectionChoice `protobuf_oneof:"re_selection_choice"`
}

func (m *RegionalEdgeSelection) Reset()      { *m = RegionalEdgeSelection{} }
func (*RegionalEdgeSelection) ProtoMessage() {}
func (*RegionalEdgeSelection) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{33}
}
func (m *RegionalEdgeSelection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionalEdgeSelection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RegionalEdgeSelection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionalEdgeSelection.Merge(m, src)
}
func (m *RegionalEdgeSelection) XXX_Size() int {
	return m.Size()
}
func (m *RegionalEdgeSelection) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionalEdgeSelection.DiscardUnknown(m)
}

var xxx_messageInfo_RegionalEdgeSelection proto.InternalMessageInfo

type isRegionalEdgeSelection_ReSelectionChoice interface {
	isRegionalEdgeSelection_ReSelectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RegionalEdgeSelection_GeoProximity struct {
	GeoProximity *schema.Empty `protobuf:"bytes,2,opt,name=geo_proximity,json=geoProximity,proto3,oneof" json:"geo_proximity,omitempty"`
}
type RegionalEdgeSelection_SpecificGeography struct {
	SpecificGeography string `protobuf:"bytes,3,opt,name=specific_geography,json=specificGeography,proto3,oneof" json:"specific_geography,omitempty"`
}
type RegionalEdgeSelection_SpecificRe struct {
	SpecificRe *SpecificRE `protobuf:"bytes,4,opt,name=specific_re,json=specificRe,proto3,oneof" json:"specific_re,omitempty"`
}

func (*RegionalEdgeSelection_GeoProximity) isRegionalEdgeSelection_ReSelectionChoice()      {}
func (*RegionalEdgeSelection_SpecificGeography) isRegionalEdgeSelection_ReSelectionChoice() {}
func (*RegionalEdgeSelection_SpecificRe) isRegionalEdgeSelection_ReSelectionChoice()        {}

func (m *RegionalEdgeSelection) GetReSelectionChoice() isRegionalEdgeSelection_ReSelectionChoice {
	if m != nil {
		return m.ReSelectionChoice
	}
	return nil
}

func (m *RegionalEdgeSelection) GetGeoProximity() *schema.Empty {
	if x, ok := m.GetReSelectionChoice().(*RegionalEdgeSelection_GeoProximity); ok {
		return x.GeoProximity
	}
	return nil
}

// Deprecated: Do not use.
func (m *RegionalEdgeSelection) GetSpecificGeography() string {
	if x, ok := m.GetReSelectionChoice().(*RegionalEdgeSelection_SpecificGeography); ok {
		return x.SpecificGeography
	}
	return ""
}

func (m *RegionalEdgeSelection) GetSpecificRe() *SpecificRE {
	if x, ok := m.GetReSelectionChoice().(*RegionalEdgeSelection_SpecificRe); ok {
		return x.SpecificRe
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RegionalEdgeSelection) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RegionalEdgeSelection_GeoProximity)(nil),
		(*RegionalEdgeSelection_SpecificGeography)(nil),
		(*RegionalEdgeSelection_SpecificRe)(nil),
	}
}

// Admin User Credentials
//
// x-displayName: "Admin User Credentials"
// Setup user credentials to manage access to nodes belonging to the site.
// When configured, 'admin' user will be setup and customers can access these nodes via
// either the node local WebUI or via SSH to access shell/CLI
// Ensure 'Node Local Services' are enabled to allow for required access
type AdminUserCredentialsType struct {
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// x-example: "ssh-rsa AAAAB..."
	// Provided Public SSH key can be used for accessing nodes of the site.
	// When provided, customers can ssh to the nodes of this Customer Edge site using admin as the user.
	SshKey string `protobuf:"bytes,1,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// Admin Password
	//
	// x-displayName: "Admin Password"
	// Provided password can be used for accessing nodes of the site.
	// When provided, customers can either ssh to the nodes of this Customer Edge site or use the node local WebUI by using admin as the user.
	AdminPassword *schema.SecretType `protobuf:"bytes,2,opt,name=admin_password,json=adminPassword,proto3" json:"admin_password,omitempty"`
}

func (m *AdminUserCredentialsType) Reset()      { *m = AdminUserCredentialsType{} }
func (*AdminUserCredentialsType) ProtoMessage() {}
func (*AdminUserCredentialsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{34}
}
func (m *AdminUserCredentialsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminUserCredentialsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdminUserCredentialsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminUserCredentialsType.Merge(m, src)
}
func (m *AdminUserCredentialsType) XXX_Size() int {
	return m.Size()
}
func (m *AdminUserCredentialsType) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminUserCredentialsType.DiscardUnknown(m)
}

var xxx_messageInfo_AdminUserCredentialsType proto.InternalMessageInfo

func (m *AdminUserCredentialsType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *AdminUserCredentialsType) GetAdminPassword() *schema.SecretType {
	if m != nil {
		return m.AdminPassword
	}
	return nil
}

// Proactive Monitoring
//
// x-displayName: "Proactive Monitoring"
// Enable proactive collection of debuglogs from this Customer Edge site to enable faster troubleshooting and issue resolution.
// When enabled, nodes of this Customer Edge site will be able to stream required service debug logs to F5 Distributed Cloud.
// When disabled, nodes of this Customer Edge site will not be able to send any debug logs and might cause delays in troubleshooting and issue resolution.
// It is recommended to have this setting enabled.
// Note: Only the relevant F5 Distributed Cloud software service logs will be transmitted. No customer sensitive data will be transmitted.
type ProactiveMonitoringChoice struct {
	// Proactive Monitoring
	//
	// x-displayName: "Proactive Monitoring"
	// Enable proactive collection of debuglogs from this Customer Edge site to enable faster troubleshooting and issue resolution.
	// When enabled, nodes of this Customer Edge site will be able to stream required service debug logs to F5 Distributed Cloud.
	// When disabled, nodes of this Customer Edge site will not be able to send any debug logs and might cause delays in troubleshooting and issue resolution.
	// It is recommended to have this setting enabled.
	// Note: Only the relevant F5 Distributed Cloud software service logs will be transmitted. No customer sensitive data will be transmitted.
	//
	// Types that are valid to be assigned to ProactiveMonitoringChoice:
	//	*ProactiveMonitoringChoice_ProactiveMonitoringEnable
	//	*ProactiveMonitoringChoice_ProactiveMonitoringDisable
	ProactiveMonitoringChoice isProactiveMonitoringChoice_ProactiveMonitoringChoice `protobuf_oneof:"proactive_monitoring_choice"`
}

func (m *ProactiveMonitoringChoice) Reset()      { *m = ProactiveMonitoringChoice{} }
func (*ProactiveMonitoringChoice) ProtoMessage() {}
func (*ProactiveMonitoringChoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{35}
}
func (m *ProactiveMonitoringChoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProactiveMonitoringChoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProactiveMonitoringChoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProactiveMonitoringChoice.Merge(m, src)
}
func (m *ProactiveMonitoringChoice) XXX_Size() int {
	return m.Size()
}
func (m *ProactiveMonitoringChoice) XXX_DiscardUnknown() {
	xxx_messageInfo_ProactiveMonitoringChoice.DiscardUnknown(m)
}

var xxx_messageInfo_ProactiveMonitoringChoice proto.InternalMessageInfo

type isProactiveMonitoringChoice_ProactiveMonitoringChoice interface {
	isProactiveMonitoringChoice_ProactiveMonitoringChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProactiveMonitoringChoice_ProactiveMonitoringEnable struct {
	ProactiveMonitoringEnable *schema.Empty `protobuf:"bytes,2,opt,name=proactive_monitoring_enable,json=proactiveMonitoringEnable,proto3,oneof" json:"proactive_monitoring_enable,omitempty"`
}
type ProactiveMonitoringChoice_ProactiveMonitoringDisable struct {
	ProactiveMonitoringDisable *schema.Empty `protobuf:"bytes,3,opt,name=proactive_monitoring_disable,json=proactiveMonitoringDisable,proto3,oneof" json:"proactive_monitoring_disable,omitempty"`
}

func (*ProactiveMonitoringChoice_ProactiveMonitoringEnable) isProactiveMonitoringChoice_ProactiveMonitoringChoice() {
}
func (*ProactiveMonitoringChoice_ProactiveMonitoringDisable) isProactiveMonitoringChoice_ProactiveMonitoringChoice() {
}

func (m *ProactiveMonitoringChoice) GetProactiveMonitoringChoice() isProactiveMonitoringChoice_ProactiveMonitoringChoice {
	if m != nil {
		return m.ProactiveMonitoringChoice
	}
	return nil
}

func (m *ProactiveMonitoringChoice) GetProactiveMonitoringEnable() *schema.Empty {
	if x, ok := m.GetProactiveMonitoringChoice().(*ProactiveMonitoringChoice_ProactiveMonitoringEnable); ok {
		return x.ProactiveMonitoringEnable
	}
	return nil
}

func (m *ProactiveMonitoringChoice) GetProactiveMonitoringDisable() *schema.Empty {
	if x, ok := m.GetProactiveMonitoringChoice().(*ProactiveMonitoringChoice_ProactiveMonitoringDisable); ok {
		return x.ProactiveMonitoringDisable
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProactiveMonitoringChoice) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProactiveMonitoringChoice_ProactiveMonitoringEnable)(nil),
		(*ProactiveMonitoringChoice_ProactiveMonitoringDisable)(nil),
	}
}

// Specific RE
//
// x-displayName: "Specific RE"
// Select specific REs. This is useful when a site needs to deterministically connect to a set of REs. A site will always be connected to 2 REs.
type SpecificRE struct {
	// Primary RE Geography
	//
	// x-displayName: "Primary RE Geography"
	// Select primary RE for this site.
	PrimaryRe string `protobuf:"bytes,1,opt,name=primary_re,json=primaryRe,proto3" json:"primary_re,omitempty"`
	// Backup RE Geography
	//
	// x-displayName: "Backup RE Geography"
	// Select backup RE for this site.
	BackupRe string `protobuf:"bytes,2,opt,name=backup_re,json=backupRe,proto3" json:"backup_re,omitempty"`
}

func (m *SpecificRE) Reset()      { *m = SpecificRE{} }
func (*SpecificRE) ProtoMessage() {}
func (*SpecificRE) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{36}
}
func (m *SpecificRE) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecificRE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SpecificRE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecificRE.Merge(m, src)
}
func (m *SpecificRE) XXX_Size() int {
	return m.Size()
}
func (m *SpecificRE) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecificRE.DiscardUnknown(m)
}

var xxx_messageInfo_SpecificRE proto.InternalMessageInfo

func (m *SpecificRE) GetPrimaryRe() string {
	if m != nil {
		return m.PrimaryRe
	}
	return ""
}

func (m *SpecificRE) GetBackupRe() string {
	if m != nil {
		return m.BackupRe
	}
	return ""
}

// Enable Node by Node Upgrade
//
// x-displayName: "Enable Node by Node Upgrade"
// Specify batch upgrade settings for worker nodes within a site.
type KubernetesUpgradeDrainConfig struct {
	// Upgrade Wait Time
	//
	// x-displayName: "Upgrade Wait Time"
	// x-required
	// Seconds to wait before initiating upgrade on the next set of nodes. Setting it to 0 will wait indefinitely for all services on nodes to be upgraded gracefully before proceeding to the next set of nodes.
	// (Warning: It may block upgrade if services on a node cannot be gracefully upgraded. It is recommended to use the default value).
	DrainNodeTimeout uint32 `protobuf:"varint,1,opt,name=drain_node_timeout,json=drainNodeTimeout,proto3" json:"drain_node_timeout,omitempty"`
	// Node Batch Size
	//
	// x-displayName: "Node Batch Size"
	// x-required
	// Max number of worker nodes to be upgraded in parallel
	//
	// Types that are valid to be assigned to DrainMaxUnavailableChoice:
	//	*KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount
	//	*KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage
	DrainMaxUnavailableChoice isKubernetesUpgradeDrainConfig_DrainMaxUnavailableChoice `protobuf_oneof:"drain_max_unavailable_choice"`
	// Vega Upgrade Mode Toggle
	//
	// x-displayName: "Vega Upgrade Mode Toggle"
	// x-required
	// When enabled, vega will inform RE to stop traffic to the specific node.
	//
	// Types that are valid to be assigned to VegaUpgradeModeToggleChoice:
	//	*KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode
	//	*KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode
	VegaUpgradeModeToggleChoice isKubernetesUpgradeDrainConfig_VegaUpgradeModeToggleChoice `protobuf_oneof:"vega_upgrade_mode_toggle_choice"`
}

func (m *KubernetesUpgradeDrainConfig) Reset()      { *m = KubernetesUpgradeDrainConfig{} }
func (*KubernetesUpgradeDrainConfig) ProtoMessage() {}
func (*KubernetesUpgradeDrainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{37}
}
func (m *KubernetesUpgradeDrainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubernetesUpgradeDrainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubernetesUpgradeDrainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesUpgradeDrainConfig.Merge(m, src)
}
func (m *KubernetesUpgradeDrainConfig) XXX_Size() int {
	return m.Size()
}
func (m *KubernetesUpgradeDrainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesUpgradeDrainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesUpgradeDrainConfig proto.InternalMessageInfo

type isKubernetesUpgradeDrainConfig_DrainMaxUnavailableChoice interface {
	isKubernetesUpgradeDrainConfig_DrainMaxUnavailableChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isKubernetesUpgradeDrainConfig_VegaUpgradeModeToggleChoice interface {
	isKubernetesUpgradeDrainConfig_VegaUpgradeModeToggleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount struct {
	DrainMaxUnavailableNodeCount uint32 `protobuf:"varint,3,opt,name=drain_max_unavailable_node_count,json=drainMaxUnavailableNodeCount,proto3,oneof" json:"drain_max_unavailable_node_count,omitempty"`
}
type KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage struct {
	DrainMaxUnavailableNodePercentage uint32 `protobuf:"varint,4,opt,name=drain_max_unavailable_node_percentage,json=drainMaxUnavailableNodePercentage,proto3,oneof" json:"drain_max_unavailable_node_percentage,omitempty"`
}
type KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode struct {
	DisableVegaUpgradeMode *schema.Empty `protobuf:"bytes,6,opt,name=disable_vega_upgrade_mode,json=disableVegaUpgradeMode,proto3,oneof" json:"disable_vega_upgrade_mode,omitempty"`
}
type KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode struct {
	EnableVegaUpgradeMode *schema.Empty `protobuf:"bytes,7,opt,name=enable_vega_upgrade_mode,json=enableVegaUpgradeMode,proto3,oneof" json:"enable_vega_upgrade_mode,omitempty"`
}

func (*KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount) isKubernetesUpgradeDrainConfig_DrainMaxUnavailableChoice() {
}
func (*KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage) isKubernetesUpgradeDrainConfig_DrainMaxUnavailableChoice() {
}
func (*KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode) isKubernetesUpgradeDrainConfig_VegaUpgradeModeToggleChoice() {
}
func (*KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode) isKubernetesUpgradeDrainConfig_VegaUpgradeModeToggleChoice() {
}

func (m *KubernetesUpgradeDrainConfig) GetDrainMaxUnavailableChoice() isKubernetesUpgradeDrainConfig_DrainMaxUnavailableChoice {
	if m != nil {
		return m.DrainMaxUnavailableChoice
	}
	return nil
}
func (m *KubernetesUpgradeDrainConfig) GetVegaUpgradeModeToggleChoice() isKubernetesUpgradeDrainConfig_VegaUpgradeModeToggleChoice {
	if m != nil {
		return m.VegaUpgradeModeToggleChoice
	}
	return nil
}

func (m *KubernetesUpgradeDrainConfig) GetDrainNodeTimeout() uint32 {
	if m != nil {
		return m.DrainNodeTimeout
	}
	return 0
}

func (m *KubernetesUpgradeDrainConfig) GetDrainMaxUnavailableNodeCount() uint32 {
	if x, ok := m.GetDrainMaxUnavailableChoice().(*KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount); ok {
		return x.DrainMaxUnavailableNodeCount
	}
	return 0
}

func (m *KubernetesUpgradeDrainConfig) GetDrainMaxUnavailableNodePercentage() uint32 {
	if x, ok := m.GetDrainMaxUnavailableChoice().(*KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage); ok {
		return x.DrainMaxUnavailableNodePercentage
	}
	return 0
}

func (m *KubernetesUpgradeDrainConfig) GetDisableVegaUpgradeMode() *schema.Empty {
	if x, ok := m.GetVegaUpgradeModeToggleChoice().(*KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode); ok {
		return x.DisableVegaUpgradeMode
	}
	return nil
}

func (m *KubernetesUpgradeDrainConfig) GetEnableVegaUpgradeMode() *schema.Empty {
	if x, ok := m.GetVegaUpgradeModeToggleChoice().(*KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode); ok {
		return x.EnableVegaUpgradeMode
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*KubernetesUpgradeDrainConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount)(nil),
		(*KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage)(nil),
		(*KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode)(nil),
		(*KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode)(nil),
	}
}

// Performance Enhancement Choice
//
// x-displayName: "Performance Enhancement Mode"
// x-required
// Optimize the site for L3 or L7 traffic processing. L7 optimized is the default.
type PerformanceEnhancementModeType struct {
	// Performance Mode
	//
	// x-displayName: "Performance Mode"
	// x-required
	// Optimize the site for L3 or L7 traffic processing. L7 optimized is the default.
	// When the mode is toggled, dataplane services will restart and traffic disruption will be seen.
	// It is recommended to set this mode during site creation.
	//
	// Types that are valid to be assigned to PerfModeChoice:
	//	*PerformanceEnhancementModeType_PerfModeL7Enhanced
	//	*PerformanceEnhancementModeType_PerfModeL3Enhanced
	PerfModeChoice isPerformanceEnhancementModeType_PerfModeChoice `protobuf_oneof:"perf_mode_choice"`
}

func (m *PerformanceEnhancementModeType) Reset()      { *m = PerformanceEnhancementModeType{} }
func (*PerformanceEnhancementModeType) ProtoMessage() {}
func (*PerformanceEnhancementModeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{38}
}
func (m *PerformanceEnhancementModeType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerformanceEnhancementModeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PerformanceEnhancementModeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerformanceEnhancementModeType.Merge(m, src)
}
func (m *PerformanceEnhancementModeType) XXX_Size() int {
	return m.Size()
}
func (m *PerformanceEnhancementModeType) XXX_DiscardUnknown() {
	xxx_messageInfo_PerformanceEnhancementModeType.DiscardUnknown(m)
}

var xxx_messageInfo_PerformanceEnhancementModeType proto.InternalMessageInfo

type isPerformanceEnhancementModeType_PerfModeChoice interface {
	isPerformanceEnhancementModeType_PerfModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PerformanceEnhancementModeType_PerfModeL7Enhanced struct {
	PerfModeL7Enhanced *schema.Empty `protobuf:"bytes,2,opt,name=perf_mode_l7_enhanced,json=perfModeL7Enhanced,proto3,oneof" json:"perf_mode_l7_enhanced,omitempty"`
}
type PerformanceEnhancementModeType_PerfModeL3Enhanced struct {
	PerfModeL3Enhanced *L3PerformanceEnhancementType `protobuf:"bytes,4,opt,name=perf_mode_l3_enhanced,json=perfModeL3Enhanced,proto3,oneof" json:"perf_mode_l3_enhanced,omitempty"`
}

func (*PerformanceEnhancementModeType_PerfModeL7Enhanced) isPerformanceEnhancementModeType_PerfModeChoice() {
}
func (*PerformanceEnhancementModeType_PerfModeL3Enhanced) isPerformanceEnhancementModeType_PerfModeChoice() {
}

func (m *PerformanceEnhancementModeType) GetPerfModeChoice() isPerformanceEnhancementModeType_PerfModeChoice {
	if m != nil {
		return m.PerfModeChoice
	}
	return nil
}

func (m *PerformanceEnhancementModeType) GetPerfModeL7Enhanced() *schema.Empty {
	if x, ok := m.GetPerfModeChoice().(*PerformanceEnhancementModeType_PerfModeL7Enhanced); ok {
		return x.PerfModeL7Enhanced
	}
	return nil
}

func (m *PerformanceEnhancementModeType) GetPerfModeL3Enhanced() *L3PerformanceEnhancementType {
	if x, ok := m.GetPerfModeChoice().(*PerformanceEnhancementModeType_PerfModeL3Enhanced); ok {
		return x.PerfModeL3Enhanced
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PerformanceEnhancementModeType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PerformanceEnhancementModeType_PerfModeL7Enhanced)(nil),
		(*PerformanceEnhancementModeType_PerfModeL3Enhanced)(nil),
	}
}

// Accelerated Networking Type
//
// x-displayName: "Accelerated Networking Type"
// x-required
// Accelerated Networking to reduce Latency, When Mode is toggled, traffic
// disruption will be seen
type AcceleratedNetworkingType struct {
	// Accelerated Networking
	//
	// x-displayName: "Accelerated Networking"
	// x-required
	// Accelerated Networking to reduce Latency, When Mode is toggled, traffic
	// disruption will be seen
	//
	// Types that are valid to be assigned to AcceleratedNetworking:
	//	*AcceleratedNetworkingType_Disable
	//	*AcceleratedNetworkingType_Enable
	AcceleratedNetworking isAcceleratedNetworkingType_AcceleratedNetworking `protobuf_oneof:"accelerated_networking"`
}

func (m *AcceleratedNetworkingType) Reset()      { *m = AcceleratedNetworkingType{} }
func (*AcceleratedNetworkingType) ProtoMessage() {}
func (*AcceleratedNetworkingType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{39}
}
func (m *AcceleratedNetworkingType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceleratedNetworkingType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AcceleratedNetworkingType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceleratedNetworkingType.Merge(m, src)
}
func (m *AcceleratedNetworkingType) XXX_Size() int {
	return m.Size()
}
func (m *AcceleratedNetworkingType) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceleratedNetworkingType.DiscardUnknown(m)
}

var xxx_messageInfo_AcceleratedNetworkingType proto.InternalMessageInfo

type isAcceleratedNetworkingType_AcceleratedNetworking interface {
	isAcceleratedNetworkingType_AcceleratedNetworking()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AcceleratedNetworkingType_Disable struct {
	Disable *schema.Empty `protobuf:"bytes,2,opt,name=disable,proto3,oneof" json:"disable,omitempty"`
}
type AcceleratedNetworkingType_Enable struct {
	Enable *schema.Empty `protobuf:"bytes,3,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
}

func (*AcceleratedNetworkingType_Disable) isAcceleratedNetworkingType_AcceleratedNetworking() {}
func (*AcceleratedNetworkingType_Enable) isAcceleratedNetworkingType_AcceleratedNetworking()  {}

func (m *AcceleratedNetworkingType) GetAcceleratedNetworking() isAcceleratedNetworkingType_AcceleratedNetworking {
	if m != nil {
		return m.AcceleratedNetworking
	}
	return nil
}

func (m *AcceleratedNetworkingType) GetDisable() *schema.Empty {
	if x, ok := m.GetAcceleratedNetworking().(*AcceleratedNetworkingType_Disable); ok {
		return x.Disable
	}
	return nil
}

func (m *AcceleratedNetworkingType) GetEnable() *schema.Empty {
	if x, ok := m.GetAcceleratedNetworking().(*AcceleratedNetworkingType_Enable); ok {
		return x.Enable
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AcceleratedNetworkingType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AcceleratedNetworkingType_Disable)(nil),
		(*AcceleratedNetworkingType_Enable)(nil),
	}
}

// L3 Mode Enhanced Performance options
//
// x-displayName: "L3 Mode Enhanced Performance"
// x-required
// L3 enhanced performance mode options
type L3PerformanceEnhancementType struct {
	// L3 Mode Enhanced Performance Options
	//
	// x-displayName: "Jumbo Frame Support"
	// x-required
	// Choose to enable/disable jumbo frame support for L3 optimized workloads.
	//
	// Types that are valid to be assigned to PerfModeChoice:
	//	*L3PerformanceEnhancementType_NoJumbo
	//	*L3PerformanceEnhancementType_Jumbo
	PerfModeChoice isL3PerformanceEnhancementType_PerfModeChoice `protobuf_oneof:"perf_mode_choice"`
}

func (m *L3PerformanceEnhancementType) Reset()      { *m = L3PerformanceEnhancementType{} }
func (*L3PerformanceEnhancementType) ProtoMessage() {}
func (*L3PerformanceEnhancementType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{40}
}
func (m *L3PerformanceEnhancementType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L3PerformanceEnhancementType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *L3PerformanceEnhancementType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L3PerformanceEnhancementType.Merge(m, src)
}
func (m *L3PerformanceEnhancementType) XXX_Size() int {
	return m.Size()
}
func (m *L3PerformanceEnhancementType) XXX_DiscardUnknown() {
	xxx_messageInfo_L3PerformanceEnhancementType.DiscardUnknown(m)
}

var xxx_messageInfo_L3PerformanceEnhancementType proto.InternalMessageInfo

type isL3PerformanceEnhancementType_PerfModeChoice interface {
	isL3PerformanceEnhancementType_PerfModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type L3PerformanceEnhancementType_NoJumbo struct {
	NoJumbo *schema.Empty `protobuf:"bytes,2,opt,name=no_jumbo,json=noJumbo,proto3,oneof" json:"no_jumbo,omitempty"`
}
type L3PerformanceEnhancementType_Jumbo struct {
	Jumbo *schema.Empty `protobuf:"bytes,3,opt,name=jumbo,proto3,oneof" json:"jumbo,omitempty"`
}

func (*L3PerformanceEnhancementType_NoJumbo) isL3PerformanceEnhancementType_PerfModeChoice() {}
func (*L3PerformanceEnhancementType_Jumbo) isL3PerformanceEnhancementType_PerfModeChoice()   {}

func (m *L3PerformanceEnhancementType) GetPerfModeChoice() isL3PerformanceEnhancementType_PerfModeChoice {
	if m != nil {
		return m.PerfModeChoice
	}
	return nil
}

func (m *L3PerformanceEnhancementType) GetNoJumbo() *schema.Empty {
	if x, ok := m.GetPerfModeChoice().(*L3PerformanceEnhancementType_NoJumbo); ok {
		return x.NoJumbo
	}
	return nil
}

func (m *L3PerformanceEnhancementType) GetJumbo() *schema.Empty {
	if x, ok := m.GetPerfModeChoice().(*L3PerformanceEnhancementType_Jumbo); ok {
		return x.Jumbo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*L3PerformanceEnhancementType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*L3PerformanceEnhancementType_NoJumbo)(nil),
		(*L3PerformanceEnhancementType_Jumbo)(nil),
	}
}

// Internet VIP Info
//
// x-displayName: "Internet VIP Info"
// Internet VIP Info
type InternetVIPInfo struct {
	// Site Name
	//
	// x-displayName: "Site Name"
	// Site Name where Internet VIP is installed
	SiteName string `protobuf:"bytes,1,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	// Site Network Type
	//
	// x-displayName: "Site Network Type"
	// Network Type of the site where Internet VIP is installed
	SiteNetworkType SiteNetwork `protobuf:"varint,3,opt,name=site_network_type,json=siteNetworkType,proto3,enum=ves.io.schema.views.SiteNetwork" json:"site_network_type,omitempty"`
	// Internet VIP Status
	//
	// x-displayName: "Status"
	// Detailed status for internet VIP
	Status *InternetVIPStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *InternetVIPInfo) Reset()      { *m = InternetVIPInfo{} }
func (*InternetVIPInfo) ProtoMessage() {}
func (*InternetVIPInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{41}
}
func (m *InternetVIPInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternetVIPInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InternetVIPInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternetVIPInfo.Merge(m, src)
}
func (m *InternetVIPInfo) XXX_Size() int {
	return m.Size()
}
func (m *InternetVIPInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_InternetVIPInfo.DiscardUnknown(m)
}

var xxx_messageInfo_InternetVIPInfo proto.InternalMessageInfo

func (m *InternetVIPInfo) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *InternetVIPInfo) GetSiteNetworkType() SiteNetwork {
	if m != nil {
		return m.SiteNetworkType
	}
	return SITE_NETWORK_INSIDE_AND_OUTSIDE
}

func (m *InternetVIPInfo) GetStatus() *InternetVIPStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Internet VIP Status
//
// x-displayName: "Internet VIP Status"
// CName and installation info
type InternetVIPStatus struct {
	// NLB CNAME
	//
	// x-displayName: "NLB CNAME"
	// NLB CNAME
	NlbCname string `protobuf:"bytes,1,opt,name=nlb_cname,json=nlbCname,proto3" json:"nlb_cname,omitempty"`
	// NLB Status
	//
	// x-displayName: "NLB Status"
	// NLB Status
	NlbStatus string `protobuf:"bytes,2,opt,name=nlb_status,json=nlbStatus,proto3" json:"nlb_status,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// Name
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// ARN
	//
	// x-displayName: "ARN"
	// ARN
	Arn string `protobuf:"bytes,6,opt,name=arn,proto3" json:"arn,omitempty"`
	// Target Group Status
	//
	// x-displayName: "Target Group Status"
	// Target Group Status
	TargetGroupStatus []*InternetVIPTargetGroupStatusType `protobuf:"bytes,7,rep,name=target_group_status,json=targetGroupStatus,proto3" json:"target_group_status,omitempty"`
	// Reason
	//
	// x-displayName: "reason"
	// Reason
	Reason string `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *InternetVIPStatus) Reset()      { *m = InternetVIPStatus{} }
func (*InternetVIPStatus) ProtoMessage() {}
func (*InternetVIPStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{42}
}
func (m *InternetVIPStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternetVIPStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InternetVIPStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternetVIPStatus.Merge(m, src)
}
func (m *InternetVIPStatus) XXX_Size() int {
	return m.Size()
}
func (m *InternetVIPStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_InternetVIPStatus.DiscardUnknown(m)
}

var xxx_messageInfo_InternetVIPStatus proto.InternalMessageInfo

func (m *InternetVIPStatus) GetNlbCname() string {
	if m != nil {
		return m.NlbCname
	}
	return ""
}

func (m *InternetVIPStatus) GetNlbStatus() string {
	if m != nil {
		return m.NlbStatus
	}
	return ""
}

func (m *InternetVIPStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InternetVIPStatus) GetArn() string {
	if m != nil {
		return m.Arn
	}
	return ""
}

func (m *InternetVIPStatus) GetTargetGroupStatus() []*InternetVIPTargetGroupStatusType {
	if m != nil {
		return m.TargetGroupStatus
	}
	return nil
}

func (m *InternetVIPStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type InternetVIPTargetGroupStatusType struct {
	// Name
	//
	// x-displayName: "Name"
	// Name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ARN
	//
	// x-displayName: "ARN"
	// ARN
	Arn string `protobuf:"bytes,2,opt,name=arn,proto3" json:"arn,omitempty"`
	// Status
	//
	// x-displayName: "Status"
	// Status
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Protocol
	//
	// x-displayName: "Protocol"
	// Protocol
	Protocol string `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Listener status
	//
	// x-displayName: "Listener status"
	// Listener status
	ListenerStatus []*InternetVIPListenerStatusType `protobuf:"bytes,5,rep,name=listener_status,json=listenerStatus,proto3" json:"listener_status,omitempty"`
	// Reason
	//
	// x-displayName: "reason"
	// Reason
	Reason string `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *InternetVIPTargetGroupStatusType) Reset()      { *m = InternetVIPTargetGroupStatusType{} }
func (*InternetVIPTargetGroupStatusType) ProtoMessage() {}
func (*InternetVIPTargetGroupStatusType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{43}
}
func (m *InternetVIPTargetGroupStatusType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternetVIPTargetGroupStatusType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InternetVIPTargetGroupStatusType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternetVIPTargetGroupStatusType.Merge(m, src)
}
func (m *InternetVIPTargetGroupStatusType) XXX_Size() int {
	return m.Size()
}
func (m *InternetVIPTargetGroupStatusType) XXX_DiscardUnknown() {
	xxx_messageInfo_InternetVIPTargetGroupStatusType.DiscardUnknown(m)
}

var xxx_messageInfo_InternetVIPTargetGroupStatusType proto.InternalMessageInfo

func (m *InternetVIPTargetGroupStatusType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InternetVIPTargetGroupStatusType) GetArn() string {
	if m != nil {
		return m.Arn
	}
	return ""
}

func (m *InternetVIPTargetGroupStatusType) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *InternetVIPTargetGroupStatusType) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *InternetVIPTargetGroupStatusType) GetListenerStatus() []*InternetVIPListenerStatusType {
	if m != nil {
		return m.ListenerStatus
	}
	return nil
}

func (m *InternetVIPTargetGroupStatusType) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type InternetVIPListenerStatusType struct {
	// Name
	//
	// x-displayName: "Name"
	// Name
	Arn string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	// Status
	//
	// x-displayName: "Status"
	// Status
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Port
	//
	// x-displayName: "Port"
	// Port
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Protocol
	//
	// x-displayName: "Protocol"
	// Protocol
	Protocol string `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Reason
	//
	// x-displayName: "reason"
	// Reason
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *InternetVIPListenerStatusType) Reset()      { *m = InternetVIPListenerStatusType{} }
func (*InternetVIPListenerStatusType) ProtoMessage() {}
func (*InternetVIPListenerStatusType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{44}
}
func (m *InternetVIPListenerStatusType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternetVIPListenerStatusType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InternetVIPListenerStatusType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternetVIPListenerStatusType.Merge(m, src)
}
func (m *InternetVIPListenerStatusType) XXX_Size() int {
	return m.Size()
}
func (m *InternetVIPListenerStatusType) XXX_DiscardUnknown() {
	xxx_messageInfo_InternetVIPListenerStatusType.DiscardUnknown(m)
}

var xxx_messageInfo_InternetVIPListenerStatusType proto.InternalMessageInfo

func (m *InternetVIPListenerStatusType) GetArn() string {
	if m != nil {
		return m.Arn
	}
	return ""
}

func (m *InternetVIPListenerStatusType) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *InternetVIPListenerStatusType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *InternetVIPListenerStatusType) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *InternetVIPListenerStatusType) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// Master Node
//
// x-displayName: "Master Node"
// Master Node is the configuration of the master node
type MasterNode struct {
	// Name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "master-0"
	// Names of master node
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Public IP
	//
	// x-displayName: "Public IP"
	// x-example: "192.168.0.156"
	// IP Address of the master node. This ip will be used when other sites connect
	// via Site Mesh Group
	PublicIp string `protobuf:"bytes,2,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
}

func (m *MasterNode) Reset()      { *m = MasterNode{} }
func (*MasterNode) ProtoMessage() {}
func (*MasterNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{45}
}
func (m *MasterNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MasterNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MasterNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterNode.Merge(m, src)
}
func (m *MasterNode) XXX_Size() int {
	return m.Size()
}
func (m *MasterNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterNode.DiscardUnknown(m)
}

var xxx_messageInfo_MasterNode proto.InternalMessageInfo

func (m *MasterNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MasterNode) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

// ApiOperation
//
// x-displayName: "API Operation"
// API operation according to OpenAPI specification.
type ApiOperation struct {
	// method
	//
	// x-displayName: "HTTP Method"
	// x-required
	// x-example: 'POST'
	// Method to match the input request API method against.
	Method schema.HttpMethod `protobuf:"varint,1,opt,name=method,proto3,enum=ves.io.schema.HttpMethod" json:"method,omitempty"`
	// path
	//
	// x-displayName: "Path"
	// x-required
	// x-example: "/api/users/{userid}"
	// An endpoint path, as specified in OpenAPI, including parameters.
	// The path should comply with RFC 3986 and may have parameters according to OpenAPI specification
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *ApiOperation) Reset()      { *m = ApiOperation{} }
func (*ApiOperation) ProtoMessage() {}
func (*ApiOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{46}
}
func (m *ApiOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiOperation.Merge(m, src)
}
func (m *ApiOperation) XXX_Size() int {
	return m.Size()
}
func (m *ApiOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiOperation.DiscardUnknown(m)
}

var xxx_messageInfo_ApiOperation proto.InternalMessageInfo

func (m *ApiOperation) GetMethod() schema.HttpMethod {
	if m != nil {
		return m.Method
	}
	return schema.ANY
}

func (m *ApiOperation) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// API Endpoint With Schema
//
// x-displayName: "API Endpoint With Schema"
// API endpoint and its schema
type ApiEndpointWithSchema struct {
	// API Operation
	//
	// x-displayName: "API Operation"
	// x-required
	// The API operation which have schema updates
	ApiOperation *ApiOperation `protobuf:"bytes,1,opt,name=api_operation,json=apiOperation,proto3" json:"api_operation,omitempty"`
	// Schema JSON
	//
	// x-displayName: "Schema JSON"
	// x-required
	// x-example: "{}"
	// The schema of the API endpoint
	SchemaJson string `protobuf:"bytes,2,opt,name=schema_json,json=schemaJson,proto3" json:"schema_json,omitempty"`
}

func (m *ApiEndpointWithSchema) Reset()      { *m = ApiEndpointWithSchema{} }
func (*ApiEndpointWithSchema) ProtoMessage() {}
func (*ApiEndpointWithSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{47}
}
func (m *ApiEndpointWithSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiEndpointWithSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiEndpointWithSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiEndpointWithSchema.Merge(m, src)
}
func (m *ApiEndpointWithSchema) XXX_Size() int {
	return m.Size()
}
func (m *ApiEndpointWithSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiEndpointWithSchema.DiscardUnknown(m)
}

var xxx_messageInfo_ApiEndpointWithSchema proto.InternalMessageInfo

func (m *ApiEndpointWithSchema) GetApiOperation() *ApiOperation {
	if m != nil {
		return m.ApiOperation
	}
	return nil
}

func (m *ApiEndpointWithSchema) GetSchemaJson() string {
	if m != nil {
		return m.SchemaJson
	}
	return ""
}

// Custom DNS
//
// x-displayName: "Custom DNS"
// Custom DNS is the configured for specify CE site
type CustomDNS struct {
	// inside_nameserver
	//
	// x-displayName: "DNS Server for Inside Network"
	// x-example: "10.1.1.1"
	// Optional DNS server IP to be used for name resolution in inside network
	InsideNameserver string `protobuf:"bytes,1,opt,name=inside_nameserver,json=insideNameserver,proto3" json:"inside_nameserver,omitempty"`
	// outside_nameserver
	//
	// x-displayName: "DNS Server for Outside Network"
	// x-example: "10.1.1.1"
	// Optional DNS server IP to be used for name resolution in outside network
	OutsideNameserver string `protobuf:"bytes,2,opt,name=outside_nameserver,json=outsideNameserver,proto3" json:"outside_nameserver,omitempty"`
	// inside_nameserver_v6
	//
	// x-displayName: "DNS Server IPv6 for Inside Network"
	// x-example: "1001::1"
	// Optional DNS server IPv6 to be used for name resolution in inside network
	InsideNameserverV6 string `protobuf:"bytes,3,opt,name=inside_nameserver_v6,json=insideNameserverV6,proto3" json:"inside_nameserver_v6,omitempty"`
	// outside_nameserver_v6
	//
	// x-displayName: "DNS Server IPv6 for Outside Network"
	// x-example: "1001::1"
	// Optional DNS server IPv6 to be used for name resolution in outside network
	OutsideNameserverV6 string `protobuf:"bytes,4,opt,name=outside_nameserver_v6,json=outsideNameserverV6,proto3" json:"outside_nameserver_v6,omitempty"`
}

func (m *CustomDNS) Reset()      { *m = CustomDNS{} }
func (*CustomDNS) ProtoMessage() {}
func (*CustomDNS) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{48}
}
func (m *CustomDNS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomDNS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomDNS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomDNS.Merge(m, src)
}
func (m *CustomDNS) XXX_Size() int {
	return m.Size()
}
func (m *CustomDNS) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomDNS.DiscardUnknown(m)
}

var xxx_messageInfo_CustomDNS proto.InternalMessageInfo

func (m *CustomDNS) GetInsideNameserver() string {
	if m != nil {
		return m.InsideNameserver
	}
	return ""
}

func (m *CustomDNS) GetOutsideNameserver() string {
	if m != nil {
		return m.OutsideNameserver
	}
	return ""
}

func (m *CustomDNS) GetInsideNameserverV6() string {
	if m != nil {
		return m.InsideNameserverV6
	}
	return ""
}

func (m *CustomDNS) GetOutsideNameserverV6() string {
	if m != nil {
		return m.OutsideNameserverV6
	}
	return ""
}

// TGW Assigned ASN Type
//
// x-displayName: "TGW Assigned ASN Type"
// Information needed when ASNs are assigned by the user
type TGWAssignedASNType struct {
	// TGW ASN
	//
	// x-displayName: "Enter TGW ASN"
	// x-example: "64512"
	// TGW ASN. Allowed range for 16-bit private ASNs include 64512 to 65534.
	TgwAsn uint32 `protobuf:"varint,1,opt,name=tgw_asn,json=tgwAsn,proto3" json:"tgw_asn,omitempty"`
	// F5XC Site ASN
	//
	// x-displayName: "Enter F5XC Site ASN"
	// x-example: "64500"
	// F5XC Site ASN.
	VolterraSiteAsn uint32 `protobuf:"varint,2,opt,name=volterra_site_asn,json=volterraSiteAsn,proto3" json:"volterra_site_asn,omitempty"`
}

func (m *TGWAssignedASNType) Reset()      { *m = TGWAssignedASNType{} }
func (*TGWAssignedASNType) ProtoMessage() {}
func (*TGWAssignedASNType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{49}
}
func (m *TGWAssignedASNType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TGWAssignedASNType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TGWAssignedASNType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TGWAssignedASNType.Merge(m, src)
}
func (m *TGWAssignedASNType) XXX_Size() int {
	return m.Size()
}
func (m *TGWAssignedASNType) XXX_DiscardUnknown() {
	xxx_messageInfo_TGWAssignedASNType.DiscardUnknown(m)
}

var xxx_messageInfo_TGWAssignedASNType proto.InternalMessageInfo

func (m *TGWAssignedASNType) GetTgwAsn() uint32 {
	if m != nil {
		return m.TgwAsn
	}
	return 0
}

func (m *TGWAssignedASNType) GetVolterraSiteAsn() uint32 {
	if m != nil {
		return m.VolterraSiteAsn
	}
	return 0
}

// TGWParamsType
//
// x-displayName: "TGWParamsType"
type TGWParamsType struct {
	// BGP ASN config
	//
	// x-displayName: "Select BGP ASN"
	// x-required
	// Select BGP ASN config mode
	//
	// Types that are valid to be assigned to AsnChoice:
	//	*TGWParamsType_SystemGenerated
	//	*TGWParamsType_UserAssigned
	AsnChoice isTGWParamsType_AsnChoice `protobuf_oneof:"asn_choice"`
}

func (m *TGWParamsType) Reset()      { *m = TGWParamsType{} }
func (*TGWParamsType) ProtoMessage() {}
func (*TGWParamsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{50}
}
func (m *TGWParamsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TGWParamsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TGWParamsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TGWParamsType.Merge(m, src)
}
func (m *TGWParamsType) XXX_Size() int {
	return m.Size()
}
func (m *TGWParamsType) XXX_DiscardUnknown() {
	xxx_messageInfo_TGWParamsType.DiscardUnknown(m)
}

var xxx_messageInfo_TGWParamsType proto.InternalMessageInfo

type isTGWParamsType_AsnChoice interface {
	isTGWParamsType_AsnChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TGWParamsType_SystemGenerated struct {
	SystemGenerated *schema.Empty `protobuf:"bytes,2,opt,name=system_generated,json=systemGenerated,proto3,oneof" json:"system_generated,omitempty"`
}
type TGWParamsType_UserAssigned struct {
	UserAssigned *TGWAssignedASNType `protobuf:"bytes,3,opt,name=user_assigned,json=userAssigned,proto3,oneof" json:"user_assigned,omitempty"`
}

func (*TGWParamsType_SystemGenerated) isTGWParamsType_AsnChoice() {}
func (*TGWParamsType_UserAssigned) isTGWParamsType_AsnChoice()    {}

func (m *TGWParamsType) GetAsnChoice() isTGWParamsType_AsnChoice {
	if m != nil {
		return m.AsnChoice
	}
	return nil
}

func (m *TGWParamsType) GetSystemGenerated() *schema.Empty {
	if x, ok := m.GetAsnChoice().(*TGWParamsType_SystemGenerated); ok {
		return x.SystemGenerated
	}
	return nil
}

func (m *TGWParamsType) GetUserAssigned() *TGWAssignedASNType {
	if x, ok := m.GetAsnChoice().(*TGWParamsType_UserAssigned); ok {
		return x.UserAssigned
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TGWParamsType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TGWParamsType_SystemGenerated)(nil),
		(*TGWParamsType_UserAssigned)(nil),
	}
}

// Existing TGW Type
//
// x-displayName: "Existing TGW Type"
// Information needed for existing TGW
type ExistingTGWType struct {
	// Existing TGW ID
	//
	// x-displayName: "Existing TGW ID"
	// x-example: "tgw-12345678901234567"
	// Existing TGW ID
	TgwId string `protobuf:"bytes,1,opt,name=tgw_id,json=tgwId,proto3" json:"tgw_id,omitempty"`
	// TGW ASN
	//
	// x-displayName: "Enter TGW ASN"
	// x-example: "64500"
	// TGW ASN.
	TgwAsn uint32 `protobuf:"varint,2,opt,name=tgw_asn,json=tgwAsn,proto3" json:"tgw_asn,omitempty"`
	// F5XC Site ASN
	//
	// x-displayName: "Enter F5XC Site ASN"
	// x-example: "64501"
	// F5XC Site ASN.
	VolterraSiteAsn uint32 `protobuf:"varint,3,opt,name=volterra_site_asn,json=volterraSiteAsn,proto3" json:"volterra_site_asn,omitempty"`
}

func (m *ExistingTGWType) Reset()      { *m = ExistingTGWType{} }
func (*ExistingTGWType) ProtoMessage() {}
func (*ExistingTGWType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{51}
}
func (m *ExistingTGWType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExistingTGWType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExistingTGWType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistingTGWType.Merge(m, src)
}
func (m *ExistingTGWType) XXX_Size() int {
	return m.Size()
}
func (m *ExistingTGWType) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistingTGWType.DiscardUnknown(m)
}

var xxx_messageInfo_ExistingTGWType proto.InternalMessageInfo

func (m *ExistingTGWType) GetTgwId() string {
	if m != nil {
		return m.TgwId
	}
	return ""
}

func (m *ExistingTGWType) GetTgwAsn() uint32 {
	if m != nil {
		return m.TgwAsn
	}
	return 0
}

func (m *ExistingTGWType) GetVolterraSiteAsn() uint32 {
	if m != nil {
		return m.VolterraSiteAsn
	}
	return 0
}

// NetworkSelectType
//
// x-displayName: "Network Select"
// x-required
// Select virtual network (VRF) for this interface.
// There are 2 kinds of VRFs, local VRFs which are local to the site and global VRFs which extend into multiple sites.
// A site can have 2 Local VRFs, Site Local Outside (SLO), which is required for every site and Site Local Inside (SLI) which is optional.
// Global VRFs are configured via Networking > Segments. A site can have multple Network Segments (global VRFs).
type NetworkSelectType struct {
	// Select VRF
	//
	// x-displayName: "Select VRF"
	// Select virtual network (VRF) for this interface.
	// There are 2 kinds of VRFs, local VRFs which are local to the site and global VRFs which extend into multiple sites.
	// A site can have 2 Local VRFs, Site Local Outside (SLO), which is required for every site and Site Local Inside (SLI) which is optional.
	// Global VRFs are configured via Networking > Segments. A site can have multple Network Segments (global VRFs).
	//
	// Types that are valid to be assigned to NetworkChoice:
	//	*NetworkSelectType_SiteLocalNetwork
	//	*NetworkSelectType_SiteLocalInsideNetwork
	//	*NetworkSelectType_SegmentNetwork
	NetworkChoice isNetworkSelectType_NetworkChoice `protobuf_oneof:"network_choice"`
}

func (m *NetworkSelectType) Reset()      { *m = NetworkSelectType{} }
func (*NetworkSelectType) ProtoMessage() {}
func (*NetworkSelectType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{52}
}
func (m *NetworkSelectType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkSelectType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NetworkSelectType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkSelectType.Merge(m, src)
}
func (m *NetworkSelectType) XXX_Size() int {
	return m.Size()
}
func (m *NetworkSelectType) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkSelectType.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkSelectType proto.InternalMessageInfo

type isNetworkSelectType_NetworkChoice interface {
	isNetworkSelectType_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type NetworkSelectType_SiteLocalNetwork struct {
	SiteLocalNetwork *schema.Empty `protobuf:"bytes,2,opt,name=site_local_network,json=siteLocalNetwork,proto3,oneof" json:"site_local_network,omitempty"`
}
type NetworkSelectType_SiteLocalInsideNetwork struct {
	SiteLocalInsideNetwork *schema.Empty `protobuf:"bytes,3,opt,name=site_local_inside_network,json=siteLocalInsideNetwork,proto3,oneof" json:"site_local_inside_network,omitempty"`
}
type NetworkSelectType_SegmentNetwork struct {
	SegmentNetwork *ObjectRefType `protobuf:"bytes,4,opt,name=segment_network,json=segmentNetwork,proto3,oneof" json:"segment_network,omitempty"`
}

func (*NetworkSelectType_SiteLocalNetwork) isNetworkSelectType_NetworkChoice()       {}
func (*NetworkSelectType_SiteLocalInsideNetwork) isNetworkSelectType_NetworkChoice() {}
func (*NetworkSelectType_SegmentNetwork) isNetworkSelectType_NetworkChoice()         {}

func (m *NetworkSelectType) GetNetworkChoice() isNetworkSelectType_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}

func (m *NetworkSelectType) GetSiteLocalNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*NetworkSelectType_SiteLocalNetwork); ok {
		return x.SiteLocalNetwork
	}
	return nil
}

func (m *NetworkSelectType) GetSiteLocalInsideNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*NetworkSelectType_SiteLocalInsideNetwork); ok {
		return x.SiteLocalInsideNetwork
	}
	return nil
}

func (m *NetworkSelectType) GetSegmentNetwork() *ObjectRefType {
	if x, ok := m.GetNetworkChoice().(*NetworkSelectType_SegmentNetwork); ok {
		return x.SegmentNetwork
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NetworkSelectType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NetworkSelectType_SiteLocalNetwork)(nil),
		(*NetworkSelectType_SiteLocalInsideNetwork)(nil),
		(*NetworkSelectType_SegmentNetwork)(nil),
	}
}

// SnatPoolConfiguration
//
// x-displayName: "Snat Pool"
// Snat Pool configuration
type SnatPoolConfiguration struct {
	// Snat Pool Choice
	//
	// x-displayName: "Select SNAT Pool Choice"
	// Snat Pool for the origin server
	//
	// Types that are valid to be assigned to SnatPoolChoice:
	//	*SnatPoolConfiguration_NoSnatPool
	//	*SnatPoolConfiguration_SnatPool
	SnatPoolChoice isSnatPoolConfiguration_SnatPoolChoice `protobuf_oneof:"snat_pool_choice"`
}

func (m *SnatPoolConfiguration) Reset()      { *m = SnatPoolConfiguration{} }
func (*SnatPoolConfiguration) ProtoMessage() {}
func (*SnatPoolConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{53}
}
func (m *SnatPoolConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnatPoolConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SnatPoolConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnatPoolConfiguration.Merge(m, src)
}
func (m *SnatPoolConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SnatPoolConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SnatPoolConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SnatPoolConfiguration proto.InternalMessageInfo

type isSnatPoolConfiguration_SnatPoolChoice interface {
	isSnatPoolConfiguration_SnatPoolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SnatPoolConfiguration_NoSnatPool struct {
	NoSnatPool *schema.Empty `protobuf:"bytes,2,opt,name=no_snat_pool,json=noSnatPool,proto3,oneof" json:"no_snat_pool,omitempty"`
}
type SnatPoolConfiguration_SnatPool struct {
	SnatPool *PrefixStringListType `protobuf:"bytes,3,opt,name=snat_pool,json=snatPool,proto3,oneof" json:"snat_pool,omitempty"`
}

func (*SnatPoolConfiguration_NoSnatPool) isSnatPoolConfiguration_SnatPoolChoice() {}
func (*SnatPoolConfiguration_SnatPool) isSnatPoolConfiguration_SnatPoolChoice()   {}

func (m *SnatPoolConfiguration) GetSnatPoolChoice() isSnatPoolConfiguration_SnatPoolChoice {
	if m != nil {
		return m.SnatPoolChoice
	}
	return nil
}

func (m *SnatPoolConfiguration) GetNoSnatPool() *schema.Empty {
	if x, ok := m.GetSnatPoolChoice().(*SnatPoolConfiguration_NoSnatPool); ok {
		return x.NoSnatPool
	}
	return nil
}

func (m *SnatPoolConfiguration) GetSnatPool() *PrefixStringListType {
	if x, ok := m.GetSnatPoolChoice().(*SnatPoolConfiguration_SnatPool); ok {
		return x.SnatPool
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SnatPoolConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SnatPoolConfiguration_NoSnatPool)(nil),
		(*SnatPoolConfiguration_SnatPool)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.views.SiteNetwork", SiteNetwork_name, SiteNetwork_value)
	golang_proto.RegisterEnum("ves.io.schema.views.SiteNetwork", SiteNetwork_name, SiteNetwork_value)
	proto.RegisterEnum("ves.io.schema.views.SiteNetworkSpecifiedVIP", SiteNetworkSpecifiedVIP_name, SiteNetworkSpecifiedVIP_value)
	golang_proto.RegisterEnum("ves.io.schema.views.SiteNetworkSpecifiedVIP", SiteNetworkSpecifiedVIP_name, SiteNetworkSpecifiedVIP_value)
	proto.RegisterType((*ObjectRefType)(nil), "ves.io.schema.views.ObjectRefType")
	golang_proto.RegisterType((*ObjectRefType)(nil), "ves.io.schema.views.ObjectRefType")
	proto.RegisterType((*LinkRefType)(nil), "ves.io.schema.views.LinkRefType")
	golang_proto.RegisterType((*LinkRefType)(nil), "ves.io.schema.views.LinkRefType")
	proto.RegisterType((*SiteLocator)(nil), "ves.io.schema.views.SiteLocator")
	golang_proto.RegisterType((*SiteLocator)(nil), "ves.io.schema.views.SiteLocator")
	proto.RegisterType((*SiteReferenceListType)(nil), "ves.io.schema.views.SiteReferenceListType")
	golang_proto.RegisterType((*SiteReferenceListType)(nil), "ves.io.schema.views.SiteReferenceListType")
	proto.RegisterType((*SiteRegionLocator)(nil), "ves.io.schema.views.SiteRegionLocator")
	golang_proto.RegisterType((*SiteRegionLocator)(nil), "ves.io.schema.views.SiteRegionLocator")
	proto.RegisterType((*WhereVirtualNetwork)(nil), "ves.io.schema.views.WhereVirtualNetwork")
	golang_proto.RegisterType((*WhereVirtualNetwork)(nil), "ves.io.schema.views.WhereVirtualNetwork")
	proto.RegisterType((*WhereSegment)(nil), "ves.io.schema.views.WhereSegment")
	golang_proto.RegisterType((*WhereSegment)(nil), "ves.io.schema.views.WhereSegment")
	proto.RegisterType((*WhereSite)(nil), "ves.io.schema.views.WhereSite")
	golang_proto.RegisterType((*WhereSite)(nil), "ves.io.schema.views.WhereSite")
	proto.RegisterType((*WhereSiteSegment)(nil), "ves.io.schema.views.WhereSiteSegment")
	golang_proto.RegisterType((*WhereSiteSegment)(nil), "ves.io.schema.views.WhereSiteSegment")
	proto.RegisterType((*WhereCloudEdgeSegment)(nil), "ves.io.schema.views.WhereCloudEdgeSegment")
	golang_proto.RegisterType((*WhereCloudEdgeSegment)(nil), "ves.io.schema.views.WhereCloudEdgeSegment")
	proto.RegisterType((*WhereVirtualSite)(nil), "ves.io.schema.views.WhereVirtualSite")
	golang_proto.RegisterType((*WhereVirtualSite)(nil), "ves.io.schema.views.WhereVirtualSite")
	proto.RegisterType((*WhereVirtualSiteSpecifiedVIP)(nil), "ves.io.schema.views.WhereVirtualSiteSpecifiedVIP")
	golang_proto.RegisterType((*WhereVirtualSiteSpecifiedVIP)(nil), "ves.io.schema.views.WhereVirtualSiteSpecifiedVIP")
	proto.RegisterType((*WhereVirtualSiteSegment)(nil), "ves.io.schema.views.WhereVirtualSiteSegment")
	golang_proto.RegisterType((*WhereVirtualSiteSegment)(nil), "ves.io.schema.views.WhereVirtualSiteSegment")
	proto.RegisterType((*WhereVK8SService)(nil), "ves.io.schema.views.WhereVK8SService")
	golang_proto.RegisterType((*WhereVK8SService)(nil), "ves.io.schema.views.WhereVK8SService")
	proto.RegisterType((*WhereType)(nil), "ves.io.schema.views.WhereType")
	golang_proto.RegisterType((*WhereType)(nil), "ves.io.schema.views.WhereType")
	proto.RegisterType((*WhereTypeSiteVsite)(nil), "ves.io.schema.views.WhereTypeSiteVsite")
	golang_proto.RegisterType((*WhereTypeSiteVsite)(nil), "ves.io.schema.views.WhereTypeSiteVsite")
	proto.RegisterType((*AdvertisePublic)(nil), "ves.io.schema.views.AdvertisePublic")
	golang_proto.RegisterType((*AdvertisePublic)(nil), "ves.io.schema.views.AdvertisePublic")
	proto.RegisterType((*AdvertiseCustom)(nil), "ves.io.schema.views.AdvertiseCustom")
	golang_proto.RegisterType((*AdvertiseCustom)(nil), "ves.io.schema.views.AdvertiseCustom")
	proto.RegisterType((*AdvertiseSiteVsite)(nil), "ves.io.schema.views.AdvertiseSiteVsite")
	golang_proto.RegisterType((*AdvertiseSiteVsite)(nil), "ves.io.schema.views.AdvertiseSiteVsite")
	proto.RegisterType((*CustomCiphers)(nil), "ves.io.schema.views.CustomCiphers")
	golang_proto.RegisterType((*CustomCiphers)(nil), "ves.io.schema.views.CustomCiphers")
	proto.RegisterType((*TlsConfig)(nil), "ves.io.schema.views.TlsConfig")
	golang_proto.RegisterType((*TlsConfig)(nil), "ves.io.schema.views.TlsConfig")
	proto.RegisterType((*DownstreamTlsParamsType)(nil), "ves.io.schema.views.DownstreamTlsParamsType")
	golang_proto.RegisterType((*DownstreamTlsParamsType)(nil), "ves.io.schema.views.DownstreamTlsParamsType")
	proto.RegisterType((*DownstreamTLSCertsParams)(nil), "ves.io.schema.views.DownstreamTLSCertsParams")
	golang_proto.RegisterType((*DownstreamTLSCertsParams)(nil), "ves.io.schema.views.DownstreamTLSCertsParams")
	proto.RegisterType((*XfccHeaderKeys)(nil), "ves.io.schema.views.XfccHeaderKeys")
	golang_proto.RegisterType((*XfccHeaderKeys)(nil), "ves.io.schema.views.XfccHeaderKeys")
	proto.RegisterType((*DownstreamTlsValidationContext)(nil), "ves.io.schema.views.DownstreamTlsValidationContext")
	golang_proto.RegisterType((*DownstreamTlsValidationContext)(nil), "ves.io.schema.views.DownstreamTlsValidationContext")
	proto.RegisterType((*OriginPoolWithWeight)(nil), "ves.io.schema.views.OriginPoolWithWeight")
	golang_proto.RegisterType((*OriginPoolWithWeight)(nil), "ves.io.schema.views.OriginPoolWithWeight")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.OriginPoolWithWeight.EndpointSubsetsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.OriginPoolWithWeight.EndpointSubsetsEntry")
	proto.RegisterType((*OriginPoolListType)(nil), "ves.io.schema.views.OriginPoolListType")
	golang_proto.RegisterType((*OriginPoolListType)(nil), "ves.io.schema.views.OriginPoolListType")
	proto.RegisterType((*PrefixStringListType)(nil), "ves.io.schema.views.PrefixStringListType")
	golang_proto.RegisterType((*PrefixStringListType)(nil), "ves.io.schema.views.PrefixStringListType")
	proto.RegisterType((*GlobalConnectorType)(nil), "ves.io.schema.views.GlobalConnectorType")
	golang_proto.RegisterType((*GlobalConnectorType)(nil), "ves.io.schema.views.GlobalConnectorType")
	proto.RegisterType((*SegmentRefList)(nil), "ves.io.schema.views.SegmentRefList")
	golang_proto.RegisterType((*SegmentRefList)(nil), "ves.io.schema.views.SegmentRefList")
	proto.RegisterType((*VolterraSoftwareType)(nil), "ves.io.schema.views.VolterraSoftwareType")
	golang_proto.RegisterType((*VolterraSoftwareType)(nil), "ves.io.schema.views.VolterraSoftwareType")
	proto.RegisterType((*OperatingSystemType)(nil), "ves.io.schema.views.OperatingSystemType")
	golang_proto.RegisterType((*OperatingSystemType)(nil), "ves.io.schema.views.OperatingSystemType")
	proto.RegisterType((*KubernetesUpgradeDrain)(nil), "ves.io.schema.views.KubernetesUpgradeDrain")
	golang_proto.RegisterType((*KubernetesUpgradeDrain)(nil), "ves.io.schema.views.KubernetesUpgradeDrain")
	proto.RegisterType((*RegionalEdgeSelection)(nil), "ves.io.schema.views.RegionalEdgeSelection")
	golang_proto.RegisterType((*RegionalEdgeSelection)(nil), "ves.io.schema.views.RegionalEdgeSelection")
	proto.RegisterType((*AdminUserCredentialsType)(nil), "ves.io.schema.views.AdminUserCredentialsType")
	golang_proto.RegisterType((*AdminUserCredentialsType)(nil), "ves.io.schema.views.AdminUserCredentialsType")
	proto.RegisterType((*ProactiveMonitoringChoice)(nil), "ves.io.schema.views.ProactiveMonitoringChoice")
	golang_proto.RegisterType((*ProactiveMonitoringChoice)(nil), "ves.io.schema.views.ProactiveMonitoringChoice")
	proto.RegisterType((*SpecificRE)(nil), "ves.io.schema.views.SpecificRE")
	golang_proto.RegisterType((*SpecificRE)(nil), "ves.io.schema.views.SpecificRE")
	proto.RegisterType((*KubernetesUpgradeDrainConfig)(nil), "ves.io.schema.views.KubernetesUpgradeDrainConfig")
	golang_proto.RegisterType((*KubernetesUpgradeDrainConfig)(nil), "ves.io.schema.views.KubernetesUpgradeDrainConfig")
	proto.RegisterType((*PerformanceEnhancementModeType)(nil), "ves.io.schema.views.PerformanceEnhancementModeType")
	golang_proto.RegisterType((*PerformanceEnhancementModeType)(nil), "ves.io.schema.views.PerformanceEnhancementModeType")
	proto.RegisterType((*AcceleratedNetworkingType)(nil), "ves.io.schema.views.AcceleratedNetworkingType")
	golang_proto.RegisterType((*AcceleratedNetworkingType)(nil), "ves.io.schema.views.AcceleratedNetworkingType")
	proto.RegisterType((*L3PerformanceEnhancementType)(nil), "ves.io.schema.views.L3PerformanceEnhancementType")
	golang_proto.RegisterType((*L3PerformanceEnhancementType)(nil), "ves.io.schema.views.L3PerformanceEnhancementType")
	proto.RegisterType((*InternetVIPInfo)(nil), "ves.io.schema.views.InternetVIPInfo")
	golang_proto.RegisterType((*InternetVIPInfo)(nil), "ves.io.schema.views.InternetVIPInfo")
	proto.RegisterType((*InternetVIPStatus)(nil), "ves.io.schema.views.InternetVIPStatus")
	golang_proto.RegisterType((*InternetVIPStatus)(nil), "ves.io.schema.views.InternetVIPStatus")
	proto.RegisterType((*InternetVIPTargetGroupStatusType)(nil), "ves.io.schema.views.InternetVIPTargetGroupStatusType")
	golang_proto.RegisterType((*InternetVIPTargetGroupStatusType)(nil), "ves.io.schema.views.InternetVIPTargetGroupStatusType")
	proto.RegisterType((*InternetVIPListenerStatusType)(nil), "ves.io.schema.views.InternetVIPListenerStatusType")
	golang_proto.RegisterType((*InternetVIPListenerStatusType)(nil), "ves.io.schema.views.InternetVIPListenerStatusType")
	proto.RegisterType((*MasterNode)(nil), "ves.io.schema.views.MasterNode")
	golang_proto.RegisterType((*MasterNode)(nil), "ves.io.schema.views.MasterNode")
	proto.RegisterType((*ApiOperation)(nil), "ves.io.schema.views.ApiOperation")
	golang_proto.RegisterType((*ApiOperation)(nil), "ves.io.schema.views.ApiOperation")
	proto.RegisterType((*ApiEndpointWithSchema)(nil), "ves.io.schema.views.ApiEndpointWithSchema")
	golang_proto.RegisterType((*ApiEndpointWithSchema)(nil), "ves.io.schema.views.ApiEndpointWithSchema")
	proto.RegisterType((*CustomDNS)(nil), "ves.io.schema.views.CustomDNS")
	golang_proto.RegisterType((*CustomDNS)(nil), "ves.io.schema.views.CustomDNS")
	proto.RegisterType((*TGWAssignedASNType)(nil), "ves.io.schema.views.TGWAssignedASNType")
	golang_proto.RegisterType((*TGWAssignedASNType)(nil), "ves.io.schema.views.TGWAssignedASNType")
	proto.RegisterType((*TGWParamsType)(nil), "ves.io.schema.views.TGWParamsType")
	golang_proto.RegisterType((*TGWParamsType)(nil), "ves.io.schema.views.TGWParamsType")
	proto.RegisterType((*ExistingTGWType)(nil), "ves.io.schema.views.ExistingTGWType")
	golang_proto.RegisterType((*ExistingTGWType)(nil), "ves.io.schema.views.ExistingTGWType")
	proto.RegisterType((*NetworkSelectType)(nil), "ves.io.schema.views.NetworkSelectType")
	golang_proto.RegisterType((*NetworkSelectType)(nil), "ves.io.schema.views.NetworkSelectType")
	proto.RegisterType((*SnatPoolConfiguration)(nil), "ves.io.schema.views.SnatPoolConfiguration")
	golang_proto.RegisterType((*SnatPoolConfiguration)(nil), "ves.io.schema.views.SnatPoolConfiguration")
}

func init() { proto.RegisterFile("ves.io/schema/views/types.proto", fileDescriptor_e96f5c708a09275e) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/types.proto", fileDescriptor_e96f5c708a09275e)
}

var fileDescriptor_e96f5c708a09275e = []byte{
	// 5894 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x7c, 0x5d, 0x6c, 0x1b, 0xd9,
	0x75, 0xb0, 0x2e, 0xff, 0x79, 0xf4, 0x43, 0xea, 0x4a, 0xb2, 0x69, 0xd9, 0x96, 0x69, 0xae, 0x77,
	0x2d, 0x2b, 0xb4, 0x64, 0x51, 0x96, 0xec, 0x55, 0xf2, 0x39, 0x16, 0x65, 0xd9, 0x92, 0xd6, 0x3f,
	0xca, 0x50, 0x2b, 0xe7, 0xfb, 0x92, 0x2f, 0xf3, 0x8d, 0xc8, 0x2b, 0x6a, 0x62, 0x72, 0x86, 0x98,
	0x19, 0x4a, 0x72, 0x12, 0x01, 0xfa, 0x9a, 0x34, 0x0d, 0xb6, 0x40, 0x1b, 0xf8, 0xa1, 0x45, 0x82,
	0x00, 0x0d, 0xd2, 0x87, 0xb6, 0x02, 0x52, 0x14, 0x41, 0xdb, 0x87, 0x52, 0x6d, 0xdd, 0x45, 0x8a,
	0x2c, 0x16, 0x28, 0x60, 0x34, 0x48, 0xb1, 0x08, 0x02, 0x34, 0xd1, 0x16, 0x49, 0x9a, 0x97, 0x2e,
	0xfc, 0x50, 0x6c, 0x8b, 0xa2, 0x5b, 0xdc, 0x9f, 0x19, 0x0e, 0xc9, 0x11, 0x25, 0x25, 0xdb, 0xdd,
	0xbe, 0x58, 0x9c, 0x99, 0xf3, 0x7f, 0xce, 0x3d, 0xf7, 0xdc, 0x73, 0xef, 0x35, 0x9c, 0xdb, 0x20,
	0xe6, 0xa8, 0xaa, 0x8f, 0x99, 0xf9, 0x75, 0x52, 0x56, 0xc6, 0x36, 0x54, 0xb2, 0x69, 0x8e, 0x59,
	0x8f, 0x2b, 0xc4, 0x1c, 0xad, 0x18, 0xba, 0xa5, 0xe3, 0x3e, 0x0e, 0x30, 0xca, 0x01, 0x46, 0x19,
	0xc0, 0xe0, 0xe5, 0xa2, 0x6a, 0xad, 0x57, 0x57, 0x47, 0xf3, 0x7a, 0x79, 0xac, 0xa8, 0x17, 0xf5,
	0x31, 0x06, 0xbb, 0x5a, 0x5d, 0x63, 0x4f, 0xec, 0x81, 0xfd, 0xe2, 0x34, 0x06, 0x4f, 0x37, 0x32,
	0xd1, 0x2b, 0x96, 0xaa, 0x6b, 0x82, 0xc1, 0xe0, 0xa9, 0xc6, 0x8f, 0x2e, 0xde, 0x83, 0x67, 0x9a,
	0x84, 0x53, 0x4a, 0x6a, 0x41, 0xb1, 0x88, 0xf8, 0x9a, 0x6c, 0x15, 0x5d, 0x6e, 0x20, 0x9d, 0x7a,
	0x82, 0xa0, 0xfb, 0xc1, 0xea, 0x67, 0x49, 0xde, 0x92, 0xc8, 0xda, 0xf2, 0xe3, 0x0a, 0xc1, 0xc3,
	0x10, 0xb2, 0x88, 0xa6, 0x68, 0x56, 0x02, 0x25, 0xd1, 0x70, 0x34, 0x1b, 0x7f, 0xb6, 0x8d, 0xde,
	0xad, 0xa1, 0x8e, 0xbf, 0xf8, 0xe7, 0xa7, 0xfe, 0x80, 0xe1, 0x1b, 0xbe, 0x29, 0x89, 0xef, 0x78,
	0x14, 0xa2, 0x9a, 0x52, 0x26, 0x66, 0x45, 0xc9, 0x93, 0x84, 0xef, 0x00, 0xe0, 0x3a, 0x08, 0xbe,
	0x08, 0x01, 0xfa, 0x90, 0xf0, 0x33, 0xd0, 0x3e, 0x17, 0x68, 0xd8, 0x08, 0x26, 0xd1, 0xf0, 0x0e,
	0x92, 0x18, 0x40, 0x4a, 0x86, 0xce, 0xbb, 0xaa, 0xf6, 0xc8, 0x96, 0xe8, 0x22, 0x04, 0xd6, 0x0d,
	0xb2, 0x26, 0xe4, 0xe9, 0xa3, 0x08, 0x41, 0xc3, 0x9f, 0xd8, 0x09, 0x08, 0x2e, 0x71, 0x24, 0x31,
	0x00, 0x87, 0x81, 0xaf, 0x09, 0xd0, 0xe7, 0x02, 0x64, 0x0c, 0xbe, 0x8f, 0xa0, 0x33, 0xa7, 0x5a,
	0xe4, 0xae, 0x9e, 0x57, 0x2c, 0xdd, 0xc0, 0x0b, 0x10, 0x30, 0x55, 0x8b, 0x30, 0x0e, 0x9d, 0x99,
	0xd4, 0xa8, 0x87, 0x43, 0x47, 0x1b, 0xac, 0x94, 0x8d, 0xed, 0x6e, 0x33, 0x94, 0x9d, 0x3d, 0x84,
	0xde, 0xd8, 0x43, 0x68, 0xbe, 0x43, 0x62, 0xcf, 0xf8, 0x93, 0xd0, 0xb5, 0xa1, 0x1a, 0x56, 0x55,
	0x29, 0xc9, 0x8c, 0xa4, 0xef, 0x38, 0x24, 0x1b, 0x50, 0xe7, 0x3b, 0xa4, 0x4e, 0xf1, 0x4c, 0x65,
	0xcd, 0x9e, 0x82, 0x50, 0x7e, 0x5d, 0x57, 0xf3, 0x04, 0xc7, 0x9e, 0xd6, 0x10, 0x7a, 0x56, 0x43,
	0xfe, 0xfd, 0x1a, 0xf2, 0x8f, 0xa7, 0x33, 0x8b, 0x81, 0x88, 0x3f, 0x1e, 0x48, 0xad, 0xc1, 0x00,
	0x05, 0x94, 0xc8, 0x1a, 0x31, 0x88, 0x96, 0x27, 0x77, 0x55, 0xd3, 0x62, 0x06, 0xbc, 0x07, 0x01,
	0x83, 0xac, 0x99, 0x09, 0x94, 0xf4, 0x1f, 0x51, 0x96, 0x01, 0x97, 0x7a, 0xcc, 0x8c, 0x4f, 0x90,
	0x2f, 0x7e, 0x53, 0x62, 0x64, 0x52, 0x7f, 0xe5, 0x83, 0x5e, 0xce, 0xa8, 0xa8, 0xea, 0x5a, 0xb3,
	0x0d, 0x7d, 0xbf, 0xba, 0x0d, 0x15, 0x88, 0xe5, 0x4b, 0x7a, 0xb5, 0x20, 0x1b, 0x44, 0x36, 0x18,
	0x13, 0x16, 0x33, 0x47, 0xa3, 0xda, 0xb7, 0xbb, 0xdd, 0x65, 0x63, 0x53, 0xd4, 0x1d, 0x4e, 0xb9,
	0x9b, 0xbd, 0x93, 0x84, 0xd0, 0x2d, 0x6e, 0x0a, 0xbc, 0x6f, 0x6e, 0x3a, 0xed, 0xb8, 0xa9, 0xf7,
	0x69, 0x0d, 0xf9, 0x9e, 0xd5, 0x10, 0xda, 0xaf, 0xa1, 0x60, 0x26, 0x3d, 0x91, 0xbe, 0xba, 0x18,
	0x88, 0xa0, 0xb8, 0x2f, 0xf5, 0xc5, 0x00, 0xf4, 0x3d, 0x5c, 0x27, 0x06, 0x59, 0xe1, 0x78, 0xf7,
	0x89, 0xb5, 0xa9, 0x1b, 0x8f, 0x70, 0x1e, 0x62, 0x36, 0x65, 0x8d, 0xbf, 0x3a, 0x46, 0x44, 0x9e,
	0xd8, 0xdd, 0x6e, 0xc6, 0xa6, 0xaa, 0x4b, 0x3d, 0x1b, 0x8d, 0x4c, 0xae, 0x41, 0x67, 0x81, 0xac,
	0x29, 0xd5, 0x92, 0x25, 0x6f, 0xa8, 0x15, 0x61, 0xd8, 0xfe, 0x26, 0x06, 0x73, 0xe5, 0x8a, 0xf5,
	0x78, 0xbe, 0x43, 0x02, 0x01, 0xba, 0xa2, 0x56, 0xf0, 0x14, 0x74, 0x99, 0x15, 0x92, 0x57, 0xd7,
	0xd4, 0x3c, 0xc3, 0x0c, 0xb0, 0x51, 0x46, 0x95, 0x74, 0x0f, 0xf9, 0x2d, 0x6a, 0xec, 0x4e, 0x1b,
	0x90, 0xe2, 0x7d, 0x0c, 0x7a, 0x1c, 0x86, 0x53, 0x0c, 0xb3, 0xb3, 0x0d, 0x4f, 0x24, 0x75, 0xd9,
	0x3c, 0xa7, 0x38, 0x76, 0xac, 0xce, 0x95, 0xa3, 0x77, 0x31, 0xc6, 0xd8, 0xcd, 0x38, 0x68, 0xf8,
	0x77, 0x10, 0x9a, 0x47, 0x52, 0xb7, 0xc3, 0x99, 0x62, 0x4f, 0x47, 0x9f, 0xdf, 0x08, 0x8d, 0xa7,
	0x33, 0xe9, 0xf1, 0x2b, 0xd9, 0xb3, 0x00, 0x1b, 0x6a, 0x45, 0x76, 0x0d, 0x21, 0xff, 0xb3, 0x1a,
	0xf2, 0xd1, 0x21, 0x34, 0x91, 0xbe, 0x9a, 0x2d, 0x40, 0x37, 0x27, 0x6f, 0x43, 0xe4, 0x9e, 0xd6,
	0x50, 0xe7, 0xb3, 0x1a, 0x02, 0xea, 0xbd, 0xf1, 0xf1, 0xf4, 0x78, 0xe6, 0xc9, 0x1e, 0xc2, 0x6b,
	0x93, 0x5b, 0xf9, 0xcb, 0x6a, 0x65, 0x63, 0xea, 0xb2, 0x69, 0x29, 0x5a, 0x41, 0x31, 0x0a, 0xaf,
	0xfd, 0x3b, 0x1a, 0x2e, 0x90, 0xb2, 0x3e, 0x9e, 0xb6, 0x88, 0x69, 0xa5, 0xf3, 0x86, 0x95, 0x36,
	0x2d, 0xa5, 0xa8, 0x6a, 0xc5, 0xb4, 0xa9, 0xaf, 0x59, 0xab, 0x8a, 0xf6, 0x48, 0x2e, 0x93, 0x7c,
	0xba, 0x62, 0xe8, 0x85, 0xc5, 0x40, 0xc4, 0x17, 0xf7, 0x2f, 0x06, 0x22, 0x10, 0xef, 0x4c, 0xfd,
	0x03, 0x82, 0x2e, 0x16, 0x05, 0x39, 0x52, 0x2c, 0x13, 0xcd, 0xc2, 0xab, 0x10, 0x36, 0xf9, 0xcf,
	0x63, 0xb8, 0xfd, 0xc2, 0xee, 0xb6, 0x8d, 0xc5, 0x06, 0xeb, 0x1e, 0xea, 0x89, 0xa0, 0x61, 0x74,
	0x05, 0x4d, 0x87, 0xf2, 0xba, 0xb6, 0xa6, 0x16, 0xe9, 0xc8, 0x92, 0x6c, 0x10, 0x3c, 0x0c, 0x11,
	0xb5, 0xb2, 0x71, 0xd5, 0xe5, 0xc0, 0xee, 0x06, 0xe7, 0x49, 0x61, 0xfa, 0x99, 0x1a, 0xfe, 0x32,
	0x83, 0xe4, 0x16, 0x0f, 0x1e, 0x64, 0x71, 0x06, 0xde, 0x64, 0xe9, 0xd4, 0x77, 0x7c, 0x10, 0xe5,
	0x8a, 0xd1, 0xc1, 0x7c, 0x13, 0xc2, 0xee, 0x60, 0xee, 0xc9, 0x24, 0x3d, 0xb5, 0xa2, 0xb0, 0x22,
	0x44, 0xb3, 0x01, 0xca, 0x44, 0xb2, 0xd1, 0x68, 0xfa, 0x3a, 0x66, 0x66, 0xb1, 0xd3, 0xd7, 0x9b,
	0x35, 0xe4, 0xcb, 0x3b, 0xf9, 0x45, 0x64, 0x97, 0xf3, 0xe0, 0x13, 0x71, 0xef, 0x15, 0xbd, 0x92,
	0x4f, 0xad, 0xe0, 0x22, 0x04, 0xa8, 0x5e, 0xc2, 0x42, 0xb9, 0x5f, 0x6c, 0x1f, 0xd9, 0xc3, 0x36,
	0xbd, 0xd7, 0xfe, 0xd2, 0x2b, 0x56, 0x5c, 0x86, 0x63, 0x0c, 0xa6, 0x23, 0xcf, 0x6f, 0x04, 0xa9,
	0xd5, 0x26, 0x52, 0xdf, 0xf7, 0x41, 0xdc, 0x31, 0xda, 0x07, 0x19, 0x11, 0x77, 0x7e, 0xe5, 0xbc,
	0x2d, 0xec, 0x7a, 0xd6, 0x65, 0xd7, 0xee, 0x0f, 0xd1, 0xa6, 0xf0, 0xfc, 0x46, 0x98, 0xd9, 0x34,
	0x7d, 0x35, 0xf5, 0x33, 0x1f, 0x0c, 0x30, 0xab, 0xce, 0xd2, 0xec, 0x3f, 0x57, 0x28, 0x7e, 0xa0,
	0xa6, 0x5d, 0x01, 0xe0, 0x33, 0x11, 0x29, 0x14, 0x8f, 0x63, 0x60, 0xaf, 0x29, 0x4c, 0x8a, 0xe6,
	0x6d, 0x15, 0xfe, 0x47, 0x5a, 0xfa, 0x4f, 0x91, 0x88, 0xdf, 0x95, 0xfa, 0x5c, 0x88, 0xa7, 0x8f,
	0x3d, 0xf6, 0xeb, 0xa3, 0xfe, 0xd3, 0xbf, 0x74, 0x21, 0x35, 0xd0, 0x34, 0x43, 0xf3, 0x2c, 0xd0,
	0x30, 0x4b, 0x4f, 0x87, 0x9e, 0xdf, 0xa0, 0x95, 0x13, 0xcd, 0x55, 0x67, 0x9a, 0xc5, 0xce, 0xf1,
	0x29, 0x84, 0x14, 0x56, 0x16, 0x96, 0xf0, 0xed, 0x66, 0x15, 0xd2, 0x87, 0xa9, 0xe0, 0x46, 0xff,
	0x80, 0xd4, 0x39, 0x2c, 0x22, 0xee, 0x35, 0x44, 0xc4, 0xcb, 0xc7, 0x88, 0x88, 0xa6, 0x74, 0xcf,
	0xc8, 0xa4, 0xfe, 0xc5, 0x07, 0x27, 0x5b, 0x8c, 0xf6, 0x01, 0x8e, 0xab, 0x0f, 0xd5, 0x96, 0x1f,
	0xca, 0xe8, 0xfa, 0x85, 0x33, 0xba, 0x5e, 0xb9, 0x9e, 0xcb, 0x11, 0x63, 0x83, 0x56, 0x28, 0x0f,
	0x8e, 0xbd, 0x6a, 0x71, 0xcf, 0x8b, 0x46, 0x6b, 0xdd, 0xfd, 0x99, 0xf7, 0xd5, 0xae, 0x46, 0x73,
	0x69, 0x3c, 0x1d, 0x78, 0x7e, 0x03, 0x4d, 0x1c, 0xbe, 0x8e, 0x79, 0x8e, 0x45, 0xfd, 0xc0, 0x16,
	0x2f, 0x57, 0x1b, 0xb4, 0x1c, 0xf2, 0x14, 0xc6, 0x99, 0x38, 0x1d, 0x55, 0x16, 0x3d, 0x55, 0x79,
	0xf1, 0x60, 0x6c, 0x57, 0x28, 0x37, 0x89, 0x8d, 0x7f, 0x0f, 0xc1, 0x80, 0x9b, 0x98, 0xbc, 0xa9,
	0x5a, 0xeb, 0xac, 0x2e, 0x8a, 0x33, 0xaa, 0xe3, 0x47, 0xa2, 0xea, 0x4e, 0x0b, 0xd9, 0x6b, 0xbb,
	0x7b, 0x68, 0x02, 0xa2, 0x05, 0xcd, 0x94, 0x2b, 0x86, 0xbe, 0xf5, 0x18, 0xfa, 0x45, 0x9e, 0x90,
	0x4b, 0xba, 0x52, 0x58, 0x55, 0x4a, 0x8a, 0x96, 0x27, 0x06, 0xc4, 0x3f, 0x67, 0x69, 0x8a, 0xac,
	0x54, 0x2a, 0x25, 0x35, 0xaf, 0xd0, 0x65, 0xfb, 0x7c, 0x87, 0x84, 0x5d, 0xa2, 0x3d, 0x54, 0xad,
	0x75, 0x5a, 0xab, 0x51, 0x6d, 0x1f, 0x5d, 0x37, 0x65, 0x93, 0x47, 0x86, 0x28, 0xea, 0xdb, 0x69,
	0x5b, 0x0f, 0x23, 0xa6, 0xed, 0xa3, 0xeb, 0xa6, 0x1d, 0x55, 0xb9, 0xd6, 0x45, 0x48, 0x94, 0x91,
	0x1b, 0x3e, 0x54, 0x4d, 0x91, 0x00, 0xe7, 0x3b, 0x5a, 0x16, 0x1d, 0x45, 0xe8, 0x62, 0x96, 0xb3,
	0x53, 0x43, 0xe7, 0x61, 0x02, 0xba, 0x52, 0x4a, 0xf6, 0xf4, 0xee, 0x1e, 0x3a, 0x39, 0xd2, 0xe5,
	0x1e, 0x4f, 0x23, 0xe1, 0x35, 0x52, 0x30, 0x94, 0x72, 0x85, 0x2d, 0x36, 0x5c, 0xe9, 0x67, 0x1b,
	0xfa, 0x1b, 0x5c, 0x65, 0x33, 0xec, 0x62, 0x0c, 0xd3, 0x47, 0xf3, 0xd4, 0xd1, 0xf8, 0xba, 0x1d,
	0x61, 0xb3, 0xff, 0x4d, 0x04, 0xb8, 0x3e, 0xe5, 0x3b, 0xdc, 0x7b, 0x18, 0xf7, 0x91, 0x83, 0xb9,
	0x37, 0x97, 0x27, 0xd9, 0xb1, 0xdd, 0x3d, 0xf4, 0x91, 0x11, 0x7f, 0xde, 0xb0, 0x46, 0xc2, 0x22,
	0xa1, 0x8c, 0x04, 0x68, 0x12, 0x39, 0x58, 0x9e, 0x78, 0xbe, 0xb9, 0xc6, 0xd1, 0xea, 0xb9, 0xb8,
	0x9b, 0x49, 0x70, 0xbe, 0x8d, 0xc1, 0x7f, 0x79, 0xc6, 0x4e, 0x5e, 0xfe, 0x6d, 0x04, 0x7d, 0x4a,
	0x61, 0x83, 0x18, 0x96, 0x6a, 0x12, 0x59, 0xd7, 0xe4, 0x4a, 0x75, 0xb5, 0xa4, 0xe6, 0x13, 0xbd,
	0x8c, 0xf9, 0x05, 0x4f, 0xe6, 0x33, 0x36, 0xfc, 0x12, 0x83, 0xfd, 0x55, 0x46, 0x46, 0xaf, 0xc3,
	0xfb, 0x81, 0xc6, 0xa9, 0xe1, 0x9b, 0x10, 0xaf, 0x9a, 0x44, 0xb6, 0xd7, 0x9f, 0x15, 0xdd, 0xb0,
	0x12, 0xa1, 0xb6, 0xab, 0xcf, 0x9e, 0xaa, 0x49, 0x6e, 0x71, 0xf0, 0x25, 0xdd, 0xb0, 0xf0, 0x45,
	0x08, 0x30, 0xac, 0x70, 0x12, 0x0d, 0x77, 0x67, 0x7b, 0xed, 0xf9, 0x20, 0x32, 0x12, 0x4a, 0xbc,
	0xf7, 0x9e, 0x7f, 0x98, 0xae, 0x39, 0x19, 0x00, 0x5e, 0x84, 0x4e, 0xfa, 0x57, 0x36, 0x14, 0xad,
	0x48, 0xcc, 0x44, 0x8c, 0x4d, 0x0f, 0x17, 0x1b, 0x9b, 0x55, 0x41, 0xc3, 0xff, 0x2c, 0x70, 0xd3,
	0xe9, 0x46, 0x89, 0x57, 0x6f, 0x05, 0x28, 0x15, 0xa0, 0xd8, 0x12, 0x43, 0x9e, 0xfe, 0x52, 0xe4,
	0xf9, 0x0d, 0xff, 0xd5, 0xf4, 0xe4, 0x9b, 0x35, 0xf4, 0x6f, 0x61, 0xf8, 0x73, 0x3f, 0x04, 0x68,
	0x2a, 0x1c, 0xf9, 0xb6, 0x1f, 0x76, 0xfd, 0xd0, 0xc5, 0x13, 0x62, 0x26, 0x40, 0x03, 0x0f, 0xce,
	0x34, 0x26, 0xba, 0x4c, 0x97, 0x08, 0xe4, 0x24, 0xfb, 0x3a, 0x79, 0x40, 0xe6, 0xca, 0x9c, 0x71,
	0x83, 0x25, 0x87, 0x9d, 0xe4, 0x94, 0x5c, 0x59, 0x58, 0xba, 0x04, 0x97, 0xa0, 0xd7, 0x9d, 0x4f,
	0x46, 0x19, 0xe5, 0xfe, 0x8d, 0x57, 0xae, 0x9b, 0x49, 0x31, 0xa2, 0x93, 0xba, 0xc6, 0x39, 0x64,
	0xe0, 0x54, 0x03, 0x68, 0x83, 0x30, 0x03, 0xcd, 0x28, 0x2b, 0x0c, 0x27, 0xd5, 0x92, 0x62, 0x32,
	0x31, 0x5b, 0x1e, 0x01, 0x0c, 0xe7, 0x1a, 0x33, 0x46, 0x26, 0x26, 0x02, 0xd4, 0x61, 0xfc, 0x11,
	0xaf, 0x91, 0x96, 0x19, 0x70, 0x81, 0xb1, 0x41, 0x95, 0xa4, 0x03, 0x02, 0xb0, 0x33, 0x12, 0x32,
	0x61, 0x01, 0x01, 0x63, 0xde, 0xa9, 0x22, 0x73, 0xd2, 0x45, 0xa2, 0xc1, 0x98, 0x63, 0x9e, 0xd1,
	0x9d, 0x49, 0x2c, 0x68, 0x16, 0x31, 0x34, 0x62, 0xb5, 0x98, 0xf1, 0x47, 0x08, 0x80, 0x62, 0x8e,
	0x31, 0xb5, 0x33, 0x7f, 0x87, 0x20, 0x4a, 0x39, 0x31, 0x73, 0xc2, 0x29, 0x37, 0xf3, 0x06, 0xb3,
	0x41, 0xca, 0xd3, 0x67, 0x8d, 0x30, 0xad, 0x0e, 0x6a, 0xe3, 0x08, 0xe8, 0x75, 0x6b, 0xc8, 0xa1,
	0xcf, 0x7b, 0x29, 0xdf, 0x88, 0x75, 0xd6, 0x43, 0xdd, 0x51, 0xfe, 0x47, 0x56, 0x2b, 0xf0, 0xbb,
	0x3e, 0x88, 0x09, 0x77, 0x8d, 0x09, 0x9b, 0x8d, 0x7c, 0xd1, 0x07, 0x3b, 0x3e, 0xc0, 0xdc, 0x79,
	0xa3, 0x76, 0xf1, 0xeb, 0x4b, 0x22, 0x18, 0x6c, 0x34, 0x77, 0xc3, 0xb7, 0x17, 0xe0, 0xac, 0xb7,
	0xca, 0x6e, 0xa0, 0xf3, 0x70, 0xae, 0x29, 0x6a, 0x46, 0x9b, 0x9e, 0x61, 0x08, 0xce, 0x78, 0x6a,
	0x25, 0xfe, 0x42, 0x2f, 0xc4, 0x9a, 0x5f, 0x9d, 0x80, 0x7e, 0x4f, 0xd0, 0x33, 0x30, 0xd8, 0x1a,
	0x5e, 0xce, 0xd7, 0xb3, 0xde, 0xa1, 0x10, 0xe2, 0x7f, 0x61, 0x0e, 0x3a, 0xef, 0xaa, 0xa6, 0x45,
	0xb4, 0x24, 0xcd, 0x21, 0x23, 0x53, 0x70, 0x15, 0x4e, 0xb7, 0x66, 0xa2, 0x4c, 0x58, 0x24, 0x1a,
	0x08, 0xf1, 0x24, 0x03, 0xdd, 0x0d, 0x39, 0x24, 0x3b, 0xe6, 0x54, 0x4a, 0x2f, 0x8a, 0x4a, 0x29,
	0xb0, 0x5f, 0x43, 0xa7, 0x58, 0x9b, 0x65, 0x2a, 0x3d, 0x91, 0x7e, 0x39, 0xcd, 0xfa, 0x52, 0xe9,
	0xf1, 0xab, 0xe9, 0xf1, 0x89, 0xf4, 0xf8, 0xb5, 0xec, 0x79, 0x81, 0x2f, 0xb0, 0xf0, 0xd3, 0x1a,
	0x0a, 0x3d, 0xab, 0xa1, 0xe0, 0x7e, 0x0d, 0x85, 0xa6, 0xd2, 0xd7, 0xd2, 0xe3, 0x93, 0x8b, 0x81,
	0x48, 0x20, 0x1e, 0x5c, 0x0c, 0x44, 0x22, 0xf1, 0xe8, 0x62, 0x20, 0x12, 0x8c, 0x87, 0x44, 0x37,
	0xea, 0xf7, 0x03, 0x80, 0x9d, 0xa2, 0x8b, 0x86, 0xeb, 0x0a, 0xab, 0xa3, 0x3e, 0xfc, 0xea, 0xeb,
	0xb6, 0x47, 0x0a, 0x0f, 0x1e, 0x9c, 0xc2, 0x79, 0xf3, 0xa8, 0x4d, 0x22, 0x0f, 0x1d, 0x92, 0xc8,
	0xa7, 0xff, 0x1e, 0x3d, 0xbf, 0xe1, 0x9f, 0x48, 0x5f, 0x7d, 0xb3, 0x86, 0xbe, 0x87, 0x60, 0x4a,
	0xe4, 0xde, 0x51, 0x48, 0x1f, 0x2b, 0xf3, 0x8e, 0x42, 0xe0, 0xbe, 0x52, 0x26, 0x99, 0x97, 0x8e,
	0x38, 0xe6, 0xff, 0x17, 0x84, 0xc5, 0x58, 0x1a, 0xc9, 0xc0, 0x95, 0x63, 0x8f, 0xa0, 0xa1, 0x86,
	0x88, 0x1b, 0x8c, 0x71, 0x65, 0x71, 0x58, 0x98, 0xad, 0x4d, 0xd1, 0x9d, 0x1d, 0x6a, 0x0c, 0x1a,
	0xfa, 0x3d, 0x28, 0x42, 0xcd, 0x3f, 0x99, 0x9e, 0xe2, 0x45, 0x39, 0x8f, 0x9b, 0x54, 0x01, 0x62,
	0x4d, 0x13, 0x36, 0xfe, 0x04, 0x44, 0x9d, 0x94, 0x70, 0x8c, 0xa5, 0x48, 0x7c, 0x77, 0xbb, 0x8e,
	0xc7, 0x1a, 0x1c, 0x11, 0xfe, 0xb8, 0x50, 0x49, 0xfd, 0x11, 0x72, 0xb1, 0x99, 0xad, 0x9a, 0x96,
	0x5e, 0xc6, 0x45, 0x88, 0xd5, 0x47, 0xdc, 0x26, 0x8d, 0x19, 0xb1, 0x9d, 0xd1, 0x26, 0x26, 0x19,
	0xa3, 0x21, 0x67, 0xff, 0x22, 0x69, 0xff, 0x8a, 0x38, 0x7b, 0x1a, 0x09, 0x24, 0xf5, 0x38, 0x64,
	0x19, 0xce, 0xf4, 0xe5, 0xd7, 0x6b, 0xe8, 0x12, 0x5c, 0x84, 0x14, 0x67, 0x9c, 0x74, 0x04, 0xa1,
	0x39, 0x3d, 0x39, 0xcb, 0x96, 0xa3, 0x55, 0x83, 0xd5, 0x1c, 0x18, 0x8d, 0xa7, 0xfe, 0x0c, 0x01,
	0x76, 0x40, 0xea, 0xe3, 0xa6, 0x72, 0x90, 0xb8, 0x17, 0xdb, 0x8b, 0xeb, 0x50, 0xf8, 0xef, 0x96,
	0xfb, 0x3b, 0x21, 0xe8, 0xe6, 0x90, 0xb3, 0x6a, 0x65, 0x9d, 0x18, 0x26, 0xfe, 0x28, 0x74, 0x96,
	0x55, 0x4d, 0xde, 0x20, 0x86, 0xa9, 0xea, 0x9a, 0xe8, 0x76, 0x0c, 0x36, 0x89, 0xbb, 0x5c, 0x32,
	0x97, 0x0c, 0xdd, 0xd2, 0xf3, 0x7a, 0x49, 0x82, 0xb2, 0xaa, 0xad, 0x70, 0x68, 0x86, 0xac, 0x6c,
	0x39, 0xc8, 0xbe, 0x23, 0x20, 0x2b, 0x5b, 0x36, 0xf2, 0x37, 0x82, 0xd0, 0x9d, 0x67, 0x52, 0xc8,
	0x66, 0x55, 0xb5, 0x88, 0x99, 0xf0, 0x27, 0xfd, 0xc3, 0xd1, 0xec, 0xbf, 0xb2, 0xa2, 0xe9, 0xa7,
	0x81, 0x27, 0x68, 0x3f, 0x90, 0xfa, 0xc7, 0x80, 0xf1, 0xa3, 0x80, 0x74, 0x62, 0xf9, 0x6e, 0x4e,
	0x9e, 0x99, 0xcb, 0xc9, 0xe3, 0x99, 0xeb, 0xf2, 0x9d, 0xd9, 0x7b, 0x72, 0x6e, 0x7e, 0x26, 0x33,
	0x39, 0x55, 0x7f, 0x9f, 0x99, 0x9c, 0xb2, 0xdf, 0x4f, 0x5c, 0xbf, 0x2a, 0x9d, 0xa1, 0xef, 0x67,
	0xe7, 0x67, 0x66, 0xe7, 0x67, 0x32, 0x57, 0xe4, 0xa5, 0x07, 0x77, 0xff, 0xf7, 0xf8, 0xc4, 0x95,
	0x49, 0x1b, 0xeb, 0x22, 0xfd, 0x3a, 0x37, 0x7b, 0x6b, 0x7e, 0x8e, 0xfe, 0x9b, 0x9b, 0x91, 0x1f,
	0x2e, 0x2c, 0xcf, 0x7b, 0x91, 0x3f, 0x18, 0xb0, 0x89, 0xdf, 0x65, 0x4f, 0xc0, 0x03, 0x05, 0x78,
	0xb1, 0x0e, 0x2e, 0xb5, 0x61, 0x7f, 0x10, 0x58, 0x13, 0xf3, 0x8f, 0x78, 0x80, 0x1d, 0xc8, 0xfa,
	0x42, 0x5b, 0xdd, 0x67, 0xb3, 0xb3, 0x14, 0xb0, 0x0d, 0x14, 0xe5, 0x6d, 0x43, 0xa5, 0xda, 0xa8,
	0x71, 0x18, 0x8c, 0x9b, 0x0e, 0xf3, 0xd6, 0x81, 0x14, 0xce, 0x79, 0x7e, 0x75, 0x99, 0xa9, 0x15,
	0xdd, 0x4d, 0xfc, 0x9c, 0xe7, 0xd7, 0xba, 0xf9, 0x5c, 0x63, 0xab, 0x8b, 0x47, 0x63, 0x8e, 0x05,
	0xa3, 0xab, 0x49, 0xff, 0x5d, 0x1f, 0x44, 0x97, 0x4b, 0x26, 0x1f, 0x4c, 0x78, 0x06, 0xe2, 0xf6,
	0xac, 0x64, 0x92, 0x7c, 0xd5, 0x50, 0xad, 0xc7, 0x22, 0x01, 0x1e, 0xb4, 0x9d, 0x16, 0x13, 0xf0,
	0x39, 0x01, 0x8e, 0x3f, 0x0e, 0xb1, 0x32, 0x29, 0xa8, 0xd5, 0x72, 0x9d, 0x82, 0xaf, 0x2d, 0x85,
	0x1e, 0x0e, 0xee, 0x10, 0x78, 0x19, 0xba, 0x4a, 0xfa, 0x66, 0x1d, 0xbb, 0xfd, 0x76, 0x5e, 0x67,
	0x49, 0xdf, 0x74, 0x50, 0xef, 0x41, 0x2c, 0xcf, 0x12, 0x40, 0x1d, 0xbb, 0xdd, 0x2e, 0x68, 0x43,
	0xb2, 0xa0, 0x92, 0x70, 0x64, 0x9b, 0x1c, 0x6b, 0xee, 0x4c, 0x66, 0xcf, 0x3a, 0xf3, 0x4c, 0x9f,
	0x98, 0x67, 0x68, 0xf1, 0x61, 0xf7, 0xb1, 0x78, 0xc5, 0x91, 0xfa, 0x13, 0x3f, 0x9c, 0xbc, 0xa5,
	0x6f, 0x6a, 0xa6, 0x65, 0x10, 0xa5, 0x4c, 0xb3, 0x82, 0x62, 0x28, 0x65, 0x93, 0xb5, 0x7b, 0x66,
	0x01, 0xac, 0x92, 0x29, 0xf3, 0xb6, 0x5f, 0xdb, 0xb2, 0xc3, 0x71, 0x44, 0x36, 0xf0, 0x4e, 0x0d,
	0x21, 0x29, 0x6a, 0x39, 0x9e, 0x59, 0x85, 0x38, 0x23, 0x42, 0x13, 0xe0, 0x1a, 0x5d, 0x20, 0x12,
	0x33, 0xe1, 0x63, 0xe9, 0xf7, 0x7c, 0x6b, 0x4a, 0x9a, 0xad, 0x43, 0xb1, 0x09, 0xa3, 0xdf, 0x49,
	0xbc, 0xf1, 0x7a, 0xe2, 0x95, 0x62, 0x56, 0x03, 0xa4, 0x89, 0x27, 0x21, 0xac, 0xe9, 0x72, 0xd9,
	0x2a, 0x99, 0xed, 0x8c, 0x9e, 0x0d, 0x50, 0x33, 0xcc, 0x77, 0x48, 0x21, 0x4d, 0xbf, 0x67, 0x95,
	0x4c, 0xbc, 0x02, 0x11, 0x5a, 0xce, 0x30, 0x3c, 0x6e, 0xee, 0x09, 0x4f, 0xed, 0x1a, 0xec, 0xb3,
	0xc2, 0x8f, 0x75, 0xa8, 0xba, 0x36, 0xab, 0x6b, 0x16, 0xd9, 0xb2, 0x1c, 0xb2, 0xe1, 0xaa, 0x49,
	0x28, 0xdd, 0xe9, 0xb3, 0xaf, 0xd7, 0xd0, 0x29, 0x38, 0x09, 0x3d, 0xcb, 0x77, 0x73, 0x49, 0x66,
	0x4f, 0x62, 0xd1, 0xac, 0xce, 0x22, 0x77, 0x32, 0x7b, 0x1d, 0x3a, 0xcb, 0xcc, 0x24, 0xdc, 0x39,
	0x97, 0x9e, 0xd6, 0x90, 0xff, 0x8d, 0xba, 0x83, 0x68, 0xbd, 0xf3, 0xda, 0x1e, 0xc2, 0x10, 0xcf,
	0x17, 0xb4, 0x86, 0x95, 0xb6, 0x70, 0xd9, 0x77, 0xfd, 0x90, 0x70, 0x89, 0x74, 0x37, 0x47, 0x6d,
	0x21, 0xfc, 0xf6, 0xfe, 0xf8, 0xac, 0x0a, 0x5d, 0x1e, 0xfe, 0x3a, 0x4a, 0x29, 0x71, 0x79, 0x77,
	0xbb, 0xd3, 0x85, 0xda, 0x3a, 0x6f, 0x26, 0xd0, 0xfe, 0x8f, 0xff, 0xd6, 0x1f, 0x7a, 0xb2, 0x87,
	0x7c, 0xf1, 0x0e, 0xa9, 0x81, 0x8d, 0xdb, 0x8d, 0x81, 0x5f, 0xd2, 0x8d, 0xc1, 0x0f, 0xca, 0x8d,
	0x13, 0x5e, 0x6e, 0x0c, 0xbc, 0xe1, 0xaa, 0xe7, 0xae, 0xa6, 0x27, 0x0f, 0x74, 0xa3, 0x3f, 0x1e,
	0x48, 0x19, 0xd0, 0xf3, 0xc9, 0xb5, 0x7c, 0x7e, 0x9e, 0x28, 0x05, 0x62, 0xbc, 0x42, 0x1e, 0x9b,
	0xf8, 0xff, 0x41, 0xff, 0xd6, 0x5a, 0x3e, 0x2f, 0xaf, 0xb3, 0x57, 0x32, 0x29, 0x11, 0xba, 0xc0,
	0xe1, 0x67, 0x45, 0x5a, 0x67, 0x70, 0x8a, 0x3c, 0xc7, 0x41, 0xb2, 0x98, 0x9a, 0xb7, 0xfb, 0x09,
	0x82, 0x54, 0xe4, 0xd7, 0x50, 0x30, 0x8e, 0x52, 0xa8, 0x43, 0xc2, 0x5b, 0x0e, 0x75, 0x01, 0x66,
	0xa6, 0xfe, 0x38, 0x08, 0x43, 0xed, 0xcd, 0x80, 0x25, 0xe8, 0xb1, 0x8c, 0xaa, 0x69, 0x91, 0x82,
	0x9c, 0x57, 0xe4, 0xaa, 0x51, 0x12, 0x47, 0x78, 0x46, 0xde, 0xad, 0xa1, 0xc0, 0xb7, 0xf6, 0x50,
	0x67, 0x85, 0x94, 0xd3, 0xc9, 0x55, 0xc5, 0x24, 0x53, 0x2c, 0x4d, 0x47, 0x0c, 0x5a, 0xc5, 0xef,
	0xec, 0x44, 0x44, 0x07, 0xe5, 0x2b, 0x7e, 0x6a, 0xc4, 0x2e, 0x41, 0x63, 0x56, 0x79, 0xd5, 0x28,
	0xe1, 0x87, 0x00, 0x75, 0x9a, 0x09, 0x38, 0x72, 0x61, 0x8a, 0x77, 0xb7, 0x63, 0x2e, 0x61, 0x4a,
	0xaa, 0x69, 0xcd, 0x77, 0x48, 0x51, 0x87, 0x36, 0xbe, 0x01, 0xa7, 0xf3, 0x25, 0x95, 0x68, 0x96,
	0x3b, 0xbf, 0x88, 0x63, 0x55, 0x4a, 0x89, 0xb5, 0x36, 0x23, 0xd2, 0x29, 0x0e, 0xe2, 0xca, 0x18,
	0x0f, 0x04, 0x00, 0x9e, 0x80, 0x90, 0xa6, 0xcb, 0x79, 0xa3, 0x74, 0x84, 0x80, 0x43, 0x52, 0x50,
	0xd3, 0x67, 0x8d, 0x12, 0xbe, 0x0d, 0x7e, 0x8a, 0x11, 0x3c, 0xb2, 0x1a, 0x3d, 0xbb, 0xdb, 0x14,
	0xc3, 0xde, 0x73, 0x98, 0x47, 0x12, 0x7d, 0xc4, 0x1f, 0x85, 0x6e, 0xe6, 0xee, 0x82, 0x6a, 0x2a,
	0xab, 0x25, 0x52, 0x60, 0x7d, 0xad, 0x83, 0x26, 0x0c, 0x9f, 0xd4, 0x45, 0x81, 0x6f, 0x09, 0x58,
	0x3c, 0x0f, 0xec, 0xd9, 0x3e, 0x42, 0x96, 0x88, 0x30, 0xdc, 0x17, 0x3c, 0xa5, 0x69, 0x0c, 0xb3,
	0x79, 0x9f, 0xd4, 0x49, 0x51, 0xb9, 0x11, 0xcc, 0xec, 0x25, 0xe8, 0x75, 0xd9, 0x58, 0x44, 0x73,
	0xff, 0xd3, 0x1a, 0x82, 0x67, 0x35, 0x14, 0xdd, 0xaf, 0xa1, 0xc0, 0xf8, 0x95, 0x74, 0xe6, 0x9b,
	0x7b, 0x08, 0x65, 0xcf, 0x03, 0xe4, 0x8d, 0x92, 0xec, 0x9a, 0x55, 0x9a, 0x23, 0x3e, 0xfb, 0x51,
	0xe8, 0x74, 0xc5, 0x30, 0x4e, 0x3f, 0xad, 0xa1, 0xb0, 0x80, 0x09, 0x51, 0x98, 0x6b, 0xe9, 0xeb,
	0xaf, 0xed, 0xa1, 0x01, 0xe8, 0x5d, 0xb7, 0xac, 0x4a, 0xc3, 0xb0, 0x48, 0xa2, 0xc5, 0x40, 0x24,
	0x1a, 0x07, 0x67, 0x91, 0x13, 0x8a, 0x87, 0x53, 0xbf, 0x15, 0x82, 0xfe, 0x07, 0x86, 0x5a, 0x54,
	0xb5, 0x25, 0x5d, 0x2f, 0x3d, 0x54, 0xad, 0xf5, 0x87, 0x44, 0x2d, 0xae, 0x5b, 0x78, 0x9e, 0xae,
	0xaa, 0xf4, 0xd2, 0x31, 0x56, 0x39, 0x3d, 0xbb, 0xdb, 0x9d, 0x3a, 0x23, 0x25, 0x53, 0x4c, 0xba,
	0x40, 0xa6, 0x7f, 0xb1, 0x04, 0xe1, 0x7c, 0x89, 0xea, 0x6f, 0x1c, 0xe3, 0xe4, 0x11, 0xde, 0xdd,
	0xb6, 0xb1, 0xa8, 0x5b, 0xc5, 0xc1, 0x26, 0xfb, 0x15, 0x8d, 0xab, 0x4d, 0x26, 0x27, 0x1b, 0x3c,
	0xdd, 0xd9, 0xd3, 0x3f, 0xac, 0x21, 0x34, 0xbe, 0xcb, 0xd2, 0x41, 0xb5, 0xd0, 0xa8, 0xb7, 0x24,
	0x40, 0xf1, 0x08, 0x44, 0x2a, 0x86, 0xaa, 0xb3, 0xd9, 0x9f, 0xaf, 0x8c, 0x7b, 0x18, 0x1a, 0xeb,
	0x51, 0x8e, 0xf8, 0x12, 0x49, 0xc9, 0xf9, 0x8e, 0xbf, 0x85, 0x20, 0x4e, 0xb4, 0x42, 0x45, 0x57,
	0x35, 0x4b, 0x36, 0xab, 0xab, 0x26, 0xb1, 0x68, 0xf2, 0xa3, 0x69, 0xfa, 0x86, 0xb7, 0xf8, 0x1e,
	0x46, 0x1c, 0x9d, 0x13, 0x14, 0x72, 0x9c, 0xc0, 0x9c, 0x66, 0x19, 0x8f, 0xb3, 0xd7, 0xa8, 0x42,
	0x5f, 0xdf, 0x43, 0x01, 0xf0, 0x75, 0x20, 0x6f, 0x91, 0xd9, 0x50, 0xff, 0x3a, 0x9d, 0x95, 0x59,
	0x32, 0x7f, 0x6d, 0x0f, 0xf9, 0x22, 0x1d, 0x52, 0x8c, 0x34, 0x92, 0x1b, 0xcc, 0x42, 0xbf, 0x17,
	0x07, 0x1c, 0x07, 0xff, 0x23, 0xc2, 0xeb, 0xb3, 0xa8, 0x44, 0x7f, 0xe2, 0x7e, 0x08, 0x6e, 0x28,
	0xa5, 0xaa, 0x38, 0x2e, 0x28, 0xf1, 0x87, 0x69, 0xdf, 0x75, 0x34, 0xfd, 0x33, 0xf4, 0x7a, 0x0d,
	0x8d, 0xc3, 0x18, 0x5c, 0xe0, 0x1a, 0x24, 0xa9, 0x0a, 0xc9, 0x4d, 0xd5, 0x5a, 0x4f, 0x72, 0x25,
	0x92, 0x8a, 0x56, 0x48, 0x2e, 0xd9, 0x76, 0x09, 0x4f, 0xa4, 0x33, 0xe9, 0x29, 0xd6, 0xad, 0xfd,
	0x36, 0x82, 0x8f, 0x89, 0x86, 0xc1, 0x55, 0xb8, 0x04, 0x7d, 0x3c, 0x60, 0x32, 0x9d, 0x2e, 0x3a,
	0x80, 0x1d, 0xdf, 0x67, 0xc2, 0xb3, 0xc2, 0x77, 0xe1, 0x57, 0xb5, 0x47, 0x9a, 0xbe, 0xa9, 0xc1,
	0x49, 0xd1, 0x36, 0x88, 0x71, 0x4c, 0x07, 0x14, 0x30, 0x84, 0x38, 0xef, 0xc1, 0x88, 0xed, 0x67,
	0x38, 0x01, 0x11, 0x5b, 0x88, 0x41, 0xa8, 0x3b, 0x12, 0x86, 0x21, 0x6e, 0xdb, 0x20, 0x29, 0x8c,
	0xb0, 0xd8, 0xdf, 0xea, 0xbb, 0xb8, 0x9f, 0xaf, 0xfd, 0xf5, 0x92, 0xec, 0xdd, 0x1b, 0xb8, 0x2a,
	0x66, 0x8d, 0x47, 0x80, 0xeb, 0xae, 0x74, 0x4e, 0x15, 0xbe, 0x0a, 0x41, 0x8a, 0x6b, 0x1f, 0x2b,
	0xbc, 0x74, 0xe4, 0x10, 0x70, 0x55, 0x58, 0x11, 0x57, 0xd1, 0xcd, 0xa9, 0xa5, 0xde, 0x43, 0xd0,
	0xbf, 0x64, 0x90, 0x35, 0x75, 0x2b, 0x67, 0x19, 0xaa, 0x56, 0x74, 0xf8, 0xbd, 0x42, 0x35, 0xa4,
	0xef, 0x09, 0x67, 0x19, 0xcd, 0x8e, 0x51, 0x6c, 0x78, 0x82, 0xc2, 0xa9, 0xa0, 0xe1, 0x7f, 0x97,
	0x9f, 0x54, 0x0c, 0x3d, 0x41, 0xfe, 0xf8, 0x0e, 0xf2, 0x9e, 0xfa, 0x1d, 0x02, 0xf8, 0x6b, 0x08,
	0xba, 0xd9, 0xf1, 0x26, 0x87, 0xa4, 0x8f, 0x91, 0xb4, 0x8e, 0xb9, 0x37, 0x7e, 0xf0, 0x5e, 0xae,
	0x2d, 0xd7, 0x8e, 0xef, 0x70, 0xb9, 0xba, 0x28, 0xf6, 0x92, 0x90, 0x24, 0xf5, 0x05, 0xe8, 0xbb,
	0x53, 0xd2, 0x57, 0x95, 0xd2, 0xac, 0xae, 0x69, 0x24, 0x6f, 0xe9, 0x06, 0xd3, 0x9f, 0x40, 0xb4,
	0xc8, 0x5e, 0xcb, 0x1b, 0xda, 0xf1, 0xf6, 0xd6, 0x9b, 0xbb, 0xed, 0xad, 0xfb, 0xeb, 0x52, 0x84,
	0x93, 0x5e, 0xd1, 0x52, 0x1a, 0xf4, 0x88, 0x66, 0xae, 0x44, 0xd6, 0xa8, 0xf1, 0xf1, 0xa7, 0x21,
	0x22, 0xfa, 0x9e, 0xc7, 0x39, 0x42, 0x7a, 0xa6, 0xbe, 0xa7, 0xef, 0xc5, 0xcf, 0xa6, 0x98, 0xfa,
	0x27, 0x04, 0xfd, 0x2b, 0x7a, 0xc9, 0x22, 0x86, 0xa1, 0xe4, 0xf4, 0x35, 0x6b, 0x53, 0x11, 0x1b,
	0xbf, 0xb7, 0x00, 0x3b, 0xcb, 0xab, 0xcd, 0x86, 0xce, 0xc2, 0xc1, 0x0b, 0x1c, 0x7b, 0x41, 0x96,
	0xdb, 0xb4, 0x7b, 0x0b, 0x77, 0xe0, 0xd4, 0x86, 0xa0, 0x2e, 0x9b, 0x82, 0xbc, 0x43, 0x8c, 0x6f,
	0xf2, 0x47, 0xc5, 0x86, 0x4c, 0xa2, 0x7f, 0xbe, 0x43, 0x3a, 0xb9, 0xd1, 0x24, 0x8b, 0x20, 0xc4,
	0xd6, 0x37, 0xe3, 0xd9, 0x71, 0x18, 0xac, 0x93, 0x73, 0xa4, 0x72, 0xcf, 0x4e, 0xf6, 0x89, 0x4f,
	0x7f, 0x26, 0x3d, 0xf1, 0xf3, 0x1a, 0x42, 0xe2, 0xcc, 0xe7, 0x4f, 0x11, 0xf4, 0x3d, 0xa8, 0x10,
	0x43, 0xb1, 0x54, 0xad, 0x98, 0x7b, 0x6c, 0x5a, 0xa4, 0xdc, 0xac, 0xa5, 0x6e, 0x1e, 0x53, 0xcb,
	0x07, 0xa6, 0xad, 0xe5, 0x1c, 0x24, 0x74, 0x9b, 0xb8, 0x6c, 0x32, 0xea, 0xed, 0x94, 0x3c, 0xa1,
	0x37, 0x4a, 0xd2, 0xa8, 0xe3, 0x14, 0x9c, 0x3b, 0x88, 0xd8, 0x11, 0x14, 0x7d, 0xe2, 0x83, 0x13,
	0xaf, 0x54, 0x57, 0xd9, 0x8e, 0x08, 0x31, 0x5f, 0xad, 0x14, 0x0d, 0xa5, 0x40, 0x6e, 0x19, 0x8a,
	0xaa, 0x61, 0x02, 0xfd, 0x44, 0xa3, 0xa5, 0x84, 0x5c, 0xe5, 0xaf, 0xe5, 0x02, 0x7d, 0x2f, 0xb4,
	0xf5, 0xde, 0x46, 0xf7, 0x26, 0xc5, 0xd7, 0x0c, 0xf3, 0x1d, 0x12, 0xe6, 0x04, 0x1b, 0xd8, 0x2c,
	0xc2, 0x80, 0x28, 0x6f, 0x9a, 0xf8, 0xb4, 0x5f, 0x1c, 0xf7, 0x09, 0x24, 0x37, 0x2d, 0x61, 0x91,
	0x97, 0xe1, 0xa5, 0x47, 0x8e, 0x1c, 0x8d, 0x44, 0x65, 0xa1, 0x91, 0x2b, 0x83, 0xba, 0x0d, 0x23,
	0x8c, 0xf2, 0x65, 0x1f, 0x0c, 0xf0, 0x93, 0xc7, 0x4a, 0x89, 0xef, 0xd0, 0x96, 0x48, 0xde, 0xe2,
	0x8d, 0xb3, 0xee, 0x22, 0xd1, 0xd9, 0x5e, 0xa7, 0x5a, 0x3e, 0x7c, 0xfd, 0xdf, 0x55, 0x24, 0xfa,
	0x92, 0x0d, 0x8b, 0xa7, 0x01, 0x3b, 0x87, 0x63, 0x8b, 0x44, 0x2f, 0x1a, 0x4a, 0x65, 0xfd, 0xb1,
	0xed, 0xf0, 0xb7, 0xb6, 0x11, 0x75, 0x4b, 0x82, 0x16, 0x09, 0xbd, 0x36, 0xd8, 0x1d, 0x1b, 0x0a,
	0x67, 0xc1, 0x39, 0xa5, 0x2b, 0x1b, 0xf6, 0x01, 0xe8, 0x73, 0xde, 0x87, 0x9b, 0x04, 0x9c, 0x34,
	0x37, 0xdf, 0x21, 0x81, 0x8d, 0x25, 0x91, 0xec, 0x08, 0xf4, 0x19, 0x44, 0x36, 0x6d, 0x65, 0x8e,
	0x10, 0x1d, 0xbf, 0x8e, 0x20, 0x31, 0x53, 0x28, 0xab, 0xda, 0xab, 0x26, 0x31, 0x66, 0x0d, 0x52,
	0x20, 0x9a, 0xa5, 0x2a, 0x25, 0x53, 0x1c, 0xf4, 0x0f, 0x9b, 0xe6, 0xba, 0xec, 0xcc, 0xd3, 0xd9,
	0x9e, 0x77, 0x6b, 0xc8, 0xef, 0x6c, 0xa1, 0xde, 0x94, 0x42, 0xa6, 0xb9, 0xfe, 0x0a, 0x79, 0x8c,
	0x6f, 0x42, 0x8f, 0x42, 0x89, 0xc8, 0x15, 0xc5, 0x34, 0x37, 0x75, 0xa3, 0x20, 0xac, 0x76, 0xaa,
	0x49, 0xfc, 0x1c, 0xc9, 0x1b, 0x84, 0xcd, 0x1e, 0x52, 0x37, 0x43, 0x58, 0x12, 0xf0, 0xa9, 0xff,
	0x40, 0x70, 0x6a, 0xc9, 0xd0, 0x95, 0xbc, 0xa5, 0x6e, 0x90, 0x7b, 0xba, 0xa6, 0x5a, 0x3a, 0x9d,
	0x6c, 0x66, 0xb9, 0x02, 0x2b, 0x70, 0xba, 0x62, 0x7f, 0x94, 0xcb, 0xce, 0x57, 0xe1, 0xeb, 0x43,
	0x5c, 0x74, 0xaa, 0xd2, 0x4a, 0x77, 0x8e, 0x21, 0xe2, 0x4f, 0xc2, 0x19, 0x4f, 0xba, 0x22, 0xf2,
	0x0e, 0x09, 0xd0, 0x41, 0x0f, 0xc2, 0xa2, 0x36, 0xcf, 0x5e, 0x3c, 0x40, 0x62, 0xe1, 0x91, 0x88,
	0xed, 0x11, 0xfb, 0x04, 0x3a, 0x02, 0xa8, 0x7b, 0x15, 0xdf, 0x00, 0xa8, 0x18, 0x6a, 0x59, 0x31,
	0x1e, 0xcb, 0x06, 0x11, 0xb6, 0x3f, 0xc7, 0x76, 0x48, 0xf6, 0x50, 0x57, 0xc4, 0x57, 0xcf, 0xdb,
	0x6c, 0x26, 0x33, 0x02, 0x71, 0x94, 0xb8, 0x29, 0x45, 0x05, 0x8a, 0x44, 0xf0, 0x24, 0x44, 0x57,
	0x95, 0xfc, 0xa3, 0x6a, 0x85, 0xa2, 0xf3, 0xa5, 0x5b, 0xe2, 0xe7, 0xf6, 0xc9, 0xda, 0x26, 0x12,
	0x52, 0x84, 0x83, 0x4a, 0x24, 0xf5, 0xd7, 0x01, 0x38, 0xd3, 0x6e, 0x7c, 0xe3, 0x8f, 0x03, 0xe6,
	0x83, 0x4c, 0xd3, 0x0b, 0x44, 0xb6, 0xd4, 0x32, 0xd1, 0xab, 0xfc, 0x5c, 0x59, 0x77, 0xb6, 0xf7,
	0x87, 0x35, 0xe4, 0x9f, 0xb8, 0x72, 0x85, 0x85, 0xc7, 0x88, 0x3f, 0xf1, 0xa5, 0xb0, 0x14, 0x67,
	0xc0, 0xf7, 0xf5, 0x02, 0x59, 0xe6, 0xa0, 0xf8, 0x53, 0x90, 0xe4, 0x04, 0xca, 0xca, 0x96, 0x5c,
	0xd5, 0x94, 0x0d, 0x45, 0x2d, 0xb1, 0xe1, 0xca, 0x08, 0xe6, 0xf5, 0xaa, 0x66, 0x31, 0xa3, 0x73,
	0x72, 0xbc, 0xec, 0x0d, 0x8f, 0x04, 0x13, 0x5f, 0xb9, 0x38, 0x4c, 0x87, 0xcd, 0x19, 0x86, 0x7c,
	0x4f, 0xd9, 0x7a, 0xb5, 0x8e, 0x4a, 0xc9, 0xcf, 0x52, 0x44, 0xbc, 0x0e, 0x2f, 0xb6, 0x21, 0x5e,
	0x21, 0x46, 0x9e, 0x68, 0x96, 0x52, 0xe4, 0x63, 0xab, 0x3b, 0xdb, 0xcf, 0x38, 0x50, 0xb3, 0x30,
	0x2b, 0x8e, 0x04, 0x12, 0x05, 0xc6, 0xe4, 0xfc, 0x01, 0x4c, 0x96, 0x1c, 0x02, 0xf8, 0x13, 0x70,
	0xca, 0xce, 0x68, 0x1b, 0xa4, 0xa8, 0x38, 0x19, 0xa8, 0xac, 0x17, 0xc8, 0x21, 0xe7, 0x19, 0x4e,
	0x08, 0xc4, 0x15, 0x52, 0x54, 0x84, 0x85, 0xef, 0xe9, 0x05, 0x82, 0x1f, 0x40, 0x42, 0x64, 0xae,
	0x56, 0x8a, 0xe1, 0xb6, 0x14, 0x07, 0x38, 0x5e, 0x13, 0xc1, 0xec, 0x18, 0x9c, 0xf1, 0xb6, 0xc6,
	0x41, 0x27, 0xee, 0xa7, 0xe0, 0x5c, 0x0b, 0x6b, 0xd9, 0xd2, 0x8b, 0xc5, 0x3a, 0x4e, 0x9f, 0x6b,
	0x03, 0xd3, 0x3f, 0x95, 0xbe, 0xf6, 0x0e, 0x8f, 0x60, 0x7e, 0x86, 0x3e, 0x18, 0x0f, 0xa5, 0x5e,
	0xf3, 0xc1, 0xd0, 0x12, 0x31, 0xd6, 0x74, 0xa3, 0x4c, 0x17, 0x09, 0x73, 0xda, 0x3a, 0xfd, 0x43,
	0x0b, 0x0b, 0x2a, 0x13, 0x4b, 0x2a, 0x0b, 0x30, 0x50, 0x21, 0xc6, 0x1a, 0x27, 0x5f, 0xba, 0x26,
	0x13, 0x0e, 0x53, 0x38, 0x64, 0x14, 0x63, 0x8a, 0x44, 0x89, 0xdc, 0xbd, 0x26, 0xa8, 0x16, 0xf0,
	0x5a, 0x03, 0xa9, 0x89, 0x3a, 0xa9, 0x40, 0x9b, 0x09, 0xec, 0xee, 0x84, 0xb7, 0x80, 0x54, 0xb8,
	0x06, 0x3e, 0x13, 0x36, 0x1f, 0x31, 0xe9, 0xbc, 0x00, 0xf1, 0x3a, 0x37, 0xef, 0xe9, 0x45, 0x5c,
	0x28, 0x11, 0x65, 0xfa, 0x1f, 0x20, 0x38, 0x35, 0x93, 0xcf, 0x93, 0x12, 0x9d, 0xbb, 0x49, 0x41,
	0x6c, 0x27, 0xaa, 0x5a, 0x91, 0xd9, 0xe1, 0x0a, 0x84, 0xed, 0x34, 0xd3, 0x5e, 0x73, 0x1b, 0x0c,
	0x8f, 0x42, 0x48, 0x24, 0xbc, 0xf6, 0x79, 0x49, 0x40, 0x65, 0x53, 0x70, 0x42, 0xa9, 0xb3, 0xb7,
	0x8b, 0x4d, 0x55, 0x2b, 0xb2, 0xf4, 0xe3, 0x77, 0xa5, 0x9f, 0xef, 0x23, 0x38, 0xd3, 0xce, 0x2e,
	0x78, 0x1c, 0x22, 0x9a, 0x2e, 0x7f, 0xb6, 0x5a, 0x5e, 0xd5, 0x0f, 0x93, 0x56, 0xd3, 0x17, 0x29,
	0x18, 0x4e, 0x43, 0x90, 0xc3, 0xb7, 0x17, 0x96, 0x03, 0x09, 0x13, 0xdf, 0xf6, 0x30, 0x71, 0xa6,
	0x69, 0xf2, 0x7a, 0x6d, 0x0f, 0x9d, 0x83, 0x98, 0xf2, 0xb9, 0x2a, 0xad, 0x1b, 0x35, 0x62, 0xf1,
	0xed, 0xda, 0x2e, 0x65, 0xd3, 0x94, 0xad, 0xe2, 0x26, 0x7b, 0x12, 0x5a, 0x7d, 0x17, 0x41, 0xcc,
	0x3e, 0x0b, 0xb2, 0xb2, 0xb0, 0xb4, 0xa0, 0xad, 0xe9, 0xf8, 0x34, 0xdf, 0xfe, 0x95, 0xd9, 0xbd,
	0x34, 0xbe, 0xf8, 0x8c, 0xd0, 0x17, 0x74, 0x91, 0x87, 0xef, 0x8a, 0x73, 0x19, 0xf6, 0x09, 0x27,
	0xeb, 0x71, 0x85, 0xdb, 0xfa, 0x28, 0x07, 0xa5, 0x63, 0x66, 0xfd, 0x81, 0xd9, 0xec, 0x06, 0x84,
	0x4c, 0x4b, 0xb1, 0xaa, 0xa6, 0xb0, 0xd8, 0x4b, 0x9e, 0x24, 0x5c, 0x02, 0xe6, 0x18, 0xb4, 0x24,
	0xb0, 0xa6, 0x43, 0x6f, 0xd6, 0x90, 0x2f, 0x8e, 0x52, 0xbb, 0x3e, 0xe8, 0x6d, 0x81, 0xa2, 0x8a,
	0x68, 0xa5, 0x55, 0x39, 0xef, 0x56, 0x44, 0x2b, 0xad, 0xce, 0xd2, 0x67, 0x7c, 0x16, 0x80, 0x7e,
	0x74, 0xb1, 0x8f, 0x4a, 0x14, 0x5c, 0xe0, 0x62, 0x71, 0x2f, 0x8f, 0x5d, 0x23, 0xe1, 0x57, 0xf0,
	0xe8, 0x7a, 0x5c, 0x31, 0x34, 0x96, 0xbc, 0xa2, 0x12, 0xfd, 0x89, 0x09, 0xf4, 0x59, 0x8a, 0x51,
	0x24, 0x96, 0x5c, 0x34, 0xf4, 0x6a, 0xc5, 0xa6, 0x16, 0x66, 0x2b, 0x8e, 0xc9, 0xc3, 0x94, 0x59,
	0x66, 0xa8, 0x77, 0x28, 0x26, 0xe7, 0xca, 0x66, 0xfd, 0x5e, 0xab, 0xf9, 0x35, 0x3e, 0x01, 0x21,
	0x83, 0x28, 0xa6, 0xae, 0xb1, 0xf6, 0x55, 0x54, 0x12, 0x4f, 0xd3, 0xc3, 0xaf, 0xd7, 0xd0, 0x05,
	0x48, 0x41, 0x9f, 0x73, 0x9c, 0x67, 0x65, 0x61, 0x29, 0x29, 0x90, 0x3a, 0x59, 0x17, 0x3d, 0x3d,
	0x95, 0xbe, 0x9e, 0xbe, 0xd6, 0xb0, 0x21, 0xfe, 0x37, 0x3e, 0x48, 0x1e, 0x26, 0x85, 0xa3, 0x3f,
	0x6a, 0xd5, 0xdf, 0x57, 0xd7, 0xff, 0x84, 0xe3, 0x3f, 0x3f, 0x17, 0x8c, 0x3f, 0xe1, 0x41, 0xba,
	0xee, 0xe5, 0xbb, 0xa6, 0xfc, 0xd0, 0xb1, 0xe4, 0x3c, 0xe3, 0x4f, 0x41, 0xac, 0xc4, 0xb6, 0xfd,
	0x89, 0x61, 0xdb, 0x8b, 0x37, 0x64, 0x32, 0x87, 0xd9, 0xeb, 0xae, 0x40, 0x73, 0x19, 0xab, 0xa7,
	0xd4, 0xf0, 0xce, 0x65, 0xa9, 0x50, 0x83, 0xa5, 0xee, 0xbf, 0x59, 0x43, 0x8b, 0xd0, 0xc3, 0x3b,
	0x15, 0x83, 0x21, 0xae, 0x1c, 0x74, 0x81, 0x7f, 0x46, 0xba, 0x3f, 0x18, 0x64, 0x7a, 0x01, 0x86,
	0x10, 0xa7, 0x32, 0x18, 0xb1, 0xd5, 0xe2, 0xed, 0x0a, 0x2e, 0x38, 0x6f, 0x57, 0xf0, 0xdf, 0xa9,
	0xaf, 0x21, 0x38, 0xdb, 0x56, 0x32, 0xdb, 0x58, 0xc8, 0xcb, 0x58, 0xbe, 0x06, 0x63, 0x61, 0x71,
	0xca, 0x83, 0x4d, 0xea, 0xe2, 0x64, 0x5e, 0x3b, 0x03, 0xd6, 0x75, 0x0c, 0x36, 0xe8, 0x68, 0x0f,
	0x86, 0x25, 0x80, 0x7b, 0x8a, 0x69, 0x11, 0x83, 0xce, 0xc8, 0x9e, 0x8e, 0x7c, 0xc9, 0x7d, 0xfe,
	0xc1, 0xd7, 0xb0, 0xd6, 0xda, 0x72, 0x1d, 0x6a, 0x70, 0x6e, 0x1c, 0x54, 0xa1, 0x6b, 0xa6, 0xa2,
	0x8a, 0xa5, 0xa0, 0xae, 0xe1, 0x9b, 0x10, 0x2a, 0x13, 0x6b, 0x5d, 0x2f, 0x88, 0x1d, 0xf7, 0xe6,
	0x1a, 0x76, 0xde, 0xb2, 0x2a, 0xf7, 0x18, 0x40, 0xb6, 0x9b, 0xf5, 0xbe, 0x9d, 0x66, 0xbb, 0xc0,
	0xc3, 0x2f, 0x40, 0xa0, 0xa2, 0x58, 0xeb, 0x82, 0x79, 0x8c, 0x35, 0x1f, 0x0c, 0x1a, 0xdc, 0x3b,
	0x91, 0xaf, 0xfa, 0x91, 0xc4, 0x3e, 0xa6, 0x7e, 0x80, 0x60, 0x60, 0xa6, 0xa2, 0xda, 0x7d, 0xa1,
	0x87, 0xaa, 0xb5, 0x9e, 0x63, 0x0c, 0xf0, 0x6d, 0xe8, 0x56, 0x2a, 0xaa, 0xac, 0xdb, 0x12, 0x89,
	0xde, 0x82, 0xf7, 0x59, 0x51, 0xb7, 0xe8, 0x52, 0x97, 0xe2, 0x56, 0x24, 0x0d, 0x9d, 0x1c, 0x54,
	0xfe, 0xac, 0x29, 0x96, 0xb0, 0xd1, 0x6c, 0xa7, 0xa8, 0x18, 0x87, 0xbf, 0xf9, 0x0d, 0x24, 0x01,
	0xff, 0xbe, 0x48, 0x0d, 0x7c, 0xfb, 0xcd, 0x1a, 0xca, 0x42, 0x0a, 0x42, 0x5c, 0xb7, 0xc1, 0x04,
	0xf4, 0x37, 0x48, 0x31, 0xca, 0x95, 0x4b, 0x22, 0x38, 0x03, 0x81, 0x25, 0xc5, 0x5a, 0x1f, 0xec,
	0x07, 0xdc, 0x08, 0xc1, 0xf4, 0xfa, 0xff, 0x7e, 0x88, 0xf2, 0xad, 0xc9, 0x5b, 0xf7, 0x73, 0x78,
	0x1a, 0x7a, 0x55, 0xcd, 0x54, 0x0b, 0x3c, 0xe1, 0x9a, 0xc4, 0xd8, 0x20, 0x86, 0xa8, 0x67, 0xbb,
	0x9f, 0x8a, 0xca, 0x8b, 0x3b, 0x26, 0xce, 0xe1, 0xee, 0x3b, 0x60, 0xf8, 0x63, 0x80, 0xf5, 0xaa,
	0xd5, 0x8c, 0xec, 0xf3, 0x42, 0xee, 0x15, 0x80, 0x2e, 0xec, 0xcf, 0x43, 0x7f, 0x0b, 0x67, 0x79,
	0x63, 0x4a, 0x2c, 0xc6, 0x16, 0x7e, 0xb1, 0x9d, 0x3a, 0xda, 0x05, 0x81, 0x43, 0x2f, 0x07, 0xe0,
	0x66, 0xc1, 0x57, 0xa6, 0xf0, 0x36, 0x0c, 0xb4, 0x8a, 0x2e, 0x3b, 0x97, 0x14, 0xde, 0x47, 0xee,
	0x7d, 0x2d, 0x9a, 0xaf, 0x4c, 0xa5, 0x36, 0x01, 0x2f, 0xdf, 0x79, 0x38, 0x63, 0x9a, 0x6a, 0x51,
	0x23, 0x85, 0x99, 0xdc, 0x7d, 0x71, 0x91, 0x3c, 0x4c, 0x27, 0x48, 0xc5, 0xd4, 0x44, 0xc5, 0xce,
	0x23, 0x73, 0x24, 0x92, 0xf8, 0xcf, 0xf7, 0xfc, 0xc9, 0x9d, 0x77, 0xfd, 0x52, 0xc8, 0x2a, 0x6e,
	0xce, 0x98, 0x1a, 0xbe, 0x06, 0xbd, 0xf5, 0xa6, 0x0a, 0x9d, 0x10, 0x29, 0x0e, 0x6f, 0x62, 0x77,
	0xda, 0xb5, 0xf2, 0x7b, 0xef, 0xf9, 0xa5, 0x98, 0xd3, 0x9b, 0x51, 0x2d, 0x32, 0x63, 0x6a, 0xa9,
	0xef, 0x21, 0xe8, 0x5e, 0xbe, 0xf3, 0xd0, 0xb5, 0x7d, 0x3c, 0x03, 0x71, 0xd1, 0xb1, 0x28, 0xd2,
	0x1c, 0x42, 0x0b, 0x91, 0x43, 0x0a, 0x88, 0x18, 0x87, 0xbf, 0x63, 0x83, 0xe3, 0xfb, 0xd0, 0x5d,
	0x35, 0x89, 0x21, 0x2b, 0x42, 0x1f, 0x51, 0x50, 0x78, 0x1f, 0xdc, 0x69, 0xd5, 0x9b, 0x2e, 0xd2,
	0x29, 0xbe, 0xfd, 0x3a, 0x7b, 0x16, 0x40, 0x31, 0xb5, 0x43, 0x1a, 0x04, 0x3f, 0x40, 0x10, 0x9b,
	0xdb, 0x52, 0x4d, 0x8b, 0x96, 0x6b, 0x77, 0x1e, 0x32, 0x5d, 0xf2, 0x40, 0x0d, 0x24, 0xab, 0x05,
	0x11, 0xc1, 0x77, 0xc5, 0x72, 0x2a, 0x1e, 0x41, 0x57, 0xd0, 0x34, 0xbf, 0x5a, 0x76, 0xb9, 0xa0,
	0x58, 0x8a, 0xdd, 0xda, 0x61, 0x27, 0x8b, 0x5f, 0x32, 0x2e, 0x64, 0x52, 0x9f, 0x19, 0xb6, 0x8a,
	0x9b, 0x97, 0x2f, 0x0d, 0x7f, 0x4a, 0xb9, 0xfc, 0xb9, 0x2b, 0x97, 0x5f, 0xfe, 0xbf, 0x9f, 0xbf,
	0xbe, 0xfd, 0x05, 0xe7, 0xf7, 0xf8, 0xb5, 0xed, 0x4b, 0x17, 0xa4, 0xa0, 0x55, 0xdc, 0x5c, 0x28,
	0xe0, 0x0b, 0x75, 0x2f, 0x79, 0x58, 0xbc, 0xad, 0x87, 0xfc, 0x47, 0xf0, 0xd0, 0x8f, 0x7d, 0xd0,
	0x6b, 0xdf, 0x8b, 0x62, 0x6d, 0x02, 0xbb, 0xe9, 0xc5, 0xa8, 0x94, 0xf4, 0xbc, 0xeb, 0x9a, 0xc1,
	0x21, 0x4d, 0x2f, 0x53, 0x5c, 0xd8, 0x77, 0x2e, 0x15, 0x7c, 0x02, 0x4e, 0xb9, 0xa8, 0xd8, 0xa3,
	0x4f, 0x10, 0x6b, 0x5f, 0x05, 0x9e, 0x70, 0x88, 0x2d, 0xf0, 0xd1, 0x24, 0x48, 0x7e, 0x19, 0x39,
	0x27, 0x44, 0x1d, 0x4a, 0x47, 0xdf, 0xa0, 0xb9, 0x56, 0x6f, 0x79, 0xb6, 0xb9, 0x3a, 0xd0, 0xda,
	0x0d, 0x9d, 0xef, 0x90, 0x7a, 0x04, 0x9e, 0x7d, 0x05, 0xf6, 0x05, 0xe8, 0xb1, 0xab, 0xc2, 0xc3,
	0x6e, 0x93, 0xbf, 0x8e, 0x60, 0x20, 0xa7, 0x29, 0xd6, 0x92, 0xae, 0x97, 0x1a, 0x8f, 0x79, 0x5d,
	0x87, 0x2e, 0x4d, 0x97, 0x4d, 0x4d, 0xb1, 0xd8, 0xee, 0xd3, 0x21, 0x06, 0x06, 0x4d, 0xb7, 0xc9,
	0xe0, 0x79, 0x88, 0xd6, 0xd1, 0xb8, 0x29, 0xbd, 0xfb, 0xfb, 0x5e, 0x9d, 0xfa, 0xf9, 0x0e, 0x29,
	0x62, 0x0a, 0x4a, 0xd9, 0x73, 0x10, 0x77, 0x28, 0xd9, 0xaa, 0x74, 0xb6, 0xc4, 0xff, 0xc8, 0xef,
	0xf8, 0xf8, 0xff, 0xc8, 0x60, 0x3b, 0xe2, 0x05, 0x38, 0x97, 0x5b, 0x58, 0x9e, 0x93, 0xef, 0xcf,
	0x2d, 0x3f, 0x7c, 0x20, 0xbd, 0x22, 0x2f, 0xdc, 0xcf, 0x2d, 0xdc, 0x9a, 0x93, 0x67, 0xee, 0xdf,
	0x92, 0x1f, 0xbc, 0xba, 0x4c, 0x7f, 0xc7, 0x3b, 0xf0, 0x24, 0x8c, 0x1f, 0x02, 0xc4, 0xcf, 0xfa,
	0x2c, 0xdc, 0x5f, 0x9e, 0x93, 0xee, 0xcf, 0x2d, 0xcb, 0x2b, 0x0b, 0x4b, 0xf1, 0x20, 0x3e, 0x09,
	0x7d, 0x1e, 0x68, 0x71, 0x84, 0x13, 0xd0, 0xdf, 0xf0, 0xc1, 0xe6, 0xe4, 0xc3, 0x23, 0xf0, 0x92,
	0xd7, 0x17, 0x0f, 0xf2, 0x01, 0xfc, 0x62, 0x13, 0x95, 0xdc, 0x9c, 0xb4, 0xb2, 0x30, 0x3b, 0x17,
	0xf7, 0x0f, 0x76, 0xbe, 0x59, 0x43, 0x61, 0x08, 0xb2, 0x7b, 0x0d, 0xf8, 0x1c, 0x9c, 0x68, 0x94,
	0x62, 0x49, 0xbe, 0x3d, 0x93, 0x95, 0x16, 0x66, 0xe3, 0xa1, 0x41, 0xff, 0xce, 0x36, 0x1a, 0x0c,
	0x3c, 0xad, 0xa1, 0x8e, 0x11, 0x0d, 0x4e, 0x1e, 0x70, 0xb7, 0x10, 0xbf, 0x04, 0xa9, 0x46, 0x46,
	0x4b, 0x73, 0xb3, 0x0b, 0xb7, 0x17, 0xe6, 0x6e, 0x51, 0x41, 0x5c, 0x66, 0x7a, 0x11, 0xce, 0xb7,
	0x81, 0xb3, 0xb5, 0xe7, 0xfc, 0xb2, 0xbf, 0x81, 0x9e, 0xfd, 0x64, 0xa8, 0xe3, 0xad, 0x9f, 0x0c,
	0x75, 0xbc, 0xf3, 0x93, 0x21, 0xb4, 0xb3, 0x3f, 0x84, 0xfe, 0x70, 0x7f, 0x08, 0xbd, 0xb1, 0x3f,
	0x84, 0x9e, 0xed, 0x0f, 0xa1, 0xb7, 0xf6, 0x87, 0xd0, 0x8f, 0xf7, 0x87, 0xd0, 0xcf, 0xf7, 0x87,
	0x3a, 0xde, 0xd9, 0x1f, 0x42, 0x5f, 0x7d, 0x7b, 0xa8, 0xe3, 0xe9, 0xdb, 0x43, 0xe8, 0xd9, 0xdb,
	0x43, 0x1d, 0x6f, 0xbd, 0x3d, 0xd4, 0xf1, 0x7f, 0x16, 0x8a, 0x7a, 0xe5, 0x51, 0x71, 0xd4, 0x4e,
	0x03, 0xa3, 0x55, 0x73, 0x8c, 0xfd, 0xa0, 0x0b, 0xbd, 0xcb, 0x15, 0x43, 0xdf, 0x50, 0x0b, 0xc4,
	0xb8, 0x6c, 0x7f, 0x1e, 0xab, 0xac, 0x16, 0xf5, 0x31, 0xb2, 0x65, 0x89, 0xff, 0xa0, 0xc4, 0xfd,
	0x5f, 0xac, 0xac, 0x86, 0x58, 0x91, 0x36, 0xf1, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x19, 0x75,
	0x53, 0x84, 0x80, 0x45, 0x00, 0x00,
}

func (x SiteNetwork) String() string {
	s, ok := SiteNetwork_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SiteNetworkSpecifiedVIP) String() string {
	s, ok := SiteNetworkSpecifiedVIP_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ObjectRefType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectRefType)
	if !ok {
		that2, ok := that.(ObjectRefType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *LinkRefType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LinkRefType)
	if !ok {
		that2, ok := that.(LinkRefType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Href != that1.Href {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SiteLocator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteLocator)
	if !ok {
		that2, ok := that.(SiteLocator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *SiteLocator_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteLocator_Site)
	if !ok {
		that2, ok := that.(SiteLocator_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *SiteLocator_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteLocator_VirtualSite)
	if !ok {
		that2, ok := that.(SiteLocator_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *SiteReferenceListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteReferenceListType)
	if !ok {
		that2, ok := that.(SiteReferenceListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Refs) != len(that1.Refs) {
		return false
	}
	for i := range this.Refs {
		if !this.Refs[i].Equal(that1.Refs[i]) {
			return false
		}
	}
	return true
}
func (this *SiteRegionLocator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteRegionLocator)
	if !ok {
		that2, ok := that.(SiteRegionLocator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *SiteRegionLocator_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteRegionLocator_Site)
	if !ok {
		that2, ok := that.(SiteRegionLocator_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *SiteRegionLocator_CloudReRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteRegionLocator_CloudReRegion)
	if !ok {
		that2, ok := that.(SiteRegionLocator_CloudReRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CloudReRegion.Equal(that1.CloudReRegion) {
		return false
	}
	return true
}
func (this *SiteRegionLocator_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteRegionLocator_VirtualSite)
	if !ok {
		that2, ok := that.(SiteRegionLocator_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereVirtualNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualNetwork)
	if !ok {
		that2, ok := that.(WhereVirtualNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualNetwork.Equal(that1.VirtualNetwork) {
		return false
	}
	if that1.VipChoice == nil {
		if this.VipChoice != nil {
			return false
		}
	} else if this.VipChoice == nil {
		return false
	} else if !this.VipChoice.Equal(that1.VipChoice) {
		return false
	}
	if that1.V6VipChoice == nil {
		if this.V6VipChoice != nil {
			return false
		}
	} else if this.V6VipChoice == nil {
		return false
	} else if !this.V6VipChoice.Equal(that1.V6VipChoice) {
		return false
	}
	return true
}
func (this *WhereVirtualNetwork_DefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualNetwork_DefaultVip)
	if !ok {
		that2, ok := that.(WhereVirtualNetwork_DefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultVip.Equal(that1.DefaultVip) {
		return false
	}
	return true
}
func (this *WhereVirtualNetwork_SpecificVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualNetwork_SpecificVip)
	if !ok {
		that2, ok := that.(WhereVirtualNetwork_SpecificVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecificVip != that1.SpecificVip {
		return false
	}
	return true
}
func (this *WhereVirtualNetwork_DefaultV6Vip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualNetwork_DefaultV6Vip)
	if !ok {
		that2, ok := that.(WhereVirtualNetwork_DefaultV6Vip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultV6Vip.Equal(that1.DefaultV6Vip) {
		return false
	}
	return true
}
func (this *WhereVirtualNetwork_SpecificV6Vip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualNetwork_SpecificV6Vip)
	if !ok {
		that2, ok := that.(WhereVirtualNetwork_SpecificV6Vip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecificV6Vip != that1.SpecificV6Vip {
		return false
	}
	return true
}
func (this *WhereSegment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereSegment)
	if !ok {
		that2, ok := that.(WhereSegment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Segment.Equal(that1.Segment) {
		return false
	}
	if this.Ipv4Vip != that1.Ipv4Vip {
		return false
	}
	if this.Ipv6Vip != that1.Ipv6Vip {
		return false
	}
	return true
}
func (this *WhereSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereSite)
	if !ok {
		that2, ok := that.(WhereSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Ipv6 != that1.Ipv6 {
		return false
	}
	return true
}
func (this *WhereSiteSegment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereSiteSegment)
	if !ok {
		that2, ok := that.(WhereSiteSegment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Segment.Equal(that1.Segment) {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Ipv6 != that1.Ipv6 {
		return false
	}
	return true
}
func (this *WhereCloudEdgeSegment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereCloudEdgeSegment)
	if !ok {
		that2, ok := that.(WhereCloudEdgeSegment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Segment.Equal(that1.Segment) {
		return false
	}
	if !this.CloudEdge.Equal(that1.CloudEdge) {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Ipv6 != that1.Ipv6 {
		return false
	}
	return true
}
func (this *WhereVirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualSite)
	if !ok {
		that2, ok := that.(WhereVirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereVirtualSiteSpecifiedVIP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualSiteSpecifiedVIP)
	if !ok {
		that2, ok := that.(WhereVirtualSiteSpecifiedVIP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Ipv6 != that1.Ipv6 {
		return false
	}
	return true
}
func (this *WhereVirtualSiteSegment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualSiteSegment)
	if !ok {
		that2, ok := that.(WhereVirtualSiteSegment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Segment.Equal(that1.Segment) {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Ipv6 != that1.Ipv6 {
		return false
	}
	return true
}
func (this *WhereVK8SService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVK8SService)
	if !ok {
		that2, ok := that.(WhereVK8SService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *WhereVK8SService_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVK8SService_Site)
	if !ok {
		that2, ok := that.(WhereVK8SService_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *WhereVK8SService_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVK8SService_VirtualSite)
	if !ok {
		that2, ok := that.(WhereVK8SService_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType)
	if !ok {
		that2, ok := that.(WhereType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	return true
}
func (this *WhereType_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_Site)
	if !ok {
		that2, ok := that.(WhereType_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *WhereType_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_VirtualSite)
	if !ok {
		that2, ok := that.(WhereType_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereType_VirtualSiteWithVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_VirtualSiteWithVip)
	if !ok {
		that2, ok := that.(WhereType_VirtualSiteWithVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSiteWithVip.Equal(that1.VirtualSiteWithVip) {
		return false
	}
	return true
}
func (this *WhereType_Vk8SService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_Vk8SService)
	if !ok {
		that2, ok := that.(WhereType_Vk8SService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vk8SService.Equal(that1.Vk8SService) {
		return false
	}
	return true
}
func (this *WhereType_VirtualNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_VirtualNetwork)
	if !ok {
		that2, ok := that.(WhereType_VirtualNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualNetwork.Equal(that1.VirtualNetwork) {
		return false
	}
	return true
}
func (this *WhereType_SiteSegment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_SiteSegment)
	if !ok {
		that2, ok := that.(WhereType_SiteSegment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteSegment.Equal(that1.SiteSegment) {
		return false
	}
	return true
}
func (this *WhereType_VirtualSiteSegment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_VirtualSiteSegment)
	if !ok {
		that2, ok := that.(WhereType_VirtualSiteSegment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSiteSegment.Equal(that1.VirtualSiteSegment) {
		return false
	}
	return true
}
func (this *WhereType_CloudEdgeSegment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_CloudEdgeSegment)
	if !ok {
		that2, ok := that.(WhereType_CloudEdgeSegment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CloudEdgeSegment.Equal(that1.CloudEdgeSegment) {
		return false
	}
	return true
}
func (this *WhereType_Segment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_Segment)
	if !ok {
		that2, ok := that.(WhereType_Segment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Segment.Equal(that1.Segment) {
		return false
	}
	return true
}
func (this *WhereType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(WhereType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *WhereType_UseDefaultPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_UseDefaultPort)
	if !ok {
		that2, ok := that.(WhereType_UseDefaultPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultPort.Equal(that1.UseDefaultPort) {
		return false
	}
	return true
}
func (this *WhereType_Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_Port)
	if !ok {
		that2, ok := that.(WhereType_Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *WhereType_PortRanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_PortRanges)
	if !ok {
		that2, ok := that.(WhereType_PortRanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRanges != that1.PortRanges {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite_Site)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite_VirtualSite)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite_UseDefaultPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite_UseDefaultPort)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite_UseDefaultPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultPort.Equal(that1.UseDefaultPort) {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite_Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite_Port)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite_Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *AdvertisePublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvertisePublic)
	if !ok {
		that2, ok := that.(AdvertisePublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PublicIp.Equal(that1.PublicIp) {
		return false
	}
	return true
}
func (this *AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvertiseCustom)
	if !ok {
		that2, ok := that.(AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AdvertiseWhere) != len(that1.AdvertiseWhere) {
		return false
	}
	for i := range this.AdvertiseWhere {
		if !this.AdvertiseWhere[i].Equal(that1.AdvertiseWhere[i]) {
			return false
		}
	}
	return true
}
func (this *AdvertiseSiteVsite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvertiseSiteVsite)
	if !ok {
		that2, ok := that.(AdvertiseSiteVsite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AdvertiseWhere) != len(that1.AdvertiseWhere) {
		return false
	}
	for i := range this.AdvertiseWhere {
		if !this.AdvertiseWhere[i].Equal(that1.AdvertiseWhere[i]) {
			return false
		}
	}
	return true
}
func (this *CustomCiphers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomCiphers)
	if !ok {
		that2, ok := that.(CustomCiphers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinVersion != that1.MinVersion {
		return false
	}
	if this.MaxVersion != that1.MaxVersion {
		return false
	}
	if len(this.CipherSuites) != len(that1.CipherSuites) {
		return false
	}
	for i := range this.CipherSuites {
		if this.CipherSuites[i] != that1.CipherSuites[i] {
			return false
		}
	}
	return true
}
func (this *TlsConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig)
	if !ok {
		that2, ok := that.(TlsConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *TlsConfig_DefaultSecurity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig_DefaultSecurity)
	if !ok {
		that2, ok := that.(TlsConfig_DefaultSecurity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSecurity.Equal(that1.DefaultSecurity) {
		return false
	}
	return true
}
func (this *TlsConfig_MediumSecurity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig_MediumSecurity)
	if !ok {
		that2, ok := that.(TlsConfig_MediumSecurity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MediumSecurity.Equal(that1.MediumSecurity) {
		return false
	}
	return true
}
func (this *TlsConfig_LowSecurity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig_LowSecurity)
	if !ok {
		that2, ok := that.(TlsConfig_LowSecurity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LowSecurity.Equal(that1.LowSecurity) {
		return false
	}
	return true
}
func (this *TlsConfig_CustomSecurity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig_CustomSecurity)
	if !ok {
		that2, ok := that.(TlsConfig_CustomSecurity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomSecurity.Equal(that1.CustomSecurity) {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	if len(this.TlsCertificates) != len(that1.TlsCertificates) {
		return false
	}
	for i := range this.TlsCertificates {
		if !this.TlsCertificates[i].Equal(that1.TlsCertificates[i]) {
			return false
		}
	}
	if that1.MtlsChoice == nil {
		if this.MtlsChoice != nil {
			return false
		}
	} else if this.MtlsChoice == nil {
		return false
	} else if !this.MtlsChoice.Equal(that1.MtlsChoice) {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType_NoMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType_NoMtls)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType_NoMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoMtls.Equal(that1.NoMtls) {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType_UseMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType_UseMtls)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType_UseMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseMtls.Equal(that1.UseMtls) {
		return false
	}
	return true
}
func (this *DownstreamTLSCertsParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTLSCertsParams)
	if !ok {
		that2, ok := that.(DownstreamTLSCertsParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	if len(this.Certificates) != len(that1.Certificates) {
		return false
	}
	for i := range this.Certificates {
		if !this.Certificates[i].Equal(that1.Certificates[i]) {
			return false
		}
	}
	if that1.MtlsChoice == nil {
		if this.MtlsChoice != nil {
			return false
		}
	} else if this.MtlsChoice == nil {
		return false
	} else if !this.MtlsChoice.Equal(that1.MtlsChoice) {
		return false
	}
	return true
}
func (this *DownstreamTLSCertsParams_NoMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTLSCertsParams_NoMtls)
	if !ok {
		that2, ok := that.(DownstreamTLSCertsParams_NoMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoMtls.Equal(that1.NoMtls) {
		return false
	}
	return true
}
func (this *DownstreamTLSCertsParams_UseMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTLSCertsParams_UseMtls)
	if !ok {
		that2, ok := that.(DownstreamTLSCertsParams_UseMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseMtls.Equal(that1.UseMtls) {
		return false
	}
	return true
}
func (this *XfccHeaderKeys) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XfccHeaderKeys)
	if !ok {
		that2, ok := that.(XfccHeaderKeys)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.XfccHeaderElements) != len(that1.XfccHeaderElements) {
		return false
	}
	for i := range this.XfccHeaderElements {
		if this.XfccHeaderElements[i] != that1.XfccHeaderElements[i] {
			return false
		}
	}
	return true
}
func (this *DownstreamTlsValidationContext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsValidationContext)
	if !ok {
		that2, ok := that.(DownstreamTlsValidationContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TrustedCaChoice == nil {
		if this.TrustedCaChoice != nil {
			return false
		}
	} else if this.TrustedCaChoice == nil {
		return false
	} else if !this.TrustedCaChoice.Equal(that1.TrustedCaChoice) {
		return false
	}
	if this.ClientCertificateOptional != that1.ClientCertificateOptional {
		return false
	}
	if that1.CrlChoice == nil {
		if this.CrlChoice != nil {
			return false
		}
	} else if this.CrlChoice == nil {
		return false
	} else if !this.CrlChoice.Equal(that1.CrlChoice) {
		return false
	}
	if that1.XfccHeader == nil {
		if this.XfccHeader != nil {
			return false
		}
	} else if this.XfccHeader == nil {
		return false
	} else if !this.XfccHeader.Equal(that1.XfccHeader) {
		return false
	}
	return true
}
func (this *DownstreamTlsValidationContext_TrustedCaUrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsValidationContext_TrustedCaUrl)
	if !ok {
		that2, ok := that.(DownstreamTlsValidationContext_TrustedCaUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TrustedCaUrl != that1.TrustedCaUrl {
		return false
	}
	return true
}
func (this *DownstreamTlsValidationContext_TrustedCa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsValidationContext_TrustedCa)
	if !ok {
		that2, ok := that.(DownstreamTlsValidationContext_TrustedCa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TrustedCa.Equal(that1.TrustedCa) {
		return false
	}
	return true
}
func (this *DownstreamTlsValidationContext_NoCrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsValidationContext_NoCrl)
	if !ok {
		that2, ok := that.(DownstreamTlsValidationContext_NoCrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoCrl.Equal(that1.NoCrl) {
		return false
	}
	return true
}
func (this *DownstreamTlsValidationContext_Crl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsValidationContext_Crl)
	if !ok {
		that2, ok := that.(DownstreamTlsValidationContext_Crl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Crl.Equal(that1.Crl) {
		return false
	}
	return true
}
func (this *DownstreamTlsValidationContext_XfccDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsValidationContext_XfccDisabled)
	if !ok {
		that2, ok := that.(DownstreamTlsValidationContext_XfccDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.XfccDisabled.Equal(that1.XfccDisabled) {
		return false
	}
	return true
}
func (this *DownstreamTlsValidationContext_XfccOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsValidationContext_XfccOptions)
	if !ok {
		that2, ok := that.(DownstreamTlsValidationContext_XfccOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.XfccOptions.Equal(that1.XfccOptions) {
		return false
	}
	return true
}
func (this *OriginPoolWithWeight) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolWithWeight)
	if !ok {
		that2, ok := that.(OriginPoolWithWeight)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PoolChoice == nil {
		if this.PoolChoice != nil {
			return false
		}
	} else if this.PoolChoice == nil {
		return false
	} else if !this.PoolChoice.Equal(that1.PoolChoice) {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if len(this.EndpointSubsets) != len(that1.EndpointSubsets) {
		return false
	}
	for i := range this.EndpointSubsets {
		if this.EndpointSubsets[i] != that1.EndpointSubsets[i] {
			return false
		}
	}
	return true
}
func (this *OriginPoolWithWeight_Pool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolWithWeight_Pool)
	if !ok {
		that2, ok := that.(OriginPoolWithWeight_Pool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pool.Equal(that1.Pool) {
		return false
	}
	return true
}
func (this *OriginPoolWithWeight_Cluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolWithWeight_Cluster)
	if !ok {
		that2, ok := that.(OriginPoolWithWeight_Cluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cluster.Equal(that1.Cluster) {
		return false
	}
	return true
}
func (this *OriginPoolListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolListType)
	if !ok {
		that2, ok := that.(OriginPoolListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pools) != len(that1.Pools) {
		return false
	}
	for i := range this.Pools {
		if !this.Pools[i].Equal(that1.Pools[i]) {
			return false
		}
	}
	return true
}
func (this *PrefixStringListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrefixStringListType)
	if !ok {
		that2, ok := that.(PrefixStringListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Prefixes) != len(that1.Prefixes) {
		return false
	}
	for i := range this.Prefixes {
		if this.Prefixes[i] != that1.Prefixes[i] {
			return false
		}
	}
	if len(this.Ipv6Prefixes) != len(that1.Ipv6Prefixes) {
		return false
	}
	for i := range this.Ipv6Prefixes {
		if this.Ipv6Prefixes[i] != that1.Ipv6Prefixes[i] {
			return false
		}
	}
	return true
}
func (this *GlobalConnectorType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalConnectorType)
	if !ok {
		that2, ok := that.(GlobalConnectorType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalVn.Equal(that1.GlobalVn) {
		return false
	}
	return true
}
func (this *SegmentRefList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SegmentRefList)
	if !ok {
		that2, ok := that.(SegmentRefList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Segments) != len(that1.Segments) {
		return false
	}
	for i := range this.Segments {
		if !this.Segments[i].Equal(that1.Segments[i]) {
			return false
		}
	}
	return true
}
func (this *VolterraSoftwareType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VolterraSoftwareType)
	if !ok {
		that2, ok := that.(VolterraSoftwareType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.VolterraSwVersionChoice == nil {
		if this.VolterraSwVersionChoice != nil {
			return false
		}
	} else if this.VolterraSwVersionChoice == nil {
		return false
	} else if !this.VolterraSwVersionChoice.Equal(that1.VolterraSwVersionChoice) {
		return false
	}
	return true
}
func (this *VolterraSoftwareType_DefaultSwVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VolterraSoftwareType_DefaultSwVersion)
	if !ok {
		that2, ok := that.(VolterraSoftwareType_DefaultSwVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSwVersion.Equal(that1.DefaultSwVersion) {
		return false
	}
	return true
}
func (this *VolterraSoftwareType_VolterraSoftwareVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VolterraSoftwareType_VolterraSoftwareVersion)
	if !ok {
		that2, ok := that.(VolterraSoftwareType_VolterraSoftwareVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	return true
}
func (this *OperatingSystemType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OperatingSystemType)
	if !ok {
		that2, ok := that.(OperatingSystemType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OperatingSystemVersionChoice == nil {
		if this.OperatingSystemVersionChoice != nil {
			return false
		}
	} else if this.OperatingSystemVersionChoice == nil {
		return false
	} else if !this.OperatingSystemVersionChoice.Equal(that1.OperatingSystemVersionChoice) {
		return false
	}
	return true
}
func (this *OperatingSystemType_DefaultOsVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OperatingSystemType_DefaultOsVersion)
	if !ok {
		that2, ok := that.(OperatingSystemType_DefaultOsVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultOsVersion.Equal(that1.DefaultOsVersion) {
		return false
	}
	return true
}
func (this *OperatingSystemType_OperatingSystemVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OperatingSystemType_OperatingSystemVersion)
	if !ok {
		that2, ok := that.(OperatingSystemType_OperatingSystemVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	return true
}
func (this *KubernetesUpgradeDrain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KubernetesUpgradeDrain)
	if !ok {
		that2, ok := that.(KubernetesUpgradeDrain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.KubernetesUpgradeDrainEnableChoice == nil {
		if this.KubernetesUpgradeDrainEnableChoice != nil {
			return false
		}
	} else if this.KubernetesUpgradeDrainEnableChoice == nil {
		return false
	} else if !this.KubernetesUpgradeDrainEnableChoice.Equal(that1.KubernetesUpgradeDrainEnableChoice) {
		return false
	}
	return true
}
func (this *KubernetesUpgradeDrain_EnableUpgradeDrain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KubernetesUpgradeDrain_EnableUpgradeDrain)
	if !ok {
		that2, ok := that.(KubernetesUpgradeDrain_EnableUpgradeDrain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableUpgradeDrain.Equal(that1.EnableUpgradeDrain) {
		return false
	}
	return true
}
func (this *KubernetesUpgradeDrain_DisableUpgradeDrain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KubernetesUpgradeDrain_DisableUpgradeDrain)
	if !ok {
		that2, ok := that.(KubernetesUpgradeDrain_DisableUpgradeDrain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableUpgradeDrain.Equal(that1.DisableUpgradeDrain) {
		return false
	}
	return true
}
func (this *RegionalEdgeSelection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegionalEdgeSelection)
	if !ok {
		that2, ok := that.(RegionalEdgeSelection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ReSelectionChoice == nil {
		if this.ReSelectionChoice != nil {
			return false
		}
	} else if this.ReSelectionChoice == nil {
		return false
	} else if !this.ReSelectionChoice.Equal(that1.ReSelectionChoice) {
		return false
	}
	return true
}
func (this *RegionalEdgeSelection_GeoProximity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegionalEdgeSelection_GeoProximity)
	if !ok {
		that2, ok := that.(RegionalEdgeSelection_GeoProximity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GeoProximity.Equal(that1.GeoProximity) {
		return false
	}
	return true
}
func (this *RegionalEdgeSelection_SpecificGeography) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegionalEdgeSelection_SpecificGeography)
	if !ok {
		that2, ok := that.(RegionalEdgeSelection_SpecificGeography)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecificGeography != that1.SpecificGeography {
		return false
	}
	return true
}
func (this *RegionalEdgeSelection_SpecificRe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegionalEdgeSelection_SpecificRe)
	if !ok {
		that2, ok := that.(RegionalEdgeSelection_SpecificRe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SpecificRe.Equal(that1.SpecificRe) {
		return false
	}
	return true
}
func (this *AdminUserCredentialsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminUserCredentialsType)
	if !ok {
		that2, ok := that.(AdminUserCredentialsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if !this.AdminPassword.Equal(that1.AdminPassword) {
		return false
	}
	return true
}
func (this *ProactiveMonitoringChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProactiveMonitoringChoice)
	if !ok {
		that2, ok := that.(ProactiveMonitoringChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProactiveMonitoringChoice == nil {
		if this.ProactiveMonitoringChoice != nil {
			return false
		}
	} else if this.ProactiveMonitoringChoice == nil {
		return false
	} else if !this.ProactiveMonitoringChoice.Equal(that1.ProactiveMonitoringChoice) {
		return false
	}
	return true
}
func (this *ProactiveMonitoringChoice_ProactiveMonitoringEnable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProactiveMonitoringChoice_ProactiveMonitoringEnable)
	if !ok {
		that2, ok := that.(ProactiveMonitoringChoice_ProactiveMonitoringEnable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProactiveMonitoringEnable.Equal(that1.ProactiveMonitoringEnable) {
		return false
	}
	return true
}
func (this *ProactiveMonitoringChoice_ProactiveMonitoringDisable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProactiveMonitoringChoice_ProactiveMonitoringDisable)
	if !ok {
		that2, ok := that.(ProactiveMonitoringChoice_ProactiveMonitoringDisable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProactiveMonitoringDisable.Equal(that1.ProactiveMonitoringDisable) {
		return false
	}
	return true
}
func (this *SpecificRE) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpecificRE)
	if !ok {
		that2, ok := that.(SpecificRE)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PrimaryRe != that1.PrimaryRe {
		return false
	}
	if this.BackupRe != that1.BackupRe {
		return false
	}
	return true
}
func (this *KubernetesUpgradeDrainConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KubernetesUpgradeDrainConfig)
	if !ok {
		that2, ok := that.(KubernetesUpgradeDrainConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DrainNodeTimeout != that1.DrainNodeTimeout {
		return false
	}
	if that1.DrainMaxUnavailableChoice == nil {
		if this.DrainMaxUnavailableChoice != nil {
			return false
		}
	} else if this.DrainMaxUnavailableChoice == nil {
		return false
	} else if !this.DrainMaxUnavailableChoice.Equal(that1.DrainMaxUnavailableChoice) {
		return false
	}
	if that1.VegaUpgradeModeToggleChoice == nil {
		if this.VegaUpgradeModeToggleChoice != nil {
			return false
		}
	} else if this.VegaUpgradeModeToggleChoice == nil {
		return false
	} else if !this.VegaUpgradeModeToggleChoice.Equal(that1.VegaUpgradeModeToggleChoice) {
		return false
	}
	return true
}
func (this *KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount)
	if !ok {
		that2, ok := that.(KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DrainMaxUnavailableNodeCount != that1.DrainMaxUnavailableNodeCount {
		return false
	}
	return true
}
func (this *KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage)
	if !ok {
		that2, ok := that.(KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DrainMaxUnavailableNodePercentage != that1.DrainMaxUnavailableNodePercentage {
		return false
	}
	return true
}
func (this *KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode)
	if !ok {
		that2, ok := that.(KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableVegaUpgradeMode.Equal(that1.DisableVegaUpgradeMode) {
		return false
	}
	return true
}
func (this *KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode)
	if !ok {
		that2, ok := that.(KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableVegaUpgradeMode.Equal(that1.EnableVegaUpgradeMode) {
		return false
	}
	return true
}
func (this *PerformanceEnhancementModeType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerformanceEnhancementModeType)
	if !ok {
		that2, ok := that.(PerformanceEnhancementModeType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PerfModeChoice == nil {
		if this.PerfModeChoice != nil {
			return false
		}
	} else if this.PerfModeChoice == nil {
		return false
	} else if !this.PerfModeChoice.Equal(that1.PerfModeChoice) {
		return false
	}
	return true
}
func (this *PerformanceEnhancementModeType_PerfModeL7Enhanced) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerformanceEnhancementModeType_PerfModeL7Enhanced)
	if !ok {
		that2, ok := that.(PerformanceEnhancementModeType_PerfModeL7Enhanced)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PerfModeL7Enhanced.Equal(that1.PerfModeL7Enhanced) {
		return false
	}
	return true
}
func (this *PerformanceEnhancementModeType_PerfModeL3Enhanced) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerformanceEnhancementModeType_PerfModeL3Enhanced)
	if !ok {
		that2, ok := that.(PerformanceEnhancementModeType_PerfModeL3Enhanced)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PerfModeL3Enhanced.Equal(that1.PerfModeL3Enhanced) {
		return false
	}
	return true
}
func (this *AcceleratedNetworkingType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AcceleratedNetworkingType)
	if !ok {
		that2, ok := that.(AcceleratedNetworkingType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AcceleratedNetworking == nil {
		if this.AcceleratedNetworking != nil {
			return false
		}
	} else if this.AcceleratedNetworking == nil {
		return false
	} else if !this.AcceleratedNetworking.Equal(that1.AcceleratedNetworking) {
		return false
	}
	return true
}
func (this *AcceleratedNetworkingType_Disable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AcceleratedNetworkingType_Disable)
	if !ok {
		that2, ok := that.(AcceleratedNetworkingType_Disable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disable.Equal(that1.Disable) {
		return false
	}
	return true
}
func (this *AcceleratedNetworkingType_Enable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AcceleratedNetworkingType_Enable)
	if !ok {
		that2, ok := that.(AcceleratedNetworkingType_Enable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enable.Equal(that1.Enable) {
		return false
	}
	return true
}
func (this *L3PerformanceEnhancementType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*L3PerformanceEnhancementType)
	if !ok {
		that2, ok := that.(L3PerformanceEnhancementType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PerfModeChoice == nil {
		if this.PerfModeChoice != nil {
			return false
		}
	} else if this.PerfModeChoice == nil {
		return false
	} else if !this.PerfModeChoice.Equal(that1.PerfModeChoice) {
		return false
	}
	return true
}
func (this *L3PerformanceEnhancementType_NoJumbo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*L3PerformanceEnhancementType_NoJumbo)
	if !ok {
		that2, ok := that.(L3PerformanceEnhancementType_NoJumbo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoJumbo.Equal(that1.NoJumbo) {
		return false
	}
	return true
}
func (this *L3PerformanceEnhancementType_Jumbo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*L3PerformanceEnhancementType_Jumbo)
	if !ok {
		that2, ok := that.(L3PerformanceEnhancementType_Jumbo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Jumbo.Equal(that1.Jumbo) {
		return false
	}
	return true
}
func (this *InternetVIPInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InternetVIPInfo)
	if !ok {
		that2, ok := that.(InternetVIPInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SiteName != that1.SiteName {
		return false
	}
	if this.SiteNetworkType != that1.SiteNetworkType {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *InternetVIPStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InternetVIPStatus)
	if !ok {
		that2, ok := that.(InternetVIPStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NlbCname != that1.NlbCname {
		return false
	}
	if this.NlbStatus != that1.NlbStatus {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Arn != that1.Arn {
		return false
	}
	if len(this.TargetGroupStatus) != len(that1.TargetGroupStatus) {
		return false
	}
	for i := range this.TargetGroupStatus {
		if !this.TargetGroupStatus[i].Equal(that1.TargetGroupStatus[i]) {
			return false
		}
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *InternetVIPTargetGroupStatusType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InternetVIPTargetGroupStatusType)
	if !ok {
		that2, ok := that.(InternetVIPTargetGroupStatusType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Arn != that1.Arn {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if len(this.ListenerStatus) != len(that1.ListenerStatus) {
		return false
	}
	for i := range this.ListenerStatus {
		if !this.ListenerStatus[i].Equal(that1.ListenerStatus[i]) {
			return false
		}
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *InternetVIPListenerStatusType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InternetVIPListenerStatusType)
	if !ok {
		that2, ok := that.(InternetVIPListenerStatusType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Arn != that1.Arn {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *MasterNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MasterNode)
	if !ok {
		that2, ok := that.(MasterNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.PublicIp != that1.PublicIp {
		return false
	}
	return true
}
func (this *ApiOperation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiOperation)
	if !ok {
		that2, ok := that.(ApiOperation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	return true
}
func (this *ApiEndpointWithSchema) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointWithSchema)
	if !ok {
		that2, ok := that.(ApiEndpointWithSchema)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiOperation.Equal(that1.ApiOperation) {
		return false
	}
	if this.SchemaJson != that1.SchemaJson {
		return false
	}
	return true
}
func (this *CustomDNS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDNS)
	if !ok {
		that2, ok := that.(CustomDNS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InsideNameserver != that1.InsideNameserver {
		return false
	}
	if this.OutsideNameserver != that1.OutsideNameserver {
		return false
	}
	if this.InsideNameserverV6 != that1.InsideNameserverV6 {
		return false
	}
	if this.OutsideNameserverV6 != that1.OutsideNameserverV6 {
		return false
	}
	return true
}
func (this *TGWAssignedASNType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TGWAssignedASNType)
	if !ok {
		that2, ok := that.(TGWAssignedASNType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TgwAsn != that1.TgwAsn {
		return false
	}
	if this.VolterraSiteAsn != that1.VolterraSiteAsn {
		return false
	}
	return true
}
func (this *TGWParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TGWParamsType)
	if !ok {
		that2, ok := that.(TGWParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AsnChoice == nil {
		if this.AsnChoice != nil {
			return false
		}
	} else if this.AsnChoice == nil {
		return false
	} else if !this.AsnChoice.Equal(that1.AsnChoice) {
		return false
	}
	return true
}
func (this *TGWParamsType_SystemGenerated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TGWParamsType_SystemGenerated)
	if !ok {
		that2, ok := that.(TGWParamsType_SystemGenerated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemGenerated.Equal(that1.SystemGenerated) {
		return false
	}
	return true
}
func (this *TGWParamsType_UserAssigned) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TGWParamsType_UserAssigned)
	if !ok {
		that2, ok := that.(TGWParamsType_UserAssigned)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserAssigned.Equal(that1.UserAssigned) {
		return false
	}
	return true
}
func (this *ExistingTGWType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExistingTGWType)
	if !ok {
		that2, ok := that.(ExistingTGWType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TgwId != that1.TgwId {
		return false
	}
	if this.TgwAsn != that1.TgwAsn {
		return false
	}
	if this.VolterraSiteAsn != that1.VolterraSiteAsn {
		return false
	}
	return true
}
func (this *NetworkSelectType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkSelectType)
	if !ok {
		that2, ok := that.(NetworkSelectType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	return true
}
func (this *NetworkSelectType_SiteLocalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkSelectType_SiteLocalNetwork)
	if !ok {
		that2, ok := that.(NetworkSelectType_SiteLocalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalNetwork.Equal(that1.SiteLocalNetwork) {
		return false
	}
	return true
}
func (this *NetworkSelectType_SiteLocalInsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkSelectType_SiteLocalInsideNetwork)
	if !ok {
		that2, ok := that.(NetworkSelectType_SiteLocalInsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalInsideNetwork.Equal(that1.SiteLocalInsideNetwork) {
		return false
	}
	return true
}
func (this *NetworkSelectType_SegmentNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkSelectType_SegmentNetwork)
	if !ok {
		that2, ok := that.(NetworkSelectType_SegmentNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SegmentNetwork.Equal(that1.SegmentNetwork) {
		return false
	}
	return true
}
func (this *SnatPoolConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnatPoolConfiguration)
	if !ok {
		that2, ok := that.(SnatPoolConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SnatPoolChoice == nil {
		if this.SnatPoolChoice != nil {
			return false
		}
	} else if this.SnatPoolChoice == nil {
		return false
	} else if !this.SnatPoolChoice.Equal(that1.SnatPoolChoice) {
		return false
	}
	return true
}
func (this *SnatPoolConfiguration_NoSnatPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnatPoolConfiguration_NoSnatPool)
	if !ok {
		that2, ok := that.(SnatPoolConfiguration_NoSnatPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoSnatPool.Equal(that1.NoSnatPool) {
		return false
	}
	return true
}
func (this *SnatPoolConfiguration_SnatPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnatPoolConfiguration_SnatPool)
	if !ok {
		that2, ok := that.(SnatPoolConfiguration_SnatPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SnatPool.Equal(that1.SnatPool) {
		return false
	}
	return true
}
func (this *ObjectRefType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.ObjectRefType{")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LinkRefType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.LinkRefType{")
	s = append(s, "Href: "+fmt.Sprintf("%#v", this.Href)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteLocator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.SiteLocator{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteLocator_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.SiteLocator_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *SiteLocator_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.SiteLocator_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *SiteReferenceListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.SiteReferenceListType{")
	if this.Refs != nil {
		s = append(s, "Refs: "+fmt.Sprintf("%#v", this.Refs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteRegionLocator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.SiteRegionLocator{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteRegionLocator_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.SiteRegionLocator_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *SiteRegionLocator_CloudReRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.SiteRegionLocator_CloudReRegion{` +
		`CloudReRegion:` + fmt.Sprintf("%#v", this.CloudReRegion) + `}`}, ", ")
	return s
}
func (this *SiteRegionLocator_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.SiteRegionLocator_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *WhereVirtualNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&views.WhereVirtualNetwork{")
	if this.VirtualNetwork != nil {
		s = append(s, "VirtualNetwork: "+fmt.Sprintf("%#v", this.VirtualNetwork)+",\n")
	}
	if this.VipChoice != nil {
		s = append(s, "VipChoice: "+fmt.Sprintf("%#v", this.VipChoice)+",\n")
	}
	if this.V6VipChoice != nil {
		s = append(s, "V6VipChoice: "+fmt.Sprintf("%#v", this.V6VipChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVirtualNetwork_DefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereVirtualNetwork_DefaultVip{` +
		`DefaultVip:` + fmt.Sprintf("%#v", this.DefaultVip) + `}`}, ", ")
	return s
}
func (this *WhereVirtualNetwork_SpecificVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereVirtualNetwork_SpecificVip{` +
		`SpecificVip:` + fmt.Sprintf("%#v", this.SpecificVip) + `}`}, ", ")
	return s
}
func (this *WhereVirtualNetwork_DefaultV6Vip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereVirtualNetwork_DefaultV6Vip{` +
		`DefaultV6Vip:` + fmt.Sprintf("%#v", this.DefaultV6Vip) + `}`}, ", ")
	return s
}
func (this *WhereVirtualNetwork_SpecificV6Vip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereVirtualNetwork_SpecificV6Vip{` +
		`SpecificV6Vip:` + fmt.Sprintf("%#v", this.SpecificV6Vip) + `}`}, ", ")
	return s
}
func (this *WhereSegment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.WhereSegment{")
	if this.Segment != nil {
		s = append(s, "Segment: "+fmt.Sprintf("%#v", this.Segment)+",\n")
	}
	s = append(s, "Ipv4Vip: "+fmt.Sprintf("%#v", this.Ipv4Vip)+",\n")
	s = append(s, "Ipv6Vip: "+fmt.Sprintf("%#v", this.Ipv6Vip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.WhereSite{")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	if this.Site != nil {
		s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	}
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "Ipv6: "+fmt.Sprintf("%#v", this.Ipv6)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereSiteSegment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.WhereSiteSegment{")
	if this.Segment != nil {
		s = append(s, "Segment: "+fmt.Sprintf("%#v", this.Segment)+",\n")
	}
	if this.Site != nil {
		s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	}
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "Ipv6: "+fmt.Sprintf("%#v", this.Ipv6)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereCloudEdgeSegment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.WhereCloudEdgeSegment{")
	if this.Segment != nil {
		s = append(s, "Segment: "+fmt.Sprintf("%#v", this.Segment)+",\n")
	}
	if this.CloudEdge != nil {
		s = append(s, "CloudEdge: "+fmt.Sprintf("%#v", this.CloudEdge)+",\n")
	}
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "Ipv6: "+fmt.Sprintf("%#v", this.Ipv6)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.WhereVirtualSite{")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	if this.VirtualSite != nil {
		s = append(s, "VirtualSite: "+fmt.Sprintf("%#v", this.VirtualSite)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVirtualSiteSpecifiedVIP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.WhereVirtualSiteSpecifiedVIP{")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	if this.VirtualSite != nil {
		s = append(s, "VirtualSite: "+fmt.Sprintf("%#v", this.VirtualSite)+",\n")
	}
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "Ipv6: "+fmt.Sprintf("%#v", this.Ipv6)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVirtualSiteSegment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.WhereVirtualSiteSegment{")
	if this.Segment != nil {
		s = append(s, "Segment: "+fmt.Sprintf("%#v", this.Segment)+",\n")
	}
	if this.VirtualSite != nil {
		s = append(s, "VirtualSite: "+fmt.Sprintf("%#v", this.VirtualSite)+",\n")
	}
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "Ipv6: "+fmt.Sprintf("%#v", this.Ipv6)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVK8SService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.WhereVK8SService{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVK8SService_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereVK8SService_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *WhereVK8SService_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereVK8SService_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *WhereType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&views.WhereType{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereType_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *WhereType_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *WhereType_VirtualSiteWithVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_VirtualSiteWithVip{` +
		`VirtualSiteWithVip:` + fmt.Sprintf("%#v", this.VirtualSiteWithVip) + `}`}, ", ")
	return s
}
func (this *WhereType_Vk8SService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_Vk8SService{` +
		`Vk8SService:` + fmt.Sprintf("%#v", this.Vk8SService) + `}`}, ", ")
	return s
}
func (this *WhereType_VirtualNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_VirtualNetwork{` +
		`VirtualNetwork:` + fmt.Sprintf("%#v", this.VirtualNetwork) + `}`}, ", ")
	return s
}
func (this *WhereType_SiteSegment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_SiteSegment{` +
		`SiteSegment:` + fmt.Sprintf("%#v", this.SiteSegment) + `}`}, ", ")
	return s
}
func (this *WhereType_VirtualSiteSegment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_VirtualSiteSegment{` +
		`VirtualSiteSegment:` + fmt.Sprintf("%#v", this.VirtualSiteSegment) + `}`}, ", ")
	return s
}
func (this *WhereType_CloudEdgeSegment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_CloudEdgeSegment{` +
		`CloudEdgeSegment:` + fmt.Sprintf("%#v", this.CloudEdgeSegment) + `}`}, ", ")
	return s
}
func (this *WhereType_Segment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_Segment{` +
		`Segment:` + fmt.Sprintf("%#v", this.Segment) + `}`}, ", ")
	return s
}
func (this *WhereType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *WhereType_UseDefaultPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_UseDefaultPort{` +
		`UseDefaultPort:` + fmt.Sprintf("%#v", this.UseDefaultPort) + `}`}, ", ")
	return s
}
func (this *WhereType_Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_Port{` +
		`Port:` + fmt.Sprintf("%#v", this.Port) + `}`}, ", ")
	return s
}
func (this *WhereType_PortRanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_PortRanges{` +
		`PortRanges:` + fmt.Sprintf("%#v", this.PortRanges) + `}`}, ", ")
	return s
}
func (this *WhereTypeSiteVsite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.WhereTypeSiteVsite{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereTypeSiteVsite_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereTypeSiteVsite_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *WhereTypeSiteVsite_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereTypeSiteVsite_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *WhereTypeSiteVsite_UseDefaultPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereTypeSiteVsite_UseDefaultPort{` +
		`UseDefaultPort:` + fmt.Sprintf("%#v", this.UseDefaultPort) + `}`}, ", ")
	return s
}
func (this *WhereTypeSiteVsite_Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereTypeSiteVsite_Port{` +
		`Port:` + fmt.Sprintf("%#v", this.Port) + `}`}, ", ")
	return s
}
func (this *AdvertisePublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.AdvertisePublic{")
	if this.PublicIp != nil {
		s = append(s, "PublicIp: "+fmt.Sprintf("%#v", this.PublicIp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.AdvertiseCustom{")
	if this.AdvertiseWhere != nil {
		s = append(s, "AdvertiseWhere: "+fmt.Sprintf("%#v", this.AdvertiseWhere)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvertiseSiteVsite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.AdvertiseSiteVsite{")
	if this.AdvertiseWhere != nil {
		s = append(s, "AdvertiseWhere: "+fmt.Sprintf("%#v", this.AdvertiseWhere)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomCiphers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.CustomCiphers{")
	s = append(s, "MinVersion: "+fmt.Sprintf("%#v", this.MinVersion)+",\n")
	s = append(s, "MaxVersion: "+fmt.Sprintf("%#v", this.MaxVersion)+",\n")
	s = append(s, "CipherSuites: "+fmt.Sprintf("%#v", this.CipherSuites)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TlsConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.TlsConfig{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TlsConfig_DefaultSecurity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.TlsConfig_DefaultSecurity{` +
		`DefaultSecurity:` + fmt.Sprintf("%#v", this.DefaultSecurity) + `}`}, ", ")
	return s
}
func (this *TlsConfig_MediumSecurity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.TlsConfig_MediumSecurity{` +
		`MediumSecurity:` + fmt.Sprintf("%#v", this.MediumSecurity) + `}`}, ", ")
	return s
}
func (this *TlsConfig_LowSecurity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.TlsConfig_LowSecurity{` +
		`LowSecurity:` + fmt.Sprintf("%#v", this.LowSecurity) + `}`}, ", ")
	return s
}
func (this *TlsConfig_CustomSecurity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.TlsConfig_CustomSecurity{` +
		`CustomSecurity:` + fmt.Sprintf("%#v", this.CustomSecurity) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.DownstreamTlsParamsType{")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	if this.TlsCertificates != nil {
		s = append(s, "TlsCertificates: "+fmt.Sprintf("%#v", this.TlsCertificates)+",\n")
	}
	if this.MtlsChoice != nil {
		s = append(s, "MtlsChoice: "+fmt.Sprintf("%#v", this.MtlsChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownstreamTlsParamsType_NoMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.DownstreamTlsParamsType_NoMtls{` +
		`NoMtls:` + fmt.Sprintf("%#v", this.NoMtls) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsParamsType_UseMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.DownstreamTlsParamsType_UseMtls{` +
		`UseMtls:` + fmt.Sprintf("%#v", this.UseMtls) + `}`}, ", ")
	return s
}
func (this *DownstreamTLSCertsParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.DownstreamTLSCertsParams{")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	if this.Certificates != nil {
		s = append(s, "Certificates: "+fmt.Sprintf("%#v", this.Certificates)+",\n")
	}
	if this.MtlsChoice != nil {
		s = append(s, "MtlsChoice: "+fmt.Sprintf("%#v", this.MtlsChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownstreamTLSCertsParams_NoMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.DownstreamTLSCertsParams_NoMtls{` +
		`NoMtls:` + fmt.Sprintf("%#v", this.NoMtls) + `}`}, ", ")
	return s
}
func (this *DownstreamTLSCertsParams_UseMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.DownstreamTLSCertsParams_UseMtls{` +
		`UseMtls:` + fmt.Sprintf("%#v", this.UseMtls) + `}`}, ", ")
	return s
}
func (this *XfccHeaderKeys) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.XfccHeaderKeys{")
	s = append(s, "XfccHeaderElements: "+fmt.Sprintf("%#v", this.XfccHeaderElements)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownstreamTlsValidationContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&views.DownstreamTlsValidationContext{")
	if this.TrustedCaChoice != nil {
		s = append(s, "TrustedCaChoice: "+fmt.Sprintf("%#v", this.TrustedCaChoice)+",\n")
	}
	s = append(s, "ClientCertificateOptional: "+fmt.Sprintf("%#v", this.ClientCertificateOptional)+",\n")
	if this.CrlChoice != nil {
		s = append(s, "CrlChoice: "+fmt.Sprintf("%#v", this.CrlChoice)+",\n")
	}
	if this.XfccHeader != nil {
		s = append(s, "XfccHeader: "+fmt.Sprintf("%#v", this.XfccHeader)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownstreamTlsValidationContext_TrustedCaUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.DownstreamTlsValidationContext_TrustedCaUrl{` +
		`TrustedCaUrl:` + fmt.Sprintf("%#v", this.TrustedCaUrl) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsValidationContext_TrustedCa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.DownstreamTlsValidationContext_TrustedCa{` +
		`TrustedCa:` + fmt.Sprintf("%#v", this.TrustedCa) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsValidationContext_NoCrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.DownstreamTlsValidationContext_NoCrl{` +
		`NoCrl:` + fmt.Sprintf("%#v", this.NoCrl) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsValidationContext_Crl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.DownstreamTlsValidationContext_Crl{` +
		`Crl:` + fmt.Sprintf("%#v", this.Crl) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsValidationContext_XfccDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.DownstreamTlsValidationContext_XfccDisabled{` +
		`XfccDisabled:` + fmt.Sprintf("%#v", this.XfccDisabled) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsValidationContext_XfccOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.DownstreamTlsValidationContext_XfccOptions{` +
		`XfccOptions:` + fmt.Sprintf("%#v", this.XfccOptions) + `}`}, ", ")
	return s
}
func (this *OriginPoolWithWeight) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&views.OriginPoolWithWeight{")
	if this.PoolChoice != nil {
		s = append(s, "PoolChoice: "+fmt.Sprintf("%#v", this.PoolChoice)+",\n")
	}
	s = append(s, "Weight: "+fmt.Sprintf("%#v", this.Weight)+",\n")
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	keysForEndpointSubsets := make([]string, 0, len(this.EndpointSubsets))
	for k, _ := range this.EndpointSubsets {
		keysForEndpointSubsets = append(keysForEndpointSubsets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEndpointSubsets)
	mapStringForEndpointSubsets := "map[string]string{"
	for _, k := range keysForEndpointSubsets {
		mapStringForEndpointSubsets += fmt.Sprintf("%#v: %#v,", k, this.EndpointSubsets[k])
	}
	mapStringForEndpointSubsets += "}"
	if this.EndpointSubsets != nil {
		s = append(s, "EndpointSubsets: "+mapStringForEndpointSubsets+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginPoolWithWeight_Pool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.OriginPoolWithWeight_Pool{` +
		`Pool:` + fmt.Sprintf("%#v", this.Pool) + `}`}, ", ")
	return s
}
func (this *OriginPoolWithWeight_Cluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.OriginPoolWithWeight_Cluster{` +
		`Cluster:` + fmt.Sprintf("%#v", this.Cluster) + `}`}, ", ")
	return s
}
func (this *OriginPoolListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.OriginPoolListType{")
	if this.Pools != nil {
		s = append(s, "Pools: "+fmt.Sprintf("%#v", this.Pools)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrefixStringListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.PrefixStringListType{")
	s = append(s, "Prefixes: "+fmt.Sprintf("%#v", this.Prefixes)+",\n")
	s = append(s, "Ipv6Prefixes: "+fmt.Sprintf("%#v", this.Ipv6Prefixes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalConnectorType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.GlobalConnectorType{")
	if this.GlobalVn != nil {
		s = append(s, "GlobalVn: "+fmt.Sprintf("%#v", this.GlobalVn)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SegmentRefList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.SegmentRefList{")
	if this.Segments != nil {
		s = append(s, "Segments: "+fmt.Sprintf("%#v", this.Segments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VolterraSoftwareType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.VolterraSoftwareType{")
	if this.VolterraSwVersionChoice != nil {
		s = append(s, "VolterraSwVersionChoice: "+fmt.Sprintf("%#v", this.VolterraSwVersionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VolterraSoftwareType_DefaultSwVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.VolterraSoftwareType_DefaultSwVersion{` +
		`DefaultSwVersion:` + fmt.Sprintf("%#v", this.DefaultSwVersion) + `}`}, ", ")
	return s
}
func (this *VolterraSoftwareType_VolterraSoftwareVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.VolterraSoftwareType_VolterraSoftwareVersion{` +
		`VolterraSoftwareVersion:` + fmt.Sprintf("%#v", this.VolterraSoftwareVersion) + `}`}, ", ")
	return s
}
func (this *OperatingSystemType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.OperatingSystemType{")
	if this.OperatingSystemVersionChoice != nil {
		s = append(s, "OperatingSystemVersionChoice: "+fmt.Sprintf("%#v", this.OperatingSystemVersionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OperatingSystemType_DefaultOsVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.OperatingSystemType_DefaultOsVersion{` +
		`DefaultOsVersion:` + fmt.Sprintf("%#v", this.DefaultOsVersion) + `}`}, ", ")
	return s
}
func (this *OperatingSystemType_OperatingSystemVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.OperatingSystemType_OperatingSystemVersion{` +
		`OperatingSystemVersion:` + fmt.Sprintf("%#v", this.OperatingSystemVersion) + `}`}, ", ")
	return s
}
func (this *KubernetesUpgradeDrain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.KubernetesUpgradeDrain{")
	if this.KubernetesUpgradeDrainEnableChoice != nil {
		s = append(s, "KubernetesUpgradeDrainEnableChoice: "+fmt.Sprintf("%#v", this.KubernetesUpgradeDrainEnableChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KubernetesUpgradeDrain_EnableUpgradeDrain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.KubernetesUpgradeDrain_EnableUpgradeDrain{` +
		`EnableUpgradeDrain:` + fmt.Sprintf("%#v", this.EnableUpgradeDrain) + `}`}, ", ")
	return s
}
func (this *KubernetesUpgradeDrain_DisableUpgradeDrain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.KubernetesUpgradeDrain_DisableUpgradeDrain{` +
		`DisableUpgradeDrain:` + fmt.Sprintf("%#v", this.DisableUpgradeDrain) + `}`}, ", ")
	return s
}
func (this *RegionalEdgeSelection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.RegionalEdgeSelection{")
	if this.ReSelectionChoice != nil {
		s = append(s, "ReSelectionChoice: "+fmt.Sprintf("%#v", this.ReSelectionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegionalEdgeSelection_GeoProximity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.RegionalEdgeSelection_GeoProximity{` +
		`GeoProximity:` + fmt.Sprintf("%#v", this.GeoProximity) + `}`}, ", ")
	return s
}
func (this *RegionalEdgeSelection_SpecificGeography) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.RegionalEdgeSelection_SpecificGeography{` +
		`SpecificGeography:` + fmt.Sprintf("%#v", this.SpecificGeography) + `}`}, ", ")
	return s
}
func (this *RegionalEdgeSelection_SpecificRe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.RegionalEdgeSelection_SpecificRe{` +
		`SpecificRe:` + fmt.Sprintf("%#v", this.SpecificRe) + `}`}, ", ")
	return s
}
func (this *AdminUserCredentialsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.AdminUserCredentialsType{")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	if this.AdminPassword != nil {
		s = append(s, "AdminPassword: "+fmt.Sprintf("%#v", this.AdminPassword)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProactiveMonitoringChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.ProactiveMonitoringChoice{")
	if this.ProactiveMonitoringChoice != nil {
		s = append(s, "ProactiveMonitoringChoice: "+fmt.Sprintf("%#v", this.ProactiveMonitoringChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProactiveMonitoringChoice_ProactiveMonitoringEnable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.ProactiveMonitoringChoice_ProactiveMonitoringEnable{` +
		`ProactiveMonitoringEnable:` + fmt.Sprintf("%#v", this.ProactiveMonitoringEnable) + `}`}, ", ")
	return s
}
func (this *ProactiveMonitoringChoice_ProactiveMonitoringDisable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.ProactiveMonitoringChoice_ProactiveMonitoringDisable{` +
		`ProactiveMonitoringDisable:` + fmt.Sprintf("%#v", this.ProactiveMonitoringDisable) + `}`}, ", ")
	return s
}
func (this *SpecificRE) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.SpecificRE{")
	s = append(s, "PrimaryRe: "+fmt.Sprintf("%#v", this.PrimaryRe)+",\n")
	s = append(s, "BackupRe: "+fmt.Sprintf("%#v", this.BackupRe)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KubernetesUpgradeDrainConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&views.KubernetesUpgradeDrainConfig{")
	s = append(s, "DrainNodeTimeout: "+fmt.Sprintf("%#v", this.DrainNodeTimeout)+",\n")
	if this.DrainMaxUnavailableChoice != nil {
		s = append(s, "DrainMaxUnavailableChoice: "+fmt.Sprintf("%#v", this.DrainMaxUnavailableChoice)+",\n")
	}
	if this.VegaUpgradeModeToggleChoice != nil {
		s = append(s, "VegaUpgradeModeToggleChoice: "+fmt.Sprintf("%#v", this.VegaUpgradeModeToggleChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount{` +
		`DrainMaxUnavailableNodeCount:` + fmt.Sprintf("%#v", this.DrainMaxUnavailableNodeCount) + `}`}, ", ")
	return s
}
func (this *KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage{` +
		`DrainMaxUnavailableNodePercentage:` + fmt.Sprintf("%#v", this.DrainMaxUnavailableNodePercentage) + `}`}, ", ")
	return s
}
func (this *KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode{` +
		`DisableVegaUpgradeMode:` + fmt.Sprintf("%#v", this.DisableVegaUpgradeMode) + `}`}, ", ")
	return s
}
func (this *KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode{` +
		`EnableVegaUpgradeMode:` + fmt.Sprintf("%#v", this.EnableVegaUpgradeMode) + `}`}, ", ")
	return s
}
func (this *PerformanceEnhancementModeType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.PerformanceEnhancementModeType{")
	if this.PerfModeChoice != nil {
		s = append(s, "PerfModeChoice: "+fmt.Sprintf("%#v", this.PerfModeChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PerformanceEnhancementModeType_PerfModeL7Enhanced) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.PerformanceEnhancementModeType_PerfModeL7Enhanced{` +
		`PerfModeL7Enhanced:` + fmt.Sprintf("%#v", this.PerfModeL7Enhanced) + `}`}, ", ")
	return s
}
func (this *PerformanceEnhancementModeType_PerfModeL3Enhanced) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.PerformanceEnhancementModeType_PerfModeL3Enhanced{` +
		`PerfModeL3Enhanced:` + fmt.Sprintf("%#v", this.PerfModeL3Enhanced) + `}`}, ", ")
	return s
}
func (this *AcceleratedNetworkingType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.AcceleratedNetworkingType{")
	if this.AcceleratedNetworking != nil {
		s = append(s, "AcceleratedNetworking: "+fmt.Sprintf("%#v", this.AcceleratedNetworking)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AcceleratedNetworkingType_Disable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.AcceleratedNetworkingType_Disable{` +
		`Disable:` + fmt.Sprintf("%#v", this.Disable) + `}`}, ", ")
	return s
}
func (this *AcceleratedNetworkingType_Enable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.AcceleratedNetworkingType_Enable{` +
		`Enable:` + fmt.Sprintf("%#v", this.Enable) + `}`}, ", ")
	return s
}
func (this *L3PerformanceEnhancementType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.L3PerformanceEnhancementType{")
	if this.PerfModeChoice != nil {
		s = append(s, "PerfModeChoice: "+fmt.Sprintf("%#v", this.PerfModeChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *L3PerformanceEnhancementType_NoJumbo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.L3PerformanceEnhancementType_NoJumbo{` +
		`NoJumbo:` + fmt.Sprintf("%#v", this.NoJumbo) + `}`}, ", ")
	return s
}
func (this *L3PerformanceEnhancementType_Jumbo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.L3PerformanceEnhancementType_Jumbo{` +
		`Jumbo:` + fmt.Sprintf("%#v", this.Jumbo) + `}`}, ", ")
	return s
}
func (this *InternetVIPInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.InternetVIPInfo{")
	s = append(s, "SiteName: "+fmt.Sprintf("%#v", this.SiteName)+",\n")
	s = append(s, "SiteNetworkType: "+fmt.Sprintf("%#v", this.SiteNetworkType)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InternetVIPStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&views.InternetVIPStatus{")
	s = append(s, "NlbCname: "+fmt.Sprintf("%#v", this.NlbCname)+",\n")
	s = append(s, "NlbStatus: "+fmt.Sprintf("%#v", this.NlbStatus)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Arn: "+fmt.Sprintf("%#v", this.Arn)+",\n")
	if this.TargetGroupStatus != nil {
		s = append(s, "TargetGroupStatus: "+fmt.Sprintf("%#v", this.TargetGroupStatus)+",\n")
	}
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InternetVIPTargetGroupStatusType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&views.InternetVIPTargetGroupStatusType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Arn: "+fmt.Sprintf("%#v", this.Arn)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	if this.ListenerStatus != nil {
		s = append(s, "ListenerStatus: "+fmt.Sprintf("%#v", this.ListenerStatus)+",\n")
	}
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InternetVIPListenerStatusType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&views.InternetVIPListenerStatusType{")
	s = append(s, "Arn: "+fmt.Sprintf("%#v", this.Arn)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MasterNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.MasterNode{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "PublicIp: "+fmt.Sprintf("%#v", this.PublicIp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiOperation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.ApiOperation{")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiEndpointWithSchema) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.ApiEndpointWithSchema{")
	if this.ApiOperation != nil {
		s = append(s, "ApiOperation: "+fmt.Sprintf("%#v", this.ApiOperation)+",\n")
	}
	s = append(s, "SchemaJson: "+fmt.Sprintf("%#v", this.SchemaJson)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomDNS) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.CustomDNS{")
	s = append(s, "InsideNameserver: "+fmt.Sprintf("%#v", this.InsideNameserver)+",\n")
	s = append(s, "OutsideNameserver: "+fmt.Sprintf("%#v", this.OutsideNameserver)+",\n")
	s = append(s, "InsideNameserverV6: "+fmt.Sprintf("%#v", this.InsideNameserverV6)+",\n")
	s = append(s, "OutsideNameserverV6: "+fmt.Sprintf("%#v", this.OutsideNameserverV6)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TGWAssignedASNType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.TGWAssignedASNType{")
	s = append(s, "TgwAsn: "+fmt.Sprintf("%#v", this.TgwAsn)+",\n")
	s = append(s, "VolterraSiteAsn: "+fmt.Sprintf("%#v", this.VolterraSiteAsn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TGWParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.TGWParamsType{")
	if this.AsnChoice != nil {
		s = append(s, "AsnChoice: "+fmt.Sprintf("%#v", this.AsnChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TGWParamsType_SystemGenerated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.TGWParamsType_SystemGenerated{` +
		`SystemGenerated:` + fmt.Sprintf("%#v", this.SystemGenerated) + `}`}, ", ")
	return s
}
func (this *TGWParamsType_UserAssigned) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.TGWParamsType_UserAssigned{` +
		`UserAssigned:` + fmt.Sprintf("%#v", this.UserAssigned) + `}`}, ", ")
	return s
}
func (this *ExistingTGWType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.ExistingTGWType{")
	s = append(s, "TgwId: "+fmt.Sprintf("%#v", this.TgwId)+",\n")
	s = append(s, "TgwAsn: "+fmt.Sprintf("%#v", this.TgwAsn)+",\n")
	s = append(s, "VolterraSiteAsn: "+fmt.Sprintf("%#v", this.VolterraSiteAsn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NetworkSelectType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.NetworkSelectType{")
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NetworkSelectType_SiteLocalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.NetworkSelectType_SiteLocalNetwork{` +
		`SiteLocalNetwork:` + fmt.Sprintf("%#v", this.SiteLocalNetwork) + `}`}, ", ")
	return s
}
func (this *NetworkSelectType_SiteLocalInsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.NetworkSelectType_SiteLocalInsideNetwork{` +
		`SiteLocalInsideNetwork:` + fmt.Sprintf("%#v", this.SiteLocalInsideNetwork) + `}`}, ", ")
	return s
}
func (this *NetworkSelectType_SegmentNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.NetworkSelectType_SegmentNetwork{` +
		`SegmentNetwork:` + fmt.Sprintf("%#v", this.SegmentNetwork) + `}`}, ", ")
	return s
}
func (this *SnatPoolConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.SnatPoolConfiguration{")
	if this.SnatPoolChoice != nil {
		s = append(s, "SnatPoolChoice: "+fmt.Sprintf("%#v", this.SnatPoolChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SnatPoolConfiguration_NoSnatPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.SnatPoolConfiguration_NoSnatPool{` +
		`NoSnatPool:` + fmt.Sprintf("%#v", this.NoSnatPool) + `}`}, ", ")
	return s
}
func (this *SnatPoolConfiguration_SnatPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.SnatPoolConfiguration_SnatPool{` +
		`SnatPool:` + fmt.Sprintf("%#v", this.SnatPool) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ObjectRefType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectRefType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectRefType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LinkRefType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkRefType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LinkRefType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Href) > 0 {
		i -= len(m.Href)
		copy(dAtA[i:], m.Href)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Href)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SiteLocator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteLocator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteLocator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SiteLocator_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteLocator_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SiteLocator_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteLocator_VirtualSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SiteReferenceListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteReferenceListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteReferenceListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Refs) > 0 {
		for iNdEx := len(m.Refs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Refs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SiteRegionLocator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteRegionLocator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteRegionLocator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SiteRegionLocator_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteRegionLocator_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SiteRegionLocator_CloudReRegion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteRegionLocator_CloudReRegion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloudReRegion != nil {
		{
			size, err := m.CloudReRegion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SiteRegionLocator_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteRegionLocator_VirtualSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *WhereVirtualNetwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereVirtualNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVirtualNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.V6VipChoice != nil {
		{
			size := m.V6VipChoice.Size()
			i -= size
			if _, err := m.V6VipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VipChoice != nil {
		{
			size := m.VipChoice.Size()
			i -= size
			if _, err := m.VipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VirtualNetwork != nil {
		{
			size, err := m.VirtualNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WhereVirtualNetwork_DefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVirtualNetwork_DefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultVip != nil {
		{
			size, err := m.DefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *WhereVirtualNetwork_SpecificVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVirtualNetwork_SpecificVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SpecificVip)
	copy(dAtA[i:], m.SpecificVip)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SpecificVip)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *WhereVirtualNetwork_DefaultV6Vip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVirtualNetwork_DefaultV6Vip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultV6Vip != nil {
		{
			size, err := m.DefaultV6Vip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *WhereVirtualNetwork_SpecificV6Vip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVirtualNetwork_SpecificV6Vip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SpecificV6Vip)
	copy(dAtA[i:], m.SpecificV6Vip)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SpecificV6Vip)))
	i--
	dAtA[i] = 0x62
	return len(dAtA) - i, nil
}
func (m *WhereSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ipv6Vip) > 0 {
		i -= len(m.Ipv6Vip)
		copy(dAtA[i:], m.Ipv6Vip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ipv6Vip)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Ipv4Vip) > 0 {
		i -= len(m.Ipv4Vip)
		copy(dAtA[i:], m.Ipv4Vip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ipv4Vip)))
		i--
		dAtA[i] = 0x22
	}
	if m.Segment != nil {
		{
			size, err := m.Segment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WhereSite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ipv6) > 0 {
		i -= len(m.Ipv6)
		copy(dAtA[i:], m.Ipv6)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ipv6)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Network != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Network))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WhereSiteSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereSiteSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereSiteSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ipv6) > 0 {
		i -= len(m.Ipv6)
		copy(dAtA[i:], m.Ipv6)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ipv6)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Segment != nil {
		{
			size, err := m.Segment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WhereCloudEdgeSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereCloudEdgeSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereCloudEdgeSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ipv6) > 0 {
		i -= len(m.Ipv6)
		copy(dAtA[i:], m.Ipv6)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ipv6)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CloudEdge != nil {
		{
			size, err := m.CloudEdge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Segment != nil {
		{
			size, err := m.Segment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WhereVirtualSite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereVirtualSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVirtualSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Network != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Network))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WhereVirtualSiteSpecifiedVIP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereVirtualSiteSpecifiedVIP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVirtualSiteSpecifiedVIP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ipv6) > 0 {
		i -= len(m.Ipv6)
		copy(dAtA[i:], m.Ipv6)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ipv6)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Network != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Network))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WhereVirtualSiteSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereVirtualSiteSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVirtualSiteSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ipv6) > 0 {
		i -= len(m.Ipv6)
		copy(dAtA[i:], m.Ipv6)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ipv6)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Segment != nil {
		{
			size, err := m.Segment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WhereVK8SService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereVK8SService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVK8SService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WhereVK8SService_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVK8SService_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WhereVK8SService_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVK8SService_VirtualSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WhereType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WhereType_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WhereType_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_VirtualSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WhereType_Vk8SService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_Vk8SService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vk8SService != nil {
		{
			size, err := m.Vk8SService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *WhereType_UseDefaultPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_UseDefaultPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDefaultPort != nil {
		{
			size, err := m.UseDefaultPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *WhereType_Port) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_Port) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *WhereType_VirtualNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_VirtualNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualNetwork != nil {
		{
			size, err := m.VirtualNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *WhereType_SiteSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_SiteSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteSegment != nil {
		{
			size, err := m.SiteSegment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *WhereType_VirtualSiteSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_VirtualSiteSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualSiteSegment != nil {
		{
			size, err := m.VirtualSiteSegment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *WhereType_Segment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_Segment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Segment != nil {
		{
			size, err := m.Segment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *WhereType_CloudEdgeSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_CloudEdgeSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloudEdgeSegment != nil {
		{
			size, err := m.CloudEdgeSegment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *WhereType_PortRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_PortRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortRanges)
	copy(dAtA[i:], m.PortRanges)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PortRanges)))
	i--
	dAtA[i] = 0x7a
	return len(dAtA) - i, nil
}
func (m *WhereType_VirtualSiteWithVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_VirtualSiteWithVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualSiteWithVip != nil {
		{
			size, err := m.VirtualSiteWithVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *WhereType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *WhereTypeSiteVsite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereTypeSiteVsite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereTypeSiteVsite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WhereTypeSiteVsite_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereTypeSiteVsite_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WhereTypeSiteVsite_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereTypeSiteVsite_VirtualSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WhereTypeSiteVsite_UseDefaultPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereTypeSiteVsite_UseDefaultPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDefaultPort != nil {
		{
			size, err := m.UseDefaultPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *WhereTypeSiteVsite_Port) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereTypeSiteVsite_Port) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *AdvertisePublic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertisePublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvertisePublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PublicIp != nil {
		{
			size, err := m.PublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdvertiseCustom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdvertiseWhere) > 0 {
		for iNdEx := len(m.AdvertiseWhere) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdvertiseWhere[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdvertiseSiteVsite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertiseSiteVsite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvertiseSiteVsite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdvertiseWhere) > 0 {
		for iNdEx := len(m.AdvertiseWhere) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdvertiseWhere[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomCiphers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomCiphers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomCiphers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CipherSuites) > 0 {
		for iNdEx := len(m.CipherSuites) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CipherSuites[iNdEx])
			copy(dAtA[i:], m.CipherSuites[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.CipherSuites[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MaxVersion != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxVersion))
		i--
		dAtA[i] = 0x10
	}
	if m.MinVersion != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TlsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TlsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TlsConfig_DefaultSecurity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TlsConfig_DefaultSecurity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSecurity != nil {
		{
			size, err := m.DefaultSecurity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *TlsConfig_MediumSecurity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TlsConfig_MediumSecurity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MediumSecurity != nil {
		{
			size, err := m.MediumSecurity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TlsConfig_LowSecurity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TlsConfig_LowSecurity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LowSecurity != nil {
		{
			size, err := m.LowSecurity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TlsConfig_CustomSecurity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TlsConfig_CustomSecurity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomSecurity != nil {
		{
			size, err := m.CustomSecurity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamTlsParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamTlsParamsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsParamsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MtlsChoice != nil {
		{
			size := m.MtlsChoice.Size()
			i -= size
			if _, err := m.MtlsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TlsCertificates) > 0 {
		for iNdEx := len(m.TlsCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TlsCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TlsConfig != nil {
		{
			size, err := m.TlsConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamTlsParamsType_NoMtls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsParamsType_NoMtls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoMtls != nil {
		{
			size, err := m.NoMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamTlsParamsType_UseMtls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsParamsType_UseMtls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseMtls != nil {
		{
			size, err := m.UseMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamTLSCertsParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamTLSCertsParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTLSCertsParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MtlsChoice != nil {
		{
			size := m.MtlsChoice.Size()
			i -= size
			if _, err := m.MtlsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TlsConfig != nil {
		{
			size, err := m.TlsConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamTLSCertsParams_NoMtls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTLSCertsParams_NoMtls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoMtls != nil {
		{
			size, err := m.NoMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamTLSCertsParams_UseMtls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTLSCertsParams_UseMtls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseMtls != nil {
		{
			size, err := m.UseMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *XfccHeaderKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XfccHeaderKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XfccHeaderKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.XfccHeaderElements) > 0 {
		dAtA47 := make([]byte, len(m.XfccHeaderElements)*10)
		var j46 int
		for _, num := range m.XfccHeaderElements {
			for num >= 1<<7 {
				dAtA47[j46] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j46++
			}
			dAtA47[j46] = uint8(num)
			j46++
		}
		i -= j46
		copy(dAtA[i:], dAtA47[:j46])
		i = encodeVarintTypes(dAtA, i, uint64(j46))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamTlsValidationContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamTlsValidationContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsValidationContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientCertificateOptional {
		i--
		if m.ClientCertificateOptional {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.TrustedCaChoice != nil {
		{
			size := m.TrustedCaChoice.Size()
			i -= size
			if _, err := m.TrustedCaChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XfccHeader != nil {
		{
			size := m.XfccHeader.Size()
			i -= size
			if _, err := m.XfccHeader.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CrlChoice != nil {
		{
			size := m.CrlChoice.Size()
			i -= size
			if _, err := m.CrlChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamTlsValidationContext_TrustedCaUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsValidationContext_TrustedCaUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TrustedCaUrl)
	copy(dAtA[i:], m.TrustedCaUrl)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.TrustedCaUrl)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *DownstreamTlsValidationContext_NoCrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsValidationContext_NoCrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoCrl != nil {
		{
			size, err := m.NoCrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamTlsValidationContext_Crl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsValidationContext_Crl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Crl != nil {
		{
			size, err := m.Crl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamTlsValidationContext_XfccDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsValidationContext_XfccDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.XfccDisabled != nil {
		{
			size, err := m.XfccDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamTlsValidationContext_XfccOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsValidationContext_XfccOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.XfccOptions != nil {
		{
			size, err := m.XfccOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamTlsValidationContext_TrustedCa) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsValidationContext_TrustedCa) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TrustedCa != nil {
		{
			size, err := m.TrustedCa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *OriginPoolWithWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginPoolWithWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginPoolWithWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Priority != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x30
	}
	if len(m.EndpointSubsets) > 0 {
		keysForEndpointSubsets := make([]string, 0, len(m.EndpointSubsets))
		for k := range m.EndpointSubsets {
			keysForEndpointSubsets = append(keysForEndpointSubsets, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForEndpointSubsets)
		for iNdEx := len(keysForEndpointSubsets) - 1; iNdEx >= 0; iNdEx-- {
			v := m.EndpointSubsets[string(keysForEndpointSubsets[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForEndpointSubsets[iNdEx])
			copy(dAtA[i:], keysForEndpointSubsets[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForEndpointSubsets[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.PoolChoice != nil {
		{
			size := m.PoolChoice.Size()
			i -= size
			if _, err := m.PoolChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Weight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *OriginPoolWithWeight_Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginPoolWithWeight_Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *OriginPoolWithWeight_Cluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginPoolWithWeight_Cluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cluster != nil {
		{
			size, err := m.Cluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *OriginPoolListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginPoolListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginPoolListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrefixStringListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrefixStringListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrefixStringListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ipv6Prefixes) > 0 {
		for iNdEx := len(m.Ipv6Prefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ipv6Prefixes[iNdEx])
			copy(dAtA[i:], m.Ipv6Prefixes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Ipv6Prefixes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Prefixes) > 0 {
		for iNdEx := len(m.Prefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Prefixes[iNdEx])
			copy(dAtA[i:], m.Prefixes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Prefixes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalConnectorType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalConnectorType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalConnectorType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GlobalVn != nil {
		{
			size, err := m.GlobalVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SegmentRefList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentRefList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentRefList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Segments) > 0 {
		for iNdEx := len(m.Segments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Segments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VolterraSoftwareType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolterraSoftwareType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolterraSoftwareType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VolterraSwVersionChoice != nil {
		{
			size := m.VolterraSwVersionChoice.Size()
			i -= size
			if _, err := m.VolterraSwVersionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VolterraSoftwareType_DefaultSwVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolterraSoftwareType_DefaultSwVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSwVersion != nil {
		{
			size, err := m.DefaultSwVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *VolterraSoftwareType_VolterraSoftwareVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolterraSoftwareType_VolterraSoftwareVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.VolterraSoftwareVersion)
	copy(dAtA[i:], m.VolterraSoftwareVersion)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *OperatingSystemType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatingSystemType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatingSystemType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatingSystemVersionChoice != nil {
		{
			size := m.OperatingSystemVersionChoice.Size()
			i -= size
			if _, err := m.OperatingSystemVersionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperatingSystemType_DefaultOsVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatingSystemType_DefaultOsVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultOsVersion != nil {
		{
			size, err := m.DefaultOsVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *OperatingSystemType_OperatingSystemVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatingSystemType_OperatingSystemVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.OperatingSystemVersion)
	copy(dAtA[i:], m.OperatingSystemVersion)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *KubernetesUpgradeDrain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubernetesUpgradeDrain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesUpgradeDrain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KubernetesUpgradeDrainEnableChoice != nil {
		{
			size := m.KubernetesUpgradeDrainEnableChoice.Size()
			i -= size
			if _, err := m.KubernetesUpgradeDrainEnableChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *KubernetesUpgradeDrain_EnableUpgradeDrain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesUpgradeDrain_EnableUpgradeDrain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableUpgradeDrain != nil {
		{
			size, err := m.EnableUpgradeDrain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *KubernetesUpgradeDrain_DisableUpgradeDrain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesUpgradeDrain_DisableUpgradeDrain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableUpgradeDrain != nil {
		{
			size, err := m.DisableUpgradeDrain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RegionalEdgeSelection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionalEdgeSelection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionalEdgeSelection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReSelectionChoice != nil {
		{
			size := m.ReSelectionChoice.Size()
			i -= size
			if _, err := m.ReSelectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegionalEdgeSelection_GeoProximity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionalEdgeSelection_GeoProximity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GeoProximity != nil {
		{
			size, err := m.GeoProximity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RegionalEdgeSelection_SpecificGeography) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionalEdgeSelection_SpecificGeography) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SpecificGeography)
	copy(dAtA[i:], m.SpecificGeography)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SpecificGeography)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *RegionalEdgeSelection_SpecificRe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionalEdgeSelection_SpecificRe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SpecificRe != nil {
		{
			size, err := m.SpecificRe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AdminUserCredentialsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminUserCredentialsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminUserCredentialsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdminPassword != nil {
		{
			size, err := m.AdminPassword.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProactiveMonitoringChoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProactiveMonitoringChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProactiveMonitoringChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProactiveMonitoringChoice != nil {
		{
			size := m.ProactiveMonitoringChoice.Size()
			i -= size
			if _, err := m.ProactiveMonitoringChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProactiveMonitoringChoice_ProactiveMonitoringEnable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProactiveMonitoringChoice_ProactiveMonitoringEnable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProactiveMonitoringEnable != nil {
		{
			size, err := m.ProactiveMonitoringEnable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ProactiveMonitoringChoice_ProactiveMonitoringDisable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProactiveMonitoringChoice_ProactiveMonitoringDisable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProactiveMonitoringDisable != nil {
		{
			size, err := m.ProactiveMonitoringDisable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SpecificRE) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecificRE) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecificRE) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BackupRe) > 0 {
		i -= len(m.BackupRe)
		copy(dAtA[i:], m.BackupRe)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BackupRe)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PrimaryRe) > 0 {
		i -= len(m.PrimaryRe)
		copy(dAtA[i:], m.PrimaryRe)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PrimaryRe)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KubernetesUpgradeDrainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubernetesUpgradeDrainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesUpgradeDrainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VegaUpgradeModeToggleChoice != nil {
		{
			size := m.VegaUpgradeModeToggleChoice.Size()
			i -= size
			if _, err := m.VegaUpgradeModeToggleChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DrainMaxUnavailableChoice != nil {
		{
			size := m.DrainMaxUnavailableChoice.Size()
			i -= size
			if _, err := m.DrainMaxUnavailableChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DrainNodeTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DrainNodeTimeout))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.DrainMaxUnavailableNodeCount))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.DrainMaxUnavailableNodePercentage))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableVegaUpgradeMode != nil {
		{
			size, err := m.DisableVegaUpgradeMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableVegaUpgradeMode != nil {
		{
			size, err := m.EnableVegaUpgradeMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *PerformanceEnhancementModeType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerformanceEnhancementModeType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerformanceEnhancementModeType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PerfModeChoice != nil {
		{
			size := m.PerfModeChoice.Size()
			i -= size
			if _, err := m.PerfModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PerformanceEnhancementModeType_PerfModeL7Enhanced) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerformanceEnhancementModeType_PerfModeL7Enhanced) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PerfModeL7Enhanced != nil {
		{
			size, err := m.PerfModeL7Enhanced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PerformanceEnhancementModeType_PerfModeL3Enhanced) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerformanceEnhancementModeType_PerfModeL3Enhanced) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PerfModeL3Enhanced != nil {
		{
			size, err := m.PerfModeL3Enhanced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AcceleratedNetworkingType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceleratedNetworkingType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceleratedNetworkingType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AcceleratedNetworking != nil {
		{
			size := m.AcceleratedNetworking.Size()
			i -= size
			if _, err := m.AcceleratedNetworking.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AcceleratedNetworkingType_Disable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceleratedNetworkingType_Disable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disable != nil {
		{
			size, err := m.Disable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AcceleratedNetworkingType_Enable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceleratedNetworkingType_Enable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enable != nil {
		{
			size, err := m.Enable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *L3PerformanceEnhancementType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L3PerformanceEnhancementType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L3PerformanceEnhancementType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PerfModeChoice != nil {
		{
			size := m.PerfModeChoice.Size()
			i -= size
			if _, err := m.PerfModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *L3PerformanceEnhancementType_NoJumbo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L3PerformanceEnhancementType_NoJumbo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoJumbo != nil {
		{
			size, err := m.NoJumbo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *L3PerformanceEnhancementType_Jumbo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L3PerformanceEnhancementType_Jumbo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Jumbo != nil {
		{
			size, err := m.Jumbo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *InternetVIPInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternetVIPInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternetVIPInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SiteNetworkType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteNetworkType))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SiteName) > 0 {
		i -= len(m.SiteName)
		copy(dAtA[i:], m.SiteName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SiteName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternetVIPStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternetVIPStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternetVIPStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TargetGroupStatus) > 0 {
		for iNdEx := len(m.TargetGroupStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TargetGroupStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Arn) > 0 {
		i -= len(m.Arn)
		copy(dAtA[i:], m.Arn)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Arn)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NlbStatus) > 0 {
		i -= len(m.NlbStatus)
		copy(dAtA[i:], m.NlbStatus)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NlbStatus)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NlbCname) > 0 {
		i -= len(m.NlbCname)
		copy(dAtA[i:], m.NlbCname)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NlbCname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternetVIPTargetGroupStatusType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternetVIPTargetGroupStatusType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternetVIPTargetGroupStatusType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ListenerStatus) > 0 {
		for iNdEx := len(m.ListenerStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ListenerStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Protocol) > 0 {
		i -= len(m.Protocol)
		copy(dAtA[i:], m.Protocol)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Protocol)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Arn) > 0 {
		i -= len(m.Arn)
		copy(dAtA[i:], m.Arn)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Arn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternetVIPListenerStatusType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternetVIPListenerStatusType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternetVIPListenerStatusType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Protocol) > 0 {
		i -= len(m.Protocol)
		copy(dAtA[i:], m.Protocol)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Protocol)))
		i--
		dAtA[i] = 0x22
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Arn) > 0 {
		i -= len(m.Arn)
		copy(dAtA[i:], m.Arn)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Arn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MasterNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MasterNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MasterNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicIp) > 0 {
		i -= len(m.PublicIp)
		copy(dAtA[i:], m.PublicIp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicIp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApiOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if m.Method != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApiEndpointWithSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiEndpointWithSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointWithSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaJson) > 0 {
		i -= len(m.SchemaJson)
		copy(dAtA[i:], m.SchemaJson)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SchemaJson)))
		i--
		dAtA[i] = 0x12
	}
	if m.ApiOperation != nil {
		{
			size, err := m.ApiOperation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomDNS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomDNS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDNS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutsideNameserverV6) > 0 {
		i -= len(m.OutsideNameserverV6)
		copy(dAtA[i:], m.OutsideNameserverV6)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OutsideNameserverV6)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InsideNameserverV6) > 0 {
		i -= len(m.InsideNameserverV6)
		copy(dAtA[i:], m.InsideNameserverV6)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InsideNameserverV6)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OutsideNameserver) > 0 {
		i -= len(m.OutsideNameserver)
		copy(dAtA[i:], m.OutsideNameserver)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OutsideNameserver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InsideNameserver) > 0 {
		i -= len(m.InsideNameserver)
		copy(dAtA[i:], m.InsideNameserver)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InsideNameserver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TGWAssignedASNType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TGWAssignedASNType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TGWAssignedASNType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VolterraSiteAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VolterraSiteAsn))
		i--
		dAtA[i] = 0x10
	}
	if m.TgwAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwAsn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TGWParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TGWParamsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TGWParamsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AsnChoice != nil {
		{
			size := m.AsnChoice.Size()
			i -= size
			if _, err := m.AsnChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TGWParamsType_SystemGenerated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TGWParamsType_SystemGenerated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemGenerated != nil {
		{
			size, err := m.SystemGenerated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TGWParamsType_UserAssigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TGWParamsType_UserAssigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserAssigned != nil {
		{
			size, err := m.UserAssigned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ExistingTGWType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExistingTGWType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExistingTGWType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VolterraSiteAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VolterraSiteAsn))
		i--
		dAtA[i] = 0x18
	}
	if m.TgwAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwAsn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TgwId) > 0 {
		i -= len(m.TgwId)
		copy(dAtA[i:], m.TgwId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TgwId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkSelectType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkSelectType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkSelectType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkChoice != nil {
		{
			size := m.NetworkChoice.Size()
			i -= size
			if _, err := m.NetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *NetworkSelectType_SiteLocalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkSelectType_SiteLocalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalNetwork != nil {
		{
			size, err := m.SiteLocalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *NetworkSelectType_SiteLocalInsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkSelectType_SiteLocalInsideNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalInsideNetwork != nil {
		{
			size, err := m.SiteLocalInsideNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *NetworkSelectType_SegmentNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkSelectType_SegmentNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SegmentNetwork != nil {
		{
			size, err := m.SegmentNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SnatPoolConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnatPoolConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnatPoolConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SnatPoolChoice != nil {
		{
			size := m.SnatPoolChoice.Size()
			i -= size
			if _, err := m.SnatPoolChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SnatPoolConfiguration_NoSnatPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnatPoolConfiguration_NoSnatPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoSnatPool != nil {
		{
			size, err := m.NoSnatPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SnatPoolConfiguration_SnatPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnatPoolConfiguration_SnatPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SnatPool != nil {
		{
			size, err := m.SnatPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ObjectRefType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *LinkRefType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SiteLocator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *SiteLocator_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteLocator_VirtualSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteReferenceListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Refs) > 0 {
		for _, e := range m.Refs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SiteRegionLocator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *SiteRegionLocator_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteRegionLocator_CloudReRegion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudReRegion != nil {
		l = m.CloudReRegion.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteRegionLocator_VirtualSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereVirtualNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualNetwork != nil {
		l = m.VirtualNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VipChoice != nil {
		n += m.VipChoice.Size()
	}
	if m.V6VipChoice != nil {
		n += m.V6VipChoice.Size()
	}
	return n
}

func (m *WhereVirtualNetwork_DefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultVip != nil {
		l = m.DefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereVirtualNetwork_SpecificVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificVip)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *WhereVirtualNetwork_DefaultV6Vip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultV6Vip != nil {
		l = m.DefaultV6Vip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereVirtualNetwork_SpecificV6Vip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificV6Vip)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *WhereSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Segment != nil {
		l = m.Segment.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ipv4Vip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ipv6Vip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *WhereSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Network != 0 {
		n += 1 + sovTypes(uint64(m.Network))
	}
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ipv6)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *WhereSiteSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Segment != nil {
		l = m.Segment.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ipv6)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *WhereCloudEdgeSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Segment != nil {
		l = m.Segment.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CloudEdge != nil {
		l = m.CloudEdge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ipv6)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *WhereVirtualSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Network != 0 {
		n += 1 + sovTypes(uint64(m.Network))
	}
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *WhereVirtualSiteSpecifiedVIP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Network != 0 {
		n += 1 + sovTypes(uint64(m.Network))
	}
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ipv6)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *WhereVirtualSiteSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Segment != nil {
		l = m.Segment.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ipv6)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *WhereVK8SService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *WhereVK8SService_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereVK8SService_VirtualSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	return n
}

func (m *WhereType_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_VirtualSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_Vk8SService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vk8SService != nil {
		l = m.Vk8SService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_UseDefaultPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDefaultPort != nil {
		l = m.UseDefaultPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Port))
	return n
}
func (m *WhereType_VirtualNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualNetwork != nil {
		l = m.VirtualNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_SiteSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteSegment != nil {
		l = m.SiteSegment.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_VirtualSiteSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualSiteSegment != nil {
		l = m.VirtualSiteSegment.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_Segment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Segment != nil {
		l = m.Segment.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_CloudEdgeSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudEdgeSegment != nil {
		l = m.CloudEdgeSegment.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_PortRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortRanges)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *WhereType_VirtualSiteWithVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualSiteWithVip != nil {
		l = m.VirtualSiteWithVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereTypeSiteVsite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	return n
}

func (m *WhereTypeSiteVsite_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereTypeSiteVsite_VirtualSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereTypeSiteVsite_UseDefaultPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDefaultPort != nil {
		l = m.UseDefaultPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereTypeSiteVsite_Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Port))
	return n
}
func (m *AdvertisePublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicIp != nil {
		l = m.PublicIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AdvertiseWhere) > 0 {
		for _, e := range m.AdvertiseWhere {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AdvertiseSiteVsite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AdvertiseWhere) > 0 {
		for _, e := range m.AdvertiseWhere {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CustomCiphers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinVersion != 0 {
		n += 1 + sovTypes(uint64(m.MinVersion))
	}
	if m.MaxVersion != 0 {
		n += 1 + sovTypes(uint64(m.MaxVersion))
	}
	if len(m.CipherSuites) > 0 {
		for _, s := range m.CipherSuites {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *TlsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *TlsConfig_DefaultSecurity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSecurity != nil {
		l = m.DefaultSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TlsConfig_MediumSecurity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MediumSecurity != nil {
		l = m.MediumSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TlsConfig_LowSecurity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LowSecurity != nil {
		l = m.LowSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TlsConfig_CustomSecurity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomSecurity != nil {
		l = m.CustomSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTlsParamsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TlsCertificates) > 0 {
		for _, e := range m.TlsCertificates {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.MtlsChoice != nil {
		n += m.MtlsChoice.Size()
	}
	return n
}

func (m *DownstreamTlsParamsType_NoMtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoMtls != nil {
		l = m.NoMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTlsParamsType_UseMtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseMtls != nil {
		l = m.UseMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTLSCertsParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.MtlsChoice != nil {
		n += m.MtlsChoice.Size()
	}
	return n
}

func (m *DownstreamTLSCertsParams_NoMtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoMtls != nil {
		l = m.NoMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTLSCertsParams_UseMtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseMtls != nil {
		l = m.UseMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *XfccHeaderKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.XfccHeaderElements) > 0 {
		l = 0
		for _, e := range m.XfccHeaderElements {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *DownstreamTlsValidationContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrustedCaChoice != nil {
		n += m.TrustedCaChoice.Size()
	}
	if m.CrlChoice != nil {
		n += m.CrlChoice.Size()
	}
	if m.XfccHeader != nil {
		n += m.XfccHeader.Size()
	}
	if m.ClientCertificateOptional {
		n += 2
	}
	return n
}

func (m *DownstreamTlsValidationContext_TrustedCaUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TrustedCaUrl)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *DownstreamTlsValidationContext_NoCrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoCrl != nil {
		l = m.NoCrl.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTlsValidationContext_Crl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Crl != nil {
		l = m.Crl.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTlsValidationContext_XfccDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XfccDisabled != nil {
		l = m.XfccDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTlsValidationContext_XfccOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XfccOptions != nil {
		l = m.XfccOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTlsValidationContext_TrustedCa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrustedCa != nil {
		l = m.TrustedCa.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolWithWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolChoice != nil {
		n += m.PoolChoice.Size()
	}
	if m.Weight != 0 {
		n += 1 + sovTypes(uint64(m.Weight))
	}
	if len(m.EndpointSubsets) > 0 {
		for k, v := range m.EndpointSubsets {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.Priority != 0 {
		n += 1 + sovTypes(uint64(m.Priority))
	}
	return n
}

func (m *OriginPoolWithWeight_Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolWithWeight_Cluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PrefixStringListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for _, s := range m.Prefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Ipv6Prefixes) > 0 {
		for _, s := range m.Ipv6Prefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalConnectorType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalVn != nil {
		l = m.GlobalVn.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SegmentRefList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Segments) > 0 {
		for _, e := range m.Segments {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *VolterraSoftwareType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolterraSwVersionChoice != nil {
		n += m.VolterraSwVersionChoice.Size()
	}
	return n
}

func (m *VolterraSoftwareType_DefaultSwVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSwVersion != nil {
		l = m.DefaultSwVersion.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VolterraSoftwareType_VolterraSoftwareVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VolterraSoftwareVersion)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *OperatingSystemType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatingSystemVersionChoice != nil {
		n += m.OperatingSystemVersionChoice.Size()
	}
	return n
}

func (m *OperatingSystemType_DefaultOsVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultOsVersion != nil {
		l = m.DefaultOsVersion.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OperatingSystemType_OperatingSystemVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatingSystemVersion)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *KubernetesUpgradeDrain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KubernetesUpgradeDrainEnableChoice != nil {
		n += m.KubernetesUpgradeDrainEnableChoice.Size()
	}
	return n
}

func (m *KubernetesUpgradeDrain_EnableUpgradeDrain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableUpgradeDrain != nil {
		l = m.EnableUpgradeDrain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *KubernetesUpgradeDrain_DisableUpgradeDrain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableUpgradeDrain != nil {
		l = m.DisableUpgradeDrain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RegionalEdgeSelection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReSelectionChoice != nil {
		n += m.ReSelectionChoice.Size()
	}
	return n
}

func (m *RegionalEdgeSelection_GeoProximity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GeoProximity != nil {
		l = m.GeoProximity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RegionalEdgeSelection_SpecificGeography) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificGeography)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *RegionalEdgeSelection_SpecificRe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpecificRe != nil {
		l = m.SpecificRe.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AdminUserCredentialsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AdminPassword != nil {
		l = m.AdminPassword.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProactiveMonitoringChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProactiveMonitoringChoice != nil {
		n += m.ProactiveMonitoringChoice.Size()
	}
	return n
}

func (m *ProactiveMonitoringChoice_ProactiveMonitoringEnable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProactiveMonitoringEnable != nil {
		l = m.ProactiveMonitoringEnable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProactiveMonitoringChoice_ProactiveMonitoringDisable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProactiveMonitoringDisable != nil {
		l = m.ProactiveMonitoringDisable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SpecificRE) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrimaryRe)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BackupRe)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *KubernetesUpgradeDrainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DrainNodeTimeout != 0 {
		n += 1 + sovTypes(uint64(m.DrainNodeTimeout))
	}
	if m.DrainMaxUnavailableChoice != nil {
		n += m.DrainMaxUnavailableChoice.Size()
	}
	if m.VegaUpgradeModeToggleChoice != nil {
		n += m.VegaUpgradeModeToggleChoice.Size()
	}
	return n
}

func (m *KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.DrainMaxUnavailableNodeCount))
	return n
}
func (m *KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.DrainMaxUnavailableNodePercentage))
	return n
}
func (m *KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableVegaUpgradeMode != nil {
		l = m.DisableVegaUpgradeMode.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableVegaUpgradeMode != nil {
		l = m.EnableVegaUpgradeMode.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PerformanceEnhancementModeType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PerfModeChoice != nil {
		n += m.PerfModeChoice.Size()
	}
	return n
}

func (m *PerformanceEnhancementModeType_PerfModeL7Enhanced) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PerfModeL7Enhanced != nil {
		l = m.PerfModeL7Enhanced.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PerformanceEnhancementModeType_PerfModeL3Enhanced) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PerfModeL3Enhanced != nil {
		l = m.PerfModeL3Enhanced.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AcceleratedNetworkingType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AcceleratedNetworking != nil {
		n += m.AcceleratedNetworking.Size()
	}
	return n
}

func (m *AcceleratedNetworkingType_Disable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disable != nil {
		l = m.Disable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AcceleratedNetworkingType_Enable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable != nil {
		l = m.Enable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *L3PerformanceEnhancementType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PerfModeChoice != nil {
		n += m.PerfModeChoice.Size()
	}
	return n
}

func (m *L3PerformanceEnhancementType_NoJumbo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoJumbo != nil {
		l = m.NoJumbo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *L3PerformanceEnhancementType_Jumbo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Jumbo != nil {
		l = m.Jumbo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *InternetVIPInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SiteName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteNetworkType != 0 {
		n += 1 + sovTypes(uint64(m.SiteNetworkType))
	}
	return n
}

func (m *InternetVIPStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NlbCname)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NlbStatus)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Arn)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TargetGroupStatus) > 0 {
		for _, e := range m.TargetGroupStatus {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *InternetVIPTargetGroupStatusType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Arn)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ListenerStatus) > 0 {
		for _, e := range m.ListenerStatus {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *InternetVIPListenerStatusType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arn)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MasterNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PublicIp)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ApiOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Method != 0 {
		n += 1 + sovTypes(uint64(m.Method))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ApiEndpointWithSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiOperation != nil {
		l = m.ApiOperation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SchemaJson)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CustomDNS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InsideNameserver)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OutsideNameserver)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InsideNameserverV6)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OutsideNameserverV6)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TGWAssignedASNType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TgwAsn != 0 {
		n += 1 + sovTypes(uint64(m.TgwAsn))
	}
	if m.VolterraSiteAsn != 0 {
		n += 1 + sovTypes(uint64(m.VolterraSiteAsn))
	}
	return n
}

func (m *TGWParamsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsnChoice != nil {
		n += m.AsnChoice.Size()
	}
	return n
}

func (m *TGWParamsType_SystemGenerated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemGenerated != nil {
		l = m.SystemGenerated.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TGWParamsType_UserAssigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserAssigned != nil {
		l = m.UserAssigned.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ExistingTGWType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TgwId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwAsn != 0 {
		n += 1 + sovTypes(uint64(m.TgwAsn))
	}
	if m.VolterraSiteAsn != 0 {
		n += 1 + sovTypes(uint64(m.VolterraSiteAsn))
	}
	return n
}

func (m *NetworkSelectType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	return n
}

func (m *NetworkSelectType_SiteLocalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalNetwork != nil {
		l = m.SiteLocalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *NetworkSelectType_SiteLocalInsideNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalInsideNetwork != nil {
		l = m.SiteLocalInsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *NetworkSelectType_SegmentNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SegmentNetwork != nil {
		l = m.SegmentNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SnatPoolConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SnatPoolChoice != nil {
		n += m.SnatPoolChoice.Size()
	}
	return n
}

func (m *SnatPoolConfiguration_NoSnatPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoSnatPool != nil {
		l = m.NoSnatPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SnatPoolConfiguration_SnatPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SnatPool != nil {
		l = m.SnatPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ObjectRefType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectRefType{`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinkRefType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LinkRefType{`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteLocator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteLocator{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteLocator_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteLocator_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteLocator_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteLocator_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteReferenceListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRefs := "[]*ObjectRefType{"
	for _, f := range this.Refs {
		repeatedStringForRefs += strings.Replace(f.String(), "ObjectRefType", "ObjectRefType", 1) + ","
	}
	repeatedStringForRefs += "}"
	s := strings.Join([]string{`&SiteReferenceListType{`,
		`Refs:` + repeatedStringForRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteRegionLocator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteRegionLocator{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteRegionLocator_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteRegionLocator_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteRegionLocator_CloudReRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteRegionLocator_CloudReRegion{`,
		`CloudReRegion:` + strings.Replace(fmt.Sprintf("%v", this.CloudReRegion), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteRegionLocator_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteRegionLocator_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualNetwork{`,
		`VirtualNetwork:` + strings.Replace(this.VirtualNetwork.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`VipChoice:` + fmt.Sprintf("%v", this.VipChoice) + `,`,
		`V6VipChoice:` + fmt.Sprintf("%v", this.V6VipChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualNetwork_DefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualNetwork_DefaultVip{`,
		`DefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.DefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualNetwork_SpecificVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualNetwork_SpecificVip{`,
		`SpecificVip:` + fmt.Sprintf("%v", this.SpecificVip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualNetwork_DefaultV6Vip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualNetwork_DefaultV6Vip{`,
		`DefaultV6Vip:` + strings.Replace(fmt.Sprintf("%v", this.DefaultV6Vip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualNetwork_SpecificV6Vip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualNetwork_SpecificV6Vip{`,
		`SpecificV6Vip:` + fmt.Sprintf("%v", this.SpecificV6Vip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereSegment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereSegment{`,
		`Segment:` + strings.Replace(this.Segment.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`Ipv4Vip:` + fmt.Sprintf("%v", this.Ipv4Vip) + `,`,
		`Ipv6Vip:` + fmt.Sprintf("%v", this.Ipv6Vip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereSite{`,
		`Network:` + fmt.Sprintf("%v", this.Network) + `,`,
		`Site:` + strings.Replace(this.Site.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`Ipv6:` + fmt.Sprintf("%v", this.Ipv6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereSiteSegment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereSiteSegment{`,
		`Segment:` + strings.Replace(this.Segment.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`Site:` + strings.Replace(this.Site.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`Ipv6:` + fmt.Sprintf("%v", this.Ipv6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereCloudEdgeSegment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereCloudEdgeSegment{`,
		`Segment:` + strings.Replace(this.Segment.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`CloudEdge:` + strings.Replace(this.CloudEdge.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`Ipv6:` + fmt.Sprintf("%v", this.Ipv6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualSite{`,
		`Network:` + fmt.Sprintf("%v", this.Network) + `,`,
		`VirtualSite:` + strings.Replace(this.VirtualSite.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualSiteSpecifiedVIP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualSiteSpecifiedVIP{`,
		`Network:` + fmt.Sprintf("%v", this.Network) + `,`,
		`VirtualSite:` + strings.Replace(this.VirtualSite.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`Ipv6:` + fmt.Sprintf("%v", this.Ipv6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualSiteSegment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualSiteSegment{`,
		`Segment:` + strings.Replace(this.Segment.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`VirtualSite:` + strings.Replace(this.VirtualSite.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`Ipv6:` + fmt.Sprintf("%v", this.Ipv6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVK8SService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVK8SService{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVK8SService_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVK8SService_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVK8SService_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVK8SService_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "WhereSite", "WhereSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "WhereVirtualSite", "WhereVirtualSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_Vk8SService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_Vk8SService{`,
		`Vk8SService:` + strings.Replace(fmt.Sprintf("%v", this.Vk8SService), "WhereVK8SService", "WhereVK8SService", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_UseDefaultPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_UseDefaultPort{`,
		`UseDefaultPort:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_Port{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_VirtualNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_VirtualNetwork{`,
		`VirtualNetwork:` + strings.Replace(fmt.Sprintf("%v", this.VirtualNetwork), "WhereVirtualNetwork", "WhereVirtualNetwork", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_SiteSegment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_SiteSegment{`,
		`SiteSegment:` + strings.Replace(fmt.Sprintf("%v", this.SiteSegment), "WhereSiteSegment", "WhereSiteSegment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_VirtualSiteSegment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_VirtualSiteSegment{`,
		`VirtualSiteSegment:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSiteSegment), "WhereVirtualSiteSegment", "WhereVirtualSiteSegment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_Segment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_Segment{`,
		`Segment:` + strings.Replace(fmt.Sprintf("%v", this.Segment), "WhereSegment", "WhereSegment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_CloudEdgeSegment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_CloudEdgeSegment{`,
		`CloudEdgeSegment:` + strings.Replace(fmt.Sprintf("%v", this.CloudEdgeSegment), "WhereCloudEdgeSegment", "WhereCloudEdgeSegment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_PortRanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_PortRanges{`,
		`PortRanges:` + fmt.Sprintf("%v", this.PortRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_VirtualSiteWithVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_VirtualSiteWithVip{`,
		`VirtualSiteWithVip:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSiteWithVip), "WhereVirtualSiteSpecifiedVIP", "WhereVirtualSiteSpecifiedVIP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "WhereSite", "WhereSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "WhereVirtualSite", "WhereVirtualSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite_UseDefaultPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite_UseDefaultPort{`,
		`UseDefaultPort:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite_Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite_Port{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvertisePublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvertisePublic{`,
		`PublicIp:` + strings.Replace(this.PublicIp.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAdvertiseWhere := "[]*WhereType{"
	for _, f := range this.AdvertiseWhere {
		repeatedStringForAdvertiseWhere += strings.Replace(f.String(), "WhereType", "WhereType", 1) + ","
	}
	repeatedStringForAdvertiseWhere += "}"
	s := strings.Join([]string{`&AdvertiseCustom{`,
		`AdvertiseWhere:` + repeatedStringForAdvertiseWhere + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvertiseSiteVsite) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAdvertiseWhere := "[]*WhereTypeSiteVsite{"
	for _, f := range this.AdvertiseWhere {
		repeatedStringForAdvertiseWhere += strings.Replace(f.String(), "WhereTypeSiteVsite", "WhereTypeSiteVsite", 1) + ","
	}
	repeatedStringForAdvertiseWhere += "}"
	s := strings.Join([]string{`&AdvertiseSiteVsite{`,
		`AdvertiseWhere:` + repeatedStringForAdvertiseWhere + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomCiphers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomCiphers{`,
		`MinVersion:` + fmt.Sprintf("%v", this.MinVersion) + `,`,
		`MaxVersion:` + fmt.Sprintf("%v", this.MaxVersion) + `,`,
		`CipherSuites:` + fmt.Sprintf("%v", this.CipherSuites) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig_DefaultSecurity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig_DefaultSecurity{`,
		`DefaultSecurity:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSecurity), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig_MediumSecurity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig_MediumSecurity{`,
		`MediumSecurity:` + strings.Replace(fmt.Sprintf("%v", this.MediumSecurity), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig_LowSecurity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig_LowSecurity{`,
		`LowSecurity:` + strings.Replace(fmt.Sprintf("%v", this.LowSecurity), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig_CustomSecurity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig_CustomSecurity{`,
		`CustomSecurity:` + strings.Replace(fmt.Sprintf("%v", this.CustomSecurity), "CustomCiphers", "CustomCiphers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTlsCertificates := "[]*TlsCertificateType{"
	for _, f := range this.TlsCertificates {
		repeatedStringForTlsCertificates += strings.Replace(fmt.Sprintf("%v", f), "TlsCertificateType", "schema.TlsCertificateType", 1) + ","
	}
	repeatedStringForTlsCertificates += "}"
	s := strings.Join([]string{`&DownstreamTlsParamsType{`,
		`TlsConfig:` + strings.Replace(this.TlsConfig.String(), "TlsConfig", "TlsConfig", 1) + `,`,
		`TlsCertificates:` + repeatedStringForTlsCertificates + `,`,
		`MtlsChoice:` + fmt.Sprintf("%v", this.MtlsChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType_NoMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsParamsType_NoMtls{`,
		`NoMtls:` + strings.Replace(fmt.Sprintf("%v", this.NoMtls), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType_UseMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsParamsType_UseMtls{`,
		`UseMtls:` + strings.Replace(fmt.Sprintf("%v", this.UseMtls), "DownstreamTlsValidationContext", "DownstreamTlsValidationContext", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTLSCertsParams) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCertificates := "[]*ObjectRefType{"
	for _, f := range this.Certificates {
		repeatedStringForCertificates += strings.Replace(f.String(), "ObjectRefType", "ObjectRefType", 1) + ","
	}
	repeatedStringForCertificates += "}"
	s := strings.Join([]string{`&DownstreamTLSCertsParams{`,
		`TlsConfig:` + strings.Replace(this.TlsConfig.String(), "TlsConfig", "TlsConfig", 1) + `,`,
		`Certificates:` + repeatedStringForCertificates + `,`,
		`MtlsChoice:` + fmt.Sprintf("%v", this.MtlsChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTLSCertsParams_NoMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTLSCertsParams_NoMtls{`,
		`NoMtls:` + strings.Replace(fmt.Sprintf("%v", this.NoMtls), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTLSCertsParams_UseMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTLSCertsParams_UseMtls{`,
		`UseMtls:` + strings.Replace(fmt.Sprintf("%v", this.UseMtls), "DownstreamTlsValidationContext", "DownstreamTlsValidationContext", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *XfccHeaderKeys) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&XfccHeaderKeys{`,
		`XfccHeaderElements:` + fmt.Sprintf("%v", this.XfccHeaderElements) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsValidationContext) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsValidationContext{`,
		`TrustedCaChoice:` + fmt.Sprintf("%v", this.TrustedCaChoice) + `,`,
		`CrlChoice:` + fmt.Sprintf("%v", this.CrlChoice) + `,`,
		`XfccHeader:` + fmt.Sprintf("%v", this.XfccHeader) + `,`,
		`ClientCertificateOptional:` + fmt.Sprintf("%v", this.ClientCertificateOptional) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsValidationContext_TrustedCaUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsValidationContext_TrustedCaUrl{`,
		`TrustedCaUrl:` + fmt.Sprintf("%v", this.TrustedCaUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsValidationContext_NoCrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsValidationContext_NoCrl{`,
		`NoCrl:` + strings.Replace(fmt.Sprintf("%v", this.NoCrl), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsValidationContext_Crl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsValidationContext_Crl{`,
		`Crl:` + strings.Replace(fmt.Sprintf("%v", this.Crl), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsValidationContext_XfccDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsValidationContext_XfccDisabled{`,
		`XfccDisabled:` + strings.Replace(fmt.Sprintf("%v", this.XfccDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsValidationContext_XfccOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsValidationContext_XfccOptions{`,
		`XfccOptions:` + strings.Replace(fmt.Sprintf("%v", this.XfccOptions), "XfccHeaderKeys", "XfccHeaderKeys", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsValidationContext_TrustedCa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsValidationContext_TrustedCa{`,
		`TrustedCa:` + strings.Replace(fmt.Sprintf("%v", this.TrustedCa), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolWithWeight) String() string {
	if this == nil {
		return "nil"
	}
	keysForEndpointSubsets := make([]string, 0, len(this.EndpointSubsets))
	for k, _ := range this.EndpointSubsets {
		keysForEndpointSubsets = append(keysForEndpointSubsets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEndpointSubsets)
	mapStringForEndpointSubsets := "map[string]string{"
	for _, k := range keysForEndpointSubsets {
		mapStringForEndpointSubsets += fmt.Sprintf("%v: %v,", k, this.EndpointSubsets[k])
	}
	mapStringForEndpointSubsets += "}"
	s := strings.Join([]string{`&OriginPoolWithWeight{`,
		`PoolChoice:` + fmt.Sprintf("%v", this.PoolChoice) + `,`,
		`Weight:` + fmt.Sprintf("%v", this.Weight) + `,`,
		`EndpointSubsets:` + mapStringForEndpointSubsets + `,`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolWithWeight_Pool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolWithWeight_Pool{`,
		`Pool:` + strings.Replace(fmt.Sprintf("%v", this.Pool), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolWithWeight_Cluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolWithWeight_Cluster{`,
		`Cluster:` + strings.Replace(fmt.Sprintf("%v", this.Cluster), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPools := "[]*OriginPoolWithWeight{"
	for _, f := range this.Pools {
		repeatedStringForPools += strings.Replace(f.String(), "OriginPoolWithWeight", "OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForPools += "}"
	s := strings.Join([]string{`&OriginPoolListType{`,
		`Pools:` + repeatedStringForPools + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrefixStringListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrefixStringListType{`,
		`Prefixes:` + fmt.Sprintf("%v", this.Prefixes) + `,`,
		`Ipv6Prefixes:` + fmt.Sprintf("%v", this.Ipv6Prefixes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalConnectorType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalConnectorType{`,
		`GlobalVn:` + strings.Replace(this.GlobalVn.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SegmentRefList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSegments := "[]*ObjectRefType{"
	for _, f := range this.Segments {
		repeatedStringForSegments += strings.Replace(f.String(), "ObjectRefType", "ObjectRefType", 1) + ","
	}
	repeatedStringForSegments += "}"
	s := strings.Join([]string{`&SegmentRefList{`,
		`Segments:` + repeatedStringForSegments + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolterraSoftwareType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolterraSoftwareType{`,
		`VolterraSwVersionChoice:` + fmt.Sprintf("%v", this.VolterraSwVersionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolterraSoftwareType_DefaultSwVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolterraSoftwareType_DefaultSwVersion{`,
		`DefaultSwVersion:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSwVersion), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolterraSoftwareType_VolterraSoftwareVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolterraSoftwareType_VolterraSoftwareVersion{`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OperatingSystemType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OperatingSystemType{`,
		`OperatingSystemVersionChoice:` + fmt.Sprintf("%v", this.OperatingSystemVersionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OperatingSystemType_DefaultOsVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OperatingSystemType_DefaultOsVersion{`,
		`DefaultOsVersion:` + strings.Replace(fmt.Sprintf("%v", this.DefaultOsVersion), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OperatingSystemType_OperatingSystemVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OperatingSystemType_OperatingSystemVersion{`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubernetesUpgradeDrain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubernetesUpgradeDrain{`,
		`KubernetesUpgradeDrainEnableChoice:` + fmt.Sprintf("%v", this.KubernetesUpgradeDrainEnableChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubernetesUpgradeDrain_EnableUpgradeDrain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubernetesUpgradeDrain_EnableUpgradeDrain{`,
		`EnableUpgradeDrain:` + strings.Replace(fmt.Sprintf("%v", this.EnableUpgradeDrain), "KubernetesUpgradeDrainConfig", "KubernetesUpgradeDrainConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubernetesUpgradeDrain_DisableUpgradeDrain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubernetesUpgradeDrain_DisableUpgradeDrain{`,
		`DisableUpgradeDrain:` + strings.Replace(fmt.Sprintf("%v", this.DisableUpgradeDrain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegionalEdgeSelection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegionalEdgeSelection{`,
		`ReSelectionChoice:` + fmt.Sprintf("%v", this.ReSelectionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegionalEdgeSelection_GeoProximity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegionalEdgeSelection_GeoProximity{`,
		`GeoProximity:` + strings.Replace(fmt.Sprintf("%v", this.GeoProximity), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegionalEdgeSelection_SpecificGeography) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegionalEdgeSelection_SpecificGeography{`,
		`SpecificGeography:` + fmt.Sprintf("%v", this.SpecificGeography) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegionalEdgeSelection_SpecificRe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegionalEdgeSelection_SpecificRe{`,
		`SpecificRe:` + strings.Replace(fmt.Sprintf("%v", this.SpecificRe), "SpecificRE", "SpecificRE", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdminUserCredentialsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdminUserCredentialsType{`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`AdminPassword:` + strings.Replace(fmt.Sprintf("%v", this.AdminPassword), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProactiveMonitoringChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProactiveMonitoringChoice{`,
		`ProactiveMonitoringChoice:` + fmt.Sprintf("%v", this.ProactiveMonitoringChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProactiveMonitoringChoice_ProactiveMonitoringEnable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProactiveMonitoringChoice_ProactiveMonitoringEnable{`,
		`ProactiveMonitoringEnable:` + strings.Replace(fmt.Sprintf("%v", this.ProactiveMonitoringEnable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProactiveMonitoringChoice_ProactiveMonitoringDisable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProactiveMonitoringChoice_ProactiveMonitoringDisable{`,
		`ProactiveMonitoringDisable:` + strings.Replace(fmt.Sprintf("%v", this.ProactiveMonitoringDisable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpecificRE) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpecificRE{`,
		`PrimaryRe:` + fmt.Sprintf("%v", this.PrimaryRe) + `,`,
		`BackupRe:` + fmt.Sprintf("%v", this.BackupRe) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubernetesUpgradeDrainConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubernetesUpgradeDrainConfig{`,
		`DrainNodeTimeout:` + fmt.Sprintf("%v", this.DrainNodeTimeout) + `,`,
		`DrainMaxUnavailableChoice:` + fmt.Sprintf("%v", this.DrainMaxUnavailableChoice) + `,`,
		`VegaUpgradeModeToggleChoice:` + fmt.Sprintf("%v", this.VegaUpgradeModeToggleChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount{`,
		`DrainMaxUnavailableNodeCount:` + fmt.Sprintf("%v", this.DrainMaxUnavailableNodeCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage{`,
		`DrainMaxUnavailableNodePercentage:` + fmt.Sprintf("%v", this.DrainMaxUnavailableNodePercentage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode{`,
		`DisableVegaUpgradeMode:` + strings.Replace(fmt.Sprintf("%v", this.DisableVegaUpgradeMode), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode{`,
		`EnableVegaUpgradeMode:` + strings.Replace(fmt.Sprintf("%v", this.EnableVegaUpgradeMode), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerformanceEnhancementModeType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerformanceEnhancementModeType{`,
		`PerfModeChoice:` + fmt.Sprintf("%v", this.PerfModeChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerformanceEnhancementModeType_PerfModeL7Enhanced) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerformanceEnhancementModeType_PerfModeL7Enhanced{`,
		`PerfModeL7Enhanced:` + strings.Replace(fmt.Sprintf("%v", this.PerfModeL7Enhanced), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerformanceEnhancementModeType_PerfModeL3Enhanced) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerformanceEnhancementModeType_PerfModeL3Enhanced{`,
		`PerfModeL3Enhanced:` + strings.Replace(fmt.Sprintf("%v", this.PerfModeL3Enhanced), "L3PerformanceEnhancementType", "L3PerformanceEnhancementType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AcceleratedNetworkingType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AcceleratedNetworkingType{`,
		`AcceleratedNetworking:` + fmt.Sprintf("%v", this.AcceleratedNetworking) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AcceleratedNetworkingType_Disable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AcceleratedNetworkingType_Disable{`,
		`Disable:` + strings.Replace(fmt.Sprintf("%v", this.Disable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AcceleratedNetworkingType_Enable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AcceleratedNetworkingType_Enable{`,
		`Enable:` + strings.Replace(fmt.Sprintf("%v", this.Enable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *L3PerformanceEnhancementType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&L3PerformanceEnhancementType{`,
		`PerfModeChoice:` + fmt.Sprintf("%v", this.PerfModeChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *L3PerformanceEnhancementType_NoJumbo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&L3PerformanceEnhancementType_NoJumbo{`,
		`NoJumbo:` + strings.Replace(fmt.Sprintf("%v", this.NoJumbo), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *L3PerformanceEnhancementType_Jumbo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&L3PerformanceEnhancementType_Jumbo{`,
		`Jumbo:` + strings.Replace(fmt.Sprintf("%v", this.Jumbo), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InternetVIPInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InternetVIPInfo{`,
		`SiteName:` + fmt.Sprintf("%v", this.SiteName) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "InternetVIPStatus", "InternetVIPStatus", 1) + `,`,
		`SiteNetworkType:` + fmt.Sprintf("%v", this.SiteNetworkType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InternetVIPStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTargetGroupStatus := "[]*InternetVIPTargetGroupStatusType{"
	for _, f := range this.TargetGroupStatus {
		repeatedStringForTargetGroupStatus += strings.Replace(f.String(), "InternetVIPTargetGroupStatusType", "InternetVIPTargetGroupStatusType", 1) + ","
	}
	repeatedStringForTargetGroupStatus += "}"
	s := strings.Join([]string{`&InternetVIPStatus{`,
		`NlbCname:` + fmt.Sprintf("%v", this.NlbCname) + `,`,
		`NlbStatus:` + fmt.Sprintf("%v", this.NlbStatus) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Arn:` + fmt.Sprintf("%v", this.Arn) + `,`,
		`TargetGroupStatus:` + repeatedStringForTargetGroupStatus + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InternetVIPTargetGroupStatusType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForListenerStatus := "[]*InternetVIPListenerStatusType{"
	for _, f := range this.ListenerStatus {
		repeatedStringForListenerStatus += strings.Replace(f.String(), "InternetVIPListenerStatusType", "InternetVIPListenerStatusType", 1) + ","
	}
	repeatedStringForListenerStatus += "}"
	s := strings.Join([]string{`&InternetVIPTargetGroupStatusType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Arn:` + fmt.Sprintf("%v", this.Arn) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`ListenerStatus:` + repeatedStringForListenerStatus + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InternetVIPListenerStatusType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InternetVIPListenerStatusType{`,
		`Arn:` + fmt.Sprintf("%v", this.Arn) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MasterNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MasterNode{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`PublicIp:` + fmt.Sprintf("%v", this.PublicIp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiOperation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiOperation{`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointWithSchema) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointWithSchema{`,
		`ApiOperation:` + strings.Replace(this.ApiOperation.String(), "ApiOperation", "ApiOperation", 1) + `,`,
		`SchemaJson:` + fmt.Sprintf("%v", this.SchemaJson) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDNS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDNS{`,
		`InsideNameserver:` + fmt.Sprintf("%v", this.InsideNameserver) + `,`,
		`OutsideNameserver:` + fmt.Sprintf("%v", this.OutsideNameserver) + `,`,
		`InsideNameserverV6:` + fmt.Sprintf("%v", this.InsideNameserverV6) + `,`,
		`OutsideNameserverV6:` + fmt.Sprintf("%v", this.OutsideNameserverV6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TGWAssignedASNType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TGWAssignedASNType{`,
		`TgwAsn:` + fmt.Sprintf("%v", this.TgwAsn) + `,`,
		`VolterraSiteAsn:` + fmt.Sprintf("%v", this.VolterraSiteAsn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TGWParamsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TGWParamsType{`,
		`AsnChoice:` + fmt.Sprintf("%v", this.AsnChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TGWParamsType_SystemGenerated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TGWParamsType_SystemGenerated{`,
		`SystemGenerated:` + strings.Replace(fmt.Sprintf("%v", this.SystemGenerated), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TGWParamsType_UserAssigned) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TGWParamsType_UserAssigned{`,
		`UserAssigned:` + strings.Replace(fmt.Sprintf("%v", this.UserAssigned), "TGWAssignedASNType", "TGWAssignedASNType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExistingTGWType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExistingTGWType{`,
		`TgwId:` + fmt.Sprintf("%v", this.TgwId) + `,`,
		`TgwAsn:` + fmt.Sprintf("%v", this.TgwAsn) + `,`,
		`VolterraSiteAsn:` + fmt.Sprintf("%v", this.VolterraSiteAsn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkSelectType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkSelectType{`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkSelectType_SiteLocalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkSelectType_SiteLocalNetwork{`,
		`SiteLocalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkSelectType_SiteLocalInsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkSelectType_SiteLocalInsideNetwork{`,
		`SiteLocalInsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalInsideNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkSelectType_SegmentNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkSelectType_SegmentNetwork{`,
		`SegmentNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SegmentNetwork), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SnatPoolConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnatPoolConfiguration{`,
		`SnatPoolChoice:` + fmt.Sprintf("%v", this.SnatPoolChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SnatPoolConfiguration_NoSnatPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnatPoolConfiguration_NoSnatPool{`,
		`NoSnatPool:` + strings.Replace(fmt.Sprintf("%v", this.NoSnatPool), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SnatPoolConfiguration_SnatPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnatPoolConfiguration_SnatPool{`,
		`SnatPool:` + strings.Replace(fmt.Sprintf("%v", this.SnatPool), "PrefixStringListType", "PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ObjectRefType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectRefType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectRefType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkRefType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkRefType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkRefType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Href", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Href = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteLocator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteLocator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteLocator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &SiteLocator_Site{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &SiteLocator_VirtualSite{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteReferenceListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteReferenceListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteReferenceListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refs = append(m.Refs, &ObjectRefType{})
			if err := m.Refs[len(m.Refs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteRegionLocator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteRegionLocator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteRegionLocator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &SiteRegionLocator_Site{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudReRegion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &SiteRegionLocator_CloudReRegion{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &SiteRegionLocator_VirtualSite{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereVirtualNetwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereVirtualNetwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereVirtualNetwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VirtualNetwork == nil {
				m.VirtualNetwork = &ObjectRefType{}
			}
			if err := m.VirtualNetwork.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VipChoice = &WhereVirtualNetwork_DefaultVip{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipChoice = &WhereVirtualNetwork_SpecificVip{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultV6Vip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.V6VipChoice = &WhereVirtualNetwork_DefaultV6Vip{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificV6Vip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V6VipChoice = &WhereVirtualNetwork_SpecificV6Vip{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Segment == nil {
				m.Segment = &ObjectRefType{}
			}
			if err := m.Segment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Vip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Vip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Vip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6Vip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereSite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereSite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereSite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= SiteNetwork(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Site == nil {
				m.Site = &ObjectRefType{}
			}
			if err := m.Site.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereSiteSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereSiteSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereSiteSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Segment == nil {
				m.Segment = &ObjectRefType{}
			}
			if err := m.Segment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Site == nil {
				m.Site = &ObjectRefType{}
			}
			if err := m.Site.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereCloudEdgeSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereCloudEdgeSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereCloudEdgeSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Segment == nil {
				m.Segment = &ObjectRefType{}
			}
			if err := m.Segment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudEdge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudEdge == nil {
				m.CloudEdge = &ObjectRefType{}
			}
			if err := m.CloudEdge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereVirtualSite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereVirtualSite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereVirtualSite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= SiteNetwork(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VirtualSite == nil {
				m.VirtualSite = &ObjectRefType{}
			}
			if err := m.VirtualSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereVirtualSiteSpecifiedVIP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereVirtualSiteSpecifiedVIP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereVirtualSiteSpecifiedVIP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= SiteNetworkSpecifiedVIP(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VirtualSite == nil {
				m.VirtualSite = &ObjectRefType{}
			}
			if err := m.VirtualSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereVirtualSiteSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereVirtualSiteSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereVirtualSiteSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Segment == nil {
				m.Segment = &ObjectRefType{}
			}
			if err := m.Segment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VirtualSite == nil {
				m.VirtualSite = &ObjectRefType{}
			}
			if err := m.VirtualSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereVK8SService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereVK8SService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereVK8SService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereVK8SService_Site{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereVK8SService_VirtualSite{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_Site{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVirtualSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_VirtualSite{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vk8SService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVK8SService{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_Vk8SService{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PortChoice = &WhereType_UseDefaultPort{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &WhereType_Port{v}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVirtualNetwork{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_VirtualNetwork{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereSiteSegment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_SiteSegment{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSiteSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVirtualSiteSegment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_VirtualSiteSegment{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereSegment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_Segment{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudEdgeSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereCloudEdgeSegment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_CloudEdgeSegment{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChoice = &WhereType_PortRanges{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSiteWithVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVirtualSiteSpecifiedVIP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_VirtualSiteWithVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereTypeSiteVsite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereTypeSiteVsite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereTypeSiteVsite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereTypeSiteVsite_Site{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVirtualSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereTypeSiteVsite_VirtualSite{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PortChoice = &WhereTypeSiteVsite_UseDefaultPort{v}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &WhereTypeSiteVsite_Port{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertisePublic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertisePublic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertisePublic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicIp == nil {
				m.PublicIp = &ObjectRefType{}
			}
			if err := m.PublicIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertiseCustom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertiseCustom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertiseCustom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseWhere", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertiseWhere = append(m.AdvertiseWhere, &WhereType{})
			if err := m.AdvertiseWhere[len(m.AdvertiseWhere)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertiseSiteVsite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertiseSiteVsite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertiseSiteVsite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseWhere", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertiseWhere = append(m.AdvertiseWhere, &WhereTypeSiteVsite{})
			if err := m.AdvertiseWhere[len(m.AdvertiseWhere)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomCiphers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomCiphers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomCiphers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			m.MinVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVersion |= schema.TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVersion", wireType)
			}
			m.MaxVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxVersion |= schema.TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherSuites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherSuites = append(m.CipherSuites, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &TlsConfig_DefaultSecurity{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediumSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &TlsConfig_MediumSecurity{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &TlsConfig_LowSecurity{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomCiphers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &TlsConfig_CustomSecurity{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamTlsParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamTlsParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamTlsParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &TlsConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsCertificates = append(m.TlsCertificates, &schema.TlsCertificateType{})
			if err := m.TlsCertificates[len(m.TlsCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &DownstreamTlsParamsType_NoMtls{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamTlsValidationContext{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &DownstreamTlsParamsType_UseMtls{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamTLSCertsParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamTLSCertsParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamTLSCertsParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &TlsConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, &ObjectRefType{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &DownstreamTLSCertsParams_NoMtls{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamTlsValidationContext{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &DownstreamTLSCertsParams_UseMtls{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XfccHeaderKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XfccHeaderKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XfccHeaderKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v schema.XfccElement
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.XfccElement(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.XfccHeaderElements = append(m.XfccHeaderElements, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.XfccHeaderElements) == 0 {
					m.XfccHeaderElements = make([]schema.XfccElement, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.XfccElement
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.XfccElement(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.XfccHeaderElements = append(m.XfccHeaderElements, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field XfccHeaderElements", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamTlsValidationContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamTlsValidationContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamTlsValidationContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedCaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedCaChoice = &DownstreamTlsValidationContext_TrustedCaUrl{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoCrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CrlChoice = &DownstreamTlsValidationContext_NoCrl{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CrlChoice = &DownstreamTlsValidationContext_Crl{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XfccDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XfccHeader = &DownstreamTlsValidationContext_XfccDisabled{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XfccOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &XfccHeaderKeys{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XfccHeader = &DownstreamTlsValidationContext_XfccOptions{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedCa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrustedCaChoice = &DownstreamTlsValidationContext_TrustedCa{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCertificateOptional", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientCertificateOptional = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginPoolWithWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginPoolWithWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginPoolWithWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PoolChoice = &OriginPoolWithWeight_Pool{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PoolChoice = &OriginPoolWithWeight_Cluster{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSubsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndpointSubsets == nil {
				m.EndpointSubsets = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EndpointSubsets[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginPoolListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginPoolListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginPoolListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &OriginPoolWithWeight{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrefixStringListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrefixStringListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrefixStringListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefixes = append(m.Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6Prefixes = append(m.Ipv6Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalConnectorType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalConnectorType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalConnectorType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalVn == nil {
				m.GlobalVn = &ObjectRefType{}
			}
			if err := m.GlobalVn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentRefList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentRefList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentRefList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, &ObjectRefType{})
			if err := m.Segments[len(m.Segments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolterraSoftwareType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolterraSoftwareType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolterraSoftwareType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSwVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VolterraSwVersionChoice = &VolterraSoftwareType_DefaultSwVersion{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSwVersionChoice = &VolterraSoftwareType_VolterraSoftwareVersion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatingSystemType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatingSystemType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatingSystemType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultOsVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OperatingSystemVersionChoice = &OperatingSystemType_DefaultOsVersion{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersionChoice = &OperatingSystemType_OperatingSystemVersion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubernetesUpgradeDrain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubernetesUpgradeDrain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubernetesUpgradeDrain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableUpgradeDrain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KubernetesUpgradeDrainConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.KubernetesUpgradeDrainEnableChoice = &KubernetesUpgradeDrain_EnableUpgradeDrain{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableUpgradeDrain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.KubernetesUpgradeDrainEnableChoice = &KubernetesUpgradeDrain_DisableUpgradeDrain{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionalEdgeSelection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionalEdgeSelection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionalEdgeSelection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoProximity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ReSelectionChoice = &RegionalEdgeSelection_GeoProximity{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificGeography", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReSelectionChoice = &RegionalEdgeSelection_SpecificGeography{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificRe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SpecificRE{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ReSelectionChoice = &RegionalEdgeSelection_SpecificRe{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminUserCredentialsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminUserCredentialsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminUserCredentialsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminPassword", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminPassword == nil {
				m.AdminPassword = &schema.SecretType{}
			}
			if err := m.AdminPassword.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProactiveMonitoringChoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProactiveMonitoringChoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProactiveMonitoringChoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProactiveMonitoringEnable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProactiveMonitoringChoice = &ProactiveMonitoringChoice_ProactiveMonitoringEnable{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProactiveMonitoringDisable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProactiveMonitoringChoice = &ProactiveMonitoringChoice_ProactiveMonitoringDisable{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecificRE) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecificRE: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecificRE: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryRe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryRe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupRe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupRe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubernetesUpgradeDrainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubernetesUpgradeDrainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubernetesUpgradeDrainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrainNodeTimeout", wireType)
			}
			m.DrainNodeTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrainNodeTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrainMaxUnavailableNodeCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrainMaxUnavailableChoice = &KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodeCount{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrainMaxUnavailableNodePercentage", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrainMaxUnavailableChoice = &KubernetesUpgradeDrainConfig_DrainMaxUnavailableNodePercentage{v}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableVegaUpgradeMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VegaUpgradeModeToggleChoice = &KubernetesUpgradeDrainConfig_DisableVegaUpgradeMode{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableVegaUpgradeMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VegaUpgradeModeToggleChoice = &KubernetesUpgradeDrainConfig_EnableVegaUpgradeMode{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerformanceEnhancementModeType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerformanceEnhancementModeType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerformanceEnhancementModeType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerfModeL7Enhanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PerfModeChoice = &PerformanceEnhancementModeType_PerfModeL7Enhanced{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerfModeL3Enhanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &L3PerformanceEnhancementType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PerfModeChoice = &PerformanceEnhancementModeType_PerfModeL3Enhanced{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceleratedNetworkingType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceleratedNetworkingType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceleratedNetworkingType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AcceleratedNetworking = &AcceleratedNetworkingType_Disable{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AcceleratedNetworking = &AcceleratedNetworkingType_Enable{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L3PerformanceEnhancementType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L3PerformanceEnhancementType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L3PerformanceEnhancementType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoJumbo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PerfModeChoice = &L3PerformanceEnhancementType_NoJumbo{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jumbo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PerfModeChoice = &L3PerformanceEnhancementType_Jumbo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternetVIPInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternetVIPInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternetVIPInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &InternetVIPStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteNetworkType", wireType)
			}
			m.SiteNetworkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteNetworkType |= SiteNetwork(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternetVIPStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternetVIPStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternetVIPStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NlbCname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NlbCname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NlbStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NlbStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetGroupStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetGroupStatus = append(m.TargetGroupStatus, &InternetVIPTargetGroupStatusType{})
			if err := m.TargetGroupStatus[len(m.TargetGroupStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternetVIPTargetGroupStatusType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternetVIPTargetGroupStatusType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternetVIPTargetGroupStatusType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenerStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListenerStatus = append(m.ListenerStatus, &InternetVIPListenerStatusType{})
			if err := m.ListenerStatus[len(m.ListenerStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternetVIPListenerStatusType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternetVIPListenerStatusType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternetVIPListenerStatusType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MasterNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MasterNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MasterNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiEndpointWithSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiEndpointWithSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiEndpointWithSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOperation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiOperation == nil {
				m.ApiOperation = &ApiOperation{}
			}
			if err := m.ApiOperation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomDNS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomDNS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomDNS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideNameserver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsideNameserver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideNameserver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutsideNameserver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideNameserverV6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsideNameserverV6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideNameserverV6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutsideNameserverV6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TGWAssignedASNType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TGWAssignedASNType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TGWAssignedASNType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwAsn", wireType)
			}
			m.TgwAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TgwAsn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSiteAsn", wireType)
			}
			m.VolterraSiteAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolterraSiteAsn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TGWParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TGWParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TGWParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemGenerated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsnChoice = &TGWParamsType_SystemGenerated{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAssigned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TGWAssignedASNType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsnChoice = &TGWParamsType_UserAssigned{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExistingTGWType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExistingTGWType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExistingTGWType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TgwId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwAsn", wireType)
			}
			m.TgwAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TgwAsn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSiteAsn", wireType)
			}
			m.VolterraSiteAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolterraSiteAsn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkSelectType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkSelectType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkSelectType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &NetworkSelectType_SiteLocalNetwork{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalInsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &NetworkSelectType_SiteLocalInsideNetwork{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &NetworkSelectType_SegmentNetwork{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnatPoolConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnatPoolConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnatPoolConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnatPoolChoice = &SnatPoolConfiguration_NoSnatPool{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnatPoolChoice = &SnatPoolConfiguration_SnatPool{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/types.proto

package views

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SiteNetwork
//
// x-displayName: "Site Network"
// This defines network types to be used on site
type SiteNetwork int32

const (
	// x-displayName: "Inside and Outside Network"
	// All inside and outside networks.
	SITE_NETWORK_INSIDE_AND_OUTSIDE SiteNetwork = 0
	// x-displayName: "Inside Network"
	// All inside networks.
	SITE_NETWORK_INSIDE SiteNetwork = 1
	// x-displayName: "Outside Network"
	// All outside networks.
	SITE_NETWORK_OUTSIDE SiteNetwork = 2
	// x-displayName: "vK8s Service Network"
	// vK8s service network.
	SITE_NETWORK_SERVICE SiteNetwork = 3
)

var SiteNetwork_name = map[int32]string{
	0: "SITE_NETWORK_INSIDE_AND_OUTSIDE",
	1: "SITE_NETWORK_INSIDE",
	2: "SITE_NETWORK_OUTSIDE",
	3: "SITE_NETWORK_SERVICE",
}

var SiteNetwork_value = map[string]int32{
	"SITE_NETWORK_INSIDE_AND_OUTSIDE": 0,
	"SITE_NETWORK_INSIDE":             1,
	"SITE_NETWORK_OUTSIDE":            2,
	"SITE_NETWORK_SERVICE":            3,
}

func (SiteNetwork) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{0}
}

// ObjectRefType
//
// x-displayName: "Object reference"
// This type establishes a direct reference from one object(the referrer) to another(the referred).
// Such a reference is in form of tenant/namespace/name
type ObjectRefType struct {
	// tenant
	//
	// x-displayName: "Tenant"
	// x-example: "acmecorp"
	// When a configuration object(e.g. virtual_host) refers to another(e.g route)
	// then tenant will hold the referred object's(e.g. route's) tenant.
	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// When a configuration object(e.g. virtual_host) refers to another(e.g route)
	// then namespace will hold the referred object's(e.g. route's) namespace.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "contacts-route"
	// x-required
	// When a configuration object(e.g. virtual_host) refers to another(e.g route)
	// then name will hold the referred object's(e.g. route's) name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ObjectRefType) Reset()      { *m = ObjectRefType{} }
func (*ObjectRefType) ProtoMessage() {}
func (*ObjectRefType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{0}
}
func (m *ObjectRefType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectRefType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ObjectRefType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectRefType.Merge(m, src)
}
func (m *ObjectRefType) XXX_Size() int {
	return m.Size()
}
func (m *ObjectRefType) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectRefType.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectRefType proto.InternalMessageInfo

func (m *ObjectRefType) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ObjectRefType) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ObjectRefType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// SiteLocator
//
// x-displayName: "Site or Virtual Site"
// This message defines a reference to a site or virtual site object
type SiteLocator struct {
	// SiteLocator
	//
	// x-displayName: "Select Site or Virtual Site"
	// x-required
	// Reference to a site or virtual site object
	//
	// Types that are valid to be assigned to Choice:
	//	*SiteLocator_Site
	//	*SiteLocator_VirtualSite
	Choice isSiteLocator_Choice `protobuf_oneof:"choice"`
}

func (m *SiteLocator) Reset()      { *m = SiteLocator{} }
func (*SiteLocator) ProtoMessage() {}
func (*SiteLocator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{1}
}
func (m *SiteLocator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SiteLocator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SiteLocator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteLocator.Merge(m, src)
}
func (m *SiteLocator) XXX_Size() int {
	return m.Size()
}
func (m *SiteLocator) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteLocator.DiscardUnknown(m)
}

var xxx_messageInfo_SiteLocator proto.InternalMessageInfo

type isSiteLocator_Choice interface {
	isSiteLocator_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SiteLocator_Site struct {
	Site *ObjectRefType `protobuf:"bytes,1,opt,name=site,proto3,oneof" json:"site,omitempty"`
}
type SiteLocator_VirtualSite struct {
	VirtualSite *ObjectRefType `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,proto3,oneof" json:"virtual_site,omitempty"`
}

func (*SiteLocator_Site) isSiteLocator_Choice()        {}
func (*SiteLocator_VirtualSite) isSiteLocator_Choice() {}

func (m *SiteLocator) GetChoice() isSiteLocator_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *SiteLocator) GetSite() *ObjectRefType {
	if x, ok := m.GetChoice().(*SiteLocator_Site); ok {
		return x.Site
	}
	return nil
}

func (m *SiteLocator) GetVirtualSite() *ObjectRefType {
	if x, ok := m.GetChoice().(*SiteLocator_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SiteLocator) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SiteLocator_Site)(nil),
		(*SiteLocator_VirtualSite)(nil),
	}
}

// WhereVirtualNetwork
//
// x-displayName: "Virtual Network"
// Parameters to advertise on a given virtual network
type WhereVirtualNetwork struct {
	// Virtual Network
	//
	// x-displayName: "Virtual Network"
	// x-required
	// Select virtual network reference
	VirtualNetwork *ObjectRefType `protobuf:"bytes,1,opt,name=virtual_network,json=virtualNetwork,proto3" json:"virtual_network,omitempty"`
	// Select VIP
	//
	// x-displayName: "Select VIP"
	// x-required
	// Select default VIP or specify ip address
	//
	// Types that are valid to be assigned to VipChoice:
	//	*WhereVirtualNetwork_DefaultVip
	//	*WhereVirtualNetwork_SpecificVip
	VipChoice isWhereVirtualNetwork_VipChoice `protobuf_oneof:"vip_choice"`
}

func (m *WhereVirtualNetwork) Reset()      { *m = WhereVirtualNetwork{} }
func (*WhereVirtualNetwork) ProtoMessage() {}
func (*WhereVirtualNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{2}
}
func (m *WhereVirtualNetwork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereVirtualNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereVirtualNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereVirtualNetwork.Merge(m, src)
}
func (m *WhereVirtualNetwork) XXX_Size() int {
	return m.Size()
}
func (m *WhereVirtualNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereVirtualNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_WhereVirtualNetwork proto.InternalMessageInfo

type isWhereVirtualNetwork_VipChoice interface {
	isWhereVirtualNetwork_VipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WhereVirtualNetwork_DefaultVip struct {
	DefaultVip *schema.Empty `protobuf:"bytes,3,opt,name=default_vip,json=defaultVip,proto3,oneof" json:"default_vip,omitempty"`
}
type WhereVirtualNetwork_SpecificVip struct {
	SpecificVip string `protobuf:"bytes,4,opt,name=specific_vip,json=specificVip,proto3,oneof" json:"specific_vip,omitempty"`
}

func (*WhereVirtualNetwork_DefaultVip) isWhereVirtualNetwork_VipChoice()  {}
func (*WhereVirtualNetwork_SpecificVip) isWhereVirtualNetwork_VipChoice() {}

func (m *WhereVirtualNetwork) GetVipChoice() isWhereVirtualNetwork_VipChoice {
	if m != nil {
		return m.VipChoice
	}
	return nil
}

func (m *WhereVirtualNetwork) GetVirtualNetwork() *ObjectRefType {
	if m != nil {
		return m.VirtualNetwork
	}
	return nil
}

func (m *WhereVirtualNetwork) GetDefaultVip() *schema.Empty {
	if x, ok := m.GetVipChoice().(*WhereVirtualNetwork_DefaultVip); ok {
		return x.DefaultVip
	}
	return nil
}

func (m *WhereVirtualNetwork) GetSpecificVip() string {
	if x, ok := m.GetVipChoice().(*WhereVirtualNetwork_SpecificVip); ok {
		return x.SpecificVip
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WhereVirtualNetwork) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WhereVirtualNetwork_DefaultVip)(nil),
		(*WhereVirtualNetwork_SpecificVip)(nil),
	}
}

// WhereSite
//
// x-displayName: "Site"
// This defines a reference to a CE site along with network type and an optional ip address where a load balancer could be advertised
type WhereSite struct {
	// SiteNetwork
	//
	// x-displayName: "Site Network"
	// x-required
	// Select network types to be used on site
	// By default VIP chosen as ip address of primary network interface in the network
	Network SiteNetwork `protobuf:"varint,1,opt,name=network,proto3,enum=ves.io.schema.views.SiteNetwork" json:"network,omitempty"`
	// Site
	//
	// x-displayName: "Site Reference"
	// x-required
	// Reference to site object
	Site *ObjectRefType `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
	// IP address on the site
	//
	// x-displayName: "IP Address"
	// Use given IP address as VIP on the site
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *WhereSite) Reset()      { *m = WhereSite{} }
func (*WhereSite) ProtoMessage() {}
func (*WhereSite) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{3}
}
func (m *WhereSite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereSite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereSite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereSite.Merge(m, src)
}
func (m *WhereSite) XXX_Size() int {
	return m.Size()
}
func (m *WhereSite) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereSite.DiscardUnknown(m)
}

var xxx_messageInfo_WhereSite proto.InternalMessageInfo

func (m *WhereSite) GetNetwork() SiteNetwork {
	if m != nil {
		return m.Network
	}
	return SITE_NETWORK_INSIDE_AND_OUTSIDE
}

func (m *WhereSite) GetSite() *ObjectRefType {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *WhereSite) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// WhereVirtualSite
//
// x-displayName: "Virtual Site"
// This defines a reference to a customer site virtual site along with network type where a load balancer could be advertised
type WhereVirtualSite struct {
	// SiteNetwork
	//
	// x-displayName: "Site Network"
	// x-required
	// Select network types to be used on site.
	// IP address of primary network interface in the network
	Network SiteNetwork `protobuf:"varint,1,opt,name=network,proto3,enum=ves.io.schema.views.SiteNetwork" json:"network,omitempty"`
	// Virtual Site
	//
	// x-displayName: "Virtual Site Reference"
	// x-required
	// Reference to virtual site object
	VirtualSite *ObjectRefType `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,proto3" json:"virtual_site,omitempty"`
}

func (m *WhereVirtualSite) Reset()      { *m = WhereVirtualSite{} }
func (*WhereVirtualSite) ProtoMessage() {}
func (*WhereVirtualSite) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{4}
}
func (m *WhereVirtualSite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereVirtualSite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereVirtualSite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereVirtualSite.Merge(m, src)
}
func (m *WhereVirtualSite) XXX_Size() int {
	return m.Size()
}
func (m *WhereVirtualSite) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereVirtualSite.DiscardUnknown(m)
}

var xxx_messageInfo_WhereVirtualSite proto.InternalMessageInfo

func (m *WhereVirtualSite) GetNetwork() SiteNetwork {
	if m != nil {
		return m.Network
	}
	return SITE_NETWORK_INSIDE_AND_OUTSIDE
}

func (m *WhereVirtualSite) GetVirtualSite() *ObjectRefType {
	if m != nil {
		return m.VirtualSite
	}
	return nil
}

// WhereVK8SService
//
// x-displayName: "vK8s Services on RE"
// This defines a reference to a RE site or virtual site where a load balancer could be advertised in the vK8s service network
type WhereVK8SService struct {
	// RE or RE Virtual Site
	//
	// x-displayName: "RE or RE Virtual Site"
	// x-required
	// This defines a reference to a RE site or virtual site where a VIP could be advertised in the vK8s service network
	//
	// Types that are valid to be assigned to Choice:
	//	*WhereVK8SService_Site
	//	*WhereVK8SService_VirtualSite
	Choice isWhereVK8SService_Choice `protobuf_oneof:"choice"`
}

func (m *WhereVK8SService) Reset()      { *m = WhereVK8SService{} }
func (*WhereVK8SService) ProtoMessage() {}
func (*WhereVK8SService) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{5}
}
func (m *WhereVK8SService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereVK8SService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereVK8SService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereVK8SService.Merge(m, src)
}
func (m *WhereVK8SService) XXX_Size() int {
	return m.Size()
}
func (m *WhereVK8SService) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereVK8SService.DiscardUnknown(m)
}

var xxx_messageInfo_WhereVK8SService proto.InternalMessageInfo

type isWhereVK8SService_Choice interface {
	isWhereVK8SService_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WhereVK8SService_Site struct {
	Site *ObjectRefType `protobuf:"bytes,1,opt,name=site,proto3,oneof" json:"site,omitempty"`
}
type WhereVK8SService_VirtualSite struct {
	VirtualSite *ObjectRefType `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,proto3,oneof" json:"virtual_site,omitempty"`
}

func (*WhereVK8SService_Site) isWhereVK8SService_Choice()        {}
func (*WhereVK8SService_VirtualSite) isWhereVK8SService_Choice() {}

func (m *WhereVK8SService) GetChoice() isWhereVK8SService_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *WhereVK8SService) GetSite() *ObjectRefType {
	if x, ok := m.GetChoice().(*WhereVK8SService_Site); ok {
		return x.Site
	}
	return nil
}

func (m *WhereVK8SService) GetVirtualSite() *ObjectRefType {
	if x, ok := m.GetChoice().(*WhereVK8SService_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WhereVK8SService) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WhereVK8SService_Site)(nil),
		(*WhereVK8SService_VirtualSite)(nil),
	}
}

// WhereType
//
// x-displayName: "Select Where to Advertise"
// This defines various options where a Loadbalancer could be advertised
type WhereType struct {
	// Advertise choice
	//
	// x-displayName: "Select Where to Advertise"
	// x-required
	// This defines various options where a Loadbalancer could be advertised
	//
	// Types that are valid to be assigned to Choice:
	//	*WhereType_Site
	//	*WhereType_VirtualSite
	//	*WhereType_Vk8SService
	//	*WhereType_VirtualNetwork
	Choice isWhereType_Choice `protobuf_oneof:"choice"`
	//  Listen TCP Port Choice
	//
	// x-displayName: "TCP Listen Port Choice"
	// x-required
	// Available options: user provided port or system default port
	//
	// Types that are valid to be assigned to PortChoice:
	//	*WhereType_UseDefaultPort
	//	*WhereType_Port
	PortChoice isWhereType_PortChoice `protobuf_oneof:"port_choice"`
}

func (m *WhereType) Reset()      { *m = WhereType{} }
func (*WhereType) ProtoMessage() {}
func (*WhereType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{6}
}
func (m *WhereType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereType.Merge(m, src)
}
func (m *WhereType) XXX_Size() int {
	return m.Size()
}
func (m *WhereType) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereType.DiscardUnknown(m)
}

var xxx_messageInfo_WhereType proto.InternalMessageInfo

type isWhereType_Choice interface {
	isWhereType_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isWhereType_PortChoice interface {
	isWhereType_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WhereType_Site struct {
	Site *WhereSite `protobuf:"bytes,1,opt,name=site,proto3,oneof" json:"site,omitempty"`
}
type WhereType_VirtualSite struct {
	VirtualSite *WhereVirtualSite `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,proto3,oneof" json:"virtual_site,omitempty"`
}
type WhereType_Vk8SService struct {
	Vk8SService *WhereVK8SService `protobuf:"bytes,3,opt,name=vk8s_service,json=vk8sService,proto3,oneof" json:"vk8s_service,omitempty"`
}
type WhereType_VirtualNetwork struct {
	VirtualNetwork *WhereVirtualNetwork `protobuf:"bytes,9,opt,name=virtual_network,json=virtualNetwork,proto3,oneof" json:"virtual_network,omitempty"`
}
type WhereType_UseDefaultPort struct {
	UseDefaultPort *schema.Empty `protobuf:"bytes,6,opt,name=use_default_port,json=useDefaultPort,proto3,oneof" json:"use_default_port,omitempty"`
}
type WhereType_Port struct {
	Port uint32 `protobuf:"varint,7,opt,name=port,proto3,oneof" json:"port,omitempty"`
}

func (*WhereType_Site) isWhereType_Choice()               {}
func (*WhereType_VirtualSite) isWhereType_Choice()        {}
func (*WhereType_Vk8SService) isWhereType_Choice()        {}
func (*WhereType_VirtualNetwork) isWhereType_Choice()     {}
func (*WhereType_UseDefaultPort) isWhereType_PortChoice() {}
func (*WhereType_Port) isWhereType_PortChoice()           {}

func (m *WhereType) GetChoice() isWhereType_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}
func (m *WhereType) GetPortChoice() isWhereType_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}

func (m *WhereType) GetSite() *WhereSite {
	if x, ok := m.GetChoice().(*WhereType_Site); ok {
		return x.Site
	}
	return nil
}

func (m *WhereType) GetVirtualSite() *WhereVirtualSite {
	if x, ok := m.GetChoice().(*WhereType_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

func (m *WhereType) GetVk8SService() *WhereVK8SService {
	if x, ok := m.GetChoice().(*WhereType_Vk8SService); ok {
		return x.Vk8SService
	}
	return nil
}

func (m *WhereType) GetVirtualNetwork() *WhereVirtualNetwork {
	if x, ok := m.GetChoice().(*WhereType_VirtualNetwork); ok {
		return x.VirtualNetwork
	}
	return nil
}

func (m *WhereType) GetUseDefaultPort() *schema.Empty {
	if x, ok := m.GetPortChoice().(*WhereType_UseDefaultPort); ok {
		return x.UseDefaultPort
	}
	return nil
}

func (m *WhereType) GetPort() uint32 {
	if x, ok := m.GetPortChoice().(*WhereType_Port); ok {
		return x.Port
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WhereType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WhereType_Site)(nil),
		(*WhereType_VirtualSite)(nil),
		(*WhereType_Vk8SService)(nil),
		(*WhereType_VirtualNetwork)(nil),
		(*WhereType_UseDefaultPort)(nil),
		(*WhereType_Port)(nil),
	}
}

// WhereTypeSiteVsite
//
// x-displayName: "Select Where to Advertise"
// This defines various options where a Loadbalancer could be advertised
type WhereTypeSiteVsite struct {
	// Advertise choice
	//
	// x-displayName: "Select Where to Advertise"
	// x-required
	// This defines various options where a Loadbalancer could be advertised
	//
	// Types that are valid to be assigned to Choice:
	//	*WhereTypeSiteVsite_Site
	//	*WhereTypeSiteVsite_VirtualSite
	Choice isWhereTypeSiteVsite_Choice `protobuf_oneof:"choice"`
	//  Listen TCP Port Choice
	//
	// x-displayName: "TCP Listen Port Choice"
	// Available options: user provided port or system default port
	//
	// Types that are valid to be assigned to PortChoice:
	//	*WhereTypeSiteVsite_UseDefaultPort
	//	*WhereTypeSiteVsite_Port
	PortChoice isWhereTypeSiteVsite_PortChoice `protobuf_oneof:"port_choice"`
}

func (m *WhereTypeSiteVsite) Reset()      { *m = WhereTypeSiteVsite{} }
func (*WhereTypeSiteVsite) ProtoMessage() {}
func (*WhereTypeSiteVsite) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{7}
}
func (m *WhereTypeSiteVsite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereTypeSiteVsite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereTypeSiteVsite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereTypeSiteVsite.Merge(m, src)
}
func (m *WhereTypeSiteVsite) XXX_Size() int {
	return m.Size()
}
func (m *WhereTypeSiteVsite) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereTypeSiteVsite.DiscardUnknown(m)
}

var xxx_messageInfo_WhereTypeSiteVsite proto.InternalMessageInfo

type isWhereTypeSiteVsite_Choice interface {
	isWhereTypeSiteVsite_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isWhereTypeSiteVsite_PortChoice interface {
	isWhereTypeSiteVsite_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WhereTypeSiteVsite_Site struct {
	Site *WhereSite `protobuf:"bytes,1,opt,name=site,proto3,oneof" json:"site,omitempty"`
}
type WhereTypeSiteVsite_VirtualSite struct {
	VirtualSite *WhereVirtualSite `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,proto3,oneof" json:"virtual_site,omitempty"`
}
type WhereTypeSiteVsite_UseDefaultPort struct {
	UseDefaultPort *schema.Empty `protobuf:"bytes,5,opt,name=use_default_port,json=useDefaultPort,proto3,oneof" json:"use_default_port,omitempty"`
}
type WhereTypeSiteVsite_Port struct {
	Port uint32 `protobuf:"varint,6,opt,name=port,proto3,oneof" json:"port,omitempty"`
}

func (*WhereTypeSiteVsite_Site) isWhereTypeSiteVsite_Choice()               {}
func (*WhereTypeSiteVsite_VirtualSite) isWhereTypeSiteVsite_Choice()        {}
func (*WhereTypeSiteVsite_UseDefaultPort) isWhereTypeSiteVsite_PortChoice() {}
func (*WhereTypeSiteVsite_Port) isWhereTypeSiteVsite_PortChoice()           {}

func (m *WhereTypeSiteVsite) GetChoice() isWhereTypeSiteVsite_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}
func (m *WhereTypeSiteVsite) GetPortChoice() isWhereTypeSiteVsite_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}

func (m *WhereTypeSiteVsite) GetSite() *WhereSite {
	if x, ok := m.GetChoice().(*WhereTypeSiteVsite_Site); ok {
		return x.Site
	}
	return nil
}

func (m *WhereTypeSiteVsite) GetVirtualSite() *WhereVirtualSite {
	if x, ok := m.GetChoice().(*WhereTypeSiteVsite_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

func (m *WhereTypeSiteVsite) GetUseDefaultPort() *schema.Empty {
	if x, ok := m.GetPortChoice().(*WhereTypeSiteVsite_UseDefaultPort); ok {
		return x.UseDefaultPort
	}
	return nil
}

func (m *WhereTypeSiteVsite) GetPort() uint32 {
	if x, ok := m.GetPortChoice().(*WhereTypeSiteVsite_Port); ok {
		return x.Port
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WhereTypeSiteVsite) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WhereTypeSiteVsite_Site)(nil),
		(*WhereTypeSiteVsite_VirtualSite)(nil),
		(*WhereTypeSiteVsite_UseDefaultPort)(nil),
		(*WhereTypeSiteVsite_Port)(nil),
	}
}

// AdvertisePublic
//
// x-displayName: "Advertise Public"
// This defines a way to advertise a load balancer on public. If optional public_ip is provided, it will only be advertised on RE sites where that public_ip is available
type AdvertisePublic struct {
	// Public IP
	//
	// x-displayName: "Public IP"
	// x-required
	// Use dedicated public ip as VIP instead of default public VIP
	//
	// Dedicated public ip are allocated by volterra on request
	PublicIp *ObjectRefType `protobuf:"bytes,1,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
}

func (m *AdvertisePublic) Reset()      { *m = AdvertisePublic{} }
func (*AdvertisePublic) ProtoMessage() {}
func (*AdvertisePublic) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{8}
}
func (m *AdvertisePublic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvertisePublic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdvertisePublic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvertisePublic.Merge(m, src)
}
func (m *AdvertisePublic) XXX_Size() int {
	return m.Size()
}
func (m *AdvertisePublic) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvertisePublic.DiscardUnknown(m)
}

var xxx_messageInfo_AdvertisePublic proto.InternalMessageInfo

func (m *AdvertisePublic) GetPublicIp() *ObjectRefType {
	if m != nil {
		return m.PublicIp
	}
	return nil
}

// AdvertiseWhere
//
// x-displayName: "Advertise Custom"
// This defines a way to advertise a VIP on specific sites
type AdvertiseCustom struct {
	// Advertise Where
	//
	// x-displayName: "List of Sites to Advertise"
	// x-required
	// Where should this load balancer be available
	AdvertiseWhere []*WhereType `protobuf:"bytes,1,rep,name=advertise_where,json=advertiseWhere,proto3" json:"advertise_where,omitempty"`
}

func (m *AdvertiseCustom) Reset()      { *m = AdvertiseCustom{} }
func (*AdvertiseCustom) ProtoMessage() {}
func (*AdvertiseCustom) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{9}
}
func (m *AdvertiseCustom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvertiseCustom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdvertiseCustom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvertiseCustom.Merge(m, src)
}
func (m *AdvertiseCustom) XXX_Size() int {
	return m.Size()
}
func (m *AdvertiseCustom) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvertiseCustom.DiscardUnknown(m)
}

var xxx_messageInfo_AdvertiseCustom proto.InternalMessageInfo

func (m *AdvertiseCustom) GetAdvertiseWhere() []*WhereType {
	if m != nil {
		return m.AdvertiseWhere
	}
	return nil
}

// AdvertiseSiteVsite
//
// x-displayName: "Advertise Site or Virtual Site"
// This defines a way to advertise a VIP on specific sites
type AdvertiseSiteVsite struct {
	// Advertise Where
	//
	// x-displayName: "List of Sites to Advertise"
	// x-required
	// Where should this load balancer be available
	AdvertiseWhere []*WhereTypeSiteVsite `protobuf:"bytes,1,rep,name=advertise_where,json=advertiseWhere,proto3" json:"advertise_where,omitempty"`
}

func (m *AdvertiseSiteVsite) Reset()      { *m = AdvertiseSiteVsite{} }
func (*AdvertiseSiteVsite) ProtoMessage() {}
func (*AdvertiseSiteVsite) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{10}
}
func (m *AdvertiseSiteVsite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvertiseSiteVsite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdvertiseSiteVsite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvertiseSiteVsite.Merge(m, src)
}
func (m *AdvertiseSiteVsite) XXX_Size() int {
	return m.Size()
}
func (m *AdvertiseSiteVsite) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvertiseSiteVsite.DiscardUnknown(m)
}

var xxx_messageInfo_AdvertiseSiteVsite proto.InternalMessageInfo

func (m *AdvertiseSiteVsite) GetAdvertiseWhere() []*WhereTypeSiteVsite {
	if m != nil {
		return m.AdvertiseWhere
	}
	return nil
}

// CustomCiphers
//
// x-displayName: "Custom Ciphers"
// This defines TLS protocol config including min/max versions and allowed ciphers
type CustomCiphers struct {
	// minimum_protocol_version
	//
	// x-displayName: "Minimum TLS version"
	// Minimum TLS protocol version.
	MinVersion schema.TlsProtocol `protobuf:"varint,1,opt,name=min_version,json=minVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"min_version,omitempty"`
	// maximum_protocol_version
	//
	// x-displayName: "Maximum TLS version"
	// Maximum TLS protocol version.
	MaxVersion schema.TlsProtocol `protobuf:"varint,2,opt,name=max_version,json=maxVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"max_version,omitempty"`
	// cipher_suites
	//
	// x-displayName: "Cipher Suites"
	// x-required
	// The TLS listener will only support the specified cipher list.
	CipherSuites []string `protobuf:"bytes,3,rep,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
}

func (m *CustomCiphers) Reset()      { *m = CustomCiphers{} }
func (*CustomCiphers) ProtoMessage() {}
func (*CustomCiphers) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{11}
}
func (m *CustomCiphers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomCiphers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomCiphers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomCiphers.Merge(m, src)
}
func (m *CustomCiphers) XXX_Size() int {
	return m.Size()
}
func (m *CustomCiphers) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomCiphers.DiscardUnknown(m)
}

var xxx_messageInfo_CustomCiphers proto.InternalMessageInfo

func (m *CustomCiphers) GetMinVersion() schema.TlsProtocol {
	if m != nil {
		return m.MinVersion
	}
	return schema.TLS_AUTO
}

func (m *CustomCiphers) GetMaxVersion() schema.TlsProtocol {
	if m != nil {
		return m.MaxVersion
	}
	return schema.TLS_AUTO
}

func (m *CustomCiphers) GetCipherSuites() []string {
	if m != nil {
		return m.CipherSuites
	}
	return nil
}

// TlsConfig
//
// x-displayName: "TLS Config"
// This defines various options to configure TLS configuration parameters
type TlsConfig struct {
	// Choose TLS config
	//
	// x-displayName: "Select TLS security"
	// x-required
	// Choice of security level in TLS config
	//
	// Types that are valid to be assigned to Choice:
	//	*TlsConfig_DefaultSecurity
	//	*TlsConfig_MediumSecurity
	//	*TlsConfig_LowSecurity
	//	*TlsConfig_CustomSecurity
	Choice isTlsConfig_Choice `protobuf_oneof:"choice"`
}

func (m *TlsConfig) Reset()      { *m = TlsConfig{} }
func (*TlsConfig) ProtoMessage() {}
func (*TlsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{12}
}
func (m *TlsConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TlsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TlsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TlsConfig.Merge(m, src)
}
func (m *TlsConfig) XXX_Size() int {
	return m.Size()
}
func (m *TlsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TlsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TlsConfig proto.InternalMessageInfo

type isTlsConfig_Choice interface {
	isTlsConfig_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TlsConfig_DefaultSecurity struct {
	DefaultSecurity *schema.Empty `protobuf:"bytes,1,opt,name=default_security,json=defaultSecurity,proto3,oneof" json:"default_security,omitempty"`
}
type TlsConfig_MediumSecurity struct {
	MediumSecurity *schema.Empty `protobuf:"bytes,2,opt,name=medium_security,json=mediumSecurity,proto3,oneof" json:"medium_security,omitempty"`
}
type TlsConfig_LowSecurity struct {
	LowSecurity *schema.Empty `protobuf:"bytes,3,opt,name=low_security,json=lowSecurity,proto3,oneof" json:"low_security,omitempty"`
}
type TlsConfig_CustomSecurity struct {
	CustomSecurity *CustomCiphers `protobuf:"bytes,4,opt,name=custom_security,json=customSecurity,proto3,oneof" json:"custom_security,omitempty"`
}

func (*TlsConfig_DefaultSecurity) isTlsConfig_Choice() {}
func (*TlsConfig_MediumSecurity) isTlsConfig_Choice()  {}
func (*TlsConfig_LowSecurity) isTlsConfig_Choice()     {}
func (*TlsConfig_CustomSecurity) isTlsConfig_Choice()  {}

func (m *TlsConfig) GetChoice() isTlsConfig_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *TlsConfig) GetDefaultSecurity() *schema.Empty {
	if x, ok := m.GetChoice().(*TlsConfig_DefaultSecurity); ok {
		return x.DefaultSecurity
	}
	return nil
}

func (m *TlsConfig) GetMediumSecurity() *schema.Empty {
	if x, ok := m.GetChoice().(*TlsConfig_MediumSecurity); ok {
		return x.MediumSecurity
	}
	return nil
}

func (m *TlsConfig) GetLowSecurity() *schema.Empty {
	if x, ok := m.GetChoice().(*TlsConfig_LowSecurity); ok {
		return x.LowSecurity
	}
	return nil
}

func (m *TlsConfig) GetCustomSecurity() *CustomCiphers {
	if x, ok := m.GetChoice().(*TlsConfig_CustomSecurity); ok {
		return x.CustomSecurity
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TlsConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TlsConfig_DefaultSecurity)(nil),
		(*TlsConfig_MediumSecurity)(nil),
		(*TlsConfig_LowSecurity)(nil),
		(*TlsConfig_CustomSecurity)(nil),
	}
}

// OriginPoolWithWeight
//
// x-displayName: "Origin Pool with Weight"
// This defines a combination of origin pool with weight
type OriginPoolWithWeight struct {
	// Pool Choice
	//
	// x-displayName: "Select Origin Pool Method"
	// x-required
	// Select origin pool method, simple origin pool method or more flexible cluster object.
	//
	// Types that are valid to be assigned to PoolChoice:
	//	*OriginPoolWithWeight_Pool
	//	*OriginPoolWithWeight_Cluster
	PoolChoice isOriginPoolWithWeight_PoolChoice `protobuf_oneof:"pool_choice"`
	// Weight
	//
	// x-displayName: "Weight"
	// Weight of this origin pool, valid only with multiple origin pool. Value of 0 will disable the pool
	Weight uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	// Origin Servers Subset
	//
	// x-displayName: "Origin Servers Subsets"
	// Upstream origin pool may be configured to divide its origin servers into subsets based on metadata
	// attached to the origin servers. Routes may then specify the metadata that a endpoint must match in
	// order to be selected by the load balancer
	//
	// For origin servers which are discovered in K8S or Consul cluster, the label of the service is merged with
	// endpoint's labels. In case of Consul, the label is derived from the "Tag" field.
	// For labels that are common between configured endpoint and discovered service, labels from discovered service
	// takes precedence.
	//
	// List of key-value pairs that will be used as matching metadata. Only those origin servers of
	// upstream origin pool which match this metadata will be selected for load balancing
	EndpointSubsets map[string]string `protobuf:"bytes,5,rep,name=endpoint_subsets,json=endpointSubsets,proto3" json:"endpoint_subsets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *OriginPoolWithWeight) Reset()      { *m = OriginPoolWithWeight{} }
func (*OriginPoolWithWeight) ProtoMessage() {}
func (*OriginPoolWithWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{13}
}
func (m *OriginPoolWithWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OriginPoolWithWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OriginPoolWithWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginPoolWithWeight.Merge(m, src)
}
func (m *OriginPoolWithWeight) XXX_Size() int {
	return m.Size()
}
func (m *OriginPoolWithWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginPoolWithWeight.DiscardUnknown(m)
}

var xxx_messageInfo_OriginPoolWithWeight proto.InternalMessageInfo

type isOriginPoolWithWeight_PoolChoice interface {
	isOriginPoolWithWeight_PoolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OriginPoolWithWeight_Pool struct {
	Pool *ObjectRefType `protobuf:"bytes,1,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
}
type OriginPoolWithWeight_Cluster struct {
	Cluster *ObjectRefType `protobuf:"bytes,4,opt,name=cluster,proto3,oneof" json:"cluster,omitempty"`
}

func (*OriginPoolWithWeight_Pool) isOriginPoolWithWeight_PoolChoice()    {}
func (*OriginPoolWithWeight_Cluster) isOriginPoolWithWeight_PoolChoice() {}

func (m *OriginPoolWithWeight) GetPoolChoice() isOriginPoolWithWeight_PoolChoice {
	if m != nil {
		return m.PoolChoice
	}
	return nil
}

func (m *OriginPoolWithWeight) GetPool() *ObjectRefType {
	if x, ok := m.GetPoolChoice().(*OriginPoolWithWeight_Pool); ok {
		return x.Pool
	}
	return nil
}

func (m *OriginPoolWithWeight) GetCluster() *ObjectRefType {
	if x, ok := m.GetPoolChoice().(*OriginPoolWithWeight_Cluster); ok {
		return x.Cluster
	}
	return nil
}

func (m *OriginPoolWithWeight) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *OriginPoolWithWeight) GetEndpointSubsets() map[string]string {
	if m != nil {
		return m.EndpointSubsets
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OriginPoolWithWeight) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OriginPoolWithWeight_Pool)(nil),
		(*OriginPoolWithWeight_Cluster)(nil),
	}
}

// ipv4 prefix list
//
// x-displayName: "IPv4 Prefix List"
// x-example: "192.168.20.0/24"
// List of IPv4 prefixes that represent an endpoint
type PrefixStringListType struct {
	// ipv4 prefix list
	//
	// x-displayName: "IPv4 Prefix List"
	// x-example: "192.168.20.0/24"
	// x-required
	// List of IPv4 prefixes that represent an endpoint
	Prefixes []string `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (m *PrefixStringListType) Reset()      { *m = PrefixStringListType{} }
func (*PrefixStringListType) ProtoMessage() {}
func (*PrefixStringListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{14}
}
func (m *PrefixStringListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrefixStringListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PrefixStringListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixStringListType.Merge(m, src)
}
func (m *PrefixStringListType) XXX_Size() int {
	return m.Size()
}
func (m *PrefixStringListType) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixStringListType.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixStringListType proto.InternalMessageInfo

func (m *PrefixStringListType) GetPrefixes() []string {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

// Global Network
//
// x-displayName: "Global Network"
// Global network reference for direct connection
type GlobalConnectorType struct {
	// Virtual Network
	//
	// x-displayName: "Global Virtual Network"
	// x-required
	// Select Virtual Network of Global Type
	GlobalVn *ObjectRefType `protobuf:"bytes,1,opt,name=global_vn,json=globalVn,proto3" json:"global_vn,omitempty"`
}

func (m *GlobalConnectorType) Reset()      { *m = GlobalConnectorType{} }
func (*GlobalConnectorType) ProtoMessage() {}
func (*GlobalConnectorType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{15}
}
func (m *GlobalConnectorType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalConnectorType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalConnectorType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalConnectorType.Merge(m, src)
}
func (m *GlobalConnectorType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalConnectorType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalConnectorType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalConnectorType proto.InternalMessageInfo

func (m *GlobalConnectorType) GetGlobalVn() *ObjectRefType {
	if m != nil {
		return m.GlobalVn
	}
	return nil
}

// Volterra Software Version
//
// x-displayName: "Volterra Software Version"
// This is to specify volterra software version choice
type VolterraSoftwareType struct {
	// Select Volterra Software Version
	//
	// x-displayName: "Select Volterra Software Version"
	// x-required
	// Volterra Software Version is optional parameter, which allows to specify target SW version for particular site e.g. crt-20210329-1002.
	// If not specified, latest available version is used.
	//
	// Types that are valid to be assigned to VolterraSwVersionChoice:
	//	*VolterraSoftwareType_DefaultSwVersion
	//	*VolterraSoftwareType_VolterraSoftwareVersion
	VolterraSwVersionChoice isVolterraSoftwareType_VolterraSwVersionChoice `protobuf_oneof:"volterra_sw_version_choice"`
}

func (m *VolterraSoftwareType) Reset()      { *m = VolterraSoftwareType{} }
func (*VolterraSoftwareType) ProtoMessage() {}
func (*VolterraSoftwareType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{16}
}
func (m *VolterraSoftwareType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VolterraSoftwareType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VolterraSoftwareType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolterraSoftwareType.Merge(m, src)
}
func (m *VolterraSoftwareType) XXX_Size() int {
	return m.Size()
}
func (m *VolterraSoftwareType) XXX_DiscardUnknown() {
	xxx_messageInfo_VolterraSoftwareType.DiscardUnknown(m)
}

var xxx_messageInfo_VolterraSoftwareType proto.InternalMessageInfo

type isVolterraSoftwareType_VolterraSwVersionChoice interface {
	isVolterraSoftwareType_VolterraSwVersionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VolterraSoftwareType_DefaultSwVersion struct {
	DefaultSwVersion *schema.Empty `protobuf:"bytes,2,opt,name=default_sw_version,json=defaultSwVersion,proto3,oneof" json:"default_sw_version,omitempty"`
}
type VolterraSoftwareType_VolterraSoftwareVersion struct {
	VolterraSoftwareVersion string `protobuf:"bytes,3,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3,oneof" json:"volterra_software_version,omitempty"`
}

func (*VolterraSoftwareType_DefaultSwVersion) isVolterraSoftwareType_VolterraSwVersionChoice() {}
func (*VolterraSoftwareType_VolterraSoftwareVersion) isVolterraSoftwareType_VolterraSwVersionChoice() {
}

func (m *VolterraSoftwareType) GetVolterraSwVersionChoice() isVolterraSoftwareType_VolterraSwVersionChoice {
	if m != nil {
		return m.VolterraSwVersionChoice
	}
	return nil
}

func (m *VolterraSoftwareType) GetDefaultSwVersion() *schema.Empty {
	if x, ok := m.GetVolterraSwVersionChoice().(*VolterraSoftwareType_DefaultSwVersion); ok {
		return x.DefaultSwVersion
	}
	return nil
}

func (m *VolterraSoftwareType) GetVolterraSoftwareVersion() string {
	if x, ok := m.GetVolterraSwVersionChoice().(*VolterraSoftwareType_VolterraSoftwareVersion); ok {
		return x.VolterraSoftwareVersion
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VolterraSoftwareType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VolterraSoftwareType_DefaultSwVersion)(nil),
		(*VolterraSoftwareType_VolterraSoftwareVersion)(nil),
	}
}

// Operating System Version
//
// x-displayName: "Operating System Version"
// This is to specify volterra operating version choice
type OperatingSystemType struct {
	// Select Operating System Version
	//
	// x-displayName: "Select Operating System Version"
	// x-required
	// Operating System Version is optional parameter, which allows to specify target OS version for particular site e.g. 7.2009.10.
	// If not specified, latest available version is used.
	//
	// Types that are valid to be assigned to OperatingSystemVersionChoice:
	//	*OperatingSystemType_DefaultOsVersion
	//	*OperatingSystemType_OperatingSystemVersion
	OperatingSystemVersionChoice isOperatingSystemType_OperatingSystemVersionChoice `protobuf_oneof:"operating_system_version_choice"`
}

func (m *OperatingSystemType) Reset()      { *m = OperatingSystemType{} }
func (*OperatingSystemType) ProtoMessage() {}
func (*OperatingSystemType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96f5c708a09275e, []int{17}
}
func (m *OperatingSystemType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatingSystemType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OperatingSystemType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatingSystemType.Merge(m, src)
}
func (m *OperatingSystemType) XXX_Size() int {
	return m.Size()
}
func (m *OperatingSystemType) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatingSystemType.DiscardUnknown(m)
}

var xxx_messageInfo_OperatingSystemType proto.InternalMessageInfo

type isOperatingSystemType_OperatingSystemVersionChoice interface {
	isOperatingSystemType_OperatingSystemVersionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OperatingSystemType_DefaultOsVersion struct {
	DefaultOsVersion *schema.Empty `protobuf:"bytes,2,opt,name=default_os_version,json=defaultOsVersion,proto3,oneof" json:"default_os_version,omitempty"`
}
type OperatingSystemType_OperatingSystemVersion struct {
	OperatingSystemVersion string `protobuf:"bytes,3,opt,name=operating_system_version,json=operatingSystemVersion,proto3,oneof" json:"operating_system_version,omitempty"`
}

func (*OperatingSystemType_DefaultOsVersion) isOperatingSystemType_OperatingSystemVersionChoice() {}
func (*OperatingSystemType_OperatingSystemVersion) isOperatingSystemType_OperatingSystemVersionChoice() {
}

func (m *OperatingSystemType) GetOperatingSystemVersionChoice() isOperatingSystemType_OperatingSystemVersionChoice {
	if m != nil {
		return m.OperatingSystemVersionChoice
	}
	return nil
}

func (m *OperatingSystemType) GetDefaultOsVersion() *schema.Empty {
	if x, ok := m.GetOperatingSystemVersionChoice().(*OperatingSystemType_DefaultOsVersion); ok {
		return x.DefaultOsVersion
	}
	return nil
}

func (m *OperatingSystemType) GetOperatingSystemVersion() string {
	if x, ok := m.GetOperatingSystemVersionChoice().(*OperatingSystemType_OperatingSystemVersion); ok {
		return x.OperatingSystemVersion
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OperatingSystemType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OperatingSystemType_DefaultOsVersion)(nil),
		(*OperatingSystemType_OperatingSystemVersion)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.views.SiteNetwork", SiteNetwork_name, SiteNetwork_value)
	golang_proto.RegisterEnum("ves.io.schema.views.SiteNetwork", SiteNetwork_name, SiteNetwork_value)
	proto.RegisterType((*ObjectRefType)(nil), "ves.io.schema.views.ObjectRefType")
	golang_proto.RegisterType((*ObjectRefType)(nil), "ves.io.schema.views.ObjectRefType")
	proto.RegisterType((*SiteLocator)(nil), "ves.io.schema.views.SiteLocator")
	golang_proto.RegisterType((*SiteLocator)(nil), "ves.io.schema.views.SiteLocator")
	proto.RegisterType((*WhereVirtualNetwork)(nil), "ves.io.schema.views.WhereVirtualNetwork")
	golang_proto.RegisterType((*WhereVirtualNetwork)(nil), "ves.io.schema.views.WhereVirtualNetwork")
	proto.RegisterType((*WhereSite)(nil), "ves.io.schema.views.WhereSite")
	golang_proto.RegisterType((*WhereSite)(nil), "ves.io.schema.views.WhereSite")
	proto.RegisterType((*WhereVirtualSite)(nil), "ves.io.schema.views.WhereVirtualSite")
	golang_proto.RegisterType((*WhereVirtualSite)(nil), "ves.io.schema.views.WhereVirtualSite")
	proto.RegisterType((*WhereVK8SService)(nil), "ves.io.schema.views.WhereVK8SService")
	golang_proto.RegisterType((*WhereVK8SService)(nil), "ves.io.schema.views.WhereVK8SService")
	proto.RegisterType((*WhereType)(nil), "ves.io.schema.views.WhereType")
	golang_proto.RegisterType((*WhereType)(nil), "ves.io.schema.views.WhereType")
	proto.RegisterType((*WhereTypeSiteVsite)(nil), "ves.io.schema.views.WhereTypeSiteVsite")
	golang_proto.RegisterType((*WhereTypeSiteVsite)(nil), "ves.io.schema.views.WhereTypeSiteVsite")
	proto.RegisterType((*AdvertisePublic)(nil), "ves.io.schema.views.AdvertisePublic")
	golang_proto.RegisterType((*AdvertisePublic)(nil), "ves.io.schema.views.AdvertisePublic")
	proto.RegisterType((*AdvertiseCustom)(nil), "ves.io.schema.views.AdvertiseCustom")
	golang_proto.RegisterType((*AdvertiseCustom)(nil), "ves.io.schema.views.AdvertiseCustom")
	proto.RegisterType((*AdvertiseSiteVsite)(nil), "ves.io.schema.views.AdvertiseSiteVsite")
	golang_proto.RegisterType((*AdvertiseSiteVsite)(nil), "ves.io.schema.views.AdvertiseSiteVsite")
	proto.RegisterType((*CustomCiphers)(nil), "ves.io.schema.views.CustomCiphers")
	golang_proto.RegisterType((*CustomCiphers)(nil), "ves.io.schema.views.CustomCiphers")
	proto.RegisterType((*TlsConfig)(nil), "ves.io.schema.views.TlsConfig")
	golang_proto.RegisterType((*TlsConfig)(nil), "ves.io.schema.views.TlsConfig")
	proto.RegisterType((*OriginPoolWithWeight)(nil), "ves.io.schema.views.OriginPoolWithWeight")
	golang_proto.RegisterType((*OriginPoolWithWeight)(nil), "ves.io.schema.views.OriginPoolWithWeight")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.OriginPoolWithWeight.EndpointSubsetsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.OriginPoolWithWeight.EndpointSubsetsEntry")
	proto.RegisterType((*PrefixStringListType)(nil), "ves.io.schema.views.PrefixStringListType")
	golang_proto.RegisterType((*PrefixStringListType)(nil), "ves.io.schema.views.PrefixStringListType")
	proto.RegisterType((*GlobalConnectorType)(nil), "ves.io.schema.views.GlobalConnectorType")
	golang_proto.RegisterType((*GlobalConnectorType)(nil), "ves.io.schema.views.GlobalConnectorType")
	proto.RegisterType((*VolterraSoftwareType)(nil), "ves.io.schema.views.VolterraSoftwareType")
	golang_proto.RegisterType((*VolterraSoftwareType)(nil), "ves.io.schema.views.VolterraSoftwareType")
	proto.RegisterType((*OperatingSystemType)(nil), "ves.io.schema.views.OperatingSystemType")
	golang_proto.RegisterType((*OperatingSystemType)(nil), "ves.io.schema.views.OperatingSystemType")
}

func init() { proto.RegisterFile("ves.io/schema/views/types.proto", fileDescriptor_e96f5c708a09275e) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/types.proto", fileDescriptor_e96f5c708a09275e)
}

var fileDescriptor_e96f5c708a09275e = []byte{
	// 1998 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcb, 0x6f, 0x23, 0x49,
	0x19, 0x77, 0x75, 0xb7, 0x3d, 0x76, 0x39, 0x8f, 0x9e, 0x4e, 0x66, 0xd6, 0x13, 0x76, 0x1c, 0x6f,
	0x2f, 0xcb, 0x84, 0x5d, 0xc7, 0xd9, 0x38, 0x8f, 0xcd, 0x06, 0x69, 0x98, 0xb4, 0x63, 0xc6, 0xc9,
	0x3c, 0x12, 0xda, 0x21, 0x61, 0x11, 0xa2, 0xe5, 0x38, 0x15, 0xa7, 0x36, 0x76, 0x57, 0xab, 0xbb,
	0x6d, 0x27, 0x87, 0x48, 0x73, 0x41, 0x48, 0x88, 0xc3, 0x32, 0x27, 0xb4, 0xe2, 0x0f, 0x80, 0x1c,
	0x11, 0x5c, 0xf0, 0x1c, 0x46, 0x2b, 0x90, 0x16, 0x2e, 0xe4, 0x84, 0x46, 0x08, 0x89, 0x19, 0x8f,
	0xb4, 0x82, 0xdb, 0x32, 0x07, 0xb4, 0xb7, 0x45, 0x55, 0xdd, 0x6d, 0xb7, 0x1d, 0xdb, 0x33, 0x41,
	0x20, 0x2e, 0x49, 0x75, 0xd5, 0xef, 0xfb, 0xd5, 0xf7, 0xae, 0x2a, 0xc3, 0xc9, 0x1a, 0xb2, 0x52,
	0x98, 0xcc, 0x58, 0xc5, 0x03, 0x54, 0x29, 0xcc, 0xd4, 0x30, 0xaa, 0x5b, 0x33, 0xf6, 0xb1, 0x81,
	0xac, 0x94, 0x61, 0x12, 0x9b, 0x48, 0x63, 0x0e, 0x20, 0xe5, 0x00, 0x52, 0x0c, 0x30, 0x31, 0x5d,
	0xc2, 0xf6, 0x41, 0x75, 0x37, 0x55, 0x24, 0x95, 0x99, 0x12, 0x29, 0x91, 0x19, 0x86, 0xdd, 0xad,
	0xee, 0xb3, 0x2f, 0xf6, 0xc1, 0x46, 0x0e, 0xc7, 0xc4, 0x57, 0x3a, 0x37, 0x21, 0x86, 0x8d, 0x89,
	0xee, 0x6e, 0x30, 0x71, 0xad, 0x73, 0xd1, 0xb7, 0xf7, 0xc4, 0xeb, 0x5d, 0xca, 0x15, 0xca, 0x78,
	0xaf, 0x60, 0x23, 0x77, 0x35, 0x71, 0x5e, 0x75, 0xad, 0x83, 0x5a, 0xfe, 0x29, 0x80, 0xc3, 0x1b,
	0xbb, 0x1f, 0xa2, 0xa2, 0xad, 0xa2, 0xfd, 0xad, 0x63, 0x03, 0x49, 0x53, 0x30, 0x64, 0x23, 0xbd,
	0xa0, 0xdb, 0x31, 0x90, 0x00, 0x53, 0x11, 0x45, 0x3c, 0x3b, 0x01, 0x5f, 0x34, 0x40, 0xe0, 0xb7,
	0xff, 0x78, 0xcc, 0x0b, 0x26, 0x37, 0x75, 0x4b, 0x75, 0xd7, 0xa5, 0x14, 0x8c, 0xe8, 0x85, 0x0a,
	0xb2, 0x8c, 0x42, 0x11, 0xc5, 0xb8, 0x3e, 0xe0, 0x36, 0x44, 0xfa, 0x1a, 0x14, 0xe8, 0x47, 0x8c,
	0x67, 0x50, 0xc9, 0x07, 0x0d, 0x99, 0x42, 0x02, 0x4c, 0xdd, 0x52, 0xd9, 0xba, 0xfc, 0x27, 0x00,
	0xa3, 0x79, 0x6c, 0xa3, 0xbb, 0xa4, 0x58, 0xb0, 0x89, 0x29, 0x65, 0xa1, 0x60, 0x61, 0x1b, 0x31,
	0x7d, 0xa2, 0x69, 0x39, 0xd5, 0xc3, 0xdd, 0xa9, 0x0e, 0x1b, 0x94, 0xe8, 0xe9, 0x09, 0x13, 0x79,
	0xf0, 0x08, 0x80, 0x5c, 0x40, 0x65, 0x63, 0xe9, 0xbb, 0x70, 0xa8, 0x86, 0x4d, 0xbb, 0x5a, 0x28,
	0x6b, 0x8c, 0x8e, 0x7b, 0x65, 0xba, 0xd1, 0xd3, 0x93, 0x0e, 0xd1, 0x5c, 0x40, 0x8d, 0xba, 0xdf,
	0x54, 0x4f, 0xe5, 0x1a, 0x0c, 0x15, 0x0f, 0x08, 0x2e, 0x22, 0x69, 0xf4, 0x71, 0x03, 0x80, 0xb3,
	0x06, 0xe0, 0x9b, 0x0d, 0xc0, 0xcf, 0x26, 0xd3, 0xeb, 0x42, 0x98, 0x17, 0x05, 0xf9, 0x67, 0x1c,
	0x1c, 0xdb, 0x39, 0x40, 0x26, 0xda, 0x76, 0xa4, 0xee, 0x23, 0xbb, 0x4e, 0xcc, 0x43, 0xa9, 0x08,
	0x47, 0x3d, 0x5e, 0xdd, 0x99, 0xba, 0x80, 0x91, 0x57, 0x4f, 0x4f, 0xba, 0xa5, 0xa9, 0xbd, 0xea,
	0x48, 0xad, 0x73, 0x93, 0xf7, 0x60, 0x74, 0x0f, 0xed, 0x17, 0xaa, 0x65, 0x5b, 0xab, 0x61, 0x83,
	0x79, 0x3f, 0x9a, 0x1e, 0xef, 0xda, 0x20, 0x5b, 0x31, 0xec, 0xe3, 0x5c, 0x40, 0x85, 0x2e, 0x74,
	0x1b, 0x1b, 0xd2, 0x22, 0x1c, 0xb2, 0x0c, 0x54, 0xc4, 0xfb, 0xb8, 0xc8, 0x24, 0x05, 0x16, 0xb7,
	0xcb, 0xd4, 0x44, 0x5f, 0x8c, 0x0d, 0xea, 0xe1, 0xa8, 0x07, 0xdc, 0xc6, 0xc6, 0x72, 0xe8, 0xc5,
	0x4d, 0x6a, 0xbb, 0x72, 0x1d, 0xc2, 0x1a, 0x36, 0x34, 0x9f, 0x6b, 0xf8, 0xb3, 0x06, 0xe0, 0xa8,
	0x6b, 0xe6, 0x92, 0xf3, 0xeb, 0x42, 0x98, 0x13, 0x79, 0xf9, 0x0f, 0x00, 0x46, 0x98, 0x6b, 0xa8,
	0x27, 0xa5, 0x5b, 0xf0, 0x92, 0xdf, 0x11, 0x23, 0xe9, 0x44, 0x4f, 0x47, 0x50, 0xac, 0x6b, 0x9e,
	0x22, 0x50, 0x5d, 0x54, 0x4f, 0x4c, 0xba, 0xe7, 0x26, 0xcb, 0xab, 0x47, 0xf7, 0x8a, 0x9b, 0x2c,
	0x7f, 0x6c, 0x00, 0xae, 0x88, 0x28, 0x1b, 0x73, 0xa3, 0x93, 0x34, 0x6f, 0x40, 0xce, 0xf5, 0xd9,
	0x79, 0xcb, 0x8f, 0x80, 0xca, 0x61, 0x63, 0x39, 0xfc, 0xe2, 0x66, 0x70, 0x36, 0x99, 0x4e, 0xce,
	0xc9, 0xbf, 0x06, 0x50, 0xf4, 0x87, 0x99, 0x99, 0xb4, 0x7c, 0x61, 0x93, 0xda, 0xc6, 0x7c, 0xff,
	0x3f, 0x4e, 0xd9, 0x2b, 0x5d, 0x29, 0xeb, 0x18, 0xd7, 0x91, 0xb6, 0x5e, 0x9c, 0xe4, 0xcf, 0x5a,
	0x6a, 0xdf, 0x59, 0xca, 0xe7, 0x91, 0x59, 0xa3, 0xe1, 0xba, 0x73, 0xe1, 0xa2, 0xbb, 0xec, 0xf3,
	0xa3, 0xd9, 0x59, 0x7a, 0x3f, 0xf8, 0xaf, 0xda, 0x61, 0x76, 0x17, 0xe0, 0xb2, 0xf0, 0xe2, 0x26,
	0x98, 0x7b, 0x79, 0x19, 0x7e, 0x24, 0xb8, 0xb9, 0xc6, 0x1a, 0xdd, 0x7c, 0x87, 0x85, 0xf1, 0x9e,
	0xca, 0xb4, 0x32, 0xb3, 0x65, 0xca, 0x7a, 0x4f, 0x53, 0xde, 0xea, 0x2f, 0xed, 0xcb, 0x85, 0x2e,
	0xb5, 0xa5, 0x4d, 0x38, 0x54, 0x3b, 0x5c, 0xb2, 0x34, 0xcb, 0xf1, 0xb9, 0x5b, 0x9a, 0x83, 0xb8,
	0xda, 0x01, 0x52, 0x04, 0x6a, 0x23, 0x63, 0x3c, 0x5c, 0xb2, 0xbc, 0xa8, 0x7d, 0x70, 0xbe, 0xa1,
	0x44, 0x18, 0xe9, 0xd4, 0x4b, 0x15, 0x6c, 0xd5, 0x93, 0xcb, 0xdb, 0xdd, 0x46, 0xd6, 0xa1, 0x58,
	0xb5, 0x90, 0xe6, 0xb5, 0x12, 0x83, 0x98, 0x76, 0x2c, 0xd4, 0xbf, 0x97, 0x28, 0x61, 0xaf, 0x5a,
	0x72, 0x40, 0x1d, 0xa9, 0x5a, 0x68, 0xd5, 0x11, 0xdc, 0x24, 0xa6, 0x2d, 0xbd, 0x03, 0x05, 0x26,
	0x7f, 0x29, 0x01, 0xa6, 0x86, 0x95, 0x2b, 0xfe, 0xba, 0x0a, 0xbf, 0x1d, 0x8a, 0x7d, 0xf9, 0x25,
	0x3f, 0x05, 0x72, 0x40, 0x65, 0x20, 0x96, 0xa6, 0xf3, 0xc9, 0x05, 0xe5, 0x7a, 0x2b, 0xbc, 0x63,
	0x6e, 0x78, 0x85, 0x66, 0x03, 0x5c, 0x62, 0xa5, 0x97, 0x7c, 0x5f, 0x91, 0x61, 0x94, 0xc2, 0x35,
	0x1f, 0x26, 0xf4, 0xa9, 0x83, 0x0b, 0xd2, 0x34, 0x58, 0x4c, 0xbe, 0xb7, 0x2e, 0x84, 0x05, 0x31,
	0xb8, 0x2e, 0x84, 0xc3, 0x62, 0x64, 0x5d, 0x08, 0x07, 0xc5, 0x90, 0xfc, 0x67, 0x0e, 0x4a, 0xad,
	0x94, 0xa0, 0x41, 0xd9, 0x66, 0x51, 0xfe, 0xff, 0xe7, 0xc6, 0xb7, 0x7a, 0xb8, 0x3b, 0x38, 0xc0,
	0xdd, 0x42, 0x1f, 0x57, 0xdf, 0x70, 0x5d, 0x1d, 0x62, 0xae, 0xbe, 0x3c, 0xd8, 0xcd, 0x73, 0xc9,
	0xf9, 0x01, 0x55, 0xa4, 0xc4, 0x3b, 0x5d, 0x4c, 0xd7, 0x83, 0x6e, 0x18, 0xf8, 0x85, 0xe4, 0xa2,
	0x53, 0x65, 0x8e, 0x93, 0xe5, 0x3d, 0x38, 0xba, 0xb2, 0x57, 0x43, 0xa6, 0x8d, 0x2d, 0xb4, 0x59,
	0xdd, 0x2d, 0xe3, 0xa2, 0xf4, 0x6d, 0x18, 0x31, 0xd8, 0x48, 0xc3, 0xc6, 0x05, 0xfa, 0x8a, 0x78,
	0x7a, 0xd2, 0x96, 0x63, 0xad, 0x39, 0xec, 0x7c, 0xae, 0x19, 0xf2, 0x2f, 0x81, 0x6f, 0x9b, 0x4c,
	0xd5, 0xb2, 0x49, 0x45, 0x2a, 0xc1, 0xd1, 0x82, 0x37, 0xa5, 0xd5, 0xa9, 0x9b, 0x63, 0x20, 0xc1,
	0x0f, 0x0e, 0x23, 0xdb, 0x28, 0x4e, 0x1d, 0x13, 0x7c, 0x08, 0x38, 0x31, 0xe1, 0x8d, 0xc2, 0xc0,
	0x1b, 0xc5, 0x80, 0x3a, 0xd2, 0xa2, 0x65, 0x32, 0xcb, 0xd3, 0x9f, 0x34, 0xc0, 0xd7, 0xe1, 0x0d,
	0x28, 0x3b, 0x1b, 0x27, 0x5a, 0x8a, 0x24, 0xb6, 0xd7, 0x36, 0x13, 0x19, 0xa2, 0xef, 0xe3, 0x52,
	0xd5, 0x2c, 0xd0, 0xeb, 0x96, 0x04, 0x66, 0xe5, 0xdf, 0x00, 0x28, 0xb5, 0x20, 0xed, 0x54, 0x33,
	0xfa, 0xa9, 0x7b, 0x63, 0xb0, 0xba, 0x2d, 0x86, 0xff, 0xb5, 0xde, 0xbf, 0x0a, 0xc1, 0x61, 0x07,
	0x99, 0xc1, 0xc6, 0x01, 0x32, 0x2d, 0xe9, 0x1b, 0x30, 0x5a, 0xc1, 0xba, 0x56, 0x43, 0xa6, 0x85,
	0x89, 0xee, 0x1e, 0x6b, 0x13, 0x5d, 0xea, 0x6e, 0x95, 0xad, 0x4d, 0x7a, 0xc5, 0x2c, 0x92, 0xb2,
	0x0a, 0x2b, 0x58, 0xdf, 0x76, 0xd0, 0x4c, 0xb8, 0x70, 0xd4, 0x12, 0xe6, 0x5e, 0x41, 0xb8, 0x70,
	0xe4, 0x09, 0xff, 0x3c, 0x08, 0x87, 0x8b, 0x4c, 0x0b, 0xcd, 0xaa, 0x62, 0x1b, 0x59, 0x31, 0x3e,
	0xc1, 0x4f, 0x45, 0x94, 0x7f, 0x09, 0xd4, 0xde, 0xcf, 0x84, 0x87, 0xa0, 0x29, 0xc8, 0x7f, 0x13,
	0xcc, 0xbf, 0x0a, 0xea, 0xd5, 0xad, 0xbb, 0x79, 0x6d, 0x25, 0x9b, 0xd7, 0x66, 0xd3, 0x4b, 0xda,
	0xed, 0xcc, 0x3d, 0x2d, 0x9f, 0x5b, 0x49, 0x2f, 0x2c, 0xb6, 0xe7, 0xd3, 0x0b, 0x8b, 0xde, 0xfc,
	0xdc, 0xd2, 0xbc, 0xfa, 0x3a, 0x9d, 0xcf, 0xe4, 0x56, 0x32, 0xb9, 0x95, 0xf4, 0xbb, 0xda, 0xe6,
	0xc6, 0xdd, 0x0f, 0x66, 0xe7, 0xde, 0x5d, 0xf0, 0xa4, 0x6e, 0xd0, 0xd5, 0x6c, 0x66, 0x35, 0x97,
	0xa5, 0x7f, 0xf3, 0x2b, 0xda, 0xce, 0xda, 0x56, 0xae, 0x17, 0x7d, 0x7f, 0x60, 0xd7, 0x7e, 0xd3,
	0x3d, 0x81, 0x7d, 0x15, 0x78, 0xab, 0x0d, 0x57, 0x07, 0x6c, 0xdf, 0x0f, 0xd6, 0xb5, 0xf9, 0x3b,
	0x3d, 0x60, 0x7d, 0xb7, 0xfe, 0xea, 0x40, 0xdb, 0x33, 0x4a, 0x86, 0x02, 0x07, 0xa0, 0xe8, 0xde,
	0x1e, 0x4a, 0x1e, 0x60, 0xc6, 0xcb, 0x30, 0x7e, 0x1e, 0x16, 0xad, 0xbe, 0x0c, 0x93, 0x3d, 0x57,
	0x7d, 0x6e, 0x3a, 0x2f, 0xee, 0x27, 0x9f, 0xec, 0xb9, 0xda, 0x76, 0x9f, 0xaf, 0xb6, 0x86, 0x9c,
	0x6c, 0xcc, 0xb3, 0x64, 0xf4, 0x5d, 0x05, 0x7f, 0xc7, 0xc1, 0xc8, 0x56, 0xd9, 0x72, 0x8a, 0x49,
	0x5a, 0x81, 0xa2, 0xd7, 0xc8, 0x2d, 0x54, 0xac, 0x9a, 0xd8, 0x3e, 0x76, 0x1b, 0x60, 0xbf, 0x7b,
	0xf8, 0xa8, 0x8b, 0xcf, 0xbb, 0x70, 0xe9, 0x9b, 0x70, 0xb4, 0x82, 0xf6, 0x70, 0xb5, 0xd2, 0x66,
	0xe0, 0x06, 0x32, 0x8c, 0x38, 0xf0, 0x16, 0xc1, 0xfb, 0x70, 0xa8, 0x4c, 0xea, 0x6d, 0xe9, 0xc1,
	0xef, 0x80, 0x68, 0x99, 0xd4, 0x5b, 0xa2, 0xf7, 0xe0, 0x68, 0x91, 0x35, 0x80, 0xb6, 0xb4, 0x30,
	0xa0, 0x7d, 0x77, 0x34, 0x0b, 0xaa, 0x89, 0x23, 0xec, 0xd1, 0xb1, 0xdb, 0x5a, 0xaf, 0xe3, 0x3c,
	0xd8, 0x3e, 0xce, 0xe7, 0xdd, 0xe3, 0xf9, 0x9f, 0x3c, 0x1c, 0xdf, 0x30, 0x71, 0x09, 0xeb, 0x9b,
	0x84, 0x94, 0x77, 0xb0, 0x7d, 0xb0, 0x83, 0x70, 0xe9, 0xc0, 0x96, 0x72, 0xf4, 0x58, 0x23, 0xe5,
	0x0b, 0x1c, 0x23, 0x23, 0xa7, 0x27, 0x51, 0xc2, 0xa8, 0x34, 0x2a, 0x49, 0x0f, 0x6d, 0xfa, 0x5f,
	0x52, 0xe1, 0xa5, 0x62, 0xb9, 0x6a, 0xd9, 0xc8, 0x1c, 0x68, 0x54, 0x27, 0x99, 0x74, 0x7a, 0xe2,
	0x49, 0x51, 0xe5, 0xdd, 0xcb, 0xae, 0x37, 0x25, 0x5d, 0x87, 0xa1, 0x3a, 0xd3, 0x93, 0xc5, 0x68,
	0x58, 0x09, 0xfe, 0xa5, 0x01, 0xc0, 0xac, 0xea, 0x4e, 0x4a, 0x3f, 0x01, 0x50, 0x44, 0xfa, 0x9e,
	0x41, 0xb0, 0x6e, 0x6b, 0x56, 0x75, 0xd7, 0x42, 0xb6, 0x15, 0x0b, 0xb2, 0xa6, 0x7f, 0xb3, 0xf7,
	0xe6, 0x3d, 0x5c, 0x90, 0xca, 0xba, 0x0c, 0x79, 0x87, 0x20, 0xab, 0xdb, 0xe6, 0xb1, 0xf2, 0x06,
	0x55, 0xe7, 0xe3, 0x47, 0x40, 0x80, 0x5c, 0xc0, 0x39, 0x03, 0x3e, 0x06, 0x9c, 0x28, 0x36, 0x9f,
	0xfe, 0x9e, 0x0f, 0xfd, 0xf8, 0x11, 0xe0, 0xc2, 0x01, 0x75, 0x14, 0x75, 0x0a, 0x4e, 0x28, 0x70,
	0xbc, 0x17, 0x97, 0x24, 0x42, 0xfe, 0x10, 0x39, 0x89, 0x1a, 0x51, 0xe9, 0x50, 0x1a, 0x87, 0xc1,
	0x5a, 0xa1, 0x5c, 0x75, 0x5f, 0xfb, 0xaa, 0xf3, 0xb1, 0xcc, 0x2d, 0x81, 0xe5, 0x37, 0x3f, 0x69,
	0x80, 0x49, 0x78, 0x1d, 0x5e, 0x75, 0x54, 0x4d, 0x50, 0x5d, 0x13, 0x05, 0x7d, 0x2f, 0xe1, 0xc6,
	0x8b, 0x9f, 0xf3, 0xee, 0x0f, 0xa4, 0xac, 0xf5, 0xbe, 0x5f, 0xcc, 0xbb, 0xb7, 0xf4, 0x5d, 0x38,
	0xbe, 0x69, 0xa2, 0x7d, 0x7c, 0x94, 0xb7, 0x4d, 0xac, 0x97, 0xee, 0x62, 0xcb, 0x66, 0xf7, 0xf5,
	0x75, 0x18, 0x36, 0xd8, 0x3c, 0xb2, 0xd8, 0x09, 0x19, 0x51, 0x52, 0xd4, 0x40, 0xf8, 0x10, 0x5c,
	0x92, 0x83, 0x26, 0xff, 0x05, 0x60, 0xf6, 0x86, 0x1e, 0x02, 0x5e, 0x7c, 0x00, 0x7a, 0x1e, 0x84,
	0x2d, 0x79, 0xf9, 0x43, 0x38, 0x76, 0xbb, 0x4c, 0x76, 0x0b, 0xe5, 0x0c, 0xd1, 0x75, 0x54, 0xb4,
	0x89, 0xc9, 0xb6, 0xc8, 0xc3, 0x48, 0x89, 0x4d, 0x6b, 0x35, 0xfd, 0x02, 0xa9, 0x25, 0x9d, 0x7f,
	0x89, 0xab, 0x61, 0x87, 0x68, 0x5b, 0x97, 0x9f, 0x02, 0x38, 0xbe, 0x4d, 0xca, 0x36, 0x32, 0xcd,
	0x42, 0x9e, 0xec, 0xdb, 0xf5, 0x82, 0xfb, 0x00, 0x59, 0x85, 0x52, 0xab, 0x2b, 0xd4, 0x3b, 0x0e,
	0xc4, 0xfe, 0x75, 0xe9, 0xf5, 0x91, 0x7c, 0xdd, 0x3b, 0x12, 0x6f, 0xc3, 0x6b, 0x35, 0x97, 0x5d,
	0xb3, 0x5c, 0xfa, 0x16, 0x99, 0xf3, 0x70, 0x8d, 0xb8, 0x0f, 0xd6, 0xd8, 0x78, 0x2e, 0xa0, 0xbe,
	0x56, 0xeb, 0xd2, 0xc5, 0x25, 0x62, 0x65, 0x39, 0xab, 0x4c, 0xc3, 0x89, 0x36, 0x5d, 0x4b, 0x2b,
	0x7f, 0xc8, 0xb8, 0xb3, 0x06, 0x00, 0x34, 0x64, 0xe9, 0xe4, 0xdc, 0xba, 0x10, 0x06, 0x22, 0x27,
	0x37, 0x01, 0x1c, 0xdb, 0x30, 0x10, 0xbd, 0x33, 0xe8, 0xa5, 0xfc, 0xb1, 0x65, 0xa3, 0x4a, 0xb7,
	0x85, 0xc4, 0xba, 0xa0, 0x85, 0x1b, 0x96, 0x67, 0x61, 0x16, 0xc6, 0x88, 0x47, 0xae, 0x59, 0x8c,
	0x7d, 0x90, 0x81, 0x57, 0x49, 0xa7, 0x26, 0x9d, 0xf6, 0xa5, 0xe1, 0x64, 0x3f, 0xb2, 0xc1, 0x46,
	0xbe, 0xfd, 0x43, 0xf7, 0x67, 0x29, 0xef, 0x41, 0xf4, 0x26, 0x9c, 0xcc, 0xaf, 0x6d, 0x65, 0xb5,
	0xfb, 0xd9, 0xad, 0x9d, 0x0d, 0xf5, 0x8e, 0xb6, 0x76, 0x3f, 0xbf, 0xb6, 0x9a, 0xd5, 0x56, 0xee,
	0xaf, 0x6a, 0x1b, 0xdf, 0xd9, 0xa2, 0x63, 0x31, 0x20, 0xbd, 0x06, 0xc7, 0x7a, 0x80, 0x44, 0x20,
	0xc5, 0xe0, 0x78, 0xc7, 0x82, 0x27, 0xc2, 0x9d, 0x5b, 0xc9, 0x67, 0xd5, 0xed, 0xb5, 0x4c, 0x56,
	0xe4, 0x27, 0xe8, 0xd3, 0x2c, 0xa0, 0xfc, 0x08, 0x9c, 0x3d, 0x8b, 0x07, 0x9e, 0x3c, 0x8b, 0x07,
	0x3e, 0x7f, 0x16, 0x07, 0x0f, 0x9a, 0x71, 0xf0, 0x8b, 0x66, 0x1c, 0x7c, 0xda, 0x8c, 0x83, 0xb3,
	0x66, 0x1c, 0x3c, 0x69, 0xc6, 0xc1, 0xd3, 0x66, 0x1c, 0xfc, 0xbd, 0x19, 0x0f, 0x7c, 0xde, 0x8c,
	0x83, 0x8f, 0x9e, 0xc7, 0x03, 0x8f, 0x9f, 0xc7, 0xc1, 0xd9, 0xf3, 0x78, 0xe0, 0xc9, 0xf3, 0x78,
	0xe0, 0x7b, 0x6b, 0x25, 0x62, 0x1c, 0x96, 0x52, 0x5e, 0x90, 0x53, 0x55, 0x6b, 0x86, 0x0d, 0xf6,
	0x89, 0x59, 0x99, 0x36, 0x4c, 0x52, 0xc3, 0x7b, 0xc8, 0x9c, 0xf6, 0x96, 0x67, 0x8c, 0xdd, 0x12,
	0x99, 0x41, 0x47, 0xb6, 0xfb, 0x13, 0xa2, 0xff, 0x47, 0xd0, 0xdd, 0x10, 0xfb, 0x0d, 0x71, 0xee,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xca, 0xb6, 0xa1, 0x9f, 0x22, 0x15, 0x00, 0x00,
}

func (x SiteNetwork) String() string {
	s, ok := SiteNetwork_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ObjectRefType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectRefType)
	if !ok {
		that2, ok := that.(ObjectRefType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SiteLocator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteLocator)
	if !ok {
		that2, ok := that.(SiteLocator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *SiteLocator_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteLocator_Site)
	if !ok {
		that2, ok := that.(SiteLocator_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *SiteLocator_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteLocator_VirtualSite)
	if !ok {
		that2, ok := that.(SiteLocator_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereVirtualNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualNetwork)
	if !ok {
		that2, ok := that.(WhereVirtualNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualNetwork.Equal(that1.VirtualNetwork) {
		return false
	}
	if that1.VipChoice == nil {
		if this.VipChoice != nil {
			return false
		}
	} else if this.VipChoice == nil {
		return false
	} else if !this.VipChoice.Equal(that1.VipChoice) {
		return false
	}
	return true
}
func (this *WhereVirtualNetwork_DefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualNetwork_DefaultVip)
	if !ok {
		that2, ok := that.(WhereVirtualNetwork_DefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultVip.Equal(that1.DefaultVip) {
		return false
	}
	return true
}
func (this *WhereVirtualNetwork_SpecificVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualNetwork_SpecificVip)
	if !ok {
		that2, ok := that.(WhereVirtualNetwork_SpecificVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecificVip != that1.SpecificVip {
		return false
	}
	return true
}
func (this *WhereSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereSite)
	if !ok {
		that2, ok := that.(WhereSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	return true
}
func (this *WhereVirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualSite)
	if !ok {
		that2, ok := that.(WhereVirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereVK8SService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVK8SService)
	if !ok {
		that2, ok := that.(WhereVK8SService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *WhereVK8SService_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVK8SService_Site)
	if !ok {
		that2, ok := that.(WhereVK8SService_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *WhereVK8SService_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVK8SService_VirtualSite)
	if !ok {
		that2, ok := that.(WhereVK8SService_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType)
	if !ok {
		that2, ok := that.(WhereType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	return true
}
func (this *WhereType_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_Site)
	if !ok {
		that2, ok := that.(WhereType_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *WhereType_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_VirtualSite)
	if !ok {
		that2, ok := that.(WhereType_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereType_Vk8SService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_Vk8SService)
	if !ok {
		that2, ok := that.(WhereType_Vk8SService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vk8SService.Equal(that1.Vk8SService) {
		return false
	}
	return true
}
func (this *WhereType_VirtualNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_VirtualNetwork)
	if !ok {
		that2, ok := that.(WhereType_VirtualNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualNetwork.Equal(that1.VirtualNetwork) {
		return false
	}
	return true
}
func (this *WhereType_UseDefaultPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_UseDefaultPort)
	if !ok {
		that2, ok := that.(WhereType_UseDefaultPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultPort.Equal(that1.UseDefaultPort) {
		return false
	}
	return true
}
func (this *WhereType_Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_Port)
	if !ok {
		that2, ok := that.(WhereType_Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite_Site)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite_VirtualSite)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite_UseDefaultPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite_UseDefaultPort)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite_UseDefaultPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultPort.Equal(that1.UseDefaultPort) {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite_Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite_Port)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite_Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *AdvertisePublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvertisePublic)
	if !ok {
		that2, ok := that.(AdvertisePublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PublicIp.Equal(that1.PublicIp) {
		return false
	}
	return true
}
func (this *AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvertiseCustom)
	if !ok {
		that2, ok := that.(AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AdvertiseWhere) != len(that1.AdvertiseWhere) {
		return false
	}
	for i := range this.AdvertiseWhere {
		if !this.AdvertiseWhere[i].Equal(that1.AdvertiseWhere[i]) {
			return false
		}
	}
	return true
}
func (this *AdvertiseSiteVsite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvertiseSiteVsite)
	if !ok {
		that2, ok := that.(AdvertiseSiteVsite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AdvertiseWhere) != len(that1.AdvertiseWhere) {
		return false
	}
	for i := range this.AdvertiseWhere {
		if !this.AdvertiseWhere[i].Equal(that1.AdvertiseWhere[i]) {
			return false
		}
	}
	return true
}
func (this *CustomCiphers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomCiphers)
	if !ok {
		that2, ok := that.(CustomCiphers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinVersion != that1.MinVersion {
		return false
	}
	if this.MaxVersion != that1.MaxVersion {
		return false
	}
	if len(this.CipherSuites) != len(that1.CipherSuites) {
		return false
	}
	for i := range this.CipherSuites {
		if this.CipherSuites[i] != that1.CipherSuites[i] {
			return false
		}
	}
	return true
}
func (this *TlsConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig)
	if !ok {
		that2, ok := that.(TlsConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *TlsConfig_DefaultSecurity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig_DefaultSecurity)
	if !ok {
		that2, ok := that.(TlsConfig_DefaultSecurity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSecurity.Equal(that1.DefaultSecurity) {
		return false
	}
	return true
}
func (this *TlsConfig_MediumSecurity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig_MediumSecurity)
	if !ok {
		that2, ok := that.(TlsConfig_MediumSecurity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MediumSecurity.Equal(that1.MediumSecurity) {
		return false
	}
	return true
}
func (this *TlsConfig_LowSecurity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig_LowSecurity)
	if !ok {
		that2, ok := that.(TlsConfig_LowSecurity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LowSecurity.Equal(that1.LowSecurity) {
		return false
	}
	return true
}
func (this *TlsConfig_CustomSecurity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig_CustomSecurity)
	if !ok {
		that2, ok := that.(TlsConfig_CustomSecurity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomSecurity.Equal(that1.CustomSecurity) {
		return false
	}
	return true
}
func (this *OriginPoolWithWeight) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolWithWeight)
	if !ok {
		that2, ok := that.(OriginPoolWithWeight)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PoolChoice == nil {
		if this.PoolChoice != nil {
			return false
		}
	} else if this.PoolChoice == nil {
		return false
	} else if !this.PoolChoice.Equal(that1.PoolChoice) {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if len(this.EndpointSubsets) != len(that1.EndpointSubsets) {
		return false
	}
	for i := range this.EndpointSubsets {
		if this.EndpointSubsets[i] != that1.EndpointSubsets[i] {
			return false
		}
	}
	return true
}
func (this *OriginPoolWithWeight_Pool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolWithWeight_Pool)
	if !ok {
		that2, ok := that.(OriginPoolWithWeight_Pool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pool.Equal(that1.Pool) {
		return false
	}
	return true
}
func (this *OriginPoolWithWeight_Cluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolWithWeight_Cluster)
	if !ok {
		that2, ok := that.(OriginPoolWithWeight_Cluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cluster.Equal(that1.Cluster) {
		return false
	}
	return true
}
func (this *PrefixStringListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrefixStringListType)
	if !ok {
		that2, ok := that.(PrefixStringListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Prefixes) != len(that1.Prefixes) {
		return false
	}
	for i := range this.Prefixes {
		if this.Prefixes[i] != that1.Prefixes[i] {
			return false
		}
	}
	return true
}
func (this *GlobalConnectorType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalConnectorType)
	if !ok {
		that2, ok := that.(GlobalConnectorType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalVn.Equal(that1.GlobalVn) {
		return false
	}
	return true
}
func (this *VolterraSoftwareType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VolterraSoftwareType)
	if !ok {
		that2, ok := that.(VolterraSoftwareType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.VolterraSwVersionChoice == nil {
		if this.VolterraSwVersionChoice != nil {
			return false
		}
	} else if this.VolterraSwVersionChoice == nil {
		return false
	} else if !this.VolterraSwVersionChoice.Equal(that1.VolterraSwVersionChoice) {
		return false
	}
	return true
}
func (this *VolterraSoftwareType_DefaultSwVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VolterraSoftwareType_DefaultSwVersion)
	if !ok {
		that2, ok := that.(VolterraSoftwareType_DefaultSwVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSwVersion.Equal(that1.DefaultSwVersion) {
		return false
	}
	return true
}
func (this *VolterraSoftwareType_VolterraSoftwareVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VolterraSoftwareType_VolterraSoftwareVersion)
	if !ok {
		that2, ok := that.(VolterraSoftwareType_VolterraSoftwareVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	return true
}
func (this *OperatingSystemType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OperatingSystemType)
	if !ok {
		that2, ok := that.(OperatingSystemType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OperatingSystemVersionChoice == nil {
		if this.OperatingSystemVersionChoice != nil {
			return false
		}
	} else if this.OperatingSystemVersionChoice == nil {
		return false
	} else if !this.OperatingSystemVersionChoice.Equal(that1.OperatingSystemVersionChoice) {
		return false
	}
	return true
}
func (this *OperatingSystemType_DefaultOsVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OperatingSystemType_DefaultOsVersion)
	if !ok {
		that2, ok := that.(OperatingSystemType_DefaultOsVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultOsVersion.Equal(that1.DefaultOsVersion) {
		return false
	}
	return true
}
func (this *OperatingSystemType_OperatingSystemVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OperatingSystemType_OperatingSystemVersion)
	if !ok {
		that2, ok := that.(OperatingSystemType_OperatingSystemVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	return true
}
func (this *ObjectRefType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.ObjectRefType{")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteLocator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.SiteLocator{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteLocator_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.SiteLocator_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *SiteLocator_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.SiteLocator_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *WhereVirtualNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.WhereVirtualNetwork{")
	if this.VirtualNetwork != nil {
		s = append(s, "VirtualNetwork: "+fmt.Sprintf("%#v", this.VirtualNetwork)+",\n")
	}
	if this.VipChoice != nil {
		s = append(s, "VipChoice: "+fmt.Sprintf("%#v", this.VipChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVirtualNetwork_DefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereVirtualNetwork_DefaultVip{` +
		`DefaultVip:` + fmt.Sprintf("%#v", this.DefaultVip) + `}`}, ", ")
	return s
}
func (this *WhereVirtualNetwork_SpecificVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereVirtualNetwork_SpecificVip{` +
		`SpecificVip:` + fmt.Sprintf("%#v", this.SpecificVip) + `}`}, ", ")
	return s
}
func (this *WhereSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.WhereSite{")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	if this.Site != nil {
		s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	}
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.WhereVirtualSite{")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	if this.VirtualSite != nil {
		s = append(s, "VirtualSite: "+fmt.Sprintf("%#v", this.VirtualSite)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVK8SService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.WhereVK8SService{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVK8SService_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereVK8SService_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *WhereVK8SService_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereVK8SService_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *WhereType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&views.WhereType{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereType_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *WhereType_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *WhereType_Vk8SService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_Vk8SService{` +
		`Vk8SService:` + fmt.Sprintf("%#v", this.Vk8SService) + `}`}, ", ")
	return s
}
func (this *WhereType_VirtualNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_VirtualNetwork{` +
		`VirtualNetwork:` + fmt.Sprintf("%#v", this.VirtualNetwork) + `}`}, ", ")
	return s
}
func (this *WhereType_UseDefaultPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_UseDefaultPort{` +
		`UseDefaultPort:` + fmt.Sprintf("%#v", this.UseDefaultPort) + `}`}, ", ")
	return s
}
func (this *WhereType_Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_Port{` +
		`Port:` + fmt.Sprintf("%#v", this.Port) + `}`}, ", ")
	return s
}
func (this *WhereTypeSiteVsite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.WhereTypeSiteVsite{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereTypeSiteVsite_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereTypeSiteVsite_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *WhereTypeSiteVsite_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereTypeSiteVsite_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *WhereTypeSiteVsite_UseDefaultPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereTypeSiteVsite_UseDefaultPort{` +
		`UseDefaultPort:` + fmt.Sprintf("%#v", this.UseDefaultPort) + `}`}, ", ")
	return s
}
func (this *WhereTypeSiteVsite_Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereTypeSiteVsite_Port{` +
		`Port:` + fmt.Sprintf("%#v", this.Port) + `}`}, ", ")
	return s
}
func (this *AdvertisePublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.AdvertisePublic{")
	if this.PublicIp != nil {
		s = append(s, "PublicIp: "+fmt.Sprintf("%#v", this.PublicIp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.AdvertiseCustom{")
	if this.AdvertiseWhere != nil {
		s = append(s, "AdvertiseWhere: "+fmt.Sprintf("%#v", this.AdvertiseWhere)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvertiseSiteVsite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.AdvertiseSiteVsite{")
	if this.AdvertiseWhere != nil {
		s = append(s, "AdvertiseWhere: "+fmt.Sprintf("%#v", this.AdvertiseWhere)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomCiphers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.CustomCiphers{")
	s = append(s, "MinVersion: "+fmt.Sprintf("%#v", this.MinVersion)+",\n")
	s = append(s, "MaxVersion: "+fmt.Sprintf("%#v", this.MaxVersion)+",\n")
	s = append(s, "CipherSuites: "+fmt.Sprintf("%#v", this.CipherSuites)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TlsConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.TlsConfig{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TlsConfig_DefaultSecurity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.TlsConfig_DefaultSecurity{` +
		`DefaultSecurity:` + fmt.Sprintf("%#v", this.DefaultSecurity) + `}`}, ", ")
	return s
}
func (this *TlsConfig_MediumSecurity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.TlsConfig_MediumSecurity{` +
		`MediumSecurity:` + fmt.Sprintf("%#v", this.MediumSecurity) + `}`}, ", ")
	return s
}
func (this *TlsConfig_LowSecurity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.TlsConfig_LowSecurity{` +
		`LowSecurity:` + fmt.Sprintf("%#v", this.LowSecurity) + `}`}, ", ")
	return s
}
func (this *TlsConfig_CustomSecurity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.TlsConfig_CustomSecurity{` +
		`CustomSecurity:` + fmt.Sprintf("%#v", this.CustomSecurity) + `}`}, ", ")
	return s
}
func (this *OriginPoolWithWeight) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.OriginPoolWithWeight{")
	if this.PoolChoice != nil {
		s = append(s, "PoolChoice: "+fmt.Sprintf("%#v", this.PoolChoice)+",\n")
	}
	s = append(s, "Weight: "+fmt.Sprintf("%#v", this.Weight)+",\n")
	keysForEndpointSubsets := make([]string, 0, len(this.EndpointSubsets))
	for k, _ := range this.EndpointSubsets {
		keysForEndpointSubsets = append(keysForEndpointSubsets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEndpointSubsets)
	mapStringForEndpointSubsets := "map[string]string{"
	for _, k := range keysForEndpointSubsets {
		mapStringForEndpointSubsets += fmt.Sprintf("%#v: %#v,", k, this.EndpointSubsets[k])
	}
	mapStringForEndpointSubsets += "}"
	if this.EndpointSubsets != nil {
		s = append(s, "EndpointSubsets: "+mapStringForEndpointSubsets+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginPoolWithWeight_Pool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.OriginPoolWithWeight_Pool{` +
		`Pool:` + fmt.Sprintf("%#v", this.Pool) + `}`}, ", ")
	return s
}
func (this *OriginPoolWithWeight_Cluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.OriginPoolWithWeight_Cluster{` +
		`Cluster:` + fmt.Sprintf("%#v", this.Cluster) + `}`}, ", ")
	return s
}
func (this *PrefixStringListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.PrefixStringListType{")
	s = append(s, "Prefixes: "+fmt.Sprintf("%#v", this.Prefixes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalConnectorType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.GlobalConnectorType{")
	if this.GlobalVn != nil {
		s = append(s, "GlobalVn: "+fmt.Sprintf("%#v", this.GlobalVn)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VolterraSoftwareType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.VolterraSoftwareType{")
	if this.VolterraSwVersionChoice != nil {
		s = append(s, "VolterraSwVersionChoice: "+fmt.Sprintf("%#v", this.VolterraSwVersionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VolterraSoftwareType_DefaultSwVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.VolterraSoftwareType_DefaultSwVersion{` +
		`DefaultSwVersion:` + fmt.Sprintf("%#v", this.DefaultSwVersion) + `}`}, ", ")
	return s
}
func (this *VolterraSoftwareType_VolterraSoftwareVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.VolterraSoftwareType_VolterraSoftwareVersion{` +
		`VolterraSoftwareVersion:` + fmt.Sprintf("%#v", this.VolterraSoftwareVersion) + `}`}, ", ")
	return s
}
func (this *OperatingSystemType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.OperatingSystemType{")
	if this.OperatingSystemVersionChoice != nil {
		s = append(s, "OperatingSystemVersionChoice: "+fmt.Sprintf("%#v", this.OperatingSystemVersionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OperatingSystemType_DefaultOsVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.OperatingSystemType_DefaultOsVersion{` +
		`DefaultOsVersion:` + fmt.Sprintf("%#v", this.DefaultOsVersion) + `}`}, ", ")
	return s
}
func (this *OperatingSystemType_OperatingSystemVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.OperatingSystemType_OperatingSystemVersion{` +
		`OperatingSystemVersion:` + fmt.Sprintf("%#v", this.OperatingSystemVersion) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ObjectRefType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectRefType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectRefType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SiteLocator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteLocator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteLocator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SiteLocator_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteLocator_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SiteLocator_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteLocator_VirtualSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WhereVirtualNetwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereVirtualNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVirtualNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VipChoice != nil {
		{
			size := m.VipChoice.Size()
			i -= size
			if _, err := m.VipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VirtualNetwork != nil {
		{
			size, err := m.VirtualNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WhereVirtualNetwork_DefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVirtualNetwork_DefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultVip != nil {
		{
			size, err := m.DefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *WhereVirtualNetwork_SpecificVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVirtualNetwork_SpecificVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SpecificVip)
	copy(dAtA[i:], m.SpecificVip)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SpecificVip)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *WhereSite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Network != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Network))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WhereVirtualSite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereVirtualSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVirtualSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Network != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Network))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WhereVK8SService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereVK8SService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVK8SService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WhereVK8SService_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVK8SService_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WhereVK8SService_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVK8SService_VirtualSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WhereType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WhereType_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WhereType_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_VirtualSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WhereType_Vk8SService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_Vk8SService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vk8SService != nil {
		{
			size, err := m.Vk8SService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *WhereType_UseDefaultPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_UseDefaultPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDefaultPort != nil {
		{
			size, err := m.UseDefaultPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *WhereType_Port) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_Port) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *WhereType_VirtualNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereType_VirtualNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualNetwork != nil {
		{
			size, err := m.VirtualNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *WhereTypeSiteVsite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereTypeSiteVsite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereTypeSiteVsite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WhereTypeSiteVsite_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereTypeSiteVsite_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WhereTypeSiteVsite_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereTypeSiteVsite_VirtualSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WhereTypeSiteVsite_UseDefaultPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereTypeSiteVsite_UseDefaultPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDefaultPort != nil {
		{
			size, err := m.UseDefaultPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *WhereTypeSiteVsite_Port) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereTypeSiteVsite_Port) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *AdvertisePublic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertisePublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvertisePublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PublicIp != nil {
		{
			size, err := m.PublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdvertiseCustom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdvertiseWhere) > 0 {
		for iNdEx := len(m.AdvertiseWhere) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdvertiseWhere[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdvertiseSiteVsite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertiseSiteVsite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvertiseSiteVsite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdvertiseWhere) > 0 {
		for iNdEx := len(m.AdvertiseWhere) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdvertiseWhere[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomCiphers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomCiphers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomCiphers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CipherSuites) > 0 {
		for iNdEx := len(m.CipherSuites) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CipherSuites[iNdEx])
			copy(dAtA[i:], m.CipherSuites[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.CipherSuites[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MaxVersion != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxVersion))
		i--
		dAtA[i] = 0x10
	}
	if m.MinVersion != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TlsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TlsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TlsConfig_DefaultSecurity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TlsConfig_DefaultSecurity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSecurity != nil {
		{
			size, err := m.DefaultSecurity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *TlsConfig_MediumSecurity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TlsConfig_MediumSecurity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MediumSecurity != nil {
		{
			size, err := m.MediumSecurity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TlsConfig_LowSecurity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TlsConfig_LowSecurity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LowSecurity != nil {
		{
			size, err := m.LowSecurity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TlsConfig_CustomSecurity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TlsConfig_CustomSecurity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomSecurity != nil {
		{
			size, err := m.CustomSecurity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *OriginPoolWithWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginPoolWithWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginPoolWithWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EndpointSubsets) > 0 {
		keysForEndpointSubsets := make([]string, 0, len(m.EndpointSubsets))
		for k := range m.EndpointSubsets {
			keysForEndpointSubsets = append(keysForEndpointSubsets, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForEndpointSubsets)
		for iNdEx := len(keysForEndpointSubsets) - 1; iNdEx >= 0; iNdEx-- {
			v := m.EndpointSubsets[string(keysForEndpointSubsets[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForEndpointSubsets[iNdEx])
			copy(dAtA[i:], keysForEndpointSubsets[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForEndpointSubsets[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.PoolChoice != nil {
		{
			size := m.PoolChoice.Size()
			i -= size
			if _, err := m.PoolChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Weight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *OriginPoolWithWeight_Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginPoolWithWeight_Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *OriginPoolWithWeight_Cluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginPoolWithWeight_Cluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cluster != nil {
		{
			size, err := m.Cluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PrefixStringListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrefixStringListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrefixStringListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for iNdEx := len(m.Prefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Prefixes[iNdEx])
			copy(dAtA[i:], m.Prefixes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Prefixes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalConnectorType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalConnectorType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalConnectorType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GlobalVn != nil {
		{
			size, err := m.GlobalVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VolterraSoftwareType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolterraSoftwareType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolterraSoftwareType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VolterraSwVersionChoice != nil {
		{
			size := m.VolterraSwVersionChoice.Size()
			i -= size
			if _, err := m.VolterraSwVersionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VolterraSoftwareType_DefaultSwVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolterraSoftwareType_DefaultSwVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSwVersion != nil {
		{
			size, err := m.DefaultSwVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *VolterraSoftwareType_VolterraSoftwareVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolterraSoftwareType_VolterraSoftwareVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.VolterraSoftwareVersion)
	copy(dAtA[i:], m.VolterraSoftwareVersion)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *OperatingSystemType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatingSystemType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatingSystemType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatingSystemVersionChoice != nil {
		{
			size := m.OperatingSystemVersionChoice.Size()
			i -= size
			if _, err := m.OperatingSystemVersionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperatingSystemType_DefaultOsVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatingSystemType_DefaultOsVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultOsVersion != nil {
		{
			size, err := m.DefaultOsVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *OperatingSystemType_OperatingSystemVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatingSystemType_OperatingSystemVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.OperatingSystemVersion)
	copy(dAtA[i:], m.OperatingSystemVersion)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ObjectRefType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SiteLocator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *SiteLocator_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteLocator_VirtualSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereVirtualNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualNetwork != nil {
		l = m.VirtualNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VipChoice != nil {
		n += m.VipChoice.Size()
	}
	return n
}

func (m *WhereVirtualNetwork_DefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultVip != nil {
		l = m.DefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereVirtualNetwork_SpecificVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificVip)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *WhereSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Network != 0 {
		n += 1 + sovTypes(uint64(m.Network))
	}
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *WhereVirtualSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Network != 0 {
		n += 1 + sovTypes(uint64(m.Network))
	}
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *WhereVK8SService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *WhereVK8SService_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereVK8SService_VirtualSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	return n
}

func (m *WhereType_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_VirtualSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_Vk8SService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vk8SService != nil {
		l = m.Vk8SService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_UseDefaultPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDefaultPort != nil {
		l = m.UseDefaultPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Port))
	return n
}
func (m *WhereType_VirtualNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualNetwork != nil {
		l = m.VirtualNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereTypeSiteVsite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	return n
}

func (m *WhereTypeSiteVsite_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereTypeSiteVsite_VirtualSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereTypeSiteVsite_UseDefaultPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDefaultPort != nil {
		l = m.UseDefaultPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereTypeSiteVsite_Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Port))
	return n
}
func (m *AdvertisePublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicIp != nil {
		l = m.PublicIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AdvertiseWhere) > 0 {
		for _, e := range m.AdvertiseWhere {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AdvertiseSiteVsite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AdvertiseWhere) > 0 {
		for _, e := range m.AdvertiseWhere {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CustomCiphers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinVersion != 0 {
		n += 1 + sovTypes(uint64(m.MinVersion))
	}
	if m.MaxVersion != 0 {
		n += 1 + sovTypes(uint64(m.MaxVersion))
	}
	if len(m.CipherSuites) > 0 {
		for _, s := range m.CipherSuites {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *TlsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *TlsConfig_DefaultSecurity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSecurity != nil {
		l = m.DefaultSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TlsConfig_MediumSecurity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MediumSecurity != nil {
		l = m.MediumSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TlsConfig_LowSecurity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LowSecurity != nil {
		l = m.LowSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TlsConfig_CustomSecurity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomSecurity != nil {
		l = m.CustomSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolWithWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolChoice != nil {
		n += m.PoolChoice.Size()
	}
	if m.Weight != 0 {
		n += 1 + sovTypes(uint64(m.Weight))
	}
	if len(m.EndpointSubsets) > 0 {
		for k, v := range m.EndpointSubsets {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *OriginPoolWithWeight_Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolWithWeight_Cluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PrefixStringListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for _, s := range m.Prefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalConnectorType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalVn != nil {
		l = m.GlobalVn.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *VolterraSoftwareType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolterraSwVersionChoice != nil {
		n += m.VolterraSwVersionChoice.Size()
	}
	return n
}

func (m *VolterraSoftwareType_DefaultSwVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSwVersion != nil {
		l = m.DefaultSwVersion.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VolterraSoftwareType_VolterraSoftwareVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VolterraSoftwareVersion)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *OperatingSystemType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatingSystemVersionChoice != nil {
		n += m.OperatingSystemVersionChoice.Size()
	}
	return n
}

func (m *OperatingSystemType_DefaultOsVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultOsVersion != nil {
		l = m.DefaultOsVersion.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OperatingSystemType_OperatingSystemVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatingSystemVersion)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ObjectRefType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectRefType{`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteLocator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteLocator{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteLocator_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteLocator_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteLocator_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteLocator_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualNetwork{`,
		`VirtualNetwork:` + strings.Replace(this.VirtualNetwork.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`VipChoice:` + fmt.Sprintf("%v", this.VipChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualNetwork_DefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualNetwork_DefaultVip{`,
		`DefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.DefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualNetwork_SpecificVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualNetwork_SpecificVip{`,
		`SpecificVip:` + fmt.Sprintf("%v", this.SpecificVip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereSite{`,
		`Network:` + fmt.Sprintf("%v", this.Network) + `,`,
		`Site:` + strings.Replace(this.Site.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualSite{`,
		`Network:` + fmt.Sprintf("%v", this.Network) + `,`,
		`VirtualSite:` + strings.Replace(this.VirtualSite.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVK8SService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVK8SService{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVK8SService_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVK8SService_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVK8SService_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVK8SService_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "WhereSite", "WhereSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "WhereVirtualSite", "WhereVirtualSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_Vk8SService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_Vk8SService{`,
		`Vk8SService:` + strings.Replace(fmt.Sprintf("%v", this.Vk8SService), "WhereVK8SService", "WhereVK8SService", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_UseDefaultPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_UseDefaultPort{`,
		`UseDefaultPort:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_Port{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_VirtualNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_VirtualNetwork{`,
		`VirtualNetwork:` + strings.Replace(fmt.Sprintf("%v", this.VirtualNetwork), "WhereVirtualNetwork", "WhereVirtualNetwork", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "WhereSite", "WhereSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "WhereVirtualSite", "WhereVirtualSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite_UseDefaultPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite_UseDefaultPort{`,
		`UseDefaultPort:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite_Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite_Port{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvertisePublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvertisePublic{`,
		`PublicIp:` + strings.Replace(this.PublicIp.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAdvertiseWhere := "[]*WhereType{"
	for _, f := range this.AdvertiseWhere {
		repeatedStringForAdvertiseWhere += strings.Replace(f.String(), "WhereType", "WhereType", 1) + ","
	}
	repeatedStringForAdvertiseWhere += "}"
	s := strings.Join([]string{`&AdvertiseCustom{`,
		`AdvertiseWhere:` + repeatedStringForAdvertiseWhere + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvertiseSiteVsite) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAdvertiseWhere := "[]*WhereTypeSiteVsite{"
	for _, f := range this.AdvertiseWhere {
		repeatedStringForAdvertiseWhere += strings.Replace(f.String(), "WhereTypeSiteVsite", "WhereTypeSiteVsite", 1) + ","
	}
	repeatedStringForAdvertiseWhere += "}"
	s := strings.Join([]string{`&AdvertiseSiteVsite{`,
		`AdvertiseWhere:` + repeatedStringForAdvertiseWhere + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomCiphers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomCiphers{`,
		`MinVersion:` + fmt.Sprintf("%v", this.MinVersion) + `,`,
		`MaxVersion:` + fmt.Sprintf("%v", this.MaxVersion) + `,`,
		`CipherSuites:` + fmt.Sprintf("%v", this.CipherSuites) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig_DefaultSecurity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig_DefaultSecurity{`,
		`DefaultSecurity:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSecurity), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig_MediumSecurity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig_MediumSecurity{`,
		`MediumSecurity:` + strings.Replace(fmt.Sprintf("%v", this.MediumSecurity), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig_LowSecurity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig_LowSecurity{`,
		`LowSecurity:` + strings.Replace(fmt.Sprintf("%v", this.LowSecurity), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig_CustomSecurity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig_CustomSecurity{`,
		`CustomSecurity:` + strings.Replace(fmt.Sprintf("%v", this.CustomSecurity), "CustomCiphers", "CustomCiphers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolWithWeight) String() string {
	if this == nil {
		return "nil"
	}
	keysForEndpointSubsets := make([]string, 0, len(this.EndpointSubsets))
	for k, _ := range this.EndpointSubsets {
		keysForEndpointSubsets = append(keysForEndpointSubsets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEndpointSubsets)
	mapStringForEndpointSubsets := "map[string]string{"
	for _, k := range keysForEndpointSubsets {
		mapStringForEndpointSubsets += fmt.Sprintf("%v: %v,", k, this.EndpointSubsets[k])
	}
	mapStringForEndpointSubsets += "}"
	s := strings.Join([]string{`&OriginPoolWithWeight{`,
		`PoolChoice:` + fmt.Sprintf("%v", this.PoolChoice) + `,`,
		`Weight:` + fmt.Sprintf("%v", this.Weight) + `,`,
		`EndpointSubsets:` + mapStringForEndpointSubsets + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolWithWeight_Pool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolWithWeight_Pool{`,
		`Pool:` + strings.Replace(fmt.Sprintf("%v", this.Pool), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolWithWeight_Cluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolWithWeight_Cluster{`,
		`Cluster:` + strings.Replace(fmt.Sprintf("%v", this.Cluster), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrefixStringListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrefixStringListType{`,
		`Prefixes:` + fmt.Sprintf("%v", this.Prefixes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalConnectorType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalConnectorType{`,
		`GlobalVn:` + strings.Replace(this.GlobalVn.String(), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolterraSoftwareType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolterraSoftwareType{`,
		`VolterraSwVersionChoice:` + fmt.Sprintf("%v", this.VolterraSwVersionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolterraSoftwareType_DefaultSwVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolterraSoftwareType_DefaultSwVersion{`,
		`DefaultSwVersion:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSwVersion), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolterraSoftwareType_VolterraSoftwareVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolterraSoftwareType_VolterraSoftwareVersion{`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OperatingSystemType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OperatingSystemType{`,
		`OperatingSystemVersionChoice:` + fmt.Sprintf("%v", this.OperatingSystemVersionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OperatingSystemType_DefaultOsVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OperatingSystemType_DefaultOsVersion{`,
		`DefaultOsVersion:` + strings.Replace(fmt.Sprintf("%v", this.DefaultOsVersion), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OperatingSystemType_OperatingSystemVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OperatingSystemType_OperatingSystemVersion{`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ObjectRefType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectRefType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectRefType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteLocator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteLocator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteLocator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &SiteLocator_Site{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &SiteLocator_VirtualSite{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereVirtualNetwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereVirtualNetwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereVirtualNetwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VirtualNetwork == nil {
				m.VirtualNetwork = &ObjectRefType{}
			}
			if err := m.VirtualNetwork.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VipChoice = &WhereVirtualNetwork_DefaultVip{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipChoice = &WhereVirtualNetwork_SpecificVip{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereSite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereSite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereSite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= SiteNetwork(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Site == nil {
				m.Site = &ObjectRefType{}
			}
			if err := m.Site.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereVirtualSite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereVirtualSite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereVirtualSite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= SiteNetwork(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VirtualSite == nil {
				m.VirtualSite = &ObjectRefType{}
			}
			if err := m.VirtualSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereVK8SService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereVK8SService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereVK8SService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereVK8SService_Site{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereVK8SService_VirtualSite{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_Site{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVirtualSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_VirtualSite{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vk8SService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVK8SService{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_Vk8SService{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PortChoice = &WhereType_UseDefaultPort{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &WhereType_Port{v}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVirtualNetwork{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_VirtualNetwork{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereTypeSiteVsite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereTypeSiteVsite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereTypeSiteVsite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereTypeSiteVsite_Site{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVirtualSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereTypeSiteVsite_VirtualSite{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PortChoice = &WhereTypeSiteVsite_UseDefaultPort{v}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &WhereTypeSiteVsite_Port{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertisePublic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertisePublic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertisePublic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicIp == nil {
				m.PublicIp = &ObjectRefType{}
			}
			if err := m.PublicIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertiseCustom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertiseCustom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertiseCustom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseWhere", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertiseWhere = append(m.AdvertiseWhere, &WhereType{})
			if err := m.AdvertiseWhere[len(m.AdvertiseWhere)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertiseSiteVsite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertiseSiteVsite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertiseSiteVsite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseWhere", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertiseWhere = append(m.AdvertiseWhere, &WhereTypeSiteVsite{})
			if err := m.AdvertiseWhere[len(m.AdvertiseWhere)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomCiphers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomCiphers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomCiphers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			m.MinVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVersion |= schema.TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVersion", wireType)
			}
			m.MaxVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxVersion |= schema.TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherSuites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherSuites = append(m.CipherSuites, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &TlsConfig_DefaultSecurity{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediumSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &TlsConfig_MediumSecurity{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &TlsConfig_LowSecurity{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomCiphers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &TlsConfig_CustomSecurity{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginPoolWithWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginPoolWithWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginPoolWithWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PoolChoice = &OriginPoolWithWeight_Pool{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PoolChoice = &OriginPoolWithWeight_Cluster{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSubsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndpointSubsets == nil {
				m.EndpointSubsets = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EndpointSubsets[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrefixStringListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrefixStringListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrefixStringListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefixes = append(m.Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalConnectorType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalConnectorType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalConnectorType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalVn == nil {
				m.GlobalVn = &ObjectRefType{}
			}
			if err := m.GlobalVn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolterraSoftwareType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolterraSoftwareType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolterraSoftwareType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSwVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VolterraSwVersionChoice = &VolterraSoftwareType_DefaultSwVersion{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSwVersionChoice = &VolterraSoftwareType_VolterraSoftwareVersion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatingSystemType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatingSystemType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatingSystemType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultOsVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OperatingSystemVersionChoice = &OperatingSystemType_DefaultOsVersion{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersionChoice = &OperatingSystemType_OperatingSystemVersion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

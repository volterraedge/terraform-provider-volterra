// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/cdn_loadbalancer/types.proto

package cdn_loadbalancer

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/cdn_loadbalancer/access_log"
	common_security "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_security"
	common_waf "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_waf"
	http_loadbalancer "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/http_loadbalancer"
	origin_pool "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/origin_pool"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy"
	virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Header Options
//
// x-displayName: "Header Options"
type HeaderOptions int32

const (
	// Proxy Host
	//
	// x-displayName: "Proxy Host"
	// Name of the proxied server
	proxy_host HeaderOptions = 0
	// Referer
	//
	// x-displayName: "Referer"
	// This is the address of the previous web page from which a link to the currently requested page was followed
	referer HeaderOptions = 1
	// Scheme
	//
	// x-displayName: "Scheme"
	// The http scheme used: http or https
	scheme HeaderOptions = 2
	// User Agent
	//
	// x-displayName: "User Agent"
	// The user agent string of the user agent
	user_agent HeaderOptions = 3
)

var HeaderOptions_name = map[int32]string{
	0: "proxy_host",
	1: "referer",
	2: "scheme",
	3: "user_agent",
}

var HeaderOptions_value = map[string]int32{
	"proxy_host": 0,
	"referer":    1,
	"scheme":     2,
	"user_agent": 3,
}

func (HeaderOptions) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{0}
}

// Metrics Field Selector options
//
// x-displayName: "Metrics Field Selector"
// CDN Metric fields. Naming convention is <field>_<aggregation>
type LilacCDNMetricsFieldSelector int32

const (
	// x-displayName: " REQUEST_TOTAL_SUM"
	// REQUEST_SUCCESS computed from REQUEST_TOTAL - REQUEST_FAILED
	REQUEST_TOTAL_SUM LilacCDNMetricsFieldSelector = 0
	// x-displayName: " REQUEST_FAILED_SUM"
	REQUEST_FAILED_SUM LilacCDNMetricsFieldSelector = 1
	// x-displayName: " REQUEST_1XX_SUM"
	REQUEST_1XX_SUM LilacCDNMetricsFieldSelector = 2
	// x-displayName: " REQUEST_2XX_SUM"
	REQUEST_2XX_SUM LilacCDNMetricsFieldSelector = 3
	// x-displayName: " REQUEST_3XX_SUM"
	REQUEST_3XX_SUM LilacCDNMetricsFieldSelector = 4
	// x-displayName: " REQUEST_4XX_SUM"
	REQUEST_4XX_SUM LilacCDNMetricsFieldSelector = 5
	// x-displayName: " REQUEST_5XX_SUM"
	REQUEST_5XX_SUM LilacCDNMetricsFieldSelector = 6
	// x-displayName: " DATA_OUT_SUM"
	// Bandwidth computed from DATA_OUT
	DATA_OUT_SUM LilacCDNMetricsFieldSelector = 7
	// x-displayName: " LATENCY_MEAN"
	LATENCY_MEAN LilacCDNMetricsFieldSelector = 8
)

var LilacCDNMetricsFieldSelector_name = map[int32]string{
	0: "REQUEST_TOTAL_SUM",
	1: "REQUEST_FAILED_SUM",
	2: "REQUEST_1XX_SUM",
	3: "REQUEST_2XX_SUM",
	4: "REQUEST_3XX_SUM",
	5: "REQUEST_4XX_SUM",
	6: "REQUEST_5XX_SUM",
	7: "DATA_OUT_SUM",
	8: "LATENCY_MEAN",
}

var LilacCDNMetricsFieldSelector_value = map[string]int32{
	"REQUEST_TOTAL_SUM":  0,
	"REQUEST_FAILED_SUM": 1,
	"REQUEST_1XX_SUM":    2,
	"REQUEST_2XX_SUM":    3,
	"REQUEST_3XX_SUM":    4,
	"REQUEST_4XX_SUM":    5,
	"REQUEST_5XX_SUM":    6,
	"DATA_OUT_SUM":       7,
	"LATENCY_MEAN":       8,
}

func (LilacCDNMetricsFieldSelector) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{1}
}

// Metrics Tag options
//
// x-displayName: "Tags"
// Tags on which CDN metrics can be filtered or grouped by
type LilacCDNMetricsTag int32

const (
	// x-displayName: " CDN_DISTRIBUTION_NAME"
	CDN_DISTRIBUTION_NAME LilacCDNMetricsTag = 0
	// x-displayName: " CACHE_HIT_TYPE"
	// HIT|MISS
	CACHE_HIT_TYPE LilacCDNMetricsTag = 1
	// x-displayName: "Request originating country"
	// Two letter country code
	REQUEST_COUNTRY LilacCDNMetricsTag = 2
	// x-displayName: "HTTP Protocol Version"
	// http_1_1|http_2_0 etc
	HTTP_VERSION LilacCDNMetricsTag = 3
	// x-displayName: "TLS Protocol Version"
	// tlsv1_0|tlsv1_1|tlsv1_2 etc
	TLS_VERSION LilacCDNMetricsTag = 4
	// x-displayName: " Region of the PoP"
	POP_REGION LilacCDNMetricsTag = 5
	// x-displayName: "PoP"
	POP LilacCDNMetricsTag = 6
)

var LilacCDNMetricsTag_name = map[int32]string{
	0: "CDN_DISTRIBUTION_NAME",
	1: "CACHE_HIT_TYPE",
	2: "REQUEST_COUNTRY",
	3: "HTTP_VERSION",
	4: "TLS_VERSION",
	5: "POP_REGION",
	6: "POP",
}

var LilacCDNMetricsTag_value = map[string]int32{
	"CDN_DISTRIBUTION_NAME": 0,
	"CACHE_HIT_TYPE":        1,
	"REQUEST_COUNTRY":       2,
	"HTTP_VERSION":          3,
	"TLS_VERSION":           4,
	"POP_REGION":            5,
	"POP":                   6,
}

func (LilacCDNMetricsTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{2}
}

// Metrics Operator Types
//
// x-displayName: "Metrics Operator Types"
// Operators possible in filtering
type LilacCDNMetricsOperatorType int32

const (
	// x-displayName: " IN Operator"
	OPERATOR_TYPE_IN LilacCDNMetricsOperatorType = 0
	// x-displayName: " Not-IN Operator"
	OPERATOR_TYPE_NOT_IN LilacCDNMetricsOperatorType = 1
)

var LilacCDNMetricsOperatorType_name = map[int32]string{
	0: "OPERATOR_TYPE_IN",
	1: "OPERATOR_TYPE_NOT_IN",
}

var LilacCDNMetricsOperatorType_value = map[string]int32{
	"OPERATOR_TYPE_IN":     0,
	"OPERATOR_TYPE_NOT_IN": 1,
}

func (LilacCDNMetricsOperatorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{3}
}

// Metric Unit
//
// x-displayName: "Metric Unit"
// Metric Unit
type LilacCDNMetricUnit int32

const (
	// x-displayName: "Count"
	COUNT LilacCDNMetricUnit = 0
	// x-displayName: "Bytes"
	BYTES LilacCDNMetricUnit = 1
	// x-displayName: "Milliseconds"
	MILLISECONDS LilacCDNMetricUnit = 2
)

var LilacCDNMetricUnit_name = map[int32]string{
	0: "COUNT",
	1: "BYTES",
	2: "MILLISECONDS",
}

var LilacCDNMetricUnit_value = map[string]int32{
	"COUNT":        0,
	"BYTES":        1,
	"MILLISECONDS": 2,
}

func (LilacCDNMetricUnit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{4}
}

// HTTPS with Auto Certs Choice
//
// x-displayName: "HTTPS with Auto Certs Choice"
// Choice for selecting HTTP proxy with bring your own certificates
type ProxyTypeHttpsAutoCerts struct {
	// HTTP Redirect
	//
	// x-displayName: "HTTP Redirect to HTTPS"
	// Redirect HTTP traffic to corresponding HTTPS
	HttpRedirect bool `protobuf:"varint,1,opt,name=http_redirect,json=httpRedirect,proto3" json:"http_redirect,omitempty"`
	// Add HSTS
	//
	// x-displayName: "Add HSTS Header"
	// Add HTTP Strict-Transport-Security response header
	AddHsts bool `protobuf:"varint,2,opt,name=add_hsts,json=addHsts,proto3" json:"add_hsts,omitempty"`
	// TLS Config
	//
	// x-displayName: "TLS Config"
	// Configuration for TLS parameters such as min/max TLS version and ciphers
	TlsConfig *views.TlsConfig `protobuf:"bytes,3,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	// Server Header configuration
	//
	// x-displayName: "Server Header value to be used in response"
	// x-required
	// Specify Server Header value to be used in responses
	//
	// Types that are valid to be assigned to ServerHeaderChoice:
	//	*ProxyTypeHttpsAutoCerts_DefaultHeader
	//	*ProxyTypeHttpsAutoCerts_ServerName
	//	*ProxyTypeHttpsAutoCerts_AppendServerName
	//	*ProxyTypeHttpsAutoCerts_PassThrough
	ServerHeaderChoice isProxyTypeHttpsAutoCerts_ServerHeaderChoice `protobuf_oneof:"server_header_choice"`
}

func (m *ProxyTypeHttpsAutoCerts) Reset()      { *m = ProxyTypeHttpsAutoCerts{} }
func (*ProxyTypeHttpsAutoCerts) ProtoMessage() {}
func (*ProxyTypeHttpsAutoCerts) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{0}
}
func (m *ProxyTypeHttpsAutoCerts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyTypeHttpsAutoCerts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProxyTypeHttpsAutoCerts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyTypeHttpsAutoCerts.Merge(m, src)
}
func (m *ProxyTypeHttpsAutoCerts) XXX_Size() int {
	return m.Size()
}
func (m *ProxyTypeHttpsAutoCerts) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyTypeHttpsAutoCerts.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyTypeHttpsAutoCerts proto.InternalMessageInfo

type isProxyTypeHttpsAutoCerts_ServerHeaderChoice interface {
	isProxyTypeHttpsAutoCerts_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyTypeHttpsAutoCerts_DefaultHeader struct {
	DefaultHeader *schema.Empty `protobuf:"bytes,5,opt,name=default_header,json=defaultHeader,proto3,oneof" json:"default_header,omitempty"`
}
type ProxyTypeHttpsAutoCerts_ServerName struct {
	ServerName string `protobuf:"bytes,6,opt,name=server_name,json=serverName,proto3,oneof" json:"server_name,omitempty"`
}
type ProxyTypeHttpsAutoCerts_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,7,opt,name=append_server_name,json=appendServerName,proto3,oneof" json:"append_server_name,omitempty"`
}
type ProxyTypeHttpsAutoCerts_PassThrough struct {
	PassThrough *schema.Empty `protobuf:"bytes,8,opt,name=pass_through,json=passThrough,proto3,oneof" json:"pass_through,omitempty"`
}

func (*ProxyTypeHttpsAutoCerts_DefaultHeader) isProxyTypeHttpsAutoCerts_ServerHeaderChoice()    {}
func (*ProxyTypeHttpsAutoCerts_ServerName) isProxyTypeHttpsAutoCerts_ServerHeaderChoice()       {}
func (*ProxyTypeHttpsAutoCerts_AppendServerName) isProxyTypeHttpsAutoCerts_ServerHeaderChoice() {}
func (*ProxyTypeHttpsAutoCerts_PassThrough) isProxyTypeHttpsAutoCerts_ServerHeaderChoice()      {}

func (m *ProxyTypeHttpsAutoCerts) GetServerHeaderChoice() isProxyTypeHttpsAutoCerts_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetHttpRedirect() bool {
	if m != nil {
		return m.HttpRedirect
	}
	return false
}

func (m *ProxyTypeHttpsAutoCerts) GetAddHsts() bool {
	if m != nil {
		return m.AddHsts
	}
	return false
}

func (m *ProxyTypeHttpsAutoCerts) GetTlsConfig() *views.TlsConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetDefaultHeader() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *ProxyTypeHttpsAutoCerts) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *ProxyTypeHttpsAutoCerts) GetPassThrough() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProxyTypeHttpsAutoCerts) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProxyTypeHttpsAutoCerts_DefaultHeader)(nil),
		(*ProxyTypeHttpsAutoCerts_ServerName)(nil),
		(*ProxyTypeHttpsAutoCerts_AppendServerName)(nil),
		(*ProxyTypeHttpsAutoCerts_PassThrough)(nil),
	}
}

// Header Control
//
// x-displayName: "Header Control"
// This defines various options related to request/response headers
type HeaderControlType struct {
	// Headers to add in request
	//
	// x-displayName: "Add Origin Request Headers"
	// Headers are key-value pairs to be added to HTTP request being routed towards upstream.
	// Headers specified at this level are applied after headers from matched Route are applied
	RequestHeadersToAdd []*schema.HeaderManipulationOptionType `protobuf:"bytes,1,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// Header to be removed from request
	//
	// x-displayName: "Remove Origin Request Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP request being sent towards upstream.
	RequestHeadersToRemove []string `protobuf:"bytes,2,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// Headers to add in response
	//
	// x-displayName: "Add Response Headers"
	// Headers are key-value pairs to be added to HTTP response being sent towards downstream.
	// Headers specified at this level are applied after headers from matched Route are applied
	ResponseHeadersToAdd []*schema.HeaderManipulationOptionType `protobuf:"bytes,3,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// Header to be removed from response
	//
	// x-displayName: "Remove Response Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP response being sent towards downstream.
	ResponseHeadersToRemove []string `protobuf:"bytes,4,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
}

func (m *HeaderControlType) Reset()      { *m = HeaderControlType{} }
func (*HeaderControlType) ProtoMessage() {}
func (*HeaderControlType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{1}
}
func (m *HeaderControlType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeaderControlType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HeaderControlType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderControlType.Merge(m, src)
}
func (m *HeaderControlType) XXX_Size() int {
	return m.Size()
}
func (m *HeaderControlType) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderControlType.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderControlType proto.InternalMessageInfo

func (m *HeaderControlType) GetRequestHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *HeaderControlType) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *HeaderControlType) GetResponseHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *HeaderControlType) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

// Web Application Firewall
//
// x-displayName: "Web Application Firewall"
// Web Application Firewall
type WebApplicationFirewall struct {
	// Enable the WAF (Web Application Firewall) functionality for VirtualHost
	//
	// x-displayName: "Web Application Firewall (WAF)"
	// x-required
	//
	// F5 Distributed Cloud WAF is a next-gen web application firewall that provides signature-based
	// and behavior-based threat detection to protect applications wherever they are deployed.
	// WAF can be configured in Monitoring (log threats) or Blocking (log and block threats) mode.
	//
	// Types that are valid to be assigned to WafChoice:
	//	*WebApplicationFirewall_DisableWaf
	//	*WebApplicationFirewall_AppFirewall
	//	*WebApplicationFirewall_AppFirewallOnCacheMiss
	WafChoice isWebApplicationFirewall_WafChoice `protobuf_oneof:"waf_choice"`
	// WAF Exclusion Rules
	//
	// x-displayName: "WAF Exclusion Rules"
	// Define the Signature IDs, Violations, Attack Types and Bot Names that should be excluded from WAF processing on specific match criteria.
	// The match criteria include domain, path and method.
	// WAF Exclusion rules is a sequential engine where rules are evaluated one after the other.
	// It's important to define the correct order for WAF exclusion rules to get the intended result, rules are evaluated from top to bottom in the list.
	// For each request, its characteristics are evaluated based on the match criteria in each WAF exclusion rule, starting from the top.
	// When an exclusion rule is matched, then this exclusion rule takes effect and no more rules are evaluated.
	WafExclusionRules []*policy.SimpleWafExclusionRule `protobuf:"bytes,4,rep,name=waf_exclusion_rules,json=wafExclusionRules,proto3" json:"waf_exclusion_rules,omitempty"`
	// Data Guard Rules
	//
	// x-displayName: "Data Guard Rules"
	// Data Guard prevents responses from exposing sensitive information by masking the data.
	// The system masks credit card numbers and social security numbers leaked from the application from within the http response with a string of asterisks (*).
	// Note: App Firewall should be enabled, to use Data Guard feature.
	DataGuardRules []*policy.SimpleDataGuardRule `protobuf:"bytes,5,rep,name=data_guard_rules,json=dataGuardRules,proto3" json:"data_guard_rules,omitempty"`
	// csrf_policy
	//
	// x-displayName: "Cross-Site Request Forgery Protection"
	// Cross-Site Request Forgery (CSRF) is an attack that occurs when a malicious third-party website exploits a vulnerability thats allows them to submit an undesired request on user's behalf.
	//
	// The policy checks where a request is coming from to determine if the request's origin is the same as its destination. The policy relies on two pieces of information used in determining if a request originated from the same host.
	//
	// 1. The origin that caused the user agent to issue the request (source origin).
	// 2. The origin that the request is going to (target origin).
	// When the policy evaluating a request, it ensures both pieces of information are present and compare their values. If the source origin is missing or origins do not match the request is rejected. The exception to this being the source-origin has been added to the policy as valid.
	// Because CSRF attacks specifically target state-changing requests, the policy only acts on the HTTP requests that have state-changing method (PUT,POST, etc.).
	CsrfPolicy *schema.CsrfPolicy `protobuf:"bytes,6,opt,name=csrf_policy,json=csrfPolicy,proto3" json:"csrf_policy,omitempty"`
	// GraphQL Inspection
	//
	// x-displayName: "GraphQL Inspection"
	// GraphQL is a query language and server-side runtime for APIs which provides a complete and understandable
	// description of the data in API. GraphQL gives clients the power to ask for exactly what they need, makes it
	// easier to evolve APIs over time, and enables powerful developer tools. Policy configuration to analyze GraphQL
	// queries and prevent GraphQL tailored attacks.
	GraphqlRules []*policy.GraphQLRule `protobuf:"bytes,7,rep,name=graphql_rules,json=graphqlRules,proto3" json:"graphql_rules,omitempty"`
	// Cookie protection
	//
	// x-displayName: "Cookie Protection"
	// Allows setting attributes (SameSite, Secure, and HttpOnly) on cookies in responses.
	// Cookie Tampering Protection prevents attackers from modifying the value of session cookies.
	// For Cookie Tampering Protection, enabling a web app firewall (WAF) is a prerequisite.
	// The configured mode of WAF (monitoring or blocking) will be enforced on the request when cookie tampering is identified.
	// Note: We recommend enabling Secure and HttpOnly attributes along with cookie tampering protection.
	ProtectedCookies []*schema.CookieManipulationOptionType `protobuf:"bytes,8,rep,name=protected_cookies,json=protectedCookies,proto3" json:"protected_cookies,omitempty"`
}

func (m *WebApplicationFirewall) Reset()      { *m = WebApplicationFirewall{} }
func (*WebApplicationFirewall) ProtoMessage() {}
func (*WebApplicationFirewall) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{2}
}
func (m *WebApplicationFirewall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebApplicationFirewall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WebApplicationFirewall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebApplicationFirewall.Merge(m, src)
}
func (m *WebApplicationFirewall) XXX_Size() int {
	return m.Size()
}
func (m *WebApplicationFirewall) XXX_DiscardUnknown() {
	xxx_messageInfo_WebApplicationFirewall.DiscardUnknown(m)
}

var xxx_messageInfo_WebApplicationFirewall proto.InternalMessageInfo

type isWebApplicationFirewall_WafChoice interface {
	isWebApplicationFirewall_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WebApplicationFirewall_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,2,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type WebApplicationFirewall_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,3,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type WebApplicationFirewall_AppFirewallOnCacheMiss struct {
	AppFirewallOnCacheMiss *views.ObjectRefType `protobuf:"bytes,9,opt,name=app_firewall_on_cache_miss,json=appFirewallOnCacheMiss,proto3,oneof" json:"app_firewall_on_cache_miss,omitempty"`
}

func (*WebApplicationFirewall_DisableWaf) isWebApplicationFirewall_WafChoice()             {}
func (*WebApplicationFirewall_AppFirewall) isWebApplicationFirewall_WafChoice()            {}
func (*WebApplicationFirewall_AppFirewallOnCacheMiss) isWebApplicationFirewall_WafChoice() {}

func (m *WebApplicationFirewall) GetWafChoice() isWebApplicationFirewall_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}

func (m *WebApplicationFirewall) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*WebApplicationFirewall_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *WebApplicationFirewall) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*WebApplicationFirewall_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

// Deprecated: Do not use.
func (m *WebApplicationFirewall) GetAppFirewallOnCacheMiss() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*WebApplicationFirewall_AppFirewallOnCacheMiss); ok {
		return x.AppFirewallOnCacheMiss
	}
	return nil
}

func (m *WebApplicationFirewall) GetWafExclusionRules() []*policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *WebApplicationFirewall) GetDataGuardRules() []*policy.SimpleDataGuardRule {
	if m != nil {
		return m.DataGuardRules
	}
	return nil
}

func (m *WebApplicationFirewall) GetCsrfPolicy() *schema.CsrfPolicy {
	if m != nil {
		return m.CsrfPolicy
	}
	return nil
}

func (m *WebApplicationFirewall) GetGraphqlRules() []*policy.GraphQLRule {
	if m != nil {
		return m.GraphqlRules
	}
	return nil
}

func (m *WebApplicationFirewall) GetProtectedCookies() []*schema.CookieManipulationOptionType {
	if m != nil {
		return m.ProtectedCookies
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WebApplicationFirewall) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WebApplicationFirewall_DisableWaf)(nil),
		(*WebApplicationFirewall_AppFirewall)(nil),
		(*WebApplicationFirewall_AppFirewallOnCacheMiss)(nil),
	}
}

// Bot Protection
//
// x-displayName: "Bot Protection"
// Bot Protection
type BotProtection struct {
	// Enable Bot Defense functionality for VirtualHost
	//
	// x-displayName: "Bot Defense"
	// x-required
	//
	// Bot Defense protects your applications from automated attacks by leveraging JavaScript and API calls to collect telemetry and mitigate sophisticated attacks within the context of F5's Distributed Cloud global network. When automation is detected, and mitigation action is set to Block or Redirect, the client will receive the configured mitigation response. If action is set to Flag, automated requests are monitored by Bot Defense, but are allowed to proceed to the customer's server.
	//
	// Types that are valid to be assigned to BotDefenseChoice:
	//	*BotProtection_DisableBotDefense
	//	*BotProtection_BotDefense
	//	*BotProtection_BotDefenseAdvanced
	BotDefenseChoice isBotProtection_BotDefenseChoice `protobuf_oneof:"bot_defense_choice"`
}

func (m *BotProtection) Reset()      { *m = BotProtection{} }
func (*BotProtection) ProtoMessage() {}
func (*BotProtection) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{3}
}
func (m *BotProtection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotProtection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BotProtection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotProtection.Merge(m, src)
}
func (m *BotProtection) XXX_Size() int {
	return m.Size()
}
func (m *BotProtection) XXX_DiscardUnknown() {
	xxx_messageInfo_BotProtection.DiscardUnknown(m)
}

var xxx_messageInfo_BotProtection proto.InternalMessageInfo

type isBotProtection_BotDefenseChoice interface {
	isBotProtection_BotDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BotProtection_DisableBotDefense struct {
	DisableBotDefense *schema.Empty `protobuf:"bytes,2,opt,name=disable_bot_defense,json=disableBotDefense,proto3,oneof" json:"disable_bot_defense,omitempty"`
}
type BotProtection_BotDefense struct {
	BotDefense *common_security.ShapeBotDefenseType `protobuf:"bytes,3,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type BotProtection_BotDefenseAdvanced struct {
	BotDefenseAdvanced *common_security.BotDefenseAdvancedType `protobuf:"bytes,1011,opt,name=bot_defense_advanced,json=botDefenseAdvanced,proto3,oneof" json:"bot_defense_advanced,omitempty"`
}

func (*BotProtection_DisableBotDefense) isBotProtection_BotDefenseChoice()  {}
func (*BotProtection_BotDefense) isBotProtection_BotDefenseChoice()         {}
func (*BotProtection_BotDefenseAdvanced) isBotProtection_BotDefenseChoice() {}

func (m *BotProtection) GetBotDefenseChoice() isBotProtection_BotDefenseChoice {
	if m != nil {
		return m.BotDefenseChoice
	}
	return nil
}

func (m *BotProtection) GetDisableBotDefense() *schema.Empty {
	if x, ok := m.GetBotDefenseChoice().(*BotProtection_DisableBotDefense); ok {
		return x.DisableBotDefense
	}
	return nil
}

func (m *BotProtection) GetBotDefense() *common_security.ShapeBotDefenseType {
	if x, ok := m.GetBotDefenseChoice().(*BotProtection_BotDefense); ok {
		return x.BotDefense
	}
	return nil
}

func (m *BotProtection) GetBotDefenseAdvanced() *common_security.BotDefenseAdvancedType {
	if x, ok := m.GetBotDefenseChoice().(*BotProtection_BotDefenseAdvanced); ok {
		return x.BotDefenseAdvanced
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BotProtection) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BotProtection_DisableBotDefense)(nil),
		(*BotProtection_BotDefense)(nil),
		(*BotProtection_BotDefenseAdvanced)(nil),
	}
}

// DoS Protection
//
// x-displayName: "DoS Protection"
// DoS Protection
type DoSProtection struct {
	// L7 DDoS Auto Mitigation Action
	//
	// x-displayName: "L7 DDoS Auto Mitigation"
	// x-required
	// Select an action for auto mitigation
	//
	// Types that are valid to be assigned to L7DdosAutoMitigationAction:
	//	*DoSProtection_L7DdosActionDefault
	//	*DoSProtection_L7DdosActionBlock
	//	*DoSProtection_L7DdosActionJsChallenge
	//	*DoSProtection_L7DdosActionNone
	L7DdosAutoMitigationAction isDoSProtection_L7DdosAutoMitigationAction `protobuf_oneof:"l7_ddos_auto_mitigation_action"`
	// DDoS Mitigation Rules
	//
	// x-displayName: "DDoS Mitigation Rules"
	// Define manual mitigation rules to block L7 DDoS attacks.
	DdosMitigationRules []*common_security.DDoSMitigationRule `protobuf:"bytes,6,rep,name=ddos_mitigation_rules,json=ddosMitigationRules,proto3" json:"ddos_mitigation_rules,omitempty"`
	// Slow DDoS Mitigation
	//
	// x-displayName: "Slow DDoS Mitigation"
	// x-required
	//
	// "Slow and low" attacks tie up server resources, leaving none available for servicing
	// requests from actual users.Configuration that protects origins from slow and low attacks.
	// In the case HTTP loadbalancer, only default settings can be applied. For HTTPS load balancer,
	// the request timeout and request headers timeout value can be customized.
	//
	// Types that are valid to be assigned to SlowDdosMitigationChoice:
	//	*DoSProtection_SystemDefaultTimeouts
	//	*DoSProtection_SlowDdosMitigation
	SlowDdosMitigationChoice isDoSProtection_SlowDdosMitigationChoice `protobuf_oneof:"slow_ddos_mitigation_choice"`
}

func (m *DoSProtection) Reset()      { *m = DoSProtection{} }
func (*DoSProtection) ProtoMessage() {}
func (*DoSProtection) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{4}
}
func (m *DoSProtection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoSProtection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DoSProtection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoSProtection.Merge(m, src)
}
func (m *DoSProtection) XXX_Size() int {
	return m.Size()
}
func (m *DoSProtection) XXX_DiscardUnknown() {
	xxx_messageInfo_DoSProtection.DiscardUnknown(m)
}

var xxx_messageInfo_DoSProtection proto.InternalMessageInfo

type isDoSProtection_L7DdosAutoMitigationAction interface {
	isDoSProtection_L7DdosAutoMitigationAction()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDoSProtection_SlowDdosMitigationChoice interface {
	isDoSProtection_SlowDdosMitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DoSProtection_L7DdosActionDefault struct {
	L7DdosActionDefault *schema.Empty `protobuf:"bytes,2,opt,name=l7_ddos_action_default,json=l7DdosActionDefault,proto3,oneof" json:"l7_ddos_action_default,omitempty"`
}
type DoSProtection_L7DdosActionBlock struct {
	L7DdosActionBlock *schema.Empty `protobuf:"bytes,3,opt,name=l7_ddos_action_block,json=l7DdosActionBlock,proto3,oneof" json:"l7_ddos_action_block,omitempty"`
}
type DoSProtection_L7DdosActionJsChallenge struct {
	L7DdosActionJsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,4,opt,name=l7_ddos_action_js_challenge,json=l7DdosActionJsChallenge,proto3,oneof" json:"l7_ddos_action_js_challenge,omitempty"`
}
type DoSProtection_L7DdosActionNone struct {
	L7DdosActionNone *schema.Empty `protobuf:"bytes,5,opt,name=l7_ddos_action_none,json=l7DdosActionNone,proto3,oneof" json:"l7_ddos_action_none,omitempty"`
}
type DoSProtection_SystemDefaultTimeouts struct {
	SystemDefaultTimeouts *schema.Empty `protobuf:"bytes,8,opt,name=system_default_timeouts,json=systemDefaultTimeouts,proto3,oneof" json:"system_default_timeouts,omitempty"`
}
type DoSProtection_SlowDdosMitigation struct {
	SlowDdosMitigation *virtual_host.SlowDDoSMitigation `protobuf:"bytes,9,opt,name=slow_ddos_mitigation,json=slowDdosMitigation,proto3,oneof" json:"slow_ddos_mitigation,omitempty"`
}

func (*DoSProtection_L7DdosActionDefault) isDoSProtection_L7DdosAutoMitigationAction()     {}
func (*DoSProtection_L7DdosActionBlock) isDoSProtection_L7DdosAutoMitigationAction()       {}
func (*DoSProtection_L7DdosActionJsChallenge) isDoSProtection_L7DdosAutoMitigationAction() {}
func (*DoSProtection_L7DdosActionNone) isDoSProtection_L7DdosAutoMitigationAction()        {}
func (*DoSProtection_SystemDefaultTimeouts) isDoSProtection_SlowDdosMitigationChoice()     {}
func (*DoSProtection_SlowDdosMitigation) isDoSProtection_SlowDdosMitigationChoice()        {}

func (m *DoSProtection) GetL7DdosAutoMitigationAction() isDoSProtection_L7DdosAutoMitigationAction {
	if m != nil {
		return m.L7DdosAutoMitigationAction
	}
	return nil
}
func (m *DoSProtection) GetSlowDdosMitigationChoice() isDoSProtection_SlowDdosMitigationChoice {
	if m != nil {
		return m.SlowDdosMitigationChoice
	}
	return nil
}

func (m *DoSProtection) GetL7DdosActionDefault() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*DoSProtection_L7DdosActionDefault); ok {
		return x.L7DdosActionDefault
	}
	return nil
}

func (m *DoSProtection) GetL7DdosActionBlock() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*DoSProtection_L7DdosActionBlock); ok {
		return x.L7DdosActionBlock
	}
	return nil
}

func (m *DoSProtection) GetL7DdosActionJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*DoSProtection_L7DdosActionJsChallenge); ok {
		return x.L7DdosActionJsChallenge
	}
	return nil
}

func (m *DoSProtection) GetL7DdosActionNone() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*DoSProtection_L7DdosActionNone); ok {
		return x.L7DdosActionNone
	}
	return nil
}

func (m *DoSProtection) GetDdosMitigationRules() []*common_security.DDoSMitigationRule {
	if m != nil {
		return m.DdosMitigationRules
	}
	return nil
}

func (m *DoSProtection) GetSystemDefaultTimeouts() *schema.Empty {
	if x, ok := m.GetSlowDdosMitigationChoice().(*DoSProtection_SystemDefaultTimeouts); ok {
		return x.SystemDefaultTimeouts
	}
	return nil
}

func (m *DoSProtection) GetSlowDdosMitigation() *virtual_host.SlowDDoSMitigation {
	if x, ok := m.GetSlowDdosMitigationChoice().(*DoSProtection_SlowDdosMitigation); ok {
		return x.SlowDdosMitigation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DoSProtection) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DoSProtection_L7DdosActionDefault)(nil),
		(*DoSProtection_L7DdosActionBlock)(nil),
		(*DoSProtection_L7DdosActionJsChallenge)(nil),
		(*DoSProtection_L7DdosActionNone)(nil),
		(*DoSProtection_SystemDefaultTimeouts)(nil),
		(*DoSProtection_SlowDdosMitigation)(nil),
	}
}

// Other Settings
//
// x-displayName: "Other Settings"
// Other Settings
type OtherSettings struct {
	// Add Site information
	//
	// x-displayName: "Add Location"
	// x-example: "true"
	// x-example: true
	// Appends header x-volterra-location = <re-site-name> in responses.
	AddLocation bool `protobuf:"varint,1,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Logging Options
	//
	// x-displayName: "Logging Options"
	// Logging related options
	LoggingOptions *LoggingOptionsType `protobuf:"bytes,2,opt,name=logging_options,json=loggingOptions,proto3" json:"logging_options,omitempty"`
	// Header Control
	//
	// x-displayName: "Header Control"
	// Request/Response header related options
	HeaderOptions *HeaderControlType `protobuf:"bytes,3,opt,name=header_options,json=headerOptions,proto3" json:"header_options,omitempty"`
	// ip_filtering
	//
	// x-displayName: "Client IP filtering Options"
	// IP filtering options
	IpFiltering *IpFilteringOptions `protobuf:"bytes,4,opt,name=ip_filtering,json=ipFiltering,proto3" json:"ip_filtering,omitempty"` // Deprecated: Do not use.
	// geo_filtering
	//
	// x-displayName: "Client Geo filtering Options"
	// Geo filtering options
	GeoFiltering *GeoFilteringOptions `protobuf:"bytes,5,opt,name=geo_filtering,json=geoFiltering,proto3" json:"geo_filtering,omitempty"` // Deprecated: Do not use.
}

func (m *OtherSettings) Reset()      { *m = OtherSettings{} }
func (*OtherSettings) ProtoMessage() {}
func (*OtherSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{5}
}
func (m *OtherSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OtherSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OtherSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OtherSettings.Merge(m, src)
}
func (m *OtherSettings) XXX_Size() int {
	return m.Size()
}
func (m *OtherSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_OtherSettings.DiscardUnknown(m)
}

var xxx_messageInfo_OtherSettings proto.InternalMessageInfo

func (m *OtherSettings) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *OtherSettings) GetLoggingOptions() *LoggingOptionsType {
	if m != nil {
		return m.LoggingOptions
	}
	return nil
}

func (m *OtherSettings) GetHeaderOptions() *HeaderControlType {
	if m != nil {
		return m.HeaderOptions
	}
	return nil
}

// Deprecated: Do not use.
func (m *OtherSettings) GetIpFiltering() *IpFilteringOptions {
	if m != nil {
		return m.IpFiltering
	}
	return nil
}

// Deprecated: Do not use.
func (m *OtherSettings) GetGeoFiltering() *GeoFilteringOptions {
	if m != nil {
		return m.GeoFiltering
	}
	return nil
}

// Client Side Defense
//
// x-displayName: "Client Side Defense"
// Client Side Defense
type ClientSideDefense struct {
	// Enable Client-Side Defense functionality for VirtualHost
	//
	// x-displayName: "Client-Side Defense"
	// x-required
	//
	// Client-Side Defense (CSD) provides a multi-phase protection system that protects web applications against Magecart, formjacking, digital
	// skimming, PII harvesting and other malicious JavaScript attacks.
	// Enabling CSD is a 2-part process
	// (1) Service Enablement
	// (2) JavaScript injection using a Load Balancer.
	// By clicking enable in this section and going through the configuration, you can complete part 2 of the process.
	// To enable the service itself, please visit the Service's Landing page using the search on the left navigation pane.
	//
	// Types that are valid to be assigned to ClientSideDefenseChoice:
	//	*ClientSideDefense_DisableClientSideDefense
	//	*ClientSideDefense_ClientSideDefense
	ClientSideDefenseChoice isClientSideDefense_ClientSideDefenseChoice `protobuf_oneof:"client_side_defense_choice"`
}

func (m *ClientSideDefense) Reset()      { *m = ClientSideDefense{} }
func (*ClientSideDefense) ProtoMessage() {}
func (*ClientSideDefense) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{6}
}
func (m *ClientSideDefense) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSideDefense) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientSideDefense) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSideDefense.Merge(m, src)
}
func (m *ClientSideDefense) XXX_Size() int {
	return m.Size()
}
func (m *ClientSideDefense) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSideDefense.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSideDefense proto.InternalMessageInfo

type isClientSideDefense_ClientSideDefenseChoice interface {
	isClientSideDefense_ClientSideDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClientSideDefense_DisableClientSideDefense struct {
	DisableClientSideDefense *schema.Empty `protobuf:"bytes,2,opt,name=disable_client_side_defense,json=disableClientSideDefense,proto3,oneof" json:"disable_client_side_defense,omitempty"`
}
type ClientSideDefense_ClientSideDefense struct {
	ClientSideDefense *common_security.ClientSideDefenseType `protobuf:"bytes,3,opt,name=client_side_defense,json=clientSideDefense,proto3,oneof" json:"client_side_defense,omitempty"`
}

func (*ClientSideDefense_DisableClientSideDefense) isClientSideDefense_ClientSideDefenseChoice() {}
func (*ClientSideDefense_ClientSideDefense) isClientSideDefense_ClientSideDefenseChoice()        {}

func (m *ClientSideDefense) GetClientSideDefenseChoice() isClientSideDefense_ClientSideDefenseChoice {
	if m != nil {
		return m.ClientSideDefenseChoice
	}
	return nil
}

func (m *ClientSideDefense) GetDisableClientSideDefense() *schema.Empty {
	if x, ok := m.GetClientSideDefenseChoice().(*ClientSideDefense_DisableClientSideDefense); ok {
		return x.DisableClientSideDefense
	}
	return nil
}

func (m *ClientSideDefense) GetClientSideDefense() *common_security.ClientSideDefenseType {
	if x, ok := m.GetClientSideDefenseChoice().(*ClientSideDefense_ClientSideDefense); ok {
		return x.ClientSideDefense
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClientSideDefense) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClientSideDefense_DisableClientSideDefense)(nil),
		(*ClientSideDefense_ClientSideDefense)(nil),
	}
}

// Common Security Controls
//
// x-displayName: "Common Security Controls"
type CommonSecurityControls struct {
	// Service Policies
	//
	// x-displayName: "Service Policies"
	// x-required
	// Service policies provide the ability to configure security controls such as IP Allow/Deny lists, Geo IP filtering and Custom rules
	//
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*CommonSecurityControls_ServicePoliciesFromNamespace
	//	*CommonSecurityControls_NoServicePolicies
	//	*CommonSecurityControls_ActiveServicePolicies
	ServicePolicyChoice isCommonSecurityControls_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// ip_reputation
	//
	// x-displayName: "IP Reputation"
	// IP reputation service analyzes IP threats and publishes a dynamic data set of millions of high-risk IP addresses, to protect users from inbound traffic from malicious IPs.
	// IP threat categories include Spam Sources, Windows Exploits, Web Attacks, BotNets, Scanners, Denial of Service, Reputation, Phishing, Proxy, Mobile Threats, and TOR Proxy.
	//
	// Types that are valid to be assigned to IpReputationChoice:
	//	*CommonSecurityControls_DisableIpReputation
	//	*CommonSecurityControls_EnableIpReputation
	//	*CommonSecurityControls_IpReputationOnCacheMiss
	IpReputationChoice isCommonSecurityControls_IpReputationChoice `protobuf_oneof:"ip_reputation_choice"`
	// threat_mesh
	//
	// x-required
	// x-displayName: "Threat Mesh"
	// Threat Mesh provides F5 Distributed Cloud customers with an additional layer of protection against web application attacks.
	// Threat mesh leverages cross-customer correlation i.e correlation of client attacks across different customers
	// to identify malicious intent of the client. Whenever a client is flagged due to malicious intent by our WAAP decision engines,
	// that client will be added to the ThreatDB and all customers get this intelligence and are protected in real-time.
	//
	// Types that are valid to be assigned to ThreatMeshChoice:
	//	*CommonSecurityControls_DisableThreatMesh
	//	*CommonSecurityControls_EnableThreatMesh
	ThreatMeshChoice isCommonSecurityControls_ThreatMeshChoice `protobuf_oneof:"threat_mesh_choice"`
	// User Identifier
	//
	// x-displayName: "User Identifier"
	// x-required
	// Select user identifier for rate limiting and malicious user mitigation.
	//
	// Types that are valid to be assigned to UserIdChoice:
	//	*CommonSecurityControls_UserIdClientIp
	//	*CommonSecurityControls_UserIdentification
	UserIdChoice isCommonSecurityControls_UserIdChoice `protobuf_oneof:"user_id_choice"`
	// Malicious User Detection Choice
	//
	// x-required
	// x-displayName: "Malicious User Detection"
	// Malicious User Detection performs user behavior analysis and assigns a risk score and threat level of low, medium
	// or high based on the suspicious activity of the user.
	// The risk score of the user is decayed over time, if no further suspicious activity is noticed.
	// The feature can be configured also via external app_type and labeling this HTTP Load Balancer.
	// In this case external app_type configuration overrides internally disabled feature.
	// Enabling the feature internally is allowed only when no labeling to external app_type.
	//
	// Types that are valid to be assigned to MaliciousUserDetectionChoice:
	//	*CommonSecurityControls_DisableMaliciousUserDetection
	//	*CommonSecurityControls_EnableMaliciousUserDetection
	//	*CommonSecurityControls_MaliciousUserDetectionOnCacheMiss
	MaliciousUserDetectionChoice isCommonSecurityControls_MaliciousUserDetectionChoice `protobuf_oneof:"malicious_user_detection_choice"`
	// Challenge Type
	//
	// x-displayName: "Malicious User Mitigation And Challenges"
	// x-required
	// Malicious User Mitigation is an adaptive response and risk-based challenge capability.
	// Enabling this feature would automatically serve different challenges such as JavaScript challenge,
	// Captcha challenge or block temporarily based on the threat level of the malicious user.
	// Policy based challenge can be used to selectively enable or disable JavaScript or Captcha challenge
	// on a specific client and request match criteria
	//
	// Types that are valid to be assigned to ChallengeType:
	//	*CommonSecurityControls_NoChallenge
	//	*CommonSecurityControls_EnableChallenge
	//	*CommonSecurityControls_ChallengeOnCacheMiss
	//	*CommonSecurityControls_JsChallenge
	//	*CommonSecurityControls_CaptchaChallenge
	//	*CommonSecurityControls_PolicyBasedChallenge
	ChallengeType isCommonSecurityControls_ChallengeType `protobuf_oneof:"challenge_type"`
	// Enable Rate Limiting
	//
	// x-displayName: "Rate Limiting"
	// x-required
	// Rate Limiting allows you to control the rate of requests sent to your origin servers, protect against API traffic surge and denial of services attacks.
	//
	// Types that are valid to be assigned to RateLimitChoice:
	//	*CommonSecurityControls_DisableRateLimit
	//	*CommonSecurityControls_ApiRateLimit
	//	*CommonSecurityControls_RateLimit
	RateLimitChoice isCommonSecurityControls_RateLimitChoice `protobuf_oneof:"rate_limit_choice"`
	// Trusted Client Rules
	//
	// x-displayName: "Trusted Client Rules"
	// Define rules to skip processing of one or more features such as WAF, Bot Defense etc. for clients.
	TrustedClients []*common_waf.SimpleClientSrcRule `protobuf:"bytes,24,rep,name=trusted_clients,json=trustedClients,proto3" json:"trusted_clients,omitempty"`
	// Client Blocking Rules
	//
	// x-displayName: "Client Blocking Rules"
	// Define rules to block IP Prefixes or AS numbers.
	BlockedClients []*common_waf.SimpleClientSrcRule `protobuf:"bytes,25,rep,name=blocked_clients,json=blockedClients,proto3" json:"blocked_clients,omitempty"`
	// cors_policy
	//
	// x-displayName: "CORS Policy"
	// Cross-Origin Resource Sharing requests configuration
	//
	// CORS is a mechanism that uses additional HTTP headers to tell a browser to let
	// a web application running at one origin (domain) have permission to access selected
	// resources from a server at a different origin
	CorsPolicy *schema.CorsPolicy `protobuf:"bytes,26,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
}

func (m *CommonSecurityControls) Reset()      { *m = CommonSecurityControls{} }
func (*CommonSecurityControls) ProtoMessage() {}
func (*CommonSecurityControls) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{7}
}
func (m *CommonSecurityControls) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonSecurityControls) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CommonSecurityControls) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonSecurityControls.Merge(m, src)
}
func (m *CommonSecurityControls) XXX_Size() int {
	return m.Size()
}
func (m *CommonSecurityControls) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonSecurityControls.DiscardUnknown(m)
}

var xxx_messageInfo_CommonSecurityControls proto.InternalMessageInfo

type isCommonSecurityControls_ServicePolicyChoice interface {
	isCommonSecurityControls_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCommonSecurityControls_IpReputationChoice interface {
	isCommonSecurityControls_IpReputationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCommonSecurityControls_ThreatMeshChoice interface {
	isCommonSecurityControls_ThreatMeshChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCommonSecurityControls_UserIdChoice interface {
	isCommonSecurityControls_UserIdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCommonSecurityControls_MaliciousUserDetectionChoice interface {
	isCommonSecurityControls_MaliciousUserDetectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCommonSecurityControls_ChallengeType interface {
	isCommonSecurityControls_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCommonSecurityControls_RateLimitChoice interface {
	isCommonSecurityControls_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CommonSecurityControls_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,2,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type CommonSecurityControls_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,3,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type CommonSecurityControls_ActiveServicePolicies struct {
	ActiveServicePolicies *common_waf.ServicePolicyList `protobuf:"bytes,4,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}
type CommonSecurityControls_DisableIpReputation struct {
	DisableIpReputation *schema.Empty `protobuf:"bytes,6,opt,name=disable_ip_reputation,json=disableIpReputation,proto3,oneof" json:"disable_ip_reputation,omitempty"`
}
type CommonSecurityControls_EnableIpReputation struct {
	EnableIpReputation *common_waf.IPThreatCategoryListType `protobuf:"bytes,7,opt,name=enable_ip_reputation,json=enableIpReputation,proto3,oneof" json:"enable_ip_reputation,omitempty"`
}
type CommonSecurityControls_IpReputationOnCacheMiss struct {
	IpReputationOnCacheMiss *common_waf.IPThreatCategoryListType `protobuf:"bytes,27,opt,name=ip_reputation_on_cache_miss,json=ipReputationOnCacheMiss,proto3,oneof" json:"ip_reputation_on_cache_miss,omitempty"`
}
type CommonSecurityControls_DisableThreatMesh struct {
	DisableThreatMesh *schema.Empty `protobuf:"bytes,31,opt,name=disable_threat_mesh,json=disableThreatMesh,proto3,oneof" json:"disable_threat_mesh,omitempty"`
}
type CommonSecurityControls_EnableThreatMesh struct {
	EnableThreatMesh *schema.Empty `protobuf:"bytes,32,opt,name=enable_threat_mesh,json=enableThreatMesh,proto3,oneof" json:"enable_threat_mesh,omitempty"`
}
type CommonSecurityControls_UserIdClientIp struct {
	UserIdClientIp *schema.Empty `protobuf:"bytes,9,opt,name=user_id_client_ip,json=userIdClientIp,proto3,oneof" json:"user_id_client_ip,omitempty"`
}
type CommonSecurityControls_UserIdentification struct {
	UserIdentification *views.ObjectRefType `protobuf:"bytes,10,opt,name=user_identification,json=userIdentification,proto3,oneof" json:"user_identification,omitempty"`
}
type CommonSecurityControls_DisableMaliciousUserDetection struct {
	DisableMaliciousUserDetection *schema.Empty `protobuf:"bytes,12,opt,name=disable_malicious_user_detection,json=disableMaliciousUserDetection,proto3,oneof" json:"disable_malicious_user_detection,omitempty"`
}
type CommonSecurityControls_EnableMaliciousUserDetection struct {
	EnableMaliciousUserDetection *schema.Empty `protobuf:"bytes,13,opt,name=enable_malicious_user_detection,json=enableMaliciousUserDetection,proto3,oneof" json:"enable_malicious_user_detection,omitempty"`
}
type CommonSecurityControls_MaliciousUserDetectionOnCacheMiss struct {
	MaliciousUserDetectionOnCacheMiss *schema.Empty `protobuf:"bytes,28,opt,name=malicious_user_detection_on_cache_miss,json=maliciousUserDetectionOnCacheMiss,proto3,oneof" json:"malicious_user_detection_on_cache_miss,omitempty"`
}
type CommonSecurityControls_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,15,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type CommonSecurityControls_EnableChallenge struct {
	EnableChallenge *common_waf.EnableChallenge `protobuf:"bytes,16,opt,name=enable_challenge,json=enableChallenge,proto3,oneof" json:"enable_challenge,omitempty"`
}
type CommonSecurityControls_ChallengeOnCacheMiss struct {
	ChallengeOnCacheMiss *common_waf.EnableChallenge `protobuf:"bytes,29,opt,name=challenge_on_cache_miss,json=challengeOnCacheMiss,proto3,oneof" json:"challenge_on_cache_miss,omitempty"`
}
type CommonSecurityControls_JsChallenge struct {
	JsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,17,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type CommonSecurityControls_CaptchaChallenge struct {
	CaptchaChallenge *virtual_host.CaptchaChallengeType `protobuf:"bytes,18,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type CommonSecurityControls_PolicyBasedChallenge struct {
	PolicyBasedChallenge *common_waf.PolicyBasedChallenge `protobuf:"bytes,19,opt,name=policy_based_challenge,json=policyBasedChallenge,proto3,oneof" json:"policy_based_challenge,omitempty"`
}
type CommonSecurityControls_DisableRateLimit struct {
	DisableRateLimit *schema.Empty `protobuf:"bytes,21,opt,name=disable_rate_limit,json=disableRateLimit,proto3,oneof" json:"disable_rate_limit,omitempty"`
}
type CommonSecurityControls_ApiRateLimit struct {
	ApiRateLimit *common_waf.APIRateLimit `protobuf:"bytes,22,opt,name=api_rate_limit,json=apiRateLimit,proto3,oneof" json:"api_rate_limit,omitempty"`
}
type CommonSecurityControls_RateLimit struct {
	RateLimit *common_waf.RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,proto3,oneof" json:"rate_limit,omitempty"`
}

func (*CommonSecurityControls_ServicePoliciesFromNamespace) isCommonSecurityControls_ServicePolicyChoice() {
}
func (*CommonSecurityControls_NoServicePolicies) isCommonSecurityControls_ServicePolicyChoice()     {}
func (*CommonSecurityControls_ActiveServicePolicies) isCommonSecurityControls_ServicePolicyChoice() {}
func (*CommonSecurityControls_DisableIpReputation) isCommonSecurityControls_IpReputationChoice()    {}
func (*CommonSecurityControls_EnableIpReputation) isCommonSecurityControls_IpReputationChoice()     {}
func (*CommonSecurityControls_IpReputationOnCacheMiss) isCommonSecurityControls_IpReputationChoice() {
}
func (*CommonSecurityControls_DisableThreatMesh) isCommonSecurityControls_ThreatMeshChoice() {}
func (*CommonSecurityControls_EnableThreatMesh) isCommonSecurityControls_ThreatMeshChoice()  {}
func (*CommonSecurityControls_UserIdClientIp) isCommonSecurityControls_UserIdChoice()        {}
func (*CommonSecurityControls_UserIdentification) isCommonSecurityControls_UserIdChoice()    {}
func (*CommonSecurityControls_DisableMaliciousUserDetection) isCommonSecurityControls_MaliciousUserDetectionChoice() {
}
func (*CommonSecurityControls_EnableMaliciousUserDetection) isCommonSecurityControls_MaliciousUserDetectionChoice() {
}
func (*CommonSecurityControls_MaliciousUserDetectionOnCacheMiss) isCommonSecurityControls_MaliciousUserDetectionChoice() {
}
func (*CommonSecurityControls_NoChallenge) isCommonSecurityControls_ChallengeType()          {}
func (*CommonSecurityControls_EnableChallenge) isCommonSecurityControls_ChallengeType()      {}
func (*CommonSecurityControls_ChallengeOnCacheMiss) isCommonSecurityControls_ChallengeType() {}
func (*CommonSecurityControls_JsChallenge) isCommonSecurityControls_ChallengeType()          {}
func (*CommonSecurityControls_CaptchaChallenge) isCommonSecurityControls_ChallengeType()     {}
func (*CommonSecurityControls_PolicyBasedChallenge) isCommonSecurityControls_ChallengeType() {}
func (*CommonSecurityControls_DisableRateLimit) isCommonSecurityControls_RateLimitChoice()   {}
func (*CommonSecurityControls_ApiRateLimit) isCommonSecurityControls_RateLimitChoice()       {}
func (*CommonSecurityControls_RateLimit) isCommonSecurityControls_RateLimitChoice()          {}

func (m *CommonSecurityControls) GetServicePolicyChoice() isCommonSecurityControls_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *CommonSecurityControls) GetIpReputationChoice() isCommonSecurityControls_IpReputationChoice {
	if m != nil {
		return m.IpReputationChoice
	}
	return nil
}
func (m *CommonSecurityControls) GetThreatMeshChoice() isCommonSecurityControls_ThreatMeshChoice {
	if m != nil {
		return m.ThreatMeshChoice
	}
	return nil
}
func (m *CommonSecurityControls) GetUserIdChoice() isCommonSecurityControls_UserIdChoice {
	if m != nil {
		return m.UserIdChoice
	}
	return nil
}
func (m *CommonSecurityControls) GetMaliciousUserDetectionChoice() isCommonSecurityControls_MaliciousUserDetectionChoice {
	if m != nil {
		return m.MaliciousUserDetectionChoice
	}
	return nil
}
func (m *CommonSecurityControls) GetChallengeType() isCommonSecurityControls_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *CommonSecurityControls) GetRateLimitChoice() isCommonSecurityControls_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}

func (m *CommonSecurityControls) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*CommonSecurityControls_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *CommonSecurityControls) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*CommonSecurityControls_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *CommonSecurityControls) GetActiveServicePolicies() *common_waf.ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*CommonSecurityControls_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *CommonSecurityControls) GetDisableIpReputation() *schema.Empty {
	if x, ok := m.GetIpReputationChoice().(*CommonSecurityControls_DisableIpReputation); ok {
		return x.DisableIpReputation
	}
	return nil
}

func (m *CommonSecurityControls) GetEnableIpReputation() *common_waf.IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*CommonSecurityControls_EnableIpReputation); ok {
		return x.EnableIpReputation
	}
	return nil
}

// Deprecated: Do not use.
func (m *CommonSecurityControls) GetIpReputationOnCacheMiss() *common_waf.IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*CommonSecurityControls_IpReputationOnCacheMiss); ok {
		return x.IpReputationOnCacheMiss
	}
	return nil
}

func (m *CommonSecurityControls) GetDisableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*CommonSecurityControls_DisableThreatMesh); ok {
		return x.DisableThreatMesh
	}
	return nil
}

func (m *CommonSecurityControls) GetEnableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*CommonSecurityControls_EnableThreatMesh); ok {
		return x.EnableThreatMesh
	}
	return nil
}

func (m *CommonSecurityControls) GetUserIdClientIp() *schema.Empty {
	if x, ok := m.GetUserIdChoice().(*CommonSecurityControls_UserIdClientIp); ok {
		return x.UserIdClientIp
	}
	return nil
}

func (m *CommonSecurityControls) GetUserIdentification() *views.ObjectRefType {
	if x, ok := m.GetUserIdChoice().(*CommonSecurityControls_UserIdentification); ok {
		return x.UserIdentification
	}
	return nil
}

func (m *CommonSecurityControls) GetDisableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*CommonSecurityControls_DisableMaliciousUserDetection); ok {
		return x.DisableMaliciousUserDetection
	}
	return nil
}

func (m *CommonSecurityControls) GetEnableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*CommonSecurityControls_EnableMaliciousUserDetection); ok {
		return x.EnableMaliciousUserDetection
	}
	return nil
}

func (m *CommonSecurityControls) GetMaliciousUserDetectionOnCacheMiss() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*CommonSecurityControls_MaliciousUserDetectionOnCacheMiss); ok {
		return x.MaliciousUserDetectionOnCacheMiss
	}
	return nil
}

func (m *CommonSecurityControls) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*CommonSecurityControls_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *CommonSecurityControls) GetEnableChallenge() *common_waf.EnableChallenge {
	if x, ok := m.GetChallengeType().(*CommonSecurityControls_EnableChallenge); ok {
		return x.EnableChallenge
	}
	return nil
}

// Deprecated: Do not use.
func (m *CommonSecurityControls) GetChallengeOnCacheMiss() *common_waf.EnableChallenge {
	if x, ok := m.GetChallengeType().(*CommonSecurityControls_ChallengeOnCacheMiss); ok {
		return x.ChallengeOnCacheMiss
	}
	return nil
}

func (m *CommonSecurityControls) GetJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*CommonSecurityControls_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *CommonSecurityControls) GetCaptchaChallenge() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*CommonSecurityControls_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *CommonSecurityControls) GetPolicyBasedChallenge() *common_waf.PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*CommonSecurityControls_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *CommonSecurityControls) GetDisableRateLimit() *schema.Empty {
	if x, ok := m.GetRateLimitChoice().(*CommonSecurityControls_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *CommonSecurityControls) GetApiRateLimit() *common_waf.APIRateLimit {
	if x, ok := m.GetRateLimitChoice().(*CommonSecurityControls_ApiRateLimit); ok {
		return x.ApiRateLimit
	}
	return nil
}

func (m *CommonSecurityControls) GetRateLimit() *common_waf.RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*CommonSecurityControls_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *CommonSecurityControls) GetTrustedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *CommonSecurityControls) GetBlockedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *CommonSecurityControls) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CommonSecurityControls) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CommonSecurityControls_ServicePoliciesFromNamespace)(nil),
		(*CommonSecurityControls_NoServicePolicies)(nil),
		(*CommonSecurityControls_ActiveServicePolicies)(nil),
		(*CommonSecurityControls_DisableIpReputation)(nil),
		(*CommonSecurityControls_EnableIpReputation)(nil),
		(*CommonSecurityControls_IpReputationOnCacheMiss)(nil),
		(*CommonSecurityControls_DisableThreatMesh)(nil),
		(*CommonSecurityControls_EnableThreatMesh)(nil),
		(*CommonSecurityControls_UserIdClientIp)(nil),
		(*CommonSecurityControls_UserIdentification)(nil),
		(*CommonSecurityControls_DisableMaliciousUserDetection)(nil),
		(*CommonSecurityControls_EnableMaliciousUserDetection)(nil),
		(*CommonSecurityControls_MaliciousUserDetectionOnCacheMiss)(nil),
		(*CommonSecurityControls_NoChallenge)(nil),
		(*CommonSecurityControls_EnableChallenge)(nil),
		(*CommonSecurityControls_ChallengeOnCacheMiss)(nil),
		(*CommonSecurityControls_JsChallenge)(nil),
		(*CommonSecurityControls_CaptchaChallenge)(nil),
		(*CommonSecurityControls_PolicyBasedChallenge)(nil),
		(*CommonSecurityControls_DisableRateLimit)(nil),
		(*CommonSecurityControls_ApiRateLimit)(nil),
		(*CommonSecurityControls_RateLimit)(nil),
	}
}

// API Definition
//
// x-displayName: "API Definition"
// API Definition based on the imported swagger specs
type ApiProtection struct {
	// API Definition choice
	//
	// x-required
	// x-displayName: "API Definition"
	// API Definition based on the imported swagger specs
	//
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//	*ApiProtection_DisableApiDefinition
	//	*ApiProtection_ApiSpecification
	//	*ApiProtection_ApiSpecificationOnCacheMiss
	ApiDefinitionChoice isApiProtection_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	// API Protection rules
	//
	// x-displayName: "API Protection Rules"
	// API Protection Rules can be defined in two categories.
	// The first category includes fine-grained rules, per API path and methods.
	// The second category includes rules per API groups or Server URLs.
	// If request matches any rule in the first category, second category rules are not evaluated.
	// Rules can also include additional conditions, for example specific clients can access certain API endpoint or API group.
	ApiProtectionRules *common_waf.APIProtectionRules `protobuf:"bytes,4,opt,name=api_protection_rules,json=apiProtectionRules,proto3" json:"api_protection_rules,omitempty"`
	// JWT Validation
	//
	// x-displayName: "JWT Validation"
	// JWT Validation stops JWT replay attacks and JWT tampering by cryptographically verifying incoming
	// JWTs before they are passed to origin APIs. JWT Validation will also stop requests with expired
	// tokens or tokens that are not yet valid.
	JwtValidation *common_waf.JWTValidation `protobuf:"bytes,5,opt,name=jwt_validation,json=jwtValidation,proto3" json:"jwt_validation,omitempty"`
	// API Discovery Choice
	//
	// x-required
	// x-displayName: "API Discovery"
	// When enabled, sampled traffic passing through this load balancer is analyzed and
	// APIs exposed by the application are identified.
	// An API is identified by its canonical (collapsed) URL path and the method used to call it.
	// Once all APIs are identified, for each API, the system learns its possible schema.
	// The learnt schema for all APIs is used to automatically generate a swagger definition file for the entire API set exposed by this load balancer.
	// The feature can be configured also via external app_type and labeling this HTTP Load Balancer.
	// In this case external app_type configuration overrides internally disabled feature.
	// Enabling the feature internally is allowed only when no labeling to external app_type.
	//
	// Types that are valid to be assigned to ApiDiscoveryChoice:
	//	*ApiProtection_EnableApiDiscovery
	//	*ApiProtection_DisableApiDiscovery
	//	*ApiProtection_ApiDiscoveryOnCacheMiss
	ApiDiscoveryChoice isApiProtection_ApiDiscoveryChoice `protobuf_oneof:"api_discovery_choice"`
	// Sensitive Data Discovery
	//
	// x-displayName: "Sensitive Data Discovery"
	// x-required
	// Sensitive data discovery provide the ability to configure the policy for sensitive data detection
	//
	// Types that are valid to be assigned to SensitiveDataPolicyChoice:
	//	*ApiProtection_DefaultSensitiveDataPolicy
	//	*ApiProtection_SensitiveDataPolicy
	SensitiveDataPolicyChoice isApiProtection_SensitiveDataPolicyChoice `protobuf_oneof:"sensitive_data_policy_choice"`
}

func (m *ApiProtection) Reset()      { *m = ApiProtection{} }
func (*ApiProtection) ProtoMessage() {}
func (*ApiProtection) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{8}
}
func (m *ApiProtection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiProtection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiProtection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiProtection.Merge(m, src)
}
func (m *ApiProtection) XXX_Size() int {
	return m.Size()
}
func (m *ApiProtection) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiProtection.DiscardUnknown(m)
}

var xxx_messageInfo_ApiProtection proto.InternalMessageInfo

type isApiProtection_ApiDefinitionChoice interface {
	isApiProtection_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isApiProtection_ApiDiscoveryChoice interface {
	isApiProtection_ApiDiscoveryChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isApiProtection_SensitiveDataPolicyChoice interface {
	isApiProtection_SensitiveDataPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ApiProtection_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,2,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type ApiProtection_ApiSpecification struct {
	ApiSpecification *common_waf.APISpecificationSettings `protobuf:"bytes,3,opt,name=api_specification,json=apiSpecification,proto3,oneof" json:"api_specification,omitempty"`
}
type ApiProtection_ApiSpecificationOnCacheMiss struct {
	ApiSpecificationOnCacheMiss *common_waf.APISpecificationSettings `protobuf:"bytes,9,opt,name=api_specification_on_cache_miss,json=apiSpecificationOnCacheMiss,proto3,oneof" json:"api_specification_on_cache_miss,omitempty"`
}
type ApiProtection_EnableApiDiscovery struct {
	EnableApiDiscovery *common_waf.ApiDiscoverySetting `protobuf:"bytes,7,opt,name=enable_api_discovery,json=enableApiDiscovery,proto3,oneof" json:"enable_api_discovery,omitempty"`
}
type ApiProtection_DisableApiDiscovery struct {
	DisableApiDiscovery *schema.Empty `protobuf:"bytes,8,opt,name=disable_api_discovery,json=disableApiDiscovery,proto3,oneof" json:"disable_api_discovery,omitempty"`
}
type ApiProtection_ApiDiscoveryOnCacheMiss struct {
	ApiDiscoveryOnCacheMiss *common_waf.ApiDiscoverySetting `protobuf:"bytes,10,opt,name=api_discovery_on_cache_miss,json=apiDiscoveryOnCacheMiss,proto3,oneof" json:"api_discovery_on_cache_miss,omitempty"`
}
type ApiProtection_DefaultSensitiveDataPolicy struct {
	DefaultSensitiveDataPolicy *schema.Empty `protobuf:"bytes,12,opt,name=default_sensitive_data_policy,json=defaultSensitiveDataPolicy,proto3,oneof" json:"default_sensitive_data_policy,omitempty"`
}
type ApiProtection_SensitiveDataPolicy struct {
	SensitiveDataPolicy *common_security.SensitiveDataPolicySettings `protobuf:"bytes,13,opt,name=sensitive_data_policy,json=sensitiveDataPolicy,proto3,oneof" json:"sensitive_data_policy,omitempty"`
}

func (*ApiProtection_DisableApiDefinition) isApiProtection_ApiDefinitionChoice()             {}
func (*ApiProtection_ApiSpecification) isApiProtection_ApiDefinitionChoice()                 {}
func (*ApiProtection_ApiSpecificationOnCacheMiss) isApiProtection_ApiDefinitionChoice()      {}
func (*ApiProtection_EnableApiDiscovery) isApiProtection_ApiDiscoveryChoice()                {}
func (*ApiProtection_DisableApiDiscovery) isApiProtection_ApiDiscoveryChoice()               {}
func (*ApiProtection_ApiDiscoveryOnCacheMiss) isApiProtection_ApiDiscoveryChoice()           {}
func (*ApiProtection_DefaultSensitiveDataPolicy) isApiProtection_SensitiveDataPolicyChoice() {}
func (*ApiProtection_SensitiveDataPolicy) isApiProtection_SensitiveDataPolicyChoice()        {}

func (m *ApiProtection) GetApiDefinitionChoice() isApiProtection_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *ApiProtection) GetApiDiscoveryChoice() isApiProtection_ApiDiscoveryChoice {
	if m != nil {
		return m.ApiDiscoveryChoice
	}
	return nil
}
func (m *ApiProtection) GetSensitiveDataPolicyChoice() isApiProtection_SensitiveDataPolicyChoice {
	if m != nil {
		return m.SensitiveDataPolicyChoice
	}
	return nil
}

func (m *ApiProtection) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*ApiProtection_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *ApiProtection) GetApiSpecification() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*ApiProtection_ApiSpecification); ok {
		return x.ApiSpecification
	}
	return nil
}

// Deprecated: Do not use.
func (m *ApiProtection) GetApiSpecificationOnCacheMiss() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*ApiProtection_ApiSpecificationOnCacheMiss); ok {
		return x.ApiSpecificationOnCacheMiss
	}
	return nil
}

func (m *ApiProtection) GetApiProtectionRules() *common_waf.APIProtectionRules {
	if m != nil {
		return m.ApiProtectionRules
	}
	return nil
}

func (m *ApiProtection) GetJwtValidation() *common_waf.JWTValidation {
	if m != nil {
		return m.JwtValidation
	}
	return nil
}

func (m *ApiProtection) GetEnableApiDiscovery() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*ApiProtection_EnableApiDiscovery); ok {
		return x.EnableApiDiscovery
	}
	return nil
}

func (m *ApiProtection) GetDisableApiDiscovery() *schema.Empty {
	if x, ok := m.GetApiDiscoveryChoice().(*ApiProtection_DisableApiDiscovery); ok {
		return x.DisableApiDiscovery
	}
	return nil
}

// Deprecated: Do not use.
func (m *ApiProtection) GetApiDiscoveryOnCacheMiss() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*ApiProtection_ApiDiscoveryOnCacheMiss); ok {
		return x.ApiDiscoveryOnCacheMiss
	}
	return nil
}

func (m *ApiProtection) GetDefaultSensitiveDataPolicy() *schema.Empty {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*ApiProtection_DefaultSensitiveDataPolicy); ok {
		return x.DefaultSensitiveDataPolicy
	}
	return nil
}

func (m *ApiProtection) GetSensitiveDataPolicy() *common_security.SensitiveDataPolicySettings {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*ApiProtection_SensitiveDataPolicy); ok {
		return x.SensitiveDataPolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ApiProtection) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ApiProtection_DisableApiDefinition)(nil),
		(*ApiProtection_ApiSpecification)(nil),
		(*ApiProtection_ApiSpecificationOnCacheMiss)(nil),
		(*ApiProtection_EnableApiDiscovery)(nil),
		(*ApiProtection_DisableApiDiscovery)(nil),
		(*ApiProtection_ApiDiscoveryOnCacheMiss)(nil),
		(*ApiProtection_DefaultSensitiveDataPolicy)(nil),
		(*ApiProtection_SensitiveDataPolicy)(nil),
	}
}

// Security options
//
// x-displayName: "Security Options"
// This defines various options related to security
type SecurityOptionsType struct {
	// ip_filtering
	//
	// x-displayName: "Client IP filtering Options"
	// IP filtering options
	IpFiltering *IpFilteringOptions `protobuf:"bytes,5,opt,name=ip_filtering,json=ipFiltering,proto3" json:"ip_filtering,omitempty"`
	// geo_filtering
	//
	// x-displayName: "Client Geo filtering Options"
	// Geo filtering options
	GeoFiltering *GeoFilteringOptions `protobuf:"bytes,6,opt,name=geo_filtering,json=geoFiltering,proto3" json:"geo_filtering,omitempty"`
	// authentication
	//
	// x-displayName: "Authentication Options"
	// Authentication Options
	AuthOptions *AuthenticationOptions `protobuf:"bytes,9,opt,name=auth_options,json=authOptions,proto3" json:"auth_options,omitempty"`
	// Web Application Firewall
	//
	// x-displayName: "Web Application Firewall"
	// Web Application Firewall
	WebAppFirewall *WebApplicationFirewall `protobuf:"bytes,10,opt,name=web_app_firewall,json=webAppFirewall,proto3" json:"web_app_firewall,omitempty"`
	// API Protection
	//
	// x-displayName: "API Protection"
	ApiProtection *ApiProtection `protobuf:"bytes,12,opt,name=api_protection,json=apiProtection,proto3" json:"api_protection,omitempty"`
	// Common Security Controls
	//
	// x-displayName: "Common Security Controls"
	CommonSecurityControls *CommonSecurityControls `protobuf:"bytes,11,opt,name=common_security_controls,json=commonSecurityControls,proto3" json:"common_security_controls,omitempty"`
}

func (m *SecurityOptionsType) Reset()      { *m = SecurityOptionsType{} }
func (*SecurityOptionsType) ProtoMessage() {}
func (*SecurityOptionsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{9}
}
func (m *SecurityOptionsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityOptionsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecurityOptionsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityOptionsType.Merge(m, src)
}
func (m *SecurityOptionsType) XXX_Size() int {
	return m.Size()
}
func (m *SecurityOptionsType) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityOptionsType.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityOptionsType proto.InternalMessageInfo

func (m *SecurityOptionsType) GetIpFiltering() *IpFilteringOptions {
	if m != nil {
		return m.IpFiltering
	}
	return nil
}

func (m *SecurityOptionsType) GetGeoFiltering() *GeoFilteringOptions {
	if m != nil {
		return m.GeoFiltering
	}
	return nil
}

func (m *SecurityOptionsType) GetAuthOptions() *AuthenticationOptions {
	if m != nil {
		return m.AuthOptions
	}
	return nil
}

func (m *SecurityOptionsType) GetWebAppFirewall() *WebApplicationFirewall {
	if m != nil {
		return m.WebAppFirewall
	}
	return nil
}

func (m *SecurityOptionsType) GetApiProtection() *ApiProtection {
	if m != nil {
		return m.ApiProtection
	}
	return nil
}

func (m *SecurityOptionsType) GetCommonSecurityControls() *CommonSecurityControls {
	if m != nil {
		return m.CommonSecurityControls
	}
	return nil
}

// Logging options
//
// x-displayName: "Logging Options"
// This defines various options related to logging
type LoggingOptionsType struct {
	// client_log_options
	//
	// x-displayName: "Client Request Headers to Log"
	// Client request headers to log
	ClientLogOptions *LogHeaderOptions `protobuf:"bytes,7,opt,name=client_log_options,json=clientLogOptions,proto3" json:"client_log_options,omitempty"`
	// origin_log_options
	//
	// x-displayName: "Origin Response Headers to Log"
	// Origin response headers to log
	OriginLogOptions *LogHeaderOptions `protobuf:"bytes,8,opt,name=origin_log_options,json=originLogOptions,proto3" json:"origin_log_options,omitempty"`
}

func (m *LoggingOptionsType) Reset()      { *m = LoggingOptionsType{} }
func (*LoggingOptionsType) ProtoMessage() {}
func (*LoggingOptionsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{10}
}
func (m *LoggingOptionsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoggingOptionsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LoggingOptionsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoggingOptionsType.Merge(m, src)
}
func (m *LoggingOptionsType) XXX_Size() int {
	return m.Size()
}
func (m *LoggingOptionsType) XXX_DiscardUnknown() {
	xxx_messageInfo_LoggingOptionsType.DiscardUnknown(m)
}

var xxx_messageInfo_LoggingOptionsType proto.InternalMessageInfo

func (m *LoggingOptionsType) GetClientLogOptions() *LogHeaderOptions {
	if m != nil {
		return m.ClientLogOptions
	}
	return nil
}

func (m *LoggingOptionsType) GetOriginLogOptions() *LogHeaderOptions {
	if m != nil {
		return m.OriginLogOptions
	}
	return nil
}

// Cache Rule Expression List
//
// x-displayName: "Cache Rule Expression List"
// CDN Cache Rule Expressions.
type CDNCacheRuleExpressionList struct {
	// Expression Name
	//
	// x-displayName: "Expression Name"
	// x-required
	// x-example: "Expression-1"
	// Name of the Expressions items that are ANDed
	ExpressionName string `protobuf:"bytes,1,opt,name=expression_name,json=expressionName,proto3" json:"expression_name,omitempty"`
	// Terms
	//
	// x-displayName: "Terms"
	// x-required
	// The Cache Rule Expression Terms that are ANDed
	CacheRuleExpression []*CDNCacheRuleExpression `protobuf:"bytes,2,rep,name=cache_rule_expression,json=cacheRuleExpression,proto3" json:"cache_rule_expression,omitempty"`
}

func (m *CDNCacheRuleExpressionList) Reset()      { *m = CDNCacheRuleExpressionList{} }
func (*CDNCacheRuleExpressionList) ProtoMessage() {}
func (*CDNCacheRuleExpressionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{11}
}
func (m *CDNCacheRuleExpressionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNCacheRuleExpressionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CDNCacheRuleExpressionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNCacheRuleExpressionList.Merge(m, src)
}
func (m *CDNCacheRuleExpressionList) XXX_Size() int {
	return m.Size()
}
func (m *CDNCacheRuleExpressionList) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNCacheRuleExpressionList.DiscardUnknown(m)
}

var xxx_messageInfo_CDNCacheRuleExpressionList proto.InternalMessageInfo

func (m *CDNCacheRuleExpressionList) GetExpressionName() string {
	if m != nil {
		return m.ExpressionName
	}
	return ""
}

func (m *CDNCacheRuleExpressionList) GetCacheRuleExpression() []*CDNCacheRuleExpression {
	if m != nil {
		return m.CacheRuleExpression
	}
	return nil
}

// Cache Operator
//
// x-displayName: "Operator"
type CacheOperator struct {
	// Cache Operator
	//
	// x-displayName: "Operator"
	//
	// Types that are valid to be assigned to CacheOperator:
	//	*CacheOperator_Equals
	//	*CacheOperator_DoesNotEqual
	//	*CacheOperator_Contains
	//	*CacheOperator_DoesNotContain
	//	*CacheOperator_Startswith
	//	*CacheOperator_DoesNotStartWith
	//	*CacheOperator_Endswith
	//	*CacheOperator_DoesNotEndWith
	//	*CacheOperator_MatchRegex
	CacheOperator isCacheOperator_CacheOperator `protobuf_oneof:"cache_operator"`
}

func (m *CacheOperator) Reset()      { *m = CacheOperator{} }
func (*CacheOperator) ProtoMessage() {}
func (*CacheOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{12}
}
func (m *CacheOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CacheOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheOperator.Merge(m, src)
}
func (m *CacheOperator) XXX_Size() int {
	return m.Size()
}
func (m *CacheOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheOperator.DiscardUnknown(m)
}

var xxx_messageInfo_CacheOperator proto.InternalMessageInfo

type isCacheOperator_CacheOperator interface {
	isCacheOperator_CacheOperator()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CacheOperator_Equals struct {
	Equals string `protobuf:"bytes,2,opt,name=Equals,proto3,oneof" json:"Equals,omitempty"`
}
type CacheOperator_DoesNotEqual struct {
	DoesNotEqual string `protobuf:"bytes,3,opt,name=DoesNotEqual,proto3,oneof" json:"DoesNotEqual,omitempty"`
}
type CacheOperator_Contains struct {
	Contains string `protobuf:"bytes,4,opt,name=Contains,proto3,oneof" json:"Contains,omitempty"`
}
type CacheOperator_DoesNotContain struct {
	DoesNotContain string `protobuf:"bytes,5,opt,name=DoesNotContain,proto3,oneof" json:"DoesNotContain,omitempty"`
}
type CacheOperator_Startswith struct {
	Startswith string `protobuf:"bytes,6,opt,name=Startswith,proto3,oneof" json:"Startswith,omitempty"`
}
type CacheOperator_DoesNotStartWith struct {
	DoesNotStartWith string `protobuf:"bytes,7,opt,name=DoesNotStartWith,proto3,oneof" json:"DoesNotStartWith,omitempty"`
}
type CacheOperator_Endswith struct {
	Endswith string `protobuf:"bytes,8,opt,name=Endswith,proto3,oneof" json:"Endswith,omitempty"`
}
type CacheOperator_DoesNotEndWith struct {
	DoesNotEndWith string `protobuf:"bytes,9,opt,name=DoesNotEndWith,proto3,oneof" json:"DoesNotEndWith,omitempty"`
}
type CacheOperator_MatchRegex struct {
	MatchRegex string `protobuf:"bytes,10,opt,name=MatchRegex,proto3,oneof" json:"MatchRegex,omitempty"`
}

func (*CacheOperator_Equals) isCacheOperator_CacheOperator()           {}
func (*CacheOperator_DoesNotEqual) isCacheOperator_CacheOperator()     {}
func (*CacheOperator_Contains) isCacheOperator_CacheOperator()         {}
func (*CacheOperator_DoesNotContain) isCacheOperator_CacheOperator()   {}
func (*CacheOperator_Startswith) isCacheOperator_CacheOperator()       {}
func (*CacheOperator_DoesNotStartWith) isCacheOperator_CacheOperator() {}
func (*CacheOperator_Endswith) isCacheOperator_CacheOperator()         {}
func (*CacheOperator_DoesNotEndWith) isCacheOperator_CacheOperator()   {}
func (*CacheOperator_MatchRegex) isCacheOperator_CacheOperator()       {}

func (m *CacheOperator) GetCacheOperator() isCacheOperator_CacheOperator {
	if m != nil {
		return m.CacheOperator
	}
	return nil
}

func (m *CacheOperator) GetEquals() string {
	if x, ok := m.GetCacheOperator().(*CacheOperator_Equals); ok {
		return x.Equals
	}
	return ""
}

func (m *CacheOperator) GetDoesNotEqual() string {
	if x, ok := m.GetCacheOperator().(*CacheOperator_DoesNotEqual); ok {
		return x.DoesNotEqual
	}
	return ""
}

func (m *CacheOperator) GetContains() string {
	if x, ok := m.GetCacheOperator().(*CacheOperator_Contains); ok {
		return x.Contains
	}
	return ""
}

func (m *CacheOperator) GetDoesNotContain() string {
	if x, ok := m.GetCacheOperator().(*CacheOperator_DoesNotContain); ok {
		return x.DoesNotContain
	}
	return ""
}

func (m *CacheOperator) GetStartswith() string {
	if x, ok := m.GetCacheOperator().(*CacheOperator_Startswith); ok {
		return x.Startswith
	}
	return ""
}

func (m *CacheOperator) GetDoesNotStartWith() string {
	if x, ok := m.GetCacheOperator().(*CacheOperator_DoesNotStartWith); ok {
		return x.DoesNotStartWith
	}
	return ""
}

func (m *CacheOperator) GetEndswith() string {
	if x, ok := m.GetCacheOperator().(*CacheOperator_Endswith); ok {
		return x.Endswith
	}
	return ""
}

func (m *CacheOperator) GetDoesNotEndWith() string {
	if x, ok := m.GetCacheOperator().(*CacheOperator_DoesNotEndWith); ok {
		return x.DoesNotEndWith
	}
	return ""
}

func (m *CacheOperator) GetMatchRegex() string {
	if x, ok := m.GetCacheOperator().(*CacheOperator_MatchRegex); ok {
		return x.MatchRegex
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CacheOperator) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CacheOperator_Equals)(nil),
		(*CacheOperator_DoesNotEqual)(nil),
		(*CacheOperator_Contains)(nil),
		(*CacheOperator_DoesNotContain)(nil),
		(*CacheOperator_Startswith)(nil),
		(*CacheOperator_DoesNotStartWith)(nil),
		(*CacheOperator_Endswith)(nil),
		(*CacheOperator_DoesNotEndWith)(nil),
		(*CacheOperator_MatchRegex)(nil),
	}
}

// CacheHeaderMatcherType
//
// x-displayName: "Cache Header to Match"
// Header match is done using the name of the header and its value.
// The value match is done using one of the following
//
//	regex match on value
//	exact match of value
//	presence of header
//
// Header Match can also be inverse of above, which be used to check
//
//	missing header or
//	non-matching value
type CacheHeaderMatcherType struct {
	// Name
	//
	// x-displayName: "Name"
	// x-example: "Content-Type"
	// Name of the header
	Name HeaderOptions `protobuf:"varint,1,opt,name=name,proto3,enum=ves.io.schema.views.cdn_loadbalancer.HeaderOptions" json:"name,omitempty"`
	// cache_operator
	//
	// x-displayName: "Operator"
	// Available operators
	Operator *CacheOperator `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *CacheHeaderMatcherType) Reset()      { *m = CacheHeaderMatcherType{} }
func (*CacheHeaderMatcherType) ProtoMessage() {}
func (*CacheHeaderMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{13}
}
func (m *CacheHeaderMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheHeaderMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CacheHeaderMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheHeaderMatcherType.Merge(m, src)
}
func (m *CacheHeaderMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *CacheHeaderMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheHeaderMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_CacheHeaderMatcherType proto.InternalMessageInfo

func (m *CacheHeaderMatcherType) GetName() HeaderOptions {
	if m != nil {
		return m.Name
	}
	return proxy_host
}

func (m *CacheHeaderMatcherType) GetOperator() *CacheOperator {
	if m != nil {
		return m.Operator
	}
	return nil
}

// PathMatcherType
//
// x-displayName: "Path to Match"
// Path match of the URI
type CDNPathMatcherType struct {
	// cache_operator
	//
	// x-displayName: "Path Match"
	// A specification of path match
	Operator *CacheOperator `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *CDNPathMatcherType) Reset()      { *m = CDNPathMatcherType{} }
func (*CDNPathMatcherType) ProtoMessage() {}
func (*CDNPathMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{14}
}
func (m *CDNPathMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNPathMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CDNPathMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNPathMatcherType.Merge(m, src)
}
func (m *CDNPathMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *CDNPathMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNPathMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_CDNPathMatcherType proto.InternalMessageInfo

func (m *CDNPathMatcherType) GetOperator() *CacheOperator {
	if m != nil {
		return m.Operator
	}
	return nil
}

// CacheCookieMatcherType
//
// x-displayName: "Cookie Matcher"
// A cookie matcher specifies the name of a single cookie and the criteria to match it. The input has a list of values for each
// cookie in the request.
// A cookie matcher can check for one of the following:
// * Presence or absence of the cookie
// * At least one of the values for the cookie in the request satisfies the MatcherType item
type CacheCookieMatcherType struct {
	// name
	//
	// x-displayName: "Cookie Name"
	// x-example: "Session"
	// x-required
	// A case-sensitive cookie name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// cache_operator
	//
	// x-displayName: "Operator"
	//
	Operator *CacheOperator `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *CacheCookieMatcherType) Reset()      { *m = CacheCookieMatcherType{} }
func (*CacheCookieMatcherType) ProtoMessage() {}
func (*CacheCookieMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{15}
}
func (m *CacheCookieMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheCookieMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CacheCookieMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheCookieMatcherType.Merge(m, src)
}
func (m *CacheCookieMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *CacheCookieMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheCookieMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_CacheCookieMatcherType proto.InternalMessageInfo

func (m *CacheCookieMatcherType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CacheCookieMatcherType) GetOperator() *CacheOperator {
	if m != nil {
		return m.Operator
	}
	return nil
}

// CacheQueryParameterMatcherType
//
// x-displayName: "Query Parameter to Match"
// Query parameter match can be either regex match on value or exact match of value for given key
// An example for HTTP request with query parameter https://gitlab.com/dashboard/issues?assignee_username=xxyyxx
type CacheQueryParameterMatcherType struct {
	// key
	//
	// x-displayName: "Key"
	// x-required
	// x-example: "assignee_username"
	// Query parameter key
	// In the above example, assignee_username is the key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// cache_operator
	//
	// x-displayName: "Operator"
	//
	Operator *CacheOperator `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *CacheQueryParameterMatcherType) Reset()      { *m = CacheQueryParameterMatcherType{} }
func (*CacheQueryParameterMatcherType) ProtoMessage() {}
func (*CacheQueryParameterMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{16}
}
func (m *CacheQueryParameterMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheQueryParameterMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CacheQueryParameterMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheQueryParameterMatcherType.Merge(m, src)
}
func (m *CacheQueryParameterMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *CacheQueryParameterMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheQueryParameterMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_CacheQueryParameterMatcherType proto.InternalMessageInfo

func (m *CacheQueryParameterMatcherType) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CacheQueryParameterMatcherType) GetOperator() *CacheOperator {
	if m != nil {
		return m.Operator
	}
	return nil
}

// CDNCacheRuleExpression
//
// x-displayName: "Cache Rule Expression"
// Select one of the field options
type CDNCacheRuleExpression struct {
	// path_match
	//
	// x-displayName: "Path Match"
	// URI path of route
	PathMatch *CDNPathMatcherType `protobuf:"bytes,1,opt,name=path_match,json=pathMatch,proto3" json:"path_match,omitempty"`
	// query_params
	//
	// x-displayName: "Query Parameters"
	// List of (key, value) query parameters
	QueryParameters []*CacheQueryParameterMatcherType `protobuf:"bytes,6,rep,name=query_parameters,json=queryParameters,proto3" json:"query_parameters,omitempty"`
	// Cache Headers
	//
	// x-displayName: "Cache Headers"
	// Configure cache rule headers to match the criteria
	CacheHeaders []*CacheHeaderMatcherType `protobuf:"bytes,5,rep,name=cache_headers,json=cacheHeaders,proto3" json:"cache_headers,omitempty"`
	// cookie matchers
	//
	// x-displayName: "Cookie Matchers"
	// A list of predicates for all cookies that need to be matched. The criteria for matching each cookie is described in individual instances
	// of CookieMatcherType. The actual cookie values are extracted from the request API as a list of strings for each cookie name.
	// Note that all specified cookie matcher predicates must evaluate to true.
	CookieMatcher []*CacheCookieMatcherType `protobuf:"bytes,7,rep,name=cookie_matcher,json=cookieMatcher,proto3" json:"cookie_matcher,omitempty"`
}

func (m *CDNCacheRuleExpression) Reset()      { *m = CDNCacheRuleExpression{} }
func (*CDNCacheRuleExpression) ProtoMessage() {}
func (*CDNCacheRuleExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{17}
}
func (m *CDNCacheRuleExpression) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNCacheRuleExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CDNCacheRuleExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNCacheRuleExpression.Merge(m, src)
}
func (m *CDNCacheRuleExpression) XXX_Size() int {
	return m.Size()
}
func (m *CDNCacheRuleExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNCacheRuleExpression.DiscardUnknown(m)
}

var xxx_messageInfo_CDNCacheRuleExpression proto.InternalMessageInfo

func (m *CDNCacheRuleExpression) GetPathMatch() *CDNPathMatcherType {
	if m != nil {
		return m.PathMatch
	}
	return nil
}

func (m *CDNCacheRuleExpression) GetQueryParameters() []*CacheQueryParameterMatcherType {
	if m != nil {
		return m.QueryParameters
	}
	return nil
}

func (m *CDNCacheRuleExpression) GetCacheHeaders() []*CacheHeaderMatcherType {
	if m != nil {
		return m.CacheHeaders
	}
	return nil
}

func (m *CDNCacheRuleExpression) GetCookieMatcher() []*CacheCookieMatcherType {
	if m != nil {
		return m.CookieMatcher
	}
	return nil
}

// Cache TTL Enable Props
//
// x-displayName: "Cache TTL Enable Props"
// Cache TTL Enable Values
type CacheTTLEnableProps struct {
	// Cache TTL Key
	//
	// x-displayName: "Cache TTL"
	// x-required
	// x-example: "5m, 60s, 120s, 3h, 1d, 15d"
	// Cache TTL value is used to cache the resource/content for the specified amount of time
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	CacheTtl string `protobuf:"bytes,1,opt,name=cache_ttl,json=cacheTtl,proto3" json:"cache_ttl,omitempty"`
	// Set Cookie
	//
	// x-displayName: "Ignore-Response-Cookie"
	// By default, response will not be cached if set-cookie header is present. This option will override the behavior and cache response even with set-cookie header present.
	IgnoreResponseCookie bool `protobuf:"varint,5,opt,name=ignore_response_cookie,json=ignoreResponseCookie,proto3" json:"ignore_response_cookie,omitempty"`
	// Cache Override
	//
	// x-displayName: "Cache Override"
	// Honour Cache Override
	CacheOverride bool `protobuf:"varint,4,opt,name=cache_override,json=cacheOverride,proto3" json:"cache_override,omitempty"`
}

func (m *CacheTTLEnableProps) Reset()      { *m = CacheTTLEnableProps{} }
func (*CacheTTLEnableProps) ProtoMessage() {}
func (*CacheTTLEnableProps) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{18}
}
func (m *CacheTTLEnableProps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheTTLEnableProps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CacheTTLEnableProps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheTTLEnableProps.Merge(m, src)
}
func (m *CacheTTLEnableProps) XXX_Size() int {
	return m.Size()
}
func (m *CacheTTLEnableProps) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheTTLEnableProps.DiscardUnknown(m)
}

var xxx_messageInfo_CacheTTLEnableProps proto.InternalMessageInfo

func (m *CacheTTLEnableProps) GetCacheTtl() string {
	if m != nil {
		return m.CacheTtl
	}
	return ""
}

func (m *CacheTTLEnableProps) GetIgnoreResponseCookie() bool {
	if m != nil {
		return m.IgnoreResponseCookie
	}
	return false
}

func (m *CacheTTLEnableProps) GetCacheOverride() bool {
	if m != nil {
		return m.CacheOverride
	}
	return false
}

// Cache Action Options
//
// x-displayName: "Cache Action Options"
// List of options for Cache Action
type CacheEligibleOptions struct {
	// Eligible For Cache
	//
	// x-displayName: "Eligible For Cache"
	// x-required
	// Compose Eligible For Cache
	//
	// Types that are valid to be assigned to EligibleForCache:
	//	*CacheEligibleOptions_SchemeHostnameUri
	//	*CacheEligibleOptions_SchemeHostnameRequestUri
	//	*CacheEligibleOptions_HostnameUri
	//	*CacheEligibleOptions_SchemeHostnameUriQuery
	//	*CacheEligibleOptions_SchemeProxyHostUri
	//	*CacheEligibleOptions_SchemeProxyHostRequestUri
	EligibleForCache isCacheEligibleOptions_EligibleForCache `protobuf_oneof:"eligible_for_cache"`
}

func (m *CacheEligibleOptions) Reset()      { *m = CacheEligibleOptions{} }
func (*CacheEligibleOptions) ProtoMessage() {}
func (*CacheEligibleOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{19}
}
func (m *CacheEligibleOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheEligibleOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CacheEligibleOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheEligibleOptions.Merge(m, src)
}
func (m *CacheEligibleOptions) XXX_Size() int {
	return m.Size()
}
func (m *CacheEligibleOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheEligibleOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CacheEligibleOptions proto.InternalMessageInfo

type isCacheEligibleOptions_EligibleForCache interface {
	isCacheEligibleOptions_EligibleForCache()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CacheEligibleOptions_SchemeHostnameUri struct {
	SchemeHostnameUri *CacheTTLEnableProps `protobuf:"bytes,2,opt,name=scheme_hostname_uri,json=schemeHostnameUri,proto3,oneof" json:"scheme_hostname_uri,omitempty"`
}
type CacheEligibleOptions_SchemeHostnameRequestUri struct {
	SchemeHostnameRequestUri *CacheTTLEnableProps `protobuf:"bytes,3,opt,name=scheme_hostname_request_uri,json=schemeHostnameRequestUri,proto3,oneof" json:"scheme_hostname_request_uri,omitempty"`
}
type CacheEligibleOptions_HostnameUri struct {
	HostnameUri *CacheTTLEnableProps `protobuf:"bytes,4,opt,name=hostname_uri,json=hostnameUri,proto3,oneof" json:"hostname_uri,omitempty"`
}
type CacheEligibleOptions_SchemeHostnameUriQuery struct {
	SchemeHostnameUriQuery *CacheTTLEnableProps `protobuf:"bytes,5,opt,name=scheme_hostname_uri_query,json=schemeHostnameUriQuery,proto3,oneof" json:"scheme_hostname_uri_query,omitempty"`
}
type CacheEligibleOptions_SchemeProxyHostUri struct {
	SchemeProxyHostUri *CacheTTLEnableProps `protobuf:"bytes,6,opt,name=scheme_proxy_host_uri,json=schemeProxyHostUri,proto3,oneof" json:"scheme_proxy_host_uri,omitempty"`
}
type CacheEligibleOptions_SchemeProxyHostRequestUri struct {
	SchemeProxyHostRequestUri *CacheTTLEnableProps `protobuf:"bytes,7,opt,name=scheme_proxy_host_request_uri,json=schemeProxyHostRequestUri,proto3,oneof" json:"scheme_proxy_host_request_uri,omitempty"`
}

func (*CacheEligibleOptions_SchemeHostnameUri) isCacheEligibleOptions_EligibleForCache()         {}
func (*CacheEligibleOptions_SchemeHostnameRequestUri) isCacheEligibleOptions_EligibleForCache()  {}
func (*CacheEligibleOptions_HostnameUri) isCacheEligibleOptions_EligibleForCache()               {}
func (*CacheEligibleOptions_SchemeHostnameUriQuery) isCacheEligibleOptions_EligibleForCache()    {}
func (*CacheEligibleOptions_SchemeProxyHostUri) isCacheEligibleOptions_EligibleForCache()        {}
func (*CacheEligibleOptions_SchemeProxyHostRequestUri) isCacheEligibleOptions_EligibleForCache() {}

func (m *CacheEligibleOptions) GetEligibleForCache() isCacheEligibleOptions_EligibleForCache {
	if m != nil {
		return m.EligibleForCache
	}
	return nil
}

// Deprecated: Do not use.
func (m *CacheEligibleOptions) GetSchemeHostnameUri() *CacheTTLEnableProps {
	if x, ok := m.GetEligibleForCache().(*CacheEligibleOptions_SchemeHostnameUri); ok {
		return x.SchemeHostnameUri
	}
	return nil
}

// Deprecated: Do not use.
func (m *CacheEligibleOptions) GetSchemeHostnameRequestUri() *CacheTTLEnableProps {
	if x, ok := m.GetEligibleForCache().(*CacheEligibleOptions_SchemeHostnameRequestUri); ok {
		return x.SchemeHostnameRequestUri
	}
	return nil
}

// Deprecated: Do not use.
func (m *CacheEligibleOptions) GetHostnameUri() *CacheTTLEnableProps {
	if x, ok := m.GetEligibleForCache().(*CacheEligibleOptions_HostnameUri); ok {
		return x.HostnameUri
	}
	return nil
}

// Deprecated: Do not use.
func (m *CacheEligibleOptions) GetSchemeHostnameUriQuery() *CacheTTLEnableProps {
	if x, ok := m.GetEligibleForCache().(*CacheEligibleOptions_SchemeHostnameUriQuery); ok {
		return x.SchemeHostnameUriQuery
	}
	return nil
}

func (m *CacheEligibleOptions) GetSchemeProxyHostUri() *CacheTTLEnableProps {
	if x, ok := m.GetEligibleForCache().(*CacheEligibleOptions_SchemeProxyHostUri); ok {
		return x.SchemeProxyHostUri
	}
	return nil
}

func (m *CacheEligibleOptions) GetSchemeProxyHostRequestUri() *CacheTTLEnableProps {
	if x, ok := m.GetEligibleForCache().(*CacheEligibleOptions_SchemeProxyHostRequestUri); ok {
		return x.SchemeProxyHostRequestUri
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CacheEligibleOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CacheEligibleOptions_SchemeHostnameUri)(nil),
		(*CacheEligibleOptions_SchemeHostnameRequestUri)(nil),
		(*CacheEligibleOptions_HostnameUri)(nil),
		(*CacheEligibleOptions_SchemeHostnameUriQuery)(nil),
		(*CacheEligibleOptions_SchemeProxyHostUri)(nil),
		(*CacheEligibleOptions_SchemeProxyHostRequestUri)(nil),
	}
}

// Cache Rule
//
// x-displayName: "Cache Rule"
// This defines a CDN Cache Rule
type CDNCacheRule struct {
	// Rule Name
	//
	// x-displayName: "Rule Name"
	// x-required
	// x-example: "Rule-1"
	// Name of the Cache Rule
	RuleName string `protobuf:"bytes,1,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	// Expression List
	//
	// x-displayName: "Expressions"
	// x-required
	// Expressions are evaluated in the order in which they are specified. The evaluation stops when the first rule match occurs..
	RuleExpressionList []*CDNCacheRuleExpressionList `protobuf:"bytes,2,rep,name=rule_expression_list,json=ruleExpressionList,proto3" json:"rule_expression_list,omitempty"`
	// Cache Actions
	//
	// x-displayName: "Cache Actions"
	// x-required
	// Configure the Cache Actions for a rule.
	//
	// Types that are valid to be assigned to CacheActions:
	//	*CDNCacheRule_CacheBypass
	//	*CDNCacheRule_EligibleForCache
	CacheActions isCDNCacheRule_CacheActions `protobuf_oneof:"cache_actions"`
}

func (m *CDNCacheRule) Reset()      { *m = CDNCacheRule{} }
func (*CDNCacheRule) ProtoMessage() {}
func (*CDNCacheRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{20}
}
func (m *CDNCacheRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNCacheRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CDNCacheRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNCacheRule.Merge(m, src)
}
func (m *CDNCacheRule) XXX_Size() int {
	return m.Size()
}
func (m *CDNCacheRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNCacheRule.DiscardUnknown(m)
}

var xxx_messageInfo_CDNCacheRule proto.InternalMessageInfo

type isCDNCacheRule_CacheActions interface {
	isCDNCacheRule_CacheActions()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CDNCacheRule_CacheBypass struct {
	CacheBypass *schema.Empty `protobuf:"bytes,4,opt,name=cache_bypass,json=cacheBypass,proto3,oneof" json:"cache_bypass,omitempty"`
}
type CDNCacheRule_EligibleForCache struct {
	EligibleForCache *CacheEligibleOptions `protobuf:"bytes,5,opt,name=eligible_for_cache,json=eligibleForCache,proto3,oneof" json:"eligible_for_cache,omitempty"`
}

func (*CDNCacheRule_CacheBypass) isCDNCacheRule_CacheActions()      {}
func (*CDNCacheRule_EligibleForCache) isCDNCacheRule_CacheActions() {}

func (m *CDNCacheRule) GetCacheActions() isCDNCacheRule_CacheActions {
	if m != nil {
		return m.CacheActions
	}
	return nil
}

func (m *CDNCacheRule) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *CDNCacheRule) GetRuleExpressionList() []*CDNCacheRuleExpressionList {
	if m != nil {
		return m.RuleExpressionList
	}
	return nil
}

func (m *CDNCacheRule) GetCacheBypass() *schema.Empty {
	if x, ok := m.GetCacheActions().(*CDNCacheRule_CacheBypass); ok {
		return x.CacheBypass
	}
	return nil
}

func (m *CDNCacheRule) GetEligibleForCache() *CacheEligibleOptions {
	if x, ok := m.GetCacheActions().(*CDNCacheRule_EligibleForCache); ok {
		return x.EligibleForCache
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CDNCacheRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CDNCacheRule_CacheBypass)(nil),
		(*CDNCacheRule_EligibleForCache)(nil),
	}
}

// Default Cache TTL Props
//
// x-displayName: "Default Cache TTL Props"
// Default Cache TTL Enable Values
type DefaultCacheTTLProps struct {
	// Cache TTL Key
	//
	// x-displayName: "Cache TTL"
	// x-required
	// x-example: "5m, 60s, 120s, 3h, 1d, 15d"
	// Cache TTL value is used to cache the resource/content for the specified amount of time
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	CacheTtl string `protobuf:"bytes,1,opt,name=cache_ttl,json=cacheTtl,proto3" json:"cache_ttl,omitempty"`
}

func (m *DefaultCacheTTLProps) Reset()      { *m = DefaultCacheTTLProps{} }
func (*DefaultCacheTTLProps) ProtoMessage() {}
func (*DefaultCacheTTLProps) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{21}
}
func (m *DefaultCacheTTLProps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultCacheTTLProps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultCacheTTLProps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultCacheTTLProps.Merge(m, src)
}
func (m *DefaultCacheTTLProps) XXX_Size() int {
	return m.Size()
}
func (m *DefaultCacheTTLProps) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultCacheTTLProps.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultCacheTTLProps proto.InternalMessageInfo

func (m *DefaultCacheTTLProps) GetCacheTtl() string {
	if m != nil {
		return m.CacheTtl
	}
	return ""
}

// Default Cache Action
//
// x-displayName: "Default Cache Action"
// This defines a Default Cache Action
type DefaultCacheAction struct {
	// Cache Actions
	//
	// x-displayName: "Cache Actions"
	// Configure the Cache Actions for a rule.
	//
	// Types that are valid to be assigned to CacheActions:
	//	*DefaultCacheAction_EligibleForCache
	//	*DefaultCacheAction_CacheTtlDefault
	//	*DefaultCacheAction_CacheTtlOverride
	//	*DefaultCacheAction_CacheDisabled
	CacheActions isDefaultCacheAction_CacheActions `protobuf_oneof:"cache_actions"`
}

func (m *DefaultCacheAction) Reset()      { *m = DefaultCacheAction{} }
func (*DefaultCacheAction) ProtoMessage() {}
func (*DefaultCacheAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{22}
}
func (m *DefaultCacheAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultCacheAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultCacheAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultCacheAction.Merge(m, src)
}
func (m *DefaultCacheAction) XXX_Size() int {
	return m.Size()
}
func (m *DefaultCacheAction) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultCacheAction.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultCacheAction proto.InternalMessageInfo

type isDefaultCacheAction_CacheActions interface {
	isDefaultCacheAction_CacheActions()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DefaultCacheAction_EligibleForCache struct {
	EligibleForCache *DefaultCacheTTLProps `protobuf:"bytes,2,opt,name=eligible_for_cache,json=eligibleForCache,proto3,oneof" json:"eligible_for_cache,omitempty"`
}
type DefaultCacheAction_CacheTtlDefault struct {
	CacheTtlDefault string `protobuf:"bytes,3,opt,name=cache_ttl_default,json=cacheTtlDefault,proto3,oneof" json:"cache_ttl_default,omitempty"`
}
type DefaultCacheAction_CacheTtlOverride struct {
	CacheTtlOverride string `protobuf:"bytes,4,opt,name=cache_ttl_override,json=cacheTtlOverride,proto3,oneof" json:"cache_ttl_override,omitempty"`
}
type DefaultCacheAction_CacheDisabled struct {
	CacheDisabled *schema.Empty `protobuf:"bytes,5,opt,name=cache_disabled,json=cacheDisabled,proto3,oneof" json:"cache_disabled,omitempty"`
}

func (*DefaultCacheAction_EligibleForCache) isDefaultCacheAction_CacheActions() {}
func (*DefaultCacheAction_CacheTtlDefault) isDefaultCacheAction_CacheActions()  {}
func (*DefaultCacheAction_CacheTtlOverride) isDefaultCacheAction_CacheActions() {}
func (*DefaultCacheAction_CacheDisabled) isDefaultCacheAction_CacheActions()    {}

func (m *DefaultCacheAction) GetCacheActions() isDefaultCacheAction_CacheActions {
	if m != nil {
		return m.CacheActions
	}
	return nil
}

// Deprecated: Do not use.
func (m *DefaultCacheAction) GetEligibleForCache() *DefaultCacheTTLProps {
	if x, ok := m.GetCacheActions().(*DefaultCacheAction_EligibleForCache); ok {
		return x.EligibleForCache
	}
	return nil
}

func (m *DefaultCacheAction) GetCacheTtlDefault() string {
	if x, ok := m.GetCacheActions().(*DefaultCacheAction_CacheTtlDefault); ok {
		return x.CacheTtlDefault
	}
	return ""
}

func (m *DefaultCacheAction) GetCacheTtlOverride() string {
	if x, ok := m.GetCacheActions().(*DefaultCacheAction_CacheTtlOverride); ok {
		return x.CacheTtlOverride
	}
	return ""
}

func (m *DefaultCacheAction) GetCacheDisabled() *schema.Empty {
	if x, ok := m.GetCacheActions().(*DefaultCacheAction_CacheDisabled); ok {
		return x.CacheDisabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DefaultCacheAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DefaultCacheAction_EligibleForCache)(nil),
		(*DefaultCacheAction_CacheTtlDefault)(nil),
		(*DefaultCacheAction_CacheTtlOverride)(nil),
		(*DefaultCacheAction_CacheDisabled)(nil),
	}
}

// Cache options
//
// x-displayName: "Cache Options"
// This defines the options related to content caching
type CacheOptions struct {
	// Default Cache Action
	//
	// x-displayName: "Default Cache Action"
	// x-required
	// Default value for Cache action.
	DefaultCacheAction *DefaultCacheAction `protobuf:"bytes,1,opt,name=default_cache_action,json=defaultCacheAction,proto3" json:"default_cache_action,omitempty"`
	// List of Cache rules(These rules are ORed)
	//
	// x-displayName: "Cache Rules"
	// Rules are evaluated in the order in which they are specified. The evaluation stops when the first rule match occurs.
	CacheRules []*CDNCacheRule `protobuf:"bytes,2,rep,name=cache_rules,json=cacheRules,proto3" json:"cache_rules,omitempty"`
}

func (m *CacheOptions) Reset()      { *m = CacheOptions{} }
func (*CacheOptions) ProtoMessage() {}
func (*CacheOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{23}
}
func (m *CacheOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CacheOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheOptions.Merge(m, src)
}
func (m *CacheOptions) XXX_Size() int {
	return m.Size()
}
func (m *CacheOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CacheOptions proto.InternalMessageInfo

func (m *CacheOptions) GetDefaultCacheAction() *DefaultCacheAction {
	if m != nil {
		return m.DefaultCacheAction
	}
	return nil
}

func (m *CacheOptions) GetCacheRules() []*CDNCacheRule {
	if m != nil {
		return m.CacheRules
	}
	return nil
}

// Cache options
//
// x-displayName: "Cache Options"
// This defines the options related to content caching
type CacheTTLOptionsType struct {
	// Cache Options
	//
	// x-displayName: "Cache Settings"
	// Configure the Cache Settings
	//
	// Types that are valid to be assigned to TtlOptions:
	//	*CacheTTLOptionsType_CacheTtlDefault
	//	*CacheTTLOptionsType_CacheTtlOverride
	//	*CacheTTLOptionsType_CacheDisabled
	TtlOptions isCacheTTLOptionsType_TtlOptions `protobuf_oneof:"ttl_options"`
}

func (m *CacheTTLOptionsType) Reset()      { *m = CacheTTLOptionsType{} }
func (*CacheTTLOptionsType) ProtoMessage() {}
func (*CacheTTLOptionsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{24}
}
func (m *CacheTTLOptionsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheTTLOptionsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CacheTTLOptionsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheTTLOptionsType.Merge(m, src)
}
func (m *CacheTTLOptionsType) XXX_Size() int {
	return m.Size()
}
func (m *CacheTTLOptionsType) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheTTLOptionsType.DiscardUnknown(m)
}

var xxx_messageInfo_CacheTTLOptionsType proto.InternalMessageInfo

type isCacheTTLOptionsType_TtlOptions interface {
	isCacheTTLOptionsType_TtlOptions()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CacheTTLOptionsType_CacheTtlDefault struct {
	CacheTtlDefault string `protobuf:"bytes,2,opt,name=cache_ttl_default,json=cacheTtlDefault,proto3,oneof" json:"cache_ttl_default,omitempty"`
}
type CacheTTLOptionsType_CacheTtlOverride struct {
	CacheTtlOverride string `protobuf:"bytes,3,opt,name=cache_ttl_override,json=cacheTtlOverride,proto3,oneof" json:"cache_ttl_override,omitempty"`
}
type CacheTTLOptionsType_CacheDisabled struct {
	CacheDisabled *schema.Empty `protobuf:"bytes,4,opt,name=cache_disabled,json=cacheDisabled,proto3,oneof" json:"cache_disabled,omitempty"`
}

func (*CacheTTLOptionsType_CacheTtlDefault) isCacheTTLOptionsType_TtlOptions()  {}
func (*CacheTTLOptionsType_CacheTtlOverride) isCacheTTLOptionsType_TtlOptions() {}
func (*CacheTTLOptionsType_CacheDisabled) isCacheTTLOptionsType_TtlOptions()    {}

func (m *CacheTTLOptionsType) GetTtlOptions() isCacheTTLOptionsType_TtlOptions {
	if m != nil {
		return m.TtlOptions
	}
	return nil
}

func (m *CacheTTLOptionsType) GetCacheTtlDefault() string {
	if x, ok := m.GetTtlOptions().(*CacheTTLOptionsType_CacheTtlDefault); ok {
		return x.CacheTtlDefault
	}
	return ""
}

func (m *CacheTTLOptionsType) GetCacheTtlOverride() string {
	if x, ok := m.GetTtlOptions().(*CacheTTLOptionsType_CacheTtlOverride); ok {
		return x.CacheTtlOverride
	}
	return ""
}

func (m *CacheTTLOptionsType) GetCacheDisabled() *schema.Empty {
	if x, ok := m.GetTtlOptions().(*CacheTTLOptionsType_CacheDisabled); ok {
		return x.CacheDisabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CacheTTLOptionsType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CacheTTLOptionsType_CacheTtlDefault)(nil),
		(*CacheTTLOptionsType_CacheTtlOverride)(nil),
		(*CacheTTLOptionsType_CacheDisabled)(nil),
	}
}

// Advanced options
//
// x-displayName: "Advanced Options"
// This defines various options to define a route
type AdvancedOptionsType struct {
	// Header Control
	//
	// x-displayName: "Header Control"
	// Request/Response header related options
	HeaderOptions *HeaderControlType `protobuf:"bytes,16,opt,name=header_options,json=headerOptions,proto3" json:"header_options,omitempty"`
	// Security Options
	//
	// x-displayName: "Security Options"
	// Security related options
	SecurityOptions *SecurityOptionsType `protobuf:"bytes,17,opt,name=security_options,json=securityOptions,proto3" json:"security_options,omitempty"`
	// Logging Options
	//
	// x-displayName: "Logging Options"
	// Logging related options
	LoggingOptions *LoggingOptionsType `protobuf:"bytes,18,opt,name=logging_options,json=loggingOptions,proto3" json:"logging_options,omitempty"`
	// Cache Options
	//
	// x-displayName: "Cache Options"
	// Cache Options
	CacheTtlOptions *CacheTTLOptionsType `protobuf:"bytes,19,opt,name=cache_ttl_options,json=cacheTtlOptions,proto3" json:"cache_ttl_options,omitempty"` // Deprecated: Do not use.
	// Cache Options
	//
	// x-displayName: "Cache Options"
	// Cache Options
	CacheOptions *CacheOptions `protobuf:"bytes,20,opt,name=cache_options,json=cacheOptions,proto3" json:"cache_options,omitempty"`
}

func (m *AdvancedOptionsType) Reset()      { *m = AdvancedOptionsType{} }
func (*AdvancedOptionsType) ProtoMessage() {}
func (*AdvancedOptionsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{25}
}
func (m *AdvancedOptionsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvancedOptionsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdvancedOptionsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvancedOptionsType.Merge(m, src)
}
func (m *AdvancedOptionsType) XXX_Size() int {
	return m.Size()
}
func (m *AdvancedOptionsType) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvancedOptionsType.DiscardUnknown(m)
}

var xxx_messageInfo_AdvancedOptionsType proto.InternalMessageInfo

func (m *AdvancedOptionsType) GetHeaderOptions() *HeaderControlType {
	if m != nil {
		return m.HeaderOptions
	}
	return nil
}

func (m *AdvancedOptionsType) GetSecurityOptions() *SecurityOptionsType {
	if m != nil {
		return m.SecurityOptions
	}
	return nil
}

func (m *AdvancedOptionsType) GetLoggingOptions() *LoggingOptionsType {
	if m != nil {
		return m.LoggingOptions
	}
	return nil
}

// Deprecated: Do not use.
func (m *AdvancedOptionsType) GetCacheTtlOptions() *CacheTTLOptionsType {
	if m != nil {
		return m.CacheTtlOptions
	}
	return nil
}

func (m *AdvancedOptionsType) GetCacheOptions() *CacheOptions {
	if m != nil {
		return m.CacheOptions
	}
	return nil
}

// CDNTLSConfig
//
// x-displayName: "TLS Config"
// This defines various options to configure TLS configuration parameters
type CDNTLSConfig struct {
	// TLS Security Level
	//
	// x-displayName: "TLS Security Level"
	// x-required
	// The security level for TLS handshake between client/server and the platform.
	//
	// Types that are valid to be assigned to Choice:
	//	*CDNTLSConfig_Tls_12Plus
	//	*CDNTLSConfig_Tls_11Plus
	Choice isCDNTLSConfig_Choice `protobuf_oneof:"choice"`
}

func (m *CDNTLSConfig) Reset()      { *m = CDNTLSConfig{} }
func (*CDNTLSConfig) ProtoMessage() {}
func (*CDNTLSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{26}
}
func (m *CDNTLSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNTLSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CDNTLSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNTLSConfig.Merge(m, src)
}
func (m *CDNTLSConfig) XXX_Size() int {
	return m.Size()
}
func (m *CDNTLSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNTLSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CDNTLSConfig proto.InternalMessageInfo

type isCDNTLSConfig_Choice interface {
	isCDNTLSConfig_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CDNTLSConfig_Tls_12Plus struct {
	Tls_12Plus *schema.Empty `protobuf:"bytes,1,opt,name=tls_12_plus,json=tls12Plus,proto3,oneof" json:"tls_12_plus,omitempty"`
}
type CDNTLSConfig_Tls_11Plus struct {
	Tls_11Plus *schema.Empty `protobuf:"bytes,2,opt,name=tls_11_plus,json=tls11Plus,proto3,oneof" json:"tls_11_plus,omitempty"`
}

func (*CDNTLSConfig_Tls_12Plus) isCDNTLSConfig_Choice() {}
func (*CDNTLSConfig_Tls_11Plus) isCDNTLSConfig_Choice() {}

func (m *CDNTLSConfig) GetChoice() isCDNTLSConfig_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *CDNTLSConfig) GetTls_12Plus() *schema.Empty {
	if x, ok := m.GetChoice().(*CDNTLSConfig_Tls_12Plus); ok {
		return x.Tls_12Plus
	}
	return nil
}

func (m *CDNTLSConfig) GetTls_11Plus() *schema.Empty {
	if x, ok := m.GetChoice().(*CDNTLSConfig_Tls_11Plus); ok {
		return x.Tls_11Plus
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CDNTLSConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CDNTLSConfig_Tls_12Plus)(nil),
		(*CDNTLSConfig_Tls_11Plus)(nil),
	}
}

// HTTPS with Automatic Certificate
//
// x-displayName: "HTTPS with Automatic Certificate"
// Choice for selecting HTTPS CDN distribution with bring your own certificates
type CDNHTTPSAutoCertsType struct {
	// HTTP Redirect
	//
	// x-displayName: "HTTP Redirect to HTTPS"
	// Redirect HTTP traffic to HTTPS
	HttpRedirect bool `protobuf:"varint,1,opt,name=http_redirect,json=httpRedirect,proto3" json:"http_redirect,omitempty"`
	// Add HSTS
	//
	// x-displayName: "Add HSTS Header"
	// Add HTTP Strict-Transport-Security response header
	AddHsts bool `protobuf:"varint,2,opt,name=add_hsts,json=addHsts,proto3" json:"add_hsts,omitempty"`
	// TLS Config
	//
	// x-displayName: "TLS"
	// TLS Configuration Parameters
	TlsConfig *CDNTLSConfig `protobuf:"bytes,3,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
}

func (m *CDNHTTPSAutoCertsType) Reset()      { *m = CDNHTTPSAutoCertsType{} }
func (*CDNHTTPSAutoCertsType) ProtoMessage() {}
func (*CDNHTTPSAutoCertsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{27}
}
func (m *CDNHTTPSAutoCertsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNHTTPSAutoCertsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CDNHTTPSAutoCertsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNHTTPSAutoCertsType.Merge(m, src)
}
func (m *CDNHTTPSAutoCertsType) XXX_Size() int {
	return m.Size()
}
func (m *CDNHTTPSAutoCertsType) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNHTTPSAutoCertsType.DiscardUnknown(m)
}

var xxx_messageInfo_CDNHTTPSAutoCertsType proto.InternalMessageInfo

func (m *CDNHTTPSAutoCertsType) GetHttpRedirect() bool {
	if m != nil {
		return m.HttpRedirect
	}
	return false
}

func (m *CDNHTTPSAutoCertsType) GetAddHsts() bool {
	if m != nil {
		return m.AddHsts
	}
	return false
}

func (m *CDNHTTPSAutoCertsType) GetTlsConfig() *CDNTLSConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

// CDNDownstreamTlsParamsType
//
// x-displayName: "TLS Parameters"
// TLS parameters for CDN distribution
type CDNDownstreamTlsParamsType struct {
	// TLS Config
	//
	// x-displayName: "TLS"
	// TLS Configuration Parameters
	TlsConfig *CDNTLSConfig `protobuf:"bytes,1,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	// tls_certificates
	//
	// x-displayName: "TLS Certificates"
	// x-required
	// Users can add one or more certificates that share the same set of domains.
	// for example, domain.com and *.domain.com - but use different signature algorithms
	TlsCertificates []*schema.TlsCertificateType `protobuf:"bytes,2,rep,name=tls_certificates,json=tlsCertificates,proto3" json:"tls_certificates,omitempty"`
}

func (m *CDNDownstreamTlsParamsType) Reset()      { *m = CDNDownstreamTlsParamsType{} }
func (*CDNDownstreamTlsParamsType) ProtoMessage() {}
func (*CDNDownstreamTlsParamsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{28}
}
func (m *CDNDownstreamTlsParamsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNDownstreamTlsParamsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CDNDownstreamTlsParamsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNDownstreamTlsParamsType.Merge(m, src)
}
func (m *CDNDownstreamTlsParamsType) XXX_Size() int {
	return m.Size()
}
func (m *CDNDownstreamTlsParamsType) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNDownstreamTlsParamsType.DiscardUnknown(m)
}

var xxx_messageInfo_CDNDownstreamTlsParamsType proto.InternalMessageInfo

func (m *CDNDownstreamTlsParamsType) GetTlsConfig() *CDNTLSConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *CDNDownstreamTlsParamsType) GetTlsCertificates() []*schema.TlsCertificateType {
	if m != nil {
		return m.TlsCertificates
	}
	return nil
}

// BYOC for the CDN distribution
//
// x-displayName: "BYOC HTTPS Choice"
// Choice for selecting CDN Distribution with bring your own certificates
type CDNHTTPSCustomCertsType struct {
	// HTTP Redirect
	//
	// x-displayName: "HTTP Redirect to HTTPS"
	// Redirect HTTP traffic to HTTPS
	HttpRedirect bool `protobuf:"varint,1,opt,name=http_redirect,json=httpRedirect,proto3" json:"http_redirect,omitempty"`
	// Add HSTS
	//
	// x-displayName: "Add HSTS Header"
	// Add HTTP Strict-Transport-Security response header
	AddHsts bool `protobuf:"varint,2,opt,name=add_hsts,json=addHsts,proto3" json:"add_hsts,omitempty"`
	// TLS parameters.
	//
	// x-displayName: "TLS Parameters"
	// TLS parameters for the downstream connections.
	TlsParameters *CDNDownstreamTlsParamsType `protobuf:"bytes,3,opt,name=tls_parameters,json=tlsParameters,proto3" json:"tls_parameters,omitempty"`
}

func (m *CDNHTTPSCustomCertsType) Reset()      { *m = CDNHTTPSCustomCertsType{} }
func (*CDNHTTPSCustomCertsType) ProtoMessage() {}
func (*CDNHTTPSCustomCertsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{29}
}
func (m *CDNHTTPSCustomCertsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNHTTPSCustomCertsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CDNHTTPSCustomCertsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNHTTPSCustomCertsType.Merge(m, src)
}
func (m *CDNHTTPSCustomCertsType) XXX_Size() int {
	return m.Size()
}
func (m *CDNHTTPSCustomCertsType) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNHTTPSCustomCertsType.DiscardUnknown(m)
}

var xxx_messageInfo_CDNHTTPSCustomCertsType proto.InternalMessageInfo

func (m *CDNHTTPSCustomCertsType) GetHttpRedirect() bool {
	if m != nil {
		return m.HttpRedirect
	}
	return false
}

func (m *CDNHTTPSCustomCertsType) GetAddHsts() bool {
	if m != nil {
		return m.AddHsts
	}
	return false
}

func (m *CDNHTTPSCustomCertsType) GetTlsParameters() *CDNDownstreamTlsParamsType {
	if m != nil {
		return m.TlsParameters
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the CDN loadbalancer specification
type GlobalSpecType struct {
	// Domains
	//
	// x-displayName: "Domains"
	// x-example: "www.foo.com"
	// x-required
	// A list of fully qualified domain names.
	// The CDN Distribution will be setup for these FQDN name(s).
	// [This can be a domain or a sub-domain]
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Proxy choice
	//
	// x-displayName: "Select Type of CDN Distribution"
	// x-required
	// CDN Distribution type can be "http" or "https"
	//
	// Types that are valid to be assigned to LoadbalancerType:
	//	*GlobalSpecType_Http
	//	*GlobalSpecType_HttpsAutoCert
	//	*GlobalSpecType_Https
	LoadbalancerType isGlobalSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Add Site information
	//
	// x-displayName: "Add Location"
	// x-example: "true"
	// x-example: true
	// Appends header x-volterra-location = <re-site-name> in responses.
	AddLocation bool `protobuf:"varint,11,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"` // Deprecated: Do not use.
	// More Options
	//
	// x-displayName: "More Options"
	// More options like header manipulation, compression etc.
	MoreOption *AdvancedOptionsType `protobuf:"bytes,13,opt,name=more_option,json=moreOption,proto3" json:"more_option,omitempty"` // Deprecated: Do not use.
	// Origin Pool
	//
	// x-displayName: "CDN Origin Pool"
	// x-required
	OriginPool *CdnOriginPoolType `protobuf:"bytes,16,opt,name=origin_pool,json=originPool,proto3" json:"origin_pool,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// host name
	//
	// x-displayName: "Host Name"
	// x-example: "ves-io-cf8684b9-a18f-4843-a24f-1f9ee8ea2776.ac.vh.ves.io"
	// Internally generated host name to be used for the virtual host
	HostName string `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// DNS information
	//
	// x-displayName: "DNS Information"
	// DNS information for this virtual host
	DnsInfo []*virtual_host_dns_info.DnsInfo `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
	// Virtual Host state
	//
	// x-displayName: "Virtual Host State"
	// State of the virtual host
	State virtual_host.VirtualHostState `protobuf:"varint,1003,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	// Auto Cert State
	//
	// x-displayName: "Auto Cert State"
	// State of auto certificate generation.
	AutoCertState virtual_host.CertificationState `protobuf:"varint,1004,opt,name=auto_cert_state,json=autoCertState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"auto_cert_state,omitempty"` // Deprecated: Do not use.
	// Auto Cert Information
	//
	// x-displayName: "Auto Cert Information"
	// Auto certificate related information
	AutoCertInfo *virtual_host.AutoCertInfoType `protobuf:"bytes,1010,opt,name=auto_cert_info,json=autoCertInfo,proto3" json:"auto_cert_info,omitempty"`
	// Service Domains
	//
	// x-displayName: "Service Domains"
	// CNAME provided from service per domain
	ServiceDomains []*virtual_host.ServiceDomain `protobuf:"bytes,1011,rep,name=service_domains,json=serviceDomains,proto3" json:"service_domains,omitempty"`
	// Cert State
	//
	// x-displayName: "Cert State"
	// State of Custom certificate or Auto certificate generation.
	CertState virtual_host.CertificationState `protobuf:"varint,1012,opt,name=cert_state,json=certState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"cert_state,omitempty"`
	// Other Settings
	//
	// x-displayName: "Other Settings"
	OtherSettings *OtherSettings `protobuf:"bytes,26,opt,name=other_settings,json=otherSettings,proto3" json:"other_settings,omitempty"`
	// Default Cache Action
	//
	// x-displayName: "Default Cache Action"
	// Default value for Cache action.
	DefaultCacheAction *DefaultCacheAction `protobuf:"bytes,28,opt,name=default_cache_action,json=defaultCacheAction,proto3" json:"default_cache_action,omitempty"`
	// List of Cache rules(These rules are ORed)
	//
	// x-displayName: "Cache Rules"
	// Rules are evaluated in the order in which they are specified. The evaluation stops when the first rule match occurs.
	CacheRules []*CDNCacheRule `protobuf:"bytes,29,rep,name=cache_rules,json=cacheRules,proto3" json:"cache_rules,omitempty"`
	// Enable the WAF (Web Application Firewall) functionality for VirtualHost
	//
	// x-displayName: "Web Application Firewall (WAF)"
	// x-required
	//
	// F5 Distributed Cloud WAF is a next-gen web application firewall that provides signature-based
	// and behavior-based threat detection to protect applications wherever they are deployed.
	// WAF can be configured in Monitoring (log threats) or Blocking (log and block threats) mode.
	//
	// Types that are valid to be assigned to WafChoice:
	//	*GlobalSpecType_DisableWaf
	//	*GlobalSpecType_AppFirewall
	//	*GlobalSpecType_AppFirewallOnCacheMiss
	WafChoice isGlobalSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	// WAF Exclusion Rules
	//
	// x-displayName: "WAF Exclusion Rules"
	// Define the Signature IDs, Violations, Attack Types and Bot Names that should be excluded from WAF processing on specific match criteria.
	// The match criteria include domain, path and method.
	// WAF Exclusion rules is a sequential engine where rules are evaluated one after the other.
	// It's important to define the correct order for WAF exclusion rules to get the intended result, rules are evaluated from top to bottom in the list.
	// For each request, its characteristics are evaluated based on the match criteria in each WAF exclusion rule, starting from the top.
	// When an exclusion rule is matched, then this exclusion rule takes effect and no more rules are evaluated.
	WafExclusionRules []*policy.SimpleWafExclusionRule `protobuf:"bytes,34,rep,name=waf_exclusion_rules,json=wafExclusionRules,proto3" json:"waf_exclusion_rules,omitempty"`
	// Data Guard Rules
	//
	// x-displayName: "Data Guard Rules"
	// Data Guard prevents responses from exposing sensitive information by masking the data.
	// The system masks credit card numbers and social security numbers leaked from the application from within the http response with a string of asterisks (*).
	// Note: App Firewall should be enabled, to use Data Guard feature.
	DataGuardRules []*policy.SimpleDataGuardRule `protobuf:"bytes,35,rep,name=data_guard_rules,json=dataGuardRules,proto3" json:"data_guard_rules,omitempty"`
	// csrf_policy
	//
	// x-displayName: "Cross-Site Request Forgery Protection"
	// Cross-Site Request Forgery (CSRF) is an attack that occurs when a malicious third-party website exploits a vulnerability thats allows them to submit an undesired request on user's behalf.
	//
	// The policy checks where a request is coming from to determine if the request's origin is the same as its destination. The policy relies on two pieces of information used in determining if a request originated from the same host.
	//
	// 1. The origin that caused the user agent to issue the request (source origin).
	// 2. The origin that the request is going to (target origin).
	// When the policy evaluating a request, it ensures both pieces of information are present and compare their values. If the source origin is missing or origins do not match the request is rejected. The exception to this being the source-origin has been added to the policy as valid.
	// Because CSRF attacks specifically target state-changing requests, the policy only acts on the HTTP requests that have state-changing method (PUT,POST, etc.).
	CsrfPolicy *schema.CsrfPolicy `protobuf:"bytes,36,opt,name=csrf_policy,json=csrfPolicy,proto3" json:"csrf_policy,omitempty"`
	// GraphQL Inspection
	//
	// x-displayName: "GraphQL Inspection"
	// GraphQL is a query language and server-side runtime for APIs which provides a complete and understandable
	// description of the data in API. GraphQL gives clients the power to ask for exactly what they need, makes it
	// easier to evolve APIs over time, and enables powerful developer tools. Policy configuration to analyze GraphQL
	// queries and prevent GraphQL tailored attacks.
	GraphqlRules []*policy.GraphQLRule `protobuf:"bytes,37,rep,name=graphql_rules,json=graphqlRules,proto3" json:"graphql_rules,omitempty"`
	// Cookie protection
	//
	// x-displayName: "Cookie Protection"
	// Allows setting attributes (SameSite, Secure, and HttpOnly) on cookies in responses.
	// Cookie Tampering Protection prevents attackers from modifying the value of session cookies.
	// For Cookie Tampering Protection, enabling a web app firewall (WAF) is a prerequisite.
	// The configured mode of WAF (monitoring or blocking) will be enforced on the request when cookie tampering is identified.
	// Note: We recommend enabling Secure and HttpOnly attributes along with cookie tampering protection.
	ProtectedCookies []*schema.CookieManipulationOptionType `protobuf:"bytes,38,rep,name=protected_cookies,json=protectedCookies,proto3" json:"protected_cookies,omitempty"`
	// Enable Bot Defense functionality for VirtualHost
	//
	// x-displayName: "Bot Defense"
	// x-required
	//
	// Bot Defense protects your applications from automated attacks by leveraging JavaScript and API calls to collect telemetry and mitigate sophisticated attacks within the context of F5's Distributed Cloud global network. When automation is detected, and mitigation action is set to Block or Redirect, the client will receive the configured mitigation response. If action is set to Flag, automated requests are monitored by Bot Defense, but are allowed to proceed to the customer's server.
	//
	// Types that are valid to be assigned to BotDefenseChoice:
	//	*GlobalSpecType_DisableBotDefense
	//	*GlobalSpecType_BotDefense
	//	*GlobalSpecType_BotDefenseAdvanced
	BotDefenseChoice isGlobalSpecType_BotDefenseChoice `protobuf_oneof:"bot_defense_choice"`
	// API Definition choice
	//
	// x-required
	// x-displayName: "API Definition"
	// API Definition based on the imported swagger specs
	//
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//	*GlobalSpecType_DisableApiDefinition
	//	*GlobalSpecType_ApiSpecification
	//	*GlobalSpecType_ApiSpecificationOnCacheMiss
	ApiDefinitionChoice isGlobalSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	// API Protection rules
	//
	// x-displayName: "API Protection Rules"
	// API Protection Rules can be defined in two categories.
	// The first category includes fine-grained rules, per API path and methods.
	// The second category includes rules per API groups or Server URLs.
	// If request matches any rule in the first category, second category rules are not evaluated.
	// Rules can also include additional conditions, for example specific clients can access certain API endpoint or API group.
	ApiProtectionRules *common_waf.APIProtectionRules `protobuf:"bytes,47,opt,name=api_protection_rules,json=apiProtectionRules,proto3" json:"api_protection_rules,omitempty"`
	// JWT Validation
	//
	// x-displayName: "JWT Validation"
	// JWT Validation stops JWT replay attacks and JWT tampering by cryptographically verifying incoming
	// JWTs before they are passed to origin APIs. JWT Validation will also stop requests with expired
	// tokens or tokens that are not yet valid.
	JwtValidation *common_waf.JWTValidation `protobuf:"bytes,48,opt,name=jwt_validation,json=jwtValidation,proto3" json:"jwt_validation,omitempty"`
	// API Discovery Choice
	//
	// x-required
	// x-displayName: "API Discovery"
	// When enabled, sampled traffic passing through this load balancer is analyzed and
	// APIs exposed by the application are identified.
	// An API is identified by its canonical (collapsed) URL path and the method used to call it.
	// Once all APIs are identified, for each API, the system learns its possible schema.
	// The learnt schema for all APIs is used to automatically generate a swagger definition file for the entire API set exposed by this load balancer.
	// The feature can be configured also via external app_type and labeling this HTTP Load Balancer.
	// In this case external app_type configuration overrides internally disabled feature.
	// Enabling the feature internally is allowed only when no labeling to external app_type.
	//
	// Types that are valid to be assigned to ApiDiscoveryChoice:
	//	*GlobalSpecType_EnableApiDiscovery
	//	*GlobalSpecType_DisableApiDiscovery
	//	*GlobalSpecType_ApiDiscoveryOnCacheMiss
	ApiDiscoveryChoice isGlobalSpecType_ApiDiscoveryChoice `protobuf_oneof:"api_discovery_choice"`
	// Sensitive Data Discovery
	//
	// x-displayName: "Sensitive Data Discovery"
	// x-required
	// Sensitive data discovery provide the ability to configure the policy for sensitive data detection
	//
	// Types that are valid to be assigned to SensitiveDataPolicyChoice:
	//	*GlobalSpecType_DefaultSensitiveDataPolicy
	//	*GlobalSpecType_SensitiveDataPolicy
	SensitiveDataPolicyChoice isGlobalSpecType_SensitiveDataPolicyChoice `protobuf_oneof:"sensitive_data_policy_choice"`
	// L7 DDoS Auto Mitigation Action
	//
	// x-displayName: "L7 DDoS Auto Mitigation"
	// x-required
	// Select an action for auto mitigation
	//
	// Types that are valid to be assigned to L7DdosAutoMitigationAction:
	//	*GlobalSpecType_L7DdosActionDefault
	//	*GlobalSpecType_L7DdosActionBlock
	//	*GlobalSpecType_L7DdosActionJsChallenge
	//	*GlobalSpecType_L7DdosActionNone
	L7DdosAutoMitigationAction isGlobalSpecType_L7DdosAutoMitigationAction `protobuf_oneof:"l7_ddos_auto_mitigation_action"`
	// DDoS Mitigation Rules
	//
	// x-displayName: "DDoS Mitigation Rules"
	// Define manual mitigation rules to block L7 DDoS attacks.
	DdosMitigationRules []*common_security.DDoSMitigationRule `protobuf:"bytes,61,rep,name=ddos_mitigation_rules,json=ddosMitigationRules,proto3" json:"ddos_mitigation_rules,omitempty"`
	// Slow DDoS Mitigation
	//
	// x-displayName: "Slow DDoS Mitigation"
	// x-required
	//
	// "Slow and low" attacks tie up server resources, leaving none available for servicing
	// requests from actual users.Configuration that protects origins from slow and low attacks.
	// In the case HTTP loadbalancer, only default settings can be applied. For HTTPS load balancer,
	// the request timeout and request headers timeout value can be customized.
	//
	// Types that are valid to be assigned to SlowDdosMitigationChoice:
	//	*GlobalSpecType_SystemDefaultTimeouts
	//	*GlobalSpecType_SlowDdosMitigation
	SlowDdosMitigationChoice isGlobalSpecType_SlowDdosMitigationChoice `protobuf_oneof:"slow_ddos_mitigation_choice"`
	// Enable Client-Side Defense functionality for VirtualHost
	//
	// x-displayName: "Client-Side Defense"
	// x-required
	//
	// Client-Side Defense (CSD) provides a multi-phase protection system that protects web applications against Magecart, formjacking, digital
	// skimming, PII harvesting and other malicious JavaScript attacks.
	// Enabling CSD is a 2-part process
	// (1) Service Enablement
	// (2) JavaScript injection using a Load Balancer.
	// By clicking enable in this section and going through the configuration, you can complete part 2 of the process.
	// To enable the service itself, please visit the Service's Landing page using the search on the left navigation pane.
	//
	// Types that are valid to be assigned to ClientSideDefenseChoice:
	//	*GlobalSpecType_DisableClientSideDefense
	//	*GlobalSpecType_ClientSideDefense
	ClientSideDefenseChoice isGlobalSpecType_ClientSideDefenseChoice `protobuf_oneof:"client_side_defense_choice"`
	// Service Policies
	//
	// x-displayName: "Service Policies"
	// x-required
	// Service policies provide the ability to configure security controls such as IP Allow/Deny lists, Geo IP filtering and Custom rules
	//
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*GlobalSpecType_ServicePoliciesFromNamespace
	//	*GlobalSpecType_NoServicePolicies
	//	*GlobalSpecType_ActiveServicePolicies
	ServicePolicyChoice isGlobalSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// ip_reputation
	//
	// x-displayName: "IP Reputation"
	// IP reputation service analyzes IP threats and publishes a dynamic data set of millions of high-risk IP addresses, to protect users from inbound traffic from malicious IPs.
	// IP threat categories include Spam Sources, Windows Exploits, Web Attacks, BotNets, Scanners, Denial of Service, Reputation, Phishing, Proxy, Mobile Threats, and TOR Proxy.
	//
	// Types that are valid to be assigned to IpReputationChoice:
	//	*GlobalSpecType_DisableIpReputation
	//	*GlobalSpecType_EnableIpReputation
	//	*GlobalSpecType_IpReputationOnCacheMiss
	IpReputationChoice isGlobalSpecType_IpReputationChoice `protobuf_oneof:"ip_reputation_choice"`
	// threat_mesh
	//
	// x-required
	// x-displayName: "Threat Mesh"
	// Threat Mesh provides F5 Distributed Cloud customers with an additional layer of protection against web application attacks.
	// Threat mesh leverages cross-customer correlation i.e correlation of client attacks across different customers
	// to identify malicious intent of the client. Whenever a client is flagged due to malicious intent by our WAAP decision engines,
	// that client will be added to the ThreatDB and all customers get this intelligence and are protected in real-time.
	//
	// Types that are valid to be assigned to ThreatMeshChoice:
	//	*GlobalSpecType_DisableThreatMesh
	//	*GlobalSpecType_EnableThreatMesh
	ThreatMeshChoice isGlobalSpecType_ThreatMeshChoice `protobuf_oneof:"threat_mesh_choice"`
	// User Identifier
	//
	// x-displayName: "User Identifier"
	// x-required
	// Select user identifier for rate limiting and malicious user mitigation.
	//
	// Types that are valid to be assigned to UserIdChoice:
	//	*GlobalSpecType_UserIdClientIp
	//	*GlobalSpecType_UserIdentification
	UserIdChoice isGlobalSpecType_UserIdChoice `protobuf_oneof:"user_id_choice"`
	// Malicious User Detection Choice
	//
	// x-required
	// x-displayName: "Malicious User Detection"
	// Malicious User Detection performs user behavior analysis and assigns a risk score and threat level of low, medium
	// or high based on the suspicious activity of the user.
	// The risk score of the user is decayed over time, if no further suspicious activity is noticed.
	// The feature can be configured also via external app_type and labeling this HTTP Load Balancer.
	// In this case external app_type configuration overrides internally disabled feature.
	// Enabling the feature internally is allowed only when no labeling to external app_type.
	//
	// Types that are valid to be assigned to MaliciousUserDetectionChoice:
	//	*GlobalSpecType_DisableMaliciousUserDetection
	//	*GlobalSpecType_EnableMaliciousUserDetection
	//	*GlobalSpecType_MaliciousUserDetectionOnCacheMiss
	MaliciousUserDetectionChoice isGlobalSpecType_MaliciousUserDetectionChoice `protobuf_oneof:"malicious_user_detection_choice"`
	// Challenge Type
	//
	// x-displayName: "Malicious User Mitigation And Challenges"
	// x-required
	// Malicious User Mitigation is an adaptive response and risk-based challenge capability.
	// Enabling this feature would automatically serve different challenges such as JavaScript challenge,
	// Captcha challenge or block temporarily based on the threat level of the malicious user.
	// Policy based challenge can be used to selectively enable or disable JavaScript or Captcha challenge
	// on a specific client and request match criteria
	//
	// Types that are valid to be assigned to ChallengeType:
	//	*GlobalSpecType_NoChallenge
	//	*GlobalSpecType_EnableChallenge
	//	*GlobalSpecType_ChallengeOnCacheMiss
	//	*GlobalSpecType_JsChallenge
	//	*GlobalSpecType_CaptchaChallenge
	//	*GlobalSpecType_PolicyBasedChallenge
	ChallengeType isGlobalSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	// Enable Rate Limiting
	//
	// x-displayName: "Rate Limiting"
	// x-required
	// Rate Limiting allows you to control the rate of requests sent to your origin servers, protect against API traffic surge and denial of services attacks.
	//
	// Types that are valid to be assigned to RateLimitChoice:
	//	*GlobalSpecType_DisableRateLimit
	//	*GlobalSpecType_ApiRateLimit
	//	*GlobalSpecType_RateLimit
	RateLimitChoice isGlobalSpecType_RateLimitChoice `protobuf_oneof:"rate_limit_choice"`
	// Trusted Client Rules
	//
	// x-displayName: "Trusted Client Rules"
	// Define rules to skip processing of one or more features such as WAF, Bot Defense etc. for clients.
	TrustedClients []*common_waf.SimpleClientSrcRule `protobuf:"bytes,97,rep,name=trusted_clients,json=trustedClients,proto3" json:"trusted_clients,omitempty"`
	// Client Blocking Rules
	//
	// x-displayName: "Client Blocking Rules"
	// Define rules to block IP Prefixes or AS numbers.
	BlockedClients []*common_waf.SimpleClientSrcRule `protobuf:"bytes,98,rep,name=blocked_clients,json=blockedClients,proto3" json:"blocked_clients,omitempty"`
	// cors_policy
	//
	// x-displayName: "CORS Policy"
	// Cross-Origin Resource Sharing requests configuration
	//
	// CORS is a mechanism that uses additional HTTP headers to tell a browser to let
	// a web application running at one origin (domain) have permission to access selected
	// resources from a server at a different origin
	CorsPolicy *schema.CorsPolicy `protobuf:"bytes,99,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{30}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_LoadbalancerType interface {
	isGlobalSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_WafChoice interface {
	isGlobalSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_BotDefenseChoice interface {
	isGlobalSpecType_BotDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ApiDefinitionChoice interface {
	isGlobalSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ApiDiscoveryChoice interface {
	isGlobalSpecType_ApiDiscoveryChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_SensitiveDataPolicyChoice interface {
	isGlobalSpecType_SensitiveDataPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_L7DdosAutoMitigationAction interface {
	isGlobalSpecType_L7DdosAutoMitigationAction()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_SlowDdosMitigationChoice interface {
	isGlobalSpecType_SlowDdosMitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ClientSideDefenseChoice interface {
	isGlobalSpecType_ClientSideDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ServicePolicyChoice interface {
	isGlobalSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_IpReputationChoice interface {
	isGlobalSpecType_IpReputationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ThreatMeshChoice interface {
	isGlobalSpecType_ThreatMeshChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_UserIdChoice interface {
	isGlobalSpecType_UserIdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_MaliciousUserDetectionChoice interface {
	isGlobalSpecType_MaliciousUserDetectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ChallengeType interface {
	isGlobalSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_RateLimitChoice interface {
	isGlobalSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Http struct {
	Http *http_loadbalancer.ProxyTypeHttp `protobuf:"bytes,3,opt,name=http,proto3,oneof" json:"http,omitempty"`
}
type GlobalSpecType_HttpsAutoCert struct {
	HttpsAutoCert *CDNHTTPSAutoCertsType `protobuf:"bytes,18,opt,name=https_auto_cert,json=httpsAutoCert,proto3,oneof" json:"https_auto_cert,omitempty"`
}
type GlobalSpecType_Https struct {
	Https *CDNHTTPSCustomCertsType `protobuf:"bytes,19,opt,name=https,proto3,oneof" json:"https,omitempty"`
}
type GlobalSpecType_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,31,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type GlobalSpecType_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,32,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type GlobalSpecType_AppFirewallOnCacheMiss struct {
	AppFirewallOnCacheMiss *views.ObjectRefType `protobuf:"bytes,33,opt,name=app_firewall_on_cache_miss,json=appFirewallOnCacheMiss,proto3,oneof" json:"app_firewall_on_cache_miss,omitempty"`
}
type GlobalSpecType_DisableBotDefense struct {
	DisableBotDefense *schema.Empty `protobuf:"bytes,40,opt,name=disable_bot_defense,json=disableBotDefense,proto3,oneof" json:"disable_bot_defense,omitempty"`
}
type GlobalSpecType_BotDefense struct {
	BotDefense *common_security.ShapeBotDefenseType `protobuf:"bytes,41,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type GlobalSpecType_BotDefenseAdvanced struct {
	BotDefenseAdvanced *common_security.BotDefenseAdvancedType `protobuf:"bytes,42,opt,name=bot_defense_advanced,json=botDefenseAdvanced,proto3,oneof" json:"bot_defense_advanced,omitempty"`
}
type GlobalSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,44,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type GlobalSpecType_ApiSpecification struct {
	ApiSpecification *common_waf.APISpecificationSettings `protobuf:"bytes,45,opt,name=api_specification,json=apiSpecification,proto3,oneof" json:"api_specification,omitempty"`
}
type GlobalSpecType_ApiSpecificationOnCacheMiss struct {
	ApiSpecificationOnCacheMiss *common_waf.APISpecificationSettings `protobuf:"bytes,46,opt,name=api_specification_on_cache_miss,json=apiSpecificationOnCacheMiss,proto3,oneof" json:"api_specification_on_cache_miss,omitempty"`
}
type GlobalSpecType_EnableApiDiscovery struct {
	EnableApiDiscovery *common_waf.ApiDiscoverySetting `protobuf:"bytes,51,opt,name=enable_api_discovery,json=enableApiDiscovery,proto3,oneof" json:"enable_api_discovery,omitempty"`
}
type GlobalSpecType_DisableApiDiscovery struct {
	DisableApiDiscovery *schema.Empty `protobuf:"bytes,50,opt,name=disable_api_discovery,json=disableApiDiscovery,proto3,oneof" json:"disable_api_discovery,omitempty"`
}
type GlobalSpecType_ApiDiscoveryOnCacheMiss struct {
	ApiDiscoveryOnCacheMiss *common_waf.ApiDiscoverySetting `protobuf:"bytes,52,opt,name=api_discovery_on_cache_miss,json=apiDiscoveryOnCacheMiss,proto3,oneof" json:"api_discovery_on_cache_miss,omitempty"`
}
type GlobalSpecType_DefaultSensitiveDataPolicy struct {
	DefaultSensitiveDataPolicy *schema.Empty `protobuf:"bytes,54,opt,name=default_sensitive_data_policy,json=defaultSensitiveDataPolicy,proto3,oneof" json:"default_sensitive_data_policy,omitempty"`
}
type GlobalSpecType_SensitiveDataPolicy struct {
	SensitiveDataPolicy *common_security.SensitiveDataPolicySettings `protobuf:"bytes,55,opt,name=sensitive_data_policy,json=sensitiveDataPolicy,proto3,oneof" json:"sensitive_data_policy,omitempty"`
}
type GlobalSpecType_L7DdosActionDefault struct {
	L7DdosActionDefault *schema.Empty `protobuf:"bytes,57,opt,name=l7_ddos_action_default,json=l7DdosActionDefault,proto3,oneof" json:"l7_ddos_action_default,omitempty"`
}
type GlobalSpecType_L7DdosActionBlock struct {
	L7DdosActionBlock *schema.Empty `protobuf:"bytes,58,opt,name=l7_ddos_action_block,json=l7DdosActionBlock,proto3,oneof" json:"l7_ddos_action_block,omitempty"`
}
type GlobalSpecType_L7DdosActionJsChallenge struct {
	L7DdosActionJsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,59,opt,name=l7_ddos_action_js_challenge,json=l7DdosActionJsChallenge,proto3,oneof" json:"l7_ddos_action_js_challenge,omitempty"`
}
type GlobalSpecType_L7DdosActionNone struct {
	L7DdosActionNone *schema.Empty `protobuf:"bytes,60,opt,name=l7_ddos_action_none,json=l7DdosActionNone,proto3,oneof" json:"l7_ddos_action_none,omitempty"`
}
type GlobalSpecType_SystemDefaultTimeouts struct {
	SystemDefaultTimeouts *schema.Empty `protobuf:"bytes,63,opt,name=system_default_timeouts,json=systemDefaultTimeouts,proto3,oneof" json:"system_default_timeouts,omitempty"`
}
type GlobalSpecType_SlowDdosMitigation struct {
	SlowDdosMitigation *virtual_host.SlowDDoSMitigation `protobuf:"bytes,64,opt,name=slow_ddos_mitigation,json=slowDdosMitigation,proto3,oneof" json:"slow_ddos_mitigation,omitempty"`
}
type GlobalSpecType_DisableClientSideDefense struct {
	DisableClientSideDefense *schema.Empty `protobuf:"bytes,66,opt,name=disable_client_side_defense,json=disableClientSideDefense,proto3,oneof" json:"disable_client_side_defense,omitempty"`
}
type GlobalSpecType_ClientSideDefense struct {
	ClientSideDefense *common_security.ClientSideDefenseType `protobuf:"bytes,67,opt,name=client_side_defense,json=clientSideDefense,proto3,oneof" json:"client_side_defense,omitempty"`
}
type GlobalSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,69,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type GlobalSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,70,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type GlobalSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *common_waf.ServicePolicyList `protobuf:"bytes,71,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}
type GlobalSpecType_DisableIpReputation struct {
	DisableIpReputation *schema.Empty `protobuf:"bytes,73,opt,name=disable_ip_reputation,json=disableIpReputation,proto3,oneof" json:"disable_ip_reputation,omitempty"`
}
type GlobalSpecType_EnableIpReputation struct {
	EnableIpReputation *common_waf.IPThreatCategoryListType `protobuf:"bytes,74,opt,name=enable_ip_reputation,json=enableIpReputation,proto3,oneof" json:"enable_ip_reputation,omitempty"`
}
type GlobalSpecType_IpReputationOnCacheMiss struct {
	IpReputationOnCacheMiss *common_waf.IPThreatCategoryListType `protobuf:"bytes,75,opt,name=ip_reputation_on_cache_miss,json=ipReputationOnCacheMiss,proto3,oneof" json:"ip_reputation_on_cache_miss,omitempty"`
}
type GlobalSpecType_DisableThreatMesh struct {
	DisableThreatMesh *schema.Empty `protobuf:"bytes,77,opt,name=disable_threat_mesh,json=disableThreatMesh,proto3,oneof" json:"disable_threat_mesh,omitempty"`
}
type GlobalSpecType_EnableThreatMesh struct {
	EnableThreatMesh *schema.Empty `protobuf:"bytes,78,opt,name=enable_threat_mesh,json=enableThreatMesh,proto3,oneof" json:"enable_threat_mesh,omitempty"`
}
type GlobalSpecType_UserIdClientIp struct {
	UserIdClientIp *schema.Empty `protobuf:"bytes,80,opt,name=user_id_client_ip,json=userIdClientIp,proto3,oneof" json:"user_id_client_ip,omitempty"`
}
type GlobalSpecType_UserIdentification struct {
	UserIdentification *views.ObjectRefType `protobuf:"bytes,81,opt,name=user_identification,json=userIdentification,proto3,oneof" json:"user_identification,omitempty"`
}
type GlobalSpecType_DisableMaliciousUserDetection struct {
	DisableMaliciousUserDetection *schema.Empty `protobuf:"bytes,83,opt,name=disable_malicious_user_detection,json=disableMaliciousUserDetection,proto3,oneof" json:"disable_malicious_user_detection,omitempty"`
}
type GlobalSpecType_EnableMaliciousUserDetection struct {
	EnableMaliciousUserDetection *schema.Empty `protobuf:"bytes,84,opt,name=enable_malicious_user_detection,json=enableMaliciousUserDetection,proto3,oneof" json:"enable_malicious_user_detection,omitempty"`
}
type GlobalSpecType_MaliciousUserDetectionOnCacheMiss struct {
	MaliciousUserDetectionOnCacheMiss *schema.Empty `protobuf:"bytes,85,opt,name=malicious_user_detection_on_cache_miss,json=maliciousUserDetectionOnCacheMiss,proto3,oneof" json:"malicious_user_detection_on_cache_miss,omitempty"`
}
type GlobalSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,87,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type GlobalSpecType_EnableChallenge struct {
	EnableChallenge *common_waf.EnableChallenge `protobuf:"bytes,88,opt,name=enable_challenge,json=enableChallenge,proto3,oneof" json:"enable_challenge,omitempty"`
}
type GlobalSpecType_ChallengeOnCacheMiss struct {
	ChallengeOnCacheMiss *common_waf.EnableChallenge `protobuf:"bytes,89,opt,name=challenge_on_cache_miss,json=challengeOnCacheMiss,proto3,oneof" json:"challenge_on_cache_miss,omitempty"`
}
type GlobalSpecType_JsChallenge struct {
	JsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,90,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type GlobalSpecType_CaptchaChallenge struct {
	CaptchaChallenge *virtual_host.CaptchaChallengeType `protobuf:"bytes,91,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type GlobalSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *common_waf.PolicyBasedChallenge `protobuf:"bytes,92,opt,name=policy_based_challenge,json=policyBasedChallenge,proto3,oneof" json:"policy_based_challenge,omitempty"`
}
type GlobalSpecType_DisableRateLimit struct {
	DisableRateLimit *schema.Empty `protobuf:"bytes,94,opt,name=disable_rate_limit,json=disableRateLimit,proto3,oneof" json:"disable_rate_limit,omitempty"`
}
type GlobalSpecType_ApiRateLimit struct {
	ApiRateLimit *common_waf.APIRateLimit `protobuf:"bytes,95,opt,name=api_rate_limit,json=apiRateLimit,proto3,oneof" json:"api_rate_limit,omitempty"`
}
type GlobalSpecType_RateLimit struct {
	RateLimit *common_waf.RateLimitConfigType `protobuf:"bytes,96,opt,name=rate_limit,json=rateLimit,proto3,oneof" json:"rate_limit,omitempty"`
}

func (*GlobalSpecType_Http) isGlobalSpecType_LoadbalancerType()                                {}
func (*GlobalSpecType_HttpsAutoCert) isGlobalSpecType_LoadbalancerType()                       {}
func (*GlobalSpecType_Https) isGlobalSpecType_LoadbalancerType()                               {}
func (*GlobalSpecType_DisableWaf) isGlobalSpecType_WafChoice()                                 {}
func (*GlobalSpecType_AppFirewall) isGlobalSpecType_WafChoice()                                {}
func (*GlobalSpecType_AppFirewallOnCacheMiss) isGlobalSpecType_WafChoice()                     {}
func (*GlobalSpecType_DisableBotDefense) isGlobalSpecType_BotDefenseChoice()                   {}
func (*GlobalSpecType_BotDefense) isGlobalSpecType_BotDefenseChoice()                          {}
func (*GlobalSpecType_BotDefenseAdvanced) isGlobalSpecType_BotDefenseChoice()                  {}
func (*GlobalSpecType_DisableApiDefinition) isGlobalSpecType_ApiDefinitionChoice()             {}
func (*GlobalSpecType_ApiSpecification) isGlobalSpecType_ApiDefinitionChoice()                 {}
func (*GlobalSpecType_ApiSpecificationOnCacheMiss) isGlobalSpecType_ApiDefinitionChoice()      {}
func (*GlobalSpecType_EnableApiDiscovery) isGlobalSpecType_ApiDiscoveryChoice()                {}
func (*GlobalSpecType_DisableApiDiscovery) isGlobalSpecType_ApiDiscoveryChoice()               {}
func (*GlobalSpecType_ApiDiscoveryOnCacheMiss) isGlobalSpecType_ApiDiscoveryChoice()           {}
func (*GlobalSpecType_DefaultSensitiveDataPolicy) isGlobalSpecType_SensitiveDataPolicyChoice() {}
func (*GlobalSpecType_SensitiveDataPolicy) isGlobalSpecType_SensitiveDataPolicyChoice()        {}
func (*GlobalSpecType_L7DdosActionDefault) isGlobalSpecType_L7DdosAutoMitigationAction()       {}
func (*GlobalSpecType_L7DdosActionBlock) isGlobalSpecType_L7DdosAutoMitigationAction()         {}
func (*GlobalSpecType_L7DdosActionJsChallenge) isGlobalSpecType_L7DdosAutoMitigationAction()   {}
func (*GlobalSpecType_L7DdosActionNone) isGlobalSpecType_L7DdosAutoMitigationAction()          {}
func (*GlobalSpecType_SystemDefaultTimeouts) isGlobalSpecType_SlowDdosMitigationChoice()       {}
func (*GlobalSpecType_SlowDdosMitigation) isGlobalSpecType_SlowDdosMitigationChoice()          {}
func (*GlobalSpecType_DisableClientSideDefense) isGlobalSpecType_ClientSideDefenseChoice()     {}
func (*GlobalSpecType_ClientSideDefense) isGlobalSpecType_ClientSideDefenseChoice()            {}
func (*GlobalSpecType_ServicePoliciesFromNamespace) isGlobalSpecType_ServicePolicyChoice()     {}
func (*GlobalSpecType_NoServicePolicies) isGlobalSpecType_ServicePolicyChoice()                {}
func (*GlobalSpecType_ActiveServicePolicies) isGlobalSpecType_ServicePolicyChoice()            {}
func (*GlobalSpecType_DisableIpReputation) isGlobalSpecType_IpReputationChoice()               {}
func (*GlobalSpecType_EnableIpReputation) isGlobalSpecType_IpReputationChoice()                {}
func (*GlobalSpecType_IpReputationOnCacheMiss) isGlobalSpecType_IpReputationChoice()           {}
func (*GlobalSpecType_DisableThreatMesh) isGlobalSpecType_ThreatMeshChoice()                   {}
func (*GlobalSpecType_EnableThreatMesh) isGlobalSpecType_ThreatMeshChoice()                    {}
func (*GlobalSpecType_UserIdClientIp) isGlobalSpecType_UserIdChoice()                          {}
func (*GlobalSpecType_UserIdentification) isGlobalSpecType_UserIdChoice()                      {}
func (*GlobalSpecType_DisableMaliciousUserDetection) isGlobalSpecType_MaliciousUserDetectionChoice() {
}
func (*GlobalSpecType_EnableMaliciousUserDetection) isGlobalSpecType_MaliciousUserDetectionChoice() {}
func (*GlobalSpecType_MaliciousUserDetectionOnCacheMiss) isGlobalSpecType_MaliciousUserDetectionChoice() {
}
func (*GlobalSpecType_NoChallenge) isGlobalSpecType_ChallengeType()          {}
func (*GlobalSpecType_EnableChallenge) isGlobalSpecType_ChallengeType()      {}
func (*GlobalSpecType_ChallengeOnCacheMiss) isGlobalSpecType_ChallengeType() {}
func (*GlobalSpecType_JsChallenge) isGlobalSpecType_ChallengeType()          {}
func (*GlobalSpecType_CaptchaChallenge) isGlobalSpecType_ChallengeType()     {}
func (*GlobalSpecType_PolicyBasedChallenge) isGlobalSpecType_ChallengeType() {}
func (*GlobalSpecType_DisableRateLimit) isGlobalSpecType_RateLimitChoice()   {}
func (*GlobalSpecType_ApiRateLimit) isGlobalSpecType_RateLimitChoice()       {}
func (*GlobalSpecType_RateLimit) isGlobalSpecType_RateLimitChoice()          {}

func (m *GlobalSpecType) GetLoadbalancerType() isGlobalSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *GlobalSpecType) GetWafChoice() isGlobalSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *GlobalSpecType) GetBotDefenseChoice() isGlobalSpecType_BotDefenseChoice {
	if m != nil {
		return m.BotDefenseChoice
	}
	return nil
}
func (m *GlobalSpecType) GetApiDefinitionChoice() isGlobalSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *GlobalSpecType) GetApiDiscoveryChoice() isGlobalSpecType_ApiDiscoveryChoice {
	if m != nil {
		return m.ApiDiscoveryChoice
	}
	return nil
}
func (m *GlobalSpecType) GetSensitiveDataPolicyChoice() isGlobalSpecType_SensitiveDataPolicyChoice {
	if m != nil {
		return m.SensitiveDataPolicyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetL7DdosAutoMitigationAction() isGlobalSpecType_L7DdosAutoMitigationAction {
	if m != nil {
		return m.L7DdosAutoMitigationAction
	}
	return nil
}
func (m *GlobalSpecType) GetSlowDdosMitigationChoice() isGlobalSpecType_SlowDdosMitigationChoice {
	if m != nil {
		return m.SlowDdosMitigationChoice
	}
	return nil
}
func (m *GlobalSpecType) GetClientSideDefenseChoice() isGlobalSpecType_ClientSideDefenseChoice {
	if m != nil {
		return m.ClientSideDefenseChoice
	}
	return nil
}
func (m *GlobalSpecType) GetServicePolicyChoice() isGlobalSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetIpReputationChoice() isGlobalSpecType_IpReputationChoice {
	if m != nil {
		return m.IpReputationChoice
	}
	return nil
}
func (m *GlobalSpecType) GetThreatMeshChoice() isGlobalSpecType_ThreatMeshChoice {
	if m != nil {
		return m.ThreatMeshChoice
	}
	return nil
}
func (m *GlobalSpecType) GetUserIdChoice() isGlobalSpecType_UserIdChoice {
	if m != nil {
		return m.UserIdChoice
	}
	return nil
}
func (m *GlobalSpecType) GetMaliciousUserDetectionChoice() isGlobalSpecType_MaliciousUserDetectionChoice {
	if m != nil {
		return m.MaliciousUserDetectionChoice
	}
	return nil
}
func (m *GlobalSpecType) GetChallengeType() isGlobalSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *GlobalSpecType) GetRateLimitChoice() isGlobalSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}

func (m *GlobalSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GlobalSpecType) GetHttp() *http_loadbalancer.ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *GlobalSpecType) GetHttpsAutoCert() *CDNHTTPSAutoCertsType {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *GlobalSpecType) GetHttps() *CDNHTTPSCustomCertsType {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_Https); ok {
		return x.Https
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *GlobalSpecType) GetOriginPool() *CdnOriginPoolType {
	if m != nil {
		return m.OriginPool
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GlobalSpecType) GetDnsInfo() []*virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GlobalSpecType) GetState() virtual_host.VirtualHostState {
	if m != nil {
		return m.State
	}
	return virtual_host.VIRTUAL_HOST_READY
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetAutoCertState() virtual_host.CertificationState {
	if m != nil {
		return m.AutoCertState
	}
	return virtual_host.AutoCertDisabled
}

func (m *GlobalSpecType) GetAutoCertInfo() *virtual_host.AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

func (m *GlobalSpecType) GetServiceDomains() []*virtual_host.ServiceDomain {
	if m != nil {
		return m.ServiceDomains
	}
	return nil
}

func (m *GlobalSpecType) GetCertState() virtual_host.CertificationState {
	if m != nil {
		return m.CertState
	}
	return virtual_host.AutoCertDisabled
}

func (m *GlobalSpecType) GetOtherSettings() *OtherSettings {
	if m != nil {
		return m.OtherSettings
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultCacheAction() *DefaultCacheAction {
	if m != nil {
		return m.DefaultCacheAction
	}
	return nil
}

func (m *GlobalSpecType) GetCacheRules() []*CDNCacheRule {
	if m != nil {
		return m.CacheRules
	}
	return nil
}

func (m *GlobalSpecType) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *GlobalSpecType) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetAppFirewallOnCacheMiss() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_AppFirewallOnCacheMiss); ok {
		return x.AppFirewallOnCacheMiss
	}
	return nil
}

func (m *GlobalSpecType) GetWafExclusionRules() []*policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *GlobalSpecType) GetDataGuardRules() []*policy.SimpleDataGuardRule {
	if m != nil {
		return m.DataGuardRules
	}
	return nil
}

func (m *GlobalSpecType) GetCsrfPolicy() *schema.CsrfPolicy {
	if m != nil {
		return m.CsrfPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetGraphqlRules() []*policy.GraphQLRule {
	if m != nil {
		return m.GraphqlRules
	}
	return nil
}

func (m *GlobalSpecType) GetProtectedCookies() []*schema.CookieManipulationOptionType {
	if m != nil {
		return m.ProtectedCookies
	}
	return nil
}

func (m *GlobalSpecType) GetDisableBotDefense() *schema.Empty {
	if x, ok := m.GetBotDefenseChoice().(*GlobalSpecType_DisableBotDefense); ok {
		return x.DisableBotDefense
	}
	return nil
}

func (m *GlobalSpecType) GetBotDefense() *common_security.ShapeBotDefenseType {
	if x, ok := m.GetBotDefenseChoice().(*GlobalSpecType_BotDefense); ok {
		return x.BotDefense
	}
	return nil
}

func (m *GlobalSpecType) GetBotDefenseAdvanced() *common_security.BotDefenseAdvancedType {
	if x, ok := m.GetBotDefenseChoice().(*GlobalSpecType_BotDefenseAdvanced); ok {
		return x.BotDefenseAdvanced
	}
	return nil
}

func (m *GlobalSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*GlobalSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *GlobalSpecType) GetApiSpecification() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiSpecification); ok {
		return x.ApiSpecification
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetApiSpecificationOnCacheMiss() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiSpecificationOnCacheMiss); ok {
		return x.ApiSpecificationOnCacheMiss
	}
	return nil
}

func (m *GlobalSpecType) GetApiProtectionRules() *common_waf.APIProtectionRules {
	if m != nil {
		return m.ApiProtectionRules
	}
	return nil
}

func (m *GlobalSpecType) GetJwtValidation() *common_waf.JWTValidation {
	if m != nil {
		return m.JwtValidation
	}
	return nil
}

func (m *GlobalSpecType) GetEnableApiDiscovery() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*GlobalSpecType_EnableApiDiscovery); ok {
		return x.EnableApiDiscovery
	}
	return nil
}

func (m *GlobalSpecType) GetDisableApiDiscovery() *schema.Empty {
	if x, ok := m.GetApiDiscoveryChoice().(*GlobalSpecType_DisableApiDiscovery); ok {
		return x.DisableApiDiscovery
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetApiDiscoveryOnCacheMiss() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*GlobalSpecType_ApiDiscoveryOnCacheMiss); ok {
		return x.ApiDiscoveryOnCacheMiss
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultSensitiveDataPolicy() *schema.Empty {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*GlobalSpecType_DefaultSensitiveDataPolicy); ok {
		return x.DefaultSensitiveDataPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetSensitiveDataPolicy() *common_security.SensitiveDataPolicySettings {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*GlobalSpecType_SensitiveDataPolicy); ok {
		return x.SensitiveDataPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetL7DdosActionDefault() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionDefault); ok {
		return x.L7DdosActionDefault
	}
	return nil
}

func (m *GlobalSpecType) GetL7DdosActionBlock() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionBlock); ok {
		return x.L7DdosActionBlock
	}
	return nil
}

func (m *GlobalSpecType) GetL7DdosActionJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionJsChallenge); ok {
		return x.L7DdosActionJsChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetL7DdosActionNone() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionNone); ok {
		return x.L7DdosActionNone
	}
	return nil
}

func (m *GlobalSpecType) GetDdosMitigationRules() []*common_security.DDoSMitigationRule {
	if m != nil {
		return m.DdosMitigationRules
	}
	return nil
}

func (m *GlobalSpecType) GetSystemDefaultTimeouts() *schema.Empty {
	if x, ok := m.GetSlowDdosMitigationChoice().(*GlobalSpecType_SystemDefaultTimeouts); ok {
		return x.SystemDefaultTimeouts
	}
	return nil
}

func (m *GlobalSpecType) GetSlowDdosMitigation() *virtual_host.SlowDDoSMitigation {
	if x, ok := m.GetSlowDdosMitigationChoice().(*GlobalSpecType_SlowDdosMitigation); ok {
		return x.SlowDdosMitigation
	}
	return nil
}

func (m *GlobalSpecType) GetDisableClientSideDefense() *schema.Empty {
	if x, ok := m.GetClientSideDefenseChoice().(*GlobalSpecType_DisableClientSideDefense); ok {
		return x.DisableClientSideDefense
	}
	return nil
}

func (m *GlobalSpecType) GetClientSideDefense() *common_security.ClientSideDefenseType {
	if x, ok := m.GetClientSideDefenseChoice().(*GlobalSpecType_ClientSideDefense); ok {
		return x.ClientSideDefense
	}
	return nil
}

func (m *GlobalSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *GlobalSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *GlobalSpecType) GetActiveServicePolicies() *common_waf.ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *GlobalSpecType) GetDisableIpReputation() *schema.Empty {
	if x, ok := m.GetIpReputationChoice().(*GlobalSpecType_DisableIpReputation); ok {
		return x.DisableIpReputation
	}
	return nil
}

func (m *GlobalSpecType) GetEnableIpReputation() *common_waf.IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*GlobalSpecType_EnableIpReputation); ok {
		return x.EnableIpReputation
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetIpReputationOnCacheMiss() *common_waf.IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*GlobalSpecType_IpReputationOnCacheMiss); ok {
		return x.IpReputationOnCacheMiss
	}
	return nil
}

func (m *GlobalSpecType) GetDisableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*GlobalSpecType_DisableThreatMesh); ok {
		return x.DisableThreatMesh
	}
	return nil
}

func (m *GlobalSpecType) GetEnableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*GlobalSpecType_EnableThreatMesh); ok {
		return x.EnableThreatMesh
	}
	return nil
}

func (m *GlobalSpecType) GetUserIdClientIp() *schema.Empty {
	if x, ok := m.GetUserIdChoice().(*GlobalSpecType_UserIdClientIp); ok {
		return x.UserIdClientIp
	}
	return nil
}

func (m *GlobalSpecType) GetUserIdentification() *views.ObjectRefType {
	if x, ok := m.GetUserIdChoice().(*GlobalSpecType_UserIdentification); ok {
		return x.UserIdentification
	}
	return nil
}

func (m *GlobalSpecType) GetDisableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*GlobalSpecType_DisableMaliciousUserDetection); ok {
		return x.DisableMaliciousUserDetection
	}
	return nil
}

func (m *GlobalSpecType) GetEnableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*GlobalSpecType_EnableMaliciousUserDetection); ok {
		return x.EnableMaliciousUserDetection
	}
	return nil
}

func (m *GlobalSpecType) GetMaliciousUserDetectionOnCacheMiss() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*GlobalSpecType_MaliciousUserDetectionOnCacheMiss); ok {
		return x.MaliciousUserDetectionOnCacheMiss
	}
	return nil
}

func (m *GlobalSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetEnableChallenge() *common_waf.EnableChallenge {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_EnableChallenge); ok {
		return x.EnableChallenge
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetChallengeOnCacheMiss() *common_waf.EnableChallenge {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_ChallengeOnCacheMiss); ok {
		return x.ChallengeOnCacheMiss
	}
	return nil
}

func (m *GlobalSpecType) GetJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetCaptchaChallenge() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetPolicyBasedChallenge() *common_waf.PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetDisableRateLimit() *schema.Empty {
	if x, ok := m.GetRateLimitChoice().(*GlobalSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *GlobalSpecType) GetApiRateLimit() *common_waf.APIRateLimit {
	if x, ok := m.GetRateLimitChoice().(*GlobalSpecType_ApiRateLimit); ok {
		return x.ApiRateLimit
	}
	return nil
}

func (m *GlobalSpecType) GetRateLimit() *common_waf.RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*GlobalSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *GlobalSpecType) GetTrustedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *GlobalSpecType) GetBlockedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *GlobalSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Http)(nil),
		(*GlobalSpecType_HttpsAutoCert)(nil),
		(*GlobalSpecType_Https)(nil),
		(*GlobalSpecType_DisableWaf)(nil),
		(*GlobalSpecType_AppFirewall)(nil),
		(*GlobalSpecType_AppFirewallOnCacheMiss)(nil),
		(*GlobalSpecType_DisableBotDefense)(nil),
		(*GlobalSpecType_BotDefense)(nil),
		(*GlobalSpecType_BotDefenseAdvanced)(nil),
		(*GlobalSpecType_DisableApiDefinition)(nil),
		(*GlobalSpecType_ApiSpecification)(nil),
		(*GlobalSpecType_ApiSpecificationOnCacheMiss)(nil),
		(*GlobalSpecType_EnableApiDiscovery)(nil),
		(*GlobalSpecType_DisableApiDiscovery)(nil),
		(*GlobalSpecType_ApiDiscoveryOnCacheMiss)(nil),
		(*GlobalSpecType_DefaultSensitiveDataPolicy)(nil),
		(*GlobalSpecType_SensitiveDataPolicy)(nil),
		(*GlobalSpecType_L7DdosActionDefault)(nil),
		(*GlobalSpecType_L7DdosActionBlock)(nil),
		(*GlobalSpecType_L7DdosActionJsChallenge)(nil),
		(*GlobalSpecType_L7DdosActionNone)(nil),
		(*GlobalSpecType_SystemDefaultTimeouts)(nil),
		(*GlobalSpecType_SlowDdosMitigation)(nil),
		(*GlobalSpecType_DisableClientSideDefense)(nil),
		(*GlobalSpecType_ClientSideDefense)(nil),
		(*GlobalSpecType_ServicePoliciesFromNamespace)(nil),
		(*GlobalSpecType_NoServicePolicies)(nil),
		(*GlobalSpecType_ActiveServicePolicies)(nil),
		(*GlobalSpecType_DisableIpReputation)(nil),
		(*GlobalSpecType_EnableIpReputation)(nil),
		(*GlobalSpecType_IpReputationOnCacheMiss)(nil),
		(*GlobalSpecType_DisableThreatMesh)(nil),
		(*GlobalSpecType_EnableThreatMesh)(nil),
		(*GlobalSpecType_UserIdClientIp)(nil),
		(*GlobalSpecType_UserIdentification)(nil),
		(*GlobalSpecType_DisableMaliciousUserDetection)(nil),
		(*GlobalSpecType_EnableMaliciousUserDetection)(nil),
		(*GlobalSpecType_MaliciousUserDetectionOnCacheMiss)(nil),
		(*GlobalSpecType_NoChallenge)(nil),
		(*GlobalSpecType_EnableChallenge)(nil),
		(*GlobalSpecType_ChallengeOnCacheMiss)(nil),
		(*GlobalSpecType_JsChallenge)(nil),
		(*GlobalSpecType_CaptchaChallenge)(nil),
		(*GlobalSpecType_PolicyBasedChallenge)(nil),
		(*GlobalSpecType_DisableRateLimit)(nil),
		(*GlobalSpecType_ApiRateLimit)(nil),
		(*GlobalSpecType_RateLimit)(nil),
	}
}

// IpFilteringOptions
//
// x-displayName: "IP Filtering Options"
// Options to filter based on IP prefix
type IpFilteringOptions struct {
	// ip_filtering_type
	//
	// x-displayName: "Ip Filtering Type"
	// Type of IP filtering (Allow vs Block)
	//
	// Types that are valid to be assigned to IpFilteringType:
	//	*IpFilteringOptions_AllowList
	//	*IpFilteringOptions_BlockList
	IpFilteringType isIpFilteringOptions_IpFilteringType `protobuf_oneof:"ip_filtering_type"`
}

func (m *IpFilteringOptions) Reset()      { *m = IpFilteringOptions{} }
func (*IpFilteringOptions) ProtoMessage() {}
func (*IpFilteringOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{31}
}
func (m *IpFilteringOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IpFilteringOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IpFilteringOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpFilteringOptions.Merge(m, src)
}
func (m *IpFilteringOptions) XXX_Size() int {
	return m.Size()
}
func (m *IpFilteringOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_IpFilteringOptions.DiscardUnknown(m)
}

var xxx_messageInfo_IpFilteringOptions proto.InternalMessageInfo

type isIpFilteringOptions_IpFilteringType interface {
	isIpFilteringOptions_IpFilteringType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type IpFilteringOptions_AllowList struct {
	AllowList *policy.PrefixMatchList `protobuf:"bytes,2,opt,name=allow_list,json=allowList,proto3,oneof" json:"allow_list,omitempty"`
}
type IpFilteringOptions_BlockList struct {
	BlockList *policy.PrefixMatchList `protobuf:"bytes,3,opt,name=block_list,json=blockList,proto3,oneof" json:"block_list,omitempty"`
}

func (*IpFilteringOptions_AllowList) isIpFilteringOptions_IpFilteringType() {}
func (*IpFilteringOptions_BlockList) isIpFilteringOptions_IpFilteringType() {}

func (m *IpFilteringOptions) GetIpFilteringType() isIpFilteringOptions_IpFilteringType {
	if m != nil {
		return m.IpFilteringType
	}
	return nil
}

func (m *IpFilteringOptions) GetAllowList() *policy.PrefixMatchList {
	if x, ok := m.GetIpFilteringType().(*IpFilteringOptions_AllowList); ok {
		return x.AllowList
	}
	return nil
}

func (m *IpFilteringOptions) GetBlockList() *policy.PrefixMatchList {
	if x, ok := m.GetIpFilteringType().(*IpFilteringOptions_BlockList); ok {
		return x.BlockList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IpFilteringOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IpFilteringOptions_AllowList)(nil),
		(*IpFilteringOptions_BlockList)(nil),
	}
}

// GeoFilteringOptions
//
// x-displayName: "Geo Filtering Options"
// Options to filter based on Geo prefix
type GeoFilteringOptions struct {
	// geo_filtering_type
	//
	// x-displayName: "Geo Filtering Type"
	// Type of Geo filtering (Allow vs Block)
	//
	// Types that are valid to be assigned to GeoFilteringType:
	//	*GeoFilteringOptions_AllowList
	//	*GeoFilteringOptions_BlockList
	GeoFilteringType isGeoFilteringOptions_GeoFilteringType `protobuf_oneof:"geo_filtering_type"`
}

func (m *GeoFilteringOptions) Reset()      { *m = GeoFilteringOptions{} }
func (*GeoFilteringOptions) ProtoMessage() {}
func (*GeoFilteringOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{32}
}
func (m *GeoFilteringOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoFilteringOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GeoFilteringOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoFilteringOptions.Merge(m, src)
}
func (m *GeoFilteringOptions) XXX_Size() int {
	return m.Size()
}
func (m *GeoFilteringOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoFilteringOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GeoFilteringOptions proto.InternalMessageInfo

type isGeoFilteringOptions_GeoFilteringType interface {
	isGeoFilteringOptions_GeoFilteringType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GeoFilteringOptions_AllowList struct {
	AllowList *policy.CountryCodeList `protobuf:"bytes,2,opt,name=allow_list,json=allowList,proto3,oneof" json:"allow_list,omitempty"`
}
type GeoFilteringOptions_BlockList struct {
	BlockList *policy.CountryCodeList `protobuf:"bytes,3,opt,name=block_list,json=blockList,proto3,oneof" json:"block_list,omitempty"`
}

func (*GeoFilteringOptions_AllowList) isGeoFilteringOptions_GeoFilteringType() {}
func (*GeoFilteringOptions_BlockList) isGeoFilteringOptions_GeoFilteringType() {}

func (m *GeoFilteringOptions) GetGeoFilteringType() isGeoFilteringOptions_GeoFilteringType {
	if m != nil {
		return m.GeoFilteringType
	}
	return nil
}

func (m *GeoFilteringOptions) GetAllowList() *policy.CountryCodeList {
	if x, ok := m.GetGeoFilteringType().(*GeoFilteringOptions_AllowList); ok {
		return x.AllowList
	}
	return nil
}

func (m *GeoFilteringOptions) GetBlockList() *policy.CountryCodeList {
	if x, ok := m.GetGeoFilteringType().(*GeoFilteringOptions_BlockList); ok {
		return x.BlockList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GeoFilteringOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GeoFilteringOptions_AllowList)(nil),
		(*GeoFilteringOptions_BlockList)(nil),
	}
}

// LogHeaderOptions
//
// x-displayName: "Headers to Log"
// List of headers to Log
type LogHeaderOptions struct {
	// List of Headers
	//
	// x-displayName: "Headers"
	// x-example: "x-custom-length"
	// List of headers
	HeaderList []string `protobuf:"bytes,1,rep,name=header_list,json=headerList,proto3" json:"header_list,omitempty"`
}

func (m *LogHeaderOptions) Reset()      { *m = LogHeaderOptions{} }
func (*LogHeaderOptions) ProtoMessage() {}
func (*LogHeaderOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{33}
}
func (m *LogHeaderOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogHeaderOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LogHeaderOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogHeaderOptions.Merge(m, src)
}
func (m *LogHeaderOptions) XXX_Size() int {
	return m.Size()
}
func (m *LogHeaderOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_LogHeaderOptions.DiscardUnknown(m)
}

var xxx_messageInfo_LogHeaderOptions proto.InternalMessageInfo

func (m *LogHeaderOptions) GetHeaderList() []string {
	if m != nil {
		return m.HeaderList
	}
	return nil
}

// CDNCustomAuthentication
//
// x-displayName: "Custom Authentication"
// Custom  Authentication
type CDNCustomAuthentication struct {
	// custom_auth_config
	//
	// x-displayName: "Custom Auth Config"
	// x-example: ""
	// This is custom authentication configuration parameters. Please reach out to the support for custom authentication details.
	CustomAuthConfig string `protobuf:"bytes,1,opt,name=custom_auth_config,json=customAuthConfig,proto3" json:"custom_auth_config,omitempty"`
}

func (m *CDNCustomAuthentication) Reset()      { *m = CDNCustomAuthentication{} }
func (*CDNCustomAuthentication) ProtoMessage() {}
func (*CDNCustomAuthentication) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{34}
}
func (m *CDNCustomAuthentication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNCustomAuthentication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CDNCustomAuthentication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNCustomAuthentication.Merge(m, src)
}
func (m *CDNCustomAuthentication) XXX_Size() int {
	return m.Size()
}
func (m *CDNCustomAuthentication) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNCustomAuthentication.DiscardUnknown(m)
}

var xxx_messageInfo_CDNCustomAuthentication proto.InternalMessageInfo

func (m *CDNCustomAuthentication) GetCustomAuthConfig() string {
	if m != nil {
		return m.CustomAuthConfig
	}
	return ""
}

// AuthenticationOptions
//
// x-displayName: "Authentication Options"
// Options to authenticate incoming client requests
type AuthenticationOptions struct {
	// Authentication Options
	//
	// x-displayName: "Authentication Type"
	// Type of Authentication
	//
	// Types that are valid to be assigned to AuthOptions:
	//	*AuthenticationOptions_DisableAuth
	//	*AuthenticationOptions_Jwt
	//	*AuthenticationOptions_Custom
	AuthOptions isAuthenticationOptions_AuthOptions `protobuf_oneof:"auth_options"`
}

func (m *AuthenticationOptions) Reset()      { *m = AuthenticationOptions{} }
func (*AuthenticationOptions) ProtoMessage() {}
func (*AuthenticationOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{35}
}
func (m *AuthenticationOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthenticationOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AuthenticationOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticationOptions.Merge(m, src)
}
func (m *AuthenticationOptions) XXX_Size() int {
	return m.Size()
}
func (m *AuthenticationOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticationOptions.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticationOptions proto.InternalMessageInfo

type isAuthenticationOptions_AuthOptions interface {
	isAuthenticationOptions_AuthOptions()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AuthenticationOptions_DisableAuth struct {
	DisableAuth *schema.Empty `protobuf:"bytes,2,opt,name=disable_auth,json=disableAuth,proto3,oneof" json:"disable_auth,omitempty"`
}
type AuthenticationOptions_Jwt struct {
	Jwt *policy.JwtTokenAuthOptions `protobuf:"bytes,3,opt,name=jwt,proto3,oneof" json:"jwt,omitempty"`
}
type AuthenticationOptions_Custom struct {
	Custom *CDNCustomAuthentication `protobuf:"bytes,4,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}

func (*AuthenticationOptions_DisableAuth) isAuthenticationOptions_AuthOptions() {}
func (*AuthenticationOptions_Jwt) isAuthenticationOptions_AuthOptions()         {}
func (*AuthenticationOptions_Custom) isAuthenticationOptions_AuthOptions()      {}

func (m *AuthenticationOptions) GetAuthOptions() isAuthenticationOptions_AuthOptions {
	if m != nil {
		return m.AuthOptions
	}
	return nil
}

func (m *AuthenticationOptions) GetDisableAuth() *schema.Empty {
	if x, ok := m.GetAuthOptions().(*AuthenticationOptions_DisableAuth); ok {
		return x.DisableAuth
	}
	return nil
}

func (m *AuthenticationOptions) GetJwt() *policy.JwtTokenAuthOptions {
	if x, ok := m.GetAuthOptions().(*AuthenticationOptions_Jwt); ok {
		return x.Jwt
	}
	return nil
}

func (m *AuthenticationOptions) GetCustom() *CDNCustomAuthentication {
	if x, ok := m.GetAuthOptions().(*AuthenticationOptions_Custom); ok {
		return x.Custom
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AuthenticationOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AuthenticationOptions_DisableAuth)(nil),
		(*AuthenticationOptions_Jwt)(nil),
		(*AuthenticationOptions_Custom)(nil),
	}
}

// CDNOriginServerType
//
// x-displayName: "Origin Server"
// Various options to specify origin server
type CDNOriginServerType struct {
	// Origin Server Type
	//
	// x-displayName: "Select Type of Origin Server"
	// x-required
	// Various options to specify origin server
	//
	// Types that are valid to be assigned to Choice:
	//	*CDNOriginServerType_PublicIp
	//	*CDNOriginServerType_PublicName
	Choice isCDNOriginServerType_Choice `protobuf_oneof:"choice"`
	// Port
	//
	// x-displayName: "Origin Server Port"
	// x-example: "80"
	// Port the workload can be reached on
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *CDNOriginServerType) Reset()      { *m = CDNOriginServerType{} }
func (*CDNOriginServerType) ProtoMessage() {}
func (*CDNOriginServerType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{36}
}
func (m *CDNOriginServerType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNOriginServerType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CDNOriginServerType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNOriginServerType.Merge(m, src)
}
func (m *CDNOriginServerType) XXX_Size() int {
	return m.Size()
}
func (m *CDNOriginServerType) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNOriginServerType.DiscardUnknown(m)
}

var xxx_messageInfo_CDNOriginServerType proto.InternalMessageInfo

type isCDNOriginServerType_Choice interface {
	isCDNOriginServerType_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CDNOriginServerType_PublicIp struct {
	PublicIp *origin_pool.OriginServerPublicIP `protobuf:"bytes,2,opt,name=public_ip,json=publicIp,proto3,oneof" json:"public_ip,omitempty"`
}
type CDNOriginServerType_PublicName struct {
	PublicName *origin_pool.OriginServerPublicName `protobuf:"bytes,3,opt,name=public_name,json=publicName,proto3,oneof" json:"public_name,omitempty"`
}

func (*CDNOriginServerType_PublicIp) isCDNOriginServerType_Choice()   {}
func (*CDNOriginServerType_PublicName) isCDNOriginServerType_Choice() {}

func (m *CDNOriginServerType) GetChoice() isCDNOriginServerType_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *CDNOriginServerType) GetPublicIp() *origin_pool.OriginServerPublicIP {
	if x, ok := m.GetChoice().(*CDNOriginServerType_PublicIp); ok {
		return x.PublicIp
	}
	return nil
}

func (m *CDNOriginServerType) GetPublicName() *origin_pool.OriginServerPublicName {
	if x, ok := m.GetChoice().(*CDNOriginServerType_PublicName); ok {
		return x.PublicName
	}
	return nil
}

func (m *CDNOriginServerType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CDNOriginServerType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CDNOriginServerType_PublicIp)(nil),
		(*CDNOriginServerType_PublicName)(nil),
	}
}

// CdnOriginPoolType
//
// x-displayName: "CDN Origin Pool"
// Origin Pool for the CDN distribution
type CdnOriginPoolType struct {
	// OriginServerPublicName
	//
	// x-required
	// x-displayName: "Origin Host Header"
	// The DNS name to be used as the host header for the request to the origin server
	PublicName *origin_pool.OriginServerPublicName `protobuf:"bytes,1,opt,name=public_name,json=publicName,proto3" json:"public_name,omitempty"`
	// Enable TLS
	//
	// x-displayName: "Enable TLS for Origin Servers"
	// x-required
	// Choice to enable TLS for origin servers
	//
	// Types that are valid to be assigned to TlsChoice:
	//	*CdnOriginPoolType_NoTls
	//	*CdnOriginPoolType_UseTls
	TlsChoice isCdnOriginPoolType_TlsChoice `protobuf_oneof:"tls_choice"`
	// List of Origin Servers
	//
	// x-displayName: "List Of Origin Servers"
	// x-required
	// List of original servers
	OriginServers []*CDNOriginServerType `protobuf:"bytes,5,rep,name=origin_servers,json=originServers,proto3" json:"origin_servers,omitempty"`
	// Follow Origin Redirect
	//
	// x-displayName: "Follow Origin Redirect"
	// x-example: "true"
	// x-example: true
	// Instructs the CDN to follow redirects from the origin server(s)
	FollowOriginRedirect bool `protobuf:"varint,6,opt,name=follow_origin_redirect,json=followOriginRedirect,proto3" json:"follow_origin_redirect,omitempty"`
	// Origin Request Timeout
	//
	// x-displayName: "Origin Request Timeout Duration"
	// x-example: "100s"
	// Configures the time after which a request to the origin will time out waiting for a response
	OriginRequestTimeout string `protobuf:"bytes,7,opt,name=origin_request_timeout,json=originRequestTimeout,proto3" json:"origin_request_timeout,omitempty"`
	// Advanced Configuration
	//
	// x-displayName: "Advanced Configuration"
	MoreOriginOptions *OriginAdvancedConfiguration `protobuf:"bytes,8,opt,name=more_origin_options,json=moreOriginOptions,proto3" json:"more_origin_options,omitempty"`
}

func (m *CdnOriginPoolType) Reset()      { *m = CdnOriginPoolType{} }
func (*CdnOriginPoolType) ProtoMessage() {}
func (*CdnOriginPoolType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{37}
}
func (m *CdnOriginPoolType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CdnOriginPoolType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CdnOriginPoolType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CdnOriginPoolType.Merge(m, src)
}
func (m *CdnOriginPoolType) XXX_Size() int {
	return m.Size()
}
func (m *CdnOriginPoolType) XXX_DiscardUnknown() {
	xxx_messageInfo_CdnOriginPoolType.DiscardUnknown(m)
}

var xxx_messageInfo_CdnOriginPoolType proto.InternalMessageInfo

type isCdnOriginPoolType_TlsChoice interface {
	isCdnOriginPoolType_TlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CdnOriginPoolType_NoTls struct {
	NoTls *schema.Empty `protobuf:"bytes,3,opt,name=no_tls,json=noTls,proto3,oneof" json:"no_tls,omitempty"`
}
type CdnOriginPoolType_UseTls struct {
	UseTls *origin_pool.UpstreamTlsParameters `protobuf:"bytes,4,opt,name=use_tls,json=useTls,proto3,oneof" json:"use_tls,omitempty"`
}

func (*CdnOriginPoolType_NoTls) isCdnOriginPoolType_TlsChoice()  {}
func (*CdnOriginPoolType_UseTls) isCdnOriginPoolType_TlsChoice() {}

func (m *CdnOriginPoolType) GetTlsChoice() isCdnOriginPoolType_TlsChoice {
	if m != nil {
		return m.TlsChoice
	}
	return nil
}

func (m *CdnOriginPoolType) GetPublicName() *origin_pool.OriginServerPublicName {
	if m != nil {
		return m.PublicName
	}
	return nil
}

func (m *CdnOriginPoolType) GetNoTls() *schema.Empty {
	if x, ok := m.GetTlsChoice().(*CdnOriginPoolType_NoTls); ok {
		return x.NoTls
	}
	return nil
}

func (m *CdnOriginPoolType) GetUseTls() *origin_pool.UpstreamTlsParameters {
	if x, ok := m.GetTlsChoice().(*CdnOriginPoolType_UseTls); ok {
		return x.UseTls
	}
	return nil
}

func (m *CdnOriginPoolType) GetOriginServers() []*CDNOriginServerType {
	if m != nil {
		return m.OriginServers
	}
	return nil
}

func (m *CdnOriginPoolType) GetFollowOriginRedirect() bool {
	if m != nil {
		return m.FollowOriginRedirect
	}
	return false
}

func (m *CdnOriginPoolType) GetOriginRequestTimeout() string {
	if m != nil {
		return m.OriginRequestTimeout
	}
	return ""
}

func (m *CdnOriginPoolType) GetMoreOriginOptions() *OriginAdvancedConfiguration {
	if m != nil {
		return m.MoreOriginOptions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CdnOriginPoolType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CdnOriginPoolType_NoTls)(nil),
		(*CdnOriginPoolType_UseTls)(nil),
	}
}

// Origin Byte Range Request Config
//
// x-displayName: "Origin Byte Range Request Config"
type OriginAdvancedConfiguration struct {
	// Disable Origin Byte Range Requests
	//
	// x-displayName: "Disable Origin Byte Range Requests"
	// x-example: "true/false"
	// Choice to enable/disable origin byte range requrests towards origin
	DisableByteRangeRequest bool `protobuf:"varint,1,opt,name=disable_byte_range_request,json=disableByteRangeRequest,proto3" json:"disable_byte_range_request,omitempty"`
	// Enable websocket proxy to the origin
	//
	// x-displayName: "Enable websocket proxy to the origin"
	// Option to enable proxying of websocket connections to the origin server
	WebsocketProxy bool `protobuf:"varint,2,opt,name=websocket_proxy,json=websocketProxy,proto3" json:"websocket_proxy,omitempty"`
}

func (m *OriginAdvancedConfiguration) Reset()      { *m = OriginAdvancedConfiguration{} }
func (*OriginAdvancedConfiguration) ProtoMessage() {}
func (*OriginAdvancedConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{38}
}
func (m *OriginAdvancedConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OriginAdvancedConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OriginAdvancedConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginAdvancedConfiguration.Merge(m, src)
}
func (m *OriginAdvancedConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *OriginAdvancedConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginAdvancedConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_OriginAdvancedConfiguration proto.InternalMessageInfo

func (m *OriginAdvancedConfiguration) GetDisableByteRangeRequest() bool {
	if m != nil {
		return m.DisableByteRangeRequest
	}
	return false
}

func (m *OriginAdvancedConfiguration) GetWebsocketProxy() bool {
	if m != nil {
		return m.WebsocketProxy
	}
	return false
}

// CreateSpecType
//
// x-displayName: "Create CDN Loadbalancer"
// Shape of the CDN loadbalancer specification
type CreateSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*CreateSpecType_Http
	//	*CreateSpecType_HttpsAutoCert
	//	*CreateSpecType_Https
	LoadbalancerType isCreateSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	AddLocation      bool                              `protobuf:"varint,11,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	MoreOption       *AdvancedOptionsType              `protobuf:"bytes,13,opt,name=more_option,json=moreOption,proto3" json:"more_option,omitempty"`
	// Origin Pool
	//
	// x-displayName: "CDN Origin Pool"
	// x-required
	OriginPool         *CdnOriginPoolType  `protobuf:"bytes,16,opt,name=origin_pool,json=originPool,proto3" json:"origin_pool,omitempty"`
	OtherSettings      *OtherSettings      `protobuf:"bytes,26,opt,name=other_settings,json=otherSettings,proto3" json:"other_settings,omitempty"`
	DefaultCacheAction *DefaultCacheAction `protobuf:"bytes,28,opt,name=default_cache_action,json=defaultCacheAction,proto3" json:"default_cache_action,omitempty"`
	CacheRules         []*CDNCacheRule     `protobuf:"bytes,29,rep,name=cache_rules,json=cacheRules,proto3" json:"cache_rules,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//	*CreateSpecType_DisableWaf
	//	*CreateSpecType_AppFirewall
	//	*CreateSpecType_AppFirewallOnCacheMiss
	WafChoice         isCreateSpecType_WafChoice             `protobuf_oneof:"waf_choice"`
	WafExclusionRules []*policy.SimpleWafExclusionRule       `protobuf:"bytes,34,rep,name=waf_exclusion_rules,json=wafExclusionRules,proto3" json:"waf_exclusion_rules,omitempty"`
	DataGuardRules    []*policy.SimpleDataGuardRule          `protobuf:"bytes,35,rep,name=data_guard_rules,json=dataGuardRules,proto3" json:"data_guard_rules,omitempty"`
	CsrfPolicy        *schema.CsrfPolicy                     `protobuf:"bytes,36,opt,name=csrf_policy,json=csrfPolicy,proto3" json:"csrf_policy,omitempty"`
	GraphqlRules      []*policy.GraphQLRule                  `protobuf:"bytes,37,rep,name=graphql_rules,json=graphqlRules,proto3" json:"graphql_rules,omitempty"`
	ProtectedCookies  []*schema.CookieManipulationOptionType `protobuf:"bytes,38,rep,name=protected_cookies,json=protectedCookies,proto3" json:"protected_cookies,omitempty"`
	// Types that are valid to be assigned to BotDefenseChoice:
	//	*CreateSpecType_DisableBotDefense
	//	*CreateSpecType_BotDefense
	//	*CreateSpecType_BotDefenseAdvanced
	BotDefenseChoice isCreateSpecType_BotDefenseChoice `protobuf_oneof:"bot_defense_choice"`
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//	*CreateSpecType_DisableApiDefinition
	//	*CreateSpecType_ApiSpecification
	//	*CreateSpecType_ApiSpecificationOnCacheMiss
	ApiDefinitionChoice isCreateSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	ApiProtectionRules  *common_waf.APIProtectionRules       `protobuf:"bytes,47,opt,name=api_protection_rules,json=apiProtectionRules,proto3" json:"api_protection_rules,omitempty"`
	JwtValidation       *common_waf.JWTValidation            `protobuf:"bytes,48,opt,name=jwt_validation,json=jwtValidation,proto3" json:"jwt_validation,omitempty"`
	// Types that are valid to be assigned to ApiDiscoveryChoice:
	//	*CreateSpecType_EnableApiDiscovery
	//	*CreateSpecType_DisableApiDiscovery
	//	*CreateSpecType_ApiDiscoveryOnCacheMiss
	ApiDiscoveryChoice isCreateSpecType_ApiDiscoveryChoice `protobuf_oneof:"api_discovery_choice"`
	// Types that are valid to be assigned to SensitiveDataPolicyChoice:
	//	*CreateSpecType_DefaultSensitiveDataPolicy
	//	*CreateSpecType_SensitiveDataPolicy
	SensitiveDataPolicyChoice isCreateSpecType_SensitiveDataPolicyChoice `protobuf_oneof:"sensitive_data_policy_choice"`
	// Types that are valid to be assigned to L7DdosAutoMitigationAction:
	//	*CreateSpecType_L7DdosActionDefault
	//	*CreateSpecType_L7DdosActionBlock
	//	*CreateSpecType_L7DdosActionJsChallenge
	//	*CreateSpecType_L7DdosActionNone
	L7DdosAutoMitigationAction isCreateSpecType_L7DdosAutoMitigationAction `protobuf_oneof:"l7_ddos_auto_mitigation_action"`
	DdosMitigationRules        []*common_security.DDoSMitigationRule       `protobuf:"bytes,61,rep,name=ddos_mitigation_rules,json=ddosMitigationRules,proto3" json:"ddos_mitigation_rules,omitempty"`
	// Types that are valid to be assigned to SlowDdosMitigationChoice:
	//	*CreateSpecType_SystemDefaultTimeouts
	//	*CreateSpecType_SlowDdosMitigation
	SlowDdosMitigationChoice isCreateSpecType_SlowDdosMitigationChoice `protobuf_oneof:"slow_ddos_mitigation_choice"`
	// Types that are valid to be assigned to ClientSideDefenseChoice:
	//	*CreateSpecType_DisableClientSideDefense
	//	*CreateSpecType_ClientSideDefense
	ClientSideDefenseChoice isCreateSpecType_ClientSideDefenseChoice `protobuf_oneof:"client_side_defense_choice"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*CreateSpecType_ServicePoliciesFromNamespace
	//	*CreateSpecType_NoServicePolicies
	//	*CreateSpecType_ActiveServicePolicies
	ServicePolicyChoice isCreateSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Types that are valid to be assigned to IpReputationChoice:
	//	*CreateSpecType_DisableIpReputation
	//	*CreateSpecType_EnableIpReputation
	//	*CreateSpecType_IpReputationOnCacheMiss
	IpReputationChoice isCreateSpecType_IpReputationChoice `protobuf_oneof:"ip_reputation_choice"`
	// Types that are valid to be assigned to ThreatMeshChoice:
	//	*CreateSpecType_DisableThreatMesh
	//	*CreateSpecType_EnableThreatMesh
	ThreatMeshChoice isCreateSpecType_ThreatMeshChoice `protobuf_oneof:"threat_mesh_choice"`
	// Types that are valid to be assigned to UserIdChoice:
	//	*CreateSpecType_UserIdClientIp
	//	*CreateSpecType_UserIdentification
	UserIdChoice isCreateSpecType_UserIdChoice `protobuf_oneof:"user_id_choice"`
	// Types that are valid to be assigned to MaliciousUserDetectionChoice:
	//	*CreateSpecType_DisableMaliciousUserDetection
	//	*CreateSpecType_EnableMaliciousUserDetection
	//	*CreateSpecType_MaliciousUserDetectionOnCacheMiss
	MaliciousUserDetectionChoice isCreateSpecType_MaliciousUserDetectionChoice `protobuf_oneof:"malicious_user_detection_choice"`
	// Types that are valid to be assigned to ChallengeType:
	//	*CreateSpecType_NoChallenge
	//	*CreateSpecType_EnableChallenge
	//	*CreateSpecType_ChallengeOnCacheMiss
	//	*CreateSpecType_JsChallenge
	//	*CreateSpecType_CaptchaChallenge
	//	*CreateSpecType_PolicyBasedChallenge
	ChallengeType isCreateSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	// Types that are valid to be assigned to RateLimitChoice:
	//	*CreateSpecType_DisableRateLimit
	//	*CreateSpecType_ApiRateLimit
	//	*CreateSpecType_RateLimit
	RateLimitChoice isCreateSpecType_RateLimitChoice  `protobuf_oneof:"rate_limit_choice"`
	TrustedClients  []*common_waf.SimpleClientSrcRule `protobuf:"bytes,97,rep,name=trusted_clients,json=trustedClients,proto3" json:"trusted_clients,omitempty"`
	BlockedClients  []*common_waf.SimpleClientSrcRule `protobuf:"bytes,98,rep,name=blocked_clients,json=blockedClients,proto3" json:"blocked_clients,omitempty"`
	CorsPolicy      *schema.CorsPolicy                `protobuf:"bytes,99,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{39}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_LoadbalancerType interface {
	isCreateSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_WafChoice interface {
	isCreateSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_BotDefenseChoice interface {
	isCreateSpecType_BotDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ApiDefinitionChoice interface {
	isCreateSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ApiDiscoveryChoice interface {
	isCreateSpecType_ApiDiscoveryChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_SensitiveDataPolicyChoice interface {
	isCreateSpecType_SensitiveDataPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_L7DdosAutoMitigationAction interface {
	isCreateSpecType_L7DdosAutoMitigationAction()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_SlowDdosMitigationChoice interface {
	isCreateSpecType_SlowDdosMitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ClientSideDefenseChoice interface {
	isCreateSpecType_ClientSideDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ServicePolicyChoice interface {
	isCreateSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_IpReputationChoice interface {
	isCreateSpecType_IpReputationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ThreatMeshChoice interface {
	isCreateSpecType_ThreatMeshChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_UserIdChoice interface {
	isCreateSpecType_UserIdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_MaliciousUserDetectionChoice interface {
	isCreateSpecType_MaliciousUserDetectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ChallengeType interface {
	isCreateSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_RateLimitChoice interface {
	isCreateSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Http struct {
	Http *http_loadbalancer.ProxyTypeHttp `protobuf:"bytes,3,opt,name=http,proto3,oneof" json:"http,omitempty"`
}
type CreateSpecType_HttpsAutoCert struct {
	HttpsAutoCert *CDNHTTPSAutoCertsType `protobuf:"bytes,18,opt,name=https_auto_cert,json=httpsAutoCert,proto3,oneof" json:"https_auto_cert,omitempty"`
}
type CreateSpecType_Https struct {
	Https *CDNHTTPSCustomCertsType `protobuf:"bytes,19,opt,name=https,proto3,oneof" json:"https,omitempty"`
}
type CreateSpecType_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,31,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type CreateSpecType_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,32,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type CreateSpecType_AppFirewallOnCacheMiss struct {
	AppFirewallOnCacheMiss *views.ObjectRefType `protobuf:"bytes,33,opt,name=app_firewall_on_cache_miss,json=appFirewallOnCacheMiss,proto3,oneof" json:"app_firewall_on_cache_miss,omitempty"`
}
type CreateSpecType_DisableBotDefense struct {
	DisableBotDefense *schema.Empty `protobuf:"bytes,40,opt,name=disable_bot_defense,json=disableBotDefense,proto3,oneof" json:"disable_bot_defense,omitempty"`
}
type CreateSpecType_BotDefense struct {
	BotDefense *common_security.ShapeBotDefenseType `protobuf:"bytes,41,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type CreateSpecType_BotDefenseAdvanced struct {
	BotDefenseAdvanced *common_security.BotDefenseAdvancedType `protobuf:"bytes,42,opt,name=bot_defense_advanced,json=botDefenseAdvanced,proto3,oneof" json:"bot_defense_advanced,omitempty"`
}
type CreateSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,44,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type CreateSpecType_ApiSpecification struct {
	ApiSpecification *common_waf.APISpecificationSettings `protobuf:"bytes,45,opt,name=api_specification,json=apiSpecification,proto3,oneof" json:"api_specification,omitempty"`
}
type CreateSpecType_ApiSpecificationOnCacheMiss struct {
	ApiSpecificationOnCacheMiss *common_waf.APISpecificationSettings `protobuf:"bytes,46,opt,name=api_specification_on_cache_miss,json=apiSpecificationOnCacheMiss,proto3,oneof" json:"api_specification_on_cache_miss,omitempty"`
}
type CreateSpecType_EnableApiDiscovery struct {
	EnableApiDiscovery *common_waf.ApiDiscoverySetting `protobuf:"bytes,51,opt,name=enable_api_discovery,json=enableApiDiscovery,proto3,oneof" json:"enable_api_discovery,omitempty"`
}
type CreateSpecType_DisableApiDiscovery struct {
	DisableApiDiscovery *schema.Empty `protobuf:"bytes,50,opt,name=disable_api_discovery,json=disableApiDiscovery,proto3,oneof" json:"disable_api_discovery,omitempty"`
}
type CreateSpecType_ApiDiscoveryOnCacheMiss struct {
	ApiDiscoveryOnCacheMiss *common_waf.ApiDiscoverySetting `protobuf:"bytes,52,opt,name=api_discovery_on_cache_miss,json=apiDiscoveryOnCacheMiss,proto3,oneof" json:"api_discovery_on_cache_miss,omitempty"`
}
type CreateSpecType_DefaultSensitiveDataPolicy struct {
	DefaultSensitiveDataPolicy *schema.Empty `protobuf:"bytes,54,opt,name=default_sensitive_data_policy,json=defaultSensitiveDataPolicy,proto3,oneof" json:"default_sensitive_data_policy,omitempty"`
}
type CreateSpecType_SensitiveDataPolicy struct {
	SensitiveDataPolicy *common_security.SensitiveDataPolicySettings `protobuf:"bytes,55,opt,name=sensitive_data_policy,json=sensitiveDataPolicy,proto3,oneof" json:"sensitive_data_policy,omitempty"`
}
type CreateSpecType_L7DdosActionDefault struct {
	L7DdosActionDefault *schema.Empty `protobuf:"bytes,57,opt,name=l7_ddos_action_default,json=l7DdosActionDefault,proto3,oneof" json:"l7_ddos_action_default,omitempty"`
}
type CreateSpecType_L7DdosActionBlock struct {
	L7DdosActionBlock *schema.Empty `protobuf:"bytes,58,opt,name=l7_ddos_action_block,json=l7DdosActionBlock,proto3,oneof" json:"l7_ddos_action_block,omitempty"`
}
type CreateSpecType_L7DdosActionJsChallenge struct {
	L7DdosActionJsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,59,opt,name=l7_ddos_action_js_challenge,json=l7DdosActionJsChallenge,proto3,oneof" json:"l7_ddos_action_js_challenge,omitempty"`
}
type CreateSpecType_L7DdosActionNone struct {
	L7DdosActionNone *schema.Empty `protobuf:"bytes,60,opt,name=l7_ddos_action_none,json=l7DdosActionNone,proto3,oneof" json:"l7_ddos_action_none,omitempty"`
}
type CreateSpecType_SystemDefaultTimeouts struct {
	SystemDefaultTimeouts *schema.Empty `protobuf:"bytes,63,opt,name=system_default_timeouts,json=systemDefaultTimeouts,proto3,oneof" json:"system_default_timeouts,omitempty"`
}
type CreateSpecType_SlowDdosMitigation struct {
	SlowDdosMitigation *virtual_host.SlowDDoSMitigation `protobuf:"bytes,64,opt,name=slow_ddos_mitigation,json=slowDdosMitigation,proto3,oneof" json:"slow_ddos_mitigation,omitempty"`
}
type CreateSpecType_DisableClientSideDefense struct {
	DisableClientSideDefense *schema.Empty `protobuf:"bytes,66,opt,name=disable_client_side_defense,json=disableClientSideDefense,proto3,oneof" json:"disable_client_side_defense,omitempty"`
}
type CreateSpecType_ClientSideDefense struct {
	ClientSideDefense *common_security.ClientSideDefenseType `protobuf:"bytes,67,opt,name=client_side_defense,json=clientSideDefense,proto3,oneof" json:"client_side_defense,omitempty"`
}
type CreateSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,69,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type CreateSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,70,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type CreateSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *common_waf.ServicePolicyList `protobuf:"bytes,71,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}
type CreateSpecType_DisableIpReputation struct {
	DisableIpReputation *schema.Empty `protobuf:"bytes,73,opt,name=disable_ip_reputation,json=disableIpReputation,proto3,oneof" json:"disable_ip_reputation,omitempty"`
}
type CreateSpecType_EnableIpReputation struct {
	EnableIpReputation *common_waf.IPThreatCategoryListType `protobuf:"bytes,74,opt,name=enable_ip_reputation,json=enableIpReputation,proto3,oneof" json:"enable_ip_reputation,omitempty"`
}
type CreateSpecType_IpReputationOnCacheMiss struct {
	IpReputationOnCacheMiss *common_waf.IPThreatCategoryListType `protobuf:"bytes,75,opt,name=ip_reputation_on_cache_miss,json=ipReputationOnCacheMiss,proto3,oneof" json:"ip_reputation_on_cache_miss,omitempty"`
}
type CreateSpecType_DisableThreatMesh struct {
	DisableThreatMesh *schema.Empty `protobuf:"bytes,77,opt,name=disable_threat_mesh,json=disableThreatMesh,proto3,oneof" json:"disable_threat_mesh,omitempty"`
}
type CreateSpecType_EnableThreatMesh struct {
	EnableThreatMesh *schema.Empty `protobuf:"bytes,78,opt,name=enable_threat_mesh,json=enableThreatMesh,proto3,oneof" json:"enable_threat_mesh,omitempty"`
}
type CreateSpecType_UserIdClientIp struct {
	UserIdClientIp *schema.Empty `protobuf:"bytes,80,opt,name=user_id_client_ip,json=userIdClientIp,proto3,oneof" json:"user_id_client_ip,omitempty"`
}
type CreateSpecType_UserIdentification struct {
	UserIdentification *views.ObjectRefType `protobuf:"bytes,81,opt,name=user_identification,json=userIdentification,proto3,oneof" json:"user_identification,omitempty"`
}
type CreateSpecType_DisableMaliciousUserDetection struct {
	DisableMaliciousUserDetection *schema.Empty `protobuf:"bytes,83,opt,name=disable_malicious_user_detection,json=disableMaliciousUserDetection,proto3,oneof" json:"disable_malicious_user_detection,omitempty"`
}
type CreateSpecType_EnableMaliciousUserDetection struct {
	EnableMaliciousUserDetection *schema.Empty `protobuf:"bytes,84,opt,name=enable_malicious_user_detection,json=enableMaliciousUserDetection,proto3,oneof" json:"enable_malicious_user_detection,omitempty"`
}
type CreateSpecType_MaliciousUserDetectionOnCacheMiss struct {
	MaliciousUserDetectionOnCacheMiss *schema.Empty `protobuf:"bytes,85,opt,name=malicious_user_detection_on_cache_miss,json=maliciousUserDetectionOnCacheMiss,proto3,oneof" json:"malicious_user_detection_on_cache_miss,omitempty"`
}
type CreateSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,87,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type CreateSpecType_EnableChallenge struct {
	EnableChallenge *common_waf.EnableChallenge `protobuf:"bytes,88,opt,name=enable_challenge,json=enableChallenge,proto3,oneof" json:"enable_challenge,omitempty"`
}
type CreateSpecType_ChallengeOnCacheMiss struct {
	ChallengeOnCacheMiss *common_waf.EnableChallenge `protobuf:"bytes,89,opt,name=challenge_on_cache_miss,json=challengeOnCacheMiss,proto3,oneof" json:"challenge_on_cache_miss,omitempty"`
}
type CreateSpecType_JsChallenge struct {
	JsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,90,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type CreateSpecType_CaptchaChallenge struct {
	CaptchaChallenge *virtual_host.CaptchaChallengeType `protobuf:"bytes,91,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type CreateSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *common_waf.PolicyBasedChallenge `protobuf:"bytes,92,opt,name=policy_based_challenge,json=policyBasedChallenge,proto3,oneof" json:"policy_based_challenge,omitempty"`
}
type CreateSpecType_DisableRateLimit struct {
	DisableRateLimit *schema.Empty `protobuf:"bytes,94,opt,name=disable_rate_limit,json=disableRateLimit,proto3,oneof" json:"disable_rate_limit,omitempty"`
}
type CreateSpecType_ApiRateLimit struct {
	ApiRateLimit *common_waf.APIRateLimit `protobuf:"bytes,95,opt,name=api_rate_limit,json=apiRateLimit,proto3,oneof" json:"api_rate_limit,omitempty"`
}
type CreateSpecType_RateLimit struct {
	RateLimit *common_waf.RateLimitConfigType `protobuf:"bytes,96,opt,name=rate_limit,json=rateLimit,proto3,oneof" json:"rate_limit,omitempty"`
}

func (*CreateSpecType_Http) isCreateSpecType_LoadbalancerType()                                {}
func (*CreateSpecType_HttpsAutoCert) isCreateSpecType_LoadbalancerType()                       {}
func (*CreateSpecType_Https) isCreateSpecType_LoadbalancerType()                               {}
func (*CreateSpecType_DisableWaf) isCreateSpecType_WafChoice()                                 {}
func (*CreateSpecType_AppFirewall) isCreateSpecType_WafChoice()                                {}
func (*CreateSpecType_AppFirewallOnCacheMiss) isCreateSpecType_WafChoice()                     {}
func (*CreateSpecType_DisableBotDefense) isCreateSpecType_BotDefenseChoice()                   {}
func (*CreateSpecType_BotDefense) isCreateSpecType_BotDefenseChoice()                          {}
func (*CreateSpecType_BotDefenseAdvanced) isCreateSpecType_BotDefenseChoice()                  {}
func (*CreateSpecType_DisableApiDefinition) isCreateSpecType_ApiDefinitionChoice()             {}
func (*CreateSpecType_ApiSpecification) isCreateSpecType_ApiDefinitionChoice()                 {}
func (*CreateSpecType_ApiSpecificationOnCacheMiss) isCreateSpecType_ApiDefinitionChoice()      {}
func (*CreateSpecType_EnableApiDiscovery) isCreateSpecType_ApiDiscoveryChoice()                {}
func (*CreateSpecType_DisableApiDiscovery) isCreateSpecType_ApiDiscoveryChoice()               {}
func (*CreateSpecType_ApiDiscoveryOnCacheMiss) isCreateSpecType_ApiDiscoveryChoice()           {}
func (*CreateSpecType_DefaultSensitiveDataPolicy) isCreateSpecType_SensitiveDataPolicyChoice() {}
func (*CreateSpecType_SensitiveDataPolicy) isCreateSpecType_SensitiveDataPolicyChoice()        {}
func (*CreateSpecType_L7DdosActionDefault) isCreateSpecType_L7DdosAutoMitigationAction()       {}
func (*CreateSpecType_L7DdosActionBlock) isCreateSpecType_L7DdosAutoMitigationAction()         {}
func (*CreateSpecType_L7DdosActionJsChallenge) isCreateSpecType_L7DdosAutoMitigationAction()   {}
func (*CreateSpecType_L7DdosActionNone) isCreateSpecType_L7DdosAutoMitigationAction()          {}
func (*CreateSpecType_SystemDefaultTimeouts) isCreateSpecType_SlowDdosMitigationChoice()       {}
func (*CreateSpecType_SlowDdosMitigation) isCreateSpecType_SlowDdosMitigationChoice()          {}
func (*CreateSpecType_DisableClientSideDefense) isCreateSpecType_ClientSideDefenseChoice()     {}
func (*CreateSpecType_ClientSideDefense) isCreateSpecType_ClientSideDefenseChoice()            {}
func (*CreateSpecType_ServicePoliciesFromNamespace) isCreateSpecType_ServicePolicyChoice()     {}
func (*CreateSpecType_NoServicePolicies) isCreateSpecType_ServicePolicyChoice()                {}
func (*CreateSpecType_ActiveServicePolicies) isCreateSpecType_ServicePolicyChoice()            {}
func (*CreateSpecType_DisableIpReputation) isCreateSpecType_IpReputationChoice()               {}
func (*CreateSpecType_EnableIpReputation) isCreateSpecType_IpReputationChoice()                {}
func (*CreateSpecType_IpReputationOnCacheMiss) isCreateSpecType_IpReputationChoice()           {}
func (*CreateSpecType_DisableThreatMesh) isCreateSpecType_ThreatMeshChoice()                   {}
func (*CreateSpecType_EnableThreatMesh) isCreateSpecType_ThreatMeshChoice()                    {}
func (*CreateSpecType_UserIdClientIp) isCreateSpecType_UserIdChoice()                          {}
func (*CreateSpecType_UserIdentification) isCreateSpecType_UserIdChoice()                      {}
func (*CreateSpecType_DisableMaliciousUserDetection) isCreateSpecType_MaliciousUserDetectionChoice() {
}
func (*CreateSpecType_EnableMaliciousUserDetection) isCreateSpecType_MaliciousUserDetectionChoice() {}
func (*CreateSpecType_MaliciousUserDetectionOnCacheMiss) isCreateSpecType_MaliciousUserDetectionChoice() {
}
func (*CreateSpecType_NoChallenge) isCreateSpecType_ChallengeType()          {}
func (*CreateSpecType_EnableChallenge) isCreateSpecType_ChallengeType()      {}
func (*CreateSpecType_ChallengeOnCacheMiss) isCreateSpecType_ChallengeType() {}
func (*CreateSpecType_JsChallenge) isCreateSpecType_ChallengeType()          {}
func (*CreateSpecType_CaptchaChallenge) isCreateSpecType_ChallengeType()     {}
func (*CreateSpecType_PolicyBasedChallenge) isCreateSpecType_ChallengeType() {}
func (*CreateSpecType_DisableRateLimit) isCreateSpecType_RateLimitChoice()   {}
func (*CreateSpecType_ApiRateLimit) isCreateSpecType_RateLimitChoice()       {}
func (*CreateSpecType_RateLimit) isCreateSpecType_RateLimitChoice()          {}

func (m *CreateSpecType) GetLoadbalancerType() isCreateSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *CreateSpecType) GetWafChoice() isCreateSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *CreateSpecType) GetBotDefenseChoice() isCreateSpecType_BotDefenseChoice {
	if m != nil {
		return m.BotDefenseChoice
	}
	return nil
}
func (m *CreateSpecType) GetApiDefinitionChoice() isCreateSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *CreateSpecType) GetApiDiscoveryChoice() isCreateSpecType_ApiDiscoveryChoice {
	if m != nil {
		return m.ApiDiscoveryChoice
	}
	return nil
}
func (m *CreateSpecType) GetSensitiveDataPolicyChoice() isCreateSpecType_SensitiveDataPolicyChoice {
	if m != nil {
		return m.SensitiveDataPolicyChoice
	}
	return nil
}
func (m *CreateSpecType) GetL7DdosAutoMitigationAction() isCreateSpecType_L7DdosAutoMitigationAction {
	if m != nil {
		return m.L7DdosAutoMitigationAction
	}
	return nil
}
func (m *CreateSpecType) GetSlowDdosMitigationChoice() isCreateSpecType_SlowDdosMitigationChoice {
	if m != nil {
		return m.SlowDdosMitigationChoice
	}
	return nil
}
func (m *CreateSpecType) GetClientSideDefenseChoice() isCreateSpecType_ClientSideDefenseChoice {
	if m != nil {
		return m.ClientSideDefenseChoice
	}
	return nil
}
func (m *CreateSpecType) GetServicePolicyChoice() isCreateSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *CreateSpecType) GetIpReputationChoice() isCreateSpecType_IpReputationChoice {
	if m != nil {
		return m.IpReputationChoice
	}
	return nil
}
func (m *CreateSpecType) GetThreatMeshChoice() isCreateSpecType_ThreatMeshChoice {
	if m != nil {
		return m.ThreatMeshChoice
	}
	return nil
}
func (m *CreateSpecType) GetUserIdChoice() isCreateSpecType_UserIdChoice {
	if m != nil {
		return m.UserIdChoice
	}
	return nil
}
func (m *CreateSpecType) GetMaliciousUserDetectionChoice() isCreateSpecType_MaliciousUserDetectionChoice {
	if m != nil {
		return m.MaliciousUserDetectionChoice
	}
	return nil
}
func (m *CreateSpecType) GetChallengeType() isCreateSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *CreateSpecType) GetRateLimitChoice() isCreateSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}

func (m *CreateSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *CreateSpecType) GetHttp() *http_loadbalancer.ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *CreateSpecType) GetHttpsAutoCert() *CDNHTTPSAutoCertsType {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *CreateSpecType) GetHttps() *CDNHTTPSCustomCertsType {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *CreateSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *CreateSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *CreateSpecType) GetOriginPool() *CdnOriginPoolType {
	if m != nil {
		return m.OriginPool
	}
	return nil
}

func (m *CreateSpecType) GetOtherSettings() *OtherSettings {
	if m != nil {
		return m.OtherSettings
	}
	return nil
}

func (m *CreateSpecType) GetDefaultCacheAction() *DefaultCacheAction {
	if m != nil {
		return m.DefaultCacheAction
	}
	return nil
}

func (m *CreateSpecType) GetCacheRules() []*CDNCacheRule {
	if m != nil {
		return m.CacheRules
	}
	return nil
}

func (m *CreateSpecType) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*CreateSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *CreateSpecType) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*CreateSpecType_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

func (m *CreateSpecType) GetAppFirewallOnCacheMiss() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*CreateSpecType_AppFirewallOnCacheMiss); ok {
		return x.AppFirewallOnCacheMiss
	}
	return nil
}

func (m *CreateSpecType) GetWafExclusionRules() []*policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *CreateSpecType) GetDataGuardRules() []*policy.SimpleDataGuardRule {
	if m != nil {
		return m.DataGuardRules
	}
	return nil
}

func (m *CreateSpecType) GetCsrfPolicy() *schema.CsrfPolicy {
	if m != nil {
		return m.CsrfPolicy
	}
	return nil
}

func (m *CreateSpecType) GetGraphqlRules() []*policy.GraphQLRule {
	if m != nil {
		return m.GraphqlRules
	}
	return nil
}

func (m *CreateSpecType) GetProtectedCookies() []*schema.CookieManipulationOptionType {
	if m != nil {
		return m.ProtectedCookies
	}
	return nil
}

func (m *CreateSpecType) GetDisableBotDefense() *schema.Empty {
	if x, ok := m.GetBotDefenseChoice().(*CreateSpecType_DisableBotDefense); ok {
		return x.DisableBotDefense
	}
	return nil
}

func (m *CreateSpecType) GetBotDefense() *common_security.ShapeBotDefenseType {
	if x, ok := m.GetBotDefenseChoice().(*CreateSpecType_BotDefense); ok {
		return x.BotDefense
	}
	return nil
}

func (m *CreateSpecType) GetBotDefenseAdvanced() *common_security.BotDefenseAdvancedType {
	if x, ok := m.GetBotDefenseChoice().(*CreateSpecType_BotDefenseAdvanced); ok {
		return x.BotDefenseAdvanced
	}
	return nil
}

func (m *CreateSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*CreateSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *CreateSpecType) GetApiSpecification() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*CreateSpecType_ApiSpecification); ok {
		return x.ApiSpecification
	}
	return nil
}

func (m *CreateSpecType) GetApiSpecificationOnCacheMiss() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*CreateSpecType_ApiSpecificationOnCacheMiss); ok {
		return x.ApiSpecificationOnCacheMiss
	}
	return nil
}

func (m *CreateSpecType) GetApiProtectionRules() *common_waf.APIProtectionRules {
	if m != nil {
		return m.ApiProtectionRules
	}
	return nil
}

func (m *CreateSpecType) GetJwtValidation() *common_waf.JWTValidation {
	if m != nil {
		return m.JwtValidation
	}
	return nil
}

func (m *CreateSpecType) GetEnableApiDiscovery() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*CreateSpecType_EnableApiDiscovery); ok {
		return x.EnableApiDiscovery
	}
	return nil
}

func (m *CreateSpecType) GetDisableApiDiscovery() *schema.Empty {
	if x, ok := m.GetApiDiscoveryChoice().(*CreateSpecType_DisableApiDiscovery); ok {
		return x.DisableApiDiscovery
	}
	return nil
}

func (m *CreateSpecType) GetApiDiscoveryOnCacheMiss() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*CreateSpecType_ApiDiscoveryOnCacheMiss); ok {
		return x.ApiDiscoveryOnCacheMiss
	}
	return nil
}

func (m *CreateSpecType) GetDefaultSensitiveDataPolicy() *schema.Empty {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*CreateSpecType_DefaultSensitiveDataPolicy); ok {
		return x.DefaultSensitiveDataPolicy
	}
	return nil
}

func (m *CreateSpecType) GetSensitiveDataPolicy() *common_security.SensitiveDataPolicySettings {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*CreateSpecType_SensitiveDataPolicy); ok {
		return x.SensitiveDataPolicy
	}
	return nil
}

func (m *CreateSpecType) GetL7DdosActionDefault() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionDefault); ok {
		return x.L7DdosActionDefault
	}
	return nil
}

func (m *CreateSpecType) GetL7DdosActionBlock() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionBlock); ok {
		return x.L7DdosActionBlock
	}
	return nil
}

func (m *CreateSpecType) GetL7DdosActionJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionJsChallenge); ok {
		return x.L7DdosActionJsChallenge
	}
	return nil
}

func (m *CreateSpecType) GetL7DdosActionNone() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionNone); ok {
		return x.L7DdosActionNone
	}
	return nil
}

func (m *CreateSpecType) GetDdosMitigationRules() []*common_security.DDoSMitigationRule {
	if m != nil {
		return m.DdosMitigationRules
	}
	return nil
}

func (m *CreateSpecType) GetSystemDefaultTimeouts() *schema.Empty {
	if x, ok := m.GetSlowDdosMitigationChoice().(*CreateSpecType_SystemDefaultTimeouts); ok {
		return x.SystemDefaultTimeouts
	}
	return nil
}

func (m *CreateSpecType) GetSlowDdosMitigation() *virtual_host.SlowDDoSMitigation {
	if x, ok := m.GetSlowDdosMitigationChoice().(*CreateSpecType_SlowDdosMitigation); ok {
		return x.SlowDdosMitigation
	}
	return nil
}

func (m *CreateSpecType) GetDisableClientSideDefense() *schema.Empty {
	if x, ok := m.GetClientSideDefenseChoice().(*CreateSpecType_DisableClientSideDefense); ok {
		return x.DisableClientSideDefense
	}
	return nil
}

func (m *CreateSpecType) GetClientSideDefense() *common_security.ClientSideDefenseType {
	if x, ok := m.GetClientSideDefenseChoice().(*CreateSpecType_ClientSideDefense); ok {
		return x.ClientSideDefense
	}
	return nil
}

func (m *CreateSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *CreateSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *CreateSpecType) GetActiveServicePolicies() *common_waf.ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *CreateSpecType) GetDisableIpReputation() *schema.Empty {
	if x, ok := m.GetIpReputationChoice().(*CreateSpecType_DisableIpReputation); ok {
		return x.DisableIpReputation
	}
	return nil
}

func (m *CreateSpecType) GetEnableIpReputation() *common_waf.IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*CreateSpecType_EnableIpReputation); ok {
		return x.EnableIpReputation
	}
	return nil
}

func (m *CreateSpecType) GetIpReputationOnCacheMiss() *common_waf.IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*CreateSpecType_IpReputationOnCacheMiss); ok {
		return x.IpReputationOnCacheMiss
	}
	return nil
}

func (m *CreateSpecType) GetDisableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*CreateSpecType_DisableThreatMesh); ok {
		return x.DisableThreatMesh
	}
	return nil
}

func (m *CreateSpecType) GetEnableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*CreateSpecType_EnableThreatMesh); ok {
		return x.EnableThreatMesh
	}
	return nil
}

func (m *CreateSpecType) GetUserIdClientIp() *schema.Empty {
	if x, ok := m.GetUserIdChoice().(*CreateSpecType_UserIdClientIp); ok {
		return x.UserIdClientIp
	}
	return nil
}

func (m *CreateSpecType) GetUserIdentification() *views.ObjectRefType {
	if x, ok := m.GetUserIdChoice().(*CreateSpecType_UserIdentification); ok {
		return x.UserIdentification
	}
	return nil
}

func (m *CreateSpecType) GetDisableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*CreateSpecType_DisableMaliciousUserDetection); ok {
		return x.DisableMaliciousUserDetection
	}
	return nil
}

func (m *CreateSpecType) GetEnableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*CreateSpecType_EnableMaliciousUserDetection); ok {
		return x.EnableMaliciousUserDetection
	}
	return nil
}

func (m *CreateSpecType) GetMaliciousUserDetectionOnCacheMiss() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*CreateSpecType_MaliciousUserDetectionOnCacheMiss); ok {
		return x.MaliciousUserDetectionOnCacheMiss
	}
	return nil
}

func (m *CreateSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*CreateSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *CreateSpecType) GetEnableChallenge() *common_waf.EnableChallenge {
	if x, ok := m.GetChallengeType().(*CreateSpecType_EnableChallenge); ok {
		return x.EnableChallenge
	}
	return nil
}

func (m *CreateSpecType) GetChallengeOnCacheMiss() *common_waf.EnableChallenge {
	if x, ok := m.GetChallengeType().(*CreateSpecType_ChallengeOnCacheMiss); ok {
		return x.ChallengeOnCacheMiss
	}
	return nil
}

func (m *CreateSpecType) GetJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*CreateSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *CreateSpecType) GetCaptchaChallenge() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*CreateSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *CreateSpecType) GetPolicyBasedChallenge() *common_waf.PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*CreateSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *CreateSpecType) GetDisableRateLimit() *schema.Empty {
	if x, ok := m.GetRateLimitChoice().(*CreateSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *CreateSpecType) GetApiRateLimit() *common_waf.APIRateLimit {
	if x, ok := m.GetRateLimitChoice().(*CreateSpecType_ApiRateLimit); ok {
		return x.ApiRateLimit
	}
	return nil
}

func (m *CreateSpecType) GetRateLimit() *common_waf.RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*CreateSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *CreateSpecType) GetTrustedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *CreateSpecType) GetBlockedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *CreateSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Http)(nil),
		(*CreateSpecType_HttpsAutoCert)(nil),
		(*CreateSpecType_Https)(nil),
		(*CreateSpecType_DisableWaf)(nil),
		(*CreateSpecType_AppFirewall)(nil),
		(*CreateSpecType_AppFirewallOnCacheMiss)(nil),
		(*CreateSpecType_DisableBotDefense)(nil),
		(*CreateSpecType_BotDefense)(nil),
		(*CreateSpecType_BotDefenseAdvanced)(nil),
		(*CreateSpecType_DisableApiDefinition)(nil),
		(*CreateSpecType_ApiSpecification)(nil),
		(*CreateSpecType_ApiSpecificationOnCacheMiss)(nil),
		(*CreateSpecType_EnableApiDiscovery)(nil),
		(*CreateSpecType_DisableApiDiscovery)(nil),
		(*CreateSpecType_ApiDiscoveryOnCacheMiss)(nil),
		(*CreateSpecType_DefaultSensitiveDataPolicy)(nil),
		(*CreateSpecType_SensitiveDataPolicy)(nil),
		(*CreateSpecType_L7DdosActionDefault)(nil),
		(*CreateSpecType_L7DdosActionBlock)(nil),
		(*CreateSpecType_L7DdosActionJsChallenge)(nil),
		(*CreateSpecType_L7DdosActionNone)(nil),
		(*CreateSpecType_SystemDefaultTimeouts)(nil),
		(*CreateSpecType_SlowDdosMitigation)(nil),
		(*CreateSpecType_DisableClientSideDefense)(nil),
		(*CreateSpecType_ClientSideDefense)(nil),
		(*CreateSpecType_ServicePoliciesFromNamespace)(nil),
		(*CreateSpecType_NoServicePolicies)(nil),
		(*CreateSpecType_ActiveServicePolicies)(nil),
		(*CreateSpecType_DisableIpReputation)(nil),
		(*CreateSpecType_EnableIpReputation)(nil),
		(*CreateSpecType_IpReputationOnCacheMiss)(nil),
		(*CreateSpecType_DisableThreatMesh)(nil),
		(*CreateSpecType_EnableThreatMesh)(nil),
		(*CreateSpecType_UserIdClientIp)(nil),
		(*CreateSpecType_UserIdentification)(nil),
		(*CreateSpecType_DisableMaliciousUserDetection)(nil),
		(*CreateSpecType_EnableMaliciousUserDetection)(nil),
		(*CreateSpecType_MaliciousUserDetectionOnCacheMiss)(nil),
		(*CreateSpecType_NoChallenge)(nil),
		(*CreateSpecType_EnableChallenge)(nil),
		(*CreateSpecType_ChallengeOnCacheMiss)(nil),
		(*CreateSpecType_JsChallenge)(nil),
		(*CreateSpecType_CaptchaChallenge)(nil),
		(*CreateSpecType_PolicyBasedChallenge)(nil),
		(*CreateSpecType_DisableRateLimit)(nil),
		(*CreateSpecType_ApiRateLimit)(nil),
		(*CreateSpecType_RateLimit)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace CDN Loadbalancer"
// Shape of the CDN loadbalancer specification
type ReplaceSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*ReplaceSpecType_Http
	//	*ReplaceSpecType_HttpsAutoCert
	//	*ReplaceSpecType_Https
	LoadbalancerType isReplaceSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	AddLocation      bool                               `protobuf:"varint,11,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	MoreOption       *AdvancedOptionsType               `protobuf:"bytes,13,opt,name=more_option,json=moreOption,proto3" json:"more_option,omitempty"`
	// Origin Pool
	//
	// x-displayName: "CDN Origin Pool"
	// x-required
	OriginPool         *CdnOriginPoolType  `protobuf:"bytes,16,opt,name=origin_pool,json=originPool,proto3" json:"origin_pool,omitempty"`
	OtherSettings      *OtherSettings      `protobuf:"bytes,26,opt,name=other_settings,json=otherSettings,proto3" json:"other_settings,omitempty"`
	DefaultCacheAction *DefaultCacheAction `protobuf:"bytes,28,opt,name=default_cache_action,json=defaultCacheAction,proto3" json:"default_cache_action,omitempty"`
	CacheRules         []*CDNCacheRule     `protobuf:"bytes,29,rep,name=cache_rules,json=cacheRules,proto3" json:"cache_rules,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//	*ReplaceSpecType_DisableWaf
	//	*ReplaceSpecType_AppFirewall
	//	*ReplaceSpecType_AppFirewallOnCacheMiss
	WafChoice         isReplaceSpecType_WafChoice            `protobuf_oneof:"waf_choice"`
	WafExclusionRules []*policy.SimpleWafExclusionRule       `protobuf:"bytes,34,rep,name=waf_exclusion_rules,json=wafExclusionRules,proto3" json:"waf_exclusion_rules,omitempty"`
	DataGuardRules    []*policy.SimpleDataGuardRule          `protobuf:"bytes,35,rep,name=data_guard_rules,json=dataGuardRules,proto3" json:"data_guard_rules,omitempty"`
	CsrfPolicy        *schema.CsrfPolicy                     `protobuf:"bytes,36,opt,name=csrf_policy,json=csrfPolicy,proto3" json:"csrf_policy,omitempty"`
	GraphqlRules      []*policy.GraphQLRule                  `protobuf:"bytes,37,rep,name=graphql_rules,json=graphqlRules,proto3" json:"graphql_rules,omitempty"`
	ProtectedCookies  []*schema.CookieManipulationOptionType `protobuf:"bytes,38,rep,name=protected_cookies,json=protectedCookies,proto3" json:"protected_cookies,omitempty"`
	// Types that are valid to be assigned to BotDefenseChoice:
	//	*ReplaceSpecType_DisableBotDefense
	//	*ReplaceSpecType_BotDefense
	//	*ReplaceSpecType_BotDefenseAdvanced
	BotDefenseChoice isReplaceSpecType_BotDefenseChoice `protobuf_oneof:"bot_defense_choice"`
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//	*ReplaceSpecType_DisableApiDefinition
	//	*ReplaceSpecType_ApiSpecification
	//	*ReplaceSpecType_ApiSpecificationOnCacheMiss
	ApiDefinitionChoice isReplaceSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	ApiProtectionRules  *common_waf.APIProtectionRules        `protobuf:"bytes,47,opt,name=api_protection_rules,json=apiProtectionRules,proto3" json:"api_protection_rules,omitempty"`
	JwtValidation       *common_waf.JWTValidation             `protobuf:"bytes,48,opt,name=jwt_validation,json=jwtValidation,proto3" json:"jwt_validation,omitempty"`
	// Types that are valid to be assigned to ApiDiscoveryChoice:
	//	*ReplaceSpecType_EnableApiDiscovery
	//	*ReplaceSpecType_DisableApiDiscovery
	//	*ReplaceSpecType_ApiDiscoveryOnCacheMiss
	ApiDiscoveryChoice isReplaceSpecType_ApiDiscoveryChoice `protobuf_oneof:"api_discovery_choice"`
	// Types that are valid to be assigned to SensitiveDataPolicyChoice:
	//	*ReplaceSpecType_DefaultSensitiveDataPolicy
	//	*ReplaceSpecType_SensitiveDataPolicy
	SensitiveDataPolicyChoice isReplaceSpecType_SensitiveDataPolicyChoice `protobuf_oneof:"sensitive_data_policy_choice"`
	// Types that are valid to be assigned to L7DdosAutoMitigationAction:
	//	*ReplaceSpecType_L7DdosActionDefault
	//	*ReplaceSpecType_L7DdosActionBlock
	//	*ReplaceSpecType_L7DdosActionJsChallenge
	//	*ReplaceSpecType_L7DdosActionNone
	L7DdosAutoMitigationAction isReplaceSpecType_L7DdosAutoMitigationAction `protobuf_oneof:"l7_ddos_auto_mitigation_action"`
	DdosMitigationRules        []*common_security.DDoSMitigationRule        `protobuf:"bytes,61,rep,name=ddos_mitigation_rules,json=ddosMitigationRules,proto3" json:"ddos_mitigation_rules,omitempty"`
	// Types that are valid to be assigned to SlowDdosMitigationChoice:
	//	*ReplaceSpecType_SystemDefaultTimeouts
	//	*ReplaceSpecType_SlowDdosMitigation
	SlowDdosMitigationChoice isReplaceSpecType_SlowDdosMitigationChoice `protobuf_oneof:"slow_ddos_mitigation_choice"`
	// Types that are valid to be assigned to ClientSideDefenseChoice:
	//	*ReplaceSpecType_DisableClientSideDefense
	//	*ReplaceSpecType_ClientSideDefense
	ClientSideDefenseChoice isReplaceSpecType_ClientSideDefenseChoice `protobuf_oneof:"client_side_defense_choice"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*ReplaceSpecType_ServicePoliciesFromNamespace
	//	*ReplaceSpecType_NoServicePolicies
	//	*ReplaceSpecType_ActiveServicePolicies
	ServicePolicyChoice isReplaceSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Types that are valid to be assigned to IpReputationChoice:
	//	*ReplaceSpecType_DisableIpReputation
	//	*ReplaceSpecType_EnableIpReputation
	//	*ReplaceSpecType_IpReputationOnCacheMiss
	IpReputationChoice isReplaceSpecType_IpReputationChoice `protobuf_oneof:"ip_reputation_choice"`
	// Types that are valid to be assigned to ThreatMeshChoice:
	//	*ReplaceSpecType_DisableThreatMesh
	//	*ReplaceSpecType_EnableThreatMesh
	ThreatMeshChoice isReplaceSpecType_ThreatMeshChoice `protobuf_oneof:"threat_mesh_choice"`
	// Types that are valid to be assigned to UserIdChoice:
	//	*ReplaceSpecType_UserIdClientIp
	//	*ReplaceSpecType_UserIdentification
	UserIdChoice isReplaceSpecType_UserIdChoice `protobuf_oneof:"user_id_choice"`
	// Types that are valid to be assigned to MaliciousUserDetectionChoice:
	//	*ReplaceSpecType_DisableMaliciousUserDetection
	//	*ReplaceSpecType_EnableMaliciousUserDetection
	//	*ReplaceSpecType_MaliciousUserDetectionOnCacheMiss
	MaliciousUserDetectionChoice isReplaceSpecType_MaliciousUserDetectionChoice `protobuf_oneof:"malicious_user_detection_choice"`
	// Types that are valid to be assigned to ChallengeType:
	//	*ReplaceSpecType_NoChallenge
	//	*ReplaceSpecType_EnableChallenge
	//	*ReplaceSpecType_ChallengeOnCacheMiss
	//	*ReplaceSpecType_JsChallenge
	//	*ReplaceSpecType_CaptchaChallenge
	//	*ReplaceSpecType_PolicyBasedChallenge
	ChallengeType isReplaceSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	// Types that are valid to be assigned to RateLimitChoice:
	//	*ReplaceSpecType_DisableRateLimit
	//	*ReplaceSpecType_ApiRateLimit
	//	*ReplaceSpecType_RateLimit
	RateLimitChoice isReplaceSpecType_RateLimitChoice `protobuf_oneof:"rate_limit_choice"`
	TrustedClients  []*common_waf.SimpleClientSrcRule `protobuf:"bytes,97,rep,name=trusted_clients,json=trustedClients,proto3" json:"trusted_clients,omitempty"`
	BlockedClients  []*common_waf.SimpleClientSrcRule `protobuf:"bytes,98,rep,name=blocked_clients,json=blockedClients,proto3" json:"blocked_clients,omitempty"`
	CorsPolicy      *schema.CorsPolicy                `protobuf:"bytes,99,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{40}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_LoadbalancerType interface {
	isReplaceSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_WafChoice interface {
	isReplaceSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_BotDefenseChoice interface {
	isReplaceSpecType_BotDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ApiDefinitionChoice interface {
	isReplaceSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ApiDiscoveryChoice interface {
	isReplaceSpecType_ApiDiscoveryChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_SensitiveDataPolicyChoice interface {
	isReplaceSpecType_SensitiveDataPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_L7DdosAutoMitigationAction interface {
	isReplaceSpecType_L7DdosAutoMitigationAction()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_SlowDdosMitigationChoice interface {
	isReplaceSpecType_SlowDdosMitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ClientSideDefenseChoice interface {
	isReplaceSpecType_ClientSideDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ServicePolicyChoice interface {
	isReplaceSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_IpReputationChoice interface {
	isReplaceSpecType_IpReputationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ThreatMeshChoice interface {
	isReplaceSpecType_ThreatMeshChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_UserIdChoice interface {
	isReplaceSpecType_UserIdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_MaliciousUserDetectionChoice interface {
	isReplaceSpecType_MaliciousUserDetectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ChallengeType interface {
	isReplaceSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_RateLimitChoice interface {
	isReplaceSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Http struct {
	Http *http_loadbalancer.ProxyTypeHttp `protobuf:"bytes,3,opt,name=http,proto3,oneof" json:"http,omitempty"`
}
type ReplaceSpecType_HttpsAutoCert struct {
	HttpsAutoCert *CDNHTTPSAutoCertsType `protobuf:"bytes,18,opt,name=https_auto_cert,json=httpsAutoCert,proto3,oneof" json:"https_auto_cert,omitempty"`
}
type ReplaceSpecType_Https struct {
	Https *CDNHTTPSCustomCertsType `protobuf:"bytes,19,opt,name=https,proto3,oneof" json:"https,omitempty"`
}
type ReplaceSpecType_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,31,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type ReplaceSpecType_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,32,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type ReplaceSpecType_AppFirewallOnCacheMiss struct {
	AppFirewallOnCacheMiss *views.ObjectRefType `protobuf:"bytes,33,opt,name=app_firewall_on_cache_miss,json=appFirewallOnCacheMiss,proto3,oneof" json:"app_firewall_on_cache_miss,omitempty"`
}
type ReplaceSpecType_DisableBotDefense struct {
	DisableBotDefense *schema.Empty `protobuf:"bytes,40,opt,name=disable_bot_defense,json=disableBotDefense,proto3,oneof" json:"disable_bot_defense,omitempty"`
}
type ReplaceSpecType_BotDefense struct {
	BotDefense *common_security.ShapeBotDefenseType `protobuf:"bytes,41,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type ReplaceSpecType_BotDefenseAdvanced struct {
	BotDefenseAdvanced *common_security.BotDefenseAdvancedType `protobuf:"bytes,42,opt,name=bot_defense_advanced,json=botDefenseAdvanced,proto3,oneof" json:"bot_defense_advanced,omitempty"`
}
type ReplaceSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,44,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type ReplaceSpecType_ApiSpecification struct {
	ApiSpecification *common_waf.APISpecificationSettings `protobuf:"bytes,45,opt,name=api_specification,json=apiSpecification,proto3,oneof" json:"api_specification,omitempty"`
}
type ReplaceSpecType_ApiSpecificationOnCacheMiss struct {
	ApiSpecificationOnCacheMiss *common_waf.APISpecificationSettings `protobuf:"bytes,46,opt,name=api_specification_on_cache_miss,json=apiSpecificationOnCacheMiss,proto3,oneof" json:"api_specification_on_cache_miss,omitempty"`
}
type ReplaceSpecType_EnableApiDiscovery struct {
	EnableApiDiscovery *common_waf.ApiDiscoverySetting `protobuf:"bytes,51,opt,name=enable_api_discovery,json=enableApiDiscovery,proto3,oneof" json:"enable_api_discovery,omitempty"`
}
type ReplaceSpecType_DisableApiDiscovery struct {
	DisableApiDiscovery *schema.Empty `protobuf:"bytes,50,opt,name=disable_api_discovery,json=disableApiDiscovery,proto3,oneof" json:"disable_api_discovery,omitempty"`
}
type ReplaceSpecType_ApiDiscoveryOnCacheMiss struct {
	ApiDiscoveryOnCacheMiss *common_waf.ApiDiscoverySetting `protobuf:"bytes,52,opt,name=api_discovery_on_cache_miss,json=apiDiscoveryOnCacheMiss,proto3,oneof" json:"api_discovery_on_cache_miss,omitempty"`
}
type ReplaceSpecType_DefaultSensitiveDataPolicy struct {
	DefaultSensitiveDataPolicy *schema.Empty `protobuf:"bytes,54,opt,name=default_sensitive_data_policy,json=defaultSensitiveDataPolicy,proto3,oneof" json:"default_sensitive_data_policy,omitempty"`
}
type ReplaceSpecType_SensitiveDataPolicy struct {
	SensitiveDataPolicy *common_security.SensitiveDataPolicySettings `protobuf:"bytes,55,opt,name=sensitive_data_policy,json=sensitiveDataPolicy,proto3,oneof" json:"sensitive_data_policy,omitempty"`
}
type ReplaceSpecType_L7DdosActionDefault struct {
	L7DdosActionDefault *schema.Empty `protobuf:"bytes,57,opt,name=l7_ddos_action_default,json=l7DdosActionDefault,proto3,oneof" json:"l7_ddos_action_default,omitempty"`
}
type ReplaceSpecType_L7DdosActionBlock struct {
	L7DdosActionBlock *schema.Empty `protobuf:"bytes,58,opt,name=l7_ddos_action_block,json=l7DdosActionBlock,proto3,oneof" json:"l7_ddos_action_block,omitempty"`
}
type ReplaceSpecType_L7DdosActionJsChallenge struct {
	L7DdosActionJsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,59,opt,name=l7_ddos_action_js_challenge,json=l7DdosActionJsChallenge,proto3,oneof" json:"l7_ddos_action_js_challenge,omitempty"`
}
type ReplaceSpecType_L7DdosActionNone struct {
	L7DdosActionNone *schema.Empty `protobuf:"bytes,60,opt,name=l7_ddos_action_none,json=l7DdosActionNone,proto3,oneof" json:"l7_ddos_action_none,omitempty"`
}
type ReplaceSpecType_SystemDefaultTimeouts struct {
	SystemDefaultTimeouts *schema.Empty `protobuf:"bytes,63,opt,name=system_default_timeouts,json=systemDefaultTimeouts,proto3,oneof" json:"system_default_timeouts,omitempty"`
}
type ReplaceSpecType_SlowDdosMitigation struct {
	SlowDdosMitigation *virtual_host.SlowDDoSMitigation `protobuf:"bytes,64,opt,name=slow_ddos_mitigation,json=slowDdosMitigation,proto3,oneof" json:"slow_ddos_mitigation,omitempty"`
}
type ReplaceSpecType_DisableClientSideDefense struct {
	DisableClientSideDefense *schema.Empty `protobuf:"bytes,66,opt,name=disable_client_side_defense,json=disableClientSideDefense,proto3,oneof" json:"disable_client_side_defense,omitempty"`
}
type ReplaceSpecType_ClientSideDefense struct {
	ClientSideDefense *common_security.ClientSideDefenseType `protobuf:"bytes,67,opt,name=client_side_defense,json=clientSideDefense,proto3,oneof" json:"client_side_defense,omitempty"`
}
type ReplaceSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,69,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type ReplaceSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,70,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type ReplaceSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *common_waf.ServicePolicyList `protobuf:"bytes,71,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}
type ReplaceSpecType_DisableIpReputation struct {
	DisableIpReputation *schema.Empty `protobuf:"bytes,73,opt,name=disable_ip_reputation,json=disableIpReputation,proto3,oneof" json:"disable_ip_reputation,omitempty"`
}
type ReplaceSpecType_EnableIpReputation struct {
	EnableIpReputation *common_waf.IPThreatCategoryListType `protobuf:"bytes,74,opt,name=enable_ip_reputation,json=enableIpReputation,proto3,oneof" json:"enable_ip_reputation,omitempty"`
}
type ReplaceSpecType_IpReputationOnCacheMiss struct {
	IpReputationOnCacheMiss *common_waf.IPThreatCategoryListType `protobuf:"bytes,75,opt,name=ip_reputation_on_cache_miss,json=ipReputationOnCacheMiss,proto3,oneof" json:"ip_reputation_on_cache_miss,omitempty"`
}
type ReplaceSpecType_DisableThreatMesh struct {
	DisableThreatMesh *schema.Empty `protobuf:"bytes,77,opt,name=disable_threat_mesh,json=disableThreatMesh,proto3,oneof" json:"disable_threat_mesh,omitempty"`
}
type ReplaceSpecType_EnableThreatMesh struct {
	EnableThreatMesh *schema.Empty `protobuf:"bytes,78,opt,name=enable_threat_mesh,json=enableThreatMesh,proto3,oneof" json:"enable_threat_mesh,omitempty"`
}
type ReplaceSpecType_UserIdClientIp struct {
	UserIdClientIp *schema.Empty `protobuf:"bytes,80,opt,name=user_id_client_ip,json=userIdClientIp,proto3,oneof" json:"user_id_client_ip,omitempty"`
}
type ReplaceSpecType_UserIdentification struct {
	UserIdentification *views.ObjectRefType `protobuf:"bytes,81,opt,name=user_identification,json=userIdentification,proto3,oneof" json:"user_identification,omitempty"`
}
type ReplaceSpecType_DisableMaliciousUserDetection struct {
	DisableMaliciousUserDetection *schema.Empty `protobuf:"bytes,83,opt,name=disable_malicious_user_detection,json=disableMaliciousUserDetection,proto3,oneof" json:"disable_malicious_user_detection,omitempty"`
}
type ReplaceSpecType_EnableMaliciousUserDetection struct {
	EnableMaliciousUserDetection *schema.Empty `protobuf:"bytes,84,opt,name=enable_malicious_user_detection,json=enableMaliciousUserDetection,proto3,oneof" json:"enable_malicious_user_detection,omitempty"`
}
type ReplaceSpecType_MaliciousUserDetectionOnCacheMiss struct {
	MaliciousUserDetectionOnCacheMiss *schema.Empty `protobuf:"bytes,85,opt,name=malicious_user_detection_on_cache_miss,json=maliciousUserDetectionOnCacheMiss,proto3,oneof" json:"malicious_user_detection_on_cache_miss,omitempty"`
}
type ReplaceSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,87,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type ReplaceSpecType_EnableChallenge struct {
	EnableChallenge *common_waf.EnableChallenge `protobuf:"bytes,88,opt,name=enable_challenge,json=enableChallenge,proto3,oneof" json:"enable_challenge,omitempty"`
}
type ReplaceSpecType_ChallengeOnCacheMiss struct {
	ChallengeOnCacheMiss *common_waf.EnableChallenge `protobuf:"bytes,89,opt,name=challenge_on_cache_miss,json=challengeOnCacheMiss,proto3,oneof" json:"challenge_on_cache_miss,omitempty"`
}
type ReplaceSpecType_JsChallenge struct {
	JsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,90,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type ReplaceSpecType_CaptchaChallenge struct {
	CaptchaChallenge *virtual_host.CaptchaChallengeType `protobuf:"bytes,91,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type ReplaceSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *common_waf.PolicyBasedChallenge `protobuf:"bytes,92,opt,name=policy_based_challenge,json=policyBasedChallenge,proto3,oneof" json:"policy_based_challenge,omitempty"`
}
type ReplaceSpecType_DisableRateLimit struct {
	DisableRateLimit *schema.Empty `protobuf:"bytes,94,opt,name=disable_rate_limit,json=disableRateLimit,proto3,oneof" json:"disable_rate_limit,omitempty"`
}
type ReplaceSpecType_ApiRateLimit struct {
	ApiRateLimit *common_waf.APIRateLimit `protobuf:"bytes,95,opt,name=api_rate_limit,json=apiRateLimit,proto3,oneof" json:"api_rate_limit,omitempty"`
}
type ReplaceSpecType_RateLimit struct {
	RateLimit *common_waf.RateLimitConfigType `protobuf:"bytes,96,opt,name=rate_limit,json=rateLimit,proto3,oneof" json:"rate_limit,omitempty"`
}

func (*ReplaceSpecType_Http) isReplaceSpecType_LoadbalancerType()                                {}
func (*ReplaceSpecType_HttpsAutoCert) isReplaceSpecType_LoadbalancerType()                       {}
func (*ReplaceSpecType_Https) isReplaceSpecType_LoadbalancerType()                               {}
func (*ReplaceSpecType_DisableWaf) isReplaceSpecType_WafChoice()                                 {}
func (*ReplaceSpecType_AppFirewall) isReplaceSpecType_WafChoice()                                {}
func (*ReplaceSpecType_AppFirewallOnCacheMiss) isReplaceSpecType_WafChoice()                     {}
func (*ReplaceSpecType_DisableBotDefense) isReplaceSpecType_BotDefenseChoice()                   {}
func (*ReplaceSpecType_BotDefense) isReplaceSpecType_BotDefenseChoice()                          {}
func (*ReplaceSpecType_BotDefenseAdvanced) isReplaceSpecType_BotDefenseChoice()                  {}
func (*ReplaceSpecType_DisableApiDefinition) isReplaceSpecType_ApiDefinitionChoice()             {}
func (*ReplaceSpecType_ApiSpecification) isReplaceSpecType_ApiDefinitionChoice()                 {}
func (*ReplaceSpecType_ApiSpecificationOnCacheMiss) isReplaceSpecType_ApiDefinitionChoice()      {}
func (*ReplaceSpecType_EnableApiDiscovery) isReplaceSpecType_ApiDiscoveryChoice()                {}
func (*ReplaceSpecType_DisableApiDiscovery) isReplaceSpecType_ApiDiscoveryChoice()               {}
func (*ReplaceSpecType_ApiDiscoveryOnCacheMiss) isReplaceSpecType_ApiDiscoveryChoice()           {}
func (*ReplaceSpecType_DefaultSensitiveDataPolicy) isReplaceSpecType_SensitiveDataPolicyChoice() {}
func (*ReplaceSpecType_SensitiveDataPolicy) isReplaceSpecType_SensitiveDataPolicyChoice()        {}
func (*ReplaceSpecType_L7DdosActionDefault) isReplaceSpecType_L7DdosAutoMitigationAction()       {}
func (*ReplaceSpecType_L7DdosActionBlock) isReplaceSpecType_L7DdosAutoMitigationAction()         {}
func (*ReplaceSpecType_L7DdosActionJsChallenge) isReplaceSpecType_L7DdosAutoMitigationAction()   {}
func (*ReplaceSpecType_L7DdosActionNone) isReplaceSpecType_L7DdosAutoMitigationAction()          {}
func (*ReplaceSpecType_SystemDefaultTimeouts) isReplaceSpecType_SlowDdosMitigationChoice()       {}
func (*ReplaceSpecType_SlowDdosMitigation) isReplaceSpecType_SlowDdosMitigationChoice()          {}
func (*ReplaceSpecType_DisableClientSideDefense) isReplaceSpecType_ClientSideDefenseChoice()     {}
func (*ReplaceSpecType_ClientSideDefense) isReplaceSpecType_ClientSideDefenseChoice()            {}
func (*ReplaceSpecType_ServicePoliciesFromNamespace) isReplaceSpecType_ServicePolicyChoice()     {}
func (*ReplaceSpecType_NoServicePolicies) isReplaceSpecType_ServicePolicyChoice()                {}
func (*ReplaceSpecType_ActiveServicePolicies) isReplaceSpecType_ServicePolicyChoice()            {}
func (*ReplaceSpecType_DisableIpReputation) isReplaceSpecType_IpReputationChoice()               {}
func (*ReplaceSpecType_EnableIpReputation) isReplaceSpecType_IpReputationChoice()                {}
func (*ReplaceSpecType_IpReputationOnCacheMiss) isReplaceSpecType_IpReputationChoice()           {}
func (*ReplaceSpecType_DisableThreatMesh) isReplaceSpecType_ThreatMeshChoice()                   {}
func (*ReplaceSpecType_EnableThreatMesh) isReplaceSpecType_ThreatMeshChoice()                    {}
func (*ReplaceSpecType_UserIdClientIp) isReplaceSpecType_UserIdChoice()                          {}
func (*ReplaceSpecType_UserIdentification) isReplaceSpecType_UserIdChoice()                      {}
func (*ReplaceSpecType_DisableMaliciousUserDetection) isReplaceSpecType_MaliciousUserDetectionChoice() {
}
func (*ReplaceSpecType_EnableMaliciousUserDetection) isReplaceSpecType_MaliciousUserDetectionChoice() {
}
func (*ReplaceSpecType_MaliciousUserDetectionOnCacheMiss) isReplaceSpecType_MaliciousUserDetectionChoice() {
}
func (*ReplaceSpecType_NoChallenge) isReplaceSpecType_ChallengeType()          {}
func (*ReplaceSpecType_EnableChallenge) isReplaceSpecType_ChallengeType()      {}
func (*ReplaceSpecType_ChallengeOnCacheMiss) isReplaceSpecType_ChallengeType() {}
func (*ReplaceSpecType_JsChallenge) isReplaceSpecType_ChallengeType()          {}
func (*ReplaceSpecType_CaptchaChallenge) isReplaceSpecType_ChallengeType()     {}
func (*ReplaceSpecType_PolicyBasedChallenge) isReplaceSpecType_ChallengeType() {}
func (*ReplaceSpecType_DisableRateLimit) isReplaceSpecType_RateLimitChoice()   {}
func (*ReplaceSpecType_ApiRateLimit) isReplaceSpecType_RateLimitChoice()       {}
func (*ReplaceSpecType_RateLimit) isReplaceSpecType_RateLimitChoice()          {}

func (m *ReplaceSpecType) GetLoadbalancerType() isReplaceSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *ReplaceSpecType) GetWafChoice() isReplaceSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetBotDefenseChoice() isReplaceSpecType_BotDefenseChoice {
	if m != nil {
		return m.BotDefenseChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetApiDefinitionChoice() isReplaceSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetApiDiscoveryChoice() isReplaceSpecType_ApiDiscoveryChoice {
	if m != nil {
		return m.ApiDiscoveryChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetSensitiveDataPolicyChoice() isReplaceSpecType_SensitiveDataPolicyChoice {
	if m != nil {
		return m.SensitiveDataPolicyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetL7DdosAutoMitigationAction() isReplaceSpecType_L7DdosAutoMitigationAction {
	if m != nil {
		return m.L7DdosAutoMitigationAction
	}
	return nil
}
func (m *ReplaceSpecType) GetSlowDdosMitigationChoice() isReplaceSpecType_SlowDdosMitigationChoice {
	if m != nil {
		return m.SlowDdosMitigationChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetClientSideDefenseChoice() isReplaceSpecType_ClientSideDefenseChoice {
	if m != nil {
		return m.ClientSideDefenseChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetServicePolicyChoice() isReplaceSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetIpReputationChoice() isReplaceSpecType_IpReputationChoice {
	if m != nil {
		return m.IpReputationChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetThreatMeshChoice() isReplaceSpecType_ThreatMeshChoice {
	if m != nil {
		return m.ThreatMeshChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetUserIdChoice() isReplaceSpecType_UserIdChoice {
	if m != nil {
		return m.UserIdChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetMaliciousUserDetectionChoice() isReplaceSpecType_MaliciousUserDetectionChoice {
	if m != nil {
		return m.MaliciousUserDetectionChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetChallengeType() isReplaceSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *ReplaceSpecType) GetRateLimitChoice() isReplaceSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ReplaceSpecType) GetHttp() *http_loadbalancer.ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpsAutoCert() *CDNHTTPSAutoCertsType {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *ReplaceSpecType) GetHttps() *CDNHTTPSCustomCertsType {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *ReplaceSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *ReplaceSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *ReplaceSpecType) GetOriginPool() *CdnOriginPoolType {
	if m != nil {
		return m.OriginPool
	}
	return nil
}

func (m *ReplaceSpecType) GetOtherSettings() *OtherSettings {
	if m != nil {
		return m.OtherSettings
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultCacheAction() *DefaultCacheAction {
	if m != nil {
		return m.DefaultCacheAction
	}
	return nil
}

func (m *ReplaceSpecType) GetCacheRules() []*CDNCacheRule {
	if m != nil {
		return m.CacheRules
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *ReplaceSpecType) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

func (m *ReplaceSpecType) GetAppFirewallOnCacheMiss() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_AppFirewallOnCacheMiss); ok {
		return x.AppFirewallOnCacheMiss
	}
	return nil
}

func (m *ReplaceSpecType) GetWafExclusionRules() []*policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *ReplaceSpecType) GetDataGuardRules() []*policy.SimpleDataGuardRule {
	if m != nil {
		return m.DataGuardRules
	}
	return nil
}

func (m *ReplaceSpecType) GetCsrfPolicy() *schema.CsrfPolicy {
	if m != nil {
		return m.CsrfPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetGraphqlRules() []*policy.GraphQLRule {
	if m != nil {
		return m.GraphqlRules
	}
	return nil
}

func (m *ReplaceSpecType) GetProtectedCookies() []*schema.CookieManipulationOptionType {
	if m != nil {
		return m.ProtectedCookies
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableBotDefense() *schema.Empty {
	if x, ok := m.GetBotDefenseChoice().(*ReplaceSpecType_DisableBotDefense); ok {
		return x.DisableBotDefense
	}
	return nil
}

func (m *ReplaceSpecType) GetBotDefense() *common_security.ShapeBotDefenseType {
	if x, ok := m.GetBotDefenseChoice().(*ReplaceSpecType_BotDefense); ok {
		return x.BotDefense
	}
	return nil
}

func (m *ReplaceSpecType) GetBotDefenseAdvanced() *common_security.BotDefenseAdvancedType {
	if x, ok := m.GetBotDefenseChoice().(*ReplaceSpecType_BotDefenseAdvanced); ok {
		return x.BotDefenseAdvanced
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*ReplaceSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *ReplaceSpecType) GetApiSpecification() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiSpecification); ok {
		return x.ApiSpecification
	}
	return nil
}

func (m *ReplaceSpecType) GetApiSpecificationOnCacheMiss() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiSpecificationOnCacheMiss); ok {
		return x.ApiSpecificationOnCacheMiss
	}
	return nil
}

func (m *ReplaceSpecType) GetApiProtectionRules() *common_waf.APIProtectionRules {
	if m != nil {
		return m.ApiProtectionRules
	}
	return nil
}

func (m *ReplaceSpecType) GetJwtValidation() *common_waf.JWTValidation {
	if m != nil {
		return m.JwtValidation
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableApiDiscovery() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*ReplaceSpecType_EnableApiDiscovery); ok {
		return x.EnableApiDiscovery
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableApiDiscovery() *schema.Empty {
	if x, ok := m.GetApiDiscoveryChoice().(*ReplaceSpecType_DisableApiDiscovery); ok {
		return x.DisableApiDiscovery
	}
	return nil
}

func (m *ReplaceSpecType) GetApiDiscoveryOnCacheMiss() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*ReplaceSpecType_ApiDiscoveryOnCacheMiss); ok {
		return x.ApiDiscoveryOnCacheMiss
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultSensitiveDataPolicy() *schema.Empty {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*ReplaceSpecType_DefaultSensitiveDataPolicy); ok {
		return x.DefaultSensitiveDataPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetSensitiveDataPolicy() *common_security.SensitiveDataPolicySettings {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*ReplaceSpecType_SensitiveDataPolicy); ok {
		return x.SensitiveDataPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetL7DdosActionDefault() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionDefault); ok {
		return x.L7DdosActionDefault
	}
	return nil
}

func (m *ReplaceSpecType) GetL7DdosActionBlock() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionBlock); ok {
		return x.L7DdosActionBlock
	}
	return nil
}

func (m *ReplaceSpecType) GetL7DdosActionJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionJsChallenge); ok {
		return x.L7DdosActionJsChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetL7DdosActionNone() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionNone); ok {
		return x.L7DdosActionNone
	}
	return nil
}

func (m *ReplaceSpecType) GetDdosMitigationRules() []*common_security.DDoSMitigationRule {
	if m != nil {
		return m.DdosMitigationRules
	}
	return nil
}

func (m *ReplaceSpecType) GetSystemDefaultTimeouts() *schema.Empty {
	if x, ok := m.GetSlowDdosMitigationChoice().(*ReplaceSpecType_SystemDefaultTimeouts); ok {
		return x.SystemDefaultTimeouts
	}
	return nil
}

func (m *ReplaceSpecType) GetSlowDdosMitigation() *virtual_host.SlowDDoSMitigation {
	if x, ok := m.GetSlowDdosMitigationChoice().(*ReplaceSpecType_SlowDdosMitigation); ok {
		return x.SlowDdosMitigation
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableClientSideDefense() *schema.Empty {
	if x, ok := m.GetClientSideDefenseChoice().(*ReplaceSpecType_DisableClientSideDefense); ok {
		return x.DisableClientSideDefense
	}
	return nil
}

func (m *ReplaceSpecType) GetClientSideDefense() *common_security.ClientSideDefenseType {
	if x, ok := m.GetClientSideDefenseChoice().(*ReplaceSpecType_ClientSideDefense); ok {
		return x.ClientSideDefense
	}
	return nil
}

func (m *ReplaceSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *ReplaceSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *ReplaceSpecType) GetActiveServicePolicies() *common_waf.ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableIpReputation() *schema.Empty {
	if x, ok := m.GetIpReputationChoice().(*ReplaceSpecType_DisableIpReputation); ok {
		return x.DisableIpReputation
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableIpReputation() *common_waf.IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*ReplaceSpecType_EnableIpReputation); ok {
		return x.EnableIpReputation
	}
	return nil
}

func (m *ReplaceSpecType) GetIpReputationOnCacheMiss() *common_waf.IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*ReplaceSpecType_IpReputationOnCacheMiss); ok {
		return x.IpReputationOnCacheMiss
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*ReplaceSpecType_DisableThreatMesh); ok {
		return x.DisableThreatMesh
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*ReplaceSpecType_EnableThreatMesh); ok {
		return x.EnableThreatMesh
	}
	return nil
}

func (m *ReplaceSpecType) GetUserIdClientIp() *schema.Empty {
	if x, ok := m.GetUserIdChoice().(*ReplaceSpecType_UserIdClientIp); ok {
		return x.UserIdClientIp
	}
	return nil
}

func (m *ReplaceSpecType) GetUserIdentification() *views.ObjectRefType {
	if x, ok := m.GetUserIdChoice().(*ReplaceSpecType_UserIdentification); ok {
		return x.UserIdentification
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*ReplaceSpecType_DisableMaliciousUserDetection); ok {
		return x.DisableMaliciousUserDetection
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*ReplaceSpecType_EnableMaliciousUserDetection); ok {
		return x.EnableMaliciousUserDetection
	}
	return nil
}

func (m *ReplaceSpecType) GetMaliciousUserDetectionOnCacheMiss() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*ReplaceSpecType_MaliciousUserDetectionOnCacheMiss); ok {
		return x.MaliciousUserDetectionOnCacheMiss
	}
	return nil
}

func (m *ReplaceSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableChallenge() *common_waf.EnableChallenge {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_EnableChallenge); ok {
		return x.EnableChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetChallengeOnCacheMiss() *common_waf.EnableChallenge {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_ChallengeOnCacheMiss); ok {
		return x.ChallengeOnCacheMiss
	}
	return nil
}

func (m *ReplaceSpecType) GetJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetCaptchaChallenge() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetPolicyBasedChallenge() *common_waf.PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableRateLimit() *schema.Empty {
	if x, ok := m.GetRateLimitChoice().(*ReplaceSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *ReplaceSpecType) GetApiRateLimit() *common_waf.APIRateLimit {
	if x, ok := m.GetRateLimitChoice().(*ReplaceSpecType_ApiRateLimit); ok {
		return x.ApiRateLimit
	}
	return nil
}

func (m *ReplaceSpecType) GetRateLimit() *common_waf.RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*ReplaceSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *ReplaceSpecType) GetTrustedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *ReplaceSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Http)(nil),
		(*ReplaceSpecType_HttpsAutoCert)(nil),
		(*ReplaceSpecType_Https)(nil),
		(*ReplaceSpecType_DisableWaf)(nil),
		(*ReplaceSpecType_AppFirewall)(nil),
		(*ReplaceSpecType_AppFirewallOnCacheMiss)(nil),
		(*ReplaceSpecType_DisableBotDefense)(nil),
		(*ReplaceSpecType_BotDefense)(nil),
		(*ReplaceSpecType_BotDefenseAdvanced)(nil),
		(*ReplaceSpecType_DisableApiDefinition)(nil),
		(*ReplaceSpecType_ApiSpecification)(nil),
		(*ReplaceSpecType_ApiSpecificationOnCacheMiss)(nil),
		(*ReplaceSpecType_EnableApiDiscovery)(nil),
		(*ReplaceSpecType_DisableApiDiscovery)(nil),
		(*ReplaceSpecType_ApiDiscoveryOnCacheMiss)(nil),
		(*ReplaceSpecType_DefaultSensitiveDataPolicy)(nil),
		(*ReplaceSpecType_SensitiveDataPolicy)(nil),
		(*ReplaceSpecType_L7DdosActionDefault)(nil),
		(*ReplaceSpecType_L7DdosActionBlock)(nil),
		(*ReplaceSpecType_L7DdosActionJsChallenge)(nil),
		(*ReplaceSpecType_L7DdosActionNone)(nil),
		(*ReplaceSpecType_SystemDefaultTimeouts)(nil),
		(*ReplaceSpecType_SlowDdosMitigation)(nil),
		(*ReplaceSpecType_DisableClientSideDefense)(nil),
		(*ReplaceSpecType_ClientSideDefense)(nil),
		(*ReplaceSpecType_ServicePoliciesFromNamespace)(nil),
		(*ReplaceSpecType_NoServicePolicies)(nil),
		(*ReplaceSpecType_ActiveServicePolicies)(nil),
		(*ReplaceSpecType_DisableIpReputation)(nil),
		(*ReplaceSpecType_EnableIpReputation)(nil),
		(*ReplaceSpecType_IpReputationOnCacheMiss)(nil),
		(*ReplaceSpecType_DisableThreatMesh)(nil),
		(*ReplaceSpecType_EnableThreatMesh)(nil),
		(*ReplaceSpecType_UserIdClientIp)(nil),
		(*ReplaceSpecType_UserIdentification)(nil),
		(*ReplaceSpecType_DisableMaliciousUserDetection)(nil),
		(*ReplaceSpecType_EnableMaliciousUserDetection)(nil),
		(*ReplaceSpecType_MaliciousUserDetectionOnCacheMiss)(nil),
		(*ReplaceSpecType_NoChallenge)(nil),
		(*ReplaceSpecType_EnableChallenge)(nil),
		(*ReplaceSpecType_ChallengeOnCacheMiss)(nil),
		(*ReplaceSpecType_JsChallenge)(nil),
		(*ReplaceSpecType_CaptchaChallenge)(nil),
		(*ReplaceSpecType_PolicyBasedChallenge)(nil),
		(*ReplaceSpecType_DisableRateLimit)(nil),
		(*ReplaceSpecType_ApiRateLimit)(nil),
		(*ReplaceSpecType_RateLimit)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get CDN Loadbalancer"
// Shape of the CDN loadbalancer specification
type GetSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*GetSpecType_Http
	//	*GetSpecType_HttpsAutoCert
	//	*GetSpecType_Https
	LoadbalancerType   isGetSpecType_LoadbalancerType   `protobuf_oneof:"loadbalancer_type"`
	AddLocation        bool                             `protobuf:"varint,11,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	MoreOption         *AdvancedOptionsType             `protobuf:"bytes,13,opt,name=more_option,json=moreOption,proto3" json:"more_option,omitempty"`
	OriginPool         *CdnOriginPoolType               `protobuf:"bytes,16,opt,name=origin_pool,json=originPool,proto3" json:"origin_pool,omitempty"`
	OtherSettings      *OtherSettings                   `protobuf:"bytes,26,opt,name=other_settings,json=otherSettings,proto3" json:"other_settings,omitempty"`
	HostName           string                           `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	DnsInfo            []*virtual_host_dns_info.DnsInfo `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
	State              virtual_host.VirtualHostState    `protobuf:"varint,1003,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	AutoCertInfo       *virtual_host.AutoCertInfoType   `protobuf:"bytes,1010,opt,name=auto_cert_info,json=autoCertInfo,proto3" json:"auto_cert_info,omitempty"`
	ServiceDomains     []*virtual_host.ServiceDomain    `protobuf:"bytes,1011,rep,name=service_domains,json=serviceDomains,proto3" json:"service_domains,omitempty"`
	CertState          virtual_host.CertificationState  `protobuf:"varint,1012,opt,name=cert_state,json=certState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"cert_state,omitempty"`
	DefaultCacheAction *DefaultCacheAction              `protobuf:"bytes,28,opt,name=default_cache_action,json=defaultCacheAction,proto3" json:"default_cache_action,omitempty"`
	CacheRules         []*CDNCacheRule                  `protobuf:"bytes,29,rep,name=cache_rules,json=cacheRules,proto3" json:"cache_rules,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//	*GetSpecType_DisableWaf
	//	*GetSpecType_AppFirewall
	//	*GetSpecType_AppFirewallOnCacheMiss
	WafChoice         isGetSpecType_WafChoice                `protobuf_oneof:"waf_choice"`
	WafExclusionRules []*policy.SimpleWafExclusionRule       `protobuf:"bytes,34,rep,name=waf_exclusion_rules,json=wafExclusionRules,proto3" json:"waf_exclusion_rules,omitempty"`
	DataGuardRules    []*policy.SimpleDataGuardRule          `protobuf:"bytes,35,rep,name=data_guard_rules,json=dataGuardRules,proto3" json:"data_guard_rules,omitempty"`
	CsrfPolicy        *schema.CsrfPolicy                     `protobuf:"bytes,36,opt,name=csrf_policy,json=csrfPolicy,proto3" json:"csrf_policy,omitempty"`
	GraphqlRules      []*policy.GraphQLRule                  `protobuf:"bytes,37,rep,name=graphql_rules,json=graphqlRules,proto3" json:"graphql_rules,omitempty"`
	ProtectedCookies  []*schema.CookieManipulationOptionType `protobuf:"bytes,38,rep,name=protected_cookies,json=protectedCookies,proto3" json:"protected_cookies,omitempty"`
	// Types that are valid to be assigned to BotDefenseChoice:
	//	*GetSpecType_DisableBotDefense
	//	*GetSpecType_BotDefense
	//	*GetSpecType_BotDefenseAdvanced
	BotDefenseChoice isGetSpecType_BotDefenseChoice `protobuf_oneof:"bot_defense_choice"`
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//	*GetSpecType_DisableApiDefinition
	//	*GetSpecType_ApiSpecification
	//	*GetSpecType_ApiSpecificationOnCacheMiss
	ApiDefinitionChoice isGetSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	ApiProtectionRules  *common_waf.APIProtectionRules    `protobuf:"bytes,47,opt,name=api_protection_rules,json=apiProtectionRules,proto3" json:"api_protection_rules,omitempty"`
	JwtValidation       *common_waf.JWTValidation         `protobuf:"bytes,48,opt,name=jwt_validation,json=jwtValidation,proto3" json:"jwt_validation,omitempty"`
	// Types that are valid to be assigned to ApiDiscoveryChoice:
	//	*GetSpecType_EnableApiDiscovery
	//	*GetSpecType_DisableApiDiscovery
	//	*GetSpecType_ApiDiscoveryOnCacheMiss
	ApiDiscoveryChoice isGetSpecType_ApiDiscoveryChoice `protobuf_oneof:"api_discovery_choice"`
	// Types that are valid to be assigned to SensitiveDataPolicyChoice:
	//	*GetSpecType_DefaultSensitiveDataPolicy
	//	*GetSpecType_SensitiveDataPolicy
	SensitiveDataPolicyChoice isGetSpecType_SensitiveDataPolicyChoice `protobuf_oneof:"sensitive_data_policy_choice"`
	// Types that are valid to be assigned to L7DdosAutoMitigationAction:
	//	*GetSpecType_L7DdosActionDefault
	//	*GetSpecType_L7DdosActionBlock
	//	*GetSpecType_L7DdosActionJsChallenge
	//	*GetSpecType_L7DdosActionNone
	L7DdosAutoMitigationAction isGetSpecType_L7DdosAutoMitigationAction `protobuf_oneof:"l7_ddos_auto_mitigation_action"`
	DdosMitigationRules        []*common_security.DDoSMitigationRule    `protobuf:"bytes,61,rep,name=ddos_mitigation_rules,json=ddosMitigationRules,proto3" json:"ddos_mitigation_rules,omitempty"`
	// Types that are valid to be assigned to SlowDdosMitigationChoice:
	//	*GetSpecType_SystemDefaultTimeouts
	//	*GetSpecType_SlowDdosMitigation
	SlowDdosMitigationChoice isGetSpecType_SlowDdosMitigationChoice `protobuf_oneof:"slow_ddos_mitigation_choice"`
	// Types that are valid to be assigned to ClientSideDefenseChoice:
	//	*GetSpecType_DisableClientSideDefense
	//	*GetSpecType_ClientSideDefense
	ClientSideDefenseChoice isGetSpecType_ClientSideDefenseChoice `protobuf_oneof:"client_side_defense_choice"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*GetSpecType_ServicePoliciesFromNamespace
	//	*GetSpecType_NoServicePolicies
	//	*GetSpecType_ActiveServicePolicies
	ServicePolicyChoice isGetSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Types that are valid to be assigned to IpReputationChoice:
	//	*GetSpecType_DisableIpReputation
	//	*GetSpecType_EnableIpReputation
	//	*GetSpecType_IpReputationOnCacheMiss
	IpReputationChoice isGetSpecType_IpReputationChoice `protobuf_oneof:"ip_reputation_choice"`
	// Types that are valid to be assigned to ThreatMeshChoice:
	//	*GetSpecType_DisableThreatMesh
	//	*GetSpecType_EnableThreatMesh
	ThreatMeshChoice isGetSpecType_ThreatMeshChoice `protobuf_oneof:"threat_mesh_choice"`
	// Types that are valid to be assigned to UserIdChoice:
	//	*GetSpecType_UserIdClientIp
	//	*GetSpecType_UserIdentification
	UserIdChoice isGetSpecType_UserIdChoice `protobuf_oneof:"user_id_choice"`
	// Types that are valid to be assigned to MaliciousUserDetectionChoice:
	//	*GetSpecType_DisableMaliciousUserDetection
	//	*GetSpecType_EnableMaliciousUserDetection
	//	*GetSpecType_MaliciousUserDetectionOnCacheMiss
	MaliciousUserDetectionChoice isGetSpecType_MaliciousUserDetectionChoice `protobuf_oneof:"malicious_user_detection_choice"`
	// Types that are valid to be assigned to ChallengeType:
	//	*GetSpecType_NoChallenge
	//	*GetSpecType_EnableChallenge
	//	*GetSpecType_ChallengeOnCacheMiss
	//	*GetSpecType_JsChallenge
	//	*GetSpecType_CaptchaChallenge
	//	*GetSpecType_PolicyBasedChallenge
	ChallengeType isGetSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	// Types that are valid to be assigned to RateLimitChoice:
	//	*GetSpecType_DisableRateLimit
	//	*GetSpecType_ApiRateLimit
	//	*GetSpecType_RateLimit
	RateLimitChoice isGetSpecType_RateLimitChoice     `protobuf_oneof:"rate_limit_choice"`
	TrustedClients  []*common_waf.SimpleClientSrcRule `protobuf:"bytes,97,rep,name=trusted_clients,json=trustedClients,proto3" json:"trusted_clients,omitempty"`
	BlockedClients  []*common_waf.SimpleClientSrcRule `protobuf:"bytes,98,rep,name=blocked_clients,json=blockedClients,proto3" json:"blocked_clients,omitempty"`
	CorsPolicy      *schema.CorsPolicy                `protobuf:"bytes,99,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{41}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_LoadbalancerType interface {
	isGetSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_WafChoice interface {
	isGetSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_BotDefenseChoice interface {
	isGetSpecType_BotDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ApiDefinitionChoice interface {
	isGetSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ApiDiscoveryChoice interface {
	isGetSpecType_ApiDiscoveryChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_SensitiveDataPolicyChoice interface {
	isGetSpecType_SensitiveDataPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_L7DdosAutoMitigationAction interface {
	isGetSpecType_L7DdosAutoMitigationAction()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_SlowDdosMitigationChoice interface {
	isGetSpecType_SlowDdosMitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ClientSideDefenseChoice interface {
	isGetSpecType_ClientSideDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ServicePolicyChoice interface {
	isGetSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_IpReputationChoice interface {
	isGetSpecType_IpReputationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ThreatMeshChoice interface {
	isGetSpecType_ThreatMeshChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_UserIdChoice interface {
	isGetSpecType_UserIdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_MaliciousUserDetectionChoice interface {
	isGetSpecType_MaliciousUserDetectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ChallengeType interface {
	isGetSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_RateLimitChoice interface {
	isGetSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Http struct {
	Http *http_loadbalancer.ProxyTypeHttp `protobuf:"bytes,3,opt,name=http,proto3,oneof" json:"http,omitempty"`
}
type GetSpecType_HttpsAutoCert struct {
	HttpsAutoCert *CDNHTTPSAutoCertsType `protobuf:"bytes,18,opt,name=https_auto_cert,json=httpsAutoCert,proto3,oneof" json:"https_auto_cert,omitempty"`
}
type GetSpecType_Https struct {
	Https *CDNHTTPSCustomCertsType `protobuf:"bytes,19,opt,name=https,proto3,oneof" json:"https,omitempty"`
}
type GetSpecType_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,31,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type GetSpecType_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,32,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type GetSpecType_AppFirewallOnCacheMiss struct {
	AppFirewallOnCacheMiss *views.ObjectRefType `protobuf:"bytes,33,opt,name=app_firewall_on_cache_miss,json=appFirewallOnCacheMiss,proto3,oneof" json:"app_firewall_on_cache_miss,omitempty"`
}
type GetSpecType_DisableBotDefense struct {
	DisableBotDefense *schema.Empty `protobuf:"bytes,40,opt,name=disable_bot_defense,json=disableBotDefense,proto3,oneof" json:"disable_bot_defense,omitempty"`
}
type GetSpecType_BotDefense struct {
	BotDefense *common_security.ShapeBotDefenseType `protobuf:"bytes,41,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type GetSpecType_BotDefenseAdvanced struct {
	BotDefenseAdvanced *common_security.BotDefenseAdvancedType `protobuf:"bytes,42,opt,name=bot_defense_advanced,json=botDefenseAdvanced,proto3,oneof" json:"bot_defense_advanced,omitempty"`
}
type GetSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,44,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type GetSpecType_ApiSpecification struct {
	ApiSpecification *common_waf.APISpecificationSettings `protobuf:"bytes,45,opt,name=api_specification,json=apiSpecification,proto3,oneof" json:"api_specification,omitempty"`
}
type GetSpecType_ApiSpecificationOnCacheMiss struct {
	ApiSpecificationOnCacheMiss *common_waf.APISpecificationSettings `protobuf:"bytes,46,opt,name=api_specification_on_cache_miss,json=apiSpecificationOnCacheMiss,proto3,oneof" json:"api_specification_on_cache_miss,omitempty"`
}
type GetSpecType_EnableApiDiscovery struct {
	EnableApiDiscovery *common_waf.ApiDiscoverySetting `protobuf:"bytes,51,opt,name=enable_api_discovery,json=enableApiDiscovery,proto3,oneof" json:"enable_api_discovery,omitempty"`
}
type GetSpecType_DisableApiDiscovery struct {
	DisableApiDiscovery *schema.Empty `protobuf:"bytes,50,opt,name=disable_api_discovery,json=disableApiDiscovery,proto3,oneof" json:"disable_api_discovery,omitempty"`
}
type GetSpecType_ApiDiscoveryOnCacheMiss struct {
	ApiDiscoveryOnCacheMiss *common_waf.ApiDiscoverySetting `protobuf:"bytes,52,opt,name=api_discovery_on_cache_miss,json=apiDiscoveryOnCacheMiss,proto3,oneof" json:"api_discovery_on_cache_miss,omitempty"`
}
type GetSpecType_DefaultSensitiveDataPolicy struct {
	DefaultSensitiveDataPolicy *schema.Empty `protobuf:"bytes,54,opt,name=default_sensitive_data_policy,json=defaultSensitiveDataPolicy,proto3,oneof" json:"default_sensitive_data_policy,omitempty"`
}
type GetSpecType_SensitiveDataPolicy struct {
	SensitiveDataPolicy *common_security.SensitiveDataPolicySettings `protobuf:"bytes,55,opt,name=sensitive_data_policy,json=sensitiveDataPolicy,proto3,oneof" json:"sensitive_data_policy,omitempty"`
}
type GetSpecType_L7DdosActionDefault struct {
	L7DdosActionDefault *schema.Empty `protobuf:"bytes,57,opt,name=l7_ddos_action_default,json=l7DdosActionDefault,proto3,oneof" json:"l7_ddos_action_default,omitempty"`
}
type GetSpecType_L7DdosActionBlock struct {
	L7DdosActionBlock *schema.Empty `protobuf:"bytes,58,opt,name=l7_ddos_action_block,json=l7DdosActionBlock,proto3,oneof" json:"l7_ddos_action_block,omitempty"`
}
type GetSpecType_L7DdosActionJsChallenge struct {
	L7DdosActionJsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,59,opt,name=l7_ddos_action_js_challenge,json=l7DdosActionJsChallenge,proto3,oneof" json:"l7_ddos_action_js_challenge,omitempty"`
}
type GetSpecType_L7DdosActionNone struct {
	L7DdosActionNone *schema.Empty `protobuf:"bytes,60,opt,name=l7_ddos_action_none,json=l7DdosActionNone,proto3,oneof" json:"l7_ddos_action_none,omitempty"`
}
type GetSpecType_SystemDefaultTimeouts struct {
	SystemDefaultTimeouts *schema.Empty `protobuf:"bytes,63,opt,name=system_default_timeouts,json=systemDefaultTimeouts,proto3,oneof" json:"system_default_timeouts,omitempty"`
}
type GetSpecType_SlowDdosMitigation struct {
	SlowDdosMitigation *virtual_host.SlowDDoSMitigation `protobuf:"bytes,64,opt,name=slow_ddos_mitigation,json=slowDdosMitigation,proto3,oneof" json:"slow_ddos_mitigation,omitempty"`
}
type GetSpecType_DisableClientSideDefense struct {
	DisableClientSideDefense *schema.Empty `protobuf:"bytes,66,opt,name=disable_client_side_defense,json=disableClientSideDefense,proto3,oneof" json:"disable_client_side_defense,omitempty"`
}
type GetSpecType_ClientSideDefense struct {
	ClientSideDefense *common_security.ClientSideDefenseType `protobuf:"bytes,67,opt,name=client_side_defense,json=clientSideDefense,proto3,oneof" json:"client_side_defense,omitempty"`
}
type GetSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,69,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type GetSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,70,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type GetSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *common_waf.ServicePolicyList `protobuf:"bytes,71,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}
type GetSpecType_DisableIpReputation struct {
	DisableIpReputation *schema.Empty `protobuf:"bytes,73,opt,name=disable_ip_reputation,json=disableIpReputation,proto3,oneof" json:"disable_ip_reputation,omitempty"`
}
type GetSpecType_EnableIpReputation struct {
	EnableIpReputation *common_waf.IPThreatCategoryListType `protobuf:"bytes,74,opt,name=enable_ip_reputation,json=enableIpReputation,proto3,oneof" json:"enable_ip_reputation,omitempty"`
}
type GetSpecType_IpReputationOnCacheMiss struct {
	IpReputationOnCacheMiss *common_waf.IPThreatCategoryListType `protobuf:"bytes,75,opt,name=ip_reputation_on_cache_miss,json=ipReputationOnCacheMiss,proto3,oneof" json:"ip_reputation_on_cache_miss,omitempty"`
}
type GetSpecType_DisableThreatMesh struct {
	DisableThreatMesh *schema.Empty `protobuf:"bytes,77,opt,name=disable_threat_mesh,json=disableThreatMesh,proto3,oneof" json:"disable_threat_mesh,omitempty"`
}
type GetSpecType_EnableThreatMesh struct {
	EnableThreatMesh *schema.Empty `protobuf:"bytes,78,opt,name=enable_threat_mesh,json=enableThreatMesh,proto3,oneof" json:"enable_threat_mesh,omitempty"`
}
type GetSpecType_UserIdClientIp struct {
	UserIdClientIp *schema.Empty `protobuf:"bytes,80,opt,name=user_id_client_ip,json=userIdClientIp,proto3,oneof" json:"user_id_client_ip,omitempty"`
}
type GetSpecType_UserIdentification struct {
	UserIdentification *views.ObjectRefType `protobuf:"bytes,81,opt,name=user_identification,json=userIdentification,proto3,oneof" json:"user_identification,omitempty"`
}
type GetSpecType_DisableMaliciousUserDetection struct {
	DisableMaliciousUserDetection *schema.Empty `protobuf:"bytes,83,opt,name=disable_malicious_user_detection,json=disableMaliciousUserDetection,proto3,oneof" json:"disable_malicious_user_detection,omitempty"`
}
type GetSpecType_EnableMaliciousUserDetection struct {
	EnableMaliciousUserDetection *schema.Empty `protobuf:"bytes,84,opt,name=enable_malicious_user_detection,json=enableMaliciousUserDetection,proto3,oneof" json:"enable_malicious_user_detection,omitempty"`
}
type GetSpecType_MaliciousUserDetectionOnCacheMiss struct {
	MaliciousUserDetectionOnCacheMiss *schema.Empty `protobuf:"bytes,85,opt,name=malicious_user_detection_on_cache_miss,json=maliciousUserDetectionOnCacheMiss,proto3,oneof" json:"malicious_user_detection_on_cache_miss,omitempty"`
}
type GetSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,87,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type GetSpecType_EnableChallenge struct {
	EnableChallenge *common_waf.EnableChallenge `protobuf:"bytes,88,opt,name=enable_challenge,json=enableChallenge,proto3,oneof" json:"enable_challenge,omitempty"`
}
type GetSpecType_ChallengeOnCacheMiss struct {
	ChallengeOnCacheMiss *common_waf.EnableChallenge `protobuf:"bytes,89,opt,name=challenge_on_cache_miss,json=challengeOnCacheMiss,proto3,oneof" json:"challenge_on_cache_miss,omitempty"`
}
type GetSpecType_JsChallenge struct {
	JsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,90,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type GetSpecType_CaptchaChallenge struct {
	CaptchaChallenge *virtual_host.CaptchaChallengeType `protobuf:"bytes,91,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type GetSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *common_waf.PolicyBasedChallenge `protobuf:"bytes,92,opt,name=policy_based_challenge,json=policyBasedChallenge,proto3,oneof" json:"policy_based_challenge,omitempty"`
}
type GetSpecType_DisableRateLimit struct {
	DisableRateLimit *schema.Empty `protobuf:"bytes,94,opt,name=disable_rate_limit,json=disableRateLimit,proto3,oneof" json:"disable_rate_limit,omitempty"`
}
type GetSpecType_ApiRateLimit struct {
	ApiRateLimit *common_waf.APIRateLimit `protobuf:"bytes,95,opt,name=api_rate_limit,json=apiRateLimit,proto3,oneof" json:"api_rate_limit,omitempty"`
}
type GetSpecType_RateLimit struct {
	RateLimit *common_waf.RateLimitConfigType `protobuf:"bytes,96,opt,name=rate_limit,json=rateLimit,proto3,oneof" json:"rate_limit,omitempty"`
}

func (*GetSpecType_Http) isGetSpecType_LoadbalancerType()                                          {}
func (*GetSpecType_HttpsAutoCert) isGetSpecType_LoadbalancerType()                                 {}
func (*GetSpecType_Https) isGetSpecType_LoadbalancerType()                                         {}
func (*GetSpecType_DisableWaf) isGetSpecType_WafChoice()                                           {}
func (*GetSpecType_AppFirewall) isGetSpecType_WafChoice()                                          {}
func (*GetSpecType_AppFirewallOnCacheMiss) isGetSpecType_WafChoice()                               {}
func (*GetSpecType_DisableBotDefense) isGetSpecType_BotDefenseChoice()                             {}
func (*GetSpecType_BotDefense) isGetSpecType_BotDefenseChoice()                                    {}
func (*GetSpecType_BotDefenseAdvanced) isGetSpecType_BotDefenseChoice()                            {}
func (*GetSpecType_DisableApiDefinition) isGetSpecType_ApiDefinitionChoice()                       {}
func (*GetSpecType_ApiSpecification) isGetSpecType_ApiDefinitionChoice()                           {}
func (*GetSpecType_ApiSpecificationOnCacheMiss) isGetSpecType_ApiDefinitionChoice()                {}
func (*GetSpecType_EnableApiDiscovery) isGetSpecType_ApiDiscoveryChoice()                          {}
func (*GetSpecType_DisableApiDiscovery) isGetSpecType_ApiDiscoveryChoice()                         {}
func (*GetSpecType_ApiDiscoveryOnCacheMiss) isGetSpecType_ApiDiscoveryChoice()                     {}
func (*GetSpecType_DefaultSensitiveDataPolicy) isGetSpecType_SensitiveDataPolicyChoice()           {}
func (*GetSpecType_SensitiveDataPolicy) isGetSpecType_SensitiveDataPolicyChoice()                  {}
func (*GetSpecType_L7DdosActionDefault) isGetSpecType_L7DdosAutoMitigationAction()                 {}
func (*GetSpecType_L7DdosActionBlock) isGetSpecType_L7DdosAutoMitigationAction()                   {}
func (*GetSpecType_L7DdosActionJsChallenge) isGetSpecType_L7DdosAutoMitigationAction()             {}
func (*GetSpecType_L7DdosActionNone) isGetSpecType_L7DdosAutoMitigationAction()                    {}
func (*GetSpecType_SystemDefaultTimeouts) isGetSpecType_SlowDdosMitigationChoice()                 {}
func (*GetSpecType_SlowDdosMitigation) isGetSpecType_SlowDdosMitigationChoice()                    {}
func (*GetSpecType_DisableClientSideDefense) isGetSpecType_ClientSideDefenseChoice()               {}
func (*GetSpecType_ClientSideDefense) isGetSpecType_ClientSideDefenseChoice()                      {}
func (*GetSpecType_ServicePoliciesFromNamespace) isGetSpecType_ServicePolicyChoice()               {}
func (*GetSpecType_NoServicePolicies) isGetSpecType_ServicePolicyChoice()                          {}
func (*GetSpecType_ActiveServicePolicies) isGetSpecType_ServicePolicyChoice()                      {}
func (*GetSpecType_DisableIpReputation) isGetSpecType_IpReputationChoice()                         {}
func (*GetSpecType_EnableIpReputation) isGetSpecType_IpReputationChoice()                          {}
func (*GetSpecType_IpReputationOnCacheMiss) isGetSpecType_IpReputationChoice()                     {}
func (*GetSpecType_DisableThreatMesh) isGetSpecType_ThreatMeshChoice()                             {}
func (*GetSpecType_EnableThreatMesh) isGetSpecType_ThreatMeshChoice()                              {}
func (*GetSpecType_UserIdClientIp) isGetSpecType_UserIdChoice()                                    {}
func (*GetSpecType_UserIdentification) isGetSpecType_UserIdChoice()                                {}
func (*GetSpecType_DisableMaliciousUserDetection) isGetSpecType_MaliciousUserDetectionChoice()     {}
func (*GetSpecType_EnableMaliciousUserDetection) isGetSpecType_MaliciousUserDetectionChoice()      {}
func (*GetSpecType_MaliciousUserDetectionOnCacheMiss) isGetSpecType_MaliciousUserDetectionChoice() {}
func (*GetSpecType_NoChallenge) isGetSpecType_ChallengeType()                                      {}
func (*GetSpecType_EnableChallenge) isGetSpecType_ChallengeType()                                  {}
func (*GetSpecType_ChallengeOnCacheMiss) isGetSpecType_ChallengeType()                             {}
func (*GetSpecType_JsChallenge) isGetSpecType_ChallengeType()                                      {}
func (*GetSpecType_CaptchaChallenge) isGetSpecType_ChallengeType()                                 {}
func (*GetSpecType_PolicyBasedChallenge) isGetSpecType_ChallengeType()                             {}
func (*GetSpecType_DisableRateLimit) isGetSpecType_RateLimitChoice()                               {}
func (*GetSpecType_ApiRateLimit) isGetSpecType_RateLimitChoice()                                   {}
func (*GetSpecType_RateLimit) isGetSpecType_RateLimitChoice()                                      {}

func (m *GetSpecType) GetLoadbalancerType() isGetSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *GetSpecType) GetWafChoice() isGetSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *GetSpecType) GetBotDefenseChoice() isGetSpecType_BotDefenseChoice {
	if m != nil {
		return m.BotDefenseChoice
	}
	return nil
}
func (m *GetSpecType) GetApiDefinitionChoice() isGetSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *GetSpecType) GetApiDiscoveryChoice() isGetSpecType_ApiDiscoveryChoice {
	if m != nil {
		return m.ApiDiscoveryChoice
	}
	return nil
}
func (m *GetSpecType) GetSensitiveDataPolicyChoice() isGetSpecType_SensitiveDataPolicyChoice {
	if m != nil {
		return m.SensitiveDataPolicyChoice
	}
	return nil
}
func (m *GetSpecType) GetL7DdosAutoMitigationAction() isGetSpecType_L7DdosAutoMitigationAction {
	if m != nil {
		return m.L7DdosAutoMitigationAction
	}
	return nil
}
func (m *GetSpecType) GetSlowDdosMitigationChoice() isGetSpecType_SlowDdosMitigationChoice {
	if m != nil {
		return m.SlowDdosMitigationChoice
	}
	return nil
}
func (m *GetSpecType) GetClientSideDefenseChoice() isGetSpecType_ClientSideDefenseChoice {
	if m != nil {
		return m.ClientSideDefenseChoice
	}
	return nil
}
func (m *GetSpecType) GetServicePolicyChoice() isGetSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *GetSpecType) GetIpReputationChoice() isGetSpecType_IpReputationChoice {
	if m != nil {
		return m.IpReputationChoice
	}
	return nil
}
func (m *GetSpecType) GetThreatMeshChoice() isGetSpecType_ThreatMeshChoice {
	if m != nil {
		return m.ThreatMeshChoice
	}
	return nil
}
func (m *GetSpecType) GetUserIdChoice() isGetSpecType_UserIdChoice {
	if m != nil {
		return m.UserIdChoice
	}
	return nil
}
func (m *GetSpecType) GetMaliciousUserDetectionChoice() isGetSpecType_MaliciousUserDetectionChoice {
	if m != nil {
		return m.MaliciousUserDetectionChoice
	}
	return nil
}
func (m *GetSpecType) GetChallengeType() isGetSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *GetSpecType) GetRateLimitChoice() isGetSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}

func (m *GetSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetSpecType) GetHttp() *http_loadbalancer.ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *GetSpecType) GetHttpsAutoCert() *CDNHTTPSAutoCertsType {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *GetSpecType) GetHttps() *CDNHTTPSCustomCertsType {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *GetSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *GetSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *GetSpecType) GetOriginPool() *CdnOriginPoolType {
	if m != nil {
		return m.OriginPool
	}
	return nil
}

func (m *GetSpecType) GetOtherSettings() *OtherSettings {
	if m != nil {
		return m.OtherSettings
	}
	return nil
}

func (m *GetSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetSpecType) GetDnsInfo() []*virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GetSpecType) GetState() virtual_host.VirtualHostState {
	if m != nil {
		return m.State
	}
	return virtual_host.VIRTUAL_HOST_READY
}

func (m *GetSpecType) GetAutoCertInfo() *virtual_host.AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

func (m *GetSpecType) GetServiceDomains() []*virtual_host.ServiceDomain {
	if m != nil {
		return m.ServiceDomains
	}
	return nil
}

func (m *GetSpecType) GetCertState() virtual_host.CertificationState {
	if m != nil {
		return m.CertState
	}
	return virtual_host.AutoCertDisabled
}

func (m *GetSpecType) GetDefaultCacheAction() *DefaultCacheAction {
	if m != nil {
		return m.DefaultCacheAction
	}
	return nil
}

func (m *GetSpecType) GetCacheRules() []*CDNCacheRule {
	if m != nil {
		return m.CacheRules
	}
	return nil
}

func (m *GetSpecType) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*GetSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *GetSpecType) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GetSpecType_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

func (m *GetSpecType) GetAppFirewallOnCacheMiss() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GetSpecType_AppFirewallOnCacheMiss); ok {
		return x.AppFirewallOnCacheMiss
	}
	return nil
}

func (m *GetSpecType) GetWafExclusionRules() []*policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *GetSpecType) GetDataGuardRules() []*policy.SimpleDataGuardRule {
	if m != nil {
		return m.DataGuardRules
	}
	return nil
}

func (m *GetSpecType) GetCsrfPolicy() *schema.CsrfPolicy {
	if m != nil {
		return m.CsrfPolicy
	}
	return nil
}

func (m *GetSpecType) GetGraphqlRules() []*policy.GraphQLRule {
	if m != nil {
		return m.GraphqlRules
	}
	return nil
}

func (m *GetSpecType) GetProtectedCookies() []*schema.CookieManipulationOptionType {
	if m != nil {
		return m.ProtectedCookies
	}
	return nil
}

func (m *GetSpecType) GetDisableBotDefense() *schema.Empty {
	if x, ok := m.GetBotDefenseChoice().(*GetSpecType_DisableBotDefense); ok {
		return x.DisableBotDefense
	}
	return nil
}

func (m *GetSpecType) GetBotDefense() *common_security.ShapeBotDefenseType {
	if x, ok := m.GetBotDefenseChoice().(*GetSpecType_BotDefense); ok {
		return x.BotDefense
	}
	return nil
}

func (m *GetSpecType) GetBotDefenseAdvanced() *common_security.BotDefenseAdvancedType {
	if x, ok := m.GetBotDefenseChoice().(*GetSpecType_BotDefenseAdvanced); ok {
		return x.BotDefenseAdvanced
	}
	return nil
}

func (m *GetSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*GetSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *GetSpecType) GetApiSpecification() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*GetSpecType_ApiSpecification); ok {
		return x.ApiSpecification
	}
	return nil
}

func (m *GetSpecType) GetApiSpecificationOnCacheMiss() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*GetSpecType_ApiSpecificationOnCacheMiss); ok {
		return x.ApiSpecificationOnCacheMiss
	}
	return nil
}

func (m *GetSpecType) GetApiProtectionRules() *common_waf.APIProtectionRules {
	if m != nil {
		return m.ApiProtectionRules
	}
	return nil
}

func (m *GetSpecType) GetJwtValidation() *common_waf.JWTValidation {
	if m != nil {
		return m.JwtValidation
	}
	return nil
}

func (m *GetSpecType) GetEnableApiDiscovery() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*GetSpecType_EnableApiDiscovery); ok {
		return x.EnableApiDiscovery
	}
	return nil
}

func (m *GetSpecType) GetDisableApiDiscovery() *schema.Empty {
	if x, ok := m.GetApiDiscoveryChoice().(*GetSpecType_DisableApiDiscovery); ok {
		return x.DisableApiDiscovery
	}
	return nil
}

func (m *GetSpecType) GetApiDiscoveryOnCacheMiss() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*GetSpecType_ApiDiscoveryOnCacheMiss); ok {
		return x.ApiDiscoveryOnCacheMiss
	}
	return nil
}

func (m *GetSpecType) GetDefaultSensitiveDataPolicy() *schema.Empty {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*GetSpecType_DefaultSensitiveDataPolicy); ok {
		return x.DefaultSensitiveDataPolicy
	}
	return nil
}

func (m *GetSpecType) GetSensitiveDataPolicy() *common_security.SensitiveDataPolicySettings {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*GetSpecType_SensitiveDataPolicy); ok {
		return x.SensitiveDataPolicy
	}
	return nil
}

func (m *GetSpecType) GetL7DdosActionDefault() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionDefault); ok {
		return x.L7DdosActionDefault
	}
	return nil
}

func (m *GetSpecType) GetL7DdosActionBlock() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionBlock); ok {
		return x.L7DdosActionBlock
	}
	return nil
}

func (m *GetSpecType) GetL7DdosActionJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionJsChallenge); ok {
		return x.L7DdosActionJsChallenge
	}
	return nil
}

func (m *GetSpecType) GetL7DdosActionNone() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionNone); ok {
		return x.L7DdosActionNone
	}
	return nil
}

func (m *GetSpecType) GetDdosMitigationRules() []*common_security.DDoSMitigationRule {
	if m != nil {
		return m.DdosMitigationRules
	}
	return nil
}

func (m *GetSpecType) GetSystemDefaultTimeouts() *schema.Empty {
	if x, ok := m.GetSlowDdosMitigationChoice().(*GetSpecType_SystemDefaultTimeouts); ok {
		return x.SystemDefaultTimeouts
	}
	return nil
}

func (m *GetSpecType) GetSlowDdosMitigation() *virtual_host.SlowDDoSMitigation {
	if x, ok := m.GetSlowDdosMitigationChoice().(*GetSpecType_SlowDdosMitigation); ok {
		return x.SlowDdosMitigation
	}
	return nil
}

func (m *GetSpecType) GetDisableClientSideDefense() *schema.Empty {
	if x, ok := m.GetClientSideDefenseChoice().(*GetSpecType_DisableClientSideDefense); ok {
		return x.DisableClientSideDefense
	}
	return nil
}

func (m *GetSpecType) GetClientSideDefense() *common_security.ClientSideDefenseType {
	if x, ok := m.GetClientSideDefenseChoice().(*GetSpecType_ClientSideDefense); ok {
		return x.ClientSideDefense
	}
	return nil
}

func (m *GetSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *GetSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *GetSpecType) GetActiveServicePolicies() *common_waf.ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *GetSpecType) GetDisableIpReputation() *schema.Empty {
	if x, ok := m.GetIpReputationChoice().(*GetSpecType_DisableIpReputation); ok {
		return x.DisableIpReputation
	}
	return nil
}

func (m *GetSpecType) GetEnableIpReputation() *common_waf.IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*GetSpecType_EnableIpReputation); ok {
		return x.EnableIpReputation
	}
	return nil
}

func (m *GetSpecType) GetIpReputationOnCacheMiss() *common_waf.IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*GetSpecType_IpReputationOnCacheMiss); ok {
		return x.IpReputationOnCacheMiss
	}
	return nil
}

func (m *GetSpecType) GetDisableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*GetSpecType_DisableThreatMesh); ok {
		return x.DisableThreatMesh
	}
	return nil
}

func (m *GetSpecType) GetEnableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*GetSpecType_EnableThreatMesh); ok {
		return x.EnableThreatMesh
	}
	return nil
}

func (m *GetSpecType) GetUserIdClientIp() *schema.Empty {
	if x, ok := m.GetUserIdChoice().(*GetSpecType_UserIdClientIp); ok {
		return x.UserIdClientIp
	}
	return nil
}

func (m *GetSpecType) GetUserIdentification() *views.ObjectRefType {
	if x, ok := m.GetUserIdChoice().(*GetSpecType_UserIdentification); ok {
		return x.UserIdentification
	}
	return nil
}

func (m *GetSpecType) GetDisableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*GetSpecType_DisableMaliciousUserDetection); ok {
		return x.DisableMaliciousUserDetection
	}
	return nil
}

func (m *GetSpecType) GetEnableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*GetSpecType_EnableMaliciousUserDetection); ok {
		return x.EnableMaliciousUserDetection
	}
	return nil
}

func (m *GetSpecType) GetMaliciousUserDetectionOnCacheMiss() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*GetSpecType_MaliciousUserDetectionOnCacheMiss); ok {
		return x.MaliciousUserDetectionOnCacheMiss
	}
	return nil
}

func (m *GetSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*GetSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *GetSpecType) GetEnableChallenge() *common_waf.EnableChallenge {
	if x, ok := m.GetChallengeType().(*GetSpecType_EnableChallenge); ok {
		return x.EnableChallenge
	}
	return nil
}

func (m *GetSpecType) GetChallengeOnCacheMiss() *common_waf.EnableChallenge {
	if x, ok := m.GetChallengeType().(*GetSpecType_ChallengeOnCacheMiss); ok {
		return x.ChallengeOnCacheMiss
	}
	return nil
}

func (m *GetSpecType) GetJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*GetSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *GetSpecType) GetCaptchaChallenge() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*GetSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *GetSpecType) GetPolicyBasedChallenge() *common_waf.PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*GetSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *GetSpecType) GetDisableRateLimit() *schema.Empty {
	if x, ok := m.GetRateLimitChoice().(*GetSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *GetSpecType) GetApiRateLimit() *common_waf.APIRateLimit {
	if x, ok := m.GetRateLimitChoice().(*GetSpecType_ApiRateLimit); ok {
		return x.ApiRateLimit
	}
	return nil
}

func (m *GetSpecType) GetRateLimit() *common_waf.RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*GetSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *GetSpecType) GetTrustedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *GetSpecType) GetBlockedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *GetSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Http)(nil),
		(*GetSpecType_HttpsAutoCert)(nil),
		(*GetSpecType_Https)(nil),
		(*GetSpecType_DisableWaf)(nil),
		(*GetSpecType_AppFirewall)(nil),
		(*GetSpecType_AppFirewallOnCacheMiss)(nil),
		(*GetSpecType_DisableBotDefense)(nil),
		(*GetSpecType_BotDefense)(nil),
		(*GetSpecType_BotDefenseAdvanced)(nil),
		(*GetSpecType_DisableApiDefinition)(nil),
		(*GetSpecType_ApiSpecification)(nil),
		(*GetSpecType_ApiSpecificationOnCacheMiss)(nil),
		(*GetSpecType_EnableApiDiscovery)(nil),
		(*GetSpecType_DisableApiDiscovery)(nil),
		(*GetSpecType_ApiDiscoveryOnCacheMiss)(nil),
		(*GetSpecType_DefaultSensitiveDataPolicy)(nil),
		(*GetSpecType_SensitiveDataPolicy)(nil),
		(*GetSpecType_L7DdosActionDefault)(nil),
		(*GetSpecType_L7DdosActionBlock)(nil),
		(*GetSpecType_L7DdosActionJsChallenge)(nil),
		(*GetSpecType_L7DdosActionNone)(nil),
		(*GetSpecType_SystemDefaultTimeouts)(nil),
		(*GetSpecType_SlowDdosMitigation)(nil),
		(*GetSpecType_DisableClientSideDefense)(nil),
		(*GetSpecType_ClientSideDefense)(nil),
		(*GetSpecType_ServicePoliciesFromNamespace)(nil),
		(*GetSpecType_NoServicePolicies)(nil),
		(*GetSpecType_ActiveServicePolicies)(nil),
		(*GetSpecType_DisableIpReputation)(nil),
		(*GetSpecType_EnableIpReputation)(nil),
		(*GetSpecType_IpReputationOnCacheMiss)(nil),
		(*GetSpecType_DisableThreatMesh)(nil),
		(*GetSpecType_EnableThreatMesh)(nil),
		(*GetSpecType_UserIdClientIp)(nil),
		(*GetSpecType_UserIdentification)(nil),
		(*GetSpecType_DisableMaliciousUserDetection)(nil),
		(*GetSpecType_EnableMaliciousUserDetection)(nil),
		(*GetSpecType_MaliciousUserDetectionOnCacheMiss)(nil),
		(*GetSpecType_NoChallenge)(nil),
		(*GetSpecType_EnableChallenge)(nil),
		(*GetSpecType_ChallengeOnCacheMiss)(nil),
		(*GetSpecType_JsChallenge)(nil),
		(*GetSpecType_CaptchaChallenge)(nil),
		(*GetSpecType_PolicyBasedChallenge)(nil),
		(*GetSpecType_DisableRateLimit)(nil),
		(*GetSpecType_ApiRateLimit)(nil),
		(*GetSpecType_RateLimit)(nil),
	}
}

// Metrics Filter options
//
// x-displayName: "Metrics Filter"
// CDN Metrics filter options
type LilacCDNMetricsFilter struct {
	// Metrics Filter Tag options
	//
	// x-displayName: "Filter Tags"
	// x-required
	// Tags on which CDN metrics can be filtered by
	Tag LilacCDNMetricsTag `protobuf:"varint,1,opt,name=tag,proto3,enum=ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsTag" json:"tag,omitempty"`
	// Filter values
	//
	// x-displayName: "Filter values"
	// x-example: "[IN, US]"
	// x-required
	// Filter values
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	// Metrics Operator Types
	//
	// x-displayName: "Metrics Operator Types"
	// x-required
	// Operators possible in filtering
	Operator LilacCDNMetricsOperatorType `protobuf:"varint,3,opt,name=operator,proto3,enum=ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsOperatorType" json:"operator,omitempty"`
}

func (m *LilacCDNMetricsFilter) Reset()      { *m = LilacCDNMetricsFilter{} }
func (*LilacCDNMetricsFilter) ProtoMessage() {}
func (*LilacCDNMetricsFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{42}
}
func (m *LilacCDNMetricsFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LilacCDNMetricsFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LilacCDNMetricsFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LilacCDNMetricsFilter.Merge(m, src)
}
func (m *LilacCDNMetricsFilter) XXX_Size() int {
	return m.Size()
}
func (m *LilacCDNMetricsFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_LilacCDNMetricsFilter.DiscardUnknown(m)
}

var xxx_messageInfo_LilacCDNMetricsFilter proto.InternalMessageInfo

func (m *LilacCDNMetricsFilter) GetTag() LilacCDNMetricsTag {
	if m != nil {
		return m.Tag
	}
	return CDN_DISTRIBUTION_NAME
}

func (m *LilacCDNMetricsFilter) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *LilacCDNMetricsFilter) GetOperator() LilacCDNMetricsOperatorType {
	if m != nil {
		return m.Operator
	}
	return OPERATOR_TYPE_IN
}

// Metrics group by options
//
// x-displayName: "Metrics Group By"
// CDN Metrics group by options
type LilacCDNMetricsResponseGroupBy struct {
	// Metric Group-By Tags
	//
	// x-displayName: "Group By Tags"
	// Tag on which CDN metric was requested to be grouped in request
	Name LilacCDNMetricsTag `protobuf:"varint,1,opt,name=name,proto3,enum=ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsTag" json:"name,omitempty"`
	// Group-By tag Value
	//
	// x-displayName: "Group By Tag Value"
	// Group-By tag Value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LilacCDNMetricsResponseGroupBy) Reset()      { *m = LilacCDNMetricsResponseGroupBy{} }
func (*LilacCDNMetricsResponseGroupBy) ProtoMessage() {}
func (*LilacCDNMetricsResponseGroupBy) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{43}
}
func (m *LilacCDNMetricsResponseGroupBy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LilacCDNMetricsResponseGroupBy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LilacCDNMetricsResponseGroupBy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LilacCDNMetricsResponseGroupBy.Merge(m, src)
}
func (m *LilacCDNMetricsResponseGroupBy) XXX_Size() int {
	return m.Size()
}
func (m *LilacCDNMetricsResponseGroupBy) XXX_DiscardUnknown() {
	xxx_messageInfo_LilacCDNMetricsResponseGroupBy.DiscardUnknown(m)
}

var xxx_messageInfo_LilacCDNMetricsResponseGroupBy proto.InternalMessageInfo

func (m *LilacCDNMetricsResponseGroupBy) GetName() LilacCDNMetricsTag {
	if m != nil {
		return m.Name
	}
	return CDN_DISTRIBUTION_NAME
}

func (m *LilacCDNMetricsResponseGroupBy) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Metrics Response Value
//
// x-displayName: "Metrics Response Value"
// CDN Metrics response value
type LilacCDNMetricsResponseValue struct {
	// Metric Timestamp
	//
	// x-displayName: "Metric Timestamp"
	// Metric Timestamp in unix_timestamp
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Metric Value
	//
	// x-displayName: "Metric Value"
	// Metric Value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LilacCDNMetricsResponseValue) Reset()      { *m = LilacCDNMetricsResponseValue{} }
func (*LilacCDNMetricsResponseValue) ProtoMessage() {}
func (*LilacCDNMetricsResponseValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{44}
}
func (m *LilacCDNMetricsResponseValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LilacCDNMetricsResponseValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LilacCDNMetricsResponseValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LilacCDNMetricsResponseValue.Merge(m, src)
}
func (m *LilacCDNMetricsResponseValue) XXX_Size() int {
	return m.Size()
}
func (m *LilacCDNMetricsResponseValue) XXX_DiscardUnknown() {
	xxx_messageInfo_LilacCDNMetricsResponseValue.DiscardUnknown(m)
}

var xxx_messageInfo_LilacCDNMetricsResponseValue proto.InternalMessageInfo

func (m *LilacCDNMetricsResponseValue) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *LilacCDNMetricsResponseValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Metrics Series
//
// x-displayName: "Metrics Response Series"
// CDN Metrics response series.
// Each series instance has data for a combination of group-by tag values.
type LilacCDNMetricsResponseSeries struct {
	// Metrics group by options
	//
	// x-displayName: "Metrics Group By"
	// CDN Metrics group-by tag combination.
	GroupBy []*LilacCDNMetricsResponseGroupBy `protobuf:"bytes,1,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	// Metrics Response Value
	//
	// x-displayName: "Metrics Response Value"
	// CDN Metrics data for the series.
	Value []*LilacCDNMetricsResponseValue `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (m *LilacCDNMetricsResponseSeries) Reset()      { *m = LilacCDNMetricsResponseSeries{} }
func (*LilacCDNMetricsResponseSeries) ProtoMessage() {}
func (*LilacCDNMetricsResponseSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{45}
}
func (m *LilacCDNMetricsResponseSeries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LilacCDNMetricsResponseSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LilacCDNMetricsResponseSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LilacCDNMetricsResponseSeries.Merge(m, src)
}
func (m *LilacCDNMetricsResponseSeries) XXX_Size() int {
	return m.Size()
}
func (m *LilacCDNMetricsResponseSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_LilacCDNMetricsResponseSeries.DiscardUnknown(m)
}

var xxx_messageInfo_LilacCDNMetricsResponseSeries proto.InternalMessageInfo

func (m *LilacCDNMetricsResponseSeries) GetGroupBy() []*LilacCDNMetricsResponseGroupBy {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *LilacCDNMetricsResponseSeries) GetValue() []*LilacCDNMetricsResponseValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// Metrics Response Data
//
// x-displayName: "Metrics Response Data"
// CDN Metrics response data. This is specific to a metric field.
type LilacCDNMetricsResponseData struct {
	// Metrics Field Selector options
	//
	// x-displayName: "Metrics Field Selector"
	// Metrics field for this response message
	Type LilacCDNMetricsFieldSelector `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsFieldSelector" json:"type,omitempty"`
	// Metric Unit
	//
	// x-displayName: "Metric Unit"
	// Metric Unit of the field in this message
	Unit LilacCDNMetricUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricUnit" json:"unit,omitempty"`
	// Metrics Series
	//
	// x-displayName: "Metrics Response Series"
	// CDN Metrics response series for the field in this message
	Series []*LilacCDNMetricsResponseSeries `protobuf:"bytes,3,rep,name=series,proto3" json:"series,omitempty"`
}

func (m *LilacCDNMetricsResponseData) Reset()      { *m = LilacCDNMetricsResponseData{} }
func (*LilacCDNMetricsResponseData) ProtoMessage() {}
func (*LilacCDNMetricsResponseData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2659efdd085843, []int{46}
}
func (m *LilacCDNMetricsResponseData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LilacCDNMetricsResponseData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LilacCDNMetricsResponseData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LilacCDNMetricsResponseData.Merge(m, src)
}
func (m *LilacCDNMetricsResponseData) XXX_Size() int {
	return m.Size()
}
func (m *LilacCDNMetricsResponseData) XXX_DiscardUnknown() {
	xxx_messageInfo_LilacCDNMetricsResponseData.DiscardUnknown(m)
}

var xxx_messageInfo_LilacCDNMetricsResponseData proto.InternalMessageInfo

func (m *LilacCDNMetricsResponseData) GetType() LilacCDNMetricsFieldSelector {
	if m != nil {
		return m.Type
	}
	return REQUEST_TOTAL_SUM
}

func (m *LilacCDNMetricsResponseData) GetUnit() LilacCDNMetricUnit {
	if m != nil {
		return m.Unit
	}
	return COUNT
}

func (m *LilacCDNMetricsResponseData) GetSeries() []*LilacCDNMetricsResponseSeries {
	if m != nil {
		return m.Series
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.HeaderOptions", HeaderOptions_name, HeaderOptions_value)
	golang_proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.HeaderOptions", HeaderOptions_name, HeaderOptions_value)
	proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsFieldSelector", LilacCDNMetricsFieldSelector_name, LilacCDNMetricsFieldSelector_value)
	golang_proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsFieldSelector", LilacCDNMetricsFieldSelector_name, LilacCDNMetricsFieldSelector_value)
	proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsTag", LilacCDNMetricsTag_name, LilacCDNMetricsTag_value)
	golang_proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsTag", LilacCDNMetricsTag_name, LilacCDNMetricsTag_value)
	proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsOperatorType", LilacCDNMetricsOperatorType_name, LilacCDNMetricsOperatorType_value)
	golang_proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsOperatorType", LilacCDNMetricsOperatorType_name, LilacCDNMetricsOperatorType_value)
	proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricUnit", LilacCDNMetricUnit_name, LilacCDNMetricUnit_value)
	golang_proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricUnit", LilacCDNMetricUnit_name, LilacCDNMetricUnit_value)
	proto.RegisterType((*ProxyTypeHttpsAutoCerts)(nil), "ves.io.schema.views.cdn_loadbalancer.ProxyTypeHttpsAutoCerts")
	golang_proto.RegisterType((*ProxyTypeHttpsAutoCerts)(nil), "ves.io.schema.views.cdn_loadbalancer.ProxyTypeHttpsAutoCerts")
	proto.RegisterType((*HeaderControlType)(nil), "ves.io.schema.views.cdn_loadbalancer.HeaderControlType")
	golang_proto.RegisterType((*HeaderControlType)(nil), "ves.io.schema.views.cdn_loadbalancer.HeaderControlType")
	proto.RegisterType((*WebApplicationFirewall)(nil), "ves.io.schema.views.cdn_loadbalancer.WebApplicationFirewall")
	golang_proto.RegisterType((*WebApplicationFirewall)(nil), "ves.io.schema.views.cdn_loadbalancer.WebApplicationFirewall")
	proto.RegisterType((*BotProtection)(nil), "ves.io.schema.views.cdn_loadbalancer.BotProtection")
	golang_proto.RegisterType((*BotProtection)(nil), "ves.io.schema.views.cdn_loadbalancer.BotProtection")
	proto.RegisterType((*DoSProtection)(nil), "ves.io.schema.views.cdn_loadbalancer.DoSProtection")
	golang_proto.RegisterType((*DoSProtection)(nil), "ves.io.schema.views.cdn_loadbalancer.DoSProtection")
	proto.RegisterType((*OtherSettings)(nil), "ves.io.schema.views.cdn_loadbalancer.OtherSettings")
	golang_proto.RegisterType((*OtherSettings)(nil), "ves.io.schema.views.cdn_loadbalancer.OtherSettings")
	proto.RegisterType((*ClientSideDefense)(nil), "ves.io.schema.views.cdn_loadbalancer.ClientSideDefense")
	golang_proto.RegisterType((*ClientSideDefense)(nil), "ves.io.schema.views.cdn_loadbalancer.ClientSideDefense")
	proto.RegisterType((*CommonSecurityControls)(nil), "ves.io.schema.views.cdn_loadbalancer.CommonSecurityControls")
	golang_proto.RegisterType((*CommonSecurityControls)(nil), "ves.io.schema.views.cdn_loadbalancer.CommonSecurityControls")
	proto.RegisterType((*ApiProtection)(nil), "ves.io.schema.views.cdn_loadbalancer.ApiProtection")
	golang_proto.RegisterType((*ApiProtection)(nil), "ves.io.schema.views.cdn_loadbalancer.ApiProtection")
	proto.RegisterType((*SecurityOptionsType)(nil), "ves.io.schema.views.cdn_loadbalancer.SecurityOptionsType")
	golang_proto.RegisterType((*SecurityOptionsType)(nil), "ves.io.schema.views.cdn_loadbalancer.SecurityOptionsType")
	proto.RegisterType((*LoggingOptionsType)(nil), "ves.io.schema.views.cdn_loadbalancer.LoggingOptionsType")
	golang_proto.RegisterType((*LoggingOptionsType)(nil), "ves.io.schema.views.cdn_loadbalancer.LoggingOptionsType")
	proto.RegisterType((*CDNCacheRuleExpressionList)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNCacheRuleExpressionList")
	golang_proto.RegisterType((*CDNCacheRuleExpressionList)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNCacheRuleExpressionList")
	proto.RegisterType((*CacheOperator)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheOperator")
	golang_proto.RegisterType((*CacheOperator)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheOperator")
	proto.RegisterType((*CacheHeaderMatcherType)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheHeaderMatcherType")
	golang_proto.RegisterType((*CacheHeaderMatcherType)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheHeaderMatcherType")
	proto.RegisterType((*CDNPathMatcherType)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNPathMatcherType")
	golang_proto.RegisterType((*CDNPathMatcherType)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNPathMatcherType")
	proto.RegisterType((*CacheCookieMatcherType)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheCookieMatcherType")
	golang_proto.RegisterType((*CacheCookieMatcherType)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheCookieMatcherType")
	proto.RegisterType((*CacheQueryParameterMatcherType)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheQueryParameterMatcherType")
	golang_proto.RegisterType((*CacheQueryParameterMatcherType)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheQueryParameterMatcherType")
	proto.RegisterType((*CDNCacheRuleExpression)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNCacheRuleExpression")
	golang_proto.RegisterType((*CDNCacheRuleExpression)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNCacheRuleExpression")
	proto.RegisterType((*CacheTTLEnableProps)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheTTLEnableProps")
	golang_proto.RegisterType((*CacheTTLEnableProps)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheTTLEnableProps")
	proto.RegisterType((*CacheEligibleOptions)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheEligibleOptions")
	golang_proto.RegisterType((*CacheEligibleOptions)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheEligibleOptions")
	proto.RegisterType((*CDNCacheRule)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNCacheRule")
	golang_proto.RegisterType((*CDNCacheRule)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNCacheRule")
	proto.RegisterType((*DefaultCacheTTLProps)(nil), "ves.io.schema.views.cdn_loadbalancer.DefaultCacheTTLProps")
	golang_proto.RegisterType((*DefaultCacheTTLProps)(nil), "ves.io.schema.views.cdn_loadbalancer.DefaultCacheTTLProps")
	proto.RegisterType((*DefaultCacheAction)(nil), "ves.io.schema.views.cdn_loadbalancer.DefaultCacheAction")
	golang_proto.RegisterType((*DefaultCacheAction)(nil), "ves.io.schema.views.cdn_loadbalancer.DefaultCacheAction")
	proto.RegisterType((*CacheOptions)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheOptions")
	golang_proto.RegisterType((*CacheOptions)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheOptions")
	proto.RegisterType((*CacheTTLOptionsType)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheTTLOptionsType")
	golang_proto.RegisterType((*CacheTTLOptionsType)(nil), "ves.io.schema.views.cdn_loadbalancer.CacheTTLOptionsType")
	proto.RegisterType((*AdvancedOptionsType)(nil), "ves.io.schema.views.cdn_loadbalancer.AdvancedOptionsType")
	golang_proto.RegisterType((*AdvancedOptionsType)(nil), "ves.io.schema.views.cdn_loadbalancer.AdvancedOptionsType")
	proto.RegisterType((*CDNTLSConfig)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNTLSConfig")
	golang_proto.RegisterType((*CDNTLSConfig)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNTLSConfig")
	proto.RegisterType((*CDNHTTPSAutoCertsType)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNHTTPSAutoCertsType")
	golang_proto.RegisterType((*CDNHTTPSAutoCertsType)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNHTTPSAutoCertsType")
	proto.RegisterType((*CDNDownstreamTlsParamsType)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNDownstreamTlsParamsType")
	golang_proto.RegisterType((*CDNDownstreamTlsParamsType)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNDownstreamTlsParamsType")
	proto.RegisterType((*CDNHTTPSCustomCertsType)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNHTTPSCustomCertsType")
	golang_proto.RegisterType((*CDNHTTPSCustomCertsType)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNHTTPSCustomCertsType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.cdn_loadbalancer.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.cdn_loadbalancer.GlobalSpecType")
	proto.RegisterType((*IpFilteringOptions)(nil), "ves.io.schema.views.cdn_loadbalancer.IpFilteringOptions")
	golang_proto.RegisterType((*IpFilteringOptions)(nil), "ves.io.schema.views.cdn_loadbalancer.IpFilteringOptions")
	proto.RegisterType((*GeoFilteringOptions)(nil), "ves.io.schema.views.cdn_loadbalancer.GeoFilteringOptions")
	golang_proto.RegisterType((*GeoFilteringOptions)(nil), "ves.io.schema.views.cdn_loadbalancer.GeoFilteringOptions")
	proto.RegisterType((*LogHeaderOptions)(nil), "ves.io.schema.views.cdn_loadbalancer.LogHeaderOptions")
	golang_proto.RegisterType((*LogHeaderOptions)(nil), "ves.io.schema.views.cdn_loadbalancer.LogHeaderOptions")
	proto.RegisterType((*CDNCustomAuthentication)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNCustomAuthentication")
	golang_proto.RegisterType((*CDNCustomAuthentication)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNCustomAuthentication")
	proto.RegisterType((*AuthenticationOptions)(nil), "ves.io.schema.views.cdn_loadbalancer.AuthenticationOptions")
	golang_proto.RegisterType((*AuthenticationOptions)(nil), "ves.io.schema.views.cdn_loadbalancer.AuthenticationOptions")
	proto.RegisterType((*CDNOriginServerType)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNOriginServerType")
	golang_proto.RegisterType((*CDNOriginServerType)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNOriginServerType")
	proto.RegisterType((*CdnOriginPoolType)(nil), "ves.io.schema.views.cdn_loadbalancer.CdnOriginPoolType")
	golang_proto.RegisterType((*CdnOriginPoolType)(nil), "ves.io.schema.views.cdn_loadbalancer.CdnOriginPoolType")
	proto.RegisterType((*OriginAdvancedConfiguration)(nil), "ves.io.schema.views.cdn_loadbalancer.OriginAdvancedConfiguration")
	golang_proto.RegisterType((*OriginAdvancedConfiguration)(nil), "ves.io.schema.views.cdn_loadbalancer.OriginAdvancedConfiguration")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.cdn_loadbalancer.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.cdn_loadbalancer.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.cdn_loadbalancer.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.cdn_loadbalancer.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.cdn_loadbalancer.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.cdn_loadbalancer.GetSpecType")
	proto.RegisterType((*LilacCDNMetricsFilter)(nil), "ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsFilter")
	golang_proto.RegisterType((*LilacCDNMetricsFilter)(nil), "ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsFilter")
	proto.RegisterType((*LilacCDNMetricsResponseGroupBy)(nil), "ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsResponseGroupBy")
	golang_proto.RegisterType((*LilacCDNMetricsResponseGroupBy)(nil), "ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsResponseGroupBy")
	proto.RegisterType((*LilacCDNMetricsResponseValue)(nil), "ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsResponseValue")
	golang_proto.RegisterType((*LilacCDNMetricsResponseValue)(nil), "ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsResponseValue")
	proto.RegisterType((*LilacCDNMetricsResponseSeries)(nil), "ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsResponseSeries")
	golang_proto.RegisterType((*LilacCDNMetricsResponseSeries)(nil), "ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsResponseSeries")
	proto.RegisterType((*LilacCDNMetricsResponseData)(nil), "ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsResponseData")
	golang_proto.RegisterType((*LilacCDNMetricsResponseData)(nil), "ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsResponseData")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/cdn_loadbalancer/types.proto", fileDescriptor_0a2659efdd085843)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/cdn_loadbalancer/types.proto", fileDescriptor_0a2659efdd085843)
}

var fileDescriptor_0a2659efdd085843 = []byte{
	// 9183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x6b, 0x6c, 0x23, 0x57,
	0x96, 0x9e, 0x2e, 0x49, 0x49, 0xd4, 0x91, 0x44, 0x95, 0x4a, 0x2f, 0x4a, 0xdd, 0xad, 0xa6, 0xe5,
	0xf6, 0xb8, 0xdd, 0x2e, 0xa9, 0x45, 0xea, 0xad, 0xb1, 0xdb, 0x16, 0x25, 0x75, 0x4b, 0x1a, 0xb5,
	0x24, 0x97, 0xd8, 0xee, 0xf6, 0x93, 0x5b, 0x22, 0x4b, 0x52, 0xd9, 0x14, 0x8b, 0xae, 0x2a, 0xb6,
	0x5a, 0x8b, 0x34, 0xe2, 0x34, 0x66, 0x7f, 0xcc, 0x04, 0x09, 0x32, 0x9d, 0xdd, 0x6c, 0x02, 0x2c,
	0x16, 0x09, 0x90, 0xc7, 0x64, 0x16, 0x58, 0x64, 0xff, 0x24, 0x41, 0x38, 0x93, 0xd5, 0x1a, 0xd9,
	0x60, 0xe3, 0x00, 0x1b, 0x01, 0x41, 0x00, 0x63, 0x82, 0x04, 0x3b, 0x1a, 0x24, 0x99, 0x71, 0x26,
	0x80, 0xe3, 0x35, 0x92, 0x41, 0x23, 0xc0, 0x06, 0xf7, 0x51, 0xc5, 0xaa, 0x62, 0x91, 0x22, 0x25,
	0xb5, 0xc7, 0x33, 0xcb, 0x5f, 0xdd, 0xbc, 0x75, 0xcf, 0xe3, 0x9e, 0x7b, 0xcf, 0x7d, 0x9d, 0xef,
	0x1e, 0xc1, 0xe8, 0x7d, 0x59, 0x1f, 0x51, 0xd4, 0xeb, 0x7a, 0x6a, 0x57, 0xde, 0x93, 0xae, 0xdf,
	0x57, 0xe4, 0x7d, 0xfd, 0x7a, 0x2a, 0x9d, 0x4d, 0x66, 0x54, 0x29, 0xbd, 0x25, 0x65, 0xa4, 0x6c,
	0x4a, 0xd6, 0xae, 0x1b, 0x07, 0x39, 0x59, 0x1f, 0xc9, 0x69, 0xaa, 0xa1, 0xf2, 0x57, 0x28, 0xc5,
	0x08, 0xa5, 0x18, 0x21, 0x14, 0x23, 0x6e, 0x8a, 0x81, 0xe1, 0x1d, 0xc5, 0xd8, 0xcd, 0x6f, 0x8d,
	0xa4, 0xd4, 0xbd, 0xeb, 0x3b, 0xea, 0x8e, 0x7a, 0x9d, 0x10, 0x6f, 0xe5, 0xb7, 0xc9, 0x2f, 0xf2,
	0x83, 0xfc, 0x8f, 0x32, 0x1d, 0xb8, 0xbc, 0xa3, 0xaa, 0x3b, 0x19, 0xb9, 0x58, 0xcb, 0x50, 0xf6,
	0x64, 0xdd, 0x90, 0xf6, 0x72, 0xac, 0xc2, 0x05, 0xa7, 0x9e, 0x6a, 0xce, 0x50, 0xd4, 0x2c, 0x53,
	0x69, 0x20, 0xe2, 0xfc, 0x98, 0x53, 0x33, 0x4a, 0xea, 0xc0, 0xae, 0xf4, 0xc0, 0xd7, 0x9c, 0x35,
	0x34, 0xc9, 0x90, 0x93, 0x19, 0x65, 0x4f, 0x31, 0x9c, 0x8d, 0x1b, 0xb8, 0xec, 0xaa, 0xa7, 0xe6,
	0x0d, 0xd9, 0x51, 0xe1, 0xaa, 0xb3, 0x82, 0x2e, 0x6b, 0xf7, 0x95, 0x94, 0x9c, 0xf4, 0x10, 0x39,
	0x5c, 0xa9, 0x66, 0x52, 0xcb, 0x67, 0x9c, 0x8c, 0xfb, 0x9d, 0xd5, 0xed, 0x9f, 0x2e, 0xba, 0xfa,
	0x48, 0xca, 0x28, 0x69, 0xc9, 0x90, 0xbd, 0x1b, 0x8f, 0xfb, 0x23, 0xe9, 0x34, 0xcf, 0xd7, 0xab,
	0xea, 0x63, 0x29, 0x95, 0x92, 0x75, 0x3d, 0x99, 0x51, 0x77, 0x1c, 0xc2, 0xa7, 0x3d, 0x89, 0xd5,
	0xbd, 0x3d, 0x35, 0x9b, 0xd4, 0xe5, 0x54, 0x5e, 0x53, 0x8c, 0x83, 0xeb, 0xe6, 0x7f, 0x92, 0x76,
	0xca, 0x89, 0x0a, 0x94, 0xfb, 0xd2, 0xb6, 0xed, 0xbf, 0x0e, 0xb2, 0xa8, 0x17, 0xd9, 0xae, 0x61,
	0xe4, 0xca, 0x0e, 0xc9, 0x81, 0x17, 0xbd, 0x48, 0x54, 0x4d, 0xd9, 0x51, 0xb2, 0xc9, 0x9c, 0xaa,
	0x66, 0x1c, 0x95, 0xc7, 0xbc, 0x2a, 0xdb, 0x07, 0x84, 0x57, 0x67, 0x5e, 0xf6, 0x22, 0xaa, 0x30,
	0xc0, 0xee, 0x2b, 0x9a, 0x91, 0x97, 0x32, 0xc9, 0x5d, 0x55, 0x37, 0x1c, 0xf5, 0x46, 0xcb, 0xd7,
	0x4b, 0xa6, 0xb3, 0x7a, 0x52, 0xc9, 0x6e, 0xab, 0xd7, 0xd5, 0xad, 0xf7, 0xe4, 0x94, 0x41, 0x29,
	0x86, 0xfe, 0xbb, 0x1f, 0xfa, 0x36, 0x34, 0xf5, 0xc1, 0x41, 0xe2, 0x20, 0x27, 0x2f, 0x19, 0x46,
	0x4e, 0x9f, 0xcb, 0x1b, 0xea, 0xbc, 0xac, 0x19, 0x3a, 0xff, 0x02, 0xb4, 0x13, 0xcb, 0x68, 0x72,
	0x5a, 0xd1, 0xe4, 0x94, 0x11, 0x46, 0x11, 0x74, 0x35, 0x18, 0x0f, 0xfc, 0xbc, 0x80, 0x1a, 0xc4,
	0x36, 0xfc, 0x49, 0x64, 0x5f, 0xf8, 0xcb, 0x10, 0x94, 0xd2, 0xe9, 0xe4, 0xae, 0x6e, 0xe8, 0x61,
	0x9f, 0xad, 0x56, 0xb3, 0x94, 0x4e, 0x2f, 0xe9, 0x86, 0xce, 0xcf, 0x03, 0x18, 0x19, 0x3d, 0x99,
	0x52, 0xb3, 0xdb, 0xca, 0x4e, 0xd8, 0x1f, 0x41, 0x57, 0x5b, 0x63, 0x83, 0x23, 0x5e, 0xce, 0x9e,
	0xc8, 0xe8, 0xf3, 0xa4, 0x56, 0x3c, 0xf0, 0x59, 0x01, 0x21, 0xb1, 0xc5, 0x30, 0x0b, 0xf8, 0x79,
	0x08, 0xa5, 0xe5, 0x6d, 0x29, 0x9f, 0x31, 0x92, 0xbb, 0xb2, 0x94, 0x96, 0xb5, 0x70, 0x23, 0x61,
	0xd4, 0xed, 0x62, 0xb4, 0xb8, 0x97, 0x33, 0x0e, 0xe2, 0x81, 0xc3, 0x02, 0x42, 0x4b, 0x0d, 0x62,
	0x3b, 0xa3, 0x59, 0x22, 0x24, 0x7c, 0x14, 0x5a, 0xb1, 0xb7, 0xc8, 0x5a, 0x32, 0x2b, 0xed, 0xc9,
	0xe1, 0xa6, 0x08, 0xba, 0xda, 0x12, 0x0f, 0xe1, 0xba, 0xff, 0xea, 0xa7, 0x87, 0xfe, 0x46, 0xcd,
	0xff, 0x89, 0x0f, 0x53, 0x01, 0xad, 0xb4, 0x26, 0xed, 0xc9, 0xfc, 0x0d, 0xe0, 0xa5, 0x5c, 0x4e,
	0xce, 0xa6, 0x93, 0x76, 0xca, 0xe6, 0x32, 0x94, 0x1c, 0xad, 0xbb, 0x59, 0xa4, 0x7f, 0x05, 0xda,
	0x72, 0x92, 0xae, 0x27, 0x8d, 0x5d, 0x4d, 0xcd, 0xef, 0xec, 0x86, 0x83, 0x55, 0x68, 0xdd, 0x8a,
	0x29, 0x12, 0x94, 0x60, 0x16, 0x3e, 0xbf, 0xd1, 0x1c, 0x15, 0x62, 0xc2, 0x98, 0x30, 0x1e, 0xbf,
	0x0e, 0xdd, 0x4c, 0x0b, 0x6a, 0x83, 0x64, 0x6a, 0x57, 0x55, 0x52, 0x32, 0xdf, 0x77, 0x58, 0x40,
	0x8d, 0x7f, 0x52, 0x40, 0xe8, 0xa8, 0x80, 0x02, 0xc7, 0x05, 0xd4, 0x3c, 0x21, 0x4c, 0x0a, 0x53,
	0xc2, 0xf4, 0x4a, 0x20, 0x18, 0xe0, 0x1a, 0x87, 0xfe, 0x46, 0x00, 0x3a, 0xa9, 0x05, 0xe6, 0xd5,
	0xac, 0xa1, 0xa9, 0x19, 0xdc, 0xe1, 0xfc, 0xaf, 0x43, 0xaf, 0x26, 0x7f, 0x90, 0x97, 0x75, 0xd3,
	0xa2, 0x7a, 0xd2, 0x50, 0x93, 0x52, 0x3a, 0x1d, 0x46, 0x11, 0xff, 0xd5, 0xd6, 0xd8, 0x8b, 0x2e,
	0x1d, 0x29, 0x87, 0xdb, 0x52, 0x56, 0xc9, 0xe5, 0x33, 0x12, 0x9e, 0x06, 0xd6, 0xc9, 0x64, 0x80,
	0x99, 0xc5, 0xc3, 0x47, 0xa6, 0x29, 0x1e, 0x23, 0x1f, 0x17, 0x31, 0xff, 0x17, 0x46, 0x62, 0x17,
	0x13, 0x42, 0xc9, 0xf5, 0x84, 0x3a, 0x97, 0x4e, 0xf3, 0xbf, 0x81, 0xa0, 0xdf, 0x43, 0xb8, 0x26,
	0xef, 0xa9, 0xf7, 0xe5, 0xb0, 0x2f, 0xe2, 0xbf, 0xda, 0x12, 0x5f, 0x31, 0x59, 0xb6, 0x3d, 0x46,
	0x2d, 0x43, 0xcd, 0x1a, 0xee, 0xef, 0x0f, 0x7d, 0xb8, 0xe0, 0xe2, 0x63, 0xd4, 0x3f, 0xd4, 0xa7,
	0xf5, 0xc4, 0xba, 0xde, 0x7d, 0x6b, 0x74, 0x78, 0x66, 0x6e, 0xf8, 0x4d, 0x69, 0xf8, 0xd7, 0x93,
	0x6f, 0x0f, 0xbf, 0x3d, 0xf2, 0xce, 0x8b, 0x57, 0x3c, 0x95, 0xe8, 0x75, 0x2b, 0x21, 0x12, 0x49,
	0xfc, 0x5f, 0x81, 0x3e, 0x4d, 0xd6, 0x73, 0x6a, 0x56, 0x97, 0xdd, 0x46, 0xf0, 0x9f, 0xa7, 0x11,
	0xba, 0x4d, 0x29, 0x0e, 0x2b, 0xdc, 0x87, 0x01, 0x2f, 0xe9, 0xcc, 0x0a, 0x01, 0x62, 0x85, 0x19,
	0x93, 0x67, 0xed, 0x8d, 0xee, 0x2b, 0x11, 0x4a, 0x5b, 0x3d, 0xf4, 0xa7, 0xcd, 0xd0, 0x7b, 0x57,
	0xde, 0x9a, 0xcb, 0xe5, 0x32, 0x4a, 0x8a, 0x34, 0xe2, 0xa6, 0xa2, 0xc9, 0xfb, 0x52, 0x26, 0xc3,
	0x4f, 0x41, 0x6b, 0x5a, 0xd1, 0xa5, 0xad, 0x8c, 0x8c, 0xa7, 0x4f, 0xe2, 0xcf, 0x65, 0x46, 0x2b,
	0xf6, 0x13, 0x56, 0xf5, 0xae, 0xb4, 0xcd, 0xdf, 0x83, 0x36, 0x29, 0x97, 0x4b, 0x6e, 0x33, 0x46,
	0xcc, 0xcd, 0x87, 0x3c, 0xdd, 0x7c, 0x9d, 0xcc, 0x42, 0xa2, 0xbc, 0x4d, 0xac, 0xd6, 0xf1, 0xbd,
	0x87, 0x0e, 0x52, 0xec, 0x00, 0x52, 0x2e, 0x67, 0xa9, 0xf4, 0x2f, 0x11, 0x0c, 0xd8, 0xbf, 0x27,
	0xd5, 0x6c, 0x32, 0x25, 0xa5, 0x76, 0xe5, 0xe4, 0x9e, 0xa2, 0xeb, 0xe1, 0x96, 0xaa, 0x05, 0xbd,
	0xee, 0x12, 0x74, 0xfc, 0xf0, 0x86, 0x28, 0xe7, 0x32, 0x52, 0x4a, 0x4e, 0x47, 0xb6, 0x0e, 0x22,
	0x7b, 0xea, 0x7d, 0x25, 0xbb, 0x13, 0x91, 0xd2, 0x69, 0x05, 0x9b, 0x44, 0xca, 0x44, 0xd8, 0x62,
	0x17, 0x31, 0xd4, 0xc8, 0xad, 0x8c, 0xba, 0x25, 0x65, 0x22, 0x7a, 0x4e, 0x4e, 0x45, 0x0c, 0x25,
	0x23, 0x47, 0x32, 0x8a, 0x6e, 0xfc, 0xa4, 0x80, 0x50, 0x18, 0x3b, 0x6c, 0xaf, 0x4d, 0xdf, 0xf5,
	0xec, 0x3c, 0x56, 0xee, 0xb6, 0xa2, 0xeb, 0xfc, 0x23, 0x04, 0x5d, 0x78, 0x15, 0x92, 0x1f, 0xa4,
	0x32, 0x79, 0x5d, 0x51, 0xb3, 0x64, 0x75, 0xd6, 0x49, 0xd7, 0xb6, 0xc6, 0x04, 0x97, 0xce, 0x74,
	0x75, 0x18, 0xd9, 0x54, 0xf6, 0x72, 0xc4, 0xa6, 0x8b, 0x26, 0x95, 0x98, 0xcf, 0xc8, 0xf1, 0x2b,
	0xe6, 0x40, 0x68, 0x7a, 0x8c, 0xfc, 0x1c, 0x75, 0x04, 0xdc, 0xd1, 0xa3, 0xe8, 0xf8, 0xcf, 0xfe,
	0xd8, 0xdf, 0xf4, 0xf8, 0xfb, 0xc8, 0xc7, 0x21, 0xb1, 0x73, 0xdf, 0x45, 0xa7, 0xf3, 0x0f, 0x80,
	0x4b, 0x4b, 0x86, 0x94, 0xdc, 0xc9, 0x4b, 0x5a, 0x9a, 0x29, 0xd0, 0x48, 0x14, 0x78, 0xa1, 0x92,
	0x02, 0x0b, 0x92, 0x21, 0xdd, 0xc2, 0x24, 0x44, 0xfa, 0xb3, 0x8e, 0xa1, 0xfd, 0xaa, 0xb7, 0xf0,
	0x50, 0xda, 0x4e, 0xa3, 0xf3, 0xaf, 0x42, 0x6b, 0x4a, 0xd7, 0xb6, 0xd9, 0xb2, 0x47, 0xa6, 0xdb,
	0xd6, 0x58, 0xbf, 0x4b, 0xe8, 0xbc, 0xae, 0x6d, 0x6f, 0x90, 0x0a, 0xf1, 0x00, 0x16, 0x22, 0x42,
	0xca, 0x2a, 0xe1, 0xdf, 0x87, 0xf6, 0x1d, 0x4d, 0xca, 0xed, 0x7e, 0x90, 0x61, 0x8a, 0x37, 0x13,
	0xc5, 0x9f, 0xf1, 0x56, 0xfc, 0x16, 0xae, 0xfa, 0xda, 0x6a, 0xf5, 0x0a, 0xb7, 0x31, 0xe6, 0x54,
	0xdd, 0x87, 0xd0, 0x89, 0x17, 0x46, 0x39, 0x65, 0xc8, 0xe9, 0x64, 0x4a, 0x55, 0xdf, 0x57, 0x64,
	0x3d, 0x1c, 0xf4, 0x9c, 0x06, 0xe6, 0xc9, 0xd7, 0x32, 0xd3, 0x80, 0x53, 0x34, 0x57, 0xf4, 0x48,
	0xbb, 0x68, 0xce, 0x12, 0x45, 0x79, 0xe9, 0xf1, 0x31, 0x00, 0x3c, 0x56, 0xd8, 0x94, 0xfe, 0xdc,
	0x61, 0x01, 0xf9, 0x30, 0xa3, 0xe3, 0x02, 0xf2, 0xc7, 0x84, 0xb1, 0xc7, 0xdf, 0x47, 0xfc, 0xf6,
	0xc4, 0x83, 0xd4, 0xf0, 0xbe, 0x24, 0xe5, 0x86, 0x75, 0x43, 0xca, 0xa6, 0x25, 0x2d, 0xbd, 0x12,
	0x08, 0x22, 0xce, 0x37, 0xf4, 0x7f, 0xfd, 0xd0, 0x1e, 0x57, 0x8d, 0x0d, 0xca, 0x52, 0x51, 0xb3,
	0xfc, 0x3a, 0x74, 0x99, 0x7e, 0xbc, 0xa5, 0x1a, 0xc9, 0xb4, 0xbc, 0x2d, 0x67, 0x75, 0xb9, 0x92,
	0x3f, 0xc7, 0x9b, 0x3f, 0x79, 0x88, 0x7e, 0x52, 0x40, 0x0d, 0x4b, 0x0d, 0x62, 0x27, 0xa3, 0x8d,
	0xab, 0xc6, 0x02, 0xa5, 0xe4, 0xbf, 0x89, 0xa0, 0xd5, 0xce, 0x89, 0xfa, 0xf7, 0xb4, 0xa7, 0xdb,
	0xb9, 0x36, 0x71, 0x23, 0x9b, 0xbb, 0x52, 0xce, 0xc6, 0x8b, 0x18, 0xe9, 0xf9, 0x6f, 0xff, 0x00,
	0x3d, 0xab, 0xe3, 0x0f, 0xc3, 0x5b, 0xaa, 0x21, 0x90, 0xa6, 0x6d, 0xa9, 0xc6, 0x30, 0xe3, 0x6f,
	0xb5, 0x10, 0x4f, 0x33, 0x5b, 0x45, 0x35, 0xfe, 0x0e, 0x82, 0x6e, 0x9b, 0x1a, 0x49, 0x29, 0x7d,
	0x1f, 0xef, 0xda, 0xd2, 0xe1, 0x3f, 0x6f, 0x26, 0x0a, 0x7d, 0xbd, 0x2a, 0x85, 0x8a, 0xba, 0xcc,
	0x31, 0x7a, 0xa2, 0xd3, 0x15, 0x6a, 0x01, 0xf4, 0xed, 0x1f, 0xa0, 0xfe, 0x12, 0x85, 0x4c, 0x49,
	0x4b, 0x0d, 0x22, 0xbf, 0x55, 0x42, 0x1f, 0x57, 0x81, 0xb7, 0xeb, 0xc5, 0x7a, 0xf1, 0x0d, 0x5b,
	0x2f, 0x06, 0xf1, 0x1a, 0x1e, 0x1d, 0x8d, 0x46, 0x3f, 0x2b, 0xa0, 0x86, 0xc7, 0xdf, 0x47, 0x2f,
	0x57, 0xd1, 0x7a, 0xa1, 0xac, 0x1a, 0xac, 0xe7, 0x7f, 0xaf, 0x09, 0xda, 0x17, 0xd4, 0x4d, 0x5b,
	0xcf, 0x7f, 0x03, 0x7a, 0x33, 0x53, 0xc9, 0x74, 0x5a, 0xd5, 0x93, 0x12, 0x29, 0x49, 0xb2, 0x3d,
	0xd0, 0x09, 0x93, 0x79, 0x57, 0x66, 0x6a, 0x21, 0xad, 0xea, 0x73, 0x84, 0x66, 0x81, 0x92, 0xf0,
	0xb7, 0xa0, 0xdb, 0xc5, 0x6c, 0x2b, 0xa3, 0xa6, 0xde, 0x67, 0xbd, 0x5f, 0x8e, 0x55, 0xa7, 0x9d,
	0x55, 0x1c, 0x13, 0xf0, 0x07, 0x70, 0xc1, 0xc5, 0xe8, 0x3d, 0x3d, 0x99, 0xda, 0x95, 0x32, 0x19,
	0x39, 0xbb, 0x83, 0xd7, 0x3a, 0xcc, 0x6f, 0xac, 0xa4, 0xf3, 0x8a, 0x7b, 0xd8, 0x91, 0x15, 0xe9,
	0xbe, 0xa4, 0xa7, 0x34, 0x25, 0x67, 0xcc, 0x9b, 0x64, 0xa4, 0xd3, 0xc8, 0xa4, 0xb1, 0xd4, 0x20,
	0xf6, 0xd9, 0x85, 0xae, 0xe8, 0x56, 0x25, 0x7e, 0x0d, 0xba, 0x5c, 0xa2, 0xb3, 0x6a, 0x56, 0xae,
	0xb8, 0x7d, 0x64, 0xae, 0x40, 0x76, 0x74, 0x76, 0xb6, 0x6b, 0x6a, 0x56, 0xe6, 0xbf, 0x83, 0xa0,
	0x87, 0x70, 0xdb, 0x53, 0x0c, 0x65, 0x87, 0x38, 0x3f, 0x9b, 0x9c, 0x9a, 0xc8, 0x5c, 0x31, 0x55,
	0xd5, 0x10, 0x5c, 0x58, 0x50, 0x37, 0x6f, 0x5b, 0x0c, 0x6a, 0x98, 0xe1, 0xbb, 0xb0, 0x6c, 0x27,
	0xa5, 0xce, 0xaf, 0x41, 0x9f, 0x7e, 0xa0, 0x1b, 0xf2, 0x9e, 0xd9, 0xd9, 0x49, 0x7c, 0xcc, 0x55,
	0xf3, 0x86, 0x5e, 0x69, 0xc3, 0xb9, 0x84, 0xc4, 0x1e, 0x4a, 0xc6, 0xfa, 0x3b, 0xc1, 0x88, 0xf8,
	0x2d, 0xe8, 0xd6, 0x33, 0xea, 0x7e, 0xd2, 0xd5, 0x4e, 0xb6, 0xd8, 0x8e, 0x54, 0xea, 0xa7, 0xcd,
	0x8c, 0xba, 0xef, 0x6c, 0xdc, 0x12, 0x12, 0x79, 0xcc, 0x6d, 0xc1, 0xa1, 0x78, 0x7c, 0x02, 0x06,
	0xad, 0x7e, 0xc9, 0x1b, 0xaa, 0xdd, 0x9c, 0xb4, 0x9f, 0xf8, 0x2e, 0x9b, 0xf7, 0x34, 0x93, 0x1d,
	0xb0, 0x30, 0x11, 0x1f, 0x81, 0x0b, 0x5e, 0xaa, 0x99, 0x1e, 0xd7, 0x71, 0x58, 0x40, 0xc1, 0xa3,
	0x02, 0x6a, 0xc6, 0xf3, 0xe6, 0xb4, 0x30, 0x43, 0xfd, 0x64, 0x25, 0x10, 0x6c, 0xe6, 0x82, 0x43,
	0x1f, 0x05, 0xa0, 0x7d, 0xdd, 0xd8, 0x95, 0xb5, 0x4d, 0xd9, 0x30, 0x94, 0xec, 0x8e, 0xce, 0x3f,
	0x0f, 0x6d, 0xf8, 0xf0, 0x92, 0x51, 0xe9, 0x3e, 0xc8, 0x71, 0xcc, 0x69, 0x95, 0xd2, 0xe9, 0x55,
	0xf6, 0x81, 0xdf, 0x81, 0x8e, 0x8c, 0xba, 0xb3, 0xa3, 0x64, 0x77, 0xcc, 0x33, 0x30, 0xf3, 0xa7,
	0x32, 0x53, 0xa0, 0xeb, 0x10, 0x3c, 0xb2, 0x4a, 0x89, 0xe9, 0x32, 0xa1, 0x17, 0x47, 0xae, 0x18,
	0xca, 0x38, 0xbe, 0xf0, 0x69, 0x08, 0xb1, 0xcd, 0xbd, 0x29, 0x87, 0x3a, 0xdb, 0x54, 0x75, 0x72,
	0x4a, 0xf6, 0xf9, 0x4c, 0x4c, 0x3b, 0x65, 0x6a, 0x4a, 0xf9, 0x7b, 0x08, 0xda, 0x14, 0xbc, 0x15,
	0xca, 0x18, 0xb2, 0xa6, 0x64, 0x77, 0x98, 0x07, 0x56, 0xd9, 0x98, 0xe5, 0xdc, 0x4d, 0x93, 0x90,
	0x31, 0x8c, 0xbf, 0x74, 0xfc, 0xf0, 0xfa, 0x82, 0x9c, 0xd3, 0xe4, 0x94, 0x64, 0xc8, 0xe9, 0x88,
	0xa4, 0x47, 0x14, 0x23, 0x92, 0x92, 0xb2, 0x11, 0x5d, 0x36, 0x22, 0x79, 0x1d, 0xef, 0xac, 0xd8,
	0x45, 0x45, 0x84, 0xac, 0xd6, 0x8a, 0xac, 0x63, 0xbd, 0xe8, 0x16, 0x4a, 0x6c, 0x55, 0x8a, 0x1c,
	0xf9, 0xdf, 0x41, 0xd0, 0xbe, 0x23, 0xab, 0x36, 0xe5, 0xa8, 0xaf, 0xce, 0x54, 0xa7, 0xdc, 0x2d,
	0x59, 0x3d, 0x67, 0xed, 0xda, 0x76, 0x6c, 0x2c, 0x87, 0xbe, 0xeb, 0x83, 0xce, 0xf9, 0x8c, 0x22,
	0x67, 0x8d, 0x4d, 0x25, 0x2d, 0x9b, 0x0b, 0xd3, 0x1d, 0xb8, 0x60, 0x2e, 0xb8, 0x29, 0xf2, 0x31,
	0xa9, 0x2b, 0x69, 0xb9, 0x9a, 0x85, 0x77, 0xa9, 0x41, 0x0c, 0x33, 0xd2, 0x52, 0xb6, 0x19, 0xe8,
	0xf2, 0x62, 0x47, 0x87, 0xc4, 0x6c, 0x55, 0x33, 0x4d, 0x09, 0x53, 0x72, 0xdc, 0x6f, 0x10, 0x3b,
	0x53, 0xee, 0x0f, 0xf1, 0x25, 0x18, 0xf0, 0x90, 0x66, 0xba, 0xd6, 0x35, 0xd7, 0x96, 0x84, 0xad,
	0x63, 0x4c, 0xc1, 0x61, 0x4c, 0x62, 0x2e, 0x53, 0x6c, 0x75, 0xfa, 0x87, 0x7d, 0xd0, 0x3b, 0x4f,
	0xd4, 0xd9, 0x64, 0xda, 0xb0, 0x81, 0xa9, 0xf3, 0xef, 0xc0, 0x65, 0xc7, 0xc5, 0x95, 0x22, 0xeb,
	0xc9, 0x6d, 0x4d, 0xdd, 0x23, 0xe7, 0x6b, 0x3d, 0x27, 0xa5, 0x4e, 0xb2, 0xd9, 0x45, 0x46, 0xbe,
	0xc1, 0xa8, 0x6f, 0x6a, 0xea, 0xde, 0x9a, 0x49, 0xcb, 0xdf, 0x84, 0xae, 0xac, 0x9a, 0x74, 0x4b,
	0x38, 0x69, 0xdd, 0xca, 0xaa, 0x9b, 0x4e, 0xa6, 0xfc, 0xfb, 0xd0, 0x87, 0x27, 0xa3, 0xfb, 0x72,
	0x29, 0x2f, 0xea, 0x31, 0xd1, 0x4a, 0x7d, 0xb0, 0x2f, 0x6d, 0x8f, 0xd8, 0x39, 0x1e, 0xac, 0x2a,
	0xba, 0xb1, 0xd4, 0x20, 0xf6, 0x50, 0x9e, 0x6e, 0x61, 0x2b, 0xd0, 0x63, 0x8e, 0x21, 0x25, 0x97,
	0xd4, 0xe4, 0x5c, 0xde, 0xa0, 0xb3, 0x52, 0x53, 0xc5, 0x39, 0xdc, 0xdc, 0xe9, 0x2d, 0xe7, 0x44,
	0x8b, 0x84, 0xcf, 0x40, 0xb7, 0x9c, 0xf5, 0x60, 0xd5, 0x7c, 0xf2, 0xbe, 0x0d, 0x6b, 0xbd, 0xbc,
	0x91, 0xd8, 0xd5, 0x64, 0xc9, 0x98, 0x97, 0x0c, 0x79, 0x47, 0xd5, 0x88, 0xe2, 0x64, 0xdc, 0x20,
	0x91, 0xa7, 0x7c, 0x1d, 0xd2, 0xfe, 0x08, 0xc1, 0x05, 0x87, 0x1c, 0xd7, 0x21, 0xed, 0xc2, 0xd9,
	0xa4, 0xc6, 0x6f, 0x9d, 0xd7, 0x59, 0x0d, 0x89, 0x7d, 0x8a, 0x4d, 0x71, 0xfb, 0x61, 0xed, 0x66,
	0x71, 0xcb, 0x6c, 0x10, 0x2d, 0x92, 0x7b, 0xb2, 0xbe, 0x1b, 0xbe, 0x5c, 0xc1, 0xf6, 0x3e, 0x6b,
	0xa7, 0x4c, 0xf5, 0xbe, 0x2d, 0xeb, 0xbb, 0xfc, 0x02, 0x30, 0x0b, 0x39, 0xd8, 0x44, 0x2a, 0xb2,
	0xe1, 0x28, 0x85, 0x8d, 0xcb, 0x1c, 0x74, 0xe6, 0x75, 0x59, 0x4b, 0x2a, 0x69, 0x73, 0x3e, 0x51,
	0x72, 0x6c, 0xf9, 0xf5, 0x66, 0xe2, 0x17, 0x43, 0x98, 0x60, 0x39, 0x4d, 0xfd, 0x7d, 0x39, 0xc7,
	0xef, 0x41, 0x17, 0x63, 0x21, 0x67, 0x0d, 0x65, 0x9b, 0x1d, 0xf5, 0xc3, 0x50, 0xf5, 0x81, 0xb9,
	0xf7, 0x7b, 0x0f, 0xbd, 0x38, 0x2c, 0xf9, 0x45, 0x9e, 0x8a, 0xb2, 0x97, 0xf2, 0x49, 0x88, 0x98,
	0xf6, 0xdb, 0x93, 0xf0, 0x88, 0x56, 0xf3, 0x7a, 0x92, 0x90, 0xa7, 0x65, 0xb6, 0x39, 0x0d, 0xb7,
	0x55, 0x68, 0x40, 0x40, 0xbc, 0xc4, 0xe8, 0x6f, 0x9b, 0xe4, 0x77, 0x74, 0x59, 0x5b, 0x30, 0x89,
	0xf1, 0x94, 0xc1, 0x0c, 0x5b, 0x96, 0x7f, 0x7b, 0x45, 0xfe, 0x17, 0x29, 0x79, 0x19, 0xf6, 0x2a,
	0x7c, 0xad, 0x1c, 0x5f, 0xd7, 0x68, 0xbe, 0x58, 0xe9, 0x0e, 0x8f, 0xec, 0x1b, 0x03, 0xe2, 0x33,
	0x7b, 0x9e, 0x52, 0xec, 0x03, 0x6e, 0x06, 0xda, 0xb2, 0xaa, 0x6d, 0x13, 0xdc, 0x51, 0x41, 0xf9,
	0x46, 0xb1, 0x35, 0xab, 0x16, 0xf7, 0xb4, 0x6f, 0x03, 0x1b, 0x31, 0x36, 0x72, 0x8e, 0x90, 0x5f,
	0x3f, 0xc9, 0xc7, 0x16, 0x09, 0x9d, 0xc5, 0x6a, 0xa9, 0x51, 0xec, 0x90, 0x9d, 0x45, 0xfc, 0x1f,
	0x20, 0xe8, 0xb3, 0xf8, 0xba, 0xda, 0x7e, 0xe9, 0x54, 0x52, 0xce, 0xcf, 0x81, 0x1b, 0xc5, 0x6e,
	0x4b, 0x35, 0xbb, 0x31, 0xb7, 0xa0, 0xcd, 0x71, 0xa2, 0xe8, 0x3c, 0xfd, 0x89, 0x22, 0x78, 0x48,
	0x6f, 0x52, 0xb1, 0xb0, 0xd6, 0xf7, 0x6c, 0x27, 0x09, 0x05, 0x3a, 0x53, 0x52, 0xce, 0x48, 0xed,
	0x4a, 0x36, 0x41, 0x3c, 0x11, 0x34, 0x5a, 0x49, 0xd0, 0x3c, 0x25, 0x2a, 0x2f, 0x85, 0x4b, 0xb9,
	0x6a, 0xf0, 0xf7, 0xa1, 0x97, 0xc5, 0x73, 0xb6, 0x24, 0x5d, 0x4e, 0xdb, 0xe4, 0x75, 0x11, 0x79,
	0xe3, 0x27, 0x75, 0x00, 0xbb, 0x52, 0xc1, 0xc4, 0xc5, 0x5e, 0xb0, 0xcb, 0xec, 0xce, 0x79, 0xd4,
	0xc0, 0x93, 0x97, 0xe9, 0xc4, 0xc5, 0xc8, 0x45, 0xb8, 0xa7, 0xc2, 0xc8, 0x6c, 0x12, 0x39, 0x46,
	0x21, 0x4a, 0x86, 0xbc, 0x8a, 0xeb, 0xf3, 0x09, 0x08, 0x49, 0x39, 0xc5, 0xce, 0xa1, 0x97, 0x70,
	0x10, 0x4e, 0xd2, 0x7a, 0x6e, 0x63, 0xd9, 0xe2, 0xb2, 0xd4, 0x24, 0xb6, 0x49, 0x39, 0xa5, 0xc8,
	0xf5, 0x4d, 0x00, 0x1b, 0xc7, 0xbe, 0x32, 0x1d, 0xec, 0xe2, 0x68, 0x91, 0xd3, 0x38, 0x82, 0xed,
	0xc8, 0xd8, 0x24, 0xb6, 0x68, 0x16, 0xef, 0x47, 0x08, 0x3a, 0x0c, 0x2d, 0xaf, 0x93, 0xab, 0x1f,
	0x32, 0x81, 0xea, 0xe1, 0x30, 0x39, 0xce, 0x9d, 0x28, 0x81, 0x5e, 0x97, 0xb1, 0x5d, 0x96, 0x96,
	0xaa, 0xe1, 0x28, 0x17, 0x62, 0x12, 0x29, 0x2d, 0xb9, 0x2e, 0xec, 0x20, 0xe7, 0x6b, 0x9b, 0x12,
	0xfd, 0x4f, 0x5d, 0x09, 0x26, 0xd1, 0x54, 0xe2, 0x55, 0x68, 0x4d, 0xa9, 0x9a, 0x6e, 0x5e, 0xda,
	0x0d, 0x78, 0x5f, 0xda, 0xa9, 0x9a, 0xee, 0xba, 0xb4, 0x2b, 0x96, 0x5c, 0x83, 0x1e, 0x57, 0x4c,
	0x92, 0x6d, 0x20, 0x3b, 0x6d, 0x1b, 0xc8, 0x46, 0x1a, 0xd1, 0x78, 0x19, 0xba, 0x9d, 0xfb, 0x06,
	0xdb, 0xf5, 0x57, 0xd3, 0x51, 0x01, 0x35, 0xe2, 0xbd, 0xe6, 0xa4, 0x30, 0xe5, 0x7d, 0xfd, 0x15,
	0x9f, 0x00, 0xde, 0xb6, 0xc8, 0x9a, 0xc4, 0x97, 0x0f, 0x0b, 0xe8, 0xf2, 0x51, 0x01, 0x0d, 0x62,
	0x39, 0x63, 0x51, 0x61, 0x2c, 0xf6, 0xed, 0x27, 0x08, 0xd2, 0xf2, 0x9e, 0x1a, 0x15, 0x0c, 0x59,
	0x37, 0xe2, 0x43, 0x10, 0xb2, 0x16, 0x57, 0x4a, 0xc2, 0x1d, 0x16, 0x50, 0xcb, 0x51, 0x01, 0x05,
	0x8f, 0x0b, 0x28, 0x30, 0x23, 0x44, 0x47, 0xe3, 0xf7, 0xe0, 0x72, 0xd9, 0xe5, 0x80, 0x11, 0x4d,
	0x1c, 0x16, 0x50, 0xdb, 0x51, 0x01, 0xb5, 0x62, 0x39, 0xd1, 0x98, 0x10, 0x75, 0xdd, 0xd2, 0x99,
	0x77, 0x35, 0x2e, 0xe9, 0xb3, 0x10, 0x2a, 0xce, 0xae, 0xc6, 0x41, 0x4e, 0xe6, 0xaf, 0x1e, 0x16,
	0x50, 0xc7, 0x51, 0x01, 0x85, 0x8e, 0x0b, 0x28, 0x14, 0x9d, 0x10, 0xa2, 0x93, 0x42, 0x74, 0x4a,
	0x88, 0x4e, 0x0b, 0xd1, 0x19, 0x17, 0xed, 0x0b, 0xd0, 0x59, 0xf4, 0x01, 0x53, 0x8f, 0xee, 0xc3,
	0x02, 0xea, 0x39, 0x2a, 0xa0, 0x6e, 0x72, 0xcb, 0x14, 0x15, 0x62, 0x31, 0x21, 0x36, 0x66, 0x1d,
	0x7c, 0x1b, 0xb9, 0xa6, 0x95, 0x40, 0x70, 0x90, 0xbb, 0xbc, 0x12, 0x08, 0x06, 0xb9, 0x96, 0x95,
	0x40, 0xb0, 0x95, 0x6b, 0x5b, 0x09, 0x04, 0x43, 0x5c, 0xc7, 0x4a, 0x20, 0xd8, 0xcd, 0xf5, 0x0c,
	0xfd, 0x4e, 0x2b, 0xb4, 0xcf, 0xe5, 0x14, 0xdb, 0x25, 0xd2, 0x2a, 0xf4, 0x9a, 0xd3, 0x00, 0x76,
	0xe4, 0xb4, 0xbc, 0xad, 0x64, 0xc9, 0x44, 0x7d, 0xc2, 0xa6, 0xbc, 0x9b, 0x51, 0xcd, 0xe5, 0x94,
	0x05, 0x8b, 0x86, 0xdf, 0x81, 0x4e, 0xcc, 0x05, 0xcf, 0xe7, 0xc5, 0x6d, 0x88, 0xbf, 0xba, 0x2d,
	0xe1, 0xdc, 0xc6, 0xf2, 0xa6, 0x9d, 0xce, 0x3c, 0xb9, 0xd3, 0x60, 0x9b, 0xe2, 0xf8, 0xc6, 0xff,
	0x3b, 0x04, 0x97, 0x4b, 0x24, 0x79, 0xc6, 0x0b, 0x4e, 0x2d, 0xf7, 0xfc, 0x56, 0xb2, 0x06, 0xf1,
	0x82, 0xbb, 0x01, 0xf6, 0x05, 0x6d, 0x1f, 0xba, 0x71, 0x53, 0x72, 0x56, 0xa7, 0x58, 0xb1, 0x03,
	0xac, 0x7f, 0xac, 0x0a, 0xfd, 0x8b, 0xfd, 0x49, 0x2e, 0x89, 0xe2, 0x9d, 0x9f, 0x3e, 0xb4, 0x0d,
	0x25, 0xe2, 0xb6, 0xbc, 0x64, 0xef, 0x76, 0x7a, 0x97, 0xf4, 0x26, 0x84, 0xde, 0xdb, 0x37, 0x92,
	0x0c, 0x0c, 0x80, 0xbb, 0x8a, 0x1e, 0xbf, 0x87, 0x4f, 0x12, 0xb9, 0x72, 0x37, 0xf1, 0xba, 0x45,
	0x64, 0x5e, 0x3b, 0xbc, 0xb7, 0x6f, 0x14, 0x0b, 0xf9, 0x1d, 0xeb, 0x54, 0x42, 0x86, 0x95, 0xa2,
	0xa7, 0xd4, 0xfb, 0xb2, 0x76, 0xc0, 0x4e, 0x25, 0x27, 0xce, 0x72, 0x78, 0x58, 0x99, 0x34, 0xac,
	0x43, 0x8a, 0x07, 0x12, 0xfb, 0x47, 0xfb, 0x51, 0xca, 0x29, 0x29, 0x58, 0xd5, 0x51, 0xca, 0xc1,
	0xeb, 0xfb, 0x08, 0x2e, 0x38, 0x98, 0xb8, 0x46, 0x14, 0x9c, 0x5a, 0xf9, 0x73, 0x3d, 0xd7, 0x48,
	0x36, 0xfe, 0xf6, 0x81, 0xf4, 0x06, 0x5c, 0x32, 0x2f, 0x05, 0x75, 0x39, 0xab, 0x2b, 0xe4, 0x34,
	0x4b, 0x22, 0x42, 0x6c, 0x8a, 0x6f, 0xab, 0x78, 0x34, 0x19, 0x60, 0xc4, 0x9b, 0x26, 0xed, 0x82,
	0x64, 0x48, 0x2c, 0x3c, 0x73, 0x1f, 0xcf, 0xf4, 0x5e, 0x2c, 0xe9, 0x3e, 0xfc, 0xd5, 0xea, 0xa2,
	0x03, 0xa5, 0x8c, 0x2d, 0x27, 0xf7, 0x89, 0x5d, 0x7a, 0xe9, 0xe7, 0xf8, 0x2a, 0xf4, 0x38, 0xa7,
	0x25, 0x73, 0x26, 0x1c, 0xab, 0x18, 0x35, 0x29, 0x33, 0x1f, 0x7f, 0x83, 0x7a, 0x5a, 0xb1, 0x7b,
	0x6d, 0xcc, 0x82, 0x47, 0x05, 0xd4, 0x44, 0xaf, 0x12, 0xa7, 0xaa, 0x62, 0xf6, 0x0a, 0x5c, 0xf4,
	0x34, 0x89, 0x7d, 0x6d, 0x72, 0xae, 0x19, 0x4e, 0x06, 0xd6, 0xb4, 0xdd, 0xc4, 0x35, 0xd3, 0xa9,
	0x7a, 0xe8, 0x3f, 0x36, 0x42, 0x97, 0x79, 0x7f, 0x62, 0xbb, 0x3f, 0xe4, 0x25, 0xd7, 0x15, 0x5e,
	0xe3, 0x19, 0xaf, 0xf0, 0xa8, 0xc7, 0x3a, 0xae, 0xe2, 0xd2, 0xee, 0x9b, 0xb8, 0xa6, 0xb3, 0xde,
	0xc4, 0x51, 0x21, 0x8e, 0x1b, 0x35, 0x3e, 0x0d, 0x6d, 0x52, 0xde, 0xd8, 0xb5, 0x2e, 0x3c, 0x5b,
	0x2a, 0x85, 0x72, 0xdc, 0x42, 0xe6, 0xf2, 0xc6, 0x2e, 0x3e, 0x87, 0xa6, 0x6c, 0x61, 0x38, 0xab,
	0x2d, 0x98, 0xad, 0x79, 0xe5, 0xf9, 0xd7, 0x10, 0x70, 0xfb, 0xf2, 0x56, 0xd2, 0x11, 0xa6, 0xa6,
	0xbe, 0xfb, 0x52, 0x75, 0xa2, 0xbc, 0x63, 0xe6, 0xf1, 0xfe, 0x4f, 0x1f, 0xf6, 0x16, 0x3b, 0x50,
	0x48, 0x69, 0x86, 0xa0, 0x1b, 0xd2, 0x8e, 0x92, 0xdd, 0x11, 0x43, 0xfb, 0x84, 0xc4, 0x8a, 0x65,
	0xe7, 0xe9, 0xc6, 0xb8, 0x38, 0xa9, 0x33, 0xe7, 0x1b, 0xab, 0xb2, 0xad, 0xf6, 0xd9, 0xba, 0x92,
	0xdc, 0x76, 0xc7, 0xbc, 0xce, 0x7f, 0x07, 0x41, 0xd8, 0xe5, 0x76, 0xc9, 0x14, 0xbb, 0x89, 0x0b,
	0xb7, 0xd6, 0x62, 0x02, 0xef, 0xdb, 0xbc, 0x4a, 0xaa, 0xf4, 0xa6, 0x3c, 0x49, 0x86, 0x7e, 0x86,
	0x80, 0x2f, 0xbd, 0x14, 0xe7, 0xdf, 0x03, 0x9e, 0xdd, 0x77, 0x64, 0xd4, 0xe2, 0x55, 0x3b, 0x5d,
	0x1f, 0x26, 0xab, 0xbe, 0x6a, 0x5f, 0xb2, 0x5f, 0x76, 0xb3, 0xc1, 0xc0, 0x51, 0xbe, 0xab, 0xaa,
	0x75, 0xd5, 0xfe, 0x1e, 0xf0, 0x0c, 0xcb, 0x65, 0x97, 0x15, 0x3c, 0x0f, 0x59, 0x94, 0x6f, 0x51,
	0xd6, 0xd0, 0x7f, 0xf1, 0xc1, 0xc0, 0xfc, 0xc2, 0x1a, 0x99, 0x96, 0xf1, 0x3a, 0xbb, 0xf8, 0x20,
	0xa7, 0xc9, 0xba, 0xae, 0xa8, 0xd9, 0x55, 0x45, 0x37, 0xf8, 0x31, 0xe8, 0x90, 0xad, 0x12, 0x8a,
	0x31, 0x42, 0x04, 0x63, 0x04, 0x0c, 0x5f, 0x14, 0xfe, 0x10, 0x89, 0xa1, 0x62, 0x15, 0x82, 0x2d,
	0xfa, 0x4d, 0x04, 0x3d, 0x74, 0x1d, 0xc2, 0x5b, 0x83, 0x64, 0xf1, 0x2b, 0x41, 0xd0, 0x54, 0xdf,
	0xa7, 0x9e, 0x6a, 0xc5, 0x87, 0x3e, 0xb3, 0x87, 0xb1, 0x83, 0xe6, 0xff, 0x82, 0xc8, 0x0e, 0xee,
	0x49, 0x95, 0x12, 0xce, 0xea, 0x1f, 0x17, 0x90, 0x0a, 0x57, 0xa0, 0xa3, 0x58, 0x16, 0xc1, 0xfa,
	0x0e, 0x74, 0x96, 0x34, 0x12, 0x6e, 0x01, 0x67, 0xab, 0x75, 0x5b, 0x32, 0x52, 0xbb, 0x43, 0x63,
	0x65, 0x5a, 0xc5, 0x03, 0x3d, 0xc3, 0xe5, 0x35, 0x39, 0x3d, 0x10, 0x5a, 0x53, 0x8d, 0x48, 0xf1,
	0xf7, 0xd0, 0xb7, 0xfc, 0xd0, 0x4e, 0x5a, 0xb1, 0x9e, 0x93, 0x35, 0xc9, 0x50, 0x35, 0x3e, 0x0c,
	0x4d, 0x8b, 0x1f, 0xe4, 0xa5, 0x0c, 0x0d, 0xd4, 0xb4, 0x2c, 0x35, 0x88, 0xec, 0x37, 0x7f, 0x05,
	0xda, 0x16, 0x54, 0x59, 0x5f, 0x53, 0x0d, 0x52, 0x40, 0xb6, 0xa2, 0xf8, 0xbb, 0xa3, 0x94, 0xbf,
	0x08, 0x41, 0x3c, 0x58, 0x25, 0x25, 0x4b, 0x37, 0x5d, 0xb8, 0x86, 0x55, 0xc2, 0x5f, 0x85, 0x10,
	0xab, 0xcd, 0x8a, 0xc8, 0xf4, 0x8b, 0xeb, 0xb8, 0xca, 0xf9, 0x08, 0xc0, 0xa6, 0x21, 0x69, 0x86,
	0xbe, 0xaf, 0x18, 0xbb, 0x14, 0x73, 0xb6, 0xd4, 0x20, 0xda, 0xca, 0x78, 0x01, 0x38, 0x46, 0x43,
	0x0a, 0xef, 0xe2, 0x7a, 0xcd, 0xac, 0x5e, 0xc9, 0x17, 0xac, 0xd7, 0x62, 0x36, 0x4d, 0xb9, 0x05,
	0x4d, 0xbd, 0xcc, 0x12, 0x9b, 0x5e, 0x8b, 0xd9, 0x34, 0xe1, 0xd4, 0xe2, 0xd2, 0x8b, 0x95, 0x63,
	0xbd, 0x88, 0xbd, 0x45, 0x79, 0x47, 0x7e, 0x40, 0x26, 0x42, 0xa2, 0x57, 0xb1, 0x2c, 0x3e, 0x0a,
	0x21, 0xda, 0x11, 0xaa, 0x69, 0xd3, 0x41, 0xdb, 0xfa, 0xca, 0xb3, 0x88, 0x1c, 0x85, 0x9a, 0x09,
	0xf8, 0xd0, 0xc4, 0xae, 0xfd, 0xff, 0x79, 0x13, 0xf4, 0x92, 0xbe, 0x30, 0xd1, 0x52, 0x46, 0x6a,
	0x57, 0xd6, 0x88, 0x7b, 0xdf, 0x82, 0x80, 0x35, 0xb8, 0x43, 0xd5, 0x4e, 0x7b, 0x0e, 0x0f, 0x13,
	0x09, 0x03, 0xfe, 0x0e, 0x04, 0x4d, 0xad, 0xd8, 0xc2, 0x57, 0x25, 0x33, 0xc7, 0x20, 0x61, 0x38,
	0x43, 0x8b, 0xd5, 0xec, 0x8f, 0x03, 0x1f, 0x15, 0x50, 0x18, 0x7a, 0xa1, 0x83, 0x0a, 0xc5, 0xfb,
	0x2e, 0xa2, 0x3f, 0xef, 0x8f, 0x0a, 0x13, 0x1f, 0x17, 0xd0, 0x47, 0x01, 0xe0, 0x20, 0x40, 0x86,
	0x73, 0x90, 0xb6, 0x25, 0x82, 0xe0, 0x3f, 0xfb, 0x20, 0x68, 0xb2, 0xbc, 0xf6, 0xa7, 0x3e, 0xf8,
	0xf7, 0x3e, 0xe8, 0x87, 0x0e, 0x93, 0xe9, 0x08, 0x1d, 0x76, 0x31, 0x36, 0xfc, 0xe0, 0x39, 0xe8,
	0xb1, 0x3e, 0xd9, 0x47, 0x5c, 0xcc, 0x31, 0xfe, 0xe0, 0x12, 0x74, 0x5a, 0xd5, 0xcc, 0x61, 0x17,
	0xb3, 0x06, 0x20, 0xbc, 0x00, 0x7d, 0x6e, 0x2e, 0xec, 0x5b, 0xcc, 0x35, 0x02, 0xe1, 0x19, 0xe8,
	0xb2, 0xaa, 0x16, 0x87, 0x5d, 0xcc, 0x36, 0x04, 0x61, 0x18, 0xfa, 0xdd, 0xdc, 0xac, 0x11, 0x17,
	0x2b, 0x19, 0x83, 0x0e, 0xdd, 0xcc, 0xa1, 0x17, 0xb3, 0x06, 0xa1, 0x97, 0x6e, 0x6c, 0xd4, 0xc5,
	0x5c, 0xa3, 0xd0, 0xa1, 0x5b, 0x71, 0xe8, 0xc5, 0x6c, 0xc3, 0x10, 0xfe, 0x03, 0x82, 0xc6, 0xd7,
	0xa5, 0x4c, 0x5e, 0x8e, 0xfd, 0x31, 0x2a, 0xb1, 0x6a, 0x19, 0x5b, 0x7a, 0xd8, 0xae, 0xac, 0xbd,
	0x3c, 0xad, 0x53, 0xc1, 0x1e, 0x1e, 0x6d, 0x2f, 0xdb, 0x5e, 0xcf, 0xd6, 0x59, 0xbb, 0x3b, 0x1f,
	0xe7, 0x5f, 0x09, 0x04, 0xfd, 0x5c, 0x80, 0x01, 0x35, 0xbf, 0x85, 0x80, 0x9f, 0x5f, 0x58, 0xdb,
	0x90, 0x8c, 0x5d, 0xbb, 0xd3, 0x9c, 0xd7, 0x58, 0xff, 0x67, 0xdf, 0x77, 0x8c, 0xf5, 0xc0, 0xe7,
	0x37, 0xd0, 0x04, 0x95, 0x6c, 0xed, 0x3a, 0x2d, 0x8d, 0x86, 0xfe, 0x5f, 0x23, 0x73, 0x62, 0x13,
	0xeb, 0x54, 0xd4, 0x67, 0xd0, 0xe6, 0xc4, 0xc5, 0x15, 0xea, 0xea, 0x87, 0x3e, 0x0f, 0xdf, 0xf4,
	0x9d, 0x9f, 0x6f, 0x7e, 0x8a, 0x7d, 0xf3, 0x19, 0xb8, 0x0c, 0x61, 0x52, 0x2f, 0xb2, 0x21, 0x69,
	0xd2, 0x9e, 0x6c, 0xc8, 0x5a, 0x24, 0x61, 0x73, 0xd2, 0xd8, 0xc7, 0x05, 0x74, 0x18, 0x80, 0x10,
	0x73, 0xd2, 0x26, 0xaa, 0x6b, 0xdd, 0x45, 0xeb, 0x2e, 0x5a, 0x8b, 0x8b, 0x0e, 0xfd, 0x56, 0x13,
	0x0c, 0x92, 0x61, 0xf6, 0x5a, 0x5e, 0xd6, 0x0e, 0xac, 0xa1, 0x66, 0x77, 0x83, 0xe7, 0xc0, 0xff,
	0xbe, 0x7c, 0xc0, 0xbc, 0xa0, 0xab, 0xe8, 0x05, 0xf8, 0x7f, 0x01, 0xcd, 0x17, 0x41, 0x22, 0xfe,
	0xfe, 0xb4, 0xbc, 0xe1, 0x0b, 0xcb, 0x1b, 0x88, 0x86, 0x15, 0xbc, 0xe1, 0xe3, 0x00, 0xb4, 0x81,
	0xff, 0x1b, 0xf2, 0xc1, 0x40, 0x23, 0xd1, 0x18, 0x7e, 0xe4, 0x83, 0x10, 0xa9, 0x11, 0xa9, 0x7b,
	0xc4, 0xd3, 0xf2, 0x88, 0xff, 0x84, 0xa0, 0x95, 0xda, 0xf8, 0x57, 0xcb, 0x2f, 0xbe, 0x68, 0x85,
	0x5e, 0xef, 0x03, 0x03, 0xff, 0x0e, 0x40, 0x4e, 0x32, 0x76, 0x93, 0x7b, 0xb8, 0x36, 0x71, 0x8b,
	0xaa, 0x6f, 0x23, 0x4a, 0x17, 0x3d, 0xb6, 0x5a, 0xb5, 0xe4, 0xcc, 0x62, 0xfe, 0x37, 0x10, 0x70,
	0x1f, 0xe0, 0xa1, 0x9e, 0xcc, 0x99, 0x43, 0xdd, 0x84, 0xdc, 0x2d, 0xd4, 0xe0, 0x50, 0x65, 0xfd,
	0x39, 0xde, 0x5d, 0x7a, 0xd8, 0x09, 0x23, 0xb1, 0xe3, 0x03, 0x07, 0x81, 0xce, 0xef, 0x43, 0x3b,
	0xdd, 0x15, 0x33, 0xc8, 0x3e, 0x03, 0x53, 0xbf, 0x54, 0x83, 0x0e, 0x25, 0xfb, 0xe2, 0x32, 0xb2,
	0xdb, 0x52, 0xc5, 0xda, 0x3a, 0x7f, 0x00, 0x21, 0x8a, 0x4a, 0xa6, 0x16, 0x96, 0x35, 0x86, 0x86,
	0xae, 0x45, 0x72, 0xc9, 0x62, 0x5e, 0x46, 0x72, 0x7b, 0xca, 0x5e, 0x71, 0xf6, 0x67, 0xcd, 0xe4,
	0x15, 0xca, 0xa4, 0x30, 0x21, 0x4c, 0x7d, 0x54, 0x40, 0x17, 0x61, 0x00, 0x3a, 0xe8, 0xe8, 0x9e,
	0x57, 0xb3, 0xf4, 0xae, 0x92, 0x37, 0xbf, 0x7f, 0x5c, 0x40, 0x3f, 0x68, 0x86, 0x43, 0x3f, 0x00,
	0xee, 0x52, 0x3a, 0x15, 0x5d, 0xfb, 0x03, 0x3f, 0xfc, 0xbe, 0x1f, 0xae, 0xc0, 0x40, 0x71, 0x84,
	0x8c, 0x94, 0x9b, 0x6a, 0x46, 0x21, 0xe2, 0x55, 0xab, 0xc2, 0xac, 0x73, 0x15, 0x2e, 0x7a, 0x51,
	0x78, 0x4c, 0x40, 0xe3, 0x30, 0x54, 0x81, 0x77, 0xb9, 0xb9, 0x48, 0x80, 0x41, 0x2f, 0xaa, 0x32,
	0xd3, 0xd2, 0x34, 0x5c, 0xa9, 0x20, 0xa3, 0xd2, 0x0c, 0x55, 0xa6, 0x1d, 0x1e, 0x93, 0x55, 0xe5,
	0x76, 0x94, 0x9b, 0xb7, 0xca, 0xb4, 0xa3, 0xcc, 0x14, 0xf6, 0x2f, 0x7c, 0xac, 0x0b, 0xe9, 0x0c,
	0xf6, 0x5d, 0x5f, 0xa5, 0xde, 0x3b, 0xb9, 0xcf, 0x2a, 0xf7, 0x51, 0x35, 0xfd, 0x72, 0x52, 0x2f,
	0x54, 0x67, 0xf7, 0xca, 0x36, 0xae, 0xc6, 0xae, 0x27, 0x59, 0x11, 0xe6, 0xa1, 0xd3, 0xb6, 0x28,
	0xb3, 0x6b, 0x8d, 0x91, 0xd2, 0xe9, 0xab, 0xd2, 0x8d, 0x06, 0x7c, 0x1d, 0xda, 0xd8, 0x19, 0x94,
	0xd2, 0xbf, 0xe8, 0x9a, 0x77, 0x2a, 0x12, 0xbf, 0x04, 0x6d, 0xd4, 0xd5, 0x19, 0xb1, 0xe0, 0x9e,
	0x3b, 0x2a, 0x51, 0x7b, 0x9c, 0x4c, 0xfe, 0x01, 0x82, 0x2e, 0x32, 0x81, 0x24, 0x12, 0xab, 0x14,
	0xdb, 0xb1, 0xa1, 0xa9, 0x39, 0x9d, 0x7f, 0x1e, 0x5a, 0xa8, 0x52, 0x86, 0x91, 0x71, 0x9d, 0x07,
	0x3e, 0xf3, 0x21, 0x31, 0x48, 0x3e, 0x26, 0x8c, 0x0c, 0x3f, 0x0e, 0xbd, 0xca, 0x4e, 0x56, 0xd5,
	0xe4, 0xa4, 0xf5, 0xe4, 0x89, 0x2a, 0x44, 0x4e, 0x34, 0x41, 0xb1, 0x9b, 0x7e, 0x15, 0xd9, 0x47,
	0xaa, 0x3c, 0xff, 0x9c, 0x75, 0x03, 0x71, 0x5f, 0xd6, 0x34, 0x25, 0x4d, 0x91, 0xe2, 0x41, 0x91,
	0x5a, 0x62, 0x9d, 0x15, 0xb2, 0x13, 0xcb, 0x0f, 0x9a, 0xa1, 0x9b, 0xe8, 0xb8, 0x98, 0x51, 0x76,
	0x94, 0xad, 0x8c, 0x6c, 0xde, 0xf3, 0xfd, 0x36, 0x82, 0x2e, 0x32, 0x37, 0xca, 0x04, 0x8f, 0x81,
	0xcf, 0x03, 0xc9, 0xbc, 0xa6, 0xb0, 0xdd, 0xd8, 0x4c, 0x0d, 0xd3, 0xa7, 0xb3, 0xf5, 0xf1, 0x6b,
	0xc7, 0x0f, 0x9f, 0xb1, 0x87, 0x6f, 0x98, 0x90, 0x9c, 0xa6, 0x3e, 0x38, 0xa0, 0x2f, 0x2f, 0xf3,
	0x9a, 0x62, 0x85, 0xfb, 0x3a, 0xe9, 0xe7, 0x25, 0xa6, 0xc2, 0x1d, 0x4d, 0xe1, 0x7f, 0x1f, 0xc1,
	0x05, 0xb7, 0x66, 0xe6, 0xbb, 0x38, 0xac, 0xa1, 0xff, 0xac, 0x1a, 0xc6, 0x8e, 0x1f, 0xbe, 0x50,
	0x59, 0x43, 0x9b, 0x38, 0x4b, 0xd3, 0xb0, 0x53, 0x53, 0x91, 0x56, 0xc1, 0x0a, 0x7f, 0x1b, 0x41,
	0x9b, 0xc3, 0x86, 0x81, 0x2f, 0xd7, 0x86, 0xad, 0xbb, 0x36, 0xeb, 0x7d, 0x0f, 0x41, 0xbf, 0x47,
	0xbf, 0x26, 0x89, 0x9b, 0xd5, 0x06, 0x1a, 0x3e, 0x3f, 0xdb, 0xf5, 0x96, 0xf4, 0x32, 0x99, 0x0a,
	0xf8, 0x2c, 0xf4, 0x78, 0x36, 0xad, 0xb6, 0x90, 0x8a, 0x87, 0x9e, 0x4b, 0x0d, 0x22, 0x4f, 0x39,
	0x93, 0xc7, 0xbc, 0x58, 0x30, 0x36, 0xce, 0x43, 0xb8, 0x54, 0x51, 0x61, 0x76, 0xa7, 0x7e, 0x26,
	0xb9, 0xfd, 0x2e, 0xb9, 0xc5, 0x81, 0x42, 0x2e, 0x17, 0xa2, 0xf1, 0xe7, 0x80, 0x97, 0x99, 0x33,
	0x26, 0xb7, 0x55, 0x8d, 0x46, 0x4d, 0x09, 0x46, 0xbf, 0xc9, 0x8c, 0xd2, 0x4d, 0x0a, 0x53, 0xec,
	0xda, 0xf0, 0xaf, 0x07, 0xa1, 0xcd, 0xbe, 0xb5, 0xc4, 0x93, 0x0b, 0xb9, 0x02, 0x2e, 0x73, 0x1d,
	0x1e, 0xc4, 0x1f, 0xc9, 0x45, 0xf8, 0x63, 0x04, 0xdd, 0xae, 0xcb, 0xe2, 0x64, 0x46, 0xd1, 0x0d,
	0x76, 0x0f, 0xfe, 0xea, 0x59, 0xee, 0xc1, 0x57, 0x15, 0xdd, 0x88, 0x0f, 0x9e, 0x70, 0x0f, 0xce,
	0x6b, 0xa5, 0x57, 0xfa, 0x33, 0x40, 0xb7, 0x6f, 0xc9, 0xad, 0x83, 0x9c, 0xa4, 0x9b, 0x81, 0xfb,
	0x72, 0xc8, 0x89, 0x56, 0x52, 0x37, 0x4e, 0xaa, 0xf2, 0xef, 0x79, 0x99, 0x8d, 0x0d, 0xe8, 0xd9,
	0x1a, 0x3a, 0xcc, 0x35, 0x11, 0x2e, 0x35, 0x88, 0x9c, 0xc9, 0xf7, 0xa6, 0xaa, 0x91, 0x2a, 0xb3,
	0x5f, 0x04, 0x3e, 0xbf, 0xd1, 0x48, 0x1e, 0x18, 0x7f, 0x5c, 0x40, 0xff, 0x23, 0x00, 0x5d, 0xec,
	0xe2, 0xa4, 0xd5, 0x66, 0x7c, 0xf8, 0x66, 0x80, 0xdd, 0xae, 0x47, 0xe8, 0x43, 0x18, 0x5d, 0xfc,
	0xdc, 0x0f, 0x43, 0xbc, 0xa3, 0x81, 0x03, 0x6d, 0x54, 0xfb, 0x08, 0xe5, 0x1b, 0x30, 0xb4, 0xbc,
	0x0c, 0xaf, 0xf0, 0xb1, 0xd2, 0x96, 0x8c, 0x78, 0x3a, 0xc2, 0x88, 0xb5, 0x90, 0x0c, 0xb4, 0x50,
	0x59, 0x89, 0xc4, 0x2a, 0xdc, 0xe2, 0x67, 0xab, 0x62, 0x60, 0x1b, 0xd9, 0xde, 0x8c, 0x6e, 0xf3,
	0xaf, 0x54, 0xad, 0x89, 0xf7, 0x4a, 0x35, 0x00, 0x9b, 0xb2, 0x11, 0xa1, 0xff, 0x87, 0x3b, 0xfc,
	0xad, 0x9a, 0xf5, 0xaa, 0x82, 0xed, 0x32, 0x3f, 0x55, 0xa3, 0xbd, 0xcc, 0x95, 0x71, 0x20, 0x44,
	0xdb, 0x6a, 0xfe, 0x86, 0xd7, 0xaa, 0x6c, 0x70, 0xa9, 0xe5, 0xca, 0xb2, 0x5c, 0x86, 0x2e, 0x3c,
	0xb4, 0x23, 0xea, 0x76, 0xa4, 0x38, 0xd8, 0xf5, 0xa1, 0x98, 0xb7, 0xf7, 0x55, 0xda, 0x62, 0xc4,
	0xfb, 0xcd, 0xdd, 0x0c, 0x7d, 0xeb, 0xa3, 0xf3, 0xc1, 0xc3, 0x02, 0x0a, 0x1c, 0x15, 0x90, 0x79,
	0xff, 0xf8, 0x0a, 0x74, 0xb3, 0x57, 0x49, 0xe6, 0xdc, 0x53, 0xdb, 0x8e, 0x63, 0xe8, 0x6f, 0xfb,
	0x81, 0xb7, 0x73, 0xa0, 0x23, 0x97, 0xff, 0xc7, 0xc8, 0xd3, 0xb9, 0x7c, 0xb5, 0x38, 0x97, 0x97,
	0x62, 0xf1, 0xd9, 0xe3, 0x87, 0x51, 0xfb, 0x72, 0x61, 0x69, 0x69, 0xd9, 0x33, 0x22, 0x65, 0xd3,
	0xac, 0x98, 0xe1, 0x4c, 0xd2, 0xd6, 0xb2, 0x51, 0xe2, 0x98, 0xfc, 0x34, 0x74, 0x16, 0x59, 0x98,
	0x6f, 0xf8, 0xfc, 0xee, 0x06, 0x2f, 0x35, 0x88, 0x1d, 0x66, 0x93, 0xcd, 0x57, 0x7b, 0xb3, 0xc0,
	0x97, 0x0a, 0xa7, 0x31, 0x2c, 0x17, 0x29, 0x67, 0x92, 0x9a, 0x5b, 0x29, 0xfe, 0x65, 0x73, 0xc7,
	0x65, 0x6a, 0x58, 0xe9, 0xa1, 0xdc, 0x52, 0x03, 0xdb, 0x89, 0x2d, 0xb0, 0xca, 0xde, 0xdd, 0xea,
	0xc7, 0x73, 0x3d, 0x9b, 0xe4, 0xff, 0x1b, 0x82, 0x36, 0x76, 0xb1, 0x65, 0x06, 0x61, 0xbb, 0x4d,
	0x78, 0x8a, 0x9d, 0xb2, 0xb6, 0xfb, 0x83, 0xd2, 0x7e, 0x16, 0xf9, 0x74, 0x69, 0xdf, 0x2b, 0xd0,
	0x5a, 0x8c, 0x2c, 0xea, 0x6c, 0x75, 0x88, 0xd5, 0xbe, 0x3a, 0x94, 0x39, 0x34, 0x83, 0x15, 0x0d,
	0xd5, 0x87, 0x7e, 0x6a, 0xdb, 0x30, 0xdb, 0xe3, 0xdb, 0x9e, 0xbd, 0xea, 0x3b, 0x7d, 0xaf, 0xfa,
	0x4f, 0xd9, 0xab, 0x81, 0x5a, 0x7a, 0xb5, 0x0f, 0x5a, 0x89, 0xd0, 0x5c, 0xb1, 0x4f, 0x7d, 0xb6,
	0x3e, 0xfd, 0x66, 0x23, 0x74, 0x99, 0x0f, 0x61, 0xed, 0x6d, 0xdd, 0x2d, 0x79, 0xca, 0xc6, 0x9d,
	0xed, 0x29, 0x9b, 0x85, 0x5f, 0x76, 0x3f, 0x67, 0xcb, 0x02, 0x67, 0x01, 0x1b, 0x4c, 0x59, 0x9d,
	0xb5, 0xec, 0x6f, 0x3c, 0xf0, 0x35, 0x36, 0x69, 0x1d, 0xba, 0xf3, 0x33, 0xff, 0x7e, 0xe9, 0x6b,
	0x40, 0xfe, 0x8c, 0xaf, 0x01, 0x8b, 0xd2, 0xdc, 0x2f, 0x02, 0x7f, 0x17, 0xd9, 0xc7, 0x8c, 0x29,
	0xaf, 0xeb, 0x34, 0xdb, 0x37, 0xbb, 0xc0, 0xa9, 0x4f, 0x1e, 0xa2, 0xe3, 0x87, 0xcf, 0xda, 0xa7,
	0xac, 0xac, 0xbc, 0x1f, 0xd9, 0x56, 0xe4, 0x8c, 0x39, 0x4b, 0x31, 0x59, 0xa6, 0x66, 0xec, 0x39,
	0x9c, 0x35, 0x32, 0x4d, 0x05, 0x25, 0xd3, 0xe9, 0x4d, 0xdd, 0xba, 0x2b, 0x61, 0x14, 0xcb, 0x5c,
	0x73, 0x53, 0xf8, 0x44, 0xd1, 0x0a, 0x74, 0x6f, 0xc1, 0xca, 0x4b, 0xe3, 0x53, 0x56, 0xdc, 0x8a,
	0xc2, 0x58, 0x3b, 0x38, 0x6e, 0xe8, 0x1f, 0x21, 0xb2, 0x7f, 0x4c, 0xac, 0x6e, 0xb2, 0x9c, 0x31,
	0x93, 0xd0, 0x6a, 0x64, 0xf4, 0x64, 0x34, 0x96, 0xcc, 0x65, 0xf2, 0x3a, 0x9b, 0x51, 0xca, 0x0d,
	0xf9, 0x16, 0x23, 0xa3, 0x47, 0x63, 0x1b, 0x99, 0xbc, 0x6e, 0xd1, 0x45, 0x29, 0x9d, 0xef, 0x64,
	0xba, 0x28, 0xa6, 0xa3, 0x01, 0xb5, 0x78, 0x3f, 0x34, 0xd9, 0xde, 0xa2, 0x22, 0x13, 0xc4, 0x1c,
	0x15, 0x62, 0x14, 0x8c, 0x3b, 0xf4, 0x6f, 0x11, 0xf4, 0xcc, 0x2f, 0xac, 0x2d, 0x25, 0x12, 0x1b,
	0x9b, 0x56, 0xc6, 0x1d, 0xe2, 0x30, 0xe7, 0x99, 0x75, 0xe7, 0xae, 0x47, 0xd6, 0x9d, 0xea, 0xa7,
	0x3a, 0xcb, 0x88, 0x25, 0x99, 0x78, 0x66, 0x83, 0xe6, 0x7e, 0x71, 0xe8, 0xff, 0x20, 0x82, 0x69,
	0x59, 0x50, 0xf7, 0xb3, 0xba, 0xa1, 0xc9, 0xd2, 0x5e, 0x22, 0xa3, 0x93, 0x1b, 0x0f, 0xda, 0x1a,
	0xa7, 0x06, 0xe8, 0xdc, 0x34, 0xe0, 0xb7, 0x80, 0x23, 0x8c, 0x65, 0x8d, 0x3d, 0x3f, 0xb2, 0xe6,
	0x72, 0x77, 0x62, 0x88, 0x44, 0x46, 0x9f, 0x2f, 0xd6, 0x72, 0xdd, 0x77, 0x72, 0xc5, 0xad, 0xbc,
	0xd8, 0x61, 0x38, 0x6a, 0xea, 0xb3, 0x17, 0x3e, 0x2a, 0xa0, 0x3e, 0xe8, 0x81, 0x50, 0x62, 0x75,
	0x33, 0x62, 0xbb, 0xfd, 0xc5, 0xfd, 0x38, 0xf4, 0x5f, 0x11, 0xf4, 0x99, 0x3d, 0x38, 0x9f, 0xd7,
	0x0d, 0x75, 0xef, 0xe9, 0xf4, 0xe1, 0x1e, 0x84, 0x70, 0x43, 0x6d, 0xf7, 0xdd, 0xfe, 0x4a, 0xc0,
	0x4a, 0x0f, 0x2b, 0x96, 0xe9, 0x1b, 0x13, 0x9d, 0x6b, 0xb0, 0x42, 0xc2, 0xdc, 0xd6, 0xb3, 0x7f,
	0x74, 0x0b, 0x42, 0x14, 0x6e, 0xba, 0x99, 0x93, 0x53, 0xa4, 0x5d, 0x7f, 0x15, 0x9a, 0xd3, 0xea,
	0x1e, 0x41, 0xc3, 0x20, 0x92, 0x99, 0x46, 0xc6, 0xe6, 0x6b, 0x79, 0x8c, 0x9a, 0x86, 0x02, 0x9a,
	0x6f, 0x97, 0x9c, 0x86, 0xe0, 0x31, 0x6a, 0x1e, 0x22, 0xa7, 0x33, 0x9f, 0xfd, 0x23, 0x47, 0x3e,
	0xf6, 0x3d, 0x46, 0xdd, 0x43, 0xbc, 0xc6, 0xc5, 0x42, 0x6f, 0xbd, 0x3d, 0xf2, 0xce, 0x8b, 0x6f,
	0xd1, 0x0c, 0x36, 0xef, 0xbc, 0x58, 0x9a, 0xbb, 0xc6, 0x71, 0xb4, 0x32, 0xa5, 0xf2, 0x2b, 0x10,
	0xc0, 0xd6, 0x63, 0x26, 0xf0, 0x7e, 0x00, 0x53, 0x92, 0xcd, 0x6b, 0xc4, 0x91, 0xe0, 0x6a, 0xa9,
	0x41, 0x24, 0x3c, 0x78, 0x19, 0x3a, 0xf0, 0xbf, 0xec, 0xe5, 0x39, 0x1e, 0x48, 0x6c, 0xfe, 0xfe,
	0x7a, 0xd5, 0x96, 0x2d, 0x75, 0x5f, 0xbc, 0x6e, 0xee, 0xda, 0xd3, 0x68, 0xf1, 0x77, 0xa0, 0x91,
	0x14, 0xb0, 0xc9, 0xfa, 0xe5, 0xda, 0x98, 0xbb, 0x46, 0xd6, 0x52, 0x83, 0x48, 0xb9, 0xf1, 0x9a,
	0xeb, 0xd1, 0x7a, 0x2b, 0x19, 0x3b, 0xeb, 0x67, 0xc6, 0x12, 0x1f, 0xb2, 0x39, 0x1e, 0x0f, 0xc2,
	0x30, 0x72, 0xbe, 0x7f, 0xff, 0x3d, 0x04, 0xad, 0x7b, 0xf8, 0xf4, 0x42, 0x99, 0x30, 0x84, 0x6f,
	0x95, 0xcb, 0x8f, 0xc7, 0xe6, 0xe0, 0x1c, 0xd5, 0xfd, 0x8c, 0x2e, 0x4b, 0x80, 0xd5, 0xa3, 0x12,
	0xf8, 0x77, 0xa1, 0xd5, 0x96, 0xa5, 0xad, 0xb6, 0x6d, 0xc7, 0x7c, 0x3a, 0xbb, 0x4e, 0x68, 0x37,
	0x54, 0xc7, 0x0b, 0x7a, 0x50, 0xad, 0x52, 0xfe, 0x5d, 0x68, 0x27, 0xe9, 0xf0, 0x94, 0xac, 0x21,
	0x6b, 0x59, 0x29, 0x13, 0xfe, 0x49, 0x73, 0xd5, 0xaf, 0x2a, 0xbb, 0xbf, 0xf7, 0xd0, 0x49, 0xfc,
	0x13, 0xb2, 0xdc, 0xe1, 0xa2, 0x65, 0x56, 0xc2, 0x5f, 0x84, 0x16, 0x72, 0x36, 0x23, 0x37, 0x1f,
	0x3f, 0x25, 0x58, 0x30, 0x31, 0x88, 0x4b, 0xc8, 0x75, 0xc7, 0x12, 0x04, 0xcd, 0x8c, 0x6e, 0xe1,
	0x4f, 0x9b, 0x3d, 0x73, 0x09, 0x79, 0xa6, 0x7f, 0x1b, 0x59, 0xc8, 0xea, 0xcb, 0xd9, 0x6d, 0x55,
	0x6c, 0x4e, 0xd3, 0xff, 0xf0, 0xf3, 0xd0, 0xa8, 0x1b, 0x92, 0x21, 0x87, 0xff, 0x67, 0x33, 0x01,
	0x64, 0x55, 0x62, 0x33, 0xf2, 0x3a, 0xfd, 0xb1, 0xa4, 0xea, 0xc6, 0x26, 0x26, 0x12, 0x29, 0x2d,
	0xff, 0x16, 0x74, 0x58, 0x6e, 0x94, 0xa4, 0xec, 0x7e, 0x46, 0xd9, 0x55, 0x4c, 0x14, 0x51, 0x9c,
	0x6e, 0x15, 0x35, 0x4b, 0x18, 0xc6, 0x49, 0xe4, 0x49, 0x62, 0xde, 0x43, 0x8a, 0xf8, 0x4d, 0x08,
	0x15, 0x99, 0x93, 0x16, 0x7f, 0xde, 0x5c, 0xe6, 0x2d, 0x99, 0x8d, 0xb7, 0xe9, 0x81, 0xb8, 0x91,
	0xd8, 0xe8, 0x62, 0x9b, 0x64, 0x2b, 0xe1, 0x37, 0xa1, 0xc3, 0x7c, 0xa1, 0x64, 0xce, 0x69, 0x7f,
	0xde, 0xec, 0x99, 0x12, 0xc9, 0x99, 0xda, 0x82, 0xd2, 0x2c, 0x10, 0x12, 0x31, 0xa4, 0xdb, 0x7f,
	0xea, 0xfc, 0x1a, 0x80, 0xcd, 0x02, 0x5f, 0x9c, 0xca, 0x02, 0x62, 0x4b, 0xca, 0x6a, 0xf9, 0x9b,
	0x10, 0x52, 0x8d, 0x5d, 0x59, 0x4b, 0xea, 0x0c, 0x0d, 0xcf, 0xde, 0x62, 0x55, 0x89, 0x1e, 0x70,
	0xe4, 0xb9, 0x10, 0xdb, 0x55, 0x47, 0xda, 0x8b, 0x72, 0x87, 0xae, 0x8b, 0x4f, 0xff, 0xd0, 0x75,
	0xe9, 0xe9, 0x1d, 0xba, 0xdc, 0xd9, 0xcb, 0x2e, 0x57, 0x7c, 0xeb, 0x51, 0x29, 0x7b, 0x59, 0xe4,
	0xf4, 0xd9, 0xcb, 0x50, 0x4d, 0xd9, 0xcb, 0x9e, 0xf9, 0x85, 0x67, 0x2f, 0x43, 0x35, 0x67, 0x2f,
	0x1b, 0xfa, 0x45, 0x67, 0x2f, 0x7b, 0xf6, 0x17, 0x91, 0xbd, 0xec, 0xca, 0x39, 0x64, 0x2f, 0x7b,
	0xee, 0xcb, 0xce, 0x5e, 0xf6, 0xb5, 0x2f, 0x2b, 0x7b, 0x59, 0xb9, 0x84, 0x63, 0x57, 0xab, 0x49,
	0x38, 0xe6, 0xab, 0x26, 0xe1, 0xd8, 0x0b, 0x5f, 0x56, 0xc2, 0x31, 0x9f, 0x23, 0xe1, 0xd8, 0x6f,
	0x95, 0x4b, 0x38, 0x76, 0xed, 0xcb, 0xca, 0x37, 0xe6, 0xf3, 0xca, 0x37, 0x56, 0xe1, 0x85, 0xa6,
	0x50, 0x31, 0x49, 0x44, 0x0d, 0x2f, 0x34, 0x87, 0xcf, 0xf8, 0x42, 0xd3, 0x7f, 0xca, 0x17, 0x9a,
	0x23, 0x5f, 0x95, 0x17, 0x9a, 0xfe, 0xd3, 0xbd, 0xd0, 0xbc, 0xfe, 0xe5, 0xbf, 0xd0, 0x1c, 0x7d,
	0xea, 0x2f, 0x34, 0xc7, 0x4e, 0xff, 0x42, 0x33, 0x50, 0xdb, 0x0b, 0xcd, 0x58, 0xc5, 0x1c, 0x1e,
	0xa7, 0x7a, 0xa1, 0x39, 0xfe, 0x15, 0x78, 0xa1, 0x19, 0x38, 0xc3, 0x0b, 0xcd, 0xc9, 0x8a, 0x99,
	0x41, 0x4e, 0xf5, 0x42, 0x73, 0xea, 0x9c, 0x5e, 0x68, 0x36, 0x7a, 0xbe, 0xd0, 0xac, 0x90, 0x85,
	0x70, 0xa6, 0x62, 0x2e, 0x89, 0x9a, 0xb2, 0x10, 0xce, 0x56, 0x64, 0x55, 0x7b, 0x16, 0xc2, 0xaf,
	0x9f, 0x35, 0x0b, 0x61, 0x53, 0xcd, 0x59, 0x08, 0x5f, 0xaa, 0x26, 0x0b, 0x61, 0x93, 0x47, 0x16,
	0xc2, 0xdf, 0x2d, 0x9b, 0x85, 0xf0, 0xe5, 0xb3, 0x65, 0x21, 0x8c, 0x96, 0xcc, 0x41, 0xe7, 0x9e,
	0x92, 0xf0, 0x95, 0x0a, 0xfd, 0xd6, 0x5c, 0x6b, 0x4a, 0xc2, 0x57, 0x4f, 0x95, 0x92, 0xb0, 0xd9,
	0x2b, 0x25, 0xe1, 0x49, 0x49, 0xdc, 0xe2, 0x15, 0xf4, 0x0e, 0xd6, 0x9e, 0xc4, 0x6d, 0xfe, 0xcc,
	0x49, 0xdc, 0x82, 0x1e, 0x49, 0xdc, 0xaa, 0xc9, 0xac, 0xb6, 0x58, 0xa1, 0x21, 0x2d, 0xa7, 0xcb,
	0xac, 0x76, 0xb3, 0x22, 0xcb, 0xda, 0x32, 0xab, 0xdd, 0x3a, 0x6d, 0x66, 0xb5, 0x96, 0x9a, 0x33,
	0xab, 0x2d, 0x57, 0x50, 0x1b, 0x6a, 0xcb, 0xac, 0xb6, 0x72, 0xc6, 0xcc, 0x6a, 0x70, 0xaa, 0xcc,
	0x6a, 0xdf, 0xf8, 0xaa, 0x64, 0x56, 0x83, 0x9a, 0x33, 0xab, 0xdd, 0xae, 0x60, 0xfb, 0xd6, 0xea,
	0x33, 0xab, 0xad, 0x55, 0x64, 0x53, 0x65, 0x66, 0xb5, 0x8d, 0x0a, 0x4c, 0xda, 0xaa, 0xcd, 0xac,
	0xf6, 0xda, 0x99, 0x33, 0xab, 0xb5, 0x9d, 0x3a, 0xb3, 0xda, 0x66, 0x85, 0x06, 0xb4, 0x9f, 0x43,
	0x66, 0xb5, 0x44, 0x45, 0xfe, 0xe7, 0x95, 0x59, 0xed, 0xce, 0x89, 0x99, 0xd5, 0xda, 0x4f, 0x93,
	0x59, 0xed, 0x6e, 0x05, 0xe5, 0x43, 0x27, 0x67, 0x56, 0xbb, 0x77, 0xba, 0xcc, 0x6a, 0xa1, 0xda,
	0x32, 0xab, 0xbd, 0xf1, 0x0b, 0xce, 0xac, 0x16, 0xaa, 0x32, 0xb3, 0xda, 0x9b, 0xe7, 0x91, 0x59,
	0x2d, 0x54, 0x45, 0x66, 0xb5, 0xb7, 0xce, 0x9c, 0x59, 0x2d, 0x54, 0x53, 0x66, 0xb5, 0xb7, 0xcf,
	0x25, 0xb3, 0x5a, 0xa8, 0xa6, 0xcc, 0x6a, 0xef, 0x56, 0x18, 0x99, 0x1d, 0x55, 0x65, 0x56, 0x4b,
	0x9e, 0x22, 0xb3, 0x5a, 0x47, 0xc5, 0xcc, 0x6a, 0xbf, 0x76, 0xd6, 0xcc, 0x6a, 0x1d, 0x27, 0x65,
	0x56, 0x93, 0xbe, 0x0a, 0x99, 0xd5, 0xb6, 0xbe, 0xec, 0xcc, 0x6a, 0xb7, 0x9d, 0x99, 0xd5, 0x52,
	0x27, 0x65, 0x56, 0xf3, 0xb8, 0x0d, 0xb0, 0xa5, 0x59, 0x9b, 0xfd, 0x37, 0xbe, 0x8f, 0x0a, 0xe8,
	0x0f, 0x7d, 0x30, 0x00, 0x5d, 0x71, 0x49, 0x57, 0x52, 0x16, 0xba, 0x8e, 0x2e, 0x1a, 0xfe, 0xa8,
	0x10, 0x83, 0x3e, 0xe8, 0x98, 0x5f, 0x58, 0x8b, 0xd0, 0x78, 0x56, 0x84, 0x84, 0xae, 0x7c, 0xd1,
	0xc9, 0xab, 0x08, 0xfa, 0x81, 0xc3, 0x1e, 0x8e, 0x67, 0x0a, 0x6b, 0x93, 0xd4, 0x18, 0x9b, 0x16,
	0x62, 0x33, 0x30, 0x0c, 0xe1, 0xbb, 0xf2, 0x56, 0xc4, 0x96, 0xe9, 0x24, 0x62, 0xdd, 0x66, 0x77,
	0x8e, 0x8d, 0x0a, 0x63, 0xe3, 0xc2, 0xd8, 0x84, 0x30, 0x36, 0x29, 0x8c, 0x4d, 0x09, 0x63, 0xd3,
	0xd0, 0x0d, 0xa1, 0xb8, 0x6a, 0x44, 0x6c, 0xd9, 0x46, 0x7c, 0x63, 0x33, 0x10, 0x81, 0xd0, 0xdc,
	0xc6, 0xb2, 0xbd, 0x34, 0x34, 0x3e, 0x26, 0x8c, 0x4f, 0x09, 0xe3, 0xd3, 0xc2, 0xf8, 0x8c, 0x30,
	0x31, 0x06, 0x03, 0x10, 0x5a, 0x50, 0x37, 0xed, 0x35, 0x82, 0x13, 0x93, 0xc2, 0x64, 0x54, 0x98,
	0x8c, 0x41, 0x3f, 0x74, 0x51, 0xa3, 0x0d, 0xe3, 0x8d, 0x6d, 0xc4, 0xdc, 0xd9, 0xfa, 0x26, 0x27,
	0x60, 0x06, 0xc2, 0x34, 0x07, 0x49, 0xc4, 0x84, 0xec, 0x44, 0xac, 0x9c, 0xc2, 0x97, 0x26, 0xa7,
	0x85, 0xa9, 0x98, 0x30, 0x35, 0x29, 0x4c, 0xcd, 0x08, 0xd3, 0x31, 0x61, 0x7a, 0x52, 0x98, 0x19,
	0x13, 0x66, 0xa6, 0x84, 0x99, 0x69, 0x61, 0x66, 0x06, 0x6b, 0x4a, 0x82, 0x22, 0x11, 0x2b, 0x0c,
	0xe2, 0x8b, 0x4d, 0xc6, 0x2f, 0x41, 0xa7, 0x3d, 0xe4, 0x40, 0x13, 0xb2, 0x61, 0x77, 0xe6, 0x8f,
	0x0a, 0xc8, 0x17, 0x9f, 0x70, 0xfc, 0x55, 0x86, 0xe7, 0x4b, 0x32, 0xcb, 0x95, 0x49, 0x4c, 0xf7,
	0xd0, 0xf3, 0xcf, 0x01, 0xec, 0x1c, 0x16, 0xd0, 0xd5, 0xa3, 0x02, 0x7a, 0xfe, 0xb8, 0x80, 0x82,
	0xe3, 0xa3, 0xc2, 0x78, 0x54, 0x18, 0x8f, 0x9d, 0xcb, 0x9f, 0x03, 0x70, 0x65, 0x21, 0x5a, 0x2b,
	0x97, 0x20, 0x69, 0xe2, 0xb0, 0x80, 0x84, 0xa3, 0x02, 0x7a, 0x11, 0x37, 0x60, 0x7c, 0x5c, 0x18,
	0x9f, 0xa8, 0x2a, 0xab, 0xd1, 0xed, 0x32, 0x29, 0x92, 0x30, 0xbb, 0xd8, 0x51, 0x01, 0x45, 0x31,
	0xbb, 0x89, 0x51, 0x61, 0x22, 0x7a, 0x6e, 0x49, 0x92, 0x26, 0x8f, 0x0a, 0x68, 0x82, 0xb0, 0x1d,
	0x17, 0x26, 0x26, 0x5c, 0x0c, 0x6e, 0x9d, 0x98, 0x3b, 0xfe, 0xb9, 0xc3, 0x02, 0x9a, 0x39, 0x2a,
	0xa0, 0xe9, 0xe3, 0x02, 0x6a, 0x9d, 0x98, 0x12, 0x26, 0xa6, 0x85, 0x89, 0x19, 0x61, 0x72, 0xd4,
	0xc5, 0xe8, 0x46, 0xe5, 0x6c, 0xf2, 0x58, 0x91, 0x57, 0x8e, 0x0a, 0xe8, 0x06, 0x56, 0x64, 0x72,
	0x4c, 0x98, 0x1c, 0x77, 0xd1, 0xdf, 0xab, 0x98, 0x31, 0x7b, 0xf6, 0xb0, 0x80, 0xe2, 0x47, 0x05,
	0x34, 0x47, 0xc8, 0x27, 0x85, 0xc9, 0xa9, 0x0a, 0x39, 0xb3, 0x5d, 0x9c, 0x87, 0xcb, 0x65, 0x51,
	0xec, 0x3e, 0x2c, 0xa0, 0xc5, 0xa3, 0x02, 0x5a, 0xc0, 0x83, 0x68, 0x72, 0x46, 0x98, 0x1a, 0x15,
	0xa6, 0xa2, 0xf1, 0x57, 0xca, 0x24, 0x52, 0xc4, 0x23, 0x76, 0xf9, 0xa8, 0x80, 0x96, 0xb0, 0x0a,
	0x53, 0x63, 0xc2, 0xd4, 0x78, 0xcd, 0xa9, 0x14, 0x6f, 0x1f, 0x15, 0xd0, 0x2a, 0x21, 0x9f, 0x12,
	0xa6, 0xa6, 0x5d, 0x6a, 0x3e, 0x5b, 0x92, 0x4a, 0xb1, 0xf3, 0xb0, 0x80, 0x36, 0x8e, 0x0a, 0x68,
	0x1d, 0x93, 0x4c, 0x8f, 0x0a, 0xd3, 0xd1, 0x6a, 0x73, 0x29, 0x6e, 0x1e, 0x15, 0x90, 0x48, 0xa8,
	0xc6, 0x84, 0xe9, 0xf1, 0x33, 0xe4, 0x52, 0xbc, 0x7b, 0x54, 0x40, 0xaf, 0x1f, 0x17, 0x50, 0x68,
	0x7a, 0x4a, 0x98, 0x9e, 0x16, 0x66, 0x46, 0x85, 0x99, 0xa8, 0x30, 0x13, 0xab, 0x36, 0x97, 0xe2,
	0xbb, 0x47, 0x05, 0xf4, 0x0e, 0xb6, 0xee, 0xcc, 0xb8, 0x30, 0x33, 0x21, 0xcc, 0x4c, 0x5a, 0xc0,
	0x33, 0x0a, 0x39, 0xa3, 0x19, 0x15, 0x69, 0x0a, 0x87, 0x66, 0x2e, 0xb8, 0x12, 0x08, 0xb6, 0x71,
	0xed, 0x76, 0x28, 0xda, 0x4a, 0x20, 0xd8, 0xc9, 0xf1, 0x2b, 0x81, 0x60, 0x0f, 0xd7, 0xbb, 0x12,
	0x08, 0xf6, 0x72, 0x7d, 0x2b, 0x81, 0x60, 0x1f, 0x17, 0x5e, 0x09, 0x04, 0xc3, 0x5c, 0xff, 0x4a,
	0x20, 0x78, 0x81, 0xbb, 0xb8, 0x12, 0x08, 0xf6, 0x73, 0x03, 0x56, 0x66, 0xc6, 0xe7, 0xb9, 0xab,
	0x2b, 0x81, 0xe0, 0x8b, 0x9c, 0xb0, 0x12, 0x08, 0x46, 0xb9, 0xd8, 0x4a, 0x20, 0x38, 0xc1, 0x61,
	0xb9, 0xd3, 0xdc, 0xcc, 0x4a, 0x20, 0x78, 0x83, 0x7b, 0x65, 0x25, 0x10, 0x9c, 0xe3, 0xe2, 0x2b,
	0x81, 0xe0, 0x02, 0xb7, 0xb8, 0x12, 0x08, 0x2e, 0x71, 0xcb, 0x2b, 0x81, 0xe0, 0x2a, 0x77, 0x7b,
	0x25, 0x10, 0x5c, 0xe7, 0x36, 0x56, 0x02, 0x41, 0x91, 0xdb, 0x5c, 0x09, 0x04, 0x5f, 0xe7, 0xee,
	0xae, 0x04, 0x82, 0xef, 0x70, 0xef, 0x0e, 0xfd, 0x6f, 0x04, 0x7c, 0x69, 0x96, 0x2f, 0xfe, 0x26,
	0x80, 0x94, 0xc1, 0x43, 0x9e, 0x3d, 0x90, 0xc0, 0x8b, 0xd0, 0x73, 0xde, 0x11, 0xa9, 0x0d, 0x4d,
	0xde, 0x56, 0x1e, 0x90, 0x07, 0x64, 0x2c, 0x71, 0x79, 0x0b, 0x21, 0x25, 0xcf, 0x1b, 0x6e, 0x02,
	0x90, 0xf5, 0x8d, 0xf2, 0xf1, 0xd7, 0xc8, 0x87, 0x90, 0xe2, 0x1f, 0xb3, 0x97, 0x3f, 0x2a, 0xa0,
	0x0b, 0xd0, 0x0f, 0xdd, 0xcb, 0x1b, 0x11, 0x4b, 0xd9, 0x88, 0xa9, 0x2d, 0x8a, 0xc6, 0xaf, 0x40,
	0xa7, 0x3d, 0xcd, 0x19, 0xed, 0xe5, 0x0e, 0x57, 0xa2, 0x37, 0x86, 0x44, 0xfd, 0x02, 0x41, 0x97,
	0x47, 0xd6, 0xb1, 0x5a, 0x1a, 0x3d, 0xaf, 0xe6, 0xb3, 0x86, 0x76, 0x30, 0xaf, 0xa6, 0xe5, 0x33,
	0x35, 0xda, 0x83, 0x4f, 0xb1, 0xd1, 0x11, 0xf6, 0x88, 0xb6, 0xe7, 0x96, 0xac, 0x7a, 0xb7, 0xfa,
	0x39, 0xe0, 0x1d, 0x99, 0xd7, 0x2a, 0x36, 0x7b, 0x19, 0x38, 0x77, 0x22, 0x2a, 0x7e, 0x02, 0x5a,
	0x19, 0xf8, 0x96, 0xe8, 0x4a, 0x31, 0x5b, 0xdd, 0xa5, 0x31, 0xc5, 0x30, 0x12, 0x81, 0x56, 0xc4,
	0x9a, 0x0d, 0xdd, 0x25, 0xc8, 0x36, 0x0a, 0x3d, 0x72, 0xa6, 0x56, 0xe3, 0x5f, 0x02, 0x3e, 0x45,
	0xca, 0x93, 0x24, 0x5b, 0x9b, 0x0d, 0xd7, 0xd7, 0x12, 0x0f, 0xfd, 0xbc, 0x80, 0xfc, 0xd6, 0xdb,
	0x9c, 0x88, 0xc8, 0xa5, 0x2c, 0x0e, 0x74, 0x5b, 0x32, 0xf4, 0x1d, 0x1f, 0xf4, 0x78, 0xe6, 0x6a,
	0xc3, 0xa7, 0x35, 0x2b, 0x12, 0x90, 0x37, 0x76, 0x4f, 0xc0, 0x5b, 0x9a, 0x11, 0x7e, 0xcc, 0x8b,
	0x7f, 0x19, 0xfc, 0xef, 0xed, 0x9b, 0x1d, 0x51, 0x26, 0x20, 0xbc, 0xb2, 0x6f, 0x24, 0xd4, 0xf7,
	0xe5, 0xec, 0x5c, 0x31, 0x17, 0xdc, 0x52, 0x83, 0x88, 0xe9, 0xf8, 0xbb, 0xd0, 0x44, 0xf5, 0x64,
	0x70, 0xe8, 0xea, 0x01, 0x5a, 0x5e, 0x06, 0x5a, 0x6a, 0x10, 0x19, 0xbb, 0xf8, 0x65, 0x67, 0x46,
	0xbb, 0x72, 0xfd, 0xf6, 0x4f, 0xfc, 0xd0, 0x35, 0xbf, 0xb0, 0x46, 0xb7, 0x67, 0xf4, 0x8f, 0x06,
	0x12, 0xac, 0x5d, 0x02, 0x5a, 0x72, 0xf9, 0xad, 0x8c, 0x92, 0x4a, 0x2a, 0x39, 0x66, 0x8e, 0x09,
	0x4f, 0xd5, 0x6c, 0x20, 0xa7, 0x11, 0x3b, 0x97, 0x0d, 0x42, 0xbd, 0xbc, 0xb1, 0xd4, 0x20, 0x06,
	0x29, 0xa7, 0xe5, 0x1c, 0xff, 0x26, 0xb4, 0x32, 0xae, 0x04, 0x56, 0x54, 0xe9, 0xcf, 0x8a, 0x54,
	0xe6, 0xbb, 0x26, 0xed, 0xc9, 0x4b, 0x0d, 0x22, 0xe4, 0xac, 0x5f, 0xfc, 0x55, 0x08, 0xe4, 0x54,
	0xcd, 0x20, 0x76, 0x6c, 0xa7, 0xc3, 0x2c, 0x70, 0xcd, 0x77, 0xb5, 0x81, 0x6c, 0x92, 0xaf, 0x05,
	0xc2, 0x7f, 0xf1, 0x17, 0x7e, 0x91, 0xd4, 0x98, 0xfd, 0x9b, 0xe8, 0xe3, 0x02, 0xfa, 0x16, 0x82,
	0x9b, 0x10, 0xc0, 0x6d, 0xbd, 0x76, 0x03, 0xc6, 0xa0, 0xd7, 0xd6, 0xde, 0x58, 0x0b, 0x15, 0x12,
	0x59, 0xde, 0x80, 0x7e, 0x87, 0xc6, 0x31, 0x60, 0x5f, 0x16, 0xd6, 0x36, 0xf9, 0xe6, 0x3b, 0xd9,
	0xf7, 0xb3, 0xea, 0x7e, 0x16, 0xae, 0x43, 0x33, 0xd6, 0xe0, 0xfa, 0xf2, 0x46, 0xec, 0x0a, 0xb4,
	0x59, 0x6c, 0x46, 0x94, 0x1c, 0x74, 0xdb, 0x88, 0x47, 0xd2, 0x59, 0x9d, 0xbe, 0x65, 0x0a, 0x41,
	0x60, 0x43, 0xd5, 0x8c, 0x58, 0x13, 0x55, 0x39, 0x7e, 0xc9, 0xc2, 0xeb, 0x76, 0x99, 0x6f, 0x15,
	0x58, 0x2f, 0xfd, 0xbc, 0x08, 0x71, 0xff, 0xa7, 0x8d, 0xd0, 0x59, 0x02, 0x0c, 0xe3, 0xef, 0x39,
	0x2d, 0x8a, 0xce, 0x64, 0x51, 0x87, 0x3d, 0x87, 0xa1, 0x29, 0xab, 0x26, 0x8d, 0xcc, 0x49, 0x7f,
	0xb2, 0xa2, 0x31, 0xab, 0x26, 0x32, 0x3a, 0xff, 0x1a, 0x34, 0xe7, 0x75, 0x99, 0xd4, 0x0f, 0x54,
	0x48, 0x5f, 0x67, 0x57, 0xe2, 0x4e, 0xce, 0x89, 0x0b, 0x25, 0x10, 0x50, 0x3c, 0x84, 0xf3, 0xba,
	0x8c, 0x59, 0x7e, 0x88, 0x20, 0xc4, 0xea, 0xd3, 0xbf, 0x39, 0x69, 0x26, 0x3a, 0x98, 0xa9, 0xda,
	0x49, 0xdc, 0xe3, 0xda, 0xf6, 0x8c, 0xce, 0x1b, 0xeb, 0xd9, 0xae, 0xda, 0x28, 0x74, 0x7e, 0x16,
	0x7a, 0xb7, 0x55, 0x32, 0x6d, 0x33, 0x45, 0x2c, 0x4c, 0x6d, 0x13, 0x45, 0xcb, 0x12, 0xe4, 0x5c,
	0x37, 0xad, 0x43, 0x85, 0x59, 0xd8, 0x5a, 0x09, 0x7a, 0x2d, 0x22, 0xfa, 0xbe, 0x89, 0x85, 0x1f,
	0xd8, 0xdf, 0xee, 0x7c, 0xf1, 0x87, 0x05, 0xe4, 0x9f, 0x1c, 0xd5, 0xb1, 0xf4, 0xa0, 0xd6, 0xf4,
	0xa9, 0xdf, 0x1f, 0x1d, 0xdd, 0x63, 0x3f, 0x8e, 0xf1, 0x0f, 0xdd, 0xf6, 0xa8, 0xa8, 0x5b, 0x65,
	0xcc, 0x09, 0x27, 0x16, 0x92, 0xe0, 0x3f, 0x80, 0x2e, 0x8a, 0x88, 0xa4, 0x72, 0x9c, 0xf9, 0x03,
	0xe7, 0xaa, 0x44, 0x69, 0x11, 0x5a, 0x33, 0xaa, 0xef, 0x38, 0xc1, 0x89, 0x9d, 0x04, 0xd0, 0x48,
	0x2a, 0x98, 0xf0, 0xf8, 0x4b, 0x0c, 0x52, 0x5d, 0xc4, 0x97, 0xe3, 0x13, 0xb7, 0x0f, 0x8f, 0xd7,
	0x31, 0x61, 0x9c, 0x6e, 0x53, 0x86, 0x7e, 0x1b, 0xc1, 0x85, 0x0a, 0x7c, 0xf9, 0x39, 0x18, 0xb0,
	0xa0, 0x1a, 0x07, 0x86, 0x9c, 0xd4, 0x24, 0xbc, 0x79, 0x62, 0x66, 0x32, 0xe1, 0xca, 0x87, 0xd8,
	0xb4, 0x7d, 0x26, 0x2c, 0xe3, 0xc0, 0x90, 0x45, 0x5c, 0x8b, 0x59, 0x80, 0x1f, 0x86, 0x8e, 0x7d,
	0x79, 0x4b, 0xc7, 0xc7, 0x5b, 0x83, 0xbe, 0x25, 0x33, 0x01, 0xcc, 0x84, 0x2e, 0x64, 0x7d, 0x24,
	0xf0, 0xdb, 0xd9, 0xa6, 0xcf, 0x6f, 0x10, 0xdc, 0xf4, 0xbf, 0x9e, 0x80, 0xd0, 0x3c, 0xde, 0x63,
	0xca, 0x16, 0xac, 0x38, 0xec, 0x82, 0x15, 0xd7, 0xf1, 0xbe, 0xa5, 0x78, 0xdf, 0x67, 0xbc, 0xf0,
	0xbe, 0x4e, 0x78, 0xee, 0x9b, 0xe7, 0x8b, 0xce, 0x75, 0x80, 0x69, 0xef, 0x9d, 0x27, 0x98, 0xd6,
	0x01, 0xa3, 0xad, 0x43, 0x1c, 0xbf, 0x3c, 0x88, 0xe3, 0xad, 0xd3, 0x42, 0x1c, 0xdd, 0x88, 0xc6,
	0x5f, 0x3b, 0x1f, 0x40, 0x63, 0x05, 0xe0, 0xe1, 0xdb, 0xe7, 0x86, 0x3b, 0xf4, 0x42, 0x14, 0x6e,
	0x9e, 0x03, 0xa2, 0xb0, 0x04, 0x2c, 0x38, 0x5b, 0x1b, 0x58, 0xd0, 0x01, 0x13, 0xbc, 0x79, 0x5a,
	0x98, 0xa0, 0x0b, 0x01, 0x78, 0xef, 0x7c, 0x10, 0x80, 0x1e, 0xe0, 0xbe, 0x9b, 0x35, 0x83, 0xfb,
	0xbc, 0x31, 0x7d, 0x6f, 0x9d, 0x2b, 0xa4, 0xcf, 0x85, 0xd4, 0x53, 0x9f, 0x1a, 0x50, 0xef, 0x57,
	0x0b, 0x82, 0xf7, 0xe1, 0xd3, 0x87, 0xe0, 0x9d, 0x84, 0x9c, 0x4b, 0x9f, 0x37, 0x72, 0xce, 0x13,
	0x26, 0x97, 0x38, 0x17, 0x98, 0xdc, 0xaf, 0x04, 0x40, 0x4e, 0x7f, 0x5a, 0xf8, 0xb8, 0x3a, 0xac,
	0xed, 0x2b, 0x00, 0x6b, 0xd3, 0x9f, 0x16, 0xac, 0xad, 0x12, 0xa0, 0x6d, 0xb1, 0x66, 0x40, 0x9b,
	0x27, 0x8e, 0xed, 0xfd, 0xa7, 0x03, 0x63, 0xab, 0x63, 0xd2, 0xea, 0x98, 0xb4, 0x3a, 0x26, 0xed,
	0x29, 0x61, 0xd2, 0x1e, 0x3c, 0x55, 0x48, 0x5a, 0x1d, 0x49, 0x56, 0x47, 0x92, 0x95, 0x63, 0xaf,
	0x9c, 0x07, 0x92, 0xec, 0x97, 0x1c, 0x43, 0xb6, 0x7b, 0xde, 0x10, 0xb2, 0xb2, 0xc8, 0xaf, 0x7b,
	0xe7, 0x86, 0xfc, 0x72, 0xe3, 0xbd, 0x92, 0xe7, 0x88, 0xf7, 0xf2, 0x44, 0x79, 0x65, 0x9e, 0x06,
	0xca, 0xeb, 0x97, 0x12, 0xdb, 0x95, 0x38, 0x27, 0x6c, 0x97, 0x13, 0xd5, 0xf5, 0xf6, 0x79, 0x82,
	0xba, 0x4a, 0xe0, 0x5a, 0x6f, 0x9f, 0x27, 0x5a, 0xab, 0x04, 0x87, 0x35, 0x5b, 0x1b, 0x0e, 0xcb,
	0x01, 0xba, 0xea, 0xfc, 0xf8, 0x86, 0x2b, 0x31, 0x46, 0xfc, 0x9a, 0x17, 0x80, 0xa8, 0xe7, 0xd1,
	0x13, 0x54, 0x5a, 0x1c, 0xbf, 0xe8, 0x40, 0x13, 0x85, 0x1e, 0x3d, 0x41, 0xb6, 0xdf, 0x71, 0xc1,
	0x13, 0x34, 0xd4, 0xfb, 0xe8, 0x09, 0xf2, 0x28, 0x8f, 0xc7, 0xca, 0x61, 0x7c, 0xfa, 0x1f, 0x3d,
	0x41, 0xde, 0x9f, 0xe2, 0xa3, 0x65, 0x70, 0x3c, 0xe1, 0x47, 0x4f, 0x90, 0xe7, 0x97, 0xf8, 0xab,
	0x27, 0x40, 0x75, 0x22, 0x8f, 0x9e, 0xa0, 0x8a, 0x35, 0xe2, 0x0b, 0x27, 0x62, 0x75, 0x86, 0x1e,
	0x3d, 0x41, 0x27, 0xd4, 0x39, 0x11, 0xa8, 0xf3, 0xe8, 0x09, 0xaa, 0x54, 0x21, 0xfe, 0x52, 0x45,
	0xa0, 0xce, 0xe0, 0xa3, 0x27, 0xa8, 0xc2, 0x77, 0x6c, 0x6b, 0x6f, 0x30, 0x0e, 0xb1, 0xb5, 0xe7,
	0x27, 0x6c, 0x6b, 0x4f, 0x44, 0x0e, 0xb1, 0xb5, 0xd7, 0x17, 0xdc, 0xff, 0x1e, 0x10, 0x1c, 0xd2,
	0xff, 0xa5, 0xe5, 0xf1, 0x2b, 0x25, 0xc8, 0x1b, 0xfe, 0xd1, 0x13, 0xe4, 0x2a, 0x8b, 0xdf, 0x3c,
	0x19, 0x7a, 0xf3, 0xec, 0xa3, 0x27, 0xe8, 0xa4, 0x4a, 0x58, 0x9a, 0x0b, 0x68, 0x43, 0xa4, 0x39,
	0xcb, 0xb0, 0x2f, 0x94, 0x42, 0x6a, 0x88, 0x2f, 0x94, 0x14, 0xff, 0x52, 0x62, 0x6a, 0xfe, 0x70,
	0x02, 0x3a, 0x18, 0xd8, 0xba, 0x1e, 0xc1, 0xaa, 0x47, 0xb0, 0xea, 0x11, 0xac, 0x7a, 0x04, 0xab,
	0x1e, 0xc1, 0xaa, 0x47, 0xb0, 0xea, 0x11, 0xac, 0x7a, 0x04, 0xab, 0x1e, 0xc1, 0xaa, 0x47, 0xb0,
	0xea, 0x11, 0xac, 0x7a, 0x04, 0xab, 0x1e, 0xc1, 0xaa, 0x47, 0xb0, 0xea, 0x11, 0xac, 0x7a, 0x04,
	0xab, 0x1e, 0xc1, 0xaa, 0x47, 0xb0, 0xea, 0x11, 0xac, 0x7a, 0x04, 0xab, 0x1e, 0xc1, 0xaa, 0x47,
	0xb0, 0xea, 0x11, 0xac, 0x7a, 0x04, 0xab, 0x1e, 0xc1, 0xaa, 0x47, 0xb0, 0xbe, 0x02, 0x11, 0xac,
	0x4f, 0xa7, 0xa1, 0xf5, 0x96, 0x6c, 0xd4, 0xa3, 0x57, 0xf5, 0xe8, 0xd5, 0xd3, 0x8d, 0x5e, 0xfd,
	0x52, 0xfd, 0x09, 0x83, 0xbf, 0xbc, 0x7f, 0x65, 0xa0, 0x1e, 0x64, 0xac, 0x07, 0x19, 0xeb, 0x41,
	0xc6, 0x7a, 0x90, 0xb1, 0x1e, 0x64, 0xac, 0x07, 0x19, 0xeb, 0x41, 0xc6, 0x7a, 0x90, 0xb1, 0x1e,
	0x64, 0xac, 0x07, 0x19, 0xeb, 0x41, 0xc6, 0x7a, 0x90, 0xb1, 0x1e, 0x64, 0xac, 0x07, 0x19, 0xeb,
	0x41, 0xc6, 0x7a, 0x90, 0xb1, 0x1e, 0x64, 0xac, 0x07, 0x19, 0xeb, 0x41, 0xc6, 0x7a, 0x90, 0xb1,
	0x1e, 0x64, 0xac, 0x07, 0x19, 0xeb, 0x41, 0xc6, 0x5f, 0xa9, 0x20, 0x63, 0x53, 0xf0, 0x67, 0xcd,
	0xdc, 0xff, 0x6a, 0x7e, 0x8a, 0xc1, 0xc6, 0x63, 0x04, 0x3d, 0xab, 0x4a, 0x46, 0x4a, 0xcd, 0x2f,
	0xac, 0xdd, 0x96, 0x0d, 0x4d, 0x49, 0xe9, 0x34, 0xd9, 0x31, 0xbf, 0x02, 0x7e, 0x43, 0xa2, 0xc9,
	0x83, 0x43, 0xd5, 0x46, 0x19, 0x5c, 0x9c, 0x12, 0xd2, 0x8e, 0x88, 0x99, 0xf0, 0xbd, 0xd0, 0x74,
	0x5f, 0xca, 0xe4, 0x65, 0x3d, 0xec, 0x23, 0x11, 0x4c, 0xf6, 0x8b, 0x7f, 0x07, 0x82, 0x6a, 0x4e,
	0xd6, 0x24, 0x43, 0xd5, 0x48, 0x10, 0x33, 0x54, 0x6d, 0x52, 0x4e, 0x97, 0xa0, 0x75, 0xc6, 0x84,
	0xdc, 0xfa, 0x5a, 0x2c, 0x67, 0x9b, 0x3e, 0x2e, 0x20, 0x1f, 0x87, 0x86, 0xbe, 0x89, 0x60, 0xd0,
	0x45, 0x21, 0xca, 0x7a, 0x4e, 0xcd, 0xea, 0xf2, 0x2d, 0x4d, 0xcd, 0xe7, 0xe2, 0x07, 0xfc, 0x2a,
	0x04, 0xac, 0x04, 0xb1, 0x67, 0x69, 0x2e, 0xe1, 0xc2, 0x77, 0x43, 0x23, 0x69, 0x21, 0x49, 0xb9,
	0xd9, 0x22, 0xd2, 0x1f, 0x43, 0x22, 0x5c, 0x2c, 0xa3, 0xc5, 0xeb, 0xf8, 0x3b, 0x7f, 0x11, 0x5a,
	0xf0, 0x29, 0x5e, 0x37, 0xa4, 0xbd, 0x1c, 0x4d, 0xda, 0x2c, 0x16, 0x0b, 0xca, 0xf0, 0xfc, 0x21,
	0x82, 0x4b, 0x65, 0x98, 0x6e, 0xca, 0x1a, 0x3e, 0x9d, 0x25, 0x21, 0xb8, 0x83, 0x1b, 0x99, 0xdc,
	0x3a, 0x20, 0xf1, 0xe3, 0xd6, 0xd8, 0xc2, 0xa9, 0x5a, 0xe7, 0xb2, 0x98, 0xd8, 0xbc, 0xc3, 0x4c,
	0x77, 0xaf, 0xa8, 0x18, 0xe6, 0x1e, 0x3f, 0x13, 0x77, 0x62, 0x09, 0xb3, 0x71, 0x7f, 0xdf, 0x07,
	0x17, 0xca, 0xd4, 0x5b, 0x90, 0x0c, 0x89, 0x7f, 0x1d, 0x02, 0xd8, 0x59, 0x59, 0xa7, 0x9d, 0x4e,
	0xf0, 0x4d, 0x45, 0xce, 0xa4, 0x37, 0xe5, 0x8c, 0x9c, 0x32, 0x54, 0x4d, 0x24, 0xfc, 0xf0, 0x60,
	0xc8, 0x67, 0x15, 0x9a, 0x85, 0xfc, 0x94, 0x83, 0xe1, 0x4e, 0x56, 0x31, 0x44, 0xc2, 0x85, 0x7f,
	0x0b, 0x9a, 0x74, 0xd2, 0x15, 0x61, 0x3f, 0x31, 0xd0, 0xfc, 0x99, 0x0c, 0x44, 0x7b, 0x55, 0x64,
	0x2c, 0xaf, 0x2d, 0x41, 0xbb, 0x33, 0xa9, 0x78, 0x08, 0x80, 0x64, 0x7b, 0x25, 0xdb, 0x4c, 0xae,
	0x81, 0x6f, 0x85, 0x66, 0x4d, 0xde, 0x96, 0x35, 0x59, 0xe3, 0x10, 0x0f, 0xd0, 0x44, 0x84, 0xca,
	0x9c, 0x0f, 0x57, 0x24, 0x13, 0xa4, 0xb4, 0x23, 0x67, 0x0d, 0xce, 0x7f, 0xed, 0x87, 0xa8, 0x64,
	0x78, 0x3a, 0x6c, 0xc3, 0xf7, 0x40, 0xa7, 0xb8, 0xf8, 0xda, 0x9d, 0xc5, 0xcd, 0x44, 0x32, 0xb1,
	0x9e, 0x98, 0x5b, 0x4d, 0x6e, 0xde, 0xb9, 0xcd, 0x35, 0xf0, 0xbd, 0xc0, 0x9b, 0xc5, 0x37, 0xe7,
	0x96, 0x57, 0x17, 0x17, 0x48, 0x39, 0xe2, 0xbb, 0xa0, 0xc3, 0x2c, 0x8f, 0xde, 0xbb, 0x47, 0x0a,
	0x7d, 0xf6, 0xc2, 0x18, 0x2b, 0xf4, 0xdb, 0x0b, 0xc7, 0x58, 0x61, 0xc0, 0x5e, 0x38, 0xce, 0x0a,
	0x1b, 0xed, 0x85, 0x13, 0xac, 0xb0, 0x89, 0xe7, 0xa0, 0x6d, 0x61, 0x2e, 0x31, 0x97, 0x5c, 0xbf,
	0x93, 0x20, 0x25, 0xcd, 0xb8, 0x64, 0x75, 0x2e, 0xb1, 0xb8, 0x36, 0xff, 0x46, 0xf2, 0xf6, 0xe2,
	0xdc, 0x1a, 0x17, 0xbc, 0xf6, 0x9b, 0x08, 0xf8, 0x52, 0x6f, 0xe5, 0xfb, 0xa1, 0x67, 0x7e, 0x61,
	0x2d, 0xb9, 0xb0, 0xbc, 0x99, 0x10, 0x97, 0xe3, 0x77, 0x12, 0xcb, 0xeb, 0x6b, 0xc9, 0xb5, 0xb9,
	0xdb, 0x8b, 0x5c, 0x03, 0xcf, 0x43, 0x68, 0x7e, 0x6e, 0x7e, 0x69, 0x31, 0xb9, 0xb4, 0x9c, 0x48,
	0x26, 0xde, 0xd8, 0x58, 0x74, 0x36, 0x69, 0x7e, 0xfd, 0xce, 0x5a, 0x42, 0x7c, 0x83, 0xf3, 0x61,
	0x61, 0x4b, 0x89, 0xc4, 0x46, 0xf2, 0xf5, 0x45, 0x71, 0x73, 0x79, 0x7d, 0x8d, 0xf3, 0xf3, 0x1d,
	0xd0, 0x9a, 0x58, 0xdd, 0xb4, 0x0a, 0x02, 0xd8, 0xd4, 0x1b, 0xeb, 0x1b, 0x49, 0x71, 0xf1, 0x16,
	0xfe, 0xdd, 0xc8, 0x37, 0x83, 0x7f, 0x63, 0x7d, 0x83, 0x6b, 0xba, 0x76, 0xbb, 0x64, 0x7c, 0xdb,
	0x67, 0x32, 0xbe, 0x1b, 0xb8, 0xf5, 0x8d, 0x45, 0x71, 0x2e, 0xb1, 0x2e, 0x12, 0x15, 0x92, 0xcb,
	0x6b, 0x5c, 0x03, 0x1f, 0x86, 0x6e, 0x67, 0xe9, 0xda, 0x7a, 0x02, 0x7f, 0x41, 0xd7, 0x5e, 0x72,
	0x37, 0x12, 0x8f, 0x42, 0xbe, 0x05, 0x1a, 0x89, 0xb6, 0x5c, 0x03, 0xfe, 0x6f, 0xfc, 0x8d, 0xc4,
	0xe2, 0x26, 0x87, 0xb0, 0xda, 0xb7, 0x97, 0x57, 0x57, 0x97, 0x37, 0x17, 0xe7, 0xd7, 0xd7, 0x16,
	0x36, 0x39, 0x5f, 0xfc, 0xef, 0xa2, 0xa3, 0x1f, 0x0d, 0x36, 0x7c, 0xf2, 0xa3, 0xc1, 0x86, 0xcf,
	0x7e, 0x34, 0x88, 0x3e, 0x3c, 0x1e, 0x44, 0xdf, 0x3d, 0x1e, 0x44, 0x7f, 0x72, 0x3c, 0x88, 0x8e,
	0x8e, 0x07, 0xd1, 0x27, 0xc7, 0x83, 0xe8, 0xcf, 0x8e, 0x07, 0xd1, 0x4f, 0x8e, 0x07, 0x1b, 0x3e,
	0x3b, 0x1e, 0x44, 0x7f, 0xeb, 0xc7, 0x83, 0x0d, 0x87, 0x3f, 0x1e, 0x44, 0x47, 0x3f, 0x1e, 0x6c,
	0xf8, 0xe4, 0xc7, 0x83, 0x0d, 0x6f, 0xbe, 0xb9, 0xa3, 0xe6, 0xde, 0xdf, 0x19, 0xb9, 0xaf, 0xe2,
	0xd5, 0x43, 0x93, 0x46, 0xf2, 0xfa, 0x75, 0xf2, 0x9f, 0x6d, 0x55, 0xdb, 0x1b, 0xce, 0x69, 0xea,
	0x7d, 0x25, 0x2d, 0x6b, 0xc3, 0xe6, 0xe7, 0xeb, 0xb9, 0xad, 0x1d, 0xf5, 0xba, 0xfc, 0xc0, 0xa0,
	0x4e, 0x70, 0x9d, 0xfd, 0x43, 0x7c, 0xe1, 0xba, 0xdb, 0x17, 0xb6, 0x9a, 0x72, 0x9a, 0x6a, 0xa8,
	0x63, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x67, 0x5f, 0x54, 0xb2, 0xd2, 0x00, 0x00,
}

func (x HeaderOptions) String() string {
	s, ok := HeaderOptions_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LilacCDNMetricsFieldSelector) String() string {
	s, ok := LilacCDNMetricsFieldSelector_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LilacCDNMetricsTag) String() string {
	s, ok := LilacCDNMetricsTag_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LilacCDNMetricsOperatorType) String() string {
	s, ok := LilacCDNMetricsOperatorType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LilacCDNMetricUnit) String() string {
	s, ok := LilacCDNMetricUnit_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ProxyTypeHttpsAutoCerts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpRedirect != that1.HttpRedirect {
		return false
	}
	if this.AddHsts != that1.AddHsts {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_DefaultHeader)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_ServerName)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_AppendServerName)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_PassThrough)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *HeaderControlType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderControlType)
	if !ok {
		that2, ok := that.(HeaderControlType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	return true
}
func (this *WebApplicationFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebApplicationFirewall)
	if !ok {
		that2, ok := that.(WebApplicationFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.DataGuardRules) != len(that1.DataGuardRules) {
		return false
	}
	for i := range this.DataGuardRules {
		if !this.DataGuardRules[i].Equal(that1.DataGuardRules[i]) {
			return false
		}
	}
	if !this.CsrfPolicy.Equal(that1.CsrfPolicy) {
		return false
	}
	if len(this.GraphqlRules) != len(that1.GraphqlRules) {
		return false
	}
	for i := range this.GraphqlRules {
		if !this.GraphqlRules[i].Equal(that1.GraphqlRules[i]) {
			return false
		}
	}
	if len(this.ProtectedCookies) != len(that1.ProtectedCookies) {
		return false
	}
	for i := range this.ProtectedCookies {
		if !this.ProtectedCookies[i].Equal(that1.ProtectedCookies[i]) {
			return false
		}
	}
	return true
}
func (this *WebApplicationFirewall_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebApplicationFirewall_DisableWaf)
	if !ok {
		that2, ok := that.(WebApplicationFirewall_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *WebApplicationFirewall_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebApplicationFirewall_AppFirewall)
	if !ok {
		that2, ok := that.(WebApplicationFirewall_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *WebApplicationFirewall_AppFirewallOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebApplicationFirewall_AppFirewallOnCacheMiss)
	if !ok {
		that2, ok := that.(WebApplicationFirewall_AppFirewallOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewallOnCacheMiss.Equal(that1.AppFirewallOnCacheMiss) {
		return false
	}
	return true
}
func (this *BotProtection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotProtection)
	if !ok {
		that2, ok := that.(BotProtection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.BotDefenseChoice == nil {
		if this.BotDefenseChoice != nil {
			return false
		}
	} else if this.BotDefenseChoice == nil {
		return false
	} else if !this.BotDefenseChoice.Equal(that1.BotDefenseChoice) {
		return false
	}
	return true
}
func (this *BotProtection_DisableBotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotProtection_DisableBotDefense)
	if !ok {
		that2, ok := that.(BotProtection_DisableBotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableBotDefense.Equal(that1.DisableBotDefense) {
		return false
	}
	return true
}
func (this *BotProtection_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotProtection_BotDefense)
	if !ok {
		that2, ok := that.(BotProtection_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefense.Equal(that1.BotDefense) {
		return false
	}
	return true
}
func (this *BotProtection_BotDefenseAdvanced) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotProtection_BotDefenseAdvanced)
	if !ok {
		that2, ok := that.(BotProtection_BotDefenseAdvanced)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefenseAdvanced.Equal(that1.BotDefenseAdvanced) {
		return false
	}
	return true
}
func (this *DoSProtection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DoSProtection)
	if !ok {
		that2, ok := that.(DoSProtection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.L7DdosAutoMitigationAction == nil {
		if this.L7DdosAutoMitigationAction != nil {
			return false
		}
	} else if this.L7DdosAutoMitigationAction == nil {
		return false
	} else if !this.L7DdosAutoMitigationAction.Equal(that1.L7DdosAutoMitigationAction) {
		return false
	}
	if len(this.DdosMitigationRules) != len(that1.DdosMitigationRules) {
		return false
	}
	for i := range this.DdosMitigationRules {
		if !this.DdosMitigationRules[i].Equal(that1.DdosMitigationRules[i]) {
			return false
		}
	}
	if that1.SlowDdosMitigationChoice == nil {
		if this.SlowDdosMitigationChoice != nil {
			return false
		}
	} else if this.SlowDdosMitigationChoice == nil {
		return false
	} else if !this.SlowDdosMitigationChoice.Equal(that1.SlowDdosMitigationChoice) {
		return false
	}
	return true
}
func (this *DoSProtection_L7DdosActionDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DoSProtection_L7DdosActionDefault)
	if !ok {
		that2, ok := that.(DoSProtection_L7DdosActionDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionDefault.Equal(that1.L7DdosActionDefault) {
		return false
	}
	return true
}
func (this *DoSProtection_L7DdosActionBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DoSProtection_L7DdosActionBlock)
	if !ok {
		that2, ok := that.(DoSProtection_L7DdosActionBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionBlock.Equal(that1.L7DdosActionBlock) {
		return false
	}
	return true
}
func (this *DoSProtection_L7DdosActionJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DoSProtection_L7DdosActionJsChallenge)
	if !ok {
		that2, ok := that.(DoSProtection_L7DdosActionJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionJsChallenge.Equal(that1.L7DdosActionJsChallenge) {
		return false
	}
	return true
}
func (this *DoSProtection_L7DdosActionNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DoSProtection_L7DdosActionNone)
	if !ok {
		that2, ok := that.(DoSProtection_L7DdosActionNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionNone.Equal(that1.L7DdosActionNone) {
		return false
	}
	return true
}
func (this *DoSProtection_SystemDefaultTimeouts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DoSProtection_SystemDefaultTimeouts)
	if !ok {
		that2, ok := that.(DoSProtection_SystemDefaultTimeouts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemDefaultTimeouts.Equal(that1.SystemDefaultTimeouts) {
		return false
	}
	return true
}
func (this *DoSProtection_SlowDdosMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DoSProtection_SlowDdosMitigation)
	if !ok {
		that2, ok := that.(DoSProtection_SlowDdosMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SlowDdosMitigation.Equal(that1.SlowDdosMitigation) {
		return false
	}
	return true
}
func (this *OtherSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OtherSettings)
	if !ok {
		that2, ok := that.(OtherSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if !this.LoggingOptions.Equal(that1.LoggingOptions) {
		return false
	}
	if !this.HeaderOptions.Equal(that1.HeaderOptions) {
		return false
	}
	if !this.IpFiltering.Equal(that1.IpFiltering) {
		return false
	}
	if !this.GeoFiltering.Equal(that1.GeoFiltering) {
		return false
	}
	return true
}
func (this *ClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientSideDefense)
	if !ok {
		that2, ok := that.(ClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ClientSideDefenseChoice == nil {
		if this.ClientSideDefenseChoice != nil {
			return false
		}
	} else if this.ClientSideDefenseChoice == nil {
		return false
	} else if !this.ClientSideDefenseChoice.Equal(that1.ClientSideDefenseChoice) {
		return false
	}
	return true
}
func (this *ClientSideDefense_DisableClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientSideDefense_DisableClientSideDefense)
	if !ok {
		that2, ok := that.(ClientSideDefense_DisableClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableClientSideDefense.Equal(that1.DisableClientSideDefense) {
		return false
	}
	return true
}
func (this *ClientSideDefense_ClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientSideDefense_ClientSideDefense)
	if !ok {
		that2, ok := that.(ClientSideDefense_ClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSideDefense.Equal(that1.ClientSideDefense) {
		return false
	}
	return true
}
func (this *CommonSecurityControls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls)
	if !ok {
		that2, ok := that.(CommonSecurityControls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.IpReputationChoice == nil {
		if this.IpReputationChoice != nil {
			return false
		}
	} else if this.IpReputationChoice == nil {
		return false
	} else if !this.IpReputationChoice.Equal(that1.IpReputationChoice) {
		return false
	}
	if that1.ThreatMeshChoice == nil {
		if this.ThreatMeshChoice != nil {
			return false
		}
	} else if this.ThreatMeshChoice == nil {
		return false
	} else if !this.ThreatMeshChoice.Equal(that1.ThreatMeshChoice) {
		return false
	}
	if that1.UserIdChoice == nil {
		if this.UserIdChoice != nil {
			return false
		}
	} else if this.UserIdChoice == nil {
		return false
	} else if !this.UserIdChoice.Equal(that1.UserIdChoice) {
		return false
	}
	if that1.MaliciousUserDetectionChoice == nil {
		if this.MaliciousUserDetectionChoice != nil {
			return false
		}
	} else if this.MaliciousUserDetectionChoice == nil {
		return false
	} else if !this.MaliciousUserDetectionChoice.Equal(that1.MaliciousUserDetectionChoice) {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(CommonSecurityControls_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_NoServicePolicies)
	if !ok {
		that2, ok := that.(CommonSecurityControls_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(CommonSecurityControls_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_DisableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_DisableIpReputation)
	if !ok {
		that2, ok := that.(CommonSecurityControls_DisableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableIpReputation.Equal(that1.DisableIpReputation) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_EnableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_EnableIpReputation)
	if !ok {
		that2, ok := that.(CommonSecurityControls_EnableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableIpReputation.Equal(that1.EnableIpReputation) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_IpReputationOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_IpReputationOnCacheMiss)
	if !ok {
		that2, ok := that.(CommonSecurityControls_IpReputationOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpReputationOnCacheMiss.Equal(that1.IpReputationOnCacheMiss) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_DisableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_DisableThreatMesh)
	if !ok {
		that2, ok := that.(CommonSecurityControls_DisableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableThreatMesh.Equal(that1.DisableThreatMesh) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_EnableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_EnableThreatMesh)
	if !ok {
		that2, ok := that.(CommonSecurityControls_EnableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableThreatMesh.Equal(that1.EnableThreatMesh) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_UserIdClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_UserIdClientIp)
	if !ok {
		that2, ok := that.(CommonSecurityControls_UserIdClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdClientIp.Equal(that1.UserIdClientIp) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_UserIdentification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_UserIdentification)
	if !ok {
		that2, ok := that.(CommonSecurityControls_UserIdentification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_DisableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_DisableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(CommonSecurityControls_DisableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMaliciousUserDetection.Equal(that1.DisableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_EnableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_EnableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(CommonSecurityControls_EnableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableMaliciousUserDetection.Equal(that1.EnableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_MaliciousUserDetectionOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_MaliciousUserDetectionOnCacheMiss)
	if !ok {
		that2, ok := that.(CommonSecurityControls_MaliciousUserDetectionOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaliciousUserDetectionOnCacheMiss.Equal(that1.MaliciousUserDetectionOnCacheMiss) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_NoChallenge)
	if !ok {
		that2, ok := that.(CommonSecurityControls_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_EnableChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_EnableChallenge)
	if !ok {
		that2, ok := that.(CommonSecurityControls_EnableChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableChallenge.Equal(that1.EnableChallenge) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_ChallengeOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_ChallengeOnCacheMiss)
	if !ok {
		that2, ok := that.(CommonSecurityControls_ChallengeOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChallengeOnCacheMiss.Equal(that1.ChallengeOnCacheMiss) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_JsChallenge)
	if !ok {
		that2, ok := that.(CommonSecurityControls_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_CaptchaChallenge)
	if !ok {
		that2, ok := that.(CommonSecurityControls_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(CommonSecurityControls_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_DisableRateLimit)
	if !ok {
		that2, ok := that.(CommonSecurityControls_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_ApiRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_ApiRateLimit)
	if !ok {
		that2, ok := that.(CommonSecurityControls_ApiRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiRateLimit.Equal(that1.ApiRateLimit) {
		return false
	}
	return true
}
func (this *CommonSecurityControls_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonSecurityControls_RateLimit)
	if !ok {
		that2, ok := that.(CommonSecurityControls_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *ApiProtection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiProtection)
	if !ok {
		that2, ok := that.(ApiProtection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if !this.ApiProtectionRules.Equal(that1.ApiProtectionRules) {
		return false
	}
	if !this.JwtValidation.Equal(that1.JwtValidation) {
		return false
	}
	if that1.ApiDiscoveryChoice == nil {
		if this.ApiDiscoveryChoice != nil {
			return false
		}
	} else if this.ApiDiscoveryChoice == nil {
		return false
	} else if !this.ApiDiscoveryChoice.Equal(that1.ApiDiscoveryChoice) {
		return false
	}
	if that1.SensitiveDataPolicyChoice == nil {
		if this.SensitiveDataPolicyChoice != nil {
			return false
		}
	} else if this.SensitiveDataPolicyChoice == nil {
		return false
	} else if !this.SensitiveDataPolicyChoice.Equal(that1.SensitiveDataPolicyChoice) {
		return false
	}
	return true
}
func (this *ApiProtection_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiProtection_DisableApiDefinition)
	if !ok {
		that2, ok := that.(ApiProtection_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *ApiProtection_ApiSpecification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiProtection_ApiSpecification)
	if !ok {
		that2, ok := that.(ApiProtection_ApiSpecification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecification.Equal(that1.ApiSpecification) {
		return false
	}
	return true
}
func (this *ApiProtection_ApiSpecificationOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiProtection_ApiSpecificationOnCacheMiss)
	if !ok {
		that2, ok := that.(ApiProtection_ApiSpecificationOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecificationOnCacheMiss.Equal(that1.ApiSpecificationOnCacheMiss) {
		return false
	}
	return true
}
func (this *ApiProtection_EnableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiProtection_EnableApiDiscovery)
	if !ok {
		that2, ok := that.(ApiProtection_EnableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableApiDiscovery.Equal(that1.EnableApiDiscovery) {
		return false
	}
	return true
}
func (this *ApiProtection_DisableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiProtection_DisableApiDiscovery)
	if !ok {
		that2, ok := that.(ApiProtection_DisableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDiscovery.Equal(that1.DisableApiDiscovery) {
		return false
	}
	return true
}
func (this *ApiProtection_ApiDiscoveryOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiProtection_ApiDiscoveryOnCacheMiss)
	if !ok {
		that2, ok := that.(ApiProtection_ApiDiscoveryOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDiscoveryOnCacheMiss.Equal(that1.ApiDiscoveryOnCacheMiss) {
		return false
	}
	return true
}
func (this *ApiProtection_DefaultSensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiProtection_DefaultSensitiveDataPolicy)
	if !ok {
		that2, ok := that.(ApiProtection_DefaultSensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSensitiveDataPolicy.Equal(that1.DefaultSensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *ApiProtection_SensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiProtection_SensitiveDataPolicy)
	if !ok {
		that2, ok := that.(ApiProtection_SensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SensitiveDataPolicy.Equal(that1.SensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *SecurityOptionsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityOptionsType)
	if !ok {
		that2, ok := that.(SecurityOptionsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpFiltering.Equal(that1.IpFiltering) {
		return false
	}
	if !this.GeoFiltering.Equal(that1.GeoFiltering) {
		return false
	}
	if !this.AuthOptions.Equal(that1.AuthOptions) {
		return false
	}
	if !this.WebAppFirewall.Equal(that1.WebAppFirewall) {
		return false
	}
	if !this.ApiProtection.Equal(that1.ApiProtection) {
		return false
	}
	if !this.CommonSecurityControls.Equal(that1.CommonSecurityControls) {
		return false
	}
	return true
}
func (this *LoggingOptionsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoggingOptionsType)
	if !ok {
		that2, ok := that.(LoggingOptionsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientLogOptions.Equal(that1.ClientLogOptions) {
		return false
	}
	if !this.OriginLogOptions.Equal(that1.OriginLogOptions) {
		return false
	}
	return true
}
func (this *CDNCacheRuleExpressionList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNCacheRuleExpressionList)
	if !ok {
		that2, ok := that.(CDNCacheRuleExpressionList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExpressionName != that1.ExpressionName {
		return false
	}
	if len(this.CacheRuleExpression) != len(that1.CacheRuleExpression) {
		return false
	}
	for i := range this.CacheRuleExpression {
		if !this.CacheRuleExpression[i].Equal(that1.CacheRuleExpression[i]) {
			return false
		}
	}
	return true
}
func (this *CacheOperator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheOperator)
	if !ok {
		that2, ok := that.(CacheOperator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CacheOperator == nil {
		if this.CacheOperator != nil {
			return false
		}
	} else if this.CacheOperator == nil {
		return false
	} else if !this.CacheOperator.Equal(that1.CacheOperator) {
		return false
	}
	return true
}
func (this *CacheOperator_Equals) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheOperator_Equals)
	if !ok {
		that2, ok := that.(CacheOperator_Equals)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Equals != that1.Equals {
		return false
	}
	return true
}
func (this *CacheOperator_DoesNotEqual) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheOperator_DoesNotEqual)
	if !ok {
		that2, ok := that.(CacheOperator_DoesNotEqual)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DoesNotEqual != that1.DoesNotEqual {
		return false
	}
	return true
}
func (this *CacheOperator_Contains) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheOperator_Contains)
	if !ok {
		that2, ok := that.(CacheOperator_Contains)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Contains != that1.Contains {
		return false
	}
	return true
}
func (this *CacheOperator_DoesNotContain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheOperator_DoesNotContain)
	if !ok {
		that2, ok := that.(CacheOperator_DoesNotContain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DoesNotContain != that1.DoesNotContain {
		return false
	}
	return true
}
func (this *CacheOperator_Startswith) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheOperator_Startswith)
	if !ok {
		that2, ok := that.(CacheOperator_Startswith)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Startswith != that1.Startswith {
		return false
	}
	return true
}
func (this *CacheOperator_DoesNotStartWith) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheOperator_DoesNotStartWith)
	if !ok {
		that2, ok := that.(CacheOperator_DoesNotStartWith)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DoesNotStartWith != that1.DoesNotStartWith {
		return false
	}
	return true
}
func (this *CacheOperator_Endswith) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheOperator_Endswith)
	if !ok {
		that2, ok := that.(CacheOperator_Endswith)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Endswith != that1.Endswith {
		return false
	}
	return true
}
func (this *CacheOperator_DoesNotEndWith) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheOperator_DoesNotEndWith)
	if !ok {
		that2, ok := that.(CacheOperator_DoesNotEndWith)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DoesNotEndWith != that1.DoesNotEndWith {
		return false
	}
	return true
}
func (this *CacheOperator_MatchRegex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheOperator_MatchRegex)
	if !ok {
		that2, ok := that.(CacheOperator_MatchRegex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MatchRegex != that1.MatchRegex {
		return false
	}
	return true
}
func (this *CacheHeaderMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheHeaderMatcherType)
	if !ok {
		that2, ok := that.(CacheHeaderMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Operator.Equal(that1.Operator) {
		return false
	}
	return true
}
func (this *CDNPathMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNPathMatcherType)
	if !ok {
		that2, ok := that.(CDNPathMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Operator.Equal(that1.Operator) {
		return false
	}
	return true
}
func (this *CacheCookieMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheCookieMatcherType)
	if !ok {
		that2, ok := that.(CacheCookieMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Operator.Equal(that1.Operator) {
		return false
	}
	return true
}
func (this *CacheQueryParameterMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheQueryParameterMatcherType)
	if !ok {
		that2, ok := that.(CacheQueryParameterMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.Operator.Equal(that1.Operator) {
		return false
	}
	return true
}
func (this *CDNCacheRuleExpression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNCacheRuleExpression)
	if !ok {
		that2, ok := that.(CDNCacheRuleExpression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PathMatch.Equal(that1.PathMatch) {
		return false
	}
	if len(this.QueryParameters) != len(that1.QueryParameters) {
		return false
	}
	for i := range this.QueryParameters {
		if !this.QueryParameters[i].Equal(that1.QueryParameters[i]) {
			return false
		}
	}
	if len(this.CacheHeaders) != len(that1.CacheHeaders) {
		return false
	}
	for i := range this.CacheHeaders {
		if !this.CacheHeaders[i].Equal(that1.CacheHeaders[i]) {
			return false
		}
	}
	if len(this.CookieMatcher) != len(that1.CookieMatcher) {
		return false
	}
	for i := range this.CookieMatcher {
		if !this.CookieMatcher[i].Equal(that1.CookieMatcher[i]) {
			return false
		}
	}
	return true
}
func (this *CacheTTLEnableProps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheTTLEnableProps)
	if !ok {
		that2, ok := that.(CacheTTLEnableProps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CacheTtl != that1.CacheTtl {
		return false
	}
	if this.IgnoreResponseCookie != that1.IgnoreResponseCookie {
		return false
	}
	if this.CacheOverride != that1.CacheOverride {
		return false
	}
	return true
}
func (this *CacheEligibleOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheEligibleOptions)
	if !ok {
		that2, ok := that.(CacheEligibleOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EligibleForCache == nil {
		if this.EligibleForCache != nil {
			return false
		}
	} else if this.EligibleForCache == nil {
		return false
	} else if !this.EligibleForCache.Equal(that1.EligibleForCache) {
		return false
	}
	return true
}
func (this *CacheEligibleOptions_SchemeHostnameUri) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheEligibleOptions_SchemeHostnameUri)
	if !ok {
		that2, ok := that.(CacheEligibleOptions_SchemeHostnameUri)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SchemeHostnameUri.Equal(that1.SchemeHostnameUri) {
		return false
	}
	return true
}
func (this *CacheEligibleOptions_SchemeHostnameRequestUri) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheEligibleOptions_SchemeHostnameRequestUri)
	if !ok {
		that2, ok := that.(CacheEligibleOptions_SchemeHostnameRequestUri)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SchemeHostnameRequestUri.Equal(that1.SchemeHostnameRequestUri) {
		return false
	}
	return true
}
func (this *CacheEligibleOptions_HostnameUri) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheEligibleOptions_HostnameUri)
	if !ok {
		that2, ok := that.(CacheEligibleOptions_HostnameUri)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HostnameUri.Equal(that1.HostnameUri) {
		return false
	}
	return true
}
func (this *CacheEligibleOptions_SchemeHostnameUriQuery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheEligibleOptions_SchemeHostnameUriQuery)
	if !ok {
		that2, ok := that.(CacheEligibleOptions_SchemeHostnameUriQuery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SchemeHostnameUriQuery.Equal(that1.SchemeHostnameUriQuery) {
		return false
	}
	return true
}
func (this *CacheEligibleOptions_SchemeProxyHostUri) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheEligibleOptions_SchemeProxyHostUri)
	if !ok {
		that2, ok := that.(CacheEligibleOptions_SchemeProxyHostUri)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SchemeProxyHostUri.Equal(that1.SchemeProxyHostUri) {
		return false
	}
	return true
}
func (this *CacheEligibleOptions_SchemeProxyHostRequestUri) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheEligibleOptions_SchemeProxyHostRequestUri)
	if !ok {
		that2, ok := that.(CacheEligibleOptions_SchemeProxyHostRequestUri)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SchemeProxyHostRequestUri.Equal(that1.SchemeProxyHostRequestUri) {
		return false
	}
	return true
}
func (this *CDNCacheRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNCacheRule)
	if !ok {
		that2, ok := that.(CDNCacheRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RuleName != that1.RuleName {
		return false
	}
	if len(this.RuleExpressionList) != len(that1.RuleExpressionList) {
		return false
	}
	for i := range this.RuleExpressionList {
		if !this.RuleExpressionList[i].Equal(that1.RuleExpressionList[i]) {
			return false
		}
	}
	if that1.CacheActions == nil {
		if this.CacheActions != nil {
			return false
		}
	} else if this.CacheActions == nil {
		return false
	} else if !this.CacheActions.Equal(that1.CacheActions) {
		return false
	}
	return true
}
func (this *CDNCacheRule_CacheBypass) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNCacheRule_CacheBypass)
	if !ok {
		that2, ok := that.(CDNCacheRule_CacheBypass)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CacheBypass.Equal(that1.CacheBypass) {
		return false
	}
	return true
}
func (this *CDNCacheRule_EligibleForCache) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNCacheRule_EligibleForCache)
	if !ok {
		that2, ok := that.(CDNCacheRule_EligibleForCache)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EligibleForCache.Equal(that1.EligibleForCache) {
		return false
	}
	return true
}
func (this *DefaultCacheTTLProps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultCacheTTLProps)
	if !ok {
		that2, ok := that.(DefaultCacheTTLProps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CacheTtl != that1.CacheTtl {
		return false
	}
	return true
}
func (this *DefaultCacheAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultCacheAction)
	if !ok {
		that2, ok := that.(DefaultCacheAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CacheActions == nil {
		if this.CacheActions != nil {
			return false
		}
	} else if this.CacheActions == nil {
		return false
	} else if !this.CacheActions.Equal(that1.CacheActions) {
		return false
	}
	return true
}
func (this *DefaultCacheAction_EligibleForCache) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultCacheAction_EligibleForCache)
	if !ok {
		that2, ok := that.(DefaultCacheAction_EligibleForCache)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EligibleForCache.Equal(that1.EligibleForCache) {
		return false
	}
	return true
}
func (this *DefaultCacheAction_CacheTtlDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultCacheAction_CacheTtlDefault)
	if !ok {
		that2, ok := that.(DefaultCacheAction_CacheTtlDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CacheTtlDefault != that1.CacheTtlDefault {
		return false
	}
	return true
}
func (this *DefaultCacheAction_CacheTtlOverride) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultCacheAction_CacheTtlOverride)
	if !ok {
		that2, ok := that.(DefaultCacheAction_CacheTtlOverride)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CacheTtlOverride != that1.CacheTtlOverride {
		return false
	}
	return true
}
func (this *DefaultCacheAction_CacheDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultCacheAction_CacheDisabled)
	if !ok {
		that2, ok := that.(DefaultCacheAction_CacheDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CacheDisabled.Equal(that1.CacheDisabled) {
		return false
	}
	return true
}
func (this *CacheOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheOptions)
	if !ok {
		that2, ok := that.(CacheOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultCacheAction.Equal(that1.DefaultCacheAction) {
		return false
	}
	if len(this.CacheRules) != len(that1.CacheRules) {
		return false
	}
	for i := range this.CacheRules {
		if !this.CacheRules[i].Equal(that1.CacheRules[i]) {
			return false
		}
	}
	return true
}
func (this *CacheTTLOptionsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheTTLOptionsType)
	if !ok {
		that2, ok := that.(CacheTTLOptionsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TtlOptions == nil {
		if this.TtlOptions != nil {
			return false
		}
	} else if this.TtlOptions == nil {
		return false
	} else if !this.TtlOptions.Equal(that1.TtlOptions) {
		return false
	}
	return true
}
func (this *CacheTTLOptionsType_CacheTtlDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheTTLOptionsType_CacheTtlDefault)
	if !ok {
		that2, ok := that.(CacheTTLOptionsType_CacheTtlDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CacheTtlDefault != that1.CacheTtlDefault {
		return false
	}
	return true
}
func (this *CacheTTLOptionsType_CacheTtlOverride) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheTTLOptionsType_CacheTtlOverride)
	if !ok {
		that2, ok := that.(CacheTTLOptionsType_CacheTtlOverride)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CacheTtlOverride != that1.CacheTtlOverride {
		return false
	}
	return true
}
func (this *CacheTTLOptionsType_CacheDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CacheTTLOptionsType_CacheDisabled)
	if !ok {
		that2, ok := that.(CacheTTLOptionsType_CacheDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CacheDisabled.Equal(that1.CacheDisabled) {
		return false
	}
	return true
}
func (this *AdvancedOptionsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvancedOptionsType)
	if !ok {
		that2, ok := that.(AdvancedOptionsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HeaderOptions.Equal(that1.HeaderOptions) {
		return false
	}
	if !this.SecurityOptions.Equal(that1.SecurityOptions) {
		return false
	}
	if !this.LoggingOptions.Equal(that1.LoggingOptions) {
		return false
	}
	if !this.CacheTtlOptions.Equal(that1.CacheTtlOptions) {
		return false
	}
	if !this.CacheOptions.Equal(that1.CacheOptions) {
		return false
	}
	return true
}
func (this *CDNTLSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNTLSConfig)
	if !ok {
		that2, ok := that.(CDNTLSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *CDNTLSConfig_Tls_12Plus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNTLSConfig_Tls_12Plus)
	if !ok {
		that2, ok := that.(CDNTLSConfig_Tls_12Plus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tls_12Plus.Equal(that1.Tls_12Plus) {
		return false
	}
	return true
}
func (this *CDNTLSConfig_Tls_11Plus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNTLSConfig_Tls_11Plus)
	if !ok {
		that2, ok := that.(CDNTLSConfig_Tls_11Plus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tls_11Plus.Equal(that1.Tls_11Plus) {
		return false
	}
	return true
}
func (this *CDNHTTPSAutoCertsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNHTTPSAutoCertsType)
	if !ok {
		that2, ok := that.(CDNHTTPSAutoCertsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpRedirect != that1.HttpRedirect {
		return false
	}
	if this.AddHsts != that1.AddHsts {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	return true
}
func (this *CDNDownstreamTlsParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNDownstreamTlsParamsType)
	if !ok {
		that2, ok := that.(CDNDownstreamTlsParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	if len(this.TlsCertificates) != len(that1.TlsCertificates) {
		return false
	}
	for i := range this.TlsCertificates {
		if !this.TlsCertificates[i].Equal(that1.TlsCertificates[i]) {
			return false
		}
	}
	return true
}
func (this *CDNHTTPSCustomCertsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNHTTPSCustomCertsType)
	if !ok {
		that2, ok := that.(CDNHTTPSCustomCertsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpRedirect != that1.HttpRedirect {
		return false
	}
	if this.AddHsts != that1.AddHsts {
		return false
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if !this.OriginPool.Equal(that1.OriginPool) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if this.AutoCertState != that1.AutoCertState {
		return false
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	if len(this.ServiceDomains) != len(that1.ServiceDomains) {
		return false
	}
	for i := range this.ServiceDomains {
		if !this.ServiceDomains[i].Equal(that1.ServiceDomains[i]) {
			return false
		}
	}
	if this.CertState != that1.CertState {
		return false
	}
	if !this.OtherSettings.Equal(that1.OtherSettings) {
		return false
	}
	if !this.DefaultCacheAction.Equal(that1.DefaultCacheAction) {
		return false
	}
	if len(this.CacheRules) != len(that1.CacheRules) {
		return false
	}
	for i := range this.CacheRules {
		if !this.CacheRules[i].Equal(that1.CacheRules[i]) {
			return false
		}
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.DataGuardRules) != len(that1.DataGuardRules) {
		return false
	}
	for i := range this.DataGuardRules {
		if !this.DataGuardRules[i].Equal(that1.DataGuardRules[i]) {
			return false
		}
	}
	if !this.CsrfPolicy.Equal(that1.CsrfPolicy) {
		return false
	}
	if len(this.GraphqlRules) != len(that1.GraphqlRules) {
		return false
	}
	for i := range this.GraphqlRules {
		if !this.GraphqlRules[i].Equal(that1.GraphqlRules[i]) {
			return false
		}
	}
	if len(this.ProtectedCookies) != len(that1.ProtectedCookies) {
		return false
	}
	for i := range this.ProtectedCookies {
		if !this.ProtectedCookies[i].Equal(that1.ProtectedCookies[i]) {
			return false
		}
	}
	if that1.BotDefenseChoice == nil {
		if this.BotDefenseChoice != nil {
			return false
		}
	} else if this.BotDefenseChoice == nil {
		return false
	} else if !this.BotDefenseChoice.Equal(that1.BotDefenseChoice) {
		return false
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if !this.ApiProtectionRules.Equal(that1.ApiProtectionRules) {
		return false
	}
	if !this.JwtValidation.Equal(that1.JwtValidation) {
		return false
	}
	if that1.ApiDiscoveryChoice == nil {
		if this.ApiDiscoveryChoice != nil {
			return false
		}
	} else if this.ApiDiscoveryChoice == nil {
		return false
	} else if !this.ApiDiscoveryChoice.Equal(that1.ApiDiscoveryChoice) {
		return false
	}
	if that1.SensitiveDataPolicyChoice == nil {
		if this.SensitiveDataPolicyChoice != nil {
			return false
		}
	} else if this.SensitiveDataPolicyChoice == nil {
		return false
	} else if !this.SensitiveDataPolicyChoice.Equal(that1.SensitiveDataPolicyChoice) {
		return false
	}
	if that1.L7DdosAutoMitigationAction == nil {
		if this.L7DdosAutoMitigationAction != nil {
			return false
		}
	} else if this.L7DdosAutoMitigationAction == nil {
		return false
	} else if !this.L7DdosAutoMitigationAction.Equal(that1.L7DdosAutoMitigationAction) {
		return false
	}
	if len(this.DdosMitigationRules) != len(that1.DdosMitigationRules) {
		return false
	}
	for i := range this.DdosMitigationRules {
		if !this.DdosMitigationRules[i].Equal(that1.DdosMitigationRules[i]) {
			return false
		}
	}
	if that1.SlowDdosMitigationChoice == nil {
		if this.SlowDdosMitigationChoice != nil {
			return false
		}
	} else if this.SlowDdosMitigationChoice == nil {
		return false
	} else if !this.SlowDdosMitigationChoice.Equal(that1.SlowDdosMitigationChoice) {
		return false
	}
	if that1.ClientSideDefenseChoice == nil {
		if this.ClientSideDefenseChoice != nil {
			return false
		}
	} else if this.ClientSideDefenseChoice == nil {
		return false
	} else if !this.ClientSideDefenseChoice.Equal(that1.ClientSideDefenseChoice) {
		return false
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.IpReputationChoice == nil {
		if this.IpReputationChoice != nil {
			return false
		}
	} else if this.IpReputationChoice == nil {
		return false
	} else if !this.IpReputationChoice.Equal(that1.IpReputationChoice) {
		return false
	}
	if that1.ThreatMeshChoice == nil {
		if this.ThreatMeshChoice != nil {
			return false
		}
	} else if this.ThreatMeshChoice == nil {
		return false
	} else if !this.ThreatMeshChoice.Equal(that1.ThreatMeshChoice) {
		return false
	}
	if that1.UserIdChoice == nil {
		if this.UserIdChoice != nil {
			return false
		}
	} else if this.UserIdChoice == nil {
		return false
	} else if !this.UserIdChoice.Equal(that1.UserIdChoice) {
		return false
	}
	if that1.MaliciousUserDetectionChoice == nil {
		if this.MaliciousUserDetectionChoice != nil {
			return false
		}
	} else if this.MaliciousUserDetectionChoice == nil {
		return false
	} else if !this.MaliciousUserDetectionChoice.Equal(that1.MaliciousUserDetectionChoice) {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Http)
	if !ok {
		that2, ok := that.(GlobalSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Https)
	if !ok {
		that2, ok := that.(GlobalSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AppFirewall)
	if !ok {
		that2, ok := that.(GlobalSpecType_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AppFirewallOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AppFirewallOnCacheMiss)
	if !ok {
		that2, ok := that.(GlobalSpecType_AppFirewallOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewallOnCacheMiss.Equal(that1.AppFirewallOnCacheMiss) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableBotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableBotDefense)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableBotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableBotDefense.Equal(that1.DisableBotDefense) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BotDefense)
	if !ok {
		that2, ok := that.(GlobalSpecType_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefense.Equal(that1.BotDefense) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BotDefenseAdvanced) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BotDefenseAdvanced)
	if !ok {
		that2, ok := that.(GlobalSpecType_BotDefenseAdvanced)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefenseAdvanced.Equal(that1.BotDefenseAdvanced) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ApiSpecification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ApiSpecification)
	if !ok {
		that2, ok := that.(GlobalSpecType_ApiSpecification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecification.Equal(that1.ApiSpecification) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ApiSpecificationOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ApiSpecificationOnCacheMiss)
	if !ok {
		that2, ok := that.(GlobalSpecType_ApiSpecificationOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecificationOnCacheMiss.Equal(that1.ApiSpecificationOnCacheMiss) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableApiDiscovery)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableApiDiscovery.Equal(that1.EnableApiDiscovery) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableApiDiscovery)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDiscovery.Equal(that1.DisableApiDiscovery) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ApiDiscoveryOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ApiDiscoveryOnCacheMiss)
	if !ok {
		that2, ok := that.(GlobalSpecType_ApiDiscoveryOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDiscoveryOnCacheMiss.Equal(that1.ApiDiscoveryOnCacheMiss) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultSensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultSensitiveDataPolicy)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultSensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSensitiveDataPolicy.Equal(that1.DefaultSensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SensitiveDataPolicy)
	if !ok {
		that2, ok := that.(GlobalSpecType_SensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SensitiveDataPolicy.Equal(that1.SensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *GlobalSpecType_L7DdosActionDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_L7DdosActionDefault)
	if !ok {
		that2, ok := that.(GlobalSpecType_L7DdosActionDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionDefault.Equal(that1.L7DdosActionDefault) {
		return false
	}
	return true
}
func (this *GlobalSpecType_L7DdosActionBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_L7DdosActionBlock)
	if !ok {
		that2, ok := that.(GlobalSpecType_L7DdosActionBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionBlock.Equal(that1.L7DdosActionBlock) {
		return false
	}
	return true
}
func (this *GlobalSpecType_L7DdosActionJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_L7DdosActionJsChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_L7DdosActionJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionJsChallenge.Equal(that1.L7DdosActionJsChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_L7DdosActionNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_L7DdosActionNone)
	if !ok {
		that2, ok := that.(GlobalSpecType_L7DdosActionNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionNone.Equal(that1.L7DdosActionNone) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SystemDefaultTimeouts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SystemDefaultTimeouts)
	if !ok {
		that2, ok := that.(GlobalSpecType_SystemDefaultTimeouts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemDefaultTimeouts.Equal(that1.SystemDefaultTimeouts) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SlowDdosMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SlowDdosMitigation)
	if !ok {
		that2, ok := that.(GlobalSpecType_SlowDdosMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SlowDdosMitigation.Equal(that1.SlowDdosMitigation) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableClientSideDefense)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableClientSideDefense.Equal(that1.DisableClientSideDefense) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ClientSideDefense)
	if !ok {
		that2, ok := that.(GlobalSpecType_ClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSideDefense.Equal(that1.ClientSideDefense) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(GlobalSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(GlobalSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableIpReputation)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableIpReputation.Equal(that1.DisableIpReputation) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableIpReputation)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableIpReputation.Equal(that1.EnableIpReputation) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IpReputationOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IpReputationOnCacheMiss)
	if !ok {
		that2, ok := that.(GlobalSpecType_IpReputationOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpReputationOnCacheMiss.Equal(that1.IpReputationOnCacheMiss) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableThreatMesh)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableThreatMesh.Equal(that1.DisableThreatMesh) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableThreatMesh)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableThreatMesh.Equal(that1.EnableThreatMesh) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UserIdClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UserIdClientIp)
	if !ok {
		that2, ok := that.(GlobalSpecType_UserIdClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdClientIp.Equal(that1.UserIdClientIp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UserIdentification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UserIdentification)
	if !ok {
		that2, ok := that.(GlobalSpecType_UserIdentification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMaliciousUserDetection.Equal(that1.DisableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableMaliciousUserDetection.Equal(that1.EnableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *GlobalSpecType_MaliciousUserDetectionOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_MaliciousUserDetectionOnCacheMiss)
	if !ok {
		that2, ok := that.(GlobalSpecType_MaliciousUserDetectionOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaliciousUserDetectionOnCacheMiss.Equal(that1.MaliciousUserDetectionOnCacheMiss) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableChallenge.Equal(that1.EnableChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ChallengeOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ChallengeOnCacheMiss)
	if !ok {
		that2, ok := that.(GlobalSpecType_ChallengeOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChallengeOnCacheMiss.Equal(that1.ChallengeOnCacheMiss) {
		return false
	}
	return true
}
func (this *GlobalSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ApiRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ApiRateLimit)
	if !ok {
		that2, ok := that.(GlobalSpecType_ApiRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiRateLimit.Equal(that1.ApiRateLimit) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RateLimit)
	if !ok {
		that2, ok := that.(GlobalSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *IpFilteringOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IpFilteringOptions)
	if !ok {
		that2, ok := that.(IpFilteringOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.IpFilteringType == nil {
		if this.IpFilteringType != nil {
			return false
		}
	} else if this.IpFilteringType == nil {
		return false
	} else if !this.IpFilteringType.Equal(that1.IpFilteringType) {
		return false
	}
	return true
}
func (this *IpFilteringOptions_AllowList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IpFilteringOptions_AllowList)
	if !ok {
		that2, ok := that.(IpFilteringOptions_AllowList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowList.Equal(that1.AllowList) {
		return false
	}
	return true
}
func (this *IpFilteringOptions_BlockList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IpFilteringOptions_BlockList)
	if !ok {
		that2, ok := that.(IpFilteringOptions_BlockList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockList.Equal(that1.BlockList) {
		return false
	}
	return true
}
func (this *GeoFilteringOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GeoFilteringOptions)
	if !ok {
		that2, ok := that.(GeoFilteringOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.GeoFilteringType == nil {
		if this.GeoFilteringType != nil {
			return false
		}
	} else if this.GeoFilteringType == nil {
		return false
	} else if !this.GeoFilteringType.Equal(that1.GeoFilteringType) {
		return false
	}
	return true
}
func (this *GeoFilteringOptions_AllowList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GeoFilteringOptions_AllowList)
	if !ok {
		that2, ok := that.(GeoFilteringOptions_AllowList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowList.Equal(that1.AllowList) {
		return false
	}
	return true
}
func (this *GeoFilteringOptions_BlockList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GeoFilteringOptions_BlockList)
	if !ok {
		that2, ok := that.(GeoFilteringOptions_BlockList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockList.Equal(that1.BlockList) {
		return false
	}
	return true
}
func (this *LogHeaderOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogHeaderOptions)
	if !ok {
		that2, ok := that.(LogHeaderOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HeaderList) != len(that1.HeaderList) {
		return false
	}
	for i := range this.HeaderList {
		if this.HeaderList[i] != that1.HeaderList[i] {
			return false
		}
	}
	return true
}
func (this *CDNCustomAuthentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNCustomAuthentication)
	if !ok {
		that2, ok := that.(CDNCustomAuthentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomAuthConfig != that1.CustomAuthConfig {
		return false
	}
	return true
}
func (this *AuthenticationOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationOptions)
	if !ok {
		that2, ok := that.(AuthenticationOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AuthOptions == nil {
		if this.AuthOptions != nil {
			return false
		}
	} else if this.AuthOptions == nil {
		return false
	} else if !this.AuthOptions.Equal(that1.AuthOptions) {
		return false
	}
	return true
}
func (this *AuthenticationOptions_DisableAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationOptions_DisableAuth)
	if !ok {
		that2, ok := that.(AuthenticationOptions_DisableAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableAuth.Equal(that1.DisableAuth) {
		return false
	}
	return true
}
func (this *AuthenticationOptions_Jwt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationOptions_Jwt)
	if !ok {
		that2, ok := that.(AuthenticationOptions_Jwt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Jwt.Equal(that1.Jwt) {
		return false
	}
	return true
}
func (this *AuthenticationOptions_Custom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationOptions_Custom)
	if !ok {
		that2, ok := that.(AuthenticationOptions_Custom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Custom.Equal(that1.Custom) {
		return false
	}
	return true
}
func (this *CDNOriginServerType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNOriginServerType)
	if !ok {
		that2, ok := that.(CDNOriginServerType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *CDNOriginServerType_PublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNOriginServerType_PublicIp)
	if !ok {
		that2, ok := that.(CDNOriginServerType_PublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PublicIp.Equal(that1.PublicIp) {
		return false
	}
	return true
}
func (this *CDNOriginServerType_PublicName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNOriginServerType_PublicName)
	if !ok {
		that2, ok := that.(CDNOriginServerType_PublicName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PublicName.Equal(that1.PublicName) {
		return false
	}
	return true
}
func (this *CdnOriginPoolType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CdnOriginPoolType)
	if !ok {
		that2, ok := that.(CdnOriginPoolType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PublicName.Equal(that1.PublicName) {
		return false
	}
	if that1.TlsChoice == nil {
		if this.TlsChoice != nil {
			return false
		}
	} else if this.TlsChoice == nil {
		return false
	} else if !this.TlsChoice.Equal(that1.TlsChoice) {
		return false
	}
	if len(this.OriginServers) != len(that1.OriginServers) {
		return false
	}
	for i := range this.OriginServers {
		if !this.OriginServers[i].Equal(that1.OriginServers[i]) {
			return false
		}
	}
	if this.FollowOriginRedirect != that1.FollowOriginRedirect {
		return false
	}
	if this.OriginRequestTimeout != that1.OriginRequestTimeout {
		return false
	}
	if !this.MoreOriginOptions.Equal(that1.MoreOriginOptions) {
		return false
	}
	return true
}
func (this *CdnOriginPoolType_NoTls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CdnOriginPoolType_NoTls)
	if !ok {
		that2, ok := that.(CdnOriginPoolType_NoTls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoTls.Equal(that1.NoTls) {
		return false
	}
	return true
}
func (this *CdnOriginPoolType_UseTls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CdnOriginPoolType_UseTls)
	if !ok {
		that2, ok := that.(CdnOriginPoolType_UseTls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseTls.Equal(that1.UseTls) {
		return false
	}
	return true
}
func (this *OriginAdvancedConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginAdvancedConfiguration)
	if !ok {
		that2, ok := that.(OriginAdvancedConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DisableByteRangeRequest != that1.DisableByteRangeRequest {
		return false
	}
	if this.WebsocketProxy != that1.WebsocketProxy {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if !this.OriginPool.Equal(that1.OriginPool) {
		return false
	}
	if !this.OtherSettings.Equal(that1.OtherSettings) {
		return false
	}
	if !this.DefaultCacheAction.Equal(that1.DefaultCacheAction) {
		return false
	}
	if len(this.CacheRules) != len(that1.CacheRules) {
		return false
	}
	for i := range this.CacheRules {
		if !this.CacheRules[i].Equal(that1.CacheRules[i]) {
			return false
		}
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.DataGuardRules) != len(that1.DataGuardRules) {
		return false
	}
	for i := range this.DataGuardRules {
		if !this.DataGuardRules[i].Equal(that1.DataGuardRules[i]) {
			return false
		}
	}
	if !this.CsrfPolicy.Equal(that1.CsrfPolicy) {
		return false
	}
	if len(this.GraphqlRules) != len(that1.GraphqlRules) {
		return false
	}
	for i := range this.GraphqlRules {
		if !this.GraphqlRules[i].Equal(that1.GraphqlRules[i]) {
			return false
		}
	}
	if len(this.ProtectedCookies) != len(that1.ProtectedCookies) {
		return false
	}
	for i := range this.ProtectedCookies {
		if !this.ProtectedCookies[i].Equal(that1.ProtectedCookies[i]) {
			return false
		}
	}
	if that1.BotDefenseChoice == nil {
		if this.BotDefenseChoice != nil {
			return false
		}
	} else if this.BotDefenseChoice == nil {
		return false
	} else if !this.BotDefenseChoice.Equal(that1.BotDefenseChoice) {
		return false
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if !this.ApiProtectionRules.Equal(that1.ApiProtectionRules) {
		return false
	}
	if !this.JwtValidation.Equal(that1.JwtValidation) {
		return false
	}
	if that1.ApiDiscoveryChoice == nil {
		if this.ApiDiscoveryChoice != nil {
			return false
		}
	} else if this.ApiDiscoveryChoice == nil {
		return false
	} else if !this.ApiDiscoveryChoice.Equal(that1.ApiDiscoveryChoice) {
		return false
	}
	if that1.SensitiveDataPolicyChoice == nil {
		if this.SensitiveDataPolicyChoice != nil {
			return false
		}
	} else if this.SensitiveDataPolicyChoice == nil {
		return false
	} else if !this.SensitiveDataPolicyChoice.Equal(that1.SensitiveDataPolicyChoice) {
		return false
	}
	if that1.L7DdosAutoMitigationAction == nil {
		if this.L7DdosAutoMitigationAction != nil {
			return false
		}
	} else if this.L7DdosAutoMitigationAction == nil {
		return false
	} else if !this.L7DdosAutoMitigationAction.Equal(that1.L7DdosAutoMitigationAction) {
		return false
	}
	if len(this.DdosMitigationRules) != len(that1.DdosMitigationRules) {
		return false
	}
	for i := range this.DdosMitigationRules {
		if !this.DdosMitigationRules[i].Equal(that1.DdosMitigationRules[i]) {
			return false
		}
	}
	if that1.SlowDdosMitigationChoice == nil {
		if this.SlowDdosMitigationChoice != nil {
			return false
		}
	} else if this.SlowDdosMitigationChoice == nil {
		return false
	} else if !this.SlowDdosMitigationChoice.Equal(that1.SlowDdosMitigationChoice) {
		return false
	}
	if that1.ClientSideDefenseChoice == nil {
		if this.ClientSideDefenseChoice != nil {
			return false
		}
	} else if this.ClientSideDefenseChoice == nil {
		return false
	} else if !this.ClientSideDefenseChoice.Equal(that1.ClientSideDefenseChoice) {
		return false
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.IpReputationChoice == nil {
		if this.IpReputationChoice != nil {
			return false
		}
	} else if this.IpReputationChoice == nil {
		return false
	} else if !this.IpReputationChoice.Equal(that1.IpReputationChoice) {
		return false
	}
	if that1.ThreatMeshChoice == nil {
		if this.ThreatMeshChoice != nil {
			return false
		}
	} else if this.ThreatMeshChoice == nil {
		return false
	} else if !this.ThreatMeshChoice.Equal(that1.ThreatMeshChoice) {
		return false
	}
	if that1.UserIdChoice == nil {
		if this.UserIdChoice != nil {
			return false
		}
	} else if this.UserIdChoice == nil {
		return false
	} else if !this.UserIdChoice.Equal(that1.UserIdChoice) {
		return false
	}
	if that1.MaliciousUserDetectionChoice == nil {
		if this.MaliciousUserDetectionChoice != nil {
			return false
		}
	} else if this.MaliciousUserDetectionChoice == nil {
		return false
	} else if !this.MaliciousUserDetectionChoice.Equal(that1.MaliciousUserDetectionChoice) {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	return true
}
func (this *CreateSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Http)
	if !ok {
		that2, ok := that.(CreateSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *CreateSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Https)
	if !ok {
		that2, ok := that.(CreateSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *CreateSpecType_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AppFirewall)
	if !ok {
		that2, ok := that.(CreateSpecType_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *CreateSpecType_AppFirewallOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AppFirewallOnCacheMiss)
	if !ok {
		that2, ok := that.(CreateSpecType_AppFirewallOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewallOnCacheMiss.Equal(that1.AppFirewallOnCacheMiss) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableBotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableBotDefense)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableBotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableBotDefense.Equal(that1.DisableBotDefense) {
		return false
	}
	return true
}
func (this *CreateSpecType_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BotDefense)
	if !ok {
		that2, ok := that.(CreateSpecType_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefense.Equal(that1.BotDefense) {
		return false
	}
	return true
}
func (this *CreateSpecType_BotDefenseAdvanced) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BotDefenseAdvanced)
	if !ok {
		that2, ok := that.(CreateSpecType_BotDefenseAdvanced)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefenseAdvanced.Equal(that1.BotDefenseAdvanced) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *CreateSpecType_ApiSpecification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ApiSpecification)
	if !ok {
		that2, ok := that.(CreateSpecType_ApiSpecification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecification.Equal(that1.ApiSpecification) {
		return false
	}
	return true
}
func (this *CreateSpecType_ApiSpecificationOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ApiSpecificationOnCacheMiss)
	if !ok {
		that2, ok := that.(CreateSpecType_ApiSpecificationOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecificationOnCacheMiss.Equal(that1.ApiSpecificationOnCacheMiss) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableApiDiscovery)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableApiDiscovery.Equal(that1.EnableApiDiscovery) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableApiDiscovery)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDiscovery.Equal(that1.DisableApiDiscovery) {
		return false
	}
	return true
}
func (this *CreateSpecType_ApiDiscoveryOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ApiDiscoveryOnCacheMiss)
	if !ok {
		that2, ok := that.(CreateSpecType_ApiDiscoveryOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDiscoveryOnCacheMiss.Equal(that1.ApiDiscoveryOnCacheMiss) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultSensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultSensitiveDataPolicy)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultSensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSensitiveDataPolicy.Equal(that1.DefaultSensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *CreateSpecType_SensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SensitiveDataPolicy)
	if !ok {
		that2, ok := that.(CreateSpecType_SensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SensitiveDataPolicy.Equal(that1.SensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *CreateSpecType_L7DdosActionDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_L7DdosActionDefault)
	if !ok {
		that2, ok := that.(CreateSpecType_L7DdosActionDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionDefault.Equal(that1.L7DdosActionDefault) {
		return false
	}
	return true
}
func (this *CreateSpecType_L7DdosActionBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_L7DdosActionBlock)
	if !ok {
		that2, ok := that.(CreateSpecType_L7DdosActionBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionBlock.Equal(that1.L7DdosActionBlock) {
		return false
	}
	return true
}
func (this *CreateSpecType_L7DdosActionJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_L7DdosActionJsChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_L7DdosActionJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionJsChallenge.Equal(that1.L7DdosActionJsChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_L7DdosActionNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_L7DdosActionNone)
	if !ok {
		that2, ok := that.(CreateSpecType_L7DdosActionNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionNone.Equal(that1.L7DdosActionNone) {
		return false
	}
	return true
}
func (this *CreateSpecType_SystemDefaultTimeouts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SystemDefaultTimeouts)
	if !ok {
		that2, ok := that.(CreateSpecType_SystemDefaultTimeouts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemDefaultTimeouts.Equal(that1.SystemDefaultTimeouts) {
		return false
	}
	return true
}
func (this *CreateSpecType_SlowDdosMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SlowDdosMitigation)
	if !ok {
		that2, ok := that.(CreateSpecType_SlowDdosMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SlowDdosMitigation.Equal(that1.SlowDdosMitigation) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableClientSideDefense)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableClientSideDefense.Equal(that1.DisableClientSideDefense) {
		return false
	}
	return true
}
func (this *CreateSpecType_ClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ClientSideDefense)
	if !ok {
		that2, ok := that.(CreateSpecType_ClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSideDefense.Equal(that1.ClientSideDefense) {
		return false
	}
	return true
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(CreateSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(CreateSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *CreateSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(CreateSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableIpReputation)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableIpReputation.Equal(that1.DisableIpReputation) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableIpReputation)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableIpReputation.Equal(that1.EnableIpReputation) {
		return false
	}
	return true
}
func (this *CreateSpecType_IpReputationOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IpReputationOnCacheMiss)
	if !ok {
		that2, ok := that.(CreateSpecType_IpReputationOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpReputationOnCacheMiss.Equal(that1.IpReputationOnCacheMiss) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableThreatMesh)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableThreatMesh.Equal(that1.DisableThreatMesh) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableThreatMesh)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableThreatMesh.Equal(that1.EnableThreatMesh) {
		return false
	}
	return true
}
func (this *CreateSpecType_UserIdClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UserIdClientIp)
	if !ok {
		that2, ok := that.(CreateSpecType_UserIdClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdClientIp.Equal(that1.UserIdClientIp) {
		return false
	}
	return true
}
func (this *CreateSpecType_UserIdentification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UserIdentification)
	if !ok {
		that2, ok := that.(CreateSpecType_UserIdentification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMaliciousUserDetection.Equal(that1.DisableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableMaliciousUserDetection.Equal(that1.EnableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *CreateSpecType_MaliciousUserDetectionOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_MaliciousUserDetectionOnCacheMiss)
	if !ok {
		that2, ok := that.(CreateSpecType_MaliciousUserDetectionOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaliciousUserDetectionOnCacheMiss.Equal(that1.MaliciousUserDetectionOnCacheMiss) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableChallenge.Equal(that1.EnableChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_ChallengeOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ChallengeOnCacheMiss)
	if !ok {
		that2, ok := that.(CreateSpecType_ChallengeOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChallengeOnCacheMiss.Equal(that1.ChallengeOnCacheMiss) {
		return false
	}
	return true
}
func (this *CreateSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *CreateSpecType_ApiRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ApiRateLimit)
	if !ok {
		that2, ok := that.(CreateSpecType_ApiRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiRateLimit.Equal(that1.ApiRateLimit) {
		return false
	}
	return true
}
func (this *CreateSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RateLimit)
	if !ok {
		that2, ok := that.(CreateSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if !this.OriginPool.Equal(that1.OriginPool) {
		return false
	}
	if !this.OtherSettings.Equal(that1.OtherSettings) {
		return false
	}
	if !this.DefaultCacheAction.Equal(that1.DefaultCacheAction) {
		return false
	}
	if len(this.CacheRules) != len(that1.CacheRules) {
		return false
	}
	for i := range this.CacheRules {
		if !this.CacheRules[i].Equal(that1.CacheRules[i]) {
			return false
		}
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.DataGuardRules) != len(that1.DataGuardRules) {
		return false
	}
	for i := range this.DataGuardRules {
		if !this.DataGuardRules[i].Equal(that1.DataGuardRules[i]) {
			return false
		}
	}
	if !this.CsrfPolicy.Equal(that1.CsrfPolicy) {
		return false
	}
	if len(this.GraphqlRules) != len(that1.GraphqlRules) {
		return false
	}
	for i := range this.GraphqlRules {
		if !this.GraphqlRules[i].Equal(that1.GraphqlRules[i]) {
			return false
		}
	}
	if len(this.ProtectedCookies) != len(that1.ProtectedCookies) {
		return false
	}
	for i := range this.ProtectedCookies {
		if !this.ProtectedCookies[i].Equal(that1.ProtectedCookies[i]) {
			return false
		}
	}
	if that1.BotDefenseChoice == nil {
		if this.BotDefenseChoice != nil {
			return false
		}
	} else if this.BotDefenseChoice == nil {
		return false
	} else if !this.BotDefenseChoice.Equal(that1.BotDefenseChoice) {
		return false
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if !this.ApiProtectionRules.Equal(that1.ApiProtectionRules) {
		return false
	}
	if !this.JwtValidation.Equal(that1.JwtValidation) {
		return false
	}
	if that1.ApiDiscoveryChoice == nil {
		if this.ApiDiscoveryChoice != nil {
			return false
		}
	} else if this.ApiDiscoveryChoice == nil {
		return false
	} else if !this.ApiDiscoveryChoice.Equal(that1.ApiDiscoveryChoice) {
		return false
	}
	if that1.SensitiveDataPolicyChoice == nil {
		if this.SensitiveDataPolicyChoice != nil {
			return false
		}
	} else if this.SensitiveDataPolicyChoice == nil {
		return false
	} else if !this.SensitiveDataPolicyChoice.Equal(that1.SensitiveDataPolicyChoice) {
		return false
	}
	if that1.L7DdosAutoMitigationAction == nil {
		if this.L7DdosAutoMitigationAction != nil {
			return false
		}
	} else if this.L7DdosAutoMitigationAction == nil {
		return false
	} else if !this.L7DdosAutoMitigationAction.Equal(that1.L7DdosAutoMitigationAction) {
		return false
	}
	if len(this.DdosMitigationRules) != len(that1.DdosMitigationRules) {
		return false
	}
	for i := range this.DdosMitigationRules {
		if !this.DdosMitigationRules[i].Equal(that1.DdosMitigationRules[i]) {
			return false
		}
	}
	if that1.SlowDdosMitigationChoice == nil {
		if this.SlowDdosMitigationChoice != nil {
			return false
		}
	} else if this.SlowDdosMitigationChoice == nil {
		return false
	} else if !this.SlowDdosMitigationChoice.Equal(that1.SlowDdosMitigationChoice) {
		return false
	}
	if that1.ClientSideDefenseChoice == nil {
		if this.ClientSideDefenseChoice != nil {
			return false
		}
	} else if this.ClientSideDefenseChoice == nil {
		return false
	} else if !this.ClientSideDefenseChoice.Equal(that1.ClientSideDefenseChoice) {
		return false
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.IpReputationChoice == nil {
		if this.IpReputationChoice != nil {
			return false
		}
	} else if this.IpReputationChoice == nil {
		return false
	} else if !this.IpReputationChoice.Equal(that1.IpReputationChoice) {
		return false
	}
	if that1.ThreatMeshChoice == nil {
		if this.ThreatMeshChoice != nil {
			return false
		}
	} else if this.ThreatMeshChoice == nil {
		return false
	} else if !this.ThreatMeshChoice.Equal(that1.ThreatMeshChoice) {
		return false
	}
	if that1.UserIdChoice == nil {
		if this.UserIdChoice != nil {
			return false
		}
	} else if this.UserIdChoice == nil {
		return false
	} else if !this.UserIdChoice.Equal(that1.UserIdChoice) {
		return false
	}
	if that1.MaliciousUserDetectionChoice == nil {
		if this.MaliciousUserDetectionChoice != nil {
			return false
		}
	} else if this.MaliciousUserDetectionChoice == nil {
		return false
	} else if !this.MaliciousUserDetectionChoice.Equal(that1.MaliciousUserDetectionChoice) {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Http)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Https)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AppFirewall)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AppFirewallOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AppFirewallOnCacheMiss)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AppFirewallOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewallOnCacheMiss.Equal(that1.AppFirewallOnCacheMiss) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableBotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableBotDefense)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableBotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableBotDefense.Equal(that1.DisableBotDefense) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BotDefense)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefense.Equal(that1.BotDefense) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BotDefenseAdvanced) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BotDefenseAdvanced)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BotDefenseAdvanced)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefenseAdvanced.Equal(that1.BotDefenseAdvanced) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ApiSpecification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ApiSpecification)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ApiSpecification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecification.Equal(that1.ApiSpecification) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ApiSpecificationOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ApiSpecificationOnCacheMiss)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ApiSpecificationOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecificationOnCacheMiss.Equal(that1.ApiSpecificationOnCacheMiss) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableApiDiscovery)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableApiDiscovery.Equal(that1.EnableApiDiscovery) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableApiDiscovery)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDiscovery.Equal(that1.DisableApiDiscovery) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ApiDiscoveryOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ApiDiscoveryOnCacheMiss)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ApiDiscoveryOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDiscoveryOnCacheMiss.Equal(that1.ApiDiscoveryOnCacheMiss) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultSensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultSensitiveDataPolicy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultSensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSensitiveDataPolicy.Equal(that1.DefaultSensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SensitiveDataPolicy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SensitiveDataPolicy.Equal(that1.SensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_L7DdosActionDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_L7DdosActionDefault)
	if !ok {
		that2, ok := that.(ReplaceSpecType_L7DdosActionDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionDefault.Equal(that1.L7DdosActionDefault) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_L7DdosActionBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_L7DdosActionBlock)
	if !ok {
		that2, ok := that.(ReplaceSpecType_L7DdosActionBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionBlock.Equal(that1.L7DdosActionBlock) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_L7DdosActionJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_L7DdosActionJsChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_L7DdosActionJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionJsChallenge.Equal(that1.L7DdosActionJsChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_L7DdosActionNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_L7DdosActionNone)
	if !ok {
		that2, ok := that.(ReplaceSpecType_L7DdosActionNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionNone.Equal(that1.L7DdosActionNone) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SystemDefaultTimeouts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SystemDefaultTimeouts)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SystemDefaultTimeouts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemDefaultTimeouts.Equal(that1.SystemDefaultTimeouts) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SlowDdosMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SlowDdosMitigation)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SlowDdosMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SlowDdosMitigation.Equal(that1.SlowDdosMitigation) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableClientSideDefense)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableClientSideDefense.Equal(that1.DisableClientSideDefense) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ClientSideDefense)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSideDefense.Equal(that1.ClientSideDefense) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableIpReputation)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableIpReputation.Equal(that1.DisableIpReputation) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableIpReputation)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableIpReputation.Equal(that1.EnableIpReputation) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IpReputationOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IpReputationOnCacheMiss)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IpReputationOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpReputationOnCacheMiss.Equal(that1.IpReputationOnCacheMiss) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableThreatMesh)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableThreatMesh.Equal(that1.DisableThreatMesh) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableThreatMesh)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableThreatMesh.Equal(that1.EnableThreatMesh) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UserIdClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UserIdClientIp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UserIdClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdClientIp.Equal(that1.UserIdClientIp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UserIdentification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UserIdentification)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UserIdentification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMaliciousUserDetection.Equal(that1.DisableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableMaliciousUserDetection.Equal(that1.EnableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_MaliciousUserDetectionOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_MaliciousUserDetectionOnCacheMiss)
	if !ok {
		that2, ok := that.(ReplaceSpecType_MaliciousUserDetectionOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaliciousUserDetectionOnCacheMiss.Equal(that1.MaliciousUserDetectionOnCacheMiss) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableChallenge.Equal(that1.EnableChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ChallengeOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ChallengeOnCacheMiss)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ChallengeOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChallengeOnCacheMiss.Equal(that1.ChallengeOnCacheMiss) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ApiRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ApiRateLimit)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ApiRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiRateLimit.Equal(that1.ApiRateLimit) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RateLimit)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if !this.OriginPool.Equal(that1.OriginPool) {
		return false
	}
	if !this.OtherSettings.Equal(that1.OtherSettings) {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	if len(this.ServiceDomains) != len(that1.ServiceDomains) {
		return false
	}
	for i := range this.ServiceDomains {
		if !this.ServiceDomains[i].Equal(that1.ServiceDomains[i]) {
			return false
		}
	}
	if this.CertState != that1.CertState {
		return false
	}
	if !this.DefaultCacheAction.Equal(that1.DefaultCacheAction) {
		return false
	}
	if len(this.CacheRules) != len(that1.CacheRules) {
		return false
	}
	for i := range this.CacheRules {
		if !this.CacheRules[i].Equal(that1.CacheRules[i]) {
			return false
		}
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.DataGuardRules) != len(that1.DataGuardRules) {
		return false
	}
	for i := range this.DataGuardRules {
		if !this.DataGuardRules[i].Equal(that1.DataGuardRules[i]) {
			return false
		}
	}
	if !this.CsrfPolicy.Equal(that1.CsrfPolicy) {
		return false
	}
	if len(this.GraphqlRules) != len(that1.GraphqlRules) {
		return false
	}
	for i := range this.GraphqlRules {
		if !this.GraphqlRules[i].Equal(that1.GraphqlRules[i]) {
			return false
		}
	}
	if len(this.ProtectedCookies) != len(that1.ProtectedCookies) {
		return false
	}
	for i := range this.ProtectedCookies {
		if !this.ProtectedCookies[i].Equal(that1.ProtectedCookies[i]) {
			return false
		}
	}
	if that1.BotDefenseChoice == nil {
		if this.BotDefenseChoice != nil {
			return false
		}
	} else if this.BotDefenseChoice == nil {
		return false
	} else if !this.BotDefenseChoice.Equal(that1.BotDefenseChoice) {
		return false
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if !this.ApiProtectionRules.Equal(that1.ApiProtectionRules) {
		return false
	}
	if !this.JwtValidation.Equal(that1.JwtValidation) {
		return false
	}
	if that1.ApiDiscoveryChoice == nil {
		if this.ApiDiscoveryChoice != nil {
			return false
		}
	} else if this.ApiDiscoveryChoice == nil {
		return false
	} else if !this.ApiDiscoveryChoice.Equal(that1.ApiDiscoveryChoice) {
		return false
	}
	if that1.SensitiveDataPolicyChoice == nil {
		if this.SensitiveDataPolicyChoice != nil {
			return false
		}
	} else if this.SensitiveDataPolicyChoice == nil {
		return false
	} else if !this.SensitiveDataPolicyChoice.Equal(that1.SensitiveDataPolicyChoice) {
		return false
	}
	if that1.L7DdosAutoMitigationAction == nil {
		if this.L7DdosAutoMitigationAction != nil {
			return false
		}
	} else if this.L7DdosAutoMitigationAction == nil {
		return false
	} else if !this.L7DdosAutoMitigationAction.Equal(that1.L7DdosAutoMitigationAction) {
		return false
	}
	if len(this.DdosMitigationRules) != len(that1.DdosMitigationRules) {
		return false
	}
	for i := range this.DdosMitigationRules {
		if !this.DdosMitigationRules[i].Equal(that1.DdosMitigationRules[i]) {
			return false
		}
	}
	if that1.SlowDdosMitigationChoice == nil {
		if this.SlowDdosMitigationChoice != nil {
			return false
		}
	} else if this.SlowDdosMitigationChoice == nil {
		return false
	} else if !this.SlowDdosMitigationChoice.Equal(that1.SlowDdosMitigationChoice) {
		return false
	}
	if that1.ClientSideDefenseChoice == nil {
		if this.ClientSideDefenseChoice != nil {
			return false
		}
	} else if this.ClientSideDefenseChoice == nil {
		return false
	} else if !this.ClientSideDefenseChoice.Equal(that1.ClientSideDefenseChoice) {
		return false
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.IpReputationChoice == nil {
		if this.IpReputationChoice != nil {
			return false
		}
	} else if this.IpReputationChoice == nil {
		return false
	} else if !this.IpReputationChoice.Equal(that1.IpReputationChoice) {
		return false
	}
	if that1.ThreatMeshChoice == nil {
		if this.ThreatMeshChoice != nil {
			return false
		}
	} else if this.ThreatMeshChoice == nil {
		return false
	} else if !this.ThreatMeshChoice.Equal(that1.ThreatMeshChoice) {
		return false
	}
	if that1.UserIdChoice == nil {
		if this.UserIdChoice != nil {
			return false
		}
	} else if this.UserIdChoice == nil {
		return false
	} else if !this.UserIdChoice.Equal(that1.UserIdChoice) {
		return false
	}
	if that1.MaliciousUserDetectionChoice == nil {
		if this.MaliciousUserDetectionChoice != nil {
			return false
		}
	} else if this.MaliciousUserDetectionChoice == nil {
		return false
	} else if !this.MaliciousUserDetectionChoice.Equal(that1.MaliciousUserDetectionChoice) {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	return true
}
func (this *GetSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Http)
	if !ok {
		that2, ok := that.(GetSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *GetSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(GetSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *GetSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Https)
	if !ok {
		that2, ok := that.(GetSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(GetSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *GetSpecType_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AppFirewall)
	if !ok {
		that2, ok := that.(GetSpecType_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *GetSpecType_AppFirewallOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AppFirewallOnCacheMiss)
	if !ok {
		that2, ok := that.(GetSpecType_AppFirewallOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewallOnCacheMiss.Equal(that1.AppFirewallOnCacheMiss) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableBotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableBotDefense)
	if !ok {
		that2, ok := that.(GetSpecType_DisableBotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableBotDefense.Equal(that1.DisableBotDefense) {
		return false
	}
	return true
}
func (this *GetSpecType_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BotDefense)
	if !ok {
		that2, ok := that.(GetSpecType_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefense.Equal(that1.BotDefense) {
		return false
	}
	return true
}
func (this *GetSpecType_BotDefenseAdvanced) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BotDefenseAdvanced)
	if !ok {
		that2, ok := that.(GetSpecType_BotDefenseAdvanced)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefenseAdvanced.Equal(that1.BotDefenseAdvanced) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(GetSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *GetSpecType_ApiSpecification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ApiSpecification)
	if !ok {
		that2, ok := that.(GetSpecType_ApiSpecification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecification.Equal(that1.ApiSpecification) {
		return false
	}
	return true
}
func (this *GetSpecType_ApiSpecificationOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ApiSpecificationOnCacheMiss)
	if !ok {
		that2, ok := that.(GetSpecType_ApiSpecificationOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecificationOnCacheMiss.Equal(that1.ApiSpecificationOnCacheMiss) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableApiDiscovery)
	if !ok {
		that2, ok := that.(GetSpecType_EnableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableApiDiscovery.Equal(that1.EnableApiDiscovery) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableApiDiscovery)
	if !ok {
		that2, ok := that.(GetSpecType_DisableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDiscovery.Equal(that1.DisableApiDiscovery) {
		return false
	}
	return true
}
func (this *GetSpecType_ApiDiscoveryOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ApiDiscoveryOnCacheMiss)
	if !ok {
		that2, ok := that.(GetSpecType_ApiDiscoveryOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDiscoveryOnCacheMiss.Equal(that1.ApiDiscoveryOnCacheMiss) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultSensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultSensitiveDataPolicy)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultSensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSensitiveDataPolicy.Equal(that1.DefaultSensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *GetSpecType_SensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SensitiveDataPolicy)
	if !ok {
		that2, ok := that.(GetSpecType_SensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SensitiveDataPolicy.Equal(that1.SensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *GetSpecType_L7DdosActionDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_L7DdosActionDefault)
	if !ok {
		that2, ok := that.(GetSpecType_L7DdosActionDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionDefault.Equal(that1.L7DdosActionDefault) {
		return false
	}
	return true
}
func (this *GetSpecType_L7DdosActionBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_L7DdosActionBlock)
	if !ok {
		that2, ok := that.(GetSpecType_L7DdosActionBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionBlock.Equal(that1.L7DdosActionBlock) {
		return false
	}
	return true
}
func (this *GetSpecType_L7DdosActionJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_L7DdosActionJsChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_L7DdosActionJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionJsChallenge.Equal(that1.L7DdosActionJsChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_L7DdosActionNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_L7DdosActionNone)
	if !ok {
		that2, ok := that.(GetSpecType_L7DdosActionNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionNone.Equal(that1.L7DdosActionNone) {
		return false
	}
	return true
}
func (this *GetSpecType_SystemDefaultTimeouts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SystemDefaultTimeouts)
	if !ok {
		that2, ok := that.(GetSpecType_SystemDefaultTimeouts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemDefaultTimeouts.Equal(that1.SystemDefaultTimeouts) {
		return false
	}
	return true
}
func (this *GetSpecType_SlowDdosMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SlowDdosMitigation)
	if !ok {
		that2, ok := that.(GetSpecType_SlowDdosMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SlowDdosMitigation.Equal(that1.SlowDdosMitigation) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableClientSideDefense)
	if !ok {
		that2, ok := that.(GetSpecType_DisableClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableClientSideDefense.Equal(that1.DisableClientSideDefense) {
		return false
	}
	return true
}
func (this *GetSpecType_ClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ClientSideDefense)
	if !ok {
		that2, ok := that.(GetSpecType_ClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSideDefense.Equal(that1.ClientSideDefense) {
		return false
	}
	return true
}
func (this *GetSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(GetSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *GetSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(GetSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *GetSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(GetSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableIpReputation)
	if !ok {
		that2, ok := that.(GetSpecType_DisableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableIpReputation.Equal(that1.DisableIpReputation) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableIpReputation)
	if !ok {
		that2, ok := that.(GetSpecType_EnableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableIpReputation.Equal(that1.EnableIpReputation) {
		return false
	}
	return true
}
func (this *GetSpecType_IpReputationOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IpReputationOnCacheMiss)
	if !ok {
		that2, ok := that.(GetSpecType_IpReputationOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpReputationOnCacheMiss.Equal(that1.IpReputationOnCacheMiss) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableThreatMesh)
	if !ok {
		that2, ok := that.(GetSpecType_DisableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableThreatMesh.Equal(that1.DisableThreatMesh) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableThreatMesh)
	if !ok {
		that2, ok := that.(GetSpecType_EnableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableThreatMesh.Equal(that1.EnableThreatMesh) {
		return false
	}
	return true
}
func (this *GetSpecType_UserIdClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UserIdClientIp)
	if !ok {
		that2, ok := that.(GetSpecType_UserIdClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdClientIp.Equal(that1.UserIdClientIp) {
		return false
	}
	return true
}
func (this *GetSpecType_UserIdentification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UserIdentification)
	if !ok {
		that2, ok := that.(GetSpecType_UserIdentification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(GetSpecType_DisableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMaliciousUserDetection.Equal(that1.DisableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(GetSpecType_EnableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableMaliciousUserDetection.Equal(that1.EnableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *GetSpecType_MaliciousUserDetectionOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_MaliciousUserDetectionOnCacheMiss)
	if !ok {
		that2, ok := that.(GetSpecType_MaliciousUserDetectionOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaliciousUserDetectionOnCacheMiss.Equal(that1.MaliciousUserDetectionOnCacheMiss) {
		return false
	}
	return true
}
func (this *GetSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_EnableChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableChallenge.Equal(that1.EnableChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_ChallengeOnCacheMiss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ChallengeOnCacheMiss)
	if !ok {
		that2, ok := that.(GetSpecType_ChallengeOnCacheMiss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChallengeOnCacheMiss.Equal(that1.ChallengeOnCacheMiss) {
		return false
	}
	return true
}
func (this *GetSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(GetSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *GetSpecType_ApiRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ApiRateLimit)
	if !ok {
		that2, ok := that.(GetSpecType_ApiRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiRateLimit.Equal(that1.ApiRateLimit) {
		return false
	}
	return true
}
func (this *GetSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RateLimit)
	if !ok {
		that2, ok := that.(GetSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *LilacCDNMetricsFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LilacCDNMetricsFilter)
	if !ok {
		that2, ok := that.(LilacCDNMetricsFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	if this.Operator != that1.Operator {
		return false
	}
	return true
}
func (this *LilacCDNMetricsResponseGroupBy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LilacCDNMetricsResponseGroupBy)
	if !ok {
		that2, ok := that.(LilacCDNMetricsResponseGroupBy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *LilacCDNMetricsResponseValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LilacCDNMetricsResponseValue)
	if !ok {
		that2, ok := that.(LilacCDNMetricsResponseValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *LilacCDNMetricsResponseSeries) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LilacCDNMetricsResponseSeries)
	if !ok {
		that2, ok := that.(LilacCDNMetricsResponseSeries)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.GroupBy) != len(that1.GroupBy) {
		return false
	}
	for i := range this.GroupBy {
		if !this.GroupBy[i].Equal(that1.GroupBy[i]) {
			return false
		}
	}
	if len(this.Value) != len(that1.Value) {
		return false
	}
	for i := range this.Value {
		if !this.Value[i].Equal(that1.Value[i]) {
			return false
		}
	}
	return true
}
func (this *LilacCDNMetricsResponseData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LilacCDNMetricsResponseData)
	if !ok {
		that2, ok := that.(LilacCDNMetricsResponseData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	if len(this.Series) != len(that1.Series) {
		return false
	}
	for i := range this.Series {
		if !this.Series[i].Equal(that1.Series[i]) {
			return false
		}
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&cdn_loadbalancer.ProxyTypeHttpsAutoCerts{")
	s = append(s, "HttpRedirect: "+fmt.Sprintf("%#v", this.HttpRedirect)+",\n")
	s = append(s, "AddHsts: "+fmt.Sprintf("%#v", this.AddHsts)+",\n")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeHttpsAutoCerts_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ProxyTypeHttpsAutoCerts_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ProxyTypeHttpsAutoCerts_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ProxyTypeHttpsAutoCerts_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ProxyTypeHttpsAutoCerts_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func (this *HeaderControlType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cdn_loadbalancer.HeaderControlType{")
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WebApplicationFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&cdn_loadbalancer.WebApplicationFirewall{")
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.DataGuardRules != nil {
		s = append(s, "DataGuardRules: "+fmt.Sprintf("%#v", this.DataGuardRules)+",\n")
	}
	if this.CsrfPolicy != nil {
		s = append(s, "CsrfPolicy: "+fmt.Sprintf("%#v", this.CsrfPolicy)+",\n")
	}
	if this.GraphqlRules != nil {
		s = append(s, "GraphqlRules: "+fmt.Sprintf("%#v", this.GraphqlRules)+",\n")
	}
	if this.ProtectedCookies != nil {
		s = append(s, "ProtectedCookies: "+fmt.Sprintf("%#v", this.ProtectedCookies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WebApplicationFirewall_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.WebApplicationFirewall_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *WebApplicationFirewall_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.WebApplicationFirewall_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *WebApplicationFirewall_AppFirewallOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.WebApplicationFirewall_AppFirewallOnCacheMiss{` +
		`AppFirewallOnCacheMiss:` + fmt.Sprintf("%#v", this.AppFirewallOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *BotProtection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cdn_loadbalancer.BotProtection{")
	if this.BotDefenseChoice != nil {
		s = append(s, "BotDefenseChoice: "+fmt.Sprintf("%#v", this.BotDefenseChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BotProtection_DisableBotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.BotProtection_DisableBotDefense{` +
		`DisableBotDefense:` + fmt.Sprintf("%#v", this.DisableBotDefense) + `}`}, ", ")
	return s
}
func (this *BotProtection_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.BotProtection_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *BotProtection_BotDefenseAdvanced) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.BotProtection_BotDefenseAdvanced{` +
		`BotDefenseAdvanced:` + fmt.Sprintf("%#v", this.BotDefenseAdvanced) + `}`}, ", ")
	return s
}
func (this *DoSProtection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&cdn_loadbalancer.DoSProtection{")
	if this.L7DdosAutoMitigationAction != nil {
		s = append(s, "L7DdosAutoMitigationAction: "+fmt.Sprintf("%#v", this.L7DdosAutoMitigationAction)+",\n")
	}
	if this.DdosMitigationRules != nil {
		s = append(s, "DdosMitigationRules: "+fmt.Sprintf("%#v", this.DdosMitigationRules)+",\n")
	}
	if this.SlowDdosMitigationChoice != nil {
		s = append(s, "SlowDdosMitigationChoice: "+fmt.Sprintf("%#v", this.SlowDdosMitigationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DoSProtection_L7DdosActionDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.DoSProtection_L7DdosActionDefault{` +
		`L7DdosActionDefault:` + fmt.Sprintf("%#v", this.L7DdosActionDefault) + `}`}, ", ")
	return s
}
func (this *DoSProtection_L7DdosActionBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.DoSProtection_L7DdosActionBlock{` +
		`L7DdosActionBlock:` + fmt.Sprintf("%#v", this.L7DdosActionBlock) + `}`}, ", ")
	return s
}
func (this *DoSProtection_L7DdosActionJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.DoSProtection_L7DdosActionJsChallenge{` +
		`L7DdosActionJsChallenge:` + fmt.Sprintf("%#v", this.L7DdosActionJsChallenge) + `}`}, ", ")
	return s
}
func (this *DoSProtection_L7DdosActionNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.DoSProtection_L7DdosActionNone{` +
		`L7DdosActionNone:` + fmt.Sprintf("%#v", this.L7DdosActionNone) + `}`}, ", ")
	return s
}
func (this *DoSProtection_SystemDefaultTimeouts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.DoSProtection_SystemDefaultTimeouts{` +
		`SystemDefaultTimeouts:` + fmt.Sprintf("%#v", this.SystemDefaultTimeouts) + `}`}, ", ")
	return s
}
func (this *DoSProtection_SlowDdosMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.DoSProtection_SlowDdosMitigation{` +
		`SlowDdosMitigation:` + fmt.Sprintf("%#v", this.SlowDdosMitigation) + `}`}, ", ")
	return s
}
func (this *OtherSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cdn_loadbalancer.OtherSettings{")
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.LoggingOptions != nil {
		s = append(s, "LoggingOptions: "+fmt.Sprintf("%#v", this.LoggingOptions)+",\n")
	}
	if this.HeaderOptions != nil {
		s = append(s, "HeaderOptions: "+fmt.Sprintf("%#v", this.HeaderOptions)+",\n")
	}
	if this.IpFiltering != nil {
		s = append(s, "IpFiltering: "+fmt.Sprintf("%#v", this.IpFiltering)+",\n")
	}
	if this.GeoFiltering != nil {
		s = append(s, "GeoFiltering: "+fmt.Sprintf("%#v", this.GeoFiltering)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.ClientSideDefense{")
	if this.ClientSideDefenseChoice != nil {
		s = append(s, "ClientSideDefenseChoice: "+fmt.Sprintf("%#v", this.ClientSideDefenseChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientSideDefense_DisableClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ClientSideDefense_DisableClientSideDefense{` +
		`DisableClientSideDefense:` + fmt.Sprintf("%#v", this.DisableClientSideDefense) + `}`}, ", ")
	return s
}
func (this *ClientSideDefense_ClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ClientSideDefense_ClientSideDefense{` +
		`ClientSideDefense:` + fmt.Sprintf("%#v", this.ClientSideDefense) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 29)
	s = append(s, "&cdn_loadbalancer.CommonSecurityControls{")
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.IpReputationChoice != nil {
		s = append(s, "IpReputationChoice: "+fmt.Sprintf("%#v", this.IpReputationChoice)+",\n")
	}
	if this.ThreatMeshChoice != nil {
		s = append(s, "ThreatMeshChoice: "+fmt.Sprintf("%#v", this.ThreatMeshChoice)+",\n")
	}
	if this.UserIdChoice != nil {
		s = append(s, "UserIdChoice: "+fmt.Sprintf("%#v", this.UserIdChoice)+",\n")
	}
	if this.MaliciousUserDetectionChoice != nil {
		s = append(s, "MaliciousUserDetectionChoice: "+fmt.Sprintf("%#v", this.MaliciousUserDetectionChoice)+",\n")
	}
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CommonSecurityControls_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_DisableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_DisableIpReputation{` +
		`DisableIpReputation:` + fmt.Sprintf("%#v", this.DisableIpReputation) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_EnableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_EnableIpReputation{` +
		`EnableIpReputation:` + fmt.Sprintf("%#v", this.EnableIpReputation) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_IpReputationOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_IpReputationOnCacheMiss{` +
		`IpReputationOnCacheMiss:` + fmt.Sprintf("%#v", this.IpReputationOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_DisableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_DisableThreatMesh{` +
		`DisableThreatMesh:` + fmt.Sprintf("%#v", this.DisableThreatMesh) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_EnableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_EnableThreatMesh{` +
		`EnableThreatMesh:` + fmt.Sprintf("%#v", this.EnableThreatMesh) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_UserIdClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_UserIdClientIp{` +
		`UserIdClientIp:` + fmt.Sprintf("%#v", this.UserIdClientIp) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_UserIdentification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_UserIdentification{` +
		`UserIdentification:` + fmt.Sprintf("%#v", this.UserIdentification) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_DisableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_DisableMaliciousUserDetection{` +
		`DisableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.DisableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_EnableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_EnableMaliciousUserDetection{` +
		`EnableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.EnableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_MaliciousUserDetectionOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_MaliciousUserDetectionOnCacheMiss{` +
		`MaliciousUserDetectionOnCacheMiss:` + fmt.Sprintf("%#v", this.MaliciousUserDetectionOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_EnableChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_EnableChallenge{` +
		`EnableChallenge:` + fmt.Sprintf("%#v", this.EnableChallenge) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_ChallengeOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_ChallengeOnCacheMiss{` +
		`ChallengeOnCacheMiss:` + fmt.Sprintf("%#v", this.ChallengeOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_ApiRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_ApiRateLimit{` +
		`ApiRateLimit:` + fmt.Sprintf("%#v", this.ApiRateLimit) + `}`}, ", ")
	return s
}
func (this *CommonSecurityControls_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CommonSecurityControls_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *ApiProtection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&cdn_loadbalancer.ApiProtection{")
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.ApiProtectionRules != nil {
		s = append(s, "ApiProtectionRules: "+fmt.Sprintf("%#v", this.ApiProtectionRules)+",\n")
	}
	if this.JwtValidation != nil {
		s = append(s, "JwtValidation: "+fmt.Sprintf("%#v", this.JwtValidation)+",\n")
	}
	if this.ApiDiscoveryChoice != nil {
		s = append(s, "ApiDiscoveryChoice: "+fmt.Sprintf("%#v", this.ApiDiscoveryChoice)+",\n")
	}
	if this.SensitiveDataPolicyChoice != nil {
		s = append(s, "SensitiveDataPolicyChoice: "+fmt.Sprintf("%#v", this.SensitiveDataPolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiProtection_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ApiProtection_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *ApiProtection_ApiSpecification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ApiProtection_ApiSpecification{` +
		`ApiSpecification:` + fmt.Sprintf("%#v", this.ApiSpecification) + `}`}, ", ")
	return s
}
func (this *ApiProtection_ApiSpecificationOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ApiProtection_ApiSpecificationOnCacheMiss{` +
		`ApiSpecificationOnCacheMiss:` + fmt.Sprintf("%#v", this.ApiSpecificationOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *ApiProtection_EnableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ApiProtection_EnableApiDiscovery{` +
		`EnableApiDiscovery:` + fmt.Sprintf("%#v", this.EnableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *ApiProtection_DisableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ApiProtection_DisableApiDiscovery{` +
		`DisableApiDiscovery:` + fmt.Sprintf("%#v", this.DisableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *ApiProtection_ApiDiscoveryOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ApiProtection_ApiDiscoveryOnCacheMiss{` +
		`ApiDiscoveryOnCacheMiss:` + fmt.Sprintf("%#v", this.ApiDiscoveryOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *ApiProtection_DefaultSensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ApiProtection_DefaultSensitiveDataPolicy{` +
		`DefaultSensitiveDataPolicy:` + fmt.Sprintf("%#v", this.DefaultSensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *ApiProtection_SensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ApiProtection_SensitiveDataPolicy{` +
		`SensitiveDataPolicy:` + fmt.Sprintf("%#v", this.SensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *SecurityOptionsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&cdn_loadbalancer.SecurityOptionsType{")
	if this.IpFiltering != nil {
		s = append(s, "IpFiltering: "+fmt.Sprintf("%#v", this.IpFiltering)+",\n")
	}
	if this.GeoFiltering != nil {
		s = append(s, "GeoFiltering: "+fmt.Sprintf("%#v", this.GeoFiltering)+",\n")
	}
	if this.AuthOptions != nil {
		s = append(s, "AuthOptions: "+fmt.Sprintf("%#v", this.AuthOptions)+",\n")
	}
	if this.WebAppFirewall != nil {
		s = append(s, "WebAppFirewall: "+fmt.Sprintf("%#v", this.WebAppFirewall)+",\n")
	}
	if this.ApiProtection != nil {
		s = append(s, "ApiProtection: "+fmt.Sprintf("%#v", this.ApiProtection)+",\n")
	}
	if this.CommonSecurityControls != nil {
		s = append(s, "CommonSecurityControls: "+fmt.Sprintf("%#v", this.CommonSecurityControls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoggingOptionsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.LoggingOptionsType{")
	if this.ClientLogOptions != nil {
		s = append(s, "ClientLogOptions: "+fmt.Sprintf("%#v", this.ClientLogOptions)+",\n")
	}
	if this.OriginLogOptions != nil {
		s = append(s, "OriginLogOptions: "+fmt.Sprintf("%#v", this.OriginLogOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDNCacheRuleExpressionList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.CDNCacheRuleExpressionList{")
	s = append(s, "ExpressionName: "+fmt.Sprintf("%#v", this.ExpressionName)+",\n")
	if this.CacheRuleExpression != nil {
		s = append(s, "CacheRuleExpression: "+fmt.Sprintf("%#v", this.CacheRuleExpression)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CacheOperator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&cdn_loadbalancer.CacheOperator{")
	if this.CacheOperator != nil {
		s = append(s, "CacheOperator: "+fmt.Sprintf("%#v", this.CacheOperator)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CacheOperator_Equals) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheOperator_Equals{` +
		`Equals:` + fmt.Sprintf("%#v", this.Equals) + `}`}, ", ")
	return s
}
func (this *CacheOperator_DoesNotEqual) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheOperator_DoesNotEqual{` +
		`DoesNotEqual:` + fmt.Sprintf("%#v", this.DoesNotEqual) + `}`}, ", ")
	return s
}
func (this *CacheOperator_Contains) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheOperator_Contains{` +
		`Contains:` + fmt.Sprintf("%#v", this.Contains) + `}`}, ", ")
	return s
}
func (this *CacheOperator_DoesNotContain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheOperator_DoesNotContain{` +
		`DoesNotContain:` + fmt.Sprintf("%#v", this.DoesNotContain) + `}`}, ", ")
	return s
}
func (this *CacheOperator_Startswith) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheOperator_Startswith{` +
		`Startswith:` + fmt.Sprintf("%#v", this.Startswith) + `}`}, ", ")
	return s
}
func (this *CacheOperator_DoesNotStartWith) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheOperator_DoesNotStartWith{` +
		`DoesNotStartWith:` + fmt.Sprintf("%#v", this.DoesNotStartWith) + `}`}, ", ")
	return s
}
func (this *CacheOperator_Endswith) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheOperator_Endswith{` +
		`Endswith:` + fmt.Sprintf("%#v", this.Endswith) + `}`}, ", ")
	return s
}
func (this *CacheOperator_DoesNotEndWith) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheOperator_DoesNotEndWith{` +
		`DoesNotEndWith:` + fmt.Sprintf("%#v", this.DoesNotEndWith) + `}`}, ", ")
	return s
}
func (this *CacheOperator_MatchRegex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheOperator_MatchRegex{` +
		`MatchRegex:` + fmt.Sprintf("%#v", this.MatchRegex) + `}`}, ", ")
	return s
}
func (this *CacheHeaderMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.CacheHeaderMatcherType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Operator != nil {
		s = append(s, "Operator: "+fmt.Sprintf("%#v", this.Operator)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDNPathMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cdn_loadbalancer.CDNPathMatcherType{")
	if this.Operator != nil {
		s = append(s, "Operator: "+fmt.Sprintf("%#v", this.Operator)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CacheCookieMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.CacheCookieMatcherType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Operator != nil {
		s = append(s, "Operator: "+fmt.Sprintf("%#v", this.Operator)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CacheQueryParameterMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.CacheQueryParameterMatcherType{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Operator != nil {
		s = append(s, "Operator: "+fmt.Sprintf("%#v", this.Operator)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDNCacheRuleExpression) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cdn_loadbalancer.CDNCacheRuleExpression{")
	if this.PathMatch != nil {
		s = append(s, "PathMatch: "+fmt.Sprintf("%#v", this.PathMatch)+",\n")
	}
	if this.QueryParameters != nil {
		s = append(s, "QueryParameters: "+fmt.Sprintf("%#v", this.QueryParameters)+",\n")
	}
	if this.CacheHeaders != nil {
		s = append(s, "CacheHeaders: "+fmt.Sprintf("%#v", this.CacheHeaders)+",\n")
	}
	if this.CookieMatcher != nil {
		s = append(s, "CookieMatcher: "+fmt.Sprintf("%#v", this.CookieMatcher)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CacheTTLEnableProps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cdn_loadbalancer.CacheTTLEnableProps{")
	s = append(s, "CacheTtl: "+fmt.Sprintf("%#v", this.CacheTtl)+",\n")
	s = append(s, "IgnoreResponseCookie: "+fmt.Sprintf("%#v", this.IgnoreResponseCookie)+",\n")
	s = append(s, "CacheOverride: "+fmt.Sprintf("%#v", this.CacheOverride)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CacheEligibleOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&cdn_loadbalancer.CacheEligibleOptions{")
	if this.EligibleForCache != nil {
		s = append(s, "EligibleForCache: "+fmt.Sprintf("%#v", this.EligibleForCache)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CacheEligibleOptions_SchemeHostnameUri) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameUri{` +
		`SchemeHostnameUri:` + fmt.Sprintf("%#v", this.SchemeHostnameUri) + `}`}, ", ")
	return s
}
func (this *CacheEligibleOptions_SchemeHostnameRequestUri) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameRequestUri{` +
		`SchemeHostnameRequestUri:` + fmt.Sprintf("%#v", this.SchemeHostnameRequestUri) + `}`}, ", ")
	return s
}
func (this *CacheEligibleOptions_HostnameUri) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheEligibleOptions_HostnameUri{` +
		`HostnameUri:` + fmt.Sprintf("%#v", this.HostnameUri) + `}`}, ", ")
	return s
}
func (this *CacheEligibleOptions_SchemeHostnameUriQuery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameUriQuery{` +
		`SchemeHostnameUriQuery:` + fmt.Sprintf("%#v", this.SchemeHostnameUriQuery) + `}`}, ", ")
	return s
}
func (this *CacheEligibleOptions_SchemeProxyHostUri) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheEligibleOptions_SchemeProxyHostUri{` +
		`SchemeProxyHostUri:` + fmt.Sprintf("%#v", this.SchemeProxyHostUri) + `}`}, ", ")
	return s
}
func (this *CacheEligibleOptions_SchemeProxyHostRequestUri) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheEligibleOptions_SchemeProxyHostRequestUri{` +
		`SchemeProxyHostRequestUri:` + fmt.Sprintf("%#v", this.SchemeProxyHostRequestUri) + `}`}, ", ")
	return s
}
func (this *CDNCacheRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cdn_loadbalancer.CDNCacheRule{")
	s = append(s, "RuleName: "+fmt.Sprintf("%#v", this.RuleName)+",\n")
	if this.RuleExpressionList != nil {
		s = append(s, "RuleExpressionList: "+fmt.Sprintf("%#v", this.RuleExpressionList)+",\n")
	}
	if this.CacheActions != nil {
		s = append(s, "CacheActions: "+fmt.Sprintf("%#v", this.CacheActions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDNCacheRule_CacheBypass) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CDNCacheRule_CacheBypass{` +
		`CacheBypass:` + fmt.Sprintf("%#v", this.CacheBypass) + `}`}, ", ")
	return s
}
func (this *CDNCacheRule_EligibleForCache) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CDNCacheRule_EligibleForCache{` +
		`EligibleForCache:` + fmt.Sprintf("%#v", this.EligibleForCache) + `}`}, ", ")
	return s
}
func (this *DefaultCacheTTLProps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cdn_loadbalancer.DefaultCacheTTLProps{")
	s = append(s, "CacheTtl: "+fmt.Sprintf("%#v", this.CacheTtl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DefaultCacheAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cdn_loadbalancer.DefaultCacheAction{")
	if this.CacheActions != nil {
		s = append(s, "CacheActions: "+fmt.Sprintf("%#v", this.CacheActions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DefaultCacheAction_EligibleForCache) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.DefaultCacheAction_EligibleForCache{` +
		`EligibleForCache:` + fmt.Sprintf("%#v", this.EligibleForCache) + `}`}, ", ")
	return s
}
func (this *DefaultCacheAction_CacheTtlDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.DefaultCacheAction_CacheTtlDefault{` +
		`CacheTtlDefault:` + fmt.Sprintf("%#v", this.CacheTtlDefault) + `}`}, ", ")
	return s
}
func (this *DefaultCacheAction_CacheTtlOverride) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.DefaultCacheAction_CacheTtlOverride{` +
		`CacheTtlOverride:` + fmt.Sprintf("%#v", this.CacheTtlOverride) + `}`}, ", ")
	return s
}
func (this *DefaultCacheAction_CacheDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.DefaultCacheAction_CacheDisabled{` +
		`CacheDisabled:` + fmt.Sprintf("%#v", this.CacheDisabled) + `}`}, ", ")
	return s
}
func (this *CacheOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.CacheOptions{")
	if this.DefaultCacheAction != nil {
		s = append(s, "DefaultCacheAction: "+fmt.Sprintf("%#v", this.DefaultCacheAction)+",\n")
	}
	if this.CacheRules != nil {
		s = append(s, "CacheRules: "+fmt.Sprintf("%#v", this.CacheRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CacheTTLOptionsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cdn_loadbalancer.CacheTTLOptionsType{")
	if this.TtlOptions != nil {
		s = append(s, "TtlOptions: "+fmt.Sprintf("%#v", this.TtlOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CacheTTLOptionsType_CacheTtlDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheTTLOptionsType_CacheTtlDefault{` +
		`CacheTtlDefault:` + fmt.Sprintf("%#v", this.CacheTtlDefault) + `}`}, ", ")
	return s
}
func (this *CacheTTLOptionsType_CacheTtlOverride) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheTTLOptionsType_CacheTtlOverride{` +
		`CacheTtlOverride:` + fmt.Sprintf("%#v", this.CacheTtlOverride) + `}`}, ", ")
	return s
}
func (this *CacheTTLOptionsType_CacheDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CacheTTLOptionsType_CacheDisabled{` +
		`CacheDisabled:` + fmt.Sprintf("%#v", this.CacheDisabled) + `}`}, ", ")
	return s
}
func (this *AdvancedOptionsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cdn_loadbalancer.AdvancedOptionsType{")
	if this.HeaderOptions != nil {
		s = append(s, "HeaderOptions: "+fmt.Sprintf("%#v", this.HeaderOptions)+",\n")
	}
	if this.SecurityOptions != nil {
		s = append(s, "SecurityOptions: "+fmt.Sprintf("%#v", this.SecurityOptions)+",\n")
	}
	if this.LoggingOptions != nil {
		s = append(s, "LoggingOptions: "+fmt.Sprintf("%#v", this.LoggingOptions)+",\n")
	}
	if this.CacheTtlOptions != nil {
		s = append(s, "CacheTtlOptions: "+fmt.Sprintf("%#v", this.CacheTtlOptions)+",\n")
	}
	if this.CacheOptions != nil {
		s = append(s, "CacheOptions: "+fmt.Sprintf("%#v", this.CacheOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDNTLSConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.CDNTLSConfig{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDNTLSConfig_Tls_12Plus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CDNTLSConfig_Tls_12Plus{` +
		`Tls_12Plus:` + fmt.Sprintf("%#v", this.Tls_12Plus) + `}`}, ", ")
	return s
}
func (this *CDNTLSConfig_Tls_11Plus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CDNTLSConfig_Tls_11Plus{` +
		`Tls_11Plus:` + fmt.Sprintf("%#v", this.Tls_11Plus) + `}`}, ", ")
	return s
}
func (this *CDNHTTPSAutoCertsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cdn_loadbalancer.CDNHTTPSAutoCertsType{")
	s = append(s, "HttpRedirect: "+fmt.Sprintf("%#v", this.HttpRedirect)+",\n")
	s = append(s, "AddHsts: "+fmt.Sprintf("%#v", this.AddHsts)+",\n")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDNDownstreamTlsParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.CDNDownstreamTlsParamsType{")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	if this.TlsCertificates != nil {
		s = append(s, "TlsCertificates: "+fmt.Sprintf("%#v", this.TlsCertificates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDNHTTPSCustomCertsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cdn_loadbalancer.CDNHTTPSCustomCertsType{")
	s = append(s, "HttpRedirect: "+fmt.Sprintf("%#v", this.HttpRedirect)+",\n")
	s = append(s, "AddHsts: "+fmt.Sprintf("%#v", this.AddHsts)+",\n")
	if this.TlsParameters != nil {
		s = append(s, "TlsParameters: "+fmt.Sprintf("%#v", this.TlsParameters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 77)
	s = append(s, "&cdn_loadbalancer.GlobalSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.OriginPool != nil {
		s = append(s, "OriginPool: "+fmt.Sprintf("%#v", this.OriginPool)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "AutoCertState: "+fmt.Sprintf("%#v", this.AutoCertState)+",\n")
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	if this.ServiceDomains != nil {
		s = append(s, "ServiceDomains: "+fmt.Sprintf("%#v", this.ServiceDomains)+",\n")
	}
	s = append(s, "CertState: "+fmt.Sprintf("%#v", this.CertState)+",\n")
	if this.OtherSettings != nil {
		s = append(s, "OtherSettings: "+fmt.Sprintf("%#v", this.OtherSettings)+",\n")
	}
	if this.DefaultCacheAction != nil {
		s = append(s, "DefaultCacheAction: "+fmt.Sprintf("%#v", this.DefaultCacheAction)+",\n")
	}
	if this.CacheRules != nil {
		s = append(s, "CacheRules: "+fmt.Sprintf("%#v", this.CacheRules)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.DataGuardRules != nil {
		s = append(s, "DataGuardRules: "+fmt.Sprintf("%#v", this.DataGuardRules)+",\n")
	}
	if this.CsrfPolicy != nil {
		s = append(s, "CsrfPolicy: "+fmt.Sprintf("%#v", this.CsrfPolicy)+",\n")
	}
	if this.GraphqlRules != nil {
		s = append(s, "GraphqlRules: "+fmt.Sprintf("%#v", this.GraphqlRules)+",\n")
	}
	if this.ProtectedCookies != nil {
		s = append(s, "ProtectedCookies: "+fmt.Sprintf("%#v", this.ProtectedCookies)+",\n")
	}
	if this.BotDefenseChoice != nil {
		s = append(s, "BotDefenseChoice: "+fmt.Sprintf("%#v", this.BotDefenseChoice)+",\n")
	}
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.ApiProtectionRules != nil {
		s = append(s, "ApiProtectionRules: "+fmt.Sprintf("%#v", this.ApiProtectionRules)+",\n")
	}
	if this.JwtValidation != nil {
		s = append(s, "JwtValidation: "+fmt.Sprintf("%#v", this.JwtValidation)+",\n")
	}
	if this.ApiDiscoveryChoice != nil {
		s = append(s, "ApiDiscoveryChoice: "+fmt.Sprintf("%#v", this.ApiDiscoveryChoice)+",\n")
	}
	if this.SensitiveDataPolicyChoice != nil {
		s = append(s, "SensitiveDataPolicyChoice: "+fmt.Sprintf("%#v", this.SensitiveDataPolicyChoice)+",\n")
	}
	if this.L7DdosAutoMitigationAction != nil {
		s = append(s, "L7DdosAutoMitigationAction: "+fmt.Sprintf("%#v", this.L7DdosAutoMitigationAction)+",\n")
	}
	if this.DdosMitigationRules != nil {
		s = append(s, "DdosMitigationRules: "+fmt.Sprintf("%#v", this.DdosMitigationRules)+",\n")
	}
	if this.SlowDdosMitigationChoice != nil {
		s = append(s, "SlowDdosMitigationChoice: "+fmt.Sprintf("%#v", this.SlowDdosMitigationChoice)+",\n")
	}
	if this.ClientSideDefenseChoice != nil {
		s = append(s, "ClientSideDefenseChoice: "+fmt.Sprintf("%#v", this.ClientSideDefenseChoice)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.IpReputationChoice != nil {
		s = append(s, "IpReputationChoice: "+fmt.Sprintf("%#v", this.IpReputationChoice)+",\n")
	}
	if this.ThreatMeshChoice != nil {
		s = append(s, "ThreatMeshChoice: "+fmt.Sprintf("%#v", this.ThreatMeshChoice)+",\n")
	}
	if this.UserIdChoice != nil {
		s = append(s, "UserIdChoice: "+fmt.Sprintf("%#v", this.UserIdChoice)+",\n")
	}
	if this.MaliciousUserDetectionChoice != nil {
		s = append(s, "MaliciousUserDetectionChoice: "+fmt.Sprintf("%#v", this.MaliciousUserDetectionChoice)+",\n")
	}
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AppFirewallOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_AppFirewallOnCacheMiss{` +
		`AppFirewallOnCacheMiss:` + fmt.Sprintf("%#v", this.AppFirewallOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableBotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_DisableBotDefense{` +
		`DisableBotDefense:` + fmt.Sprintf("%#v", this.DisableBotDefense) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BotDefenseAdvanced) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_BotDefenseAdvanced{` +
		`BotDefenseAdvanced:` + fmt.Sprintf("%#v", this.BotDefenseAdvanced) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ApiSpecification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_ApiSpecification{` +
		`ApiSpecification:` + fmt.Sprintf("%#v", this.ApiSpecification) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ApiSpecificationOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_ApiSpecificationOnCacheMiss{` +
		`ApiSpecificationOnCacheMiss:` + fmt.Sprintf("%#v", this.ApiSpecificationOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_EnableApiDiscovery{` +
		`EnableApiDiscovery:` + fmt.Sprintf("%#v", this.EnableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_DisableApiDiscovery{` +
		`DisableApiDiscovery:` + fmt.Sprintf("%#v", this.DisableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ApiDiscoveryOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_ApiDiscoveryOnCacheMiss{` +
		`ApiDiscoveryOnCacheMiss:` + fmt.Sprintf("%#v", this.ApiDiscoveryOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultSensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_DefaultSensitiveDataPolicy{` +
		`DefaultSensitiveDataPolicy:` + fmt.Sprintf("%#v", this.DefaultSensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_SensitiveDataPolicy{` +
		`SensitiveDataPolicy:` + fmt.Sprintf("%#v", this.SensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_L7DdosActionDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_L7DdosActionDefault{` +
		`L7DdosActionDefault:` + fmt.Sprintf("%#v", this.L7DdosActionDefault) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_L7DdosActionBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_L7DdosActionBlock{` +
		`L7DdosActionBlock:` + fmt.Sprintf("%#v", this.L7DdosActionBlock) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_L7DdosActionJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_L7DdosActionJsChallenge{` +
		`L7DdosActionJsChallenge:` + fmt.Sprintf("%#v", this.L7DdosActionJsChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_L7DdosActionNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_L7DdosActionNone{` +
		`L7DdosActionNone:` + fmt.Sprintf("%#v", this.L7DdosActionNone) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SystemDefaultTimeouts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_SystemDefaultTimeouts{` +
		`SystemDefaultTimeouts:` + fmt.Sprintf("%#v", this.SystemDefaultTimeouts) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SlowDdosMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_SlowDdosMitigation{` +
		`SlowDdosMitigation:` + fmt.Sprintf("%#v", this.SlowDdosMitigation) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_DisableClientSideDefense{` +
		`DisableClientSideDefense:` + fmt.Sprintf("%#v", this.DisableClientSideDefense) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_ClientSideDefense{` +
		`ClientSideDefense:` + fmt.Sprintf("%#v", this.ClientSideDefense) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_DisableIpReputation{` +
		`DisableIpReputation:` + fmt.Sprintf("%#v", this.DisableIpReputation) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_EnableIpReputation{` +
		`EnableIpReputation:` + fmt.Sprintf("%#v", this.EnableIpReputation) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IpReputationOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_IpReputationOnCacheMiss{` +
		`IpReputationOnCacheMiss:` + fmt.Sprintf("%#v", this.IpReputationOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_DisableThreatMesh{` +
		`DisableThreatMesh:` + fmt.Sprintf("%#v", this.DisableThreatMesh) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_EnableThreatMesh{` +
		`EnableThreatMesh:` + fmt.Sprintf("%#v", this.EnableThreatMesh) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_UserIdClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_UserIdClientIp{` +
		`UserIdClientIp:` + fmt.Sprintf("%#v", this.UserIdClientIp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_UserIdentification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_UserIdentification{` +
		`UserIdentification:` + fmt.Sprintf("%#v", this.UserIdentification) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_DisableMaliciousUserDetection{` +
		`DisableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.DisableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_EnableMaliciousUserDetection{` +
		`EnableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.EnableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_MaliciousUserDetectionOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_MaliciousUserDetectionOnCacheMiss{` +
		`MaliciousUserDetectionOnCacheMiss:` + fmt.Sprintf("%#v", this.MaliciousUserDetectionOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_EnableChallenge{` +
		`EnableChallenge:` + fmt.Sprintf("%#v", this.EnableChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ChallengeOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_ChallengeOnCacheMiss{` +
		`ChallengeOnCacheMiss:` + fmt.Sprintf("%#v", this.ChallengeOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ApiRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_ApiRateLimit{` +
		`ApiRateLimit:` + fmt.Sprintf("%#v", this.ApiRateLimit) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GlobalSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *IpFilteringOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.IpFilteringOptions{")
	if this.IpFilteringType != nil {
		s = append(s, "IpFilteringType: "+fmt.Sprintf("%#v", this.IpFilteringType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IpFilteringOptions_AllowList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.IpFilteringOptions_AllowList{` +
		`AllowList:` + fmt.Sprintf("%#v", this.AllowList) + `}`}, ", ")
	return s
}
func (this *IpFilteringOptions_BlockList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.IpFilteringOptions_BlockList{` +
		`BlockList:` + fmt.Sprintf("%#v", this.BlockList) + `}`}, ", ")
	return s
}
func (this *GeoFilteringOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.GeoFilteringOptions{")
	if this.GeoFilteringType != nil {
		s = append(s, "GeoFilteringType: "+fmt.Sprintf("%#v", this.GeoFilteringType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GeoFilteringOptions_AllowList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GeoFilteringOptions_AllowList{` +
		`AllowList:` + fmt.Sprintf("%#v", this.AllowList) + `}`}, ", ")
	return s
}
func (this *GeoFilteringOptions_BlockList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GeoFilteringOptions_BlockList{` +
		`BlockList:` + fmt.Sprintf("%#v", this.BlockList) + `}`}, ", ")
	return s
}
func (this *LogHeaderOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cdn_loadbalancer.LogHeaderOptions{")
	s = append(s, "HeaderList: "+fmt.Sprintf("%#v", this.HeaderList)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDNCustomAuthentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cdn_loadbalancer.CDNCustomAuthentication{")
	s = append(s, "CustomAuthConfig: "+fmt.Sprintf("%#v", this.CustomAuthConfig)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticationOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cdn_loadbalancer.AuthenticationOptions{")
	if this.AuthOptions != nil {
		s = append(s, "AuthOptions: "+fmt.Sprintf("%#v", this.AuthOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticationOptions_DisableAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.AuthenticationOptions_DisableAuth{` +
		`DisableAuth:` + fmt.Sprintf("%#v", this.DisableAuth) + `}`}, ", ")
	return s
}
func (this *AuthenticationOptions_Jwt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.AuthenticationOptions_Jwt{` +
		`Jwt:` + fmt.Sprintf("%#v", this.Jwt) + `}`}, ", ")
	return s
}
func (this *AuthenticationOptions_Custom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.AuthenticationOptions_Custom{` +
		`Custom:` + fmt.Sprintf("%#v", this.Custom) + `}`}, ", ")
	return s
}
func (this *CDNOriginServerType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cdn_loadbalancer.CDNOriginServerType{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDNOriginServerType_PublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CDNOriginServerType_PublicIp{` +
		`PublicIp:` + fmt.Sprintf("%#v", this.PublicIp) + `}`}, ", ")
	return s
}
func (this *CDNOriginServerType_PublicName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CDNOriginServerType_PublicName{` +
		`PublicName:` + fmt.Sprintf("%#v", this.PublicName) + `}`}, ", ")
	return s
}
func (this *CdnOriginPoolType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&cdn_loadbalancer.CdnOriginPoolType{")
	if this.PublicName != nil {
		s = append(s, "PublicName: "+fmt.Sprintf("%#v", this.PublicName)+",\n")
	}
	if this.TlsChoice != nil {
		s = append(s, "TlsChoice: "+fmt.Sprintf("%#v", this.TlsChoice)+",\n")
	}
	if this.OriginServers != nil {
		s = append(s, "OriginServers: "+fmt.Sprintf("%#v", this.OriginServers)+",\n")
	}
	s = append(s, "FollowOriginRedirect: "+fmt.Sprintf("%#v", this.FollowOriginRedirect)+",\n")
	s = append(s, "OriginRequestTimeout: "+fmt.Sprintf("%#v", this.OriginRequestTimeout)+",\n")
	if this.MoreOriginOptions != nil {
		s = append(s, "MoreOriginOptions: "+fmt.Sprintf("%#v", this.MoreOriginOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CdnOriginPoolType_NoTls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CdnOriginPoolType_NoTls{` +
		`NoTls:` + fmt.Sprintf("%#v", this.NoTls) + `}`}, ", ")
	return s
}
func (this *CdnOriginPoolType_UseTls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CdnOriginPoolType_UseTls{` +
		`UseTls:` + fmt.Sprintf("%#v", this.UseTls) + `}`}, ", ")
	return s
}
func (this *OriginAdvancedConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.OriginAdvancedConfiguration{")
	s = append(s, "DisableByteRangeRequest: "+fmt.Sprintf("%#v", this.DisableByteRangeRequest)+",\n")
	s = append(s, "WebsocketProxy: "+fmt.Sprintf("%#v", this.WebsocketProxy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 69)
	s = append(s, "&cdn_loadbalancer.CreateSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.OriginPool != nil {
		s = append(s, "OriginPool: "+fmt.Sprintf("%#v", this.OriginPool)+",\n")
	}
	if this.OtherSettings != nil {
		s = append(s, "OtherSettings: "+fmt.Sprintf("%#v", this.OtherSettings)+",\n")
	}
	if this.DefaultCacheAction != nil {
		s = append(s, "DefaultCacheAction: "+fmt.Sprintf("%#v", this.DefaultCacheAction)+",\n")
	}
	if this.CacheRules != nil {
		s = append(s, "CacheRules: "+fmt.Sprintf("%#v", this.CacheRules)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.DataGuardRules != nil {
		s = append(s, "DataGuardRules: "+fmt.Sprintf("%#v", this.DataGuardRules)+",\n")
	}
	if this.CsrfPolicy != nil {
		s = append(s, "CsrfPolicy: "+fmt.Sprintf("%#v", this.CsrfPolicy)+",\n")
	}
	if this.GraphqlRules != nil {
		s = append(s, "GraphqlRules: "+fmt.Sprintf("%#v", this.GraphqlRules)+",\n")
	}
	if this.ProtectedCookies != nil {
		s = append(s, "ProtectedCookies: "+fmt.Sprintf("%#v", this.ProtectedCookies)+",\n")
	}
	if this.BotDefenseChoice != nil {
		s = append(s, "BotDefenseChoice: "+fmt.Sprintf("%#v", this.BotDefenseChoice)+",\n")
	}
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.ApiProtectionRules != nil {
		s = append(s, "ApiProtectionRules: "+fmt.Sprintf("%#v", this.ApiProtectionRules)+",\n")
	}
	if this.JwtValidation != nil {
		s = append(s, "JwtValidation: "+fmt.Sprintf("%#v", this.JwtValidation)+",\n")
	}
	if this.ApiDiscoveryChoice != nil {
		s = append(s, "ApiDiscoveryChoice: "+fmt.Sprintf("%#v", this.ApiDiscoveryChoice)+",\n")
	}
	if this.SensitiveDataPolicyChoice != nil {
		s = append(s, "SensitiveDataPolicyChoice: "+fmt.Sprintf("%#v", this.SensitiveDataPolicyChoice)+",\n")
	}
	if this.L7DdosAutoMitigationAction != nil {
		s = append(s, "L7DdosAutoMitigationAction: "+fmt.Sprintf("%#v", this.L7DdosAutoMitigationAction)+",\n")
	}
	if this.DdosMitigationRules != nil {
		s = append(s, "DdosMitigationRules: "+fmt.Sprintf("%#v", this.DdosMitigationRules)+",\n")
	}
	if this.SlowDdosMitigationChoice != nil {
		s = append(s, "SlowDdosMitigationChoice: "+fmt.Sprintf("%#v", this.SlowDdosMitigationChoice)+",\n")
	}
	if this.ClientSideDefenseChoice != nil {
		s = append(s, "ClientSideDefenseChoice: "+fmt.Sprintf("%#v", this.ClientSideDefenseChoice)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.IpReputationChoice != nil {
		s = append(s, "IpReputationChoice: "+fmt.Sprintf("%#v", this.IpReputationChoice)+",\n")
	}
	if this.ThreatMeshChoice != nil {
		s = append(s, "ThreatMeshChoice: "+fmt.Sprintf("%#v", this.ThreatMeshChoice)+",\n")
	}
	if this.UserIdChoice != nil {
		s = append(s, "UserIdChoice: "+fmt.Sprintf("%#v", this.UserIdChoice)+",\n")
	}
	if this.MaliciousUserDetectionChoice != nil {
		s = append(s, "MaliciousUserDetectionChoice: "+fmt.Sprintf("%#v", this.MaliciousUserDetectionChoice)+",\n")
	}
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AppFirewallOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_AppFirewallOnCacheMiss{` +
		`AppFirewallOnCacheMiss:` + fmt.Sprintf("%#v", this.AppFirewallOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableBotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_DisableBotDefense{` +
		`DisableBotDefense:` + fmt.Sprintf("%#v", this.DisableBotDefense) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BotDefenseAdvanced) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_BotDefenseAdvanced{` +
		`BotDefenseAdvanced:` + fmt.Sprintf("%#v", this.BotDefenseAdvanced) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ApiSpecification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_ApiSpecification{` +
		`ApiSpecification:` + fmt.Sprintf("%#v", this.ApiSpecification) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ApiSpecificationOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_ApiSpecificationOnCacheMiss{` +
		`ApiSpecificationOnCacheMiss:` + fmt.Sprintf("%#v", this.ApiSpecificationOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_EnableApiDiscovery{` +
		`EnableApiDiscovery:` + fmt.Sprintf("%#v", this.EnableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_DisableApiDiscovery{` +
		`DisableApiDiscovery:` + fmt.Sprintf("%#v", this.DisableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ApiDiscoveryOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_ApiDiscoveryOnCacheMiss{` +
		`ApiDiscoveryOnCacheMiss:` + fmt.Sprintf("%#v", this.ApiDiscoveryOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultSensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_DefaultSensitiveDataPolicy{` +
		`DefaultSensitiveDataPolicy:` + fmt.Sprintf("%#v", this.DefaultSensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_SensitiveDataPolicy{` +
		`SensitiveDataPolicy:` + fmt.Sprintf("%#v", this.SensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_L7DdosActionDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_L7DdosActionDefault{` +
		`L7DdosActionDefault:` + fmt.Sprintf("%#v", this.L7DdosActionDefault) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_L7DdosActionBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_L7DdosActionBlock{` +
		`L7DdosActionBlock:` + fmt.Sprintf("%#v", this.L7DdosActionBlock) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_L7DdosActionJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_L7DdosActionJsChallenge{` +
		`L7DdosActionJsChallenge:` + fmt.Sprintf("%#v", this.L7DdosActionJsChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_L7DdosActionNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_L7DdosActionNone{` +
		`L7DdosActionNone:` + fmt.Sprintf("%#v", this.L7DdosActionNone) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SystemDefaultTimeouts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_SystemDefaultTimeouts{` +
		`SystemDefaultTimeouts:` + fmt.Sprintf("%#v", this.SystemDefaultTimeouts) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SlowDdosMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_SlowDdosMitigation{` +
		`SlowDdosMitigation:` + fmt.Sprintf("%#v", this.SlowDdosMitigation) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_DisableClientSideDefense{` +
		`DisableClientSideDefense:` + fmt.Sprintf("%#v", this.DisableClientSideDefense) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_ClientSideDefense{` +
		`ClientSideDefense:` + fmt.Sprintf("%#v", this.ClientSideDefense) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_DisableIpReputation{` +
		`DisableIpReputation:` + fmt.Sprintf("%#v", this.DisableIpReputation) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_EnableIpReputation{` +
		`EnableIpReputation:` + fmt.Sprintf("%#v", this.EnableIpReputation) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IpReputationOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_IpReputationOnCacheMiss{` +
		`IpReputationOnCacheMiss:` + fmt.Sprintf("%#v", this.IpReputationOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_DisableThreatMesh{` +
		`DisableThreatMesh:` + fmt.Sprintf("%#v", this.DisableThreatMesh) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_EnableThreatMesh{` +
		`EnableThreatMesh:` + fmt.Sprintf("%#v", this.EnableThreatMesh) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_UserIdClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_UserIdClientIp{` +
		`UserIdClientIp:` + fmt.Sprintf("%#v", this.UserIdClientIp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_UserIdentification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_UserIdentification{` +
		`UserIdentification:` + fmt.Sprintf("%#v", this.UserIdentification) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_DisableMaliciousUserDetection{` +
		`DisableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.DisableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_EnableMaliciousUserDetection{` +
		`EnableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.EnableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_MaliciousUserDetectionOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_MaliciousUserDetectionOnCacheMiss{` +
		`MaliciousUserDetectionOnCacheMiss:` + fmt.Sprintf("%#v", this.MaliciousUserDetectionOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_EnableChallenge{` +
		`EnableChallenge:` + fmt.Sprintf("%#v", this.EnableChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ChallengeOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_ChallengeOnCacheMiss{` +
		`ChallengeOnCacheMiss:` + fmt.Sprintf("%#v", this.ChallengeOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ApiRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_ApiRateLimit{` +
		`ApiRateLimit:` + fmt.Sprintf("%#v", this.ApiRateLimit) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.CreateSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 69)
	s = append(s, "&cdn_loadbalancer.ReplaceSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.OriginPool != nil {
		s = append(s, "OriginPool: "+fmt.Sprintf("%#v", this.OriginPool)+",\n")
	}
	if this.OtherSettings != nil {
		s = append(s, "OtherSettings: "+fmt.Sprintf("%#v", this.OtherSettings)+",\n")
	}
	if this.DefaultCacheAction != nil {
		s = append(s, "DefaultCacheAction: "+fmt.Sprintf("%#v", this.DefaultCacheAction)+",\n")
	}
	if this.CacheRules != nil {
		s = append(s, "CacheRules: "+fmt.Sprintf("%#v", this.CacheRules)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.DataGuardRules != nil {
		s = append(s, "DataGuardRules: "+fmt.Sprintf("%#v", this.DataGuardRules)+",\n")
	}
	if this.CsrfPolicy != nil {
		s = append(s, "CsrfPolicy: "+fmt.Sprintf("%#v", this.CsrfPolicy)+",\n")
	}
	if this.GraphqlRules != nil {
		s = append(s, "GraphqlRules: "+fmt.Sprintf("%#v", this.GraphqlRules)+",\n")
	}
	if this.ProtectedCookies != nil {
		s = append(s, "ProtectedCookies: "+fmt.Sprintf("%#v", this.ProtectedCookies)+",\n")
	}
	if this.BotDefenseChoice != nil {
		s = append(s, "BotDefenseChoice: "+fmt.Sprintf("%#v", this.BotDefenseChoice)+",\n")
	}
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.ApiProtectionRules != nil {
		s = append(s, "ApiProtectionRules: "+fmt.Sprintf("%#v", this.ApiProtectionRules)+",\n")
	}
	if this.JwtValidation != nil {
		s = append(s, "JwtValidation: "+fmt.Sprintf("%#v", this.JwtValidation)+",\n")
	}
	if this.ApiDiscoveryChoice != nil {
		s = append(s, "ApiDiscoveryChoice: "+fmt.Sprintf("%#v", this.ApiDiscoveryChoice)+",\n")
	}
	if this.SensitiveDataPolicyChoice != nil {
		s = append(s, "SensitiveDataPolicyChoice: "+fmt.Sprintf("%#v", this.SensitiveDataPolicyChoice)+",\n")
	}
	if this.L7DdosAutoMitigationAction != nil {
		s = append(s, "L7DdosAutoMitigationAction: "+fmt.Sprintf("%#v", this.L7DdosAutoMitigationAction)+",\n")
	}
	if this.DdosMitigationRules != nil {
		s = append(s, "DdosMitigationRules: "+fmt.Sprintf("%#v", this.DdosMitigationRules)+",\n")
	}
	if this.SlowDdosMitigationChoice != nil {
		s = append(s, "SlowDdosMitigationChoice: "+fmt.Sprintf("%#v", this.SlowDdosMitigationChoice)+",\n")
	}
	if this.ClientSideDefenseChoice != nil {
		s = append(s, "ClientSideDefenseChoice: "+fmt.Sprintf("%#v", this.ClientSideDefenseChoice)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.IpReputationChoice != nil {
		s = append(s, "IpReputationChoice: "+fmt.Sprintf("%#v", this.IpReputationChoice)+",\n")
	}
	if this.ThreatMeshChoice != nil {
		s = append(s, "ThreatMeshChoice: "+fmt.Sprintf("%#v", this.ThreatMeshChoice)+",\n")
	}
	if this.UserIdChoice != nil {
		s = append(s, "UserIdChoice: "+fmt.Sprintf("%#v", this.UserIdChoice)+",\n")
	}
	if this.MaliciousUserDetectionChoice != nil {
		s = append(s, "MaliciousUserDetectionChoice: "+fmt.Sprintf("%#v", this.MaliciousUserDetectionChoice)+",\n")
	}
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AppFirewallOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_AppFirewallOnCacheMiss{` +
		`AppFirewallOnCacheMiss:` + fmt.Sprintf("%#v", this.AppFirewallOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableBotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_DisableBotDefense{` +
		`DisableBotDefense:` + fmt.Sprintf("%#v", this.DisableBotDefense) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BotDefenseAdvanced) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_BotDefenseAdvanced{` +
		`BotDefenseAdvanced:` + fmt.Sprintf("%#v", this.BotDefenseAdvanced) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ApiSpecification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_ApiSpecification{` +
		`ApiSpecification:` + fmt.Sprintf("%#v", this.ApiSpecification) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ApiSpecificationOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_ApiSpecificationOnCacheMiss{` +
		`ApiSpecificationOnCacheMiss:` + fmt.Sprintf("%#v", this.ApiSpecificationOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_EnableApiDiscovery{` +
		`EnableApiDiscovery:` + fmt.Sprintf("%#v", this.EnableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_DisableApiDiscovery{` +
		`DisableApiDiscovery:` + fmt.Sprintf("%#v", this.DisableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ApiDiscoveryOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_ApiDiscoveryOnCacheMiss{` +
		`ApiDiscoveryOnCacheMiss:` + fmt.Sprintf("%#v", this.ApiDiscoveryOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultSensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_DefaultSensitiveDataPolicy{` +
		`DefaultSensitiveDataPolicy:` + fmt.Sprintf("%#v", this.DefaultSensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_SensitiveDataPolicy{` +
		`SensitiveDataPolicy:` + fmt.Sprintf("%#v", this.SensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_L7DdosActionDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_L7DdosActionDefault{` +
		`L7DdosActionDefault:` + fmt.Sprintf("%#v", this.L7DdosActionDefault) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_L7DdosActionBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_L7DdosActionBlock{` +
		`L7DdosActionBlock:` + fmt.Sprintf("%#v", this.L7DdosActionBlock) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_L7DdosActionJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_L7DdosActionJsChallenge{` +
		`L7DdosActionJsChallenge:` + fmt.Sprintf("%#v", this.L7DdosActionJsChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_L7DdosActionNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_L7DdosActionNone{` +
		`L7DdosActionNone:` + fmt.Sprintf("%#v", this.L7DdosActionNone) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SystemDefaultTimeouts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_SystemDefaultTimeouts{` +
		`SystemDefaultTimeouts:` + fmt.Sprintf("%#v", this.SystemDefaultTimeouts) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SlowDdosMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_SlowDdosMitigation{` +
		`SlowDdosMitigation:` + fmt.Sprintf("%#v", this.SlowDdosMitigation) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_DisableClientSideDefense{` +
		`DisableClientSideDefense:` + fmt.Sprintf("%#v", this.DisableClientSideDefense) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_ClientSideDefense{` +
		`ClientSideDefense:` + fmt.Sprintf("%#v", this.ClientSideDefense) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_DisableIpReputation{` +
		`DisableIpReputation:` + fmt.Sprintf("%#v", this.DisableIpReputation) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_EnableIpReputation{` +
		`EnableIpReputation:` + fmt.Sprintf("%#v", this.EnableIpReputation) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IpReputationOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_IpReputationOnCacheMiss{` +
		`IpReputationOnCacheMiss:` + fmt.Sprintf("%#v", this.IpReputationOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_DisableThreatMesh{` +
		`DisableThreatMesh:` + fmt.Sprintf("%#v", this.DisableThreatMesh) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_EnableThreatMesh{` +
		`EnableThreatMesh:` + fmt.Sprintf("%#v", this.EnableThreatMesh) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_UserIdClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_UserIdClientIp{` +
		`UserIdClientIp:` + fmt.Sprintf("%#v", this.UserIdClientIp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_UserIdentification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_UserIdentification{` +
		`UserIdentification:` + fmt.Sprintf("%#v", this.UserIdentification) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_DisableMaliciousUserDetection{` +
		`DisableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.DisableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_EnableMaliciousUserDetection{` +
		`EnableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.EnableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_MaliciousUserDetectionOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_MaliciousUserDetectionOnCacheMiss{` +
		`MaliciousUserDetectionOnCacheMiss:` + fmt.Sprintf("%#v", this.MaliciousUserDetectionOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_EnableChallenge{` +
		`EnableChallenge:` + fmt.Sprintf("%#v", this.EnableChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ChallengeOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_ChallengeOnCacheMiss{` +
		`ChallengeOnCacheMiss:` + fmt.Sprintf("%#v", this.ChallengeOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ApiRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_ApiRateLimit{` +
		`ApiRateLimit:` + fmt.Sprintf("%#v", this.ApiRateLimit) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.ReplaceSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 75)
	s = append(s, "&cdn_loadbalancer.GetSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.OriginPool != nil {
		s = append(s, "OriginPool: "+fmt.Sprintf("%#v", this.OriginPool)+",\n")
	}
	if this.OtherSettings != nil {
		s = append(s, "OtherSettings: "+fmt.Sprintf("%#v", this.OtherSettings)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	if this.ServiceDomains != nil {
		s = append(s, "ServiceDomains: "+fmt.Sprintf("%#v", this.ServiceDomains)+",\n")
	}
	s = append(s, "CertState: "+fmt.Sprintf("%#v", this.CertState)+",\n")
	if this.DefaultCacheAction != nil {
		s = append(s, "DefaultCacheAction: "+fmt.Sprintf("%#v", this.DefaultCacheAction)+",\n")
	}
	if this.CacheRules != nil {
		s = append(s, "CacheRules: "+fmt.Sprintf("%#v", this.CacheRules)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.DataGuardRules != nil {
		s = append(s, "DataGuardRules: "+fmt.Sprintf("%#v", this.DataGuardRules)+",\n")
	}
	if this.CsrfPolicy != nil {
		s = append(s, "CsrfPolicy: "+fmt.Sprintf("%#v", this.CsrfPolicy)+",\n")
	}
	if this.GraphqlRules != nil {
		s = append(s, "GraphqlRules: "+fmt.Sprintf("%#v", this.GraphqlRules)+",\n")
	}
	if this.ProtectedCookies != nil {
		s = append(s, "ProtectedCookies: "+fmt.Sprintf("%#v", this.ProtectedCookies)+",\n")
	}
	if this.BotDefenseChoice != nil {
		s = append(s, "BotDefenseChoice: "+fmt.Sprintf("%#v", this.BotDefenseChoice)+",\n")
	}
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.ApiProtectionRules != nil {
		s = append(s, "ApiProtectionRules: "+fmt.Sprintf("%#v", this.ApiProtectionRules)+",\n")
	}
	if this.JwtValidation != nil {
		s = append(s, "JwtValidation: "+fmt.Sprintf("%#v", this.JwtValidation)+",\n")
	}
	if this.ApiDiscoveryChoice != nil {
		s = append(s, "ApiDiscoveryChoice: "+fmt.Sprintf("%#v", this.ApiDiscoveryChoice)+",\n")
	}
	if this.SensitiveDataPolicyChoice != nil {
		s = append(s, "SensitiveDataPolicyChoice: "+fmt.Sprintf("%#v", this.SensitiveDataPolicyChoice)+",\n")
	}
	if this.L7DdosAutoMitigationAction != nil {
		s = append(s, "L7DdosAutoMitigationAction: "+fmt.Sprintf("%#v", this.L7DdosAutoMitigationAction)+",\n")
	}
	if this.DdosMitigationRules != nil {
		s = append(s, "DdosMitigationRules: "+fmt.Sprintf("%#v", this.DdosMitigationRules)+",\n")
	}
	if this.SlowDdosMitigationChoice != nil {
		s = append(s, "SlowDdosMitigationChoice: "+fmt.Sprintf("%#v", this.SlowDdosMitigationChoice)+",\n")
	}
	if this.ClientSideDefenseChoice != nil {
		s = append(s, "ClientSideDefenseChoice: "+fmt.Sprintf("%#v", this.ClientSideDefenseChoice)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.IpReputationChoice != nil {
		s = append(s, "IpReputationChoice: "+fmt.Sprintf("%#v", this.IpReputationChoice)+",\n")
	}
	if this.ThreatMeshChoice != nil {
		s = append(s, "ThreatMeshChoice: "+fmt.Sprintf("%#v", this.ThreatMeshChoice)+",\n")
	}
	if this.UserIdChoice != nil {
		s = append(s, "UserIdChoice: "+fmt.Sprintf("%#v", this.UserIdChoice)+",\n")
	}
	if this.MaliciousUserDetectionChoice != nil {
		s = append(s, "MaliciousUserDetectionChoice: "+fmt.Sprintf("%#v", this.MaliciousUserDetectionChoice)+",\n")
	}
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AppFirewallOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_AppFirewallOnCacheMiss{` +
		`AppFirewallOnCacheMiss:` + fmt.Sprintf("%#v", this.AppFirewallOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableBotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_DisableBotDefense{` +
		`DisableBotDefense:` + fmt.Sprintf("%#v", this.DisableBotDefense) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BotDefenseAdvanced) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_BotDefenseAdvanced{` +
		`BotDefenseAdvanced:` + fmt.Sprintf("%#v", this.BotDefenseAdvanced) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ApiSpecification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_ApiSpecification{` +
		`ApiSpecification:` + fmt.Sprintf("%#v", this.ApiSpecification) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ApiSpecificationOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_ApiSpecificationOnCacheMiss{` +
		`ApiSpecificationOnCacheMiss:` + fmt.Sprintf("%#v", this.ApiSpecificationOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_EnableApiDiscovery{` +
		`EnableApiDiscovery:` + fmt.Sprintf("%#v", this.EnableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_DisableApiDiscovery{` +
		`DisableApiDiscovery:` + fmt.Sprintf("%#v", this.DisableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ApiDiscoveryOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_ApiDiscoveryOnCacheMiss{` +
		`ApiDiscoveryOnCacheMiss:` + fmt.Sprintf("%#v", this.ApiDiscoveryOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultSensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_DefaultSensitiveDataPolicy{` +
		`DefaultSensitiveDataPolicy:` + fmt.Sprintf("%#v", this.DefaultSensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_SensitiveDataPolicy{` +
		`SensitiveDataPolicy:` + fmt.Sprintf("%#v", this.SensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *GetSpecType_L7DdosActionDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_L7DdosActionDefault{` +
		`L7DdosActionDefault:` + fmt.Sprintf("%#v", this.L7DdosActionDefault) + `}`}, ", ")
	return s
}
func (this *GetSpecType_L7DdosActionBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_L7DdosActionBlock{` +
		`L7DdosActionBlock:` + fmt.Sprintf("%#v", this.L7DdosActionBlock) + `}`}, ", ")
	return s
}
func (this *GetSpecType_L7DdosActionJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_L7DdosActionJsChallenge{` +
		`L7DdosActionJsChallenge:` + fmt.Sprintf("%#v", this.L7DdosActionJsChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_L7DdosActionNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_L7DdosActionNone{` +
		`L7DdosActionNone:` + fmt.Sprintf("%#v", this.L7DdosActionNone) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SystemDefaultTimeouts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_SystemDefaultTimeouts{` +
		`SystemDefaultTimeouts:` + fmt.Sprintf("%#v", this.SystemDefaultTimeouts) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SlowDdosMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_SlowDdosMitigation{` +
		`SlowDdosMitigation:` + fmt.Sprintf("%#v", this.SlowDdosMitigation) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_DisableClientSideDefense{` +
		`DisableClientSideDefense:` + fmt.Sprintf("%#v", this.DisableClientSideDefense) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_ClientSideDefense{` +
		`ClientSideDefense:` + fmt.Sprintf("%#v", this.ClientSideDefense) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_DisableIpReputation{` +
		`DisableIpReputation:` + fmt.Sprintf("%#v", this.DisableIpReputation) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_EnableIpReputation{` +
		`EnableIpReputation:` + fmt.Sprintf("%#v", this.EnableIpReputation) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IpReputationOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_IpReputationOnCacheMiss{` +
		`IpReputationOnCacheMiss:` + fmt.Sprintf("%#v", this.IpReputationOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_DisableThreatMesh{` +
		`DisableThreatMesh:` + fmt.Sprintf("%#v", this.DisableThreatMesh) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_EnableThreatMesh{` +
		`EnableThreatMesh:` + fmt.Sprintf("%#v", this.EnableThreatMesh) + `}`}, ", ")
	return s
}
func (this *GetSpecType_UserIdClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_UserIdClientIp{` +
		`UserIdClientIp:` + fmt.Sprintf("%#v", this.UserIdClientIp) + `}`}, ", ")
	return s
}
func (this *GetSpecType_UserIdentification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_UserIdentification{` +
		`UserIdentification:` + fmt.Sprintf("%#v", this.UserIdentification) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_DisableMaliciousUserDetection{` +
		`DisableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.DisableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_EnableMaliciousUserDetection{` +
		`EnableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.EnableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *GetSpecType_MaliciousUserDetectionOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_MaliciousUserDetectionOnCacheMiss{` +
		`MaliciousUserDetectionOnCacheMiss:` + fmt.Sprintf("%#v", this.MaliciousUserDetectionOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_EnableChallenge{` +
		`EnableChallenge:` + fmt.Sprintf("%#v", this.EnableChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ChallengeOnCacheMiss) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_ChallengeOnCacheMiss{` +
		`ChallengeOnCacheMiss:` + fmt.Sprintf("%#v", this.ChallengeOnCacheMiss) + `}`}, ", ")
	return s
}
func (this *GetSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ApiRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_ApiRateLimit{` +
		`ApiRateLimit:` + fmt.Sprintf("%#v", this.ApiRateLimit) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *LilacCDNMetricsFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cdn_loadbalancer.LilacCDNMetricsFilter{")
	s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	s = append(s, "Operator: "+fmt.Sprintf("%#v", this.Operator)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LilacCDNMetricsResponseGroupBy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.LilacCDNMetricsResponseGroupBy{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LilacCDNMetricsResponseValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.LilacCDNMetricsResponseValue{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LilacCDNMetricsResponseSeries) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cdn_loadbalancer.LilacCDNMetricsResponseSeries{")
	if this.GroupBy != nil {
		s = append(s, "GroupBy: "+fmt.Sprintf("%#v", this.GroupBy)+",\n")
	}
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LilacCDNMetricsResponseData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cdn_loadbalancer.LilacCDNMetricsResponseData{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Unit: "+fmt.Sprintf("%#v", this.Unit)+",\n")
	if this.Series != nil {
		s = append(s, "Series: "+fmt.Sprintf("%#v", this.Series)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ProxyTypeHttpsAutoCerts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeHttpsAutoCerts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerHeaderChoice != nil {
		{
			size := m.ServerHeaderChoice.Size()
			i -= size
			if _, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TlsConfig != nil {
		{
			size, err := m.TlsConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AddHsts {
		i--
		if m.AddHsts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.HttpRedirect {
		i--
		if m.HttpRedirect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProxyTypeHttpsAutoCerts_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_DefaultHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultHeader != nil {
		{
			size, err := m.DefaultHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_ServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_ServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ServerName)
	copy(dAtA[i:], m.ServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_AppendServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AppendServerName)
	copy(dAtA[i:], m.AppendServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_PassThrough) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PassThrough != nil {
		{
			size, err := m.PassThrough.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *HeaderControlType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeaderControlType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderControlType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResponseHeadersToRemove) > 0 {
		for iNdEx := len(m.ResponseHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResponseHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.ResponseHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ResponseHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for iNdEx := len(m.ResponseHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for iNdEx := len(m.RequestHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.RequestHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RequestHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for iNdEx := len(m.RequestHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WebApplicationFirewall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebApplicationFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebApplicationFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for iNdEx := len(m.ProtectedCookies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProtectedCookies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.GraphqlRules) > 0 {
		for iNdEx := len(m.GraphqlRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GraphqlRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.CsrfPolicy != nil {
		{
			size, err := m.CsrfPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.DataGuardRules) > 0 {
		for iNdEx := len(m.DataGuardRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataGuardRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.WafExclusionRules) > 0 {
		for iNdEx := len(m.WafExclusionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafExclusionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	return len(dAtA) - i, nil
}

func (m *WebApplicationFirewall_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebApplicationFirewall_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WebApplicationFirewall_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebApplicationFirewall_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *WebApplicationFirewall_AppFirewallOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebApplicationFirewall_AppFirewallOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewallOnCacheMiss != nil {
		{
			size, err := m.AppFirewallOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *BotProtection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotProtection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotProtection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BotDefenseChoice != nil {
		{
			size := m.BotDefenseChoice.Size()
			i -= size
			if _, err := m.BotDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BotProtection_DisableBotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotProtection_DisableBotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableBotDefense != nil {
		{
			size, err := m.DisableBotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BotProtection_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotProtection_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefense != nil {
		{
			size, err := m.BotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BotProtection_BotDefenseAdvanced) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotProtection_BotDefenseAdvanced) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefenseAdvanced != nil {
		{
			size, err := m.BotDefenseAdvanced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *DoSProtection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoSProtection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoSProtection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SlowDdosMitigationChoice != nil {
		{
			size := m.SlowDdosMitigationChoice.Size()
			i -= size
			if _, err := m.SlowDdosMitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for iNdEx := len(m.DdosMitigationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DdosMitigationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.L7DdosAutoMitigationAction != nil {
		{
			size := m.L7DdosAutoMitigationAction.Size()
			i -= size
			if _, err := m.L7DdosAutoMitigationAction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DoSProtection_L7DdosActionDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoSProtection_L7DdosActionDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionDefault != nil {
		{
			size, err := m.L7DdosActionDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DoSProtection_L7DdosActionBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoSProtection_L7DdosActionBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionBlock != nil {
		{
			size, err := m.L7DdosActionBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DoSProtection_L7DdosActionJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoSProtection_L7DdosActionJsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionJsChallenge != nil {
		{
			size, err := m.L7DdosActionJsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DoSProtection_L7DdosActionNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoSProtection_L7DdosActionNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionNone != nil {
		{
			size, err := m.L7DdosActionNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DoSProtection_SystemDefaultTimeouts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoSProtection_SystemDefaultTimeouts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemDefaultTimeouts != nil {
		{
			size, err := m.SystemDefaultTimeouts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *DoSProtection_SlowDdosMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoSProtection_SlowDdosMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlowDdosMitigation != nil {
		{
			size, err := m.SlowDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *OtherSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OtherSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GeoFiltering != nil {
		{
			size, err := m.GeoFiltering.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IpFiltering != nil {
		{
			size, err := m.IpFiltering.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HeaderOptions != nil {
		{
			size, err := m.HeaderOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LoggingOptions != nil {
		{
			size, err := m.LoggingOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientSideDefense) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientSideDefenseChoice != nil {
		{
			size := m.ClientSideDefenseChoice.Size()
			i -= size
			if _, err := m.ClientSideDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientSideDefense_DisableClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSideDefense_DisableClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableClientSideDefense != nil {
		{
			size, err := m.DisableClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ClientSideDefense_ClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSideDefense_ClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientSideDefense != nil {
		{
			size, err := m.ClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonSecurityControls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ThreatMeshChoice != nil {
		{
			size := m.ThreatMeshChoice.Size()
			i -= size
			if _, err := m.ThreatMeshChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaliciousUserDetectionChoice != nil {
		{
			size := m.MaliciousUserDetectionChoice.Size()
			i -= size
			if _, err := m.MaliciousUserDetectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IpReputationChoice != nil {
		{
			size := m.IpReputationChoice.Size()
			i -= size
			if _, err := m.IpReputationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.BlockedClients) > 0 {
		for iNdEx := len(m.BlockedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.TrustedClients) > 0 {
		for iNdEx := len(m.TrustedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.RateLimitChoice != nil {
		{
			size := m.RateLimitChoice.Size()
			i -= size
			if _, err := m.RateLimitChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UserIdChoice != nil {
		{
			size := m.UserIdChoice.Size()
			i -= size
			if _, err := m.UserIdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CommonSecurityControls_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_DisableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_DisableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableIpReputation != nil {
		{
			size, err := m.DisableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_EnableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_EnableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableIpReputation != nil {
		{
			size, err := m.EnableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_UserIdClientIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_UserIdClientIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdClientIp != nil {
		{
			size, err := m.UserIdClientIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_UserIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_UserIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdentification != nil {
		{
			size, err := m.UserIdentification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_DisableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_DisableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMaliciousUserDetection != nil {
		{
			size, err := m.DisableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_EnableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_EnableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableMaliciousUserDetection != nil {
		{
			size, err := m.EnableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_EnableChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_EnableChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableChallenge != nil {
		{
			size, err := m.EnableChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyBasedChallenge != nil {
		{
			size, err := m.PolicyBasedChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_DisableRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableRateLimit != nil {
		{
			size, err := m.DisableRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_ApiRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_ApiRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiRateLimit != nil {
		{
			size, err := m.ApiRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_IpReputationOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_IpReputationOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpReputationOnCacheMiss != nil {
		{
			size, err := m.IpReputationOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_MaliciousUserDetectionOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_MaliciousUserDetectionOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaliciousUserDetectionOnCacheMiss != nil {
		{
			size, err := m.MaliciousUserDetectionOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_ChallengeOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_ChallengeOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChallengeOnCacheMiss != nil {
		{
			size, err := m.ChallengeOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_DisableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_DisableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableThreatMesh != nil {
		{
			size, err := m.DisableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *CommonSecurityControls_EnableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSecurityControls_EnableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableThreatMesh != nil {
		{
			size, err := m.EnableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ApiProtection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiProtection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiProtection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SensitiveDataPolicyChoice != nil {
		{
			size := m.SensitiveDataPolicyChoice.Size()
			i -= size
			if _, err := m.SensitiveDataPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDiscoveryChoice != nil {
		{
			size := m.ApiDiscoveryChoice.Size()
			i -= size
			if _, err := m.ApiDiscoveryChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.JwtValidation != nil {
		{
			size, err := m.JwtValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ApiProtectionRules != nil {
		{
			size, err := m.ApiProtectionRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *ApiProtection_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiProtection_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ApiProtection_ApiSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiProtection_ApiSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecification != nil {
		{
			size, err := m.ApiSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ApiProtection_EnableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiProtection_EnableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableApiDiscovery != nil {
		{
			size, err := m.EnableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ApiProtection_DisableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiProtection_DisableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDiscovery != nil {
		{
			size, err := m.DisableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ApiProtection_ApiSpecificationOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiProtection_ApiSpecificationOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecificationOnCacheMiss != nil {
		{
			size, err := m.ApiSpecificationOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ApiProtection_ApiDiscoveryOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiProtection_ApiDiscoveryOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDiscoveryOnCacheMiss != nil {
		{
			size, err := m.ApiDiscoveryOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ApiProtection_DefaultSensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiProtection_DefaultSensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSensitiveDataPolicy != nil {
		{
			size, err := m.DefaultSensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ApiProtection_SensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiProtection_SensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensitiveDataPolicy != nil {
		{
			size, err := m.SensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *SecurityOptionsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityOptionsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityOptionsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiProtection != nil {
		{
			size, err := m.ApiProtection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.CommonSecurityControls != nil {
		{
			size, err := m.CommonSecurityControls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.WebAppFirewall != nil {
		{
			size, err := m.WebAppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.AuthOptions != nil {
		{
			size, err := m.AuthOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.GeoFiltering != nil {
		{
			size, err := m.GeoFiltering.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.IpFiltering != nil {
		{
			size, err := m.IpFiltering.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}

func (m *LoggingOptionsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoggingOptionsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoggingOptionsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OriginLogOptions != nil {
		{
			size, err := m.OriginLogOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ClientLogOptions != nil {
		{
			size, err := m.ClientLogOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}

func (m *CDNCacheRuleExpressionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNCacheRuleExpressionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNCacheRuleExpressionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CacheRuleExpression) > 0 {
		for iNdEx := len(m.CacheRuleExpression) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CacheRuleExpression[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ExpressionName) > 0 {
		i -= len(m.ExpressionName)
		copy(dAtA[i:], m.ExpressionName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExpressionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CacheOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CacheOperator != nil {
		{
			size := m.CacheOperator.Size()
			i -= size
			if _, err := m.CacheOperator.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CacheOperator_Equals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheOperator_Equals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Equals)
	copy(dAtA[i:], m.Equals)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Equals)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *CacheOperator_DoesNotEqual) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheOperator_DoesNotEqual) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DoesNotEqual)
	copy(dAtA[i:], m.DoesNotEqual)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.DoesNotEqual)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *CacheOperator_Contains) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheOperator_Contains) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Contains)
	copy(dAtA[i:], m.Contains)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Contains)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *CacheOperator_DoesNotContain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheOperator_DoesNotContain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DoesNotContain)
	copy(dAtA[i:], m.DoesNotContain)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.DoesNotContain)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *CacheOperator_Startswith) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheOperator_Startswith) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Startswith)
	copy(dAtA[i:], m.Startswith)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Startswith)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *CacheOperator_DoesNotStartWith) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheOperator_DoesNotStartWith) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DoesNotStartWith)
	copy(dAtA[i:], m.DoesNotStartWith)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.DoesNotStartWith)))
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}
func (m *CacheOperator_Endswith) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheOperator_Endswith) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Endswith)
	copy(dAtA[i:], m.Endswith)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Endswith)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *CacheOperator_DoesNotEndWith) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheOperator_DoesNotEndWith) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DoesNotEndWith)
	copy(dAtA[i:], m.DoesNotEndWith)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.DoesNotEndWith)))
	i--
	dAtA[i] = 0x4a
	return len(dAtA) - i, nil
}
func (m *CacheOperator_MatchRegex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheOperator_MatchRegex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.MatchRegex)
	copy(dAtA[i:], m.MatchRegex)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.MatchRegex)))
	i--
	dAtA[i] = 0x52
	return len(dAtA) - i, nil
}
func (m *CacheHeaderMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheHeaderMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheHeaderMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Operator != nil {
		{
			size, err := m.Operator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Name != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Name))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CDNPathMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNPathMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNPathMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Operator != nil {
		{
			size, err := m.Operator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}

func (m *CacheCookieMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheCookieMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheCookieMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Operator != nil {
		{
			size, err := m.Operator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CacheQueryParameterMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheQueryParameterMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheQueryParameterMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Operator != nil {
		{
			size, err := m.Operator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CDNCacheRuleExpression) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNCacheRuleExpression) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNCacheRuleExpression) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CookieMatcher) > 0 {
		for iNdEx := len(m.CookieMatcher) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CookieMatcher[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.QueryParameters) > 0 {
		for iNdEx := len(m.QueryParameters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueryParameters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.CacheHeaders) > 0 {
		for iNdEx := len(m.CacheHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CacheHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.PathMatch != nil {
		{
			size, err := m.PathMatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CacheTTLEnableProps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheTTLEnableProps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheTTLEnableProps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IgnoreResponseCookie {
		i--
		if m.IgnoreResponseCookie {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.CacheOverride {
		i--
		if m.CacheOverride {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.CacheTtl) > 0 {
		i -= len(m.CacheTtl)
		copy(dAtA[i:], m.CacheTtl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CacheTtl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CacheEligibleOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheEligibleOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheEligibleOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EligibleForCache != nil {
		{
			size := m.EligibleForCache.Size()
			i -= size
			if _, err := m.EligibleForCache.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CacheEligibleOptions_SchemeHostnameUri) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheEligibleOptions_SchemeHostnameUri) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchemeHostnameUri != nil {
		{
			size, err := m.SchemeHostnameUri.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CacheEligibleOptions_SchemeHostnameRequestUri) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheEligibleOptions_SchemeHostnameRequestUri) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchemeHostnameRequestUri != nil {
		{
			size, err := m.SchemeHostnameRequestUri.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CacheEligibleOptions_HostnameUri) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheEligibleOptions_HostnameUri) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HostnameUri != nil {
		{
			size, err := m.HostnameUri.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CacheEligibleOptions_SchemeHostnameUriQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheEligibleOptions_SchemeHostnameUriQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchemeHostnameUriQuery != nil {
		{
			size, err := m.SchemeHostnameUriQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CacheEligibleOptions_SchemeProxyHostUri) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheEligibleOptions_SchemeProxyHostUri) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchemeProxyHostUri != nil {
		{
			size, err := m.SchemeProxyHostUri.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CacheEligibleOptions_SchemeProxyHostRequestUri) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheEligibleOptions_SchemeProxyHostRequestUri) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchemeProxyHostRequestUri != nil {
		{
			size, err := m.SchemeProxyHostRequestUri.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CDNCacheRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNCacheRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNCacheRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CacheActions != nil {
		{
			size := m.CacheActions.Size()
			i -= size
			if _, err := m.CacheActions.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.RuleExpressionList) > 0 {
		for iNdEx := len(m.RuleExpressionList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RuleExpressionList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RuleName) > 0 {
		i -= len(m.RuleName)
		copy(dAtA[i:], m.RuleName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RuleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CDNCacheRule_CacheBypass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNCacheRule_CacheBypass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CacheBypass != nil {
		{
			size, err := m.CacheBypass.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CDNCacheRule_EligibleForCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNCacheRule_EligibleForCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EligibleForCache != nil {
		{
			size, err := m.EligibleForCache.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DefaultCacheTTLProps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultCacheTTLProps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultCacheTTLProps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CacheTtl) > 0 {
		i -= len(m.CacheTtl)
		copy(dAtA[i:], m.CacheTtl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CacheTtl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DefaultCacheAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultCacheAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultCacheAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CacheActions != nil {
		{
			size := m.CacheActions.Size()
			i -= size
			if _, err := m.CacheActions.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DefaultCacheAction_EligibleForCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultCacheAction_EligibleForCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EligibleForCache != nil {
		{
			size, err := m.EligibleForCache.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DefaultCacheAction_CacheTtlDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultCacheAction_CacheTtlDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.CacheTtlDefault)
	copy(dAtA[i:], m.CacheTtlDefault)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.CacheTtlDefault)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *DefaultCacheAction_CacheTtlOverride) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultCacheAction_CacheTtlOverride) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.CacheTtlOverride)
	copy(dAtA[i:], m.CacheTtlOverride)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.CacheTtlOverride)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *DefaultCacheAction_CacheDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultCacheAction_CacheDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CacheDisabled != nil {
		{
			size, err := m.CacheDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CacheOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CacheRules) > 0 {
		for iNdEx := len(m.CacheRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CacheRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DefaultCacheAction != nil {
		{
			size, err := m.DefaultCacheAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CacheTTLOptionsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheTTLOptionsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheTTLOptionsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TtlOptions != nil {
		{
			size := m.TtlOptions.Size()
			i -= size
			if _, err := m.TtlOptions.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CacheTTLOptionsType_CacheTtlDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheTTLOptionsType_CacheTtlDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.CacheTtlDefault)
	copy(dAtA[i:], m.CacheTtlDefault)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.CacheTtlDefault)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *CacheTTLOptionsType_CacheTtlOverride) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheTTLOptionsType_CacheTtlOverride) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.CacheTtlOverride)
	copy(dAtA[i:], m.CacheTtlOverride)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.CacheTtlOverride)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *CacheTTLOptionsType_CacheDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheTTLOptionsType_CacheDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CacheDisabled != nil {
		{
			size, err := m.CacheDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AdvancedOptionsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvancedOptionsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvancedOptionsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CacheOptions != nil {
		{
			size, err := m.CacheOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.CacheTtlOptions != nil {
		{
			size, err := m.CacheTtlOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.LoggingOptions != nil {
		{
			size, err := m.LoggingOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.SecurityOptions != nil {
		{
			size, err := m.SecurityOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.HeaderOptions != nil {
		{
			size, err := m.HeaderOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}

func (m *CDNTLSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNTLSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNTLSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CDNTLSConfig_Tls_12Plus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNTLSConfig_Tls_12Plus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tls_12Plus != nil {
		{
			size, err := m.Tls_12Plus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CDNTLSConfig_Tls_11Plus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNTLSConfig_Tls_11Plus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tls_11Plus != nil {
		{
			size, err := m.Tls_11Plus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CDNHTTPSAutoCertsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNHTTPSAutoCertsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNHTTPSAutoCertsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TlsConfig != nil {
		{
			size, err := m.TlsConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AddHsts {
		i--
		if m.AddHsts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.HttpRedirect {
		i--
		if m.HttpRedirect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CDNDownstreamTlsParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNDownstreamTlsParamsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNDownstreamTlsParamsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TlsCertificates) > 0 {
		for iNdEx := len(m.TlsCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TlsCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TlsConfig != nil {
		{
			size, err := m.TlsConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CDNHTTPSCustomCertsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNHTTPSCustomCertsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNHTTPSCustomCertsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TlsParameters != nil {
		{
			size, err := m.TlsParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AddHsts {
		i--
		if m.AddHsts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.HttpRedirect {
		i--
		if m.HttpRedirect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CertState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CertState))
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ServiceDomains) > 0 {
		for iNdEx := len(m.ServiceDomains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceDomains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3f
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.AutoCertInfo != nil {
		{
			size, err := m.AutoCertInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x92
	}
	if m.AutoCertState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertState))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xe0
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd8
	}
	if len(m.DnsInfo) > 0 {
		for iNdEx := len(m.DnsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.BlockedClients) > 0 {
		for iNdEx := len(m.BlockedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.TrustedClients) > 0 {
		for iNdEx := len(m.TrustedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.RateLimitChoice != nil {
		{
			size := m.RateLimitChoice.Size()
			i -= size
			if _, err := m.RateLimitChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaliciousUserDetectionChoice != nil {
		{
			size := m.MaliciousUserDetectionChoice.Size()
			i -= size
			if _, err := m.MaliciousUserDetectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UserIdChoice != nil {
		{
			size := m.UserIdChoice.Size()
			i -= size
			if _, err := m.UserIdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ThreatMeshChoice != nil {
		{
			size := m.ThreatMeshChoice.Size()
			i -= size
			if _, err := m.ThreatMeshChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IpReputationChoice != nil {
		{
			size := m.IpReputationChoice.Size()
			i -= size
			if _, err := m.IpReputationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClientSideDefenseChoice != nil {
		{
			size := m.ClientSideDefenseChoice.Size()
			i -= size
			if _, err := m.ClientSideDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SlowDdosMitigationChoice != nil {
		{
			size := m.SlowDdosMitigationChoice.Size()
			i -= size
			if _, err := m.SlowDdosMitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for iNdEx := len(m.DdosMitigationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DdosMitigationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xea
		}
	}
	if m.L7DdosAutoMitigationAction != nil {
		{
			size := m.L7DdosAutoMitigationAction.Size()
			i -= size
			if _, err := m.L7DdosAutoMitigationAction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SensitiveDataPolicyChoice != nil {
		{
			size := m.SensitiveDataPolicyChoice.Size()
			i -= size
			if _, err := m.SensitiveDataPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDiscoveryChoice != nil {
		{
			size := m.ApiDiscoveryChoice.Size()
			i -= size
			if _, err := m.ApiDiscoveryChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.JwtValidation != nil {
		{
			size, err := m.JwtValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if m.ApiProtectionRules != nil {
		{
			size, err := m.ApiProtectionRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BotDefenseChoice != nil {
		{
			size := m.BotDefenseChoice.Size()
			i -= size
			if _, err := m.BotDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for iNdEx := len(m.ProtectedCookies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProtectedCookies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.GraphqlRules) > 0 {
		for iNdEx := len(m.GraphqlRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GraphqlRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.CsrfPolicy != nil {
		{
			size, err := m.CsrfPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if len(m.DataGuardRules) > 0 {
		for iNdEx := len(m.DataGuardRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataGuardRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.WafExclusionRules) > 0 {
		for iNdEx := len(m.WafExclusionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafExclusionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.CacheRules) > 0 {
		for iNdEx := len(m.CacheRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CacheRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
	}
	if m.DefaultCacheAction != nil {
		{
			size, err := m.DefaultCacheAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.OtherSettings != nil {
		{
			size, err := m.OtherSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OriginPool != nil {
		{
			size, err := m.OriginPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.MoreOption != nil {
		{
			size, err := m.MoreOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Http) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Http != nil {
		{
			size, err := m.Http.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HttpsAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsAutoCert != nil {
		{
			size, err := m.HttpsAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Https) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Https != nil {
		{
			size, err := m.Https.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AppFirewallOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AppFirewallOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewallOnCacheMiss != nil {
		{
			size, err := m.AppFirewallOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableBotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableBotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableBotDefense != nil {
		{
			size, err := m.DisableBotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefense != nil {
		{
			size, err := m.BotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BotDefenseAdvanced) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BotDefenseAdvanced) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefenseAdvanced != nil {
		{
			size, err := m.BotDefenseAdvanced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ApiSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ApiSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecification != nil {
		{
			size, err := m.ApiSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ApiSpecificationOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ApiSpecificationOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecificationOnCacheMiss != nil {
		{
			size, err := m.ApiSpecificationOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDiscovery != nil {
		{
			size, err := m.DisableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableApiDiscovery != nil {
		{
			size, err := m.EnableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ApiDiscoveryOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ApiDiscoveryOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDiscoveryOnCacheMiss != nil {
		{
			size, err := m.ApiDiscoveryOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultSensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultSensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSensitiveDataPolicy != nil {
		{
			size, err := m.DefaultSensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensitiveDataPolicy != nil {
		{
			size, err := m.SensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_L7DdosActionDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_L7DdosActionDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionDefault != nil {
		{
			size, err := m.L7DdosActionDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_L7DdosActionBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_L7DdosActionBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionBlock != nil {
		{
			size, err := m.L7DdosActionBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_L7DdosActionJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_L7DdosActionJsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionJsChallenge != nil {
		{
			size, err := m.L7DdosActionJsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_L7DdosActionNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_L7DdosActionNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionNone != nil {
		{
			size, err := m.L7DdosActionNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SystemDefaultTimeouts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SystemDefaultTimeouts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemDefaultTimeouts != nil {
		{
			size, err := m.SystemDefaultTimeouts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SlowDdosMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SlowDdosMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlowDdosMitigation != nil {
		{
			size, err := m.SlowDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableClientSideDefense != nil {
		{
			size, err := m.DisableClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientSideDefense != nil {
		{
			size, err := m.ClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableIpReputation != nil {
		{
			size, err := m.DisableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableIpReputation != nil {
		{
			size, err := m.EnableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_IpReputationOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_IpReputationOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpReputationOnCacheMiss != nil {
		{
			size, err := m.IpReputationOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableThreatMesh != nil {
		{
			size, err := m.DisableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableThreatMesh != nil {
		{
			size, err := m.EnableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_UserIdClientIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UserIdClientIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdClientIp != nil {
		{
			size, err := m.UserIdClientIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_UserIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UserIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdentification != nil {
		{
			size, err := m.UserIdentification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMaliciousUserDetection != nil {
		{
			size, err := m.DisableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableMaliciousUserDetection != nil {
		{
			size, err := m.EnableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_MaliciousUserDetectionOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_MaliciousUserDetectionOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaliciousUserDetectionOnCacheMiss != nil {
		{
			size, err := m.MaliciousUserDetectionOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableChallenge != nil {
		{
			size, err := m.EnableChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ChallengeOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ChallengeOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChallengeOnCacheMiss != nil {
		{
			size, err := m.ChallengeOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyBasedChallenge != nil {
		{
			size, err := m.PolicyBasedChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableRateLimit != nil {
		{
			size, err := m.DisableRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ApiRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ApiRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiRateLimit != nil {
		{
			size, err := m.ApiRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *IpFilteringOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpFilteringOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IpFilteringOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IpFilteringType != nil {
		{
			size := m.IpFilteringType.Size()
			i -= size
			if _, err := m.IpFilteringType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IpFilteringOptions_AllowList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IpFilteringOptions_AllowList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowList != nil {
		{
			size, err := m.AllowList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *IpFilteringOptions_BlockList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IpFilteringOptions_BlockList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockList != nil {
		{
			size, err := m.BlockList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GeoFilteringOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoFilteringOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoFilteringOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GeoFilteringType != nil {
		{
			size := m.GeoFilteringType.Size()
			i -= size
			if _, err := m.GeoFilteringType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GeoFilteringOptions_AllowList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoFilteringOptions_AllowList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowList != nil {
		{
			size, err := m.AllowList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GeoFilteringOptions_BlockList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoFilteringOptions_BlockList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockList != nil {
		{
			size, err := m.BlockList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *LogHeaderOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogHeaderOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogHeaderOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HeaderList) > 0 {
		for iNdEx := len(m.HeaderList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.HeaderList[iNdEx])
			copy(dAtA[i:], m.HeaderList[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.HeaderList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CDNCustomAuthentication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNCustomAuthentication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNCustomAuthentication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomAuthConfig) > 0 {
		i -= len(m.CustomAuthConfig)
		copy(dAtA[i:], m.CustomAuthConfig)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomAuthConfig)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthenticationOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticationOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthOptions != nil {
		{
			size := m.AuthOptions.Size()
			i -= size
			if _, err := m.AuthOptions.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuthenticationOptions_DisableAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticationOptions_DisableAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableAuth != nil {
		{
			size, err := m.DisableAuth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AuthenticationOptions_Jwt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticationOptions_Jwt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Jwt != nil {
		{
			size, err := m.Jwt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AuthenticationOptions_Custom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticationOptions_Custom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Custom != nil {
		{
			size, err := m.Custom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CDNOriginServerType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNOriginServerType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNOriginServerType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x20
	}
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CDNOriginServerType_PublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNOriginServerType_PublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PublicIp != nil {
		{
			size, err := m.PublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CDNOriginServerType_PublicName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNOriginServerType_PublicName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PublicName != nil {
		{
			size, err := m.PublicName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CdnOriginPoolType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CdnOriginPoolType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdnOriginPoolType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MoreOriginOptions != nil {
		{
			size, err := m.MoreOriginOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.OriginRequestTimeout) > 0 {
		i -= len(m.OriginRequestTimeout)
		copy(dAtA[i:], m.OriginRequestTimeout)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OriginRequestTimeout)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FollowOriginRedirect {
		i--
		if m.FollowOriginRedirect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.OriginServers) > 0 {
		for iNdEx := len(m.OriginServers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginServers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.TlsChoice != nil {
		{
			size := m.TlsChoice.Size()
			i -= size
			if _, err := m.TlsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PublicName != nil {
		{
			size, err := m.PublicName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CdnOriginPoolType_NoTls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdnOriginPoolType_NoTls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoTls != nil {
		{
			size, err := m.NoTls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CdnOriginPoolType_UseTls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdnOriginPoolType_UseTls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseTls != nil {
		{
			size, err := m.UseTls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *OriginAdvancedConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginAdvancedConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginAdvancedConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WebsocketProxy {
		i--
		if m.WebsocketProxy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.DisableByteRangeRequest {
		i--
		if m.DisableByteRangeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.BlockedClients) > 0 {
		for iNdEx := len(m.BlockedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.TrustedClients) > 0 {
		for iNdEx := len(m.TrustedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.RateLimitChoice != nil {
		{
			size := m.RateLimitChoice.Size()
			i -= size
			if _, err := m.RateLimitChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaliciousUserDetectionChoice != nil {
		{
			size := m.MaliciousUserDetectionChoice.Size()
			i -= size
			if _, err := m.MaliciousUserDetectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UserIdChoice != nil {
		{
			size := m.UserIdChoice.Size()
			i -= size
			if _, err := m.UserIdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ThreatMeshChoice != nil {
		{
			size := m.ThreatMeshChoice.Size()
			i -= size
			if _, err := m.ThreatMeshChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IpReputationChoice != nil {
		{
			size := m.IpReputationChoice.Size()
			i -= size
			if _, err := m.IpReputationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClientSideDefenseChoice != nil {
		{
			size := m.ClientSideDefenseChoice.Size()
			i -= size
			if _, err := m.ClientSideDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SlowDdosMitigationChoice != nil {
		{
			size := m.SlowDdosMitigationChoice.Size()
			i -= size
			if _, err := m.SlowDdosMitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for iNdEx := len(m.DdosMitigationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DdosMitigationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xea
		}
	}
	if m.L7DdosAutoMitigationAction != nil {
		{
			size := m.L7DdosAutoMitigationAction.Size()
			i -= size
			if _, err := m.L7DdosAutoMitigationAction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SensitiveDataPolicyChoice != nil {
		{
			size := m.SensitiveDataPolicyChoice.Size()
			i -= size
			if _, err := m.SensitiveDataPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDiscoveryChoice != nil {
		{
			size := m.ApiDiscoveryChoice.Size()
			i -= size
			if _, err := m.ApiDiscoveryChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.JwtValidation != nil {
		{
			size, err := m.JwtValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if m.ApiProtectionRules != nil {
		{
			size, err := m.ApiProtectionRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BotDefenseChoice != nil {
		{
			size := m.BotDefenseChoice.Size()
			i -= size
			if _, err := m.BotDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for iNdEx := len(m.ProtectedCookies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProtectedCookies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.GraphqlRules) > 0 {
		for iNdEx := len(m.GraphqlRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GraphqlRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.CsrfPolicy != nil {
		{
			size, err := m.CsrfPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if len(m.DataGuardRules) > 0 {
		for iNdEx := len(m.DataGuardRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataGuardRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.WafExclusionRules) > 0 {
		for iNdEx := len(m.WafExclusionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafExclusionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.CacheRules) > 0 {
		for iNdEx := len(m.CacheRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CacheRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
	}
	if m.DefaultCacheAction != nil {
		{
			size, err := m.DefaultCacheAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.OtherSettings != nil {
		{
			size, err := m.OtherSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OriginPool != nil {
		{
			size, err := m.OriginPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.MoreOption != nil {
		{
			size, err := m.MoreOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Http) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Http != nil {
		{
			size, err := m.Http.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HttpsAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsAutoCert != nil {
		{
			size, err := m.HttpsAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Https) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Https != nil {
		{
			size, err := m.Https.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AppFirewallOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AppFirewallOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewallOnCacheMiss != nil {
		{
			size, err := m.AppFirewallOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableBotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableBotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableBotDefense != nil {
		{
			size, err := m.DisableBotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefense != nil {
		{
			size, err := m.BotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BotDefenseAdvanced) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BotDefenseAdvanced) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefenseAdvanced != nil {
		{
			size, err := m.BotDefenseAdvanced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ApiSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ApiSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecification != nil {
		{
			size, err := m.ApiSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ApiSpecificationOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ApiSpecificationOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecificationOnCacheMiss != nil {
		{
			size, err := m.ApiSpecificationOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDiscovery != nil {
		{
			size, err := m.DisableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableApiDiscovery != nil {
		{
			size, err := m.EnableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ApiDiscoveryOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ApiDiscoveryOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDiscoveryOnCacheMiss != nil {
		{
			size, err := m.ApiDiscoveryOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultSensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultSensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSensitiveDataPolicy != nil {
		{
			size, err := m.DefaultSensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensitiveDataPolicy != nil {
		{
			size, err := m.SensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_L7DdosActionDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_L7DdosActionDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionDefault != nil {
		{
			size, err := m.L7DdosActionDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_L7DdosActionBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_L7DdosActionBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionBlock != nil {
		{
			size, err := m.L7DdosActionBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_L7DdosActionJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_L7DdosActionJsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionJsChallenge != nil {
		{
			size, err := m.L7DdosActionJsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_L7DdosActionNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_L7DdosActionNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionNone != nil {
		{
			size, err := m.L7DdosActionNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SystemDefaultTimeouts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SystemDefaultTimeouts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemDefaultTimeouts != nil {
		{
			size, err := m.SystemDefaultTimeouts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SlowDdosMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SlowDdosMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlowDdosMitigation != nil {
		{
			size, err := m.SlowDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableClientSideDefense != nil {
		{
			size, err := m.DisableClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientSideDefense != nil {
		{
			size, err := m.ClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableIpReputation != nil {
		{
			size, err := m.DisableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableIpReputation != nil {
		{
			size, err := m.EnableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_IpReputationOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_IpReputationOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpReputationOnCacheMiss != nil {
		{
			size, err := m.IpReputationOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableThreatMesh != nil {
		{
			size, err := m.DisableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableThreatMesh != nil {
		{
			size, err := m.EnableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_UserIdClientIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_UserIdClientIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdClientIp != nil {
		{
			size, err := m.UserIdClientIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_UserIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_UserIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdentification != nil {
		{
			size, err := m.UserIdentification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMaliciousUserDetection != nil {
		{
			size, err := m.DisableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableMaliciousUserDetection != nil {
		{
			size, err := m.EnableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_MaliciousUserDetectionOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_MaliciousUserDetectionOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaliciousUserDetectionOnCacheMiss != nil {
		{
			size, err := m.MaliciousUserDetectionOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableChallenge != nil {
		{
			size, err := m.EnableChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ChallengeOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ChallengeOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChallengeOnCacheMiss != nil {
		{
			size, err := m.ChallengeOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyBasedChallenge != nil {
		{
			size, err := m.PolicyBasedChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableRateLimit != nil {
		{
			size, err := m.DisableRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ApiRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ApiRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiRateLimit != nil {
		{
			size, err := m.ApiRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.BlockedClients) > 0 {
		for iNdEx := len(m.BlockedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.TrustedClients) > 0 {
		for iNdEx := len(m.TrustedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.RateLimitChoice != nil {
		{
			size := m.RateLimitChoice.Size()
			i -= size
			if _, err := m.RateLimitChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaliciousUserDetectionChoice != nil {
		{
			size := m.MaliciousUserDetectionChoice.Size()
			i -= size
			if _, err := m.MaliciousUserDetectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UserIdChoice != nil {
		{
			size := m.UserIdChoice.Size()
			i -= size
			if _, err := m.UserIdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ThreatMeshChoice != nil {
		{
			size := m.ThreatMeshChoice.Size()
			i -= size
			if _, err := m.ThreatMeshChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IpReputationChoice != nil {
		{
			size := m.IpReputationChoice.Size()
			i -= size
			if _, err := m.IpReputationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClientSideDefenseChoice != nil {
		{
			size := m.ClientSideDefenseChoice.Size()
			i -= size
			if _, err := m.ClientSideDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SlowDdosMitigationChoice != nil {
		{
			size := m.SlowDdosMitigationChoice.Size()
			i -= size
			if _, err := m.SlowDdosMitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for iNdEx := len(m.DdosMitigationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DdosMitigationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xea
		}
	}
	if m.L7DdosAutoMitigationAction != nil {
		{
			size := m.L7DdosAutoMitigationAction.Size()
			i -= size
			if _, err := m.L7DdosAutoMitigationAction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SensitiveDataPolicyChoice != nil {
		{
			size := m.SensitiveDataPolicyChoice.Size()
			i -= size
			if _, err := m.SensitiveDataPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDiscoveryChoice != nil {
		{
			size := m.ApiDiscoveryChoice.Size()
			i -= size
			if _, err := m.ApiDiscoveryChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.JwtValidation != nil {
		{
			size, err := m.JwtValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if m.ApiProtectionRules != nil {
		{
			size, err := m.ApiProtectionRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BotDefenseChoice != nil {
		{
			size := m.BotDefenseChoice.Size()
			i -= size
			if _, err := m.BotDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for iNdEx := len(m.ProtectedCookies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProtectedCookies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.GraphqlRules) > 0 {
		for iNdEx := len(m.GraphqlRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GraphqlRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.CsrfPolicy != nil {
		{
			size, err := m.CsrfPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if len(m.DataGuardRules) > 0 {
		for iNdEx := len(m.DataGuardRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataGuardRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.WafExclusionRules) > 0 {
		for iNdEx := len(m.WafExclusionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafExclusionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.CacheRules) > 0 {
		for iNdEx := len(m.CacheRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CacheRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
	}
	if m.DefaultCacheAction != nil {
		{
			size, err := m.DefaultCacheAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.OtherSettings != nil {
		{
			size, err := m.OtherSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OriginPool != nil {
		{
			size, err := m.OriginPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.MoreOption != nil {
		{
			size, err := m.MoreOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Http) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Http != nil {
		{
			size, err := m.Http.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HttpsAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsAutoCert != nil {
		{
			size, err := m.HttpsAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Https) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Https != nil {
		{
			size, err := m.Https.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AppFirewallOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AppFirewallOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewallOnCacheMiss != nil {
		{
			size, err := m.AppFirewallOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableBotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableBotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableBotDefense != nil {
		{
			size, err := m.DisableBotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefense != nil {
		{
			size, err := m.BotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BotDefenseAdvanced) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BotDefenseAdvanced) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefenseAdvanced != nil {
		{
			size, err := m.BotDefenseAdvanced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ApiSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ApiSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecification != nil {
		{
			size, err := m.ApiSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ApiSpecificationOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ApiSpecificationOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecificationOnCacheMiss != nil {
		{
			size, err := m.ApiSpecificationOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDiscovery != nil {
		{
			size, err := m.DisableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableApiDiscovery != nil {
		{
			size, err := m.EnableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ApiDiscoveryOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ApiDiscoveryOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDiscoveryOnCacheMiss != nil {
		{
			size, err := m.ApiDiscoveryOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultSensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultSensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSensitiveDataPolicy != nil {
		{
			size, err := m.DefaultSensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensitiveDataPolicy != nil {
		{
			size, err := m.SensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_L7DdosActionDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_L7DdosActionDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionDefault != nil {
		{
			size, err := m.L7DdosActionDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_L7DdosActionBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_L7DdosActionBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionBlock != nil {
		{
			size, err := m.L7DdosActionBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_L7DdosActionJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_L7DdosActionJsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionJsChallenge != nil {
		{
			size, err := m.L7DdosActionJsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_L7DdosActionNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_L7DdosActionNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionNone != nil {
		{
			size, err := m.L7DdosActionNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SystemDefaultTimeouts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SystemDefaultTimeouts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemDefaultTimeouts != nil {
		{
			size, err := m.SystemDefaultTimeouts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SlowDdosMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SlowDdosMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlowDdosMitigation != nil {
		{
			size, err := m.SlowDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableClientSideDefense != nil {
		{
			size, err := m.DisableClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientSideDefense != nil {
		{
			size, err := m.ClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableIpReputation != nil {
		{
			size, err := m.DisableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableIpReputation != nil {
		{
			size, err := m.EnableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_IpReputationOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_IpReputationOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpReputationOnCacheMiss != nil {
		{
			size, err := m.IpReputationOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableThreatMesh != nil {
		{
			size, err := m.DisableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableThreatMesh != nil {
		{
			size, err := m.EnableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_UserIdClientIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_UserIdClientIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdClientIp != nil {
		{
			size, err := m.UserIdClientIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_UserIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_UserIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdentification != nil {
		{
			size, err := m.UserIdentification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMaliciousUserDetection != nil {
		{
			size, err := m.DisableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableMaliciousUserDetection != nil {
		{
			size, err := m.EnableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_MaliciousUserDetectionOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_MaliciousUserDetectionOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaliciousUserDetectionOnCacheMiss != nil {
		{
			size, err := m.MaliciousUserDetectionOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableChallenge != nil {
		{
			size, err := m.EnableChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ChallengeOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ChallengeOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChallengeOnCacheMiss != nil {
		{
			size, err := m.ChallengeOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyBasedChallenge != nil {
		{
			size, err := m.PolicyBasedChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableRateLimit != nil {
		{
			size, err := m.DisableRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ApiRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ApiRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiRateLimit != nil {
		{
			size, err := m.ApiRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CertState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CertState))
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ServiceDomains) > 0 {
		for iNdEx := len(m.ServiceDomains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceDomains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3f
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.AutoCertInfo != nil {
		{
			size, err := m.AutoCertInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x92
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd8
	}
	if len(m.DnsInfo) > 0 {
		for iNdEx := len(m.DnsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.BlockedClients) > 0 {
		for iNdEx := len(m.BlockedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.TrustedClients) > 0 {
		for iNdEx := len(m.TrustedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.RateLimitChoice != nil {
		{
			size := m.RateLimitChoice.Size()
			i -= size
			if _, err := m.RateLimitChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaliciousUserDetectionChoice != nil {
		{
			size := m.MaliciousUserDetectionChoice.Size()
			i -= size
			if _, err := m.MaliciousUserDetectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UserIdChoice != nil {
		{
			size := m.UserIdChoice.Size()
			i -= size
			if _, err := m.UserIdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ThreatMeshChoice != nil {
		{
			size := m.ThreatMeshChoice.Size()
			i -= size
			if _, err := m.ThreatMeshChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IpReputationChoice != nil {
		{
			size := m.IpReputationChoice.Size()
			i -= size
			if _, err := m.IpReputationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClientSideDefenseChoice != nil {
		{
			size := m.ClientSideDefenseChoice.Size()
			i -= size
			if _, err := m.ClientSideDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SlowDdosMitigationChoice != nil {
		{
			size := m.SlowDdosMitigationChoice.Size()
			i -= size
			if _, err := m.SlowDdosMitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for iNdEx := len(m.DdosMitigationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DdosMitigationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xea
		}
	}
	if m.L7DdosAutoMitigationAction != nil {
		{
			size := m.L7DdosAutoMitigationAction.Size()
			i -= size
			if _, err := m.L7DdosAutoMitigationAction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SensitiveDataPolicyChoice != nil {
		{
			size := m.SensitiveDataPolicyChoice.Size()
			i -= size
			if _, err := m.SensitiveDataPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDiscoveryChoice != nil {
		{
			size := m.ApiDiscoveryChoice.Size()
			i -= size
			if _, err := m.ApiDiscoveryChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.JwtValidation != nil {
		{
			size, err := m.JwtValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if m.ApiProtectionRules != nil {
		{
			size, err := m.ApiProtectionRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BotDefenseChoice != nil {
		{
			size := m.BotDefenseChoice.Size()
			i -= size
			if _, err := m.BotDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for iNdEx := len(m.ProtectedCookies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProtectedCookies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.GraphqlRules) > 0 {
		for iNdEx := len(m.GraphqlRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GraphqlRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.CsrfPolicy != nil {
		{
			size, err := m.CsrfPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if len(m.DataGuardRules) > 0 {
		for iNdEx := len(m.DataGuardRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataGuardRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.WafExclusionRules) > 0 {
		for iNdEx := len(m.WafExclusionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafExclusionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.CacheRules) > 0 {
		for iNdEx := len(m.CacheRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CacheRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
	}
	if m.DefaultCacheAction != nil {
		{
			size, err := m.DefaultCacheAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.OtherSettings != nil {
		{
			size, err := m.OtherSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OriginPool != nil {
		{
			size, err := m.OriginPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.MoreOption != nil {
		{
			size, err := m.MoreOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Http) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Http != nil {
		{
			size, err := m.Http.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HttpsAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsAutoCert != nil {
		{
			size, err := m.HttpsAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Https) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Https != nil {
		{
			size, err := m.Https.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AppFirewallOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AppFirewallOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewallOnCacheMiss != nil {
		{
			size, err := m.AppFirewallOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableBotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableBotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableBotDefense != nil {
		{
			size, err := m.DisableBotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefense != nil {
		{
			size, err := m.BotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BotDefenseAdvanced) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BotDefenseAdvanced) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefenseAdvanced != nil {
		{
			size, err := m.BotDefenseAdvanced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ApiSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ApiSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecification != nil {
		{
			size, err := m.ApiSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ApiSpecificationOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ApiSpecificationOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecificationOnCacheMiss != nil {
		{
			size, err := m.ApiSpecificationOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDiscovery != nil {
		{
			size, err := m.DisableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableApiDiscovery != nil {
		{
			size, err := m.EnableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ApiDiscoveryOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ApiDiscoveryOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDiscoveryOnCacheMiss != nil {
		{
			size, err := m.ApiDiscoveryOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultSensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultSensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSensitiveDataPolicy != nil {
		{
			size, err := m.DefaultSensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensitiveDataPolicy != nil {
		{
			size, err := m.SensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_L7DdosActionDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_L7DdosActionDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionDefault != nil {
		{
			size, err := m.L7DdosActionDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_L7DdosActionBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_L7DdosActionBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionBlock != nil {
		{
			size, err := m.L7DdosActionBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_L7DdosActionJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_L7DdosActionJsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionJsChallenge != nil {
		{
			size, err := m.L7DdosActionJsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_L7DdosActionNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_L7DdosActionNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionNone != nil {
		{
			size, err := m.L7DdosActionNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SystemDefaultTimeouts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SystemDefaultTimeouts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemDefaultTimeouts != nil {
		{
			size, err := m.SystemDefaultTimeouts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SlowDdosMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SlowDdosMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlowDdosMitigation != nil {
		{
			size, err := m.SlowDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableClientSideDefense != nil {
		{
			size, err := m.DisableClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientSideDefense != nil {
		{
			size, err := m.ClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableIpReputation != nil {
		{
			size, err := m.DisableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableIpReputation != nil {
		{
			size, err := m.EnableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_IpReputationOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_IpReputationOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpReputationOnCacheMiss != nil {
		{
			size, err := m.IpReputationOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableThreatMesh != nil {
		{
			size, err := m.DisableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableThreatMesh != nil {
		{
			size, err := m.EnableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_UserIdClientIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UserIdClientIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdClientIp != nil {
		{
			size, err := m.UserIdClientIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_UserIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UserIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdentification != nil {
		{
			size, err := m.UserIdentification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMaliciousUserDetection != nil {
		{
			size, err := m.DisableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableMaliciousUserDetection != nil {
		{
			size, err := m.EnableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_MaliciousUserDetectionOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_MaliciousUserDetectionOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaliciousUserDetectionOnCacheMiss != nil {
		{
			size, err := m.MaliciousUserDetectionOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableChallenge != nil {
		{
			size, err := m.EnableChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ChallengeOnCacheMiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ChallengeOnCacheMiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChallengeOnCacheMiss != nil {
		{
			size, err := m.ChallengeOnCacheMiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyBasedChallenge != nil {
		{
			size, err := m.PolicyBasedChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableRateLimit != nil {
		{
			size, err := m.DisableRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ApiRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ApiRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiRateLimit != nil {
		{
			size, err := m.ApiRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *LilacCDNMetricsFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LilacCDNMetricsFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LilacCDNMetricsFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Operator != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Operator))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Tag != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Tag))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LilacCDNMetricsResponseGroupBy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LilacCDNMetricsResponseGroupBy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LilacCDNMetricsResponseGroupBy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Name))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LilacCDNMetricsResponseValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LilacCDNMetricsResponseValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LilacCDNMetricsResponseValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LilacCDNMetricsResponseSeries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LilacCDNMetricsResponseSeries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LilacCDNMetricsResponseSeries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Value[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GroupBy) > 0 {
		for iNdEx := len(m.GroupBy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupBy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LilacCDNMetricsResponseData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LilacCDNMetricsResponseData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LilacCDNMetricsResponseData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Series) > 0 {
		for iNdEx := len(m.Series) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Series[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Unit != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Unit))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProxyTypeHttpsAutoCerts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpRedirect {
		n += 2
	}
	if m.AddHsts {
		n += 2
	}
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	return n
}

func (m *ProxyTypeHttpsAutoCerts_DefaultHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_ServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttpsAutoCerts_AppendServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttpsAutoCerts_PassThrough) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HeaderControlType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *WebApplicationFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DataGuardRules) > 0 {
		for _, e := range m.DataGuardRules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CsrfPolicy != nil {
		l = m.CsrfPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.GraphqlRules) > 0 {
		for _, e := range m.GraphqlRules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for _, e := range m.ProtectedCookies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *WebApplicationFirewall_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WebApplicationFirewall_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WebApplicationFirewall_AppFirewallOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewallOnCacheMiss != nil {
		l = m.AppFirewallOnCacheMiss.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BotProtection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefenseChoice != nil {
		n += m.BotDefenseChoice.Size()
	}
	return n
}

func (m *BotProtection_DisableBotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableBotDefense != nil {
		l = m.DisableBotDefense.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BotProtection_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefense != nil {
		l = m.BotDefense.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BotProtection_BotDefenseAdvanced) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefenseAdvanced != nil {
		l = m.BotDefenseAdvanced.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DoSProtection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosAutoMitigationAction != nil {
		n += m.L7DdosAutoMitigationAction.Size()
	}
	if len(m.DdosMitigationRules) > 0 {
		for _, e := range m.DdosMitigationRules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.SlowDdosMitigationChoice != nil {
		n += m.SlowDdosMitigationChoice.Size()
	}
	return n
}

func (m *DoSProtection_L7DdosActionDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionDefault != nil {
		l = m.L7DdosActionDefault.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DoSProtection_L7DdosActionBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionBlock != nil {
		l = m.L7DdosActionBlock.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DoSProtection_L7DdosActionJsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionJsChallenge != nil {
		l = m.L7DdosActionJsChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DoSProtection_L7DdosActionNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionNone != nil {
		l = m.L7DdosActionNone.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DoSProtection_SystemDefaultTimeouts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemDefaultTimeouts != nil {
		l = m.SystemDefaultTimeouts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DoSProtection_SlowDdosMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlowDdosMitigation != nil {
		l = m.SlowDdosMitigation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OtherSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddLocation {
		n += 2
	}
	if m.LoggingOptions != nil {
		l = m.LoggingOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HeaderOptions != nil {
		l = m.HeaderOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.IpFiltering != nil {
		l = m.IpFiltering.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.GeoFiltering != nil {
		l = m.GeoFiltering.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSideDefenseChoice != nil {
		n += m.ClientSideDefenseChoice.Size()
	}
	return n
}

func (m *ClientSideDefense_DisableClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableClientSideDefense != nil {
		l = m.DisableClientSideDefense.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ClientSideDefense_ClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSideDefense != nil {
		l = m.ClientSideDefense.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.IpReputationChoice != nil {
		n += m.IpReputationChoice.Size()
	}
	if m.UserIdChoice != nil {
		n += m.UserIdChoice.Size()
	}
	if m.MaliciousUserDetectionChoice != nil {
		n += m.MaliciousUserDetectionChoice.Size()
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ThreatMeshChoice != nil {
		n += m.ThreatMeshChoice.Size()
	}
	return n
}

func (m *CommonSecurityControls_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_DisableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableIpReputation != nil {
		l = m.DisableIpReputation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_EnableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableIpReputation != nil {
		l = m.EnableIpReputation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_UserIdClientIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdClientIp != nil {
		l = m.UserIdClientIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_UserIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_DisableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMaliciousUserDetection != nil {
		l = m.DisableMaliciousUserDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_EnableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableMaliciousUserDetection != nil {
		l = m.EnableMaliciousUserDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_EnableChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableChallenge != nil {
		l = m.EnableChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_DisableRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_ApiRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiRateLimit != nil {
		l = m.ApiRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_IpReputationOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpReputationOnCacheMiss != nil {
		l = m.IpReputationOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_MaliciousUserDetectionOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaliciousUserDetectionOnCacheMiss != nil {
		l = m.MaliciousUserDetectionOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_ChallengeOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeOnCacheMiss != nil {
		l = m.ChallengeOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_DisableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableThreatMesh != nil {
		l = m.DisableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CommonSecurityControls_EnableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableThreatMesh != nil {
		l = m.EnableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ApiProtection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if m.ApiProtectionRules != nil {
		l = m.ApiProtectionRules.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.JwtValidation != nil {
		l = m.JwtValidation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApiDiscoveryChoice != nil {
		n += m.ApiDiscoveryChoice.Size()
	}
	if m.SensitiveDataPolicyChoice != nil {
		n += m.SensitiveDataPolicyChoice.Size()
	}
	return n
}

func (m *ApiProtection_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ApiProtection_ApiSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecification != nil {
		l = m.ApiSpecification.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ApiProtection_EnableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableApiDiscovery != nil {
		l = m.EnableApiDiscovery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ApiProtection_DisableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDiscovery != nil {
		l = m.DisableApiDiscovery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ApiProtection_ApiSpecificationOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecificationOnCacheMiss != nil {
		l = m.ApiSpecificationOnCacheMiss.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ApiProtection_ApiDiscoveryOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDiscoveryOnCacheMiss != nil {
		l = m.ApiDiscoveryOnCacheMiss.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ApiProtection_DefaultSensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSensitiveDataPolicy != nil {
		l = m.DefaultSensitiveDataPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ApiProtection_SensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveDataPolicy != nil {
		l = m.SensitiveDataPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityOptionsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpFiltering != nil {
		l = m.IpFiltering.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.GeoFiltering != nil {
		l = m.GeoFiltering.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AuthOptions != nil {
		l = m.AuthOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WebAppFirewall != nil {
		l = m.WebAppFirewall.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CommonSecurityControls != nil {
		l = m.CommonSecurityControls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApiProtection != nil {
		l = m.ApiProtection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *LoggingOptionsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientLogOptions != nil {
		l = m.ClientLogOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OriginLogOptions != nil {
		l = m.OriginLogOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CDNCacheRuleExpressionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExpressionName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.CacheRuleExpression) > 0 {
		for _, e := range m.CacheRuleExpression {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CacheOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CacheOperator != nil {
		n += m.CacheOperator.Size()
	}
	return n
}

func (m *CacheOperator_Equals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Equals)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CacheOperator_DoesNotEqual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DoesNotEqual)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CacheOperator_Contains) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contains)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CacheOperator_DoesNotContain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DoesNotContain)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CacheOperator_Startswith) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Startswith)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CacheOperator_DoesNotStartWith) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DoesNotStartWith)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CacheOperator_Endswith) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endswith)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CacheOperator_DoesNotEndWith) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DoesNotEndWith)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CacheOperator_MatchRegex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MatchRegex)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CacheHeaderMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != 0 {
		n += 1 + sovTypes(uint64(m.Name))
	}
	if m.Operator != nil {
		l = m.Operator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CDNPathMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operator != nil {
		l = m.Operator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CacheCookieMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Operator != nil {
		l = m.Operator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CacheQueryParameterMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Operator != nil {
		l = m.Operator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CDNCacheRuleExpression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PathMatch != nil {
		l = m.PathMatch.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.CacheHeaders) > 0 {
		for _, e := range m.CacheHeaders {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.QueryParameters) > 0 {
		for _, e := range m.QueryParameters {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CookieMatcher) > 0 {
		for _, e := range m.CookieMatcher {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CacheTTLEnableProps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CacheTtl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CacheOverride {
		n += 2
	}
	if m.IgnoreResponseCookie {
		n += 2
	}
	return n
}

func (m *CacheEligibleOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EligibleForCache != nil {
		n += m.EligibleForCache.Size()
	}
	return n
}

func (m *CacheEligibleOptions_SchemeHostnameUri) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchemeHostnameUri != nil {
		l = m.SchemeHostnameUri.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CacheEligibleOptions_SchemeHostnameRequestUri) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchemeHostnameRequestUri != nil {
		l = m.SchemeHostnameRequestUri.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CacheEligibleOptions_HostnameUri) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostnameUri != nil {
		l = m.HostnameUri.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CacheEligibleOptions_SchemeHostnameUriQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchemeHostnameUriQuery != nil {
		l = m.SchemeHostnameUriQuery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CacheEligibleOptions_SchemeProxyHostUri) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchemeProxyHostUri != nil {
		l = m.SchemeProxyHostUri.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CacheEligibleOptions_SchemeProxyHostRequestUri) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchemeProxyHostRequestUri != nil {
		l = m.SchemeProxyHostRequestUri.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CDNCacheRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.RuleExpressionList) > 0 {
		for _, e := range m.RuleExpressionList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CacheActions != nil {
		n += m.CacheActions.Size()
	}
	return n
}

func (m *CDNCacheRule_CacheBypass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CacheBypass != nil {
		l = m.CacheBypass.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CDNCacheRule_EligibleForCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EligibleForCache != nil {
		l = m.EligibleForCache.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DefaultCacheTTLProps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CacheTtl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DefaultCacheAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CacheActions != nil {
		n += m.CacheActions.Size()
	}
	return n
}

func (m *DefaultCacheAction_EligibleForCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EligibleForCache != nil {
		l = m.EligibleForCache.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DefaultCacheAction_CacheTtlDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CacheTtlDefault)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *DefaultCacheAction_CacheTtlOverride) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CacheTtlOverride)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *DefaultCacheAction_CacheDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CacheDisabled != nil {
		l = m.CacheDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CacheOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultCacheAction != nil {
		l = m.DefaultCacheAction.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.CacheRules) > 0 {
		for _, e := range m.CacheRules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CacheTTLOptionsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TtlOptions != nil {
		n += m.TtlOptions.Size()
	}
	return n
}

func (m *CacheTTLOptionsType_CacheTtlDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CacheTtlDefault)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CacheTTLOptionsType_CacheTtlOverride) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CacheTtlOverride)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CacheTTLOptionsType_CacheDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CacheDisabled != nil {
		l = m.CacheDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AdvancedOptionsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeaderOptions != nil {
		l = m.HeaderOptions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.SecurityOptions != nil {
		l = m.SecurityOptions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LoggingOptions != nil {
		l = m.LoggingOptions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CacheTtlOptions != nil {
		l = m.CacheTtlOptions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CacheOptions != nil {
		l = m.CacheOptions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CDNTLSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *CDNTLSConfig_Tls_12Plus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tls_12Plus != nil {
		l = m.Tls_12Plus.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CDNTLSConfig_Tls_11Plus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tls_11Plus != nil {
		l = m.Tls_11Plus.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CDNHTTPSAutoCertsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpRedirect {
		n += 2
	}
	if m.AddHsts {
		n += 2
	}
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CDNDownstreamTlsParamsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TlsCertificates) > 0 {
		for _, e := range m.TlsCertificates {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CDNHTTPSCustomCertsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpRedirect {
		n += 2
	}
	if m.AddHsts {
		n += 2
	}
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AddLocation {
		n += 2
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OriginPool != nil {
		l = m.OriginPool.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.OtherSettings != nil {
		l = m.OtherSettings.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DefaultCacheAction != nil {
		l = m.DefaultCacheAction.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CacheRules) > 0 {
		for _, e := range m.CacheRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DataGuardRules) > 0 {
		for _, e := range m.DataGuardRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.CsrfPolicy != nil {
		l = m.CsrfPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.GraphqlRules) > 0 {
		for _, e := range m.GraphqlRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for _, e := range m.ProtectedCookies {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.BotDefenseChoice != nil {
		n += m.BotDefenseChoice.Size()
	}
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if m.ApiProtectionRules != nil {
		l = m.ApiProtectionRules.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.JwtValidation != nil {
		l = m.JwtValidation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ApiDiscoveryChoice != nil {
		n += m.ApiDiscoveryChoice.Size()
	}
	if m.SensitiveDataPolicyChoice != nil {
		n += m.SensitiveDataPolicyChoice.Size()
	}
	if m.L7DdosAutoMitigationAction != nil {
		n += m.L7DdosAutoMitigationAction.Size()
	}
	if len(m.DdosMitigationRules) > 0 {
		for _, e := range m.DdosMitigationRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.SlowDdosMitigationChoice != nil {
		n += m.SlowDdosMitigationChoice.Size()
	}
	if m.ClientSideDefenseChoice != nil {
		n += m.ClientSideDefenseChoice.Size()
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.IpReputationChoice != nil {
		n += m.IpReputationChoice.Size()
	}
	if m.ThreatMeshChoice != nil {
		n += m.ThreatMeshChoice.Size()
	}
	if m.UserIdChoice != nil {
		n += m.UserIdChoice.Size()
	}
	if m.MaliciousUserDetectionChoice != nil {
		n += m.MaliciousUserDetectionChoice.Size()
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.State != 0 {
		n += 2 + sovTypes(uint64(m.State))
	}
	if m.AutoCertState != 0 {
		n += 2 + sovTypes(uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.ServiceDomains) > 0 {
		for _, e := range m.ServiceDomains {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.CertState != 0 {
		n += 2 + sovTypes(uint64(m.CertState))
	}
	return n
}

func (m *GlobalSpecType_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HttpsAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Https) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AppFirewallOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewallOnCacheMiss != nil {
		l = m.AppFirewallOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableBotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableBotDefense != nil {
		l = m.DisableBotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefense != nil {
		l = m.BotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BotDefenseAdvanced) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefenseAdvanced != nil {
		l = m.BotDefenseAdvanced.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ApiSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecification != nil {
		l = m.ApiSpecification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ApiSpecificationOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecificationOnCacheMiss != nil {
		l = m.ApiSpecificationOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDiscovery != nil {
		l = m.DisableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableApiDiscovery != nil {
		l = m.EnableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ApiDiscoveryOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDiscoveryOnCacheMiss != nil {
		l = m.ApiDiscoveryOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultSensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSensitiveDataPolicy != nil {
		l = m.DefaultSensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveDataPolicy != nil {
		l = m.SensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_L7DdosActionDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionDefault != nil {
		l = m.L7DdosActionDefault.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_L7DdosActionBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionBlock != nil {
		l = m.L7DdosActionBlock.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_L7DdosActionJsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionJsChallenge != nil {
		l = m.L7DdosActionJsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_L7DdosActionNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionNone != nil {
		l = m.L7DdosActionNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SystemDefaultTimeouts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemDefaultTimeouts != nil {
		l = m.SystemDefaultTimeouts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SlowDdosMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlowDdosMitigation != nil {
		l = m.SlowDdosMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableClientSideDefense != nil {
		l = m.DisableClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSideDefense != nil {
		l = m.ClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableIpReputation != nil {
		l = m.DisableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableIpReputation != nil {
		l = m.EnableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_IpReputationOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpReputationOnCacheMiss != nil {
		l = m.IpReputationOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableThreatMesh != nil {
		l = m.DisableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableThreatMesh != nil {
		l = m.EnableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_UserIdClientIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdClientIp != nil {
		l = m.UserIdClientIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_UserIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMaliciousUserDetection != nil {
		l = m.DisableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableMaliciousUserDetection != nil {
		l = m.EnableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_MaliciousUserDetectionOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaliciousUserDetectionOnCacheMiss != nil {
		l = m.MaliciousUserDetectionOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableChallenge != nil {
		l = m.EnableChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ChallengeOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeOnCacheMiss != nil {
		l = m.ChallengeOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ApiRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiRateLimit != nil {
		l = m.ApiRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *IpFilteringOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpFilteringType != nil {
		n += m.IpFilteringType.Size()
	}
	return n
}

func (m *IpFilteringOptions_AllowList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowList != nil {
		l = m.AllowList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *IpFilteringOptions_BlockList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockList != nil {
		l = m.BlockList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GeoFilteringOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GeoFilteringType != nil {
		n += m.GeoFilteringType.Size()
	}
	return n
}

func (m *GeoFilteringOptions_AllowList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowList != nil {
		l = m.AllowList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GeoFilteringOptions_BlockList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockList != nil {
		l = m.BlockList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *LogHeaderOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HeaderList) > 0 {
		for _, s := range m.HeaderList {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CDNCustomAuthentication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CustomAuthConfig)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AuthenticationOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthOptions != nil {
		n += m.AuthOptions.Size()
	}
	return n
}

func (m *AuthenticationOptions_DisableAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableAuth != nil {
		l = m.DisableAuth.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AuthenticationOptions_Jwt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Jwt != nil {
		l = m.Jwt.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AuthenticationOptions_Custom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Custom != nil {
		l = m.Custom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CDNOriginServerType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	return n
}

func (m *CDNOriginServerType_PublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicIp != nil {
		l = m.PublicIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CDNOriginServerType_PublicName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicName != nil {
		l = m.PublicName.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CdnOriginPoolType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicName != nil {
		l = m.PublicName.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TlsChoice != nil {
		n += m.TlsChoice.Size()
	}
	if len(m.OriginServers) > 0 {
		for _, e := range m.OriginServers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.FollowOriginRedirect {
		n += 2
	}
	l = len(m.OriginRequestTimeout)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MoreOriginOptions != nil {
		l = m.MoreOriginOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CdnOriginPoolType_NoTls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoTls != nil {
		l = m.NoTls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CdnOriginPoolType_UseTls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseTls != nil {
		l = m.UseTls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginAdvancedConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableByteRangeRequest {
		n += 2
	}
	if m.WebsocketProxy {
		n += 2
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AddLocation {
		n += 2
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OriginPool != nil {
		l = m.OriginPool.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.OtherSettings != nil {
		l = m.OtherSettings.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DefaultCacheAction != nil {
		l = m.DefaultCacheAction.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CacheRules) > 0 {
		for _, e := range m.CacheRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DataGuardRules) > 0 {
		for _, e := range m.DataGuardRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.CsrfPolicy != nil {
		l = m.CsrfPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.GraphqlRules) > 0 {
		for _, e := range m.GraphqlRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for _, e := range m.ProtectedCookies {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.BotDefenseChoice != nil {
		n += m.BotDefenseChoice.Size()
	}
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if m.ApiProtectionRules != nil {
		l = m.ApiProtectionRules.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.JwtValidation != nil {
		l = m.JwtValidation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ApiDiscoveryChoice != nil {
		n += m.ApiDiscoveryChoice.Size()
	}
	if m.SensitiveDataPolicyChoice != nil {
		n += m.SensitiveDataPolicyChoice.Size()
	}
	if m.L7DdosAutoMitigationAction != nil {
		n += m.L7DdosAutoMitigationAction.Size()
	}
	if len(m.DdosMitigationRules) > 0 {
		for _, e := range m.DdosMitigationRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.SlowDdosMitigationChoice != nil {
		n += m.SlowDdosMitigationChoice.Size()
	}
	if m.ClientSideDefenseChoice != nil {
		n += m.ClientSideDefenseChoice.Size()
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.IpReputationChoice != nil {
		n += m.IpReputationChoice.Size()
	}
	if m.ThreatMeshChoice != nil {
		n += m.ThreatMeshChoice.Size()
	}
	if m.UserIdChoice != nil {
		n += m.UserIdChoice.Size()
	}
	if m.MaliciousUserDetectionChoice != nil {
		n += m.MaliciousUserDetectionChoice.Size()
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HttpsAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Https) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AppFirewallOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewallOnCacheMiss != nil {
		l = m.AppFirewallOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableBotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableBotDefense != nil {
		l = m.DisableBotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefense != nil {
		l = m.BotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BotDefenseAdvanced) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefenseAdvanced != nil {
		l = m.BotDefenseAdvanced.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ApiSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecification != nil {
		l = m.ApiSpecification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ApiSpecificationOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecificationOnCacheMiss != nil {
		l = m.ApiSpecificationOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDiscovery != nil {
		l = m.DisableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableApiDiscovery != nil {
		l = m.EnableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ApiDiscoveryOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDiscoveryOnCacheMiss != nil {
		l = m.ApiDiscoveryOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultSensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSensitiveDataPolicy != nil {
		l = m.DefaultSensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveDataPolicy != nil {
		l = m.SensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_L7DdosActionDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionDefault != nil {
		l = m.L7DdosActionDefault.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_L7DdosActionBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionBlock != nil {
		l = m.L7DdosActionBlock.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_L7DdosActionJsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionJsChallenge != nil {
		l = m.L7DdosActionJsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_L7DdosActionNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionNone != nil {
		l = m.L7DdosActionNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SystemDefaultTimeouts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemDefaultTimeouts != nil {
		l = m.SystemDefaultTimeouts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SlowDdosMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlowDdosMitigation != nil {
		l = m.SlowDdosMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableClientSideDefense != nil {
		l = m.DisableClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSideDefense != nil {
		l = m.ClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableIpReputation != nil {
		l = m.DisableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableIpReputation != nil {
		l = m.EnableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_IpReputationOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpReputationOnCacheMiss != nil {
		l = m.IpReputationOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableThreatMesh != nil {
		l = m.DisableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableThreatMesh != nil {
		l = m.EnableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_UserIdClientIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdClientIp != nil {
		l = m.UserIdClientIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_UserIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMaliciousUserDetection != nil {
		l = m.DisableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableMaliciousUserDetection != nil {
		l = m.EnableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_MaliciousUserDetectionOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaliciousUserDetectionOnCacheMiss != nil {
		l = m.MaliciousUserDetectionOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableChallenge != nil {
		l = m.EnableChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ChallengeOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeOnCacheMiss != nil {
		l = m.ChallengeOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ApiRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiRateLimit != nil {
		l = m.ApiRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AddLocation {
		n += 2
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OriginPool != nil {
		l = m.OriginPool.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.OtherSettings != nil {
		l = m.OtherSettings.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DefaultCacheAction != nil {
		l = m.DefaultCacheAction.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CacheRules) > 0 {
		for _, e := range m.CacheRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DataGuardRules) > 0 {
		for _, e := range m.DataGuardRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.CsrfPolicy != nil {
		l = m.CsrfPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.GraphqlRules) > 0 {
		for _, e := range m.GraphqlRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for _, e := range m.ProtectedCookies {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.BotDefenseChoice != nil {
		n += m.BotDefenseChoice.Size()
	}
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if m.ApiProtectionRules != nil {
		l = m.ApiProtectionRules.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.JwtValidation != nil {
		l = m.JwtValidation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ApiDiscoveryChoice != nil {
		n += m.ApiDiscoveryChoice.Size()
	}
	if m.SensitiveDataPolicyChoice != nil {
		n += m.SensitiveDataPolicyChoice.Size()
	}
	if m.L7DdosAutoMitigationAction != nil {
		n += m.L7DdosAutoMitigationAction.Size()
	}
	if len(m.DdosMitigationRules) > 0 {
		for _, e := range m.DdosMitigationRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.SlowDdosMitigationChoice != nil {
		n += m.SlowDdosMitigationChoice.Size()
	}
	if m.ClientSideDefenseChoice != nil {
		n += m.ClientSideDefenseChoice.Size()
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.IpReputationChoice != nil {
		n += m.IpReputationChoice.Size()
	}
	if m.ThreatMeshChoice != nil {
		n += m.ThreatMeshChoice.Size()
	}
	if m.UserIdChoice != nil {
		n += m.UserIdChoice.Size()
	}
	if m.MaliciousUserDetectionChoice != nil {
		n += m.MaliciousUserDetectionChoice.Size()
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HttpsAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Https) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AppFirewallOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewallOnCacheMiss != nil {
		l = m.AppFirewallOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableBotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableBotDefense != nil {
		l = m.DisableBotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefense != nil {
		l = m.BotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BotDefenseAdvanced) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefenseAdvanced != nil {
		l = m.BotDefenseAdvanced.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ApiSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecification != nil {
		l = m.ApiSpecification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ApiSpecificationOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecificationOnCacheMiss != nil {
		l = m.ApiSpecificationOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDiscovery != nil {
		l = m.DisableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableApiDiscovery != nil {
		l = m.EnableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ApiDiscoveryOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDiscoveryOnCacheMiss != nil {
		l = m.ApiDiscoveryOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultSensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSensitiveDataPolicy != nil {
		l = m.DefaultSensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveDataPolicy != nil {
		l = m.SensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_L7DdosActionDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionDefault != nil {
		l = m.L7DdosActionDefault.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_L7DdosActionBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionBlock != nil {
		l = m.L7DdosActionBlock.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_L7DdosActionJsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionJsChallenge != nil {
		l = m.L7DdosActionJsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_L7DdosActionNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionNone != nil {
		l = m.L7DdosActionNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SystemDefaultTimeouts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemDefaultTimeouts != nil {
		l = m.SystemDefaultTimeouts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SlowDdosMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlowDdosMitigation != nil {
		l = m.SlowDdosMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableClientSideDefense != nil {
		l = m.DisableClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSideDefense != nil {
		l = m.ClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableIpReputation != nil {
		l = m.DisableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableIpReputation != nil {
		l = m.EnableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IpReputationOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpReputationOnCacheMiss != nil {
		l = m.IpReputationOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableThreatMesh != nil {
		l = m.DisableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableThreatMesh != nil {
		l = m.EnableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_UserIdClientIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdClientIp != nil {
		l = m.UserIdClientIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_UserIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMaliciousUserDetection != nil {
		l = m.DisableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableMaliciousUserDetection != nil {
		l = m.EnableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_MaliciousUserDetectionOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaliciousUserDetectionOnCacheMiss != nil {
		l = m.MaliciousUserDetectionOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableChallenge != nil {
		l = m.EnableChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ChallengeOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeOnCacheMiss != nil {
		l = m.ChallengeOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ApiRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiRateLimit != nil {
		l = m.ApiRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AddLocation {
		n += 2
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OriginPool != nil {
		l = m.OriginPool.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.OtherSettings != nil {
		l = m.OtherSettings.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DefaultCacheAction != nil {
		l = m.DefaultCacheAction.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CacheRules) > 0 {
		for _, e := range m.CacheRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DataGuardRules) > 0 {
		for _, e := range m.DataGuardRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.CsrfPolicy != nil {
		l = m.CsrfPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.GraphqlRules) > 0 {
		for _, e := range m.GraphqlRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for _, e := range m.ProtectedCookies {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.BotDefenseChoice != nil {
		n += m.BotDefenseChoice.Size()
	}
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if m.ApiProtectionRules != nil {
		l = m.ApiProtectionRules.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.JwtValidation != nil {
		l = m.JwtValidation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ApiDiscoveryChoice != nil {
		n += m.ApiDiscoveryChoice.Size()
	}
	if m.SensitiveDataPolicyChoice != nil {
		n += m.SensitiveDataPolicyChoice.Size()
	}
	if m.L7DdosAutoMitigationAction != nil {
		n += m.L7DdosAutoMitigationAction.Size()
	}
	if len(m.DdosMitigationRules) > 0 {
		for _, e := range m.DdosMitigationRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.SlowDdosMitigationChoice != nil {
		n += m.SlowDdosMitigationChoice.Size()
	}
	if m.ClientSideDefenseChoice != nil {
		n += m.ClientSideDefenseChoice.Size()
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.IpReputationChoice != nil {
		n += m.IpReputationChoice.Size()
	}
	if m.ThreatMeshChoice != nil {
		n += m.ThreatMeshChoice.Size()
	}
	if m.UserIdChoice != nil {
		n += m.UserIdChoice.Size()
	}
	if m.MaliciousUserDetectionChoice != nil {
		n += m.MaliciousUserDetectionChoice.Size()
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.State != 0 {
		n += 2 + sovTypes(uint64(m.State))
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.ServiceDomains) > 0 {
		for _, e := range m.ServiceDomains {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.CertState != 0 {
		n += 2 + sovTypes(uint64(m.CertState))
	}
	return n
}

func (m *GetSpecType_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HttpsAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Https) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AppFirewallOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewallOnCacheMiss != nil {
		l = m.AppFirewallOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableBotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableBotDefense != nil {
		l = m.DisableBotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefense != nil {
		l = m.BotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BotDefenseAdvanced) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefenseAdvanced != nil {
		l = m.BotDefenseAdvanced.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ApiSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecification != nil {
		l = m.ApiSpecification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ApiSpecificationOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecificationOnCacheMiss != nil {
		l = m.ApiSpecificationOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDiscovery != nil {
		l = m.DisableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableApiDiscovery != nil {
		l = m.EnableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ApiDiscoveryOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDiscoveryOnCacheMiss != nil {
		l = m.ApiDiscoveryOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultSensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSensitiveDataPolicy != nil {
		l = m.DefaultSensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveDataPolicy != nil {
		l = m.SensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_L7DdosActionDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionDefault != nil {
		l = m.L7DdosActionDefault.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_L7DdosActionBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionBlock != nil {
		l = m.L7DdosActionBlock.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_L7DdosActionJsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionJsChallenge != nil {
		l = m.L7DdosActionJsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_L7DdosActionNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionNone != nil {
		l = m.L7DdosActionNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SystemDefaultTimeouts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemDefaultTimeouts != nil {
		l = m.SystemDefaultTimeouts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SlowDdosMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlowDdosMitigation != nil {
		l = m.SlowDdosMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableClientSideDefense != nil {
		l = m.DisableClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSideDefense != nil {
		l = m.ClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableIpReputation != nil {
		l = m.DisableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableIpReputation != nil {
		l = m.EnableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_IpReputationOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpReputationOnCacheMiss != nil {
		l = m.IpReputationOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableThreatMesh != nil {
		l = m.DisableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableThreatMesh != nil {
		l = m.EnableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_UserIdClientIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdClientIp != nil {
		l = m.UserIdClientIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_UserIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMaliciousUserDetection != nil {
		l = m.DisableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableMaliciousUserDetection != nil {
		l = m.EnableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_MaliciousUserDetectionOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaliciousUserDetectionOnCacheMiss != nil {
		l = m.MaliciousUserDetectionOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableChallenge != nil {
		l = m.EnableChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ChallengeOnCacheMiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeOnCacheMiss != nil {
		l = m.ChallengeOnCacheMiss.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ApiRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiRateLimit != nil {
		l = m.ApiRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *LilacCDNMetricsFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tag != 0 {
		n += 1 + sovTypes(uint64(m.Tag))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Operator != 0 {
		n += 1 + sovTypes(uint64(m.Operator))
	}
	return n
}

func (m *LilacCDNMetricsResponseGroupBy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != 0 {
		n += 1 + sovTypes(uint64(m.Name))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *LilacCDNMetricsResponseValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *LilacCDNMetricsResponseSeries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GroupBy) > 0 {
		for _, e := range m.GroupBy {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *LilacCDNMetricsResponseData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.Unit != 0 {
		n += 1 + sovTypes(uint64(m.Unit))
	}
	if len(m.Series) > 0 {
		for _, e := range m.Series {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProxyTypeHttpsAutoCerts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts{`,
		`HttpRedirect:` + fmt.Sprintf("%v", this.HttpRedirect) + `,`,
		`AddHsts:` + fmt.Sprintf("%v", this.AddHsts) + `,`,
		`TlsConfig:` + strings.Replace(fmt.Sprintf("%v", this.TlsConfig), "TlsConfig", "views.TlsConfig", 1) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeaderControlType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRequestHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.RequestHeadersToAdd {
		repeatedStringForRequestHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForRequestHeadersToAdd += "}"
	repeatedStringForResponseHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.ResponseHeadersToAdd {
		repeatedStringForResponseHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForResponseHeadersToAdd += "}"
	s := strings.Join([]string{`&HeaderControlType{`,
		`RequestHeadersToAdd:` + repeatedStringForRequestHeadersToAdd + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`ResponseHeadersToAdd:` + repeatedStringForResponseHeadersToAdd + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebApplicationFirewall) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForWafExclusionRules := "[]*SimpleWafExclusionRule{"
	for _, f := range this.WafExclusionRules {
		repeatedStringForWafExclusionRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleWafExclusionRule", "policy.SimpleWafExclusionRule", 1) + ","
	}
	repeatedStringForWafExclusionRules += "}"
	repeatedStringForDataGuardRules := "[]*SimpleDataGuardRule{"
	for _, f := range this.DataGuardRules {
		repeatedStringForDataGuardRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleDataGuardRule", "policy.SimpleDataGuardRule", 1) + ","
	}
	repeatedStringForDataGuardRules += "}"
	repeatedStringForGraphqlRules := "[]*GraphQLRule{"
	for _, f := range this.GraphqlRules {
		repeatedStringForGraphqlRules += strings.Replace(fmt.Sprintf("%v", f), "GraphQLRule", "policy.GraphQLRule", 1) + ","
	}
	repeatedStringForGraphqlRules += "}"
	repeatedStringForProtectedCookies := "[]*CookieManipulationOptionType{"
	for _, f := range this.ProtectedCookies {
		repeatedStringForProtectedCookies += strings.Replace(fmt.Sprintf("%v", f), "CookieManipulationOptionType", "schema.CookieManipulationOptionType", 1) + ","
	}
	repeatedStringForProtectedCookies += "}"
	s := strings.Join([]string{`&WebApplicationFirewall{`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`WafExclusionRules:` + repeatedStringForWafExclusionRules + `,`,
		`DataGuardRules:` + repeatedStringForDataGuardRules + `,`,
		`CsrfPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CsrfPolicy), "CsrfPolicy", "schema.CsrfPolicy", 1) + `,`,
		`GraphqlRules:` + repeatedStringForGraphqlRules + `,`,
		`ProtectedCookies:` + repeatedStringForProtectedCookies + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebApplicationFirewall_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebApplicationFirewall_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebApplicationFirewall_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebApplicationFirewall_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebApplicationFirewall_AppFirewallOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebApplicationFirewall_AppFirewallOnCacheMiss{`,
		`AppFirewallOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewallOnCacheMiss), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotProtection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotProtection{`,
		`BotDefenseChoice:` + fmt.Sprintf("%v", this.BotDefenseChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotProtection_DisableBotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotProtection_DisableBotDefense{`,
		`DisableBotDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableBotDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotProtection_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotProtection_BotDefense{`,
		`BotDefense:` + strings.Replace(fmt.Sprintf("%v", this.BotDefense), "ShapeBotDefenseType", "common_security.ShapeBotDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotProtection_BotDefenseAdvanced) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotProtection_BotDefenseAdvanced{`,
		`BotDefenseAdvanced:` + strings.Replace(fmt.Sprintf("%v", this.BotDefenseAdvanced), "BotDefenseAdvancedType", "common_security.BotDefenseAdvancedType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DoSProtection) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDdosMitigationRules := "[]*DDoSMitigationRule{"
	for _, f := range this.DdosMitigationRules {
		repeatedStringForDdosMitigationRules += strings.Replace(fmt.Sprintf("%v", f), "DDoSMitigationRule", "common_security.DDoSMitigationRule", 1) + ","
	}
	repeatedStringForDdosMitigationRules += "}"
	s := strings.Join([]string{`&DoSProtection{`,
		`L7DdosAutoMitigationAction:` + fmt.Sprintf("%v", this.L7DdosAutoMitigationAction) + `,`,
		`DdosMitigationRules:` + repeatedStringForDdosMitigationRules + `,`,
		`SlowDdosMitigationChoice:` + fmt.Sprintf("%v", this.SlowDdosMitigationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DoSProtection_L7DdosActionDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DoSProtection_L7DdosActionDefault{`,
		`L7DdosActionDefault:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DoSProtection_L7DdosActionBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DoSProtection_L7DdosActionBlock{`,
		`L7DdosActionBlock:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionBlock), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DoSProtection_L7DdosActionJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DoSProtection_L7DdosActionJsChallenge{`,
		`L7DdosActionJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionJsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DoSProtection_L7DdosActionNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DoSProtection_L7DdosActionNone{`,
		`L7DdosActionNone:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DoSProtection_SystemDefaultTimeouts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DoSProtection_SystemDefaultTimeouts{`,
		`SystemDefaultTimeouts:` + strings.Replace(fmt.Sprintf("%v", this.SystemDefaultTimeouts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DoSProtection_SlowDdosMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DoSProtection_SlowDdosMitigation{`,
		`SlowDdosMitigation:` + strings.Replace(fmt.Sprintf("%v", this.SlowDdosMitigation), "SlowDDoSMitigation", "virtual_host.SlowDDoSMitigation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OtherSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OtherSettings{`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`LoggingOptions:` + strings.Replace(this.LoggingOptions.String(), "LoggingOptionsType", "LoggingOptionsType", 1) + `,`,
		`HeaderOptions:` + strings.Replace(this.HeaderOptions.String(), "HeaderControlType", "HeaderControlType", 1) + `,`,
		`IpFiltering:` + strings.Replace(this.IpFiltering.String(), "IpFilteringOptions", "IpFilteringOptions", 1) + `,`,
		`GeoFiltering:` + strings.Replace(this.GeoFiltering.String(), "GeoFilteringOptions", "GeoFilteringOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientSideDefense{`,
		`ClientSideDefenseChoice:` + fmt.Sprintf("%v", this.ClientSideDefenseChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientSideDefense_DisableClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientSideDefense_DisableClientSideDefense{`,
		`DisableClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableClientSideDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientSideDefense_ClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientSideDefense_ClientSideDefense{`,
		`ClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.ClientSideDefense), "ClientSideDefenseType", "common_security.ClientSideDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTrustedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.TrustedClients {
		repeatedStringForTrustedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForTrustedClients += "}"
	repeatedStringForBlockedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.BlockedClients {
		repeatedStringForBlockedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForBlockedClients += "}"
	s := strings.Join([]string{`&CommonSecurityControls{`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`IpReputationChoice:` + fmt.Sprintf("%v", this.IpReputationChoice) + `,`,
		`UserIdChoice:` + fmt.Sprintf("%v", this.UserIdChoice) + `,`,
		`MaliciousUserDetectionChoice:` + fmt.Sprintf("%v", this.MaliciousUserDetectionChoice) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`TrustedClients:` + repeatedStringForTrustedClients + `,`,
		`BlockedClients:` + repeatedStringForBlockedClients + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`ThreatMeshChoice:` + fmt.Sprintf("%v", this.ThreatMeshChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "common_waf.ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_DisableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_DisableIpReputation{`,
		`DisableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.DisableIpReputation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_EnableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_EnableIpReputation{`,
		`EnableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.EnableIpReputation), "IPThreatCategoryListType", "common_waf.IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_UserIdClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_UserIdClientIp{`,
		`UserIdClientIp:` + strings.Replace(fmt.Sprintf("%v", this.UserIdClientIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_UserIdentification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_UserIdentification{`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_DisableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_DisableMaliciousUserDetection{`,
		`DisableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.DisableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_EnableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_EnableMaliciousUserDetection{`,
		`EnableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.EnableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_EnableChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_EnableChallenge{`,
		`EnableChallenge:` + strings.Replace(fmt.Sprintf("%v", this.EnableChallenge), "EnableChallenge", "common_waf.EnableChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "common_waf.PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_ApiRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_ApiRateLimit{`,
		`ApiRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimit), "APIRateLimit", "common_waf.APIRateLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "common_waf.RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_IpReputationOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_IpReputationOnCacheMiss{`,
		`IpReputationOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.IpReputationOnCacheMiss), "IPThreatCategoryListType", "common_waf.IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_MaliciousUserDetectionOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_MaliciousUserDetectionOnCacheMiss{`,
		`MaliciousUserDetectionOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserDetectionOnCacheMiss), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_ChallengeOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_ChallengeOnCacheMiss{`,
		`ChallengeOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ChallengeOnCacheMiss), "EnableChallenge", "common_waf.EnableChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_DisableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_DisableThreatMesh{`,
		`DisableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.DisableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonSecurityControls_EnableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonSecurityControls_EnableThreatMesh{`,
		`EnableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.EnableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiProtection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiProtection{`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`ApiProtectionRules:` + strings.Replace(fmt.Sprintf("%v", this.ApiProtectionRules), "APIProtectionRules", "common_waf.APIProtectionRules", 1) + `,`,
		`JwtValidation:` + strings.Replace(fmt.Sprintf("%v", this.JwtValidation), "JWTValidation", "common_waf.JWTValidation", 1) + `,`,
		`ApiDiscoveryChoice:` + fmt.Sprintf("%v", this.ApiDiscoveryChoice) + `,`,
		`SensitiveDataPolicyChoice:` + fmt.Sprintf("%v", this.SensitiveDataPolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiProtection_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiProtection_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiProtection_ApiSpecification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiProtection_ApiSpecification{`,
		`ApiSpecification:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecification), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiProtection_EnableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiProtection_EnableApiDiscovery{`,
		`EnableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.EnableApiDiscovery), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiProtection_DisableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiProtection_DisableApiDiscovery{`,
		`DisableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDiscovery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiProtection_ApiSpecificationOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiProtection_ApiSpecificationOnCacheMiss{`,
		`ApiSpecificationOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecificationOnCacheMiss), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiProtection_ApiDiscoveryOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiProtection_ApiDiscoveryOnCacheMiss{`,
		`ApiDiscoveryOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ApiDiscoveryOnCacheMiss), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiProtection_DefaultSensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiProtection_DefaultSensitiveDataPolicy{`,
		`DefaultSensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSensitiveDataPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiProtection_SensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiProtection_SensitiveDataPolicy{`,
		`SensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SensitiveDataPolicy), "SensitiveDataPolicySettings", "common_security.SensitiveDataPolicySettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityOptionsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityOptionsType{`,
		`IpFiltering:` + strings.Replace(this.IpFiltering.String(), "IpFilteringOptions", "IpFilteringOptions", 1) + `,`,
		`GeoFiltering:` + strings.Replace(this.GeoFiltering.String(), "GeoFilteringOptions", "GeoFilteringOptions", 1) + `,`,
		`AuthOptions:` + strings.Replace(this.AuthOptions.String(), "AuthenticationOptions", "AuthenticationOptions", 1) + `,`,
		`WebAppFirewall:` + strings.Replace(this.WebAppFirewall.String(), "WebApplicationFirewall", "WebApplicationFirewall", 1) + `,`,
		`CommonSecurityControls:` + strings.Replace(this.CommonSecurityControls.String(), "CommonSecurityControls", "CommonSecurityControls", 1) + `,`,
		`ApiProtection:` + strings.Replace(this.ApiProtection.String(), "ApiProtection", "ApiProtection", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoggingOptionsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoggingOptionsType{`,
		`ClientLogOptions:` + strings.Replace(this.ClientLogOptions.String(), "LogHeaderOptions", "LogHeaderOptions", 1) + `,`,
		`OriginLogOptions:` + strings.Replace(this.OriginLogOptions.String(), "LogHeaderOptions", "LogHeaderOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNCacheRuleExpressionList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCacheRuleExpression := "[]*CDNCacheRuleExpression{"
	for _, f := range this.CacheRuleExpression {
		repeatedStringForCacheRuleExpression += strings.Replace(f.String(), "CDNCacheRuleExpression", "CDNCacheRuleExpression", 1) + ","
	}
	repeatedStringForCacheRuleExpression += "}"
	s := strings.Join([]string{`&CDNCacheRuleExpressionList{`,
		`ExpressionName:` + fmt.Sprintf("%v", this.ExpressionName) + `,`,
		`CacheRuleExpression:` + repeatedStringForCacheRuleExpression + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheOperator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheOperator{`,
		`CacheOperator:` + fmt.Sprintf("%v", this.CacheOperator) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheOperator_Equals) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheOperator_Equals{`,
		`Equals:` + fmt.Sprintf("%v", this.Equals) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheOperator_DoesNotEqual) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheOperator_DoesNotEqual{`,
		`DoesNotEqual:` + fmt.Sprintf("%v", this.DoesNotEqual) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheOperator_Contains) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheOperator_Contains{`,
		`Contains:` + fmt.Sprintf("%v", this.Contains) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheOperator_DoesNotContain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheOperator_DoesNotContain{`,
		`DoesNotContain:` + fmt.Sprintf("%v", this.DoesNotContain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheOperator_Startswith) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheOperator_Startswith{`,
		`Startswith:` + fmt.Sprintf("%v", this.Startswith) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheOperator_DoesNotStartWith) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheOperator_DoesNotStartWith{`,
		`DoesNotStartWith:` + fmt.Sprintf("%v", this.DoesNotStartWith) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheOperator_Endswith) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheOperator_Endswith{`,
		`Endswith:` + fmt.Sprintf("%v", this.Endswith) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheOperator_DoesNotEndWith) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheOperator_DoesNotEndWith{`,
		`DoesNotEndWith:` + fmt.Sprintf("%v", this.DoesNotEndWith) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheOperator_MatchRegex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheOperator_MatchRegex{`,
		`MatchRegex:` + fmt.Sprintf("%v", this.MatchRegex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheHeaderMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheHeaderMatcherType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Operator:` + strings.Replace(this.Operator.String(), "CacheOperator", "CacheOperator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNPathMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNPathMatcherType{`,
		`Operator:` + strings.Replace(this.Operator.String(), "CacheOperator", "CacheOperator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheCookieMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheCookieMatcherType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Operator:` + strings.Replace(this.Operator.String(), "CacheOperator", "CacheOperator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheQueryParameterMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheQueryParameterMatcherType{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Operator:` + strings.Replace(this.Operator.String(), "CacheOperator", "CacheOperator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNCacheRuleExpression) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCacheHeaders := "[]*CacheHeaderMatcherType{"
	for _, f := range this.CacheHeaders {
		repeatedStringForCacheHeaders += strings.Replace(f.String(), "CacheHeaderMatcherType", "CacheHeaderMatcherType", 1) + ","
	}
	repeatedStringForCacheHeaders += "}"
	repeatedStringForQueryParameters := "[]*CacheQueryParameterMatcherType{"
	for _, f := range this.QueryParameters {
		repeatedStringForQueryParameters += strings.Replace(f.String(), "CacheQueryParameterMatcherType", "CacheQueryParameterMatcherType", 1) + ","
	}
	repeatedStringForQueryParameters += "}"
	repeatedStringForCookieMatcher := "[]*CacheCookieMatcherType{"
	for _, f := range this.CookieMatcher {
		repeatedStringForCookieMatcher += strings.Replace(f.String(), "CacheCookieMatcherType", "CacheCookieMatcherType", 1) + ","
	}
	repeatedStringForCookieMatcher += "}"
	s := strings.Join([]string{`&CDNCacheRuleExpression{`,
		`PathMatch:` + strings.Replace(this.PathMatch.String(), "CDNPathMatcherType", "CDNPathMatcherType", 1) + `,`,
		`CacheHeaders:` + repeatedStringForCacheHeaders + `,`,
		`QueryParameters:` + repeatedStringForQueryParameters + `,`,
		`CookieMatcher:` + repeatedStringForCookieMatcher + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheTTLEnableProps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheTTLEnableProps{`,
		`CacheTtl:` + fmt.Sprintf("%v", this.CacheTtl) + `,`,
		`CacheOverride:` + fmt.Sprintf("%v", this.CacheOverride) + `,`,
		`IgnoreResponseCookie:` + fmt.Sprintf("%v", this.IgnoreResponseCookie) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheEligibleOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheEligibleOptions{`,
		`EligibleForCache:` + fmt.Sprintf("%v", this.EligibleForCache) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheEligibleOptions_SchemeHostnameUri) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheEligibleOptions_SchemeHostnameUri{`,
		`SchemeHostnameUri:` + strings.Replace(fmt.Sprintf("%v", this.SchemeHostnameUri), "CacheTTLEnableProps", "CacheTTLEnableProps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheEligibleOptions_SchemeHostnameRequestUri) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheEligibleOptions_SchemeHostnameRequestUri{`,
		`SchemeHostnameRequestUri:` + strings.Replace(fmt.Sprintf("%v", this.SchemeHostnameRequestUri), "CacheTTLEnableProps", "CacheTTLEnableProps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheEligibleOptions_HostnameUri) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheEligibleOptions_HostnameUri{`,
		`HostnameUri:` + strings.Replace(fmt.Sprintf("%v", this.HostnameUri), "CacheTTLEnableProps", "CacheTTLEnableProps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheEligibleOptions_SchemeHostnameUriQuery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheEligibleOptions_SchemeHostnameUriQuery{`,
		`SchemeHostnameUriQuery:` + strings.Replace(fmt.Sprintf("%v", this.SchemeHostnameUriQuery), "CacheTTLEnableProps", "CacheTTLEnableProps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheEligibleOptions_SchemeProxyHostUri) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheEligibleOptions_SchemeProxyHostUri{`,
		`SchemeProxyHostUri:` + strings.Replace(fmt.Sprintf("%v", this.SchemeProxyHostUri), "CacheTTLEnableProps", "CacheTTLEnableProps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheEligibleOptions_SchemeProxyHostRequestUri) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheEligibleOptions_SchemeProxyHostRequestUri{`,
		`SchemeProxyHostRequestUri:` + strings.Replace(fmt.Sprintf("%v", this.SchemeProxyHostRequestUri), "CacheTTLEnableProps", "CacheTTLEnableProps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNCacheRule) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRuleExpressionList := "[]*CDNCacheRuleExpressionList{"
	for _, f := range this.RuleExpressionList {
		repeatedStringForRuleExpressionList += strings.Replace(f.String(), "CDNCacheRuleExpressionList", "CDNCacheRuleExpressionList", 1) + ","
	}
	repeatedStringForRuleExpressionList += "}"
	s := strings.Join([]string{`&CDNCacheRule{`,
		`RuleName:` + fmt.Sprintf("%v", this.RuleName) + `,`,
		`RuleExpressionList:` + repeatedStringForRuleExpressionList + `,`,
		`CacheActions:` + fmt.Sprintf("%v", this.CacheActions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNCacheRule_CacheBypass) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNCacheRule_CacheBypass{`,
		`CacheBypass:` + strings.Replace(fmt.Sprintf("%v", this.CacheBypass), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNCacheRule_EligibleForCache) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNCacheRule_EligibleForCache{`,
		`EligibleForCache:` + strings.Replace(fmt.Sprintf("%v", this.EligibleForCache), "CacheEligibleOptions", "CacheEligibleOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DefaultCacheTTLProps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultCacheTTLProps{`,
		`CacheTtl:` + fmt.Sprintf("%v", this.CacheTtl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DefaultCacheAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultCacheAction{`,
		`CacheActions:` + fmt.Sprintf("%v", this.CacheActions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DefaultCacheAction_EligibleForCache) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultCacheAction_EligibleForCache{`,
		`EligibleForCache:` + strings.Replace(fmt.Sprintf("%v", this.EligibleForCache), "DefaultCacheTTLProps", "DefaultCacheTTLProps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DefaultCacheAction_CacheTtlDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultCacheAction_CacheTtlDefault{`,
		`CacheTtlDefault:` + fmt.Sprintf("%v", this.CacheTtlDefault) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DefaultCacheAction_CacheTtlOverride) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultCacheAction_CacheTtlOverride{`,
		`CacheTtlOverride:` + fmt.Sprintf("%v", this.CacheTtlOverride) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DefaultCacheAction_CacheDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultCacheAction_CacheDisabled{`,
		`CacheDisabled:` + strings.Replace(fmt.Sprintf("%v", this.CacheDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheOptions) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCacheRules := "[]*CDNCacheRule{"
	for _, f := range this.CacheRules {
		repeatedStringForCacheRules += strings.Replace(f.String(), "CDNCacheRule", "CDNCacheRule", 1) + ","
	}
	repeatedStringForCacheRules += "}"
	s := strings.Join([]string{`&CacheOptions{`,
		`DefaultCacheAction:` + strings.Replace(this.DefaultCacheAction.String(), "DefaultCacheAction", "DefaultCacheAction", 1) + `,`,
		`CacheRules:` + repeatedStringForCacheRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheTTLOptionsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheTTLOptionsType{`,
		`TtlOptions:` + fmt.Sprintf("%v", this.TtlOptions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheTTLOptionsType_CacheTtlDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheTTLOptionsType_CacheTtlDefault{`,
		`CacheTtlDefault:` + fmt.Sprintf("%v", this.CacheTtlDefault) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheTTLOptionsType_CacheTtlOverride) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheTTLOptionsType_CacheTtlOverride{`,
		`CacheTtlOverride:` + fmt.Sprintf("%v", this.CacheTtlOverride) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CacheTTLOptionsType_CacheDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CacheTTLOptionsType_CacheDisabled{`,
		`CacheDisabled:` + strings.Replace(fmt.Sprintf("%v", this.CacheDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvancedOptionsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvancedOptionsType{`,
		`HeaderOptions:` + strings.Replace(this.HeaderOptions.String(), "HeaderControlType", "HeaderControlType", 1) + `,`,
		`SecurityOptions:` + strings.Replace(this.SecurityOptions.String(), "SecurityOptionsType", "SecurityOptionsType", 1) + `,`,
		`LoggingOptions:` + strings.Replace(this.LoggingOptions.String(), "LoggingOptionsType", "LoggingOptionsType", 1) + `,`,
		`CacheTtlOptions:` + strings.Replace(this.CacheTtlOptions.String(), "CacheTTLOptionsType", "CacheTTLOptionsType", 1) + `,`,
		`CacheOptions:` + strings.Replace(this.CacheOptions.String(), "CacheOptions", "CacheOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNTLSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNTLSConfig{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNTLSConfig_Tls_12Plus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNTLSConfig_Tls_12Plus{`,
		`Tls_12Plus:` + strings.Replace(fmt.Sprintf("%v", this.Tls_12Plus), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNTLSConfig_Tls_11Plus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNTLSConfig_Tls_11Plus{`,
		`Tls_11Plus:` + strings.Replace(fmt.Sprintf("%v", this.Tls_11Plus), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNHTTPSAutoCertsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNHTTPSAutoCertsType{`,
		`HttpRedirect:` + fmt.Sprintf("%v", this.HttpRedirect) + `,`,
		`AddHsts:` + fmt.Sprintf("%v", this.AddHsts) + `,`,
		`TlsConfig:` + strings.Replace(this.TlsConfig.String(), "CDNTLSConfig", "CDNTLSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNDownstreamTlsParamsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTlsCertificates := "[]*TlsCertificateType{"
	for _, f := range this.TlsCertificates {
		repeatedStringForTlsCertificates += strings.Replace(fmt.Sprintf("%v", f), "TlsCertificateType", "schema.TlsCertificateType", 1) + ","
	}
	repeatedStringForTlsCertificates += "}"
	s := strings.Join([]string{`&CDNDownstreamTlsParamsType{`,
		`TlsConfig:` + strings.Replace(this.TlsConfig.String(), "CDNTLSConfig", "CDNTLSConfig", 1) + `,`,
		`TlsCertificates:` + repeatedStringForTlsCertificates + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNHTTPSCustomCertsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNHTTPSCustomCertsType{`,
		`HttpRedirect:` + fmt.Sprintf("%v", this.HttpRedirect) + `,`,
		`AddHsts:` + fmt.Sprintf("%v", this.AddHsts) + `,`,
		`TlsParameters:` + strings.Replace(this.TlsParameters.String(), "CDNDownstreamTlsParamsType", "CDNDownstreamTlsParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCacheRules := "[]*CDNCacheRule{"
	for _, f := range this.CacheRules {
		repeatedStringForCacheRules += strings.Replace(f.String(), "CDNCacheRule", "CDNCacheRule", 1) + ","
	}
	repeatedStringForCacheRules += "}"
	repeatedStringForWafExclusionRules := "[]*SimpleWafExclusionRule{"
	for _, f := range this.WafExclusionRules {
		repeatedStringForWafExclusionRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleWafExclusionRule", "policy.SimpleWafExclusionRule", 1) + ","
	}
	repeatedStringForWafExclusionRules += "}"
	repeatedStringForDataGuardRules := "[]*SimpleDataGuardRule{"
	for _, f := range this.DataGuardRules {
		repeatedStringForDataGuardRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleDataGuardRule", "policy.SimpleDataGuardRule", 1) + ","
	}
	repeatedStringForDataGuardRules += "}"
	repeatedStringForGraphqlRules := "[]*GraphQLRule{"
	for _, f := range this.GraphqlRules {
		repeatedStringForGraphqlRules += strings.Replace(fmt.Sprintf("%v", f), "GraphQLRule", "policy.GraphQLRule", 1) + ","
	}
	repeatedStringForGraphqlRules += "}"
	repeatedStringForProtectedCookies := "[]*CookieManipulationOptionType{"
	for _, f := range this.ProtectedCookies {
		repeatedStringForProtectedCookies += strings.Replace(fmt.Sprintf("%v", f), "CookieManipulationOptionType", "schema.CookieManipulationOptionType", 1) + ","
	}
	repeatedStringForProtectedCookies += "}"
	repeatedStringForDdosMitigationRules := "[]*DDoSMitigationRule{"
	for _, f := range this.DdosMitigationRules {
		repeatedStringForDdosMitigationRules += strings.Replace(fmt.Sprintf("%v", f), "DDoSMitigationRule", "common_security.DDoSMitigationRule", 1) + ","
	}
	repeatedStringForDdosMitigationRules += "}"
	repeatedStringForTrustedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.TrustedClients {
		repeatedStringForTrustedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForTrustedClients += "}"
	repeatedStringForBlockedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.BlockedClients {
		repeatedStringForBlockedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForBlockedClients += "}"
	repeatedStringForDnsInfo := "[]*DnsInfo{"
	for _, f := range this.DnsInfo {
		repeatedStringForDnsInfo += strings.Replace(fmt.Sprintf("%v", f), "DnsInfo", "virtual_host_dns_info.DnsInfo", 1) + ","
	}
	repeatedStringForDnsInfo += "}"
	repeatedStringForServiceDomains := "[]*ServiceDomain{"
	for _, f := range this.ServiceDomains {
		repeatedStringForServiceDomains += strings.Replace(fmt.Sprintf("%v", f), "ServiceDomain", "virtual_host.ServiceDomain", 1) + ","
	}
	repeatedStringForServiceDomains += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`MoreOption:` + strings.Replace(this.MoreOption.String(), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`OriginPool:` + strings.Replace(this.OriginPool.String(), "CdnOriginPoolType", "CdnOriginPoolType", 1) + `,`,
		`OtherSettings:` + strings.Replace(this.OtherSettings.String(), "OtherSettings", "OtherSettings", 1) + `,`,
		`DefaultCacheAction:` + strings.Replace(this.DefaultCacheAction.String(), "DefaultCacheAction", "DefaultCacheAction", 1) + `,`,
		`CacheRules:` + repeatedStringForCacheRules + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`WafExclusionRules:` + repeatedStringForWafExclusionRules + `,`,
		`DataGuardRules:` + repeatedStringForDataGuardRules + `,`,
		`CsrfPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CsrfPolicy), "CsrfPolicy", "schema.CsrfPolicy", 1) + `,`,
		`GraphqlRules:` + repeatedStringForGraphqlRules + `,`,
		`ProtectedCookies:` + repeatedStringForProtectedCookies + `,`,
		`BotDefenseChoice:` + fmt.Sprintf("%v", this.BotDefenseChoice) + `,`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`ApiProtectionRules:` + strings.Replace(fmt.Sprintf("%v", this.ApiProtectionRules), "APIProtectionRules", "common_waf.APIProtectionRules", 1) + `,`,
		`JwtValidation:` + strings.Replace(fmt.Sprintf("%v", this.JwtValidation), "JWTValidation", "common_waf.JWTValidation", 1) + `,`,
		`ApiDiscoveryChoice:` + fmt.Sprintf("%v", this.ApiDiscoveryChoice) + `,`,
		`SensitiveDataPolicyChoice:` + fmt.Sprintf("%v", this.SensitiveDataPolicyChoice) + `,`,
		`L7DdosAutoMitigationAction:` + fmt.Sprintf("%v", this.L7DdosAutoMitigationAction) + `,`,
		`DdosMitigationRules:` + repeatedStringForDdosMitigationRules + `,`,
		`SlowDdosMitigationChoice:` + fmt.Sprintf("%v", this.SlowDdosMitigationChoice) + `,`,
		`ClientSideDefenseChoice:` + fmt.Sprintf("%v", this.ClientSideDefenseChoice) + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`IpReputationChoice:` + fmt.Sprintf("%v", this.IpReputationChoice) + `,`,
		`ThreatMeshChoice:` + fmt.Sprintf("%v", this.ThreatMeshChoice) + `,`,
		`UserIdChoice:` + fmt.Sprintf("%v", this.UserIdChoice) + `,`,
		`MaliciousUserDetectionChoice:` + fmt.Sprintf("%v", this.MaliciousUserDetectionChoice) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`TrustedClients:` + repeatedStringForTrustedClients + `,`,
		`BlockedClients:` + repeatedStringForBlockedClients + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + repeatedStringForDnsInfo + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`AutoCertState:` + fmt.Sprintf("%v", this.AutoCertState) + `,`,
		`AutoCertInfo:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertInfo), "AutoCertInfoType", "virtual_host.AutoCertInfoType", 1) + `,`,
		`ServiceDomains:` + repeatedStringForServiceDomains + `,`,
		`CertState:` + fmt.Sprintf("%v", this.CertState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "http_loadbalancer.ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "CDNHTTPSAutoCertsType", "CDNHTTPSAutoCertsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "CDNHTTPSCustomCertsType", "CDNHTTPSCustomCertsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AppFirewallOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AppFirewallOnCacheMiss{`,
		`AppFirewallOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewallOnCacheMiss), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableBotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableBotDefense{`,
		`DisableBotDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableBotDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BotDefense{`,
		`BotDefense:` + strings.Replace(fmt.Sprintf("%v", this.BotDefense), "ShapeBotDefenseType", "common_security.ShapeBotDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BotDefenseAdvanced) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BotDefenseAdvanced{`,
		`BotDefenseAdvanced:` + strings.Replace(fmt.Sprintf("%v", this.BotDefenseAdvanced), "BotDefenseAdvancedType", "common_security.BotDefenseAdvancedType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ApiSpecification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ApiSpecification{`,
		`ApiSpecification:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecification), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ApiSpecificationOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ApiSpecificationOnCacheMiss{`,
		`ApiSpecificationOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecificationOnCacheMiss), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableApiDiscovery{`,
		`DisableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDiscovery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableApiDiscovery{`,
		`EnableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.EnableApiDiscovery), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ApiDiscoveryOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ApiDiscoveryOnCacheMiss{`,
		`ApiDiscoveryOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ApiDiscoveryOnCacheMiss), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultSensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultSensitiveDataPolicy{`,
		`DefaultSensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSensitiveDataPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SensitiveDataPolicy{`,
		`SensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SensitiveDataPolicy), "SensitiveDataPolicySettings", "common_security.SensitiveDataPolicySettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_L7DdosActionDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_L7DdosActionDefault{`,
		`L7DdosActionDefault:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_L7DdosActionBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_L7DdosActionBlock{`,
		`L7DdosActionBlock:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionBlock), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_L7DdosActionJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_L7DdosActionJsChallenge{`,
		`L7DdosActionJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionJsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_L7DdosActionNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_L7DdosActionNone{`,
		`L7DdosActionNone:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SystemDefaultTimeouts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SystemDefaultTimeouts{`,
		`SystemDefaultTimeouts:` + strings.Replace(fmt.Sprintf("%v", this.SystemDefaultTimeouts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SlowDdosMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SlowDdosMitigation{`,
		`SlowDdosMitigation:` + strings.Replace(fmt.Sprintf("%v", this.SlowDdosMitigation), "SlowDDoSMitigation", "virtual_host.SlowDDoSMitigation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableClientSideDefense{`,
		`DisableClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableClientSideDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ClientSideDefense{`,
		`ClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.ClientSideDefense), "ClientSideDefenseType", "common_security.ClientSideDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "common_waf.ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableIpReputation{`,
		`DisableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.DisableIpReputation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableIpReputation{`,
		`EnableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.EnableIpReputation), "IPThreatCategoryListType", "common_waf.IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IpReputationOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IpReputationOnCacheMiss{`,
		`IpReputationOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.IpReputationOnCacheMiss), "IPThreatCategoryListType", "common_waf.IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableThreatMesh{`,
		`DisableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.DisableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableThreatMesh{`,
		`EnableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.EnableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UserIdClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UserIdClientIp{`,
		`UserIdClientIp:` + strings.Replace(fmt.Sprintf("%v", this.UserIdClientIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UserIdentification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UserIdentification{`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableMaliciousUserDetection{`,
		`DisableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.DisableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableMaliciousUserDetection{`,
		`EnableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.EnableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_MaliciousUserDetectionOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_MaliciousUserDetectionOnCacheMiss{`,
		`MaliciousUserDetectionOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserDetectionOnCacheMiss), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableChallenge{`,
		`EnableChallenge:` + strings.Replace(fmt.Sprintf("%v", this.EnableChallenge), "EnableChallenge", "common_waf.EnableChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ChallengeOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ChallengeOnCacheMiss{`,
		`ChallengeOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ChallengeOnCacheMiss), "EnableChallenge", "common_waf.EnableChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "common_waf.PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ApiRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ApiRateLimit{`,
		`ApiRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimit), "APIRateLimit", "common_waf.APIRateLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "common_waf.RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IpFilteringOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IpFilteringOptions{`,
		`IpFilteringType:` + fmt.Sprintf("%v", this.IpFilteringType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IpFilteringOptions_AllowList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IpFilteringOptions_AllowList{`,
		`AllowList:` + strings.Replace(fmt.Sprintf("%v", this.AllowList), "PrefixMatchList", "policy.PrefixMatchList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IpFilteringOptions_BlockList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IpFilteringOptions_BlockList{`,
		`BlockList:` + strings.Replace(fmt.Sprintf("%v", this.BlockList), "PrefixMatchList", "policy.PrefixMatchList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GeoFilteringOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GeoFilteringOptions{`,
		`GeoFilteringType:` + fmt.Sprintf("%v", this.GeoFilteringType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GeoFilteringOptions_AllowList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GeoFilteringOptions_AllowList{`,
		`AllowList:` + strings.Replace(fmt.Sprintf("%v", this.AllowList), "CountryCodeList", "policy.CountryCodeList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GeoFilteringOptions_BlockList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GeoFilteringOptions_BlockList{`,
		`BlockList:` + strings.Replace(fmt.Sprintf("%v", this.BlockList), "CountryCodeList", "policy.CountryCodeList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogHeaderOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogHeaderOptions{`,
		`HeaderList:` + fmt.Sprintf("%v", this.HeaderList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNCustomAuthentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNCustomAuthentication{`,
		`CustomAuthConfig:` + fmt.Sprintf("%v", this.CustomAuthConfig) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationOptions{`,
		`AuthOptions:` + fmt.Sprintf("%v", this.AuthOptions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationOptions_DisableAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationOptions_DisableAuth{`,
		`DisableAuth:` + strings.Replace(fmt.Sprintf("%v", this.DisableAuth), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationOptions_Jwt) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationOptions_Jwt{`,
		`Jwt:` + strings.Replace(fmt.Sprintf("%v", this.Jwt), "JwtTokenAuthOptions", "policy.JwtTokenAuthOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationOptions_Custom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationOptions_Custom{`,
		`Custom:` + strings.Replace(fmt.Sprintf("%v", this.Custom), "CDNCustomAuthentication", "CDNCustomAuthentication", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNOriginServerType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNOriginServerType{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNOriginServerType_PublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNOriginServerType_PublicIp{`,
		`PublicIp:` + strings.Replace(fmt.Sprintf("%v", this.PublicIp), "OriginServerPublicIP", "origin_pool.OriginServerPublicIP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNOriginServerType_PublicName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNOriginServerType_PublicName{`,
		`PublicName:` + strings.Replace(fmt.Sprintf("%v", this.PublicName), "OriginServerPublicName", "origin_pool.OriginServerPublicName", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CdnOriginPoolType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginServers := "[]*CDNOriginServerType{"
	for _, f := range this.OriginServers {
		repeatedStringForOriginServers += strings.Replace(f.String(), "CDNOriginServerType", "CDNOriginServerType", 1) + ","
	}
	repeatedStringForOriginServers += "}"
	s := strings.Join([]string{`&CdnOriginPoolType{`,
		`PublicName:` + strings.Replace(fmt.Sprintf("%v", this.PublicName), "OriginServerPublicName", "origin_pool.OriginServerPublicName", 1) + `,`,
		`TlsChoice:` + fmt.Sprintf("%v", this.TlsChoice) + `,`,
		`OriginServers:` + repeatedStringForOriginServers + `,`,
		`FollowOriginRedirect:` + fmt.Sprintf("%v", this.FollowOriginRedirect) + `,`,
		`OriginRequestTimeout:` + fmt.Sprintf("%v", this.OriginRequestTimeout) + `,`,
		`MoreOriginOptions:` + strings.Replace(this.MoreOriginOptions.String(), "OriginAdvancedConfiguration", "OriginAdvancedConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CdnOriginPoolType_NoTls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CdnOriginPoolType_NoTls{`,
		`NoTls:` + strings.Replace(fmt.Sprintf("%v", this.NoTls), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CdnOriginPoolType_UseTls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CdnOriginPoolType_UseTls{`,
		`UseTls:` + strings.Replace(fmt.Sprintf("%v", this.UseTls), "UpstreamTlsParameters", "origin_pool.UpstreamTlsParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginAdvancedConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginAdvancedConfiguration{`,
		`DisableByteRangeRequest:` + fmt.Sprintf("%v", this.DisableByteRangeRequest) + `,`,
		`WebsocketProxy:` + fmt.Sprintf("%v", this.WebsocketProxy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCacheRules := "[]*CDNCacheRule{"
	for _, f := range this.CacheRules {
		repeatedStringForCacheRules += strings.Replace(f.String(), "CDNCacheRule", "CDNCacheRule", 1) + ","
	}
	repeatedStringForCacheRules += "}"
	repeatedStringForWafExclusionRules := "[]*SimpleWafExclusionRule{"
	for _, f := range this.WafExclusionRules {
		repeatedStringForWafExclusionRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleWafExclusionRule", "policy.SimpleWafExclusionRule", 1) + ","
	}
	repeatedStringForWafExclusionRules += "}"
	repeatedStringForDataGuardRules := "[]*SimpleDataGuardRule{"
	for _, f := range this.DataGuardRules {
		repeatedStringForDataGuardRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleDataGuardRule", "policy.SimpleDataGuardRule", 1) + ","
	}
	repeatedStringForDataGuardRules += "}"
	repeatedStringForGraphqlRules := "[]*GraphQLRule{"
	for _, f := range this.GraphqlRules {
		repeatedStringForGraphqlRules += strings.Replace(fmt.Sprintf("%v", f), "GraphQLRule", "policy.GraphQLRule", 1) + ","
	}
	repeatedStringForGraphqlRules += "}"
	repeatedStringForProtectedCookies := "[]*CookieManipulationOptionType{"
	for _, f := range this.ProtectedCookies {
		repeatedStringForProtectedCookies += strings.Replace(fmt.Sprintf("%v", f), "CookieManipulationOptionType", "schema.CookieManipulationOptionType", 1) + ","
	}
	repeatedStringForProtectedCookies += "}"
	repeatedStringForDdosMitigationRules := "[]*DDoSMitigationRule{"
	for _, f := range this.DdosMitigationRules {
		repeatedStringForDdosMitigationRules += strings.Replace(fmt.Sprintf("%v", f), "DDoSMitigationRule", "common_security.DDoSMitigationRule", 1) + ","
	}
	repeatedStringForDdosMitigationRules += "}"
	repeatedStringForTrustedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.TrustedClients {
		repeatedStringForTrustedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForTrustedClients += "}"
	repeatedStringForBlockedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.BlockedClients {
		repeatedStringForBlockedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForBlockedClients += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`MoreOption:` + strings.Replace(this.MoreOption.String(), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`OriginPool:` + strings.Replace(this.OriginPool.String(), "CdnOriginPoolType", "CdnOriginPoolType", 1) + `,`,
		`OtherSettings:` + strings.Replace(this.OtherSettings.String(), "OtherSettings", "OtherSettings", 1) + `,`,
		`DefaultCacheAction:` + strings.Replace(this.DefaultCacheAction.String(), "DefaultCacheAction", "DefaultCacheAction", 1) + `,`,
		`CacheRules:` + repeatedStringForCacheRules + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`WafExclusionRules:` + repeatedStringForWafExclusionRules + `,`,
		`DataGuardRules:` + repeatedStringForDataGuardRules + `,`,
		`CsrfPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CsrfPolicy), "CsrfPolicy", "schema.CsrfPolicy", 1) + `,`,
		`GraphqlRules:` + repeatedStringForGraphqlRules + `,`,
		`ProtectedCookies:` + repeatedStringForProtectedCookies + `,`,
		`BotDefenseChoice:` + fmt.Sprintf("%v", this.BotDefenseChoice) + `,`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`ApiProtectionRules:` + strings.Replace(fmt.Sprintf("%v", this.ApiProtectionRules), "APIProtectionRules", "common_waf.APIProtectionRules", 1) + `,`,
		`JwtValidation:` + strings.Replace(fmt.Sprintf("%v", this.JwtValidation), "JWTValidation", "common_waf.JWTValidation", 1) + `,`,
		`ApiDiscoveryChoice:` + fmt.Sprintf("%v", this.ApiDiscoveryChoice) + `,`,
		`SensitiveDataPolicyChoice:` + fmt.Sprintf("%v", this.SensitiveDataPolicyChoice) + `,`,
		`L7DdosAutoMitigationAction:` + fmt.Sprintf("%v", this.L7DdosAutoMitigationAction) + `,`,
		`DdosMitigationRules:` + repeatedStringForDdosMitigationRules + `,`,
		`SlowDdosMitigationChoice:` + fmt.Sprintf("%v", this.SlowDdosMitigationChoice) + `,`,
		`ClientSideDefenseChoice:` + fmt.Sprintf("%v", this.ClientSideDefenseChoice) + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`IpReputationChoice:` + fmt.Sprintf("%v", this.IpReputationChoice) + `,`,
		`ThreatMeshChoice:` + fmt.Sprintf("%v", this.ThreatMeshChoice) + `,`,
		`UserIdChoice:` + fmt.Sprintf("%v", this.UserIdChoice) + `,`,
		`MaliciousUserDetectionChoice:` + fmt.Sprintf("%v", this.MaliciousUserDetectionChoice) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`TrustedClients:` + repeatedStringForTrustedClients + `,`,
		`BlockedClients:` + repeatedStringForBlockedClients + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "http_loadbalancer.ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "CDNHTTPSAutoCertsType", "CDNHTTPSAutoCertsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "CDNHTTPSCustomCertsType", "CDNHTTPSCustomCertsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AppFirewallOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AppFirewallOnCacheMiss{`,
		`AppFirewallOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewallOnCacheMiss), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableBotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableBotDefense{`,
		`DisableBotDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableBotDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BotDefense{`,
		`BotDefense:` + strings.Replace(fmt.Sprintf("%v", this.BotDefense), "ShapeBotDefenseType", "common_security.ShapeBotDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BotDefenseAdvanced) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BotDefenseAdvanced{`,
		`BotDefenseAdvanced:` + strings.Replace(fmt.Sprintf("%v", this.BotDefenseAdvanced), "BotDefenseAdvancedType", "common_security.BotDefenseAdvancedType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ApiSpecification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ApiSpecification{`,
		`ApiSpecification:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecification), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ApiSpecificationOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ApiSpecificationOnCacheMiss{`,
		`ApiSpecificationOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecificationOnCacheMiss), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableApiDiscovery{`,
		`DisableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDiscovery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableApiDiscovery{`,
		`EnableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.EnableApiDiscovery), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ApiDiscoveryOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ApiDiscoveryOnCacheMiss{`,
		`ApiDiscoveryOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ApiDiscoveryOnCacheMiss), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultSensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultSensitiveDataPolicy{`,
		`DefaultSensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSensitiveDataPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SensitiveDataPolicy{`,
		`SensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SensitiveDataPolicy), "SensitiveDataPolicySettings", "common_security.SensitiveDataPolicySettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_L7DdosActionDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_L7DdosActionDefault{`,
		`L7DdosActionDefault:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_L7DdosActionBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_L7DdosActionBlock{`,
		`L7DdosActionBlock:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionBlock), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_L7DdosActionJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_L7DdosActionJsChallenge{`,
		`L7DdosActionJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionJsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_L7DdosActionNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_L7DdosActionNone{`,
		`L7DdosActionNone:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SystemDefaultTimeouts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SystemDefaultTimeouts{`,
		`SystemDefaultTimeouts:` + strings.Replace(fmt.Sprintf("%v", this.SystemDefaultTimeouts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SlowDdosMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SlowDdosMitigation{`,
		`SlowDdosMitigation:` + strings.Replace(fmt.Sprintf("%v", this.SlowDdosMitigation), "SlowDDoSMitigation", "virtual_host.SlowDDoSMitigation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableClientSideDefense{`,
		`DisableClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableClientSideDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ClientSideDefense{`,
		`ClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.ClientSideDefense), "ClientSideDefenseType", "common_security.ClientSideDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "common_waf.ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableIpReputation{`,
		`DisableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.DisableIpReputation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableIpReputation{`,
		`EnableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.EnableIpReputation), "IPThreatCategoryListType", "common_waf.IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IpReputationOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IpReputationOnCacheMiss{`,
		`IpReputationOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.IpReputationOnCacheMiss), "IPThreatCategoryListType", "common_waf.IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableThreatMesh{`,
		`DisableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.DisableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableThreatMesh{`,
		`EnableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.EnableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UserIdClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UserIdClientIp{`,
		`UserIdClientIp:` + strings.Replace(fmt.Sprintf("%v", this.UserIdClientIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UserIdentification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UserIdentification{`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableMaliciousUserDetection{`,
		`DisableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.DisableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableMaliciousUserDetection{`,
		`EnableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.EnableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_MaliciousUserDetectionOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_MaliciousUserDetectionOnCacheMiss{`,
		`MaliciousUserDetectionOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserDetectionOnCacheMiss), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableChallenge{`,
		`EnableChallenge:` + strings.Replace(fmt.Sprintf("%v", this.EnableChallenge), "EnableChallenge", "common_waf.EnableChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ChallengeOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ChallengeOnCacheMiss{`,
		`ChallengeOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ChallengeOnCacheMiss), "EnableChallenge", "common_waf.EnableChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "common_waf.PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ApiRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ApiRateLimit{`,
		`ApiRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimit), "APIRateLimit", "common_waf.APIRateLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "common_waf.RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCacheRules := "[]*CDNCacheRule{"
	for _, f := range this.CacheRules {
		repeatedStringForCacheRules += strings.Replace(f.String(), "CDNCacheRule", "CDNCacheRule", 1) + ","
	}
	repeatedStringForCacheRules += "}"
	repeatedStringForWafExclusionRules := "[]*SimpleWafExclusionRule{"
	for _, f := range this.WafExclusionRules {
		repeatedStringForWafExclusionRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleWafExclusionRule", "policy.SimpleWafExclusionRule", 1) + ","
	}
	repeatedStringForWafExclusionRules += "}"
	repeatedStringForDataGuardRules := "[]*SimpleDataGuardRule{"
	for _, f := range this.DataGuardRules {
		repeatedStringForDataGuardRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleDataGuardRule", "policy.SimpleDataGuardRule", 1) + ","
	}
	repeatedStringForDataGuardRules += "}"
	repeatedStringForGraphqlRules := "[]*GraphQLRule{"
	for _, f := range this.GraphqlRules {
		repeatedStringForGraphqlRules += strings.Replace(fmt.Sprintf("%v", f), "GraphQLRule", "policy.GraphQLRule", 1) + ","
	}
	repeatedStringForGraphqlRules += "}"
	repeatedStringForProtectedCookies := "[]*CookieManipulationOptionType{"
	for _, f := range this.ProtectedCookies {
		repeatedStringForProtectedCookies += strings.Replace(fmt.Sprintf("%v", f), "CookieManipulationOptionType", "schema.CookieManipulationOptionType", 1) + ","
	}
	repeatedStringForProtectedCookies += "}"
	repeatedStringForDdosMitigationRules := "[]*DDoSMitigationRule{"
	for _, f := range this.DdosMitigationRules {
		repeatedStringForDdosMitigationRules += strings.Replace(fmt.Sprintf("%v", f), "DDoSMitigationRule", "common_security.DDoSMitigationRule", 1) + ","
	}
	repeatedStringForDdosMitigationRules += "}"
	repeatedStringForTrustedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.TrustedClients {
		repeatedStringForTrustedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForTrustedClients += "}"
	repeatedStringForBlockedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.BlockedClients {
		repeatedStringForBlockedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForBlockedClients += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`MoreOption:` + strings.Replace(this.MoreOption.String(), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`OriginPool:` + strings.Replace(this.OriginPool.String(), "CdnOriginPoolType", "CdnOriginPoolType", 1) + `,`,
		`OtherSettings:` + strings.Replace(this.OtherSettings.String(), "OtherSettings", "OtherSettings", 1) + `,`,
		`DefaultCacheAction:` + strings.Replace(this.DefaultCacheAction.String(), "DefaultCacheAction", "DefaultCacheAction", 1) + `,`,
		`CacheRules:` + repeatedStringForCacheRules + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`WafExclusionRules:` + repeatedStringForWafExclusionRules + `,`,
		`DataGuardRules:` + repeatedStringForDataGuardRules + `,`,
		`CsrfPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CsrfPolicy), "CsrfPolicy", "schema.CsrfPolicy", 1) + `,`,
		`GraphqlRules:` + repeatedStringForGraphqlRules + `,`,
		`ProtectedCookies:` + repeatedStringForProtectedCookies + `,`,
		`BotDefenseChoice:` + fmt.Sprintf("%v", this.BotDefenseChoice) + `,`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`ApiProtectionRules:` + strings.Replace(fmt.Sprintf("%v", this.ApiProtectionRules), "APIProtectionRules", "common_waf.APIProtectionRules", 1) + `,`,
		`JwtValidation:` + strings.Replace(fmt.Sprintf("%v", this.JwtValidation), "JWTValidation", "common_waf.JWTValidation", 1) + `,`,
		`ApiDiscoveryChoice:` + fmt.Sprintf("%v", this.ApiDiscoveryChoice) + `,`,
		`SensitiveDataPolicyChoice:` + fmt.Sprintf("%v", this.SensitiveDataPolicyChoice) + `,`,
		`L7DdosAutoMitigationAction:` + fmt.Sprintf("%v", this.L7DdosAutoMitigationAction) + `,`,
		`DdosMitigationRules:` + repeatedStringForDdosMitigationRules + `,`,
		`SlowDdosMitigationChoice:` + fmt.Sprintf("%v", this.SlowDdosMitigationChoice) + `,`,
		`ClientSideDefenseChoice:` + fmt.Sprintf("%v", this.ClientSideDefenseChoice) + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`IpReputationChoice:` + fmt.Sprintf("%v", this.IpReputationChoice) + `,`,
		`ThreatMeshChoice:` + fmt.Sprintf("%v", this.ThreatMeshChoice) + `,`,
		`UserIdChoice:` + fmt.Sprintf("%v", this.UserIdChoice) + `,`,
		`MaliciousUserDetectionChoice:` + fmt.Sprintf("%v", this.MaliciousUserDetectionChoice) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`TrustedClients:` + repeatedStringForTrustedClients + `,`,
		`BlockedClients:` + repeatedStringForBlockedClients + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "http_loadbalancer.ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "CDNHTTPSAutoCertsType", "CDNHTTPSAutoCertsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "CDNHTTPSCustomCertsType", "CDNHTTPSCustomCertsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AppFirewallOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AppFirewallOnCacheMiss{`,
		`AppFirewallOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewallOnCacheMiss), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableBotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableBotDefense{`,
		`DisableBotDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableBotDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BotDefense{`,
		`BotDefense:` + strings.Replace(fmt.Sprintf("%v", this.BotDefense), "ShapeBotDefenseType", "common_security.ShapeBotDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BotDefenseAdvanced) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BotDefenseAdvanced{`,
		`BotDefenseAdvanced:` + strings.Replace(fmt.Sprintf("%v", this.BotDefenseAdvanced), "BotDefenseAdvancedType", "common_security.BotDefenseAdvancedType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ApiSpecification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ApiSpecification{`,
		`ApiSpecification:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecification), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ApiSpecificationOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ApiSpecificationOnCacheMiss{`,
		`ApiSpecificationOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecificationOnCacheMiss), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableApiDiscovery{`,
		`DisableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDiscovery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableApiDiscovery{`,
		`EnableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.EnableApiDiscovery), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ApiDiscoveryOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ApiDiscoveryOnCacheMiss{`,
		`ApiDiscoveryOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ApiDiscoveryOnCacheMiss), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultSensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultSensitiveDataPolicy{`,
		`DefaultSensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSensitiveDataPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SensitiveDataPolicy{`,
		`SensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SensitiveDataPolicy), "SensitiveDataPolicySettings", "common_security.SensitiveDataPolicySettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_L7DdosActionDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_L7DdosActionDefault{`,
		`L7DdosActionDefault:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_L7DdosActionBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_L7DdosActionBlock{`,
		`L7DdosActionBlock:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionBlock), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_L7DdosActionJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_L7DdosActionJsChallenge{`,
		`L7DdosActionJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionJsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_L7DdosActionNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_L7DdosActionNone{`,
		`L7DdosActionNone:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SystemDefaultTimeouts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SystemDefaultTimeouts{`,
		`SystemDefaultTimeouts:` + strings.Replace(fmt.Sprintf("%v", this.SystemDefaultTimeouts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SlowDdosMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SlowDdosMitigation{`,
		`SlowDdosMitigation:` + strings.Replace(fmt.Sprintf("%v", this.SlowDdosMitigation), "SlowDDoSMitigation", "virtual_host.SlowDDoSMitigation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableClientSideDefense{`,
		`DisableClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableClientSideDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ClientSideDefense{`,
		`ClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.ClientSideDefense), "ClientSideDefenseType", "common_security.ClientSideDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "common_waf.ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableIpReputation{`,
		`DisableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.DisableIpReputation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableIpReputation{`,
		`EnableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.EnableIpReputation), "IPThreatCategoryListType", "common_waf.IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IpReputationOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IpReputationOnCacheMiss{`,
		`IpReputationOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.IpReputationOnCacheMiss), "IPThreatCategoryListType", "common_waf.IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableThreatMesh{`,
		`DisableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.DisableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableThreatMesh{`,
		`EnableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.EnableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UserIdClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UserIdClientIp{`,
		`UserIdClientIp:` + strings.Replace(fmt.Sprintf("%v", this.UserIdClientIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UserIdentification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UserIdentification{`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableMaliciousUserDetection{`,
		`DisableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.DisableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableMaliciousUserDetection{`,
		`EnableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.EnableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_MaliciousUserDetectionOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_MaliciousUserDetectionOnCacheMiss{`,
		`MaliciousUserDetectionOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserDetectionOnCacheMiss), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableChallenge{`,
		`EnableChallenge:` + strings.Replace(fmt.Sprintf("%v", this.EnableChallenge), "EnableChallenge", "common_waf.EnableChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ChallengeOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ChallengeOnCacheMiss{`,
		`ChallengeOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ChallengeOnCacheMiss), "EnableChallenge", "common_waf.EnableChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "common_waf.PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ApiRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ApiRateLimit{`,
		`ApiRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimit), "APIRateLimit", "common_waf.APIRateLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "common_waf.RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCacheRules := "[]*CDNCacheRule{"
	for _, f := range this.CacheRules {
		repeatedStringForCacheRules += strings.Replace(f.String(), "CDNCacheRule", "CDNCacheRule", 1) + ","
	}
	repeatedStringForCacheRules += "}"
	repeatedStringForWafExclusionRules := "[]*SimpleWafExclusionRule{"
	for _, f := range this.WafExclusionRules {
		repeatedStringForWafExclusionRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleWafExclusionRule", "policy.SimpleWafExclusionRule", 1) + ","
	}
	repeatedStringForWafExclusionRules += "}"
	repeatedStringForDataGuardRules := "[]*SimpleDataGuardRule{"
	for _, f := range this.DataGuardRules {
		repeatedStringForDataGuardRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleDataGuardRule", "policy.SimpleDataGuardRule", 1) + ","
	}
	repeatedStringForDataGuardRules += "}"
	repeatedStringForGraphqlRules := "[]*GraphQLRule{"
	for _, f := range this.GraphqlRules {
		repeatedStringForGraphqlRules += strings.Replace(fmt.Sprintf("%v", f), "GraphQLRule", "policy.GraphQLRule", 1) + ","
	}
	repeatedStringForGraphqlRules += "}"
	repeatedStringForProtectedCookies := "[]*CookieManipulationOptionType{"
	for _, f := range this.ProtectedCookies {
		repeatedStringForProtectedCookies += strings.Replace(fmt.Sprintf("%v", f), "CookieManipulationOptionType", "schema.CookieManipulationOptionType", 1) + ","
	}
	repeatedStringForProtectedCookies += "}"
	repeatedStringForDdosMitigationRules := "[]*DDoSMitigationRule{"
	for _, f := range this.DdosMitigationRules {
		repeatedStringForDdosMitigationRules += strings.Replace(fmt.Sprintf("%v", f), "DDoSMitigationRule", "common_security.DDoSMitigationRule", 1) + ","
	}
	repeatedStringForDdosMitigationRules += "}"
	repeatedStringForTrustedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.TrustedClients {
		repeatedStringForTrustedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForTrustedClients += "}"
	repeatedStringForBlockedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.BlockedClients {
		repeatedStringForBlockedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForBlockedClients += "}"
	repeatedStringForDnsInfo := "[]*DnsInfo{"
	for _, f := range this.DnsInfo {
		repeatedStringForDnsInfo += strings.Replace(fmt.Sprintf("%v", f), "DnsInfo", "virtual_host_dns_info.DnsInfo", 1) + ","
	}
	repeatedStringForDnsInfo += "}"
	repeatedStringForServiceDomains := "[]*ServiceDomain{"
	for _, f := range this.ServiceDomains {
		repeatedStringForServiceDomains += strings.Replace(fmt.Sprintf("%v", f), "ServiceDomain", "virtual_host.ServiceDomain", 1) + ","
	}
	repeatedStringForServiceDomains += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`MoreOption:` + strings.Replace(this.MoreOption.String(), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`OriginPool:` + strings.Replace(this.OriginPool.String(), "CdnOriginPoolType", "CdnOriginPoolType", 1) + `,`,
		`OtherSettings:` + strings.Replace(this.OtherSettings.String(), "OtherSettings", "OtherSettings", 1) + `,`,
		`DefaultCacheAction:` + strings.Replace(this.DefaultCacheAction.String(), "DefaultCacheAction", "DefaultCacheAction", 1) + `,`,
		`CacheRules:` + repeatedStringForCacheRules + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`WafExclusionRules:` + repeatedStringForWafExclusionRules + `,`,
		`DataGuardRules:` + repeatedStringForDataGuardRules + `,`,
		`CsrfPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CsrfPolicy), "CsrfPolicy", "schema.CsrfPolicy", 1) + `,`,
		`GraphqlRules:` + repeatedStringForGraphqlRules + `,`,
		`ProtectedCookies:` + repeatedStringForProtectedCookies + `,`,
		`BotDefenseChoice:` + fmt.Sprintf("%v", this.BotDefenseChoice) + `,`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`ApiProtectionRules:` + strings.Replace(fmt.Sprintf("%v", this.ApiProtectionRules), "APIProtectionRules", "common_waf.APIProtectionRules", 1) + `,`,
		`JwtValidation:` + strings.Replace(fmt.Sprintf("%v", this.JwtValidation), "JWTValidation", "common_waf.JWTValidation", 1) + `,`,
		`ApiDiscoveryChoice:` + fmt.Sprintf("%v", this.ApiDiscoveryChoice) + `,`,
		`SensitiveDataPolicyChoice:` + fmt.Sprintf("%v", this.SensitiveDataPolicyChoice) + `,`,
		`L7DdosAutoMitigationAction:` + fmt.Sprintf("%v", this.L7DdosAutoMitigationAction) + `,`,
		`DdosMitigationRules:` + repeatedStringForDdosMitigationRules + `,`,
		`SlowDdosMitigationChoice:` + fmt.Sprintf("%v", this.SlowDdosMitigationChoice) + `,`,
		`ClientSideDefenseChoice:` + fmt.Sprintf("%v", this.ClientSideDefenseChoice) + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`IpReputationChoice:` + fmt.Sprintf("%v", this.IpReputationChoice) + `,`,
		`ThreatMeshChoice:` + fmt.Sprintf("%v", this.ThreatMeshChoice) + `,`,
		`UserIdChoice:` + fmt.Sprintf("%v", this.UserIdChoice) + `,`,
		`MaliciousUserDetectionChoice:` + fmt.Sprintf("%v", this.MaliciousUserDetectionChoice) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`TrustedClients:` + repeatedStringForTrustedClients + `,`,
		`BlockedClients:` + repeatedStringForBlockedClients + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + repeatedStringForDnsInfo + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`AutoCertInfo:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertInfo), "AutoCertInfoType", "virtual_host.AutoCertInfoType", 1) + `,`,
		`ServiceDomains:` + repeatedStringForServiceDomains + `,`,
		`CertState:` + fmt.Sprintf("%v", this.CertState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "http_loadbalancer.ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "CDNHTTPSAutoCertsType", "CDNHTTPSAutoCertsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "CDNHTTPSCustomCertsType", "CDNHTTPSCustomCertsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AppFirewallOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AppFirewallOnCacheMiss{`,
		`AppFirewallOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewallOnCacheMiss), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableBotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableBotDefense{`,
		`DisableBotDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableBotDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BotDefense{`,
		`BotDefense:` + strings.Replace(fmt.Sprintf("%v", this.BotDefense), "ShapeBotDefenseType", "common_security.ShapeBotDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BotDefenseAdvanced) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BotDefenseAdvanced{`,
		`BotDefenseAdvanced:` + strings.Replace(fmt.Sprintf("%v", this.BotDefenseAdvanced), "BotDefenseAdvancedType", "common_security.BotDefenseAdvancedType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ApiSpecification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ApiSpecification{`,
		`ApiSpecification:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecification), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ApiSpecificationOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ApiSpecificationOnCacheMiss{`,
		`ApiSpecificationOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecificationOnCacheMiss), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableApiDiscovery{`,
		`DisableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDiscovery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableApiDiscovery{`,
		`EnableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.EnableApiDiscovery), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ApiDiscoveryOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ApiDiscoveryOnCacheMiss{`,
		`ApiDiscoveryOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ApiDiscoveryOnCacheMiss), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultSensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultSensitiveDataPolicy{`,
		`DefaultSensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSensitiveDataPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SensitiveDataPolicy{`,
		`SensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SensitiveDataPolicy), "SensitiveDataPolicySettings", "common_security.SensitiveDataPolicySettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_L7DdosActionDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_L7DdosActionDefault{`,
		`L7DdosActionDefault:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_L7DdosActionBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_L7DdosActionBlock{`,
		`L7DdosActionBlock:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionBlock), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_L7DdosActionJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_L7DdosActionJsChallenge{`,
		`L7DdosActionJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionJsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_L7DdosActionNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_L7DdosActionNone{`,
		`L7DdosActionNone:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SystemDefaultTimeouts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SystemDefaultTimeouts{`,
		`SystemDefaultTimeouts:` + strings.Replace(fmt.Sprintf("%v", this.SystemDefaultTimeouts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SlowDdosMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SlowDdosMitigation{`,
		`SlowDdosMitigation:` + strings.Replace(fmt.Sprintf("%v", this.SlowDdosMitigation), "SlowDDoSMitigation", "virtual_host.SlowDDoSMitigation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableClientSideDefense{`,
		`DisableClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableClientSideDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ClientSideDefense{`,
		`ClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.ClientSideDefense), "ClientSideDefenseType", "common_security.ClientSideDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "common_waf.ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableIpReputation{`,
		`DisableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.DisableIpReputation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableIpReputation{`,
		`EnableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.EnableIpReputation), "IPThreatCategoryListType", "common_waf.IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IpReputationOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IpReputationOnCacheMiss{`,
		`IpReputationOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.IpReputationOnCacheMiss), "IPThreatCategoryListType", "common_waf.IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableThreatMesh{`,
		`DisableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.DisableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableThreatMesh{`,
		`EnableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.EnableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UserIdClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UserIdClientIp{`,
		`UserIdClientIp:` + strings.Replace(fmt.Sprintf("%v", this.UserIdClientIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UserIdentification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UserIdentification{`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableMaliciousUserDetection{`,
		`DisableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.DisableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableMaliciousUserDetection{`,
		`EnableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.EnableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_MaliciousUserDetectionOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_MaliciousUserDetectionOnCacheMiss{`,
		`MaliciousUserDetectionOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserDetectionOnCacheMiss), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableChallenge{`,
		`EnableChallenge:` + strings.Replace(fmt.Sprintf("%v", this.EnableChallenge), "EnableChallenge", "common_waf.EnableChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ChallengeOnCacheMiss) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ChallengeOnCacheMiss{`,
		`ChallengeOnCacheMiss:` + strings.Replace(fmt.Sprintf("%v", this.ChallengeOnCacheMiss), "EnableChallenge", "common_waf.EnableChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "common_waf.PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ApiRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ApiRateLimit{`,
		`ApiRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimit), "APIRateLimit", "common_waf.APIRateLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "common_waf.RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LilacCDNMetricsFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LilacCDNMetricsFilter{`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`Operator:` + fmt.Sprintf("%v", this.Operator) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LilacCDNMetricsResponseGroupBy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LilacCDNMetricsResponseGroupBy{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LilacCDNMetricsResponseValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LilacCDNMetricsResponseValue{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LilacCDNMetricsResponseSeries) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGroupBy := "[]*LilacCDNMetricsResponseGroupBy{"
	for _, f := range this.GroupBy {
		repeatedStringForGroupBy += strings.Replace(f.String(), "LilacCDNMetricsResponseGroupBy", "LilacCDNMetricsResponseGroupBy", 1) + ","
	}
	repeatedStringForGroupBy += "}"
	repeatedStringForValue := "[]*LilacCDNMetricsResponseValue{"
	for _, f := range this.Value {
		repeatedStringForValue += strings.Replace(f.String(), "LilacCDNMetricsResponseValue", "LilacCDNMetricsResponseValue", 1) + ","
	}
	repeatedStringForValue += "}"
	s := strings.Join([]string{`&LilacCDNMetricsResponseSeries{`,
		`GroupBy:` + repeatedStringForGroupBy + `,`,
		`Value:` + repeatedStringForValue + `,`,
		`}`,
	}, "")
	return s
}
func (this *LilacCDNMetricsResponseData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSeries := "[]*LilacCDNMetricsResponseSeries{"
	for _, f := range this.Series {
		repeatedStringForSeries += strings.Replace(f.String(), "LilacCDNMetricsResponseSeries", "LilacCDNMetricsResponseSeries", 1) + ","
	}
	repeatedStringForSeries += "}"
	s := strings.Join([]string{`&LilacCDNMetricsResponseData{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Unit:` + fmt.Sprintf("%v", this.Unit) + `,`,
		`Series:` + repeatedStringForSeries + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProxyTypeHttpsAutoCerts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeHttpsAutoCerts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeHttpsAutoCerts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRedirect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpRedirect = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddHsts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddHsts = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &views.TlsConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_DefaultHeader{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_PassThrough{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeaderControlType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderControlType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderControlType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebApplicationFirewall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebApplicationFirewall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebApplicationFirewall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &WebApplicationFirewall_DisableWaf{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &WebApplicationFirewall_AppFirewall{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataGuardRules = append(m.DataGuardRules, &policy.SimpleDataGuardRule{})
			if err := m.DataGuardRules[len(m.DataGuardRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfPolicy == nil {
				m.CsrfPolicy = &schema.CsrfPolicy{}
			}
			if err := m.CsrfPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphqlRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphqlRules = append(m.GraphqlRules, &policy.GraphQLRule{})
			if err := m.GraphqlRules[len(m.GraphqlRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedCookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtectedCookies = append(m.ProtectedCookies, &schema.CookieManipulationOptionType{})
			if err := m.ProtectedCookies[len(m.ProtectedCookies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewallOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &WebApplicationFirewall_AppFirewallOnCacheMiss{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotProtection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotProtection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotProtection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &BotProtection_DisableBotDefense{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ShapeBotDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &BotProtection_BotDefense{v}
			iNdEx = postIndex
		case 1011:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefenseAdvanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.BotDefenseAdvancedType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &BotProtection_BotDefenseAdvanced{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoSProtection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoSProtection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoSProtection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &DoSProtection_L7DdosActionDefault{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &DoSProtection_L7DdosActionBlock{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &DoSProtection_L7DdosActionJsChallenge{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &DoSProtection_L7DdosActionNone{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdosMitigationRules = append(m.DdosMitigationRules, &common_security.DDoSMitigationRule{})
			if err := m.DdosMitigationRules[len(m.DdosMitigationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemDefaultTimeouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &DoSProtection_SystemDefaultTimeouts{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.SlowDDoSMitigation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &DoSProtection_SlowDdosMitigation{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoggingOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoggingOptions == nil {
				m.LoggingOptions = &LoggingOptionsType{}
			}
			if err := m.LoggingOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeaderOptions == nil {
				m.HeaderOptions = &HeaderControlType{}
			}
			if err := m.HeaderOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpFiltering", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpFiltering == nil {
				m.IpFiltering = &IpFilteringOptions{}
			}
			if err := m.IpFiltering.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoFiltering", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GeoFiltering == nil {
				m.GeoFiltering = &GeoFilteringOptions{}
			}
			if err := m.GeoFiltering.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSideDefense) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSideDefense: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSideDefense: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &ClientSideDefense_DisableClientSideDefense{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ClientSideDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &ClientSideDefense_ClientSideDefense{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonSecurityControls) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonSecurityControls: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonSecurityControls: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CommonSecurityControls_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CommonSecurityControls_NoServicePolicies{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CommonSecurityControls_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &CommonSecurityControls_DisableIpReputation{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &CommonSecurityControls_EnableIpReputation{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &CommonSecurityControls_UserIdClientIp{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &CommonSecurityControls_UserIdentification{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &CommonSecurityControls_DisableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &CommonSecurityControls_EnableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CommonSecurityControls_NoChallenge{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.EnableChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CommonSecurityControls_EnableChallenge{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CommonSecurityControls_JsChallenge{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CommonSecurityControls_CaptchaChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CommonSecurityControls_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CommonSecurityControls_DisableRateLimit{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APIRateLimit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CommonSecurityControls_ApiRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CommonSecurityControls_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpReputationOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &CommonSecurityControls_IpReputationOnCacheMiss{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserDetectionOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &CommonSecurityControls_MaliciousUserDetectionOnCacheMiss{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.EnableChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CommonSecurityControls_ChallengeOnCacheMiss{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &CommonSecurityControls_DisableThreatMesh{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &CommonSecurityControls_EnableThreatMesh{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiProtection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiProtection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiProtection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ApiProtection_DisableApiDefinition{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ApiProtection_ApiSpecification{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtectionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiProtectionRules == nil {
				m.ApiProtectionRules = &common_waf.APIProtectionRules{}
			}
			if err := m.ApiProtectionRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JwtValidation == nil {
				m.JwtValidation = &common_waf.JWTValidation{}
			}
			if err := m.JwtValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &ApiProtection_EnableApiDiscovery{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &ApiProtection_DisableApiDiscovery{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecificationOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ApiProtection_ApiSpecificationOnCacheMiss{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscoveryOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &ApiProtection_ApiDiscoveryOnCacheMiss{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &ApiProtection_DefaultSensitiveDataPolicy{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.SensitiveDataPolicySettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &ApiProtection_SensitiveDataPolicy{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityOptionsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityOptionsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityOptionsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpFiltering", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpFiltering == nil {
				m.IpFiltering = &IpFilteringOptions{}
			}
			if err := m.IpFiltering.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoFiltering", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GeoFiltering == nil {
				m.GeoFiltering = &GeoFilteringOptions{}
			}
			if err := m.GeoFiltering.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthOptions == nil {
				m.AuthOptions = &AuthenticationOptions{}
			}
			if err := m.AuthOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebAppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WebAppFirewall == nil {
				m.WebAppFirewall = &WebApplicationFirewall{}
			}
			if err := m.WebAppFirewall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSecurityControls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommonSecurityControls == nil {
				m.CommonSecurityControls = &CommonSecurityControls{}
			}
			if err := m.CommonSecurityControls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiProtection == nil {
				m.ApiProtection = &ApiProtection{}
			}
			if err := m.ApiProtection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoggingOptionsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoggingOptionsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoggingOptionsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientLogOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientLogOptions == nil {
				m.ClientLogOptions = &LogHeaderOptions{}
			}
			if err := m.ClientLogOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginLogOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginLogOptions == nil {
				m.OriginLogOptions = &LogHeaderOptions{}
			}
			if err := m.OriginLogOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNCacheRuleExpressionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNCacheRuleExpressionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNCacheRuleExpressionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpressionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheRuleExpression", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheRuleExpression = append(m.CacheRuleExpression, &CDNCacheRuleExpression{})
			if err := m.CacheRuleExpression[len(m.CacheRuleExpression)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheOperator = &CacheOperator_Equals{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoesNotEqual", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheOperator = &CacheOperator_DoesNotEqual{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheOperator = &CacheOperator_Contains{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoesNotContain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheOperator = &CacheOperator_DoesNotContain{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Startswith", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheOperator = &CacheOperator_Startswith{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoesNotStartWith", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheOperator = &CacheOperator_DoesNotStartWith{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endswith", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheOperator = &CacheOperator_Endswith{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoesNotEndWith", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheOperator = &CacheOperator_DoesNotEndWith{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchRegex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheOperator = &CacheOperator_MatchRegex{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheHeaderMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheHeaderMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheHeaderMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			m.Name = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Name |= HeaderOptions(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operator == nil {
				m.Operator = &CacheOperator{}
			}
			if err := m.Operator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNPathMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNPathMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNPathMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operator == nil {
				m.Operator = &CacheOperator{}
			}
			if err := m.Operator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheCookieMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheCookieMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheCookieMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operator == nil {
				m.Operator = &CacheOperator{}
			}
			if err := m.Operator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheQueryParameterMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheQueryParameterMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheQueryParameterMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operator == nil {
				m.Operator = &CacheOperator{}
			}
			if err := m.Operator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNCacheRuleExpression) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNCacheRuleExpression: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNCacheRuleExpression: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathMatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PathMatch == nil {
				m.PathMatch = &CDNPathMatcherType{}
			}
			if err := m.PathMatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheHeaders = append(m.CacheHeaders, &CacheHeaderMatcherType{})
			if err := m.CacheHeaders[len(m.CacheHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryParameters = append(m.QueryParameters, &CacheQueryParameterMatcherType{})
			if err := m.QueryParameters[len(m.QueryParameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookieMatcher = append(m.CookieMatcher, &CacheCookieMatcherType{})
			if err := m.CookieMatcher[len(m.CookieMatcher)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheTTLEnableProps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheTTLEnableProps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheTTLEnableProps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTtl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheTtl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheOverride", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CacheOverride = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreResponseCookie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgnoreResponseCookie = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheEligibleOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheEligibleOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheEligibleOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemeHostnameUri", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CacheTTLEnableProps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EligibleForCache = &CacheEligibleOptions_SchemeHostnameUri{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemeHostnameRequestUri", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CacheTTLEnableProps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EligibleForCache = &CacheEligibleOptions_SchemeHostnameRequestUri{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostnameUri", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CacheTTLEnableProps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EligibleForCache = &CacheEligibleOptions_HostnameUri{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemeHostnameUriQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CacheTTLEnableProps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EligibleForCache = &CacheEligibleOptions_SchemeHostnameUriQuery{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemeProxyHostUri", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CacheTTLEnableProps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EligibleForCache = &CacheEligibleOptions_SchemeProxyHostUri{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemeProxyHostRequestUri", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CacheTTLEnableProps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EligibleForCache = &CacheEligibleOptions_SchemeProxyHostRequestUri{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNCacheRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNCacheRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNCacheRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleExpressionList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleExpressionList = append(m.RuleExpressionList, &CDNCacheRuleExpressionList{})
			if err := m.RuleExpressionList[len(m.RuleExpressionList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheBypass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CacheActions = &CDNCacheRule_CacheBypass{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibleForCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CacheEligibleOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CacheActions = &CDNCacheRule_EligibleForCache{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultCacheTTLProps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultCacheTTLProps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultCacheTTLProps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTtl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheTtl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultCacheAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultCacheAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultCacheAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibleForCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DefaultCacheTTLProps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CacheActions = &DefaultCacheAction_EligibleForCache{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTtlDefault", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheActions = &DefaultCacheAction_CacheTtlDefault{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTtlOverride", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheActions = &DefaultCacheAction_CacheTtlOverride{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CacheActions = &DefaultCacheAction_CacheDisabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultCacheAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultCacheAction == nil {
				m.DefaultCacheAction = &DefaultCacheAction{}
			}
			if err := m.DefaultCacheAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheRules = append(m.CacheRules, &CDNCacheRule{})
			if err := m.CacheRules[len(m.CacheRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheTTLOptionsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheTTLOptionsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheTTLOptionsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTtlDefault", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TtlOptions = &CacheTTLOptionsType_CacheTtlDefault{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTtlOverride", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TtlOptions = &CacheTTLOptionsType_CacheTtlOverride{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TtlOptions = &CacheTTLOptionsType_CacheDisabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvancedOptionsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvancedOptionsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvancedOptionsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeaderOptions == nil {
				m.HeaderOptions = &HeaderControlType{}
			}
			if err := m.HeaderOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecurityOptions == nil {
				m.SecurityOptions = &SecurityOptionsType{}
			}
			if err := m.SecurityOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoggingOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoggingOptions == nil {
				m.LoggingOptions = &LoggingOptionsType{}
			}
			if err := m.LoggingOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTtlOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CacheTtlOptions == nil {
				m.CacheTtlOptions = &CacheTTLOptionsType{}
			}
			if err := m.CacheTtlOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CacheOptions == nil {
				m.CacheOptions = &CacheOptions{}
			}
			if err := m.CacheOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNTLSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNTLSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNTLSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls_12Plus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &CDNTLSConfig_Tls_12Plus{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls_11Plus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &CDNTLSConfig_Tls_11Plus{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNHTTPSAutoCertsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNHTTPSAutoCertsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNHTTPSAutoCertsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRedirect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpRedirect = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddHsts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddHsts = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &CDNTLSConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNDownstreamTlsParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNDownstreamTlsParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNDownstreamTlsParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &CDNTLSConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsCertificates = append(m.TlsCertificates, &schema.TlsCertificateType{})
			if err := m.TlsCertificates[len(m.TlsCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNHTTPSCustomCertsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNHTTPSCustomCertsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNHTTPSCustomCertsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRedirect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpRedirect = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddHsts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddHsts = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsParameters == nil {
				m.TlsParameters = &CDNDownstreamTlsParamsType{}
			}
			if err := m.TlsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &http_loadbalancer.ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_Http{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginPool == nil {
				m.OriginPool = &CdnOriginPoolType{}
			}
			if err := m.OriginPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CDNHTTPSAutoCertsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CDNHTTPSCustomCertsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_Https{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OtherSettings == nil {
				m.OtherSettings = &OtherSettings{}
			}
			if err := m.OtherSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultCacheAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultCacheAction == nil {
				m.DefaultCacheAction = &DefaultCacheAction{}
			}
			if err := m.DefaultCacheAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheRules = append(m.CacheRules, &CDNCacheRule{})
			if err := m.CacheRules[len(m.CacheRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_AppFirewall{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewallOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_AppFirewallOnCacheMiss{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataGuardRules = append(m.DataGuardRules, &policy.SimpleDataGuardRule{})
			if err := m.DataGuardRules[len(m.DataGuardRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfPolicy == nil {
				m.CsrfPolicy = &schema.CsrfPolicy{}
			}
			if err := m.CsrfPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphqlRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphqlRules = append(m.GraphqlRules, &policy.GraphQLRule{})
			if err := m.GraphqlRules[len(m.GraphqlRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedCookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtectedCookies = append(m.ProtectedCookies, &schema.CookieManipulationOptionType{})
			if err := m.ProtectedCookies[len(m.ProtectedCookies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GlobalSpecType_DisableBotDefense{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ShapeBotDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GlobalSpecType_BotDefense{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefenseAdvanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.BotDefenseAdvancedType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GlobalSpecType_BotDefenseAdvanced{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GlobalSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GlobalSpecType_ApiSpecification{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecificationOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GlobalSpecType_ApiSpecificationOnCacheMiss{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtectionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiProtectionRules == nil {
				m.ApiProtectionRules = &common_waf.APIProtectionRules{}
			}
			if err := m.ApiProtectionRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JwtValidation == nil {
				m.JwtValidation = &common_waf.JWTValidation{}
			}
			if err := m.JwtValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &GlobalSpecType_DisableApiDiscovery{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &GlobalSpecType_EnableApiDiscovery{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscoveryOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &GlobalSpecType_ApiDiscoveryOnCacheMiss{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &GlobalSpecType_DefaultSensitiveDataPolicy{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.SensitiveDataPolicySettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &GlobalSpecType_SensitiveDataPolicy{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionDefault{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionBlock{v}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionJsChallenge{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionNone{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdosMitigationRules = append(m.DdosMitigationRules, &common_security.DDoSMitigationRule{})
			if err := m.DdosMitigationRules[len(m.DdosMitigationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemDefaultTimeouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &GlobalSpecType_SystemDefaultTimeouts{v}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.SlowDDoSMitigation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &GlobalSpecType_SlowDdosMitigation{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &GlobalSpecType_DisableClientSideDefense{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ClientSideDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &GlobalSpecType_ClientSideDefense{v}
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &GlobalSpecType_DisableIpReputation{v}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &GlobalSpecType_EnableIpReputation{v}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpReputationOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &GlobalSpecType_IpReputationOnCacheMiss{v}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &GlobalSpecType_DisableThreatMesh{v}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &GlobalSpecType_EnableThreatMesh{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &GlobalSpecType_UserIdClientIp{v}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &GlobalSpecType_UserIdentification{v}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &GlobalSpecType_DisableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &GlobalSpecType_EnableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserDetectionOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &GlobalSpecType_MaliciousUserDetectionOnCacheMiss{v}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.EnableChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_EnableChallenge{v}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.EnableChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_ChallengeOnCacheMiss{v}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GlobalSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 95:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APIRateLimit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GlobalSpecType_ApiRateLimit{v}
			iNdEx = postIndex
		case 96:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GlobalSpecType_RateLimit{v}
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= virtual_host.VirtualHostState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1004:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertState", wireType)
			}
			m.AutoCertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoCertState |= virtual_host.CertificationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &virtual_host.AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1011:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceDomains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceDomains = append(m.ServiceDomains, &virtual_host.ServiceDomain{})
			if err := m.ServiceDomains[len(m.ServiceDomains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1012:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertState", wireType)
			}
			m.CertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertState |= virtual_host.CertificationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpFilteringOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpFilteringOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpFilteringOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &policy.PrefixMatchList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpFilteringType = &IpFilteringOptions_AllowList{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &policy.PrefixMatchList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpFilteringType = &IpFilteringOptions_BlockList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoFilteringOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoFilteringOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoFilteringOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &policy.CountryCodeList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GeoFilteringType = &GeoFilteringOptions_AllowList{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &policy.CountryCodeList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GeoFilteringType = &GeoFilteringOptions_BlockList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogHeaderOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogHeaderOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogHeaderOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderList = append(m.HeaderList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNCustomAuthentication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNCustomAuthentication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNCustomAuthentication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomAuthConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomAuthConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticationOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthOptions = &AuthenticationOptions_DisableAuth{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jwt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &policy.JwtTokenAuthOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthOptions = &AuthenticationOptions_Jwt{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CDNCustomAuthentication{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthOptions = &AuthenticationOptions_Custom{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNOriginServerType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNOriginServerType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNOriginServerType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &origin_pool.OriginServerPublicIP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &CDNOriginServerType_PublicIp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &origin_pool.OriginServerPublicName{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &CDNOriginServerType_PublicName{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CdnOriginPoolType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CdnOriginPoolType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CdnOriginPoolType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicName == nil {
				m.PublicName = &origin_pool.OriginServerPublicName{}
			}
			if err := m.PublicName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsChoice = &CdnOriginPoolType_NoTls{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &origin_pool.UpstreamTlsParameters{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsChoice = &CdnOriginPoolType_UseTls{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginServers = append(m.OriginServers, &CDNOriginServerType{})
			if err := m.OriginServers[len(m.OriginServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowOriginRedirect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FollowOriginRedirect = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginRequestTimeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginRequestTimeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOriginOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOriginOptions == nil {
				m.MoreOriginOptions = &OriginAdvancedConfiguration{}
			}
			if err := m.MoreOriginOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginAdvancedConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginAdvancedConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginAdvancedConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableByteRangeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableByteRangeRequest = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsocketProxy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WebsocketProxy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &http_loadbalancer.ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_Http{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginPool == nil {
				m.OriginPool = &CdnOriginPoolType{}
			}
			if err := m.OriginPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CDNHTTPSAutoCertsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CDNHTTPSCustomCertsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_Https{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OtherSettings == nil {
				m.OtherSettings = &OtherSettings{}
			}
			if err := m.OtherSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultCacheAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultCacheAction == nil {
				m.DefaultCacheAction = &DefaultCacheAction{}
			}
			if err := m.DefaultCacheAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheRules = append(m.CacheRules, &CDNCacheRule{})
			if err := m.CacheRules[len(m.CacheRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_AppFirewall{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewallOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_AppFirewallOnCacheMiss{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataGuardRules = append(m.DataGuardRules, &policy.SimpleDataGuardRule{})
			if err := m.DataGuardRules[len(m.DataGuardRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfPolicy == nil {
				m.CsrfPolicy = &schema.CsrfPolicy{}
			}
			if err := m.CsrfPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphqlRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphqlRules = append(m.GraphqlRules, &policy.GraphQLRule{})
			if err := m.GraphqlRules[len(m.GraphqlRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedCookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtectedCookies = append(m.ProtectedCookies, &schema.CookieManipulationOptionType{})
			if err := m.ProtectedCookies[len(m.ProtectedCookies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &CreateSpecType_DisableBotDefense{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ShapeBotDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &CreateSpecType_BotDefense{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefenseAdvanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.BotDefenseAdvancedType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &CreateSpecType_BotDefenseAdvanced{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &CreateSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &CreateSpecType_ApiSpecification{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecificationOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &CreateSpecType_ApiSpecificationOnCacheMiss{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtectionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiProtectionRules == nil {
				m.ApiProtectionRules = &common_waf.APIProtectionRules{}
			}
			if err := m.ApiProtectionRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JwtValidation == nil {
				m.JwtValidation = &common_waf.JWTValidation{}
			}
			if err := m.JwtValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &CreateSpecType_DisableApiDiscovery{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &CreateSpecType_EnableApiDiscovery{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscoveryOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &CreateSpecType_ApiDiscoveryOnCacheMiss{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &CreateSpecType_DefaultSensitiveDataPolicy{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.SensitiveDataPolicySettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &CreateSpecType_SensitiveDataPolicy{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionDefault{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionBlock{v}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionJsChallenge{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionNone{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdosMitigationRules = append(m.DdosMitigationRules, &common_security.DDoSMitigationRule{})
			if err := m.DdosMitigationRules[len(m.DdosMitigationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemDefaultTimeouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &CreateSpecType_SystemDefaultTimeouts{v}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.SlowDDoSMitigation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &CreateSpecType_SlowDdosMitigation{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &CreateSpecType_DisableClientSideDefense{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ClientSideDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &CreateSpecType_ClientSideDefense{v}
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &CreateSpecType_DisableIpReputation{v}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &CreateSpecType_EnableIpReputation{v}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpReputationOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &CreateSpecType_IpReputationOnCacheMiss{v}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &CreateSpecType_DisableThreatMesh{v}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &CreateSpecType_EnableThreatMesh{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &CreateSpecType_UserIdClientIp{v}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &CreateSpecType_UserIdentification{v}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &CreateSpecType_DisableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &CreateSpecType_EnableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserDetectionOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &CreateSpecType_MaliciousUserDetectionOnCacheMiss{v}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.EnableChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_EnableChallenge{v}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.EnableChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_ChallengeOnCacheMiss{v}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CreateSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 95:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APIRateLimit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CreateSpecType_ApiRateLimit{v}
			iNdEx = postIndex
		case 96:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CreateSpecType_RateLimit{v}
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &http_loadbalancer.ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_Http{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginPool == nil {
				m.OriginPool = &CdnOriginPoolType{}
			}
			if err := m.OriginPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CDNHTTPSAutoCertsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CDNHTTPSCustomCertsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_Https{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OtherSettings == nil {
				m.OtherSettings = &OtherSettings{}
			}
			if err := m.OtherSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultCacheAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultCacheAction == nil {
				m.DefaultCacheAction = &DefaultCacheAction{}
			}
			if err := m.DefaultCacheAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheRules = append(m.CacheRules, &CDNCacheRule{})
			if err := m.CacheRules[len(m.CacheRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_AppFirewall{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewallOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_AppFirewallOnCacheMiss{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataGuardRules = append(m.DataGuardRules, &policy.SimpleDataGuardRule{})
			if err := m.DataGuardRules[len(m.DataGuardRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfPolicy == nil {
				m.CsrfPolicy = &schema.CsrfPolicy{}
			}
			if err := m.CsrfPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphqlRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphqlRules = append(m.GraphqlRules, &policy.GraphQLRule{})
			if err := m.GraphqlRules[len(m.GraphqlRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedCookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtectedCookies = append(m.ProtectedCookies, &schema.CookieManipulationOptionType{})
			if err := m.ProtectedCookies[len(m.ProtectedCookies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &ReplaceSpecType_DisableBotDefense{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ShapeBotDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &ReplaceSpecType_BotDefense{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefenseAdvanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.BotDefenseAdvancedType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &ReplaceSpecType_BotDefenseAdvanced{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ReplaceSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ReplaceSpecType_ApiSpecification{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecificationOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ReplaceSpecType_ApiSpecificationOnCacheMiss{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtectionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiProtectionRules == nil {
				m.ApiProtectionRules = &common_waf.APIProtectionRules{}
			}
			if err := m.ApiProtectionRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JwtValidation == nil {
				m.JwtValidation = &common_waf.JWTValidation{}
			}
			if err := m.JwtValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &ReplaceSpecType_DisableApiDiscovery{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &ReplaceSpecType_EnableApiDiscovery{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscoveryOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &ReplaceSpecType_ApiDiscoveryOnCacheMiss{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &ReplaceSpecType_DefaultSensitiveDataPolicy{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.SensitiveDataPolicySettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &ReplaceSpecType_SensitiveDataPolicy{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionDefault{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionBlock{v}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionJsChallenge{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionNone{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdosMitigationRules = append(m.DdosMitigationRules, &common_security.DDoSMitigationRule{})
			if err := m.DdosMitigationRules[len(m.DdosMitigationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemDefaultTimeouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &ReplaceSpecType_SystemDefaultTimeouts{v}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.SlowDDoSMitigation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &ReplaceSpecType_SlowDdosMitigation{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &ReplaceSpecType_DisableClientSideDefense{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ClientSideDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &ReplaceSpecType_ClientSideDefense{v}
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &ReplaceSpecType_DisableIpReputation{v}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &ReplaceSpecType_EnableIpReputation{v}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpReputationOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &ReplaceSpecType_IpReputationOnCacheMiss{v}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &ReplaceSpecType_DisableThreatMesh{v}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &ReplaceSpecType_EnableThreatMesh{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &ReplaceSpecType_UserIdClientIp{v}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &ReplaceSpecType_UserIdentification{v}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &ReplaceSpecType_DisableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &ReplaceSpecType_EnableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserDetectionOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &ReplaceSpecType_MaliciousUserDetectionOnCacheMiss{v}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.EnableChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_EnableChallenge{v}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.EnableChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_ChallengeOnCacheMiss{v}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &ReplaceSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 95:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APIRateLimit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &ReplaceSpecType_ApiRateLimit{v}
			iNdEx = postIndex
		case 96:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &ReplaceSpecType_RateLimit{v}
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &http_loadbalancer.ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_Http{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginPool == nil {
				m.OriginPool = &CdnOriginPoolType{}
			}
			if err := m.OriginPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CDNHTTPSAutoCertsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CDNHTTPSCustomCertsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_Https{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OtherSettings == nil {
				m.OtherSettings = &OtherSettings{}
			}
			if err := m.OtherSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultCacheAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultCacheAction == nil {
				m.DefaultCacheAction = &DefaultCacheAction{}
			}
			if err := m.DefaultCacheAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheRules = append(m.CacheRules, &CDNCacheRule{})
			if err := m.CacheRules[len(m.CacheRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_AppFirewall{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewallOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_AppFirewallOnCacheMiss{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataGuardRules = append(m.DataGuardRules, &policy.SimpleDataGuardRule{})
			if err := m.DataGuardRules[len(m.DataGuardRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfPolicy == nil {
				m.CsrfPolicy = &schema.CsrfPolicy{}
			}
			if err := m.CsrfPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphqlRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphqlRules = append(m.GraphqlRules, &policy.GraphQLRule{})
			if err := m.GraphqlRules[len(m.GraphqlRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedCookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtectedCookies = append(m.ProtectedCookies, &schema.CookieManipulationOptionType{})
			if err := m.ProtectedCookies[len(m.ProtectedCookies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GetSpecType_DisableBotDefense{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ShapeBotDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GetSpecType_BotDefense{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefenseAdvanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.BotDefenseAdvancedType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GetSpecType_BotDefenseAdvanced{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GetSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GetSpecType_ApiSpecification{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecificationOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GetSpecType_ApiSpecificationOnCacheMiss{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtectionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiProtectionRules == nil {
				m.ApiProtectionRules = &common_waf.APIProtectionRules{}
			}
			if err := m.ApiProtectionRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JwtValidation == nil {
				m.JwtValidation = &common_waf.JWTValidation{}
			}
			if err := m.JwtValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &GetSpecType_DisableApiDiscovery{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &GetSpecType_EnableApiDiscovery{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscoveryOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &GetSpecType_ApiDiscoveryOnCacheMiss{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &GetSpecType_DefaultSensitiveDataPolicy{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.SensitiveDataPolicySettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &GetSpecType_SensitiveDataPolicy{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionDefault{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionBlock{v}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionJsChallenge{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionNone{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdosMitigationRules = append(m.DdosMitigationRules, &common_security.DDoSMitigationRule{})
			if err := m.DdosMitigationRules[len(m.DdosMitigationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemDefaultTimeouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &GetSpecType_SystemDefaultTimeouts{v}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.SlowDDoSMitigation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &GetSpecType_SlowDdosMitigation{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &GetSpecType_DisableClientSideDefense{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ClientSideDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &GetSpecType_ClientSideDefense{v}
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &GetSpecType_DisableIpReputation{v}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &GetSpecType_EnableIpReputation{v}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpReputationOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &GetSpecType_IpReputationOnCacheMiss{v}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &GetSpecType_DisableThreatMesh{v}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &GetSpecType_EnableThreatMesh{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &GetSpecType_UserIdClientIp{v}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &GetSpecType_UserIdentification{v}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &GetSpecType_DisableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &GetSpecType_EnableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserDetectionOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &GetSpecType_MaliciousUserDetectionOnCacheMiss{v}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.EnableChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_EnableChallenge{v}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeOnCacheMiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.EnableChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_ChallengeOnCacheMiss{v}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GetSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 95:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APIRateLimit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GetSpecType_ApiRateLimit{v}
			iNdEx = postIndex
		case 96:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GetSpecType_RateLimit{v}
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= virtual_host.VirtualHostState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &virtual_host.AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1011:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceDomains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceDomains = append(m.ServiceDomains, &virtual_host.ServiceDomain{})
			if err := m.ServiceDomains[len(m.ServiceDomains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1012:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertState", wireType)
			}
			m.CertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertState |= virtual_host.CertificationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LilacCDNMetricsFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LilacCDNMetricsFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LilacCDNMetricsFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= LilacCDNMetricsTag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= LilacCDNMetricsOperatorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LilacCDNMetricsResponseGroupBy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LilacCDNMetricsResponseGroupBy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LilacCDNMetricsResponseGroupBy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			m.Name = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Name |= LilacCDNMetricsTag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LilacCDNMetricsResponseValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LilacCDNMetricsResponseValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LilacCDNMetricsResponseValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LilacCDNMetricsResponseSeries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LilacCDNMetricsResponseSeries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LilacCDNMetricsResponseSeries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupBy = append(m.GroupBy, &LilacCDNMetricsResponseGroupBy{})
			if err := m.GroupBy[len(m.GroupBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, &LilacCDNMetricsResponseValue{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LilacCDNMetricsResponseData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LilacCDNMetricsResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LilacCDNMetricsResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= LilacCDNMetricsFieldSelector(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			m.Unit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unit |= LilacCDNMetricUnit(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Series = append(m.Series, &LilacCDNMetricsResponseSeries{})
			if err := m.Series[len(m.Series)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

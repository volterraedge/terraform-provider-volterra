// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/cdn_loadbalancer/private_customapi.proto

// CDN
//
// x-displayName: "CDN Loadbalancer"
// CDN package

package cdn_loadbalancer

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UpdateServiceDomainsRequest
//
// x-displayName: "UpdateServiceDomainsRequest"
// UpdateServiceDomainsRequest
type UpdateServiceDomainsRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "default"
	// x-required
	// Namespace scope of the request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "default"
	// x-required
	// Name of the CDN loadbalancer
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Tenant
	//
	// x-displayName: "Tenant"
	// x-example: "default"
	// x-required
	// Tenant name
	Tenant string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// Service Domains
	//
	// x-displayName: "Service Domains"
	// CNAME provided from service per domain
	ServiceDomains []*virtual_host.ServiceDomain `protobuf:"bytes,4,rep,name=service_domains,json=serviceDomains,proto3" json:"service_domains,omitempty"`
}

func (m *UpdateServiceDomainsRequest) Reset()      { *m = UpdateServiceDomainsRequest{} }
func (*UpdateServiceDomainsRequest) ProtoMessage() {}
func (*UpdateServiceDomainsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6a7635dbb4fc69a, []int{0}
}
func (m *UpdateServiceDomainsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateServiceDomainsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateServiceDomainsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateServiceDomainsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateServiceDomainsRequest.Merge(m, src)
}
func (m *UpdateServiceDomainsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateServiceDomainsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateServiceDomainsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateServiceDomainsRequest proto.InternalMessageInfo

func (m *UpdateServiceDomainsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateServiceDomainsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateServiceDomainsRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *UpdateServiceDomainsRequest) GetServiceDomains() []*virtual_host.ServiceDomain {
	if m != nil {
		return m.ServiceDomains
	}
	return nil
}

// UpdateServiceDomainsResponse
//
// x-displayName: "UpdateServiceDomainsResponse"
// UpdateServiceDomainsResponse
type UpdateServiceDomainsResponse struct {
}

func (m *UpdateServiceDomainsResponse) Reset()      { *m = UpdateServiceDomainsResponse{} }
func (*UpdateServiceDomainsResponse) ProtoMessage() {}
func (*UpdateServiceDomainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6a7635dbb4fc69a, []int{1}
}
func (m *UpdateServiceDomainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateServiceDomainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateServiceDomainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateServiceDomainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateServiceDomainsResponse.Merge(m, src)
}
func (m *UpdateServiceDomainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateServiceDomainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateServiceDomainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateServiceDomainsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UpdateServiceDomainsRequest)(nil), "ves.io.schema.views.cdn_loadbalancer.UpdateServiceDomainsRequest")
	golang_proto.RegisterType((*UpdateServiceDomainsRequest)(nil), "ves.io.schema.views.cdn_loadbalancer.UpdateServiceDomainsRequest")
	proto.RegisterType((*UpdateServiceDomainsResponse)(nil), "ves.io.schema.views.cdn_loadbalancer.UpdateServiceDomainsResponse")
	golang_proto.RegisterType((*UpdateServiceDomainsResponse)(nil), "ves.io.schema.views.cdn_loadbalancer.UpdateServiceDomainsResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/cdn_loadbalancer/private_customapi.proto", fileDescriptor_b6a7635dbb4fc69a)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/cdn_loadbalancer/private_customapi.proto", fileDescriptor_b6a7635dbb4fc69a)
}

var fileDescriptor_b6a7635dbb4fc69a = []byte{
	// 621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4f, 0x6b, 0x14, 0x4f,
	0x10, 0xdd, 0xce, 0x2e, 0x81, 0xcc, 0x0f, 0x7e, 0xca, 0x20, 0xb2, 0x6e, 0x96, 0x26, 0x2c, 0x22,
	0xf1, 0xcf, 0x4c, 0x4b, 0xc4, 0x4b, 0x10, 0x24, 0xd1, 0x8b, 0x27, 0xc3, 0x4a, 0x2e, 0xb9, 0x2c,
	0xbd, 0x33, 0x95, 0x49, 0x9b, 0x99, 0xee, 0x4e, 0x77, 0xcf, 0x24, 0x41, 0x02, 0x92, 0x93, 0x47,
	0x41, 0xc1, 0xaf, 0xe0, 0x37, 0xf0, 0x90, 0x4b, 0x6e, 0x7a, 0x51, 0x82, 0x5e, 0x72, 0x34, 0xb3,
	0x1e, 0x3c, 0xe6, 0x23, 0x48, 0x7a, 0x36, 0x7f, 0x66, 0x12, 0xc2, 0x82, 0xde, 0xaa, 0xfa, 0xf5,
	0xeb, 0x7a, 0xfd, 0xaa, 0xca, 0x79, 0x94, 0x81, 0xf6, 0x99, 0x20, 0x3a, 0x58, 0x81, 0x84, 0x92,
	0x8c, 0xc1, 0xba, 0x26, 0x41, 0xc8, 0x7b, 0xb1, 0xa0, 0x61, 0x9f, 0xc6, 0x94, 0x07, 0xa0, 0x88,
	0x54, 0x2c, 0xa3, 0x06, 0x7a, 0x41, 0xaa, 0x8d, 0x48, 0xa8, 0x64, 0xbe, 0x54, 0xc2, 0x08, 0xf7,
	0x66, 0xc1, 0xf6, 0x0b, 0xb6, 0x6f, 0xd9, 0x7e, 0x95, 0xdd, 0xf2, 0x22, 0x66, 0x56, 0xd2, 0xbe,
	0x1f, 0x88, 0x84, 0x44, 0x22, 0x12, 0xc4, 0x92, 0xfb, 0xe9, 0xb2, 0xcd, 0x6c, 0x62, 0xa3, 0xe2,
	0xd1, 0x56, 0x3b, 0x12, 0x22, 0x8a, 0x81, 0x50, 0xc9, 0x08, 0xe5, 0x5c, 0x18, 0x6a, 0x98, 0xe0,
	0x7a, 0x88, 0x4e, 0x96, 0x05, 0x0b, 0x79, 0x16, 0xbc, 0x51, 0x06, 0xcd, 0xa6, 0x84, 0x63, 0xa8,
	0x5d, 0xf9, 0x28, 0x8d, 0x59, 0x48, 0x0d, 0x0c, 0xd1, 0x4e, 0x05, 0x05, 0x0d, 0x3c, 0xab, 0x3c,
	0x3e, 0x75, 0xde, 0xaa, 0x5e, 0xf9, 0xc6, 0xfd, 0x91, 0xcc, 0x3c, 0xab, 0xea, 0x56, 0x95, 0xa1,
	0x4c, 0x4a, 0xe3, 0xde, 0x8a, 0xd0, 0xe6, 0xec, 0xbd, 0xce, 0x0e, 0x72, 0x26, 0x17, 0xe5, 0x91,
	0xe0, 0x17, 0xa0, 0x32, 0x16, 0xc0, 0x53, 0x91, 0x50, 0xc6, 0x75, 0x17, 0xd6, 0x52, 0xd0, 0xc6,
	0x6d, 0x3b, 0x13, 0x9c, 0x26, 0xa0, 0x25, 0x0d, 0xa0, 0x89, 0xa6, 0xd0, 0xf4, 0x44, 0xf7, 0xf4,
	0xc0, 0x75, 0x9d, 0xc6, 0x51, 0xd2, 0x1c, 0xb3, 0x80, 0x8d, 0xdd, 0xeb, 0xce, 0xb8, 0x01, 0x4e,
	0xb9, 0x69, 0xd6, 0xed, 0xe9, 0x30, 0x73, 0xbb, 0xce, 0x15, 0x5d, 0x94, 0xe8, 0x85, 0x45, 0x8d,
	0x66, 0x63, 0xaa, 0x3e, 0xfd, 0xdf, 0xcc, 0x6d, 0xbf, 0xda, 0xec, 0x53, 0xad, 0x7e, 0x49, 0x55,
	0xf7, 0x7f, 0x5d, 0x12, 0xd9, 0xc1, 0x4e, 0xfb, 0x62, 0xf1, 0x5a, 0x0a, 0xae, 0x61, 0xe6, 0x4d,
	0xc3, 0xb9, 0xba, 0x50, 0x8c, 0xd8, 0x13, 0x3b, 0x61, 0x73, 0x0b, 0xcf, 0xdc, 0x4f, 0x75, 0xe7,
	0xda, 0x45, 0x2c, 0x77, 0xce, 0x1f, 0x65, 0xea, 0xfc, 0x4b, 0xec, 0x6a, 0xcd, 0xff, 0xcd, 0x13,
	0x85, 0xe8, 0xce, 0x87, 0xb1, 0xfc, 0x73, 0xf3, 0x71, 0x06, 0xda, 0x63, 0xc2, 0x93, 0x4a, 0x6c,
	0x6c, 0x7a, 0xeb, 0x8a, 0x19, 0xb8, 0xb7, 0xfc, 0x70, 0x23, 0xf0, 0x02, 0xc1, 0x0d, 0x70, 0xe3,
	0x85, 0x10, 0xb3, 0x0c, 0xd4, 0xa6, 0xc7, 0xc1, 0xac, 0x0b, 0xb5, 0xea, 0x69, 0x43, 0x79, 0x48,
	0x55, 0xe8, 0xd1, 0x30, 0x61, 0x7c, 0xfb, 0xc7, 0xaf, 0x77, 0x63, 0x5f, 0x51, 0x67, 0xf1, 0x78,
	0xc5, 0x48, 0xb1, 0x62, 0xe4, 0xa4, 0x79, 0x9a, 0xbc, 0x3a, 0x89, 0xb7, 0xce, 0x0f, 0x93, 0x05,
	0xb7, 0x48, 0x6a, 0x95, 0xf6, 0x2a, 0x9d, 0x9b, 0x45, 0x77, 0x96, 0xd6, 0x3a, 0x31, 0x29, 0x7d,
	0x96, 0x30, 0x6e, 0x94, 0xd0, 0x12, 0x02, 0x43, 0xac, 0xe0, 0x7f, 0x5d, 0xb2, 0x35, 0xbb, 0xbb,
	0x83, 0x1a, 0xdf, 0x77, 0xd0, 0xdd, 0x91, 0x4c, 0x7e, 0xde, 0x7f, 0x09, 0x81, 0xd9, 0xfe, 0xd6,
	0xac, 0xef, 0x22, 0x34, 0xff, 0x1e, 0xed, 0x1d, 0xe0, 0xda, 0xfe, 0x01, 0xae, 0x1d, 0x1e, 0x60,
	0xf4, 0x3a, 0xc7, 0xe8, 0x63, 0x8e, 0xd1, 0x97, 0x1c, 0xa3, 0xbd, 0x1c, 0xa3, 0x9f, 0x39, 0x46,
	0xbf, 0x73, 0x5c, 0x3b, 0xcc, 0x31, 0x7a, 0x3b, 0xc0, 0xb5, 0xdd, 0x01, 0x46, 0x7b, 0x03, 0x5c,
	0xdb, 0x1f, 0xe0, 0xda, 0xd2, 0x52, 0x24, 0xe4, 0x6a, 0xe4, 0x67, 0x22, 0x36, 0xa0, 0x14, 0xf5,
	0x53, 0x4d, 0x6c, 0xb0, 0x2c, 0x54, 0x72, 0xd4, 0xa0, 0x8c, 0x85, 0xa0, 0xbc, 0x63, 0x98, 0xc8,
	0x7e, 0x24, 0x08, 0x6c, 0x98, 0xa1, 0x2b, 0x97, 0xee, 0x6c, 0x7f, 0xdc, 0xae, 0xe1, 0x83, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x15, 0x8f, 0x85, 0x28, 0x2f, 0x05, 0x00, 0x00,
}

func (this *UpdateServiceDomainsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateServiceDomainsRequest)
	if !ok {
		that2, ok := that.(UpdateServiceDomainsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if len(this.ServiceDomains) != len(that1.ServiceDomains) {
		return false
	}
	for i := range this.ServiceDomains {
		if !this.ServiceDomains[i].Equal(that1.ServiceDomains[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateServiceDomainsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateServiceDomainsResponse)
	if !ok {
		that2, ok := that.(UpdateServiceDomainsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UpdateServiceDomainsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cdn_loadbalancer.UpdateServiceDomainsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	if this.ServiceDomains != nil {
		s = append(s, "ServiceDomains: "+fmt.Sprintf("%#v", this.ServiceDomains)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateServiceDomainsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cdn_loadbalancer.UpdateServiceDomainsResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPrivateCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrivateCustomAPIClient is the client API for PrivateCustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrivateCustomAPIClient interface {
	// UpdateServiceDomains
	//
	// x-displayName: "UpdateServiceDomains"
	// Private API to update service domains from service.
	UpdateServiceDomains(ctx context.Context, in *UpdateServiceDomainsRequest, opts ...grpc.CallOption) (*UpdateServiceDomainsResponse, error)
}

type privateCustomAPIClient struct {
	cc *grpc.ClientConn
}

func NewPrivateCustomAPIClient(cc *grpc.ClientConn) PrivateCustomAPIClient {
	return &privateCustomAPIClient{cc}
}

func (c *privateCustomAPIClient) UpdateServiceDomains(ctx context.Context, in *UpdateServiceDomainsRequest, opts ...grpc.CallOption) (*UpdateServiceDomainsResponse, error) {
	out := new(UpdateServiceDomainsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.cdn_loadbalancer.PrivateCustomAPI/UpdateServiceDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateCustomAPIServer is the server API for PrivateCustomAPI service.
type PrivateCustomAPIServer interface {
	// UpdateServiceDomains
	//
	// x-displayName: "UpdateServiceDomains"
	// Private API to update service domains from service.
	UpdateServiceDomains(context.Context, *UpdateServiceDomainsRequest) (*UpdateServiceDomainsResponse, error)
}

// UnimplementedPrivateCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedPrivateCustomAPIServer struct {
}

func (*UnimplementedPrivateCustomAPIServer) UpdateServiceDomains(ctx context.Context, req *UpdateServiceDomainsRequest) (*UpdateServiceDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceDomains not implemented")
}

func RegisterPrivateCustomAPIServer(s *grpc.Server, srv PrivateCustomAPIServer) {
	s.RegisterService(&_PrivateCustomAPI_serviceDesc, srv)
}

func _PrivateCustomAPI_UpdateServiceDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateCustomAPIServer).UpdateServiceDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.cdn_loadbalancer.PrivateCustomAPI/UpdateServiceDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateCustomAPIServer).UpdateServiceDomains(ctx, req.(*UpdateServiceDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrivateCustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.cdn_loadbalancer.PrivateCustomAPI",
	HandlerType: (*PrivateCustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateServiceDomains",
			Handler:    _PrivateCustomAPI_UpdateServiceDomains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/cdn_loadbalancer/private_customapi.proto",
}

func (m *UpdateServiceDomainsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateServiceDomainsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateServiceDomainsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceDomains) > 0 {
		for iNdEx := len(m.ServiceDomains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceDomains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateServiceDomainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateServiceDomainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateServiceDomainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPrivateCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrivateCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateServiceDomainsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if len(m.ServiceDomains) > 0 {
		for _, e := range m.ServiceDomains {
			l = e.Size()
			n += 1 + l + sovPrivateCustomapi(uint64(l))
		}
	}
	return n
}

func (m *UpdateServiceDomainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPrivateCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrivateCustomapi(x uint64) (n int) {
	return sovPrivateCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UpdateServiceDomainsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServiceDomains := "[]*ServiceDomain{"
	for _, f := range this.ServiceDomains {
		repeatedStringForServiceDomains += strings.Replace(fmt.Sprintf("%v", f), "ServiceDomain", "virtual_host.ServiceDomain", 1) + ","
	}
	repeatedStringForServiceDomains += "}"
	s := strings.Join([]string{`&UpdateServiceDomainsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`ServiceDomains:` + repeatedStringForServiceDomains + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateServiceDomainsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateServiceDomainsResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPrivateCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UpdateServiceDomainsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateServiceDomainsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateServiceDomainsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceDomains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceDomains = append(m.ServiceDomains, &virtual_host.ServiceDomain{})
			if err := m.ServiceDomains[len(m.ServiceDomains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateServiceDomainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateServiceDomainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateServiceDomainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivateCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrivateCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrivateCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrivateCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrivateCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivateCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrivateCustomapi = fmt.Errorf("proto: unexpected end of group")
)

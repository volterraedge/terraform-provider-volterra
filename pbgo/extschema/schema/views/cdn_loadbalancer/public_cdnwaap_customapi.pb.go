// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/cdn_loadbalancer/public_cdnwaap_customapi.proto

// CDN
//
// x-displayName: "CDN Loadbalancer"
// CDN package

package cdn_loadbalancer

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dos_mitigation"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	common_security "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_security"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// List of cdn load balancers
//
// x-displayName: "List of CDN Load Balancers"
type CDNLoadBalancerList struct {
	// CDN LoadBalancer
	//
	// x-displayName: "CDN LoadBalancer"
	// x-example: "[blogging-app]"
	// x-required
	CdnLoadbalancer []string `protobuf:"bytes,1,rep,name=cdn_loadbalancer,json=cdnLoadbalancer,proto3" json:"cdn_loadbalancer,omitempty"`
}

func (m *CDNLoadBalancerList) Reset()      { *m = CDNLoadBalancerList{} }
func (*CDNLoadBalancerList) ProtoMessage() {}
func (*CDNLoadBalancerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9a92a1941036199, []int{0}
}
func (m *CDNLoadBalancerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNLoadBalancerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CDNLoadBalancerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CDNLoadBalancerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNLoadBalancerList.Merge(m, src)
}
func (m *CDNLoadBalancerList) XXX_Size() int {
	return m.Size()
}
func (m *CDNLoadBalancerList) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNLoadBalancerList.DiscardUnknown(m)
}

var xxx_messageInfo_CDNLoadBalancerList proto.InternalMessageInfo

func (m *CDNLoadBalancerList) GetCdnLoadbalancer() []string {
	if m != nil {
		return m.CdnLoadbalancer
	}
	return nil
}

// Get Security Config request
//
// x-displayName: "Get Security Config Request"
// Request of GET Security Config Spec API
type GetCDNSecurityConfigReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the CDN Load Balancer for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Get loadbalancer
	//
	// x-displayName: "Load Balancer Choice"
	// x-required
	// Fetch Security Config of All Load Balancers or list of LBs
	//
	// Types that are valid to be assigned to LoadbalancerChoice:
	//	*GetCDNSecurityConfigReq_AllCdnLoadbalancers
	//	*GetCDNSecurityConfigReq_CdnLoadbalancersList
	LoadbalancerChoice isGetCDNSecurityConfigReq_LoadbalancerChoice `protobuf_oneof:"loadbalancer_choice"`
}

func (m *GetCDNSecurityConfigReq) Reset()      { *m = GetCDNSecurityConfigReq{} }
func (*GetCDNSecurityConfigReq) ProtoMessage() {}
func (*GetCDNSecurityConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9a92a1941036199, []int{1}
}
func (m *GetCDNSecurityConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCDNSecurityConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCDNSecurityConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCDNSecurityConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCDNSecurityConfigReq.Merge(m, src)
}
func (m *GetCDNSecurityConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *GetCDNSecurityConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCDNSecurityConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetCDNSecurityConfigReq proto.InternalMessageInfo

type isGetCDNSecurityConfigReq_LoadbalancerChoice interface {
	isGetCDNSecurityConfigReq_LoadbalancerChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetCDNSecurityConfigReq_AllCdnLoadbalancers struct {
	AllCdnLoadbalancers *schema.Empty `protobuf:"bytes,3,opt,name=all_cdn_loadbalancers,json=allCdnLoadbalancers,proto3,oneof" json:"all_cdn_loadbalancers,omitempty"`
}
type GetCDNSecurityConfigReq_CdnLoadbalancersList struct {
	CdnLoadbalancersList *CDNLoadBalancerList `protobuf:"bytes,4,opt,name=cdn_loadbalancers_list,json=cdnLoadbalancersList,proto3,oneof" json:"cdn_loadbalancers_list,omitempty"`
}

func (*GetCDNSecurityConfigReq_AllCdnLoadbalancers) isGetCDNSecurityConfigReq_LoadbalancerChoice()  {}
func (*GetCDNSecurityConfigReq_CdnLoadbalancersList) isGetCDNSecurityConfigReq_LoadbalancerChoice() {}

func (m *GetCDNSecurityConfigReq) GetLoadbalancerChoice() isGetCDNSecurityConfigReq_LoadbalancerChoice {
	if m != nil {
		return m.LoadbalancerChoice
	}
	return nil
}

func (m *GetCDNSecurityConfigReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetCDNSecurityConfigReq) GetAllCdnLoadbalancers() *schema.Empty {
	if x, ok := m.GetLoadbalancerChoice().(*GetCDNSecurityConfigReq_AllCdnLoadbalancers); ok {
		return x.AllCdnLoadbalancers
	}
	return nil
}

func (m *GetCDNSecurityConfigReq) GetCdnLoadbalancersList() *CDNLoadBalancerList {
	if x, ok := m.GetLoadbalancerChoice().(*GetCDNSecurityConfigReq_CdnLoadbalancersList); ok {
		return x.CdnLoadbalancersList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetCDNSecurityConfigReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetCDNSecurityConfigReq_AllCdnLoadbalancers)(nil),
		(*GetCDNSecurityConfigReq_CdnLoadbalancersList)(nil),
	}
}

func init() {
	proto.RegisterType((*CDNLoadBalancerList)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNLoadBalancerList")
	golang_proto.RegisterType((*CDNLoadBalancerList)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNLoadBalancerList")
	proto.RegisterType((*GetCDNSecurityConfigReq)(nil), "ves.io.schema.views.cdn_loadbalancer.GetCDNSecurityConfigReq")
	golang_proto.RegisterType((*GetCDNSecurityConfigReq)(nil), "ves.io.schema.views.cdn_loadbalancer.GetCDNSecurityConfigReq")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/cdn_loadbalancer/public_cdnwaap_customapi.proto", fileDescriptor_f9a92a1941036199)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/cdn_loadbalancer/public_cdnwaap_customapi.proto", fileDescriptor_f9a92a1941036199)
}

var fileDescriptor_f9a92a1941036199 = []byte{
	// 861 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x77, 0xbc, 0x49, 0x49, 0xcc, 0x81, 0x95, 0x13, 0x60, 0x59, 0x22, 0x13, 0x59, 0x1c,
	0xa2, 0x82, 0x3d, 0x6d, 0x11, 0x87, 0x56, 0xe2, 0xb0, 0xd9, 0x45, 0xb4, 0x55, 0x08, 0xd1, 0xf6,
	0x80, 0x54, 0x21, 0x59, 0xb3, 0xf6, 0xc4, 0x19, 0xb0, 0xfd, 0x26, 0x33, 0xe3, 0x4d, 0xa2, 0xaa,
	0x52, 0xa9, 0xf8, 0x03, 0x20, 0x20, 0x71, 0xe2, 0xce, 0x8d, 0x6b, 0x45, 0x2e, 0xb9, 0xd1, 0x13,
	0x8a, 0xe0, 0xd2, 0x03, 0x07, 0xb2, 0xe1, 0x00, 0xb7, 0xfe, 0x09, 0xc8, 0xb3, 0x3f, 0xb2, 0xeb,
	0xec, 0xa2, 0xad, 0xc2, 0x6d, 0xc6, 0x6f, 0xbe, 0x5f, 0xbf, 0xf7, 0x99, 0xe7, 0x67, 0xb3, 0xd1,
	0xa1, 0xd2, 0x63, 0x80, 0x65, 0xb0, 0x43, 0x13, 0x82, 0x3b, 0x8c, 0xee, 0x49, 0x1c, 0x84, 0xa9,
	0x1f, 0x03, 0x09, 0xdb, 0x24, 0x26, 0x69, 0x40, 0x05, 0xe6, 0x59, 0x3b, 0x66, 0x81, 0x1f, 0x84,
	0xe9, 0x1e, 0x21, 0xdc, 0x0f, 0x32, 0xa9, 0x20, 0x21, 0x9c, 0x79, 0x5c, 0x80, 0x02, 0xeb, 0xed,
	0x9e, 0x89, 0xd7, 0x33, 0xf1, 0xb4, 0x89, 0x57, 0x34, 0xa9, 0xb9, 0x11, 0x53, 0x3b, 0x59, 0xdb,
	0x0b, 0x20, 0xc1, 0x11, 0x44, 0x80, 0xb5, 0xb8, 0x9d, 0x6d, 0xeb, 0x9d, 0xde, 0xe8, 0x55, 0xcf,
	0xb4, 0xb6, 0x12, 0x01, 0x44, 0x31, 0xc5, 0x84, 0x33, 0x4c, 0xd2, 0x14, 0x14, 0x51, 0x0c, 0x52,
	0xd9, 0x8f, 0xae, 0x8d, 0xe7, 0x1d, 0x82, 0xf4, 0x13, 0xa6, 0x58, 0xa4, 0x0f, 0x61, 0x75, 0xc0,
	0xe9, 0xe0, 0x64, 0x6d, 0xfc, 0x24, 0x15, 0x02, 0xc4, 0x20, 0xf6, 0xe6, 0x78, 0x0c, 0xf8, 0xe8,
	0x2b, 0xde, 0x18, 0x0f, 0x8e, 0x7a, 0xae, 0x14, 0xa8, 0x91, 0x98, 0x85, 0x44, 0xd1, 0x7e, 0xd4,
	0x29, 0x44, 0xa9, 0xa4, 0x69, 0xa7, 0x60, 0xbe, 0x7a, 0x91, 0xbb, 0x3f, 0x7e, 0xe2, 0xda, 0x4c,
	0x37, 0x33, 0x9a, 0xd5, 0xad, 0x89, 0x0a, 0x48, 0x12, 0x48, 0x7d, 0x49, 0x83, 0x4c, 0x30, 0x75,
	0x80, 0x7b, 0x77, 0xe7, 0x13, 0xce, 0xfc, 0x11, 0xad, 0x23, 0xcd, 0xa5, 0x46, 0x73, 0x73, 0x03,
	0x48, 0xb8, 0xde, 0xb7, 0xde, 0x60, 0x52, 0x59, 0x9f, 0x99, 0x95, 0xe2, 0x2b, 0xab, 0x68, 0xb5,
	0xbc, 0xb6, 0xb8, 0x7e, 0xfd, 0xe7, 0x7f, 0x8e, 0xcb, 0xe6, 0x21, 0x7a, 0xc9, 0x99, 0x17, 0xe5,
	0xea, 0x23, 0x23, 0xdf, 0x2e, 0x1e, 0xa2, 0x2b, 0xce, 0x9c, 0x30, 0x2a, 0x28, 0xdf, 0xcd, 0x1f,
	0x22, 0xa3, 0x32, 0x3f, 0x58, 0x2d, 0xa0, 0xd6, 0x2b, 0x41, 0x98, 0x6e, 0x8c, 0x38, 0x39, 0x3f,
	0x18, 0xe6, 0xeb, 0x1f, 0x51, 0xd5, 0x68, 0x6e, 0xde, 0xeb, 0xa7, 0xd7, 0x80, 0x74, 0x9b, 0x45,
	0x2d, 0xba, 0x6b, 0xad, 0x98, 0x8b, 0x29, 0x49, 0xa8, 0xe4, 0x24, 0xa0, 0x55, 0xb4, 0x8a, 0xd6,
	0x16, 0x5b, 0xe7, 0x0f, 0xac, 0xbb, 0xe6, 0xab, 0x24, 0x8e, 0xfd, 0x62, 0x6e, 0xb2, 0x5a, 0x5e,
	0x45, 0x6b, 0x2f, 0xdf, 0x58, 0xf6, 0xc6, 0x3b, 0xf2, 0xc3, 0x84, 0xab, 0x83, 0xdb, 0xa5, 0xd6,
	0x12, 0x89, 0xe3, 0xc6, 0x78, 0x12, 0xd2, 0xda, 0x35, 0x5f, 0xbb, 0xe0, 0xe3, 0xc7, 0x4c, 0xaa,
	0xea, 0x9c, 0x36, 0xbb, 0xe9, 0xcd, 0xd2, 0xde, 0xde, 0x04, 0x7c, 0xb7, 0x4b, 0xad, 0xe5, 0x42,
	0xcd, 0x32, 0x7f, 0xbe, 0xfe, 0x96, 0xb9, 0x34, 0xaa, 0xf5, 0x83, 0x1d, 0x60, 0x01, 0xb5, 0x16,
	0x8e, 0x8f, 0x50, 0xf9, 0xe4, 0x08, 0x19, 0x77, 0xe7, 0x16, 0x8c, 0x4a, 0xf9, 0xc6, 0x97, 0x0b,
	0x66, 0xa5, 0xa1, 0xef, 0xab, 0xd1, 0xdc, 0xfc, 0xb4, 0x5e, 0xdf, 0xaa, 0x6f, 0xdd, 0xb1, 0xbe,
	0x37, 0xcc, 0xe5, 0x49, 0xd0, 0xac, 0x0f, 0x66, 0xcb, 0x73, 0x0a, 0xf0, 0xda, 0x94, 0x32, 0xc7,
	0xdb, 0x27, 0x57, 0x17, 0xa4, 0x92, 0x3b, 0x5f, 0xa1, 0xa7, 0x4f, 0x0c, 0xd4, 0xfd, 0xa5, 0xea,
	0x6e, 0xbf, 0xbf, 0x1f, 0xb8, 0xf9, 0x8c, 0x70, 0xa5, 0x22, 0x69, 0x48, 0x44, 0xe8, 0x26, 0x90,
	0x32, 0x05, 0xe2, 0xdd, 0xbc, 0xe3, 0x5d, 0x06, 0x2e, 0x17, 0xb0, 0x7f, 0xe0, 0x0a, 0x4a, 0xc2,
	0xc7, 0xbf, 0xff, 0xf5, 0xad, 0x71, 0xc7, 0x69, 0xf6, 0xc7, 0x0b, 0x1e, 0x5e, 0xaf, 0xc4, 0x0f,
	0x86, 0xeb, 0x87, 0x17, 0x7a, 0x5e, 0xe2, 0x88, 0xaa, 0x61, 0x46, 0x7e, 0xa0, 0xd3, 0xb8, 0x85,
	0xae, 0x5a, 0x4f, 0x0c, 0x73, 0xa5, 0x57, 0x5d, 0x13, 0xee, 0xd5, 0x33, 0x05, 0x1f, 0x0f, 0x27,
	0x42, 0x2b, 0x8b, 0xa9, 0xb4, 0xea, 0xb3, 0x96, 0x38, 0x59, 0x9f, 0x53, 0xba, 0xac, 0x85, 0xe4,
	0xce, 0x37, 0x03, 0x5a, 0xd7, 0x35, 0x2d, 0x2d, 0xa2, 0x09, 0x95, 0x3b, 0xe7, 0xcc, 0x32, 0x49,
	0x8b, 0xc0, 0xf6, 0x04, 0x53, 0x54, 0x13, 0x6b, 0x59, 0x5b, 0x2f, 0x4c, 0x4c, 0x47, 0x1f, 0xea,
	0x31, 0x49, 0x32, 0x05, 0xe7, 0xa3, 0xd2, 0x17, 0x9a, 0xcc, 0x1f, 0x86, 0x69, 0x37, 0x69, 0x4c,
	0x15, 0x9d, 0x46, 0xcf, 0x6a, 0xcc, 0x54, 0x79, 0xcf, 0x64, 0xa2, 0x43, 0x8e, 0xef, 0xf2, 0x26,
	0x92, 0x3b, 0x3f, 0x0d, 0x00, 0x5e, 0x7b, 0x11, 0x80, 0xc3, 0x8e, 0xdb, 0xbd, 0x0a, 0xff, 0x37,
	0x3f, 0xfc, 0x60, 0x4a, 0xc4, 0xd7, 0xba, 0xda, 0xcd, 0xfc, 0xc3, 0xfe, 0xed, 0x08, 0xbd, 0x33,
	0xd3, 0x17, 0xfa, 0x49, 0xfb, 0x73, 0x1a, 0xa8, 0xc7, 0xbf, 0x56, 0x8d, 0x0a, 0x5a, 0xff, 0x0e,
	0x9d, 0x9c, 0xda, 0xa5, 0x67, 0xa7, 0x76, 0xe9, 0xf9, 0xa9, 0x8d, 0x1e, 0x75, 0x6d, 0xf4, 0x63,
	0xd7, 0x46, 0x4f, 0xbb, 0x36, 0x3a, 0xe9, 0xda, 0xe8, 0xcf, 0xae, 0x8d, 0xfe, 0xee, 0xda, 0xa5,
	0xe7, 0x5d, 0x1b, 0x7d, 0x7d, 0x66, 0x97, 0x8e, 0xcf, 0x6c, 0x74, 0x72, 0x66, 0x97, 0x9e, 0x9d,
	0xd9, 0xa5, 0xfb, 0xf7, 0x23, 0xe0, 0x5f, 0x44, 0x5e, 0x07, 0x62, 0x45, 0x85, 0x20, 0x5e, 0x26,
	0xb1, 0x5e, 0x6c, 0x83, 0x48, 0x72, 0x28, 0x1d, 0x16, 0x52, 0xe1, 0x0e, 0xc2, 0x98, 0xb7, 0x23,
	0xc0, 0x74, 0x5f, 0xf5, 0x7f, 0x1f, 0xff, 0xf9, 0xdf, 0x69, 0x5f, 0xd1, 0xbf, 0x8d, 0xf7, 0xfe,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x23, 0xf7, 0x6a, 0x40, 0x08, 0x00, 0x00,
}

func (this *CDNLoadBalancerList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNLoadBalancerList)
	if !ok {
		that2, ok := that.(CDNLoadBalancerList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CdnLoadbalancer) != len(that1.CdnLoadbalancer) {
		return false
	}
	for i := range this.CdnLoadbalancer {
		if this.CdnLoadbalancer[i] != that1.CdnLoadbalancer[i] {
			return false
		}
	}
	return true
}
func (this *GetCDNSecurityConfigReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCDNSecurityConfigReq)
	if !ok {
		that2, ok := that.(GetCDNSecurityConfigReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if that1.LoadbalancerChoice == nil {
		if this.LoadbalancerChoice != nil {
			return false
		}
	} else if this.LoadbalancerChoice == nil {
		return false
	} else if !this.LoadbalancerChoice.Equal(that1.LoadbalancerChoice) {
		return false
	}
	return true
}
func (this *GetCDNSecurityConfigReq_AllCdnLoadbalancers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCDNSecurityConfigReq_AllCdnLoadbalancers)
	if !ok {
		that2, ok := that.(GetCDNSecurityConfigReq_AllCdnLoadbalancers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllCdnLoadbalancers.Equal(that1.AllCdnLoadbalancers) {
		return false
	}
	return true
}
func (this *GetCDNSecurityConfigReq_CdnLoadbalancersList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCDNSecurityConfigReq_CdnLoadbalancersList)
	if !ok {
		that2, ok := that.(GetCDNSecurityConfigReq_CdnLoadbalancersList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CdnLoadbalancersList.Equal(that1.CdnLoadbalancersList) {
		return false
	}
	return true
}
func (this *CDNLoadBalancerList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cdn_loadbalancer.CDNLoadBalancerList{")
	s = append(s, "CdnLoadbalancer: "+fmt.Sprintf("%#v", this.CdnLoadbalancer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCDNSecurityConfigReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cdn_loadbalancer.GetCDNSecurityConfigReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.LoadbalancerChoice != nil {
		s = append(s, "LoadbalancerChoice: "+fmt.Sprintf("%#v", this.LoadbalancerChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCDNSecurityConfigReq_AllCdnLoadbalancers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetCDNSecurityConfigReq_AllCdnLoadbalancers{` +
		`AllCdnLoadbalancers:` + fmt.Sprintf("%#v", this.AllCdnLoadbalancers) + `}`}, ", ")
	return s
}
func (this *GetCDNSecurityConfigReq_CdnLoadbalancersList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cdn_loadbalancer.GetCDNSecurityConfigReq_CdnLoadbalancersList{` +
		`CdnLoadbalancersList:` + fmt.Sprintf("%#v", this.CdnLoadbalancersList) + `}`}, ", ")
	return s
}
func valueToGoStringPublicCdnwaapCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomCDNWAAPAPIClient is the client API for CustomCDNWAAPAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomCDNWAAPAPIClient interface {
	// Get Security Config for CDN Load Balancers
	//
	// x-displayName: "Get Security Config for CDN Load Balancer"
	// Fetch the corresponding Security Config for the given CDN load balancers
	GetCDNSecurityConfig(ctx context.Context, in *GetCDNSecurityConfigReq, opts ...grpc.CallOption) (*common_security.GetSecurityConfigRsp, error)
	// Get DoS Auto-Mitigation Rules for CDN Load Balancer
	//
	// x-displayName: "Get DoS Auto-Mitigation Rules for CDN Load Balancer"
	// Get the corresponding DoS Auto-Mitigation Rules for the given CDN load balancer
	GetCDNDoSAutoMitigationRules(ctx context.Context, in *common_security.GetDoSAutoMitigationRulesReq, opts ...grpc.CallOption) (*common_security.GetDoSAutoMitigationRulesRsp, error)
	// Delete DoS Auto-Mitigation Rule for CDN Load Balancer
	//
	// x-displayName: "Delete DoS Auto-Mitigation Rule for CDN Load Balancer"
	// Delete the corresponding DoS Auto-Mitigation Rule for the given CDN load balancer
	DeleteCDNDoSAutoMitigationRule(ctx context.Context, in *common_security.DeleteDoSAutoMitigationRuleReq, opts ...grpc.CallOption) (*common_security.DeleteDoSAutoMitigationRuleRsp, error)
}

type customCDNWAAPAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomCDNWAAPAPIClient(cc *grpc.ClientConn) CustomCDNWAAPAPIClient {
	return &customCDNWAAPAPIClient{cc}
}

func (c *customCDNWAAPAPIClient) GetCDNSecurityConfig(ctx context.Context, in *GetCDNSecurityConfigReq, opts ...grpc.CallOption) (*common_security.GetSecurityConfigRsp, error) {
	out := new(common_security.GetSecurityConfigRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.cdn_loadbalancer.CustomCDNWAAPAPI/GetCDNSecurityConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customCDNWAAPAPIClient) GetCDNDoSAutoMitigationRules(ctx context.Context, in *common_security.GetDoSAutoMitigationRulesReq, opts ...grpc.CallOption) (*common_security.GetDoSAutoMitigationRulesRsp, error) {
	out := new(common_security.GetDoSAutoMitigationRulesRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.cdn_loadbalancer.CustomCDNWAAPAPI/GetCDNDoSAutoMitigationRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customCDNWAAPAPIClient) DeleteCDNDoSAutoMitigationRule(ctx context.Context, in *common_security.DeleteDoSAutoMitigationRuleReq, opts ...grpc.CallOption) (*common_security.DeleteDoSAutoMitigationRuleRsp, error) {
	out := new(common_security.DeleteDoSAutoMitigationRuleRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.cdn_loadbalancer.CustomCDNWAAPAPI/DeleteCDNDoSAutoMitigationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomCDNWAAPAPIServer is the server API for CustomCDNWAAPAPI service.
type CustomCDNWAAPAPIServer interface {
	// Get Security Config for CDN Load Balancers
	//
	// x-displayName: "Get Security Config for CDN Load Balancer"
	// Fetch the corresponding Security Config for the given CDN load balancers
	GetCDNSecurityConfig(context.Context, *GetCDNSecurityConfigReq) (*common_security.GetSecurityConfigRsp, error)
	// Get DoS Auto-Mitigation Rules for CDN Load Balancer
	//
	// x-displayName: "Get DoS Auto-Mitigation Rules for CDN Load Balancer"
	// Get the corresponding DoS Auto-Mitigation Rules for the given CDN load balancer
	GetCDNDoSAutoMitigationRules(context.Context, *common_security.GetDoSAutoMitigationRulesReq) (*common_security.GetDoSAutoMitigationRulesRsp, error)
	// Delete DoS Auto-Mitigation Rule for CDN Load Balancer
	//
	// x-displayName: "Delete DoS Auto-Mitigation Rule for CDN Load Balancer"
	// Delete the corresponding DoS Auto-Mitigation Rule for the given CDN load balancer
	DeleteCDNDoSAutoMitigationRule(context.Context, *common_security.DeleteDoSAutoMitigationRuleReq) (*common_security.DeleteDoSAutoMitigationRuleRsp, error)
}

// UnimplementedCustomCDNWAAPAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomCDNWAAPAPIServer struct {
}

func (*UnimplementedCustomCDNWAAPAPIServer) GetCDNSecurityConfig(ctx context.Context, req *GetCDNSecurityConfigReq) (*common_security.GetSecurityConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCDNSecurityConfig not implemented")
}
func (*UnimplementedCustomCDNWAAPAPIServer) GetCDNDoSAutoMitigationRules(ctx context.Context, req *common_security.GetDoSAutoMitigationRulesReq) (*common_security.GetDoSAutoMitigationRulesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCDNDoSAutoMitigationRules not implemented")
}
func (*UnimplementedCustomCDNWAAPAPIServer) DeleteCDNDoSAutoMitigationRule(ctx context.Context, req *common_security.DeleteDoSAutoMitigationRuleReq) (*common_security.DeleteDoSAutoMitigationRuleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCDNDoSAutoMitigationRule not implemented")
}

func RegisterCustomCDNWAAPAPIServer(s *grpc.Server, srv CustomCDNWAAPAPIServer) {
	s.RegisterService(&_CustomCDNWAAPAPI_serviceDesc, srv)
}

func _CustomCDNWAAPAPI_GetCDNSecurityConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCDNSecurityConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomCDNWAAPAPIServer).GetCDNSecurityConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.cdn_loadbalancer.CustomCDNWAAPAPI/GetCDNSecurityConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomCDNWAAPAPIServer).GetCDNSecurityConfig(ctx, req.(*GetCDNSecurityConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomCDNWAAPAPI_GetCDNDoSAutoMitigationRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common_security.GetDoSAutoMitigationRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomCDNWAAPAPIServer).GetCDNDoSAutoMitigationRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.cdn_loadbalancer.CustomCDNWAAPAPI/GetCDNDoSAutoMitigationRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomCDNWAAPAPIServer).GetCDNDoSAutoMitigationRules(ctx, req.(*common_security.GetDoSAutoMitigationRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomCDNWAAPAPI_DeleteCDNDoSAutoMitigationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common_security.DeleteDoSAutoMitigationRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomCDNWAAPAPIServer).DeleteCDNDoSAutoMitigationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.cdn_loadbalancer.CustomCDNWAAPAPI/DeleteCDNDoSAutoMitigationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomCDNWAAPAPIServer).DeleteCDNDoSAutoMitigationRule(ctx, req.(*common_security.DeleteDoSAutoMitigationRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomCDNWAAPAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.cdn_loadbalancer.CustomCDNWAAPAPI",
	HandlerType: (*CustomCDNWAAPAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCDNSecurityConfig",
			Handler:    _CustomCDNWAAPAPI_GetCDNSecurityConfig_Handler,
		},
		{
			MethodName: "GetCDNDoSAutoMitigationRules",
			Handler:    _CustomCDNWAAPAPI_GetCDNDoSAutoMitigationRules_Handler,
		},
		{
			MethodName: "DeleteCDNDoSAutoMitigationRule",
			Handler:    _CustomCDNWAAPAPI_DeleteCDNDoSAutoMitigationRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/cdn_loadbalancer/public_cdnwaap_customapi.proto",
}

func (m *CDNLoadBalancerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNLoadBalancerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNLoadBalancerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CdnLoadbalancer) > 0 {
		for iNdEx := len(m.CdnLoadbalancer) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CdnLoadbalancer[iNdEx])
			copy(dAtA[i:], m.CdnLoadbalancer[iNdEx])
			i = encodeVarintPublicCdnwaapCustomapi(dAtA, i, uint64(len(m.CdnLoadbalancer[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetCDNSecurityConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCDNSecurityConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCDNSecurityConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoadbalancerChoice != nil {
		{
			size := m.LoadbalancerChoice.Size()
			i -= size
			if _, err := m.LoadbalancerChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCdnwaapCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCDNSecurityConfigReq_AllCdnLoadbalancers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCDNSecurityConfigReq_AllCdnLoadbalancers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllCdnLoadbalancers != nil {
		{
			size, err := m.AllCdnLoadbalancers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCdnwaapCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetCDNSecurityConfigReq_CdnLoadbalancersList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCDNSecurityConfigReq_CdnLoadbalancersList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CdnLoadbalancersList != nil {
		{
			size, err := m.CdnLoadbalancersList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCdnwaapCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func encodeVarintPublicCdnwaapCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCdnwaapCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CDNLoadBalancerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CdnLoadbalancer) > 0 {
		for _, s := range m.CdnLoadbalancer {
			l = len(s)
			n += 1 + l + sovPublicCdnwaapCustomapi(uint64(l))
		}
	}
	return n
}

func (m *GetCDNSecurityConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCdnwaapCustomapi(uint64(l))
	}
	if m.LoadbalancerChoice != nil {
		n += m.LoadbalancerChoice.Size()
	}
	return n
}

func (m *GetCDNSecurityConfigReq_AllCdnLoadbalancers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllCdnLoadbalancers != nil {
		l = m.AllCdnLoadbalancers.Size()
		n += 1 + l + sovPublicCdnwaapCustomapi(uint64(l))
	}
	return n
}
func (m *GetCDNSecurityConfigReq_CdnLoadbalancersList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CdnLoadbalancersList != nil {
		l = m.CdnLoadbalancersList.Size()
		n += 1 + l + sovPublicCdnwaapCustomapi(uint64(l))
	}
	return n
}

func sovPublicCdnwaapCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCdnwaapCustomapi(x uint64) (n int) {
	return sovPublicCdnwaapCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CDNLoadBalancerList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNLoadBalancerList{`,
		`CdnLoadbalancer:` + fmt.Sprintf("%v", this.CdnLoadbalancer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCDNSecurityConfigReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCDNSecurityConfigReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`LoadbalancerChoice:` + fmt.Sprintf("%v", this.LoadbalancerChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCDNSecurityConfigReq_AllCdnLoadbalancers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCDNSecurityConfigReq_AllCdnLoadbalancers{`,
		`AllCdnLoadbalancers:` + strings.Replace(fmt.Sprintf("%v", this.AllCdnLoadbalancers), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCDNSecurityConfigReq_CdnLoadbalancersList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCDNSecurityConfigReq_CdnLoadbalancersList{`,
		`CdnLoadbalancersList:` + strings.Replace(fmt.Sprintf("%v", this.CdnLoadbalancersList), "CDNLoadBalancerList", "CDNLoadBalancerList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCdnwaapCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CDNLoadBalancerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCdnwaapCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNLoadBalancerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNLoadBalancerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdnLoadbalancer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCdnwaapCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCdnwaapCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCdnwaapCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CdnLoadbalancer = append(m.CdnLoadbalancer, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCdnwaapCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCdnwaapCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCdnwaapCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCDNSecurityConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCdnwaapCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCDNSecurityConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCDNSecurityConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCdnwaapCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCdnwaapCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCdnwaapCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllCdnLoadbalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCdnwaapCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCdnwaapCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCdnwaapCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerChoice = &GetCDNSecurityConfigReq_AllCdnLoadbalancers{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdnLoadbalancersList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCdnwaapCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCdnwaapCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCdnwaapCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CDNLoadBalancerList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerChoice = &GetCDNSecurityConfigReq_CdnLoadbalancersList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCdnwaapCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCdnwaapCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCdnwaapCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCdnwaapCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCdnwaapCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCdnwaapCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCdnwaapCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCdnwaapCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCdnwaapCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCdnwaapCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCdnwaapCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCdnwaapCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCdnwaapCustomapi = fmt.Errorf("proto: unexpected end of group")
)

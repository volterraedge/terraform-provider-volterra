// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package cdn_loadbalancer

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CDNLoadBalancerList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CDNLoadBalancerList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CDNLoadBalancerList) DeepCopy() *CDNLoadBalancerList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CDNLoadBalancerList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CDNLoadBalancerList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CDNLoadBalancerList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CDNLoadBalancerListValidator().Validate(ctx, m, opts...)
}

type ValidateCDNLoadBalancerList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCDNLoadBalancerList) CdnLoadbalancerValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for cdn_loadbalancer")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cdn_loadbalancer")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cdn_loadbalancer")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cdn_loadbalancer")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCDNLoadBalancerList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CDNLoadBalancerList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CDNLoadBalancerList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cdn_loadbalancer"]; exists {
		vOpts := append(opts, db.WithValidateField("cdn_loadbalancer"))
		if err := fv(ctx, m.GetCdnLoadbalancer(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCDNLoadBalancerListValidator = func() *ValidateCDNLoadBalancerList {
	v := &ValidateCDNLoadBalancerList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCdnLoadbalancer := v.CdnLoadbalancerValidationRuleHandler
	rulesCdnLoadbalancer := map[string]string{
		"ves.io.schema.rules.message.required":              "true",
		"ves.io.schema.rules.repeated.items.string.max_len": "256",
		"ves.io.schema.rules.repeated.items.string.min_len": "1",
		"ves.io.schema.rules.repeated.max_items":            "5",
		"ves.io.schema.rules.repeated.min_items":            "1",
	}
	vFn, err = vrhCdnLoadbalancer(rulesCdnLoadbalancer)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CDNLoadBalancerList.cdn_loadbalancer: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cdn_loadbalancer"] = vFn

	return v
}()

func CDNLoadBalancerListValidator() db.Validator {
	return DefaultCDNLoadBalancerListValidator
}

// augmented methods on protoc/std generated struct

func (m *GetCDNSecurityConfigReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetCDNSecurityConfigReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetCDNSecurityConfigReq) DeepCopy() *GetCDNSecurityConfigReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetCDNSecurityConfigReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetCDNSecurityConfigReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetCDNSecurityConfigReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetCDNSecurityConfigReqValidator().Validate(ctx, m, opts...)
}

type ValidateGetCDNSecurityConfigReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetCDNSecurityConfigReq) LoadbalancerChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for loadbalancer_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetCDNSecurityConfigReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetCDNSecurityConfigReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetCDNSecurityConfigReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["loadbalancer_choice"]; exists {
		val := m.GetLoadbalancerChoice()
		vOpts := append(opts,
			db.WithValidateField("loadbalancer_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLoadbalancerChoice().(type) {
	case *GetCDNSecurityConfigReq_AllCdnLoadbalancers:
		if fv, exists := v.FldValidators["loadbalancer_choice.all_cdn_loadbalancers"]; exists {
			val := m.GetLoadbalancerChoice().(*GetCDNSecurityConfigReq_AllCdnLoadbalancers).AllCdnLoadbalancers
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_choice"),
				db.WithValidateField("all_cdn_loadbalancers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetCDNSecurityConfigReq_CdnLoadbalancersList:
		if fv, exists := v.FldValidators["loadbalancer_choice.cdn_loadbalancers_list"]; exists {
			val := m.GetLoadbalancerChoice().(*GetCDNSecurityConfigReq_CdnLoadbalancersList).CdnLoadbalancersList
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_choice"),
				db.WithValidateField("cdn_loadbalancers_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetCDNSecurityConfigReqValidator = func() *ValidateGetCDNSecurityConfigReq {
	v := &ValidateGetCDNSecurityConfigReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLoadbalancerChoice := v.LoadbalancerChoiceValidationRuleHandler
	rulesLoadbalancerChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLoadbalancerChoice(rulesLoadbalancerChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetCDNSecurityConfigReq.loadbalancer_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_choice"] = vFn

	v.FldValidators["loadbalancer_choice.cdn_loadbalancers_list"] = CDNLoadBalancerListValidator().Validate

	return v
}()

func GetCDNSecurityConfigReqValidator() db.Validator {
	return DefaultGetCDNSecurityConfigReqValidator
}

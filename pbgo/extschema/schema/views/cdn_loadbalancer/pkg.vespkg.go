// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package cdn_loadbalancer

import (
	"reflect"

	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/store"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.views.cdn_loadbalancer.CDNLbStatusType"] = CDNLbStatusTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNLoadbalancerStatus"] = CDNLoadbalancerStatusValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.SpecType"] = SpecTypeValidator()

	vr["ves.io.schema.views.cdn_loadbalancer.Object"] = ObjectValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.StatusObject"] = StatusObjectValidator()

	vr["ves.io.schema.views.cdn_loadbalancer.UpdateServiceDomainsRequest"] = UpdateServiceDomainsRequestValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.UpdateServiceDomainsResponse"] = UpdateServiceDomainsResponseValidator()

	vr["ves.io.schema.views.cdn_loadbalancer.CreateRequest"] = CreateRequestValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CreateResponse"] = CreateResponseValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.DeleteRequest"] = DeleteRequestValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.GetRequest"] = GetRequestValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.GetResponse"] = GetResponseValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.ListRequest"] = ListRequestValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.ListResponse"] = ListResponseValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.ListResponseItem"] = ListResponseItemValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.ReplaceRequest"] = ReplaceRequestValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.ReplaceResponse"] = ReplaceResponseValidator()

	vr["ves.io.schema.views.cdn_loadbalancer.CDNAccessLogAggregationRequest"] = CDNAccessLogAggregationRequestValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNAccessLogFilter"] = CDNAccessLogFilterValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNAccessLogRequest"] = CDNAccessLogRequestValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNAggregationRequest"] = CDNAggregationRequestValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNDateAggregation"] = CDNDateAggregationValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNDateSubAggregation"] = CDNDateSubAggregationValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNFieldAggregation"] = CDNFieldAggregationValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNFieldSubAggregation"] = CDNFieldSubAggregationValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNLogAggregationResponse"] = CDNLogAggregationResponseValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNLogResponse"] = CDNLogResponseValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.FieldAggregation"] = FieldAggregationValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.GetServiceOperationReq"] = GetServiceOperationReqValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.GetServiceOperationRsp"] = GetServiceOperationRspValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.LilacCDNAccessLogsResponseData"] = LilacCDNAccessLogsResponseDataValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.LilacCDNCachePurgeRequest"] = LilacCDNCachePurgeRequestValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.LilacCDNCachePurgeResponse"] = LilacCDNCachePurgeResponseValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsRequest"] = LilacCDNMetricsRequestValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsResponse"] = LilacCDNMetricsResponseValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.ListServiceOperationsReq"] = ListServiceOperationsReqValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.ListServiceOperationsRsp"] = ListServiceOperationsRspValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.PurgeOperationItem"] = PurgeOperationItemValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.ServiceOperationItem"] = ServiceOperationItemValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.ServiceOperationsItem"] = ServiceOperationsItemValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.ServiceOperationsTimeRange"] = ServiceOperationsTimeRangeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.SubscribeRequest"] = SubscribeRequestValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.SubscribeResponse"] = SubscribeResponseValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.UnsubscribeRequest"] = UnsubscribeRequestValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.UnsubscribeResponse"] = UnsubscribeResponseValidator()

	vr["ves.io.schema.views.cdn_loadbalancer.AdvancedOptionsType"] = AdvancedOptionsTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.AuthenticationOptions"] = AuthenticationOptionsValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNCacheRule"] = CDNCacheRuleValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNCacheRuleExpression"] = CDNCacheRuleExpressionValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNCacheRuleExpressionList"] = CDNCacheRuleExpressionListValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNCustomAuthentication"] = CDNCustomAuthenticationValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNDownstreamTlsParamsType"] = CDNDownstreamTlsParamsTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNHTTPSAutoCertsType"] = CDNHTTPSAutoCertsTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNHTTPSCustomCertsType"] = CDNHTTPSCustomCertsTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNOriginServerType"] = CDNOriginServerTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNPathMatcherType"] = CDNPathMatcherTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CDNTLSConfig"] = CDNTLSConfigValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CacheCookieMatcherType"] = CacheCookieMatcherTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CacheEligibleOptions"] = CacheEligibleOptionsValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CacheHeaderMatcherType"] = CacheHeaderMatcherTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CacheOperator"] = CacheOperatorValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CacheOptions"] = CacheOptionsValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CacheQueryParameterMatcherType"] = CacheQueryParameterMatcherTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CacheTTLEnableProps"] = CacheTTLEnablePropsValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CacheTTLOptionsType"] = CacheTTLOptionsTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CdnOriginPoolType"] = CdnOriginPoolTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.CreateSpecType"] = CreateSpecTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.DefaultCacheAction"] = DefaultCacheActionValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.DefaultCacheTTLProps"] = DefaultCacheTTLPropsValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.GeoFilteringOptions"] = GeoFilteringOptionsValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.GetSpecType"] = GetSpecTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.GlobalSpecType"] = GlobalSpecTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.HeaderControlType"] = HeaderControlTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.IpFilteringOptions"] = IpFilteringOptionsValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsFilter"] = LilacCDNMetricsFilterValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsResponseData"] = LilacCDNMetricsResponseDataValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsResponseGroupBy"] = LilacCDNMetricsResponseGroupByValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsResponseSeries"] = LilacCDNMetricsResponseSeriesValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsResponseValue"] = LilacCDNMetricsResponseValueValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.LogHeaderOptions"] = LogHeaderOptionsValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.LoggingOptionsType"] = LoggingOptionsTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.OriginAdvancedConfiguration"] = OriginAdvancedConfigurationValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.ProxyTypeHttpsAutoCerts"] = ProxyTypeHttpsAutoCertsValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.ReplaceSpecType"] = ReplaceSpecTypeValidator()
	vr["ves.io.schema.views.cdn_loadbalancer.SecurityOptionsType"] = SecurityOptionsTypeValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {
	mdr.EntryFactory["ves.io.schema.views.cdn_loadbalancer.Object"] = NewEntryObject
	mdr.EntryStoreMap["ves.io.schema.views.cdn_loadbalancer.Object"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.views.cdn_loadbalancer.Object"] = reflect.TypeOf(&DBObject{})
	mdr.EntryIndexers["ves.io.schema.views.cdn_loadbalancer.Object"] = GetObjectIndexers
	mdr.EntryFactory["ves.io.schema.views.cdn_loadbalancer.StatusObject"] = NewEntryStatusObject
	mdr.EntryStoreMap["ves.io.schema.views.cdn_loadbalancer.StatusObject"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.views.cdn_loadbalancer.StatusObject"] = reflect.TypeOf(&DBStatusObject{})
	mdr.EntryIndexers["ves.io.schema.views.cdn_loadbalancer.StatusObject"] = GetStatusObjectIndexers

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

	mdr.RPCDeprecatedRequestFieldsRegistry["ves.io.schema.views.cdn_loadbalancer.API.Create"] = []string{
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.hostname_uri",
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_request_uri",
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri",
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri_query",
		"spec.more_option.cache_options.default_cache_action.eligible_for_cache",
		"spec.more_option.cache_ttl_options",
	}

	mdr.RPCDeprecatedResponseFieldsRegistry["ves.io.schema.views.cdn_loadbalancer.API.Create"] = []string{
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.hostname_uri",
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_request_uri",
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri",
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri_query",
		"spec.more_option.cache_options.default_cache_action.eligible_for_cache",
		"spec.more_option.cache_ttl_options",
	}

	mdr.RPCHiddenInternalFieldsRegistry["ves.io.schema.views.cdn_loadbalancer.API.Create"] = []string{
		"spec.https.tls_parameters.tls_certificates.#.private_key.blindfold_secret_info_internal",
		"spec.https.tls_parameters.tls_certificates.#.private_key.secret_encoding_type",
		"spec.https.tls_parameters.tls_certificates.#.private_key.vault_secret_info",
		"spec.https.tls_parameters.tls_certificates.#.private_key.wingman_secret_info",
		"spec.more_option.cache_ttl_options",
		"spec.more_option.header_options.request_headers_to_add.#.secret_value.blindfold_secret_info_internal",
		"spec.more_option.header_options.request_headers_to_add.#.secret_value.secret_encoding_type",
		"spec.more_option.header_options.request_headers_to_add.#.secret_value.vault_secret_info",
		"spec.more_option.header_options.request_headers_to_add.#.secret_value.wingman_secret_info",
		"spec.more_option.header_options.response_headers_to_add.#.secret_value.blindfold_secret_info_internal",
		"spec.more_option.header_options.response_headers_to_add.#.secret_value.secret_encoding_type",
		"spec.more_option.header_options.response_headers_to_add.#.secret_value.vault_secret_info",
		"spec.more_option.header_options.response_headers_to_add.#.secret_value.wingman_secret_info",
		"spec.more_option.security_options.auth_options.jwt.backup_key.blindfold_secret_info_internal",
		"spec.more_option.security_options.auth_options.jwt.backup_key.secret_encoding_type",
		"spec.more_option.security_options.auth_options.jwt.backup_key.vault_secret_info",
		"spec.more_option.security_options.auth_options.jwt.backup_key.wingman_secret_info",
		"spec.more_option.security_options.auth_options.jwt.secret_key.blindfold_secret_info_internal",
		"spec.more_option.security_options.auth_options.jwt.secret_key.secret_encoding_type",
		"spec.more_option.security_options.auth_options.jwt.secret_key.vault_secret_info",
		"spec.more_option.security_options.auth_options.jwt.secret_key.wingman_secret_info",
		"spec.origin_pool.use_tls.use_mtls.tls_certificates.#.private_key.blindfold_secret_info_internal",
		"spec.origin_pool.use_tls.use_mtls.tls_certificates.#.private_key.secret_encoding_type",
		"spec.origin_pool.use_tls.use_mtls.tls_certificates.#.private_key.vault_secret_info",
		"spec.origin_pool.use_tls.use_mtls.tls_certificates.#.private_key.wingman_secret_info",
	}

	mdr.RPCAvailableInReqFieldRegistry["ves.io.schema.views.cdn_loadbalancer.API.Create"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "spec.origin_pool.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_pool.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "spec.origin_pool.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
	}

	mdr.RPCAvailableInResFieldRegistry["ves.io.schema.views.cdn_loadbalancer.API.Create"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "spec.origin_pool.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_pool.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "spec.origin_pool.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
	}

	mdr.RPCConfidentialRequestRegistry["ves.io.schema.views.cdn_loadbalancer.API.Create"] = "ves.io.schema.views.cdn_loadbalancer.CreateRequest"

	mdr.RPCDeprecatedResponseFieldsRegistry["ves.io.schema.views.cdn_loadbalancer.API.Get"] = []string{
		"create_form.spec.more_option.cache_options.cache_rules.#.eligible_for_cache.hostname_uri",
		"create_form.spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_request_uri",
		"create_form.spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri",
		"create_form.spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri_query",
		"create_form.spec.more_option.cache_options.default_cache_action.eligible_for_cache",
		"create_form.spec.more_option.cache_ttl_options",
		"object",
		"replace_form.spec.more_option.cache_options.cache_rules.#.eligible_for_cache.hostname_uri",
		"replace_form.spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_request_uri",
		"replace_form.spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri",
		"replace_form.spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri_query",
		"replace_form.spec.more_option.cache_options.default_cache_action.eligible_for_cache",
		"replace_form.spec.more_option.cache_ttl_options",
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.hostname_uri",
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_request_uri",
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri",
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri_query",
		"spec.more_option.cache_options.default_cache_action.eligible_for_cache",
		"spec.more_option.cache_ttl_options",
	}

	mdr.RPCAvailableInResFieldRegistry["ves.io.schema.views.cdn_loadbalancer.API.Get"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "create_form.spec.origin_pool.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "create_form.spec.origin_pool.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "create_form.spec.origin_pool.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "object.spec.gc_spec.origin_pool.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "object.spec.gc_spec.origin_pool.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "object.spec.gc_spec.origin_pool.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "replace_form.spec.origin_pool.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "replace_form.spec.origin_pool.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "replace_form.spec.origin_pool.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "spec.origin_pool.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_pool.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "spec.origin_pool.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
	}

	mdr.RPCDeprecatedResponseFieldsRegistry["ves.io.schema.views.cdn_loadbalancer.API.List"] = []string{
		"items.#.get_spec.more_option.cache_options.cache_rules.#.eligible_for_cache.hostname_uri",
		"items.#.get_spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_request_uri",
		"items.#.get_spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri",
		"items.#.get_spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri_query",
		"items.#.get_spec.more_option.cache_options.default_cache_action.eligible_for_cache",
		"items.#.get_spec.more_option.cache_ttl_options",
		"items.#.object.spec.gc_spec.more_option.cache_options.cache_rules.#.eligible_for_cache.hostname_uri",
		"items.#.object.spec.gc_spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_request_uri",
		"items.#.object.spec.gc_spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri",
		"items.#.object.spec.gc_spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri_query",
		"items.#.object.spec.gc_spec.more_option.cache_options.default_cache_action.eligible_for_cache",
		"items.#.object.spec.gc_spec.more_option.cache_ttl_options",
	}

	mdr.RPCAvailableInResFieldRegistry["ves.io.schema.views.cdn_loadbalancer.API.List"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "items.#.get_spec.origin_pool.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "items.#.get_spec.origin_pool.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "items.#.get_spec.origin_pool.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "items.#.object.spec.gc_spec.origin_pool.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "items.#.object.spec.gc_spec.origin_pool.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "items.#.object.spec.gc_spec.origin_pool.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
	}

	mdr.RPCDeprecatedRequestFieldsRegistry["ves.io.schema.views.cdn_loadbalancer.API.Replace"] = []string{
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.hostname_uri",
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_request_uri",
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri",
		"spec.more_option.cache_options.cache_rules.#.eligible_for_cache.scheme_hostname_uri_query",
		"spec.more_option.cache_options.default_cache_action.eligible_for_cache",
		"spec.more_option.cache_ttl_options",
	}

	mdr.RPCHiddenInternalFieldsRegistry["ves.io.schema.views.cdn_loadbalancer.API.Replace"] = []string{
		"spec.https.tls_parameters.tls_certificates.#.private_key.blindfold_secret_info_internal",
		"spec.https.tls_parameters.tls_certificates.#.private_key.secret_encoding_type",
		"spec.https.tls_parameters.tls_certificates.#.private_key.vault_secret_info",
		"spec.https.tls_parameters.tls_certificates.#.private_key.wingman_secret_info",
		"spec.more_option.cache_ttl_options",
		"spec.more_option.header_options.request_headers_to_add.#.secret_value.blindfold_secret_info_internal",
		"spec.more_option.header_options.request_headers_to_add.#.secret_value.secret_encoding_type",
		"spec.more_option.header_options.request_headers_to_add.#.secret_value.vault_secret_info",
		"spec.more_option.header_options.request_headers_to_add.#.secret_value.wingman_secret_info",
		"spec.more_option.header_options.response_headers_to_add.#.secret_value.blindfold_secret_info_internal",
		"spec.more_option.header_options.response_headers_to_add.#.secret_value.secret_encoding_type",
		"spec.more_option.header_options.response_headers_to_add.#.secret_value.vault_secret_info",
		"spec.more_option.header_options.response_headers_to_add.#.secret_value.wingman_secret_info",
		"spec.more_option.security_options.auth_options.jwt.backup_key.blindfold_secret_info_internal",
		"spec.more_option.security_options.auth_options.jwt.backup_key.secret_encoding_type",
		"spec.more_option.security_options.auth_options.jwt.backup_key.vault_secret_info",
		"spec.more_option.security_options.auth_options.jwt.backup_key.wingman_secret_info",
		"spec.more_option.security_options.auth_options.jwt.secret_key.blindfold_secret_info_internal",
		"spec.more_option.security_options.auth_options.jwt.secret_key.secret_encoding_type",
		"spec.more_option.security_options.auth_options.jwt.secret_key.vault_secret_info",
		"spec.more_option.security_options.auth_options.jwt.secret_key.wingman_secret_info",
		"spec.origin_pool.use_tls.use_mtls.tls_certificates.#.private_key.blindfold_secret_info_internal",
		"spec.origin_pool.use_tls.use_mtls.tls_certificates.#.private_key.secret_encoding_type",
		"spec.origin_pool.use_tls.use_mtls.tls_certificates.#.private_key.vault_secret_info",
		"spec.origin_pool.use_tls.use_mtls.tls_certificates.#.private_key.wingman_secret_info",
	}

	mdr.RPCAvailableInReqFieldRegistry["ves.io.schema.views.cdn_loadbalancer.API.Replace"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "spec.origin_pool.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_pool.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "spec.origin_pool.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
	}

	mdr.RPCConfidentialRequestRegistry["ves.io.schema.views.cdn_loadbalancer.API.Replace"] = "ves.io.schema.views.cdn_loadbalancer.ReplaceRequest"

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {
	sm["ves.io.schema.views.cdn_loadbalancer.API"] = "config"
	sm["ves.io.schema.views.cdn_loadbalancer.CustomAPI"] = "cdn"

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

	sm["config"] = svcfw.P0PolicyInfo{
		Name:            "ves-io-allow-config",
		ServiceSelector: "akar\\.gc.*\\",
	}

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

	customCSR = mdr.PvtCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas

		customCSR.SwaggerRegistry["ves.io.schema.views.cdn_loadbalancer.Object"] = PrivateCustomAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.views.cdn_loadbalancer.PrivateCustomAPI"] = NewPrivateCustomAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.views.cdn_loadbalancer.PrivateCustomAPI"] = NewPrivateCustomAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.views.cdn_loadbalancer.PrivateCustomAPI"] = RegisterPrivateCustomAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.views.cdn_loadbalancer.PrivateCustomAPI"] = RegisterGwPrivateCustomAPIHandler
		customCSR.ServerRegistry["ves.io.schema.views.cdn_loadbalancer.PrivateCustomAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewPrivateCustomAPIServer(svc)
		}

	}()

	csr = mdr.PubCRUDServiceRegistry

	func() {
		// set swagger jsons for our and external schemas
		csr.CRUDSwaggerRegistry["ves.io.schema.views.cdn_loadbalancer.Object"] = APISwaggerJSON
		csr.CRUDGrpcClientRegistry["ves.io.schema.views.cdn_loadbalancer.Object"] = NewCRUDAPIGrpcClient
		csr.CRUDRestClientRegistry["ves.io.schema.views.cdn_loadbalancer.Object"] = NewCRUDAPIRestClient
		csr.CRUDInprocClientRegistry["ves.io.schema.views.cdn_loadbalancer.Object"] = NewCRUDAPIInprocClient
		if isExternal {
			return
		}
		// registration of api handlers if our own schema
		mdr.SvcRegisterHandlers["ves.io.schema.views.cdn_loadbalancer.API"] = RegisterAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.views.cdn_loadbalancer.API"] = RegisterGwAPIHandler
		csr.CRUDServerRegistry["ves.io.schema.views.cdn_loadbalancer.Object"] = NewCRUDAPIServer

	}()

	customCSR = mdr.PubCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas

		customCSR.SwaggerRegistry["ves.io.schema.views.cdn_loadbalancer.Object"] = CustomAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.views.cdn_loadbalancer.CustomAPI"] = NewCustomAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.views.cdn_loadbalancer.CustomAPI"] = NewCustomAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.views.cdn_loadbalancer.CustomAPI"] = RegisterCustomAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.views.cdn_loadbalancer.CustomAPI"] = RegisterGwCustomAPIHandler
		customCSR.ServerRegistry["ves.io.schema.views.cdn_loadbalancer.CustomAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewCustomAPIServer(svc)
		}

	}()

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}

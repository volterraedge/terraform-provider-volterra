// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/cdn_loadbalancer/object.proto

package cdn_loadbalancer

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CDN LoadBalancer Deployment status
//
// x-displayName: "CDN LoadBalancer Deployment status"
// Deployment status
type CDNLoadbalancerDeploymentStatus int32

const (
	// x-displayName: "Created"
	CDN_LB_STATUS_CREATED CDNLoadbalancerDeploymentStatus = 0
	// x-displayName: "Deploying"
	CDN_LB_STATUS_DEPLOYING CDNLoadbalancerDeploymentStatus = 1
	// x-displayName: "Deploy Failed"
	CDN_LB_STATUS_DEPLOY_FAILED CDNLoadbalancerDeploymentStatus = 2
	// x-displayName: "Deployed"
	CDN_LB_STATUS_DEPLOYED CDNLoadbalancerDeploymentStatus = 3
	// x-displayname: "Failed"
	CDN_LB_STATUS_FAILED CDNLoadbalancerDeploymentStatus = 4
)

var CDNLoadbalancerDeploymentStatus_name = map[int32]string{
	0: "CDN_LB_STATUS_CREATED",
	1: "CDN_LB_STATUS_DEPLOYING",
	2: "CDN_LB_STATUS_DEPLOY_FAILED",
	3: "CDN_LB_STATUS_DEPLOYED",
	4: "CDN_LB_STATUS_FAILED",
}

var CDNLoadbalancerDeploymentStatus_value = map[string]int32{
	"CDN_LB_STATUS_CREATED":       0,
	"CDN_LB_STATUS_DEPLOYING":     1,
	"CDN_LB_STATUS_DEPLOY_FAILED": 2,
	"CDN_LB_STATUS_DEPLOYED":      3,
	"CDN_LB_STATUS_FAILED":        4,
}

func (CDNLoadbalancerDeploymentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_910512e80a9c3801, []int{0}
}

// CDNSiteDeploymentStatus
//
// x-displayName: "CDN LoadBalancer Site Deployment status"
type CDNSiteDeploymentStatus int32

const (
	// x-displayName: "Not deployed"
	DEPLOYMENT_STATUS_NOT_DEPLOYED CDNSiteDeploymentStatus = 0
	// x-displayName: "Deploying"
	DEPLOYMENT_STATUS_DEPLOYING CDNSiteDeploymentStatus = 1
	// x-displayName: "Failed"
	DEPLOYMENT_STATUS_DEPLOY_FAILED CDNSiteDeploymentStatus = 2
	// x-displayName: "Deployed"
	DEPLOYMENT_STATUS_DEPLOYED CDNSiteDeploymentStatus = 3
)

var CDNSiteDeploymentStatus_name = map[int32]string{
	0: "DEPLOYMENT_STATUS_NOT_DEPLOYED",
	1: "DEPLOYMENT_STATUS_DEPLOYING",
	2: "DEPLOYMENT_STATUS_DEPLOY_FAILED",
	3: "DEPLOYMENT_STATUS_DEPLOYED",
}

var CDNSiteDeploymentStatus_value = map[string]int32{
	"DEPLOYMENT_STATUS_NOT_DEPLOYED":  0,
	"DEPLOYMENT_STATUS_DEPLOYING":     1,
	"DEPLOYMENT_STATUS_DEPLOY_FAILED": 2,
	"DEPLOYMENT_STATUS_DEPLOYED":      3,
}

func (CDNSiteDeploymentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_910512e80a9c3801, []int{1}
}

// Object
//
// x-displayName: "Object"
// CDN loadbalancer view object
type Object struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Standard object's metadata
	Metadata *schema.ObjectMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system_metadata
	//
	// x-displayName: "System Metadata"
	// System generated object's metadata
	SystemMetadata *schema.SystemObjectMetaType `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// Specification of the desired behavior of the tenant
	Spec *SpecType `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *Object) Reset()      { *m = Object{} }
func (*Object) ProtoMessage() {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_910512e80a9c3801, []int{0}
}
func (m *Object) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return m.Size()
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

func (m *Object) GetMetadata() *schema.ObjectMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Object) GetSystemMetadata() *schema.SystemObjectMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *Object) GetSpec() *SpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

type SpecType struct {
	// gc_spec
	//
	// x-displayName: "GC Spec"
	GcSpec *GlobalSpecType `protobuf:"bytes,1,opt,name=gc_spec,json=gcSpec,proto3" json:"gc_spec,omitempty"`
}

func (m *SpecType) Reset()      { *m = SpecType{} }
func (*SpecType) ProtoMessage() {}
func (*SpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_910512e80a9c3801, []int{1}
}
func (m *SpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecType.Merge(m, src)
}
func (m *SpecType) XXX_Size() int {
	return m.Size()
}
func (m *SpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecType.DiscardUnknown(m)
}

var xxx_messageInfo_SpecType proto.InternalMessageInfo

func (m *SpecType) GetGcSpec() *GlobalSpecType {
	if m != nil {
		return m.GcSpec
	}
	return nil
}

// CDNLoadBalancer status
//
// x-displayName: "CDN LoadBalancer Status"
// CDN LoadBalancer Status
type CDNLoadbalancerStatus struct {
	// Deployment Status
	//
	// x-displayName: "Deployment Status"
	// Deployment status
	DeploymentStatus CDNLoadbalancerDeploymentStatus `protobuf:"varint,1,opt,name=deployment_status,json=deploymentStatus,proto3,enum=ves.io.schema.views.cdn_loadbalancer.CDNLoadbalancerDeploymentStatus" json:"deployment_status,omitempty"`
	// Error Message
	//
	// x-displayName: "Error Message"
	// Error message
	ErrorMsg string `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	// Cfg Version
	//
	// x-displayName: "Cfg Version"
	// Cfg version
	CfgVersion uint32 `protobuf:"varint,4,opt,name=cfg_version,json=cfgVersion,proto3" json:"cfg_version,omitempty"`
	// CP Version
	//
	// x-displayName: "CP Version"
	// CP version
	CpVersion uint32 `protobuf:"varint,5,opt,name=cp_version,json=cpVersion,proto3" json:"cp_version,omitempty"`
}

func (m *CDNLoadbalancerStatus) Reset()      { *m = CDNLoadbalancerStatus{} }
func (*CDNLoadbalancerStatus) ProtoMessage() {}
func (*CDNLoadbalancerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_910512e80a9c3801, []int{2}
}
func (m *CDNLoadbalancerStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNLoadbalancerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CDNLoadbalancerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNLoadbalancerStatus.Merge(m, src)
}
func (m *CDNLoadbalancerStatus) XXX_Size() int {
	return m.Size()
}
func (m *CDNLoadbalancerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNLoadbalancerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CDNLoadbalancerStatus proto.InternalMessageInfo

func (m *CDNLoadbalancerStatus) GetDeploymentStatus() CDNLoadbalancerDeploymentStatus {
	if m != nil {
		return m.DeploymentStatus
	}
	return CDN_LB_STATUS_CREATED
}

func (m *CDNLoadbalancerStatus) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *CDNLoadbalancerStatus) GetCfgVersion() uint32 {
	if m != nil {
		return m.CfgVersion
	}
	return 0
}

func (m *CDNLoadbalancerStatus) GetCpVersion() uint32 {
	if m != nil {
		return m.CpVersion
	}
	return 0
}

// CDN LB status details
//
// x-displayName: "CDN LB Status"
// This CDN LB status is per site and it indicates the status of the LB on the site
type CDNLbStatusType struct {
	// Deployment Status
	//
	// x-displayName: "Deployment Status"
	// Indicates the status of deployment on the site
	Status CDNSiteDeploymentStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ves.io.schema.views.cdn_loadbalancer.CDNSiteDeploymentStatus" json:"status,omitempty"`
	// Site Name
	//
	// x-displayName: "Site"
	// Name of the site that reported this status
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
	// Error
	//
	// x-displayName: "Error"
	// Error message (if any)
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *CDNLbStatusType) Reset()      { *m = CDNLbStatusType{} }
func (*CDNLbStatusType) ProtoMessage() {}
func (*CDNLbStatusType) Descriptor() ([]byte, []int) {
	return fileDescriptor_910512e80a9c3801, []int{3}
}
func (m *CDNLbStatusType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNLbStatusType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CDNLbStatusType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNLbStatusType.Merge(m, src)
}
func (m *CDNLbStatusType) XXX_Size() int {
	return m.Size()
}
func (m *CDNLbStatusType) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNLbStatusType.DiscardUnknown(m)
}

var xxx_messageInfo_CDNLbStatusType proto.InternalMessageInfo

func (m *CDNLbStatusType) GetStatus() CDNSiteDeploymentStatus {
	if m != nil {
		return m.Status
	}
	return DEPLOYMENT_STATUS_NOT_DEPLOYED
}

func (m *CDNLbStatusType) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func (m *CDNLbStatusType) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// StatusObject
//
// x-displayName: "Status"
// Most recently observed status of object
type StatusObject struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Standard status's metadata
	Metadata *schema.StatusMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// object_refs
	//
	// x-displayName: "Config Object"
	// CDN loadbalancer view object direct reference
	ObjectRefs []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=object_refs,json=objectRefs,proto3" json:"object_refs,omitempty"`
	// conditions
	//
	// x-displayName: "Conditions"
	// Conditions represent the normalized status values for configuration object
	Conditions []*schema.ConditionType `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// status
	//
	// x-displayName: "CDN LoadBalancer Status"
	// Status of CDN loadbalancer deployment on Lilac GC
	Status *CDNLoadbalancerStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// site_status
	//
	// x-displayName: "Site Status"
	// CDNLbStatusType shows deployment status on a specific site
	SiteStatus *CDNLbStatusType `protobuf:"bytes,5,opt,name=site_status,json=siteStatus,proto3" json:"site_status,omitempty"`
}

func (m *StatusObject) Reset()      { *m = StatusObject{} }
func (*StatusObject) ProtoMessage() {}
func (*StatusObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_910512e80a9c3801, []int{4}
}
func (m *StatusObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StatusObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusObject.Merge(m, src)
}
func (m *StatusObject) XXX_Size() int {
	return m.Size()
}
func (m *StatusObject) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusObject.DiscardUnknown(m)
}

var xxx_messageInfo_StatusObject proto.InternalMessageInfo

func (m *StatusObject) GetMetadata() *schema.StatusMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *StatusObject) GetObjectRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.ObjectRefs
	}
	return nil
}

func (m *StatusObject) GetConditions() []*schema.ConditionType {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *StatusObject) GetStatus() *CDNLoadbalancerStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *StatusObject) GetSiteStatus() *CDNLbStatusType {
	if m != nil {
		return m.SiteStatus
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.CDNLoadbalancerDeploymentStatus", CDNLoadbalancerDeploymentStatus_name, CDNLoadbalancerDeploymentStatus_value)
	golang_proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.CDNLoadbalancerDeploymentStatus", CDNLoadbalancerDeploymentStatus_name, CDNLoadbalancerDeploymentStatus_value)
	proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.CDNSiteDeploymentStatus", CDNSiteDeploymentStatus_name, CDNSiteDeploymentStatus_value)
	golang_proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.CDNSiteDeploymentStatus", CDNSiteDeploymentStatus_name, CDNSiteDeploymentStatus_value)
	proto.RegisterType((*Object)(nil), "ves.io.schema.views.cdn_loadbalancer.Object")
	golang_proto.RegisterType((*Object)(nil), "ves.io.schema.views.cdn_loadbalancer.Object")
	proto.RegisterType((*SpecType)(nil), "ves.io.schema.views.cdn_loadbalancer.SpecType")
	golang_proto.RegisterType((*SpecType)(nil), "ves.io.schema.views.cdn_loadbalancer.SpecType")
	proto.RegisterType((*CDNLoadbalancerStatus)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNLoadbalancerStatus")
	golang_proto.RegisterType((*CDNLoadbalancerStatus)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNLoadbalancerStatus")
	proto.RegisterType((*CDNLbStatusType)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNLbStatusType")
	golang_proto.RegisterType((*CDNLbStatusType)(nil), "ves.io.schema.views.cdn_loadbalancer.CDNLbStatusType")
	proto.RegisterType((*StatusObject)(nil), "ves.io.schema.views.cdn_loadbalancer.StatusObject")
	golang_proto.RegisterType((*StatusObject)(nil), "ves.io.schema.views.cdn_loadbalancer.StatusObject")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/cdn_loadbalancer/object.proto", fileDescriptor_910512e80a9c3801)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/cdn_loadbalancer/object.proto", fileDescriptor_910512e80a9c3801)
}

var fileDescriptor_910512e80a9c3801 = []byte{
	// 1116 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xda, 0x4e, 0x9a, 0xbc, 0x94, 0xd6, 0x6c, 0x0b, 0xb8, 0x09, 0x5d, 0x47, 0x2e, 0x87,
	0xaa, 0xaa, 0xd7, 0xd0, 0x1f, 0x07, 0xca, 0x0f, 0xa9, 0x89, 0x4d, 0x54, 0xe4, 0x24, 0xd5, 0xda,
	0xad, 0x48, 0x2f, 0xab, 0xf1, 0xec, 0xf3, 0x7a, 0x1b, 0x7b, 0x67, 0x99, 0x99, 0x75, 0xea, 0x03,
	0x12, 0x42, 0x9c, 0x40, 0x42, 0x88, 0x13, 0x17, 0x4e, 0x70, 0x40, 0x1c, 0x10, 0x7f, 0x02, 0xe1,
	0xc4, 0x81, 0x43, 0xd4, 0x53, 0xc4, 0x89, 0x38, 0x17, 0x4e, 0xa8, 0x7f, 0x02, 0xf2, 0xac, 0xed,
	0xda, 0x8e, 0x03, 0x4e, 0x04, 0x27, 0xef, 0xcc, 0xfb, 0xbe, 0x6f, 0xbe, 0xf7, 0xe6, 0x79, 0x66,
	0xe0, 0x8d, 0x16, 0x0a, 0xd3, 0x63, 0x79, 0x41, 0xeb, 0xd8, 0x24, 0xf9, 0x96, 0x87, 0x3b, 0x22,
	0x4f, 0x1d, 0xdf, 0x6e, 0x30, 0xe2, 0x54, 0x49, 0x83, 0xf8, 0x14, 0x79, 0x9e, 0x55, 0x1f, 0x23,
	0x95, 0x66, 0xc0, 0x99, 0x64, 0xfa, 0x6b, 0x11, 0xc5, 0x8c, 0x28, 0xa6, 0xa2, 0x98, 0xe3, 0x94,
	0xc5, 0x9c, 0xeb, 0xc9, 0x7a, 0x58, 0x35, 0x29, 0x6b, 0xe6, 0x5d, 0xe6, 0xb2, 0xbc, 0x22, 0x57,
	0xc3, 0x9a, 0x1a, 0xa9, 0x81, 0xfa, 0x8a, 0x44, 0x17, 0x97, 0x46, 0x7d, 0xb0, 0x40, 0x7a, 0xcc,
	0x17, 0xbd, 0x60, 0x66, 0x34, 0xc8, 0x59, 0x28, 0x31, 0x2f, 0xdb, 0x01, 0xf6, 0x01, 0x97, 0x46,
	0x01, 0xc3, 0xa1, 0xec, 0x58, 0x82, 0x28, 0xd0, 0x6f, 0x8d, 0xe9, 0x2f, 0x1f, 0x2d, 0x82, 0x3d,
	0x8a, 0x78, 0x7d, 0xaa, 0x32, 0x0d, 0xaf, 0x9b, 0x99, 0xc4, 0x18, 0x02, 0x64, 0xbf, 0x9b, 0x87,
	0xd9, 0x4d, 0x55, 0x57, 0xfd, 0x4d, 0x98, 0x6b, 0xa2, 0x24, 0x0e, 0x91, 0x24, 0xad, 0x2d, 0x6b,
	0x57, 0x17, 0x6e, 0x5c, 0x36, 0x47, 0x8b, 0x1c, 0x01, 0xd7, 0x51, 0x92, 0x4a, 0x3b, 0x40, 0x6b,
	0x00, 0xd7, 0x4b, 0x70, 0x5e, 0xb4, 0x85, 0xc4, 0xa6, 0x3d, 0x50, 0x88, 0x2b, 0x85, 0x2b, 0x63,
	0x0a, 0x65, 0x85, 0x1a, 0xd3, 0x39, 0x17, 0x71, 0xd7, 0xfb, 0x6a, 0x2b, 0x90, 0x14, 0x01, 0xd2,
	0x74, 0x42, 0x49, 0x98, 0xe6, 0x34, 0x3b, 0x6d, 0x96, 0x03, 0xa4, 0x4a, 0x4d, 0x71, 0xef, 0xfc,
	0x76, 0xe6, 0x97, 0xdd, 0x74, 0x3c, 0xa5, 0x3d, 0xdd, 0x4d, 0x7f, 0x11, 0x87, 0x9b, 0x90, 0x58,
	0x43, 0xa9, 0x5f, 0x6f, 0xb1, 0x86, 0xa4, 0xcc, 0x17, 0xac, 0x81, 0x39, 0xea, 0xf8, 0x39, 0x8e,
	0xc4, 0xb9, 0xbe, 0x5c, 0xbb, 0xfd, 0x84, 0xaa, 0x61, 0x95, 0x08, 0x8f, 0xe6, 0x9a, 0xcc, 0xf7,
	0x24, 0xe3, 0x70, 0x1b, 0xce, 0x58, 0x18, 0x34, 0x08, 0x45, 0xfd, 0xda, 0x38, 0x71, 0x87, 0x7b,
	0x12, 0x8f, 0x30, 0x43, 0x81, 0x1c, 0x6e, 0xc1, 0xec, 0x2a, 0x47, 0x22, 0x4f, 0xcc, 0x2a, 0x60,
	0x03, 0x4f, 0xcc, 0x4a, 0x96, 0x3c, 0x71, 0xc2, 0xc4, 0x7e, 0xdf, 0x4d, 0xff, 0x38, 0x03, 0x9f,
	0x68, 0x70, 0xbf, 0x5b, 0x29, 0xd3, 0xa5, 0xb6, 0xfa, 0x1d, 0xae, 0xa6, 0xdd, 0x6d, 0x11, 0xb3,
	0x2e, 0x65, 0x20, 0x4c, 0xd9, 0x10, 0x76, 0x40, 0x38, 0x69, 0xa2, 0x44, 0x1e, 0x0d, 0x29, 0x72,
	0xe9, 0xd5, 0x3c, 0x4a, 0xa4, 0xea, 0x23, 0xaf, 0x45, 0x24, 0xda, 0xdb, 0xd8, 0xd6, 0xbb, 0x5b,
	0x95, 0xf3, 0x98, 0x5a, 0x73, 0x58, 0x2f, 0xe7, 0xb0, 0x1d, 0x5f, 0x48, 0x8e, 0xa4, 0x99, 0x1b,
	0x22, 0xc3, 0x67, 0x1a, 0x7c, 0x30, 0x62, 0xa2, 0xc9, 0x38, 0xf6, 0x9a, 0xde, 0xac, 0x23, 0x71,
	0x90, 0x0f, 0xfe, 0x02, 0x1c, 0x3f, 0x0c, 0x51, 0x48, 0x3b, 0x9a, 0x16, 0xb6, 0x64, 0x36, 0x71,
	0x1c, 0xb3, 0x45, 0x1a, 0x21, 0xda, 0xb4, 0xce, 0x3c, 0x8a, 0xa6, 0x40, 0xca, 0x51, 0xda, 0x6a,
	0xee, 0xc4, 0x66, 0x3e, 0xd7, 0x60, 0x6b, 0x7a, 0x33, 0x22, 0x60, 0xbe, 0xc0, 0xff, 0xcf, 0xcd,
	0xa7, 0x1a, 0x58, 0xc7, 0xba, 0x11, 0x48, 0x43, 0xee, 0xc9, 0xf6, 0xc0, 0x0f, 0x09, 0x65, 0x7d,
	0xf2, 0xe0, 0xf1, 0x8e, 0xec, 0x1b, 0x39, 0xcd, 0x0e, 0xfd, 0x97, 0x36, 0xaa, 0x84, 0x6e, 0x87,
	0xc1, 0x69, 0x6c, 0x64, 0xb7, 0x60, 0xae, 0xff, 0x07, 0xd7, 0xd7, 0xe1, 0x4c, 0xcf, 0x4c, 0xef,
	0x98, 0xba, 0x35, 0xdd, 0x09, 0xb1, 0xd6, 0x60, 0x55, 0xd2, 0x18, 0x9c, 0x13, 0xb3, 0x2e, 0xed,
	0x7e, 0x67, 0xff, 0xd2, 0xe0, 0xa5, 0xd5, 0xc2, 0x46, 0x69, 0x08, 0x5a, 0x96, 0x44, 0x86, 0x42,
	0xe7, 0xf0, 0xa2, 0x83, 0x41, 0x83, 0xb5, 0x9b, 0xe8, 0x4b, 0x5b, 0xa8, 0x49, 0xb5, 0xe4, 0xb9,
	0x1b, 0xc5, 0xe9, 0x96, 0x1c, 0xd3, 0x2d, 0x0c, 0xd4, 0xa2, 0x15, 0xac, 0x94, 0x33, 0x36, 0xa3,
	0x2f, 0xc1, 0x3c, 0x72, 0xce, 0xb8, 0xdd, 0x14, 0xae, 0x3a, 0x00, 0xe7, 0xad, 0x39, 0x35, 0xb1,
	0x2e, 0x5c, 0x3d, 0x03, 0x0b, 0xb4, 0xe6, 0xda, 0x2d, 0xe4, 0xc2, 0x63, 0x7e, 0x3a, 0xb9, 0xac,
	0x5d, 0x7d, 0xc1, 0x02, 0x5a, 0x73, 0x1f, 0x46, 0x33, 0xfa, 0x65, 0x00, 0x1a, 0x0c, 0xe2, 0x33,
	0x2a, 0x3e, 0x4f, 0x83, 0x5e, 0xf8, 0xfd, 0xe4, 0x5c, 0x3c, 0x95, 0xc8, 0x7e, 0xa5, 0xc1, 0xf9,
	0xae, 0xb1, 0x6a, 0xb4, 0xa4, 0xaa, 0xe9, 0x03, 0x98, 0x1d, 0xc9, 0xef, 0x9d, 0xa9, 0xf3, 0x2b,
	0x7b, 0x12, 0x8f, 0xe4, 0xd5, 0x13, 0xd3, 0x75, 0x48, 0x0a, 0x4f, 0xa2, 0xba, 0x0c, 0xe6, 0x2d,
	0xf5, 0xad, 0x5f, 0x84, 0x19, 0x95, 0x50, 0x2f, 0xbb, 0x68, 0x90, 0xfd, 0x26, 0x01, 0x67, 0x23,
	0xf2, 0xd4, 0xb7, 0x51, 0x04, 0x9f, 0x70, 0x1b, 0x59, 0xb0, 0x10, 0x3d, 0x15, 0x6c, 0x8e, 0x35,
	0x91, 0x8e, 0x2f, 0x27, 0xae, 0x2e, 0xdc, 0x78, 0x75, 0xe2, 0x5d, 0x66, 0x61, 0xad, 0x4b, 0x5e,
	0xb9, 0xf0, 0xc3, 0x47, 0xa9, 0xf1, 0xec, 0x2c, 0x60, 0x7d, 0x8c, 0xd0, 0xdf, 0x06, 0xa0, 0xcc,
	0x77, 0x3c, 0xd5, 0xcd, 0xe9, 0xc4, 0x44, 0xc9, 0xd5, 0x3e, 0x40, 0xf9, 0x19, 0xc2, 0xeb, 0xe5,
	0x41, 0x79, 0x93, 0x2a, 0x95, 0xb7, 0x4e, 0xd5, 0x3e, 0x63, 0xc5, 0x7d, 0x08, 0x0b, 0xdd, 0x82,
	0xf6, 0x1b, 0x73, 0x46, 0x29, 0xdf, 0x9e, 0x5e, 0x79, 0x68, 0xff, 0x2d, 0xe8, 0x2a, 0x45, 0xe3,
	0x3b, 0x17, 0x9e, 0xbe, 0x9b, 0x82, 0x73, 0x70, 0xb6, 0x5f, 0x4f, 0x33, 0xf4, 0x9c, 0x6b, 0x3f,
	0x69, 0x90, 0xf9, 0x97, 0x6e, 0xd6, 0x2f, 0xa9, 0x3f, 0x92, 0x5d, 0x5a, 0xb1, 0xcb, 0x95, 0xbb,
	0x95, 0x07, 0x65, 0x7b, 0xd5, 0x2a, 0xde, 0xad, 0x14, 0x0b, 0xa9, 0x98, 0xbe, 0x04, 0xaf, 0x8c,
	0x86, 0x0a, 0xc5, 0xfb, 0xa5, 0xcd, 0xad, 0x7b, 0x1b, 0x6b, 0x29, 0x4d, 0xcf, 0xc0, 0xd2, 0xa4,
	0xa0, 0xfd, 0xde, 0xdd, 0x7b, 0xa5, 0x62, 0x21, 0x15, 0xd7, 0x17, 0xe1, 0xe5, 0x49, 0x80, 0x62,
	0x21, 0x95, 0xd0, 0xd3, 0x70, 0x71, 0x34, 0xd6, 0x63, 0x25, 0xaf, 0x7d, 0xab, 0xa9, 0x45, 0x27,
	0x35, 0xa8, 0x9e, 0x05, 0x23, 0xd2, 0x58, 0x2f, 0x6e, 0x54, 0xfa, 0xcc, 0x8d, 0xcd, 0xca, 0x73,
	0xe5, 0x58, 0xd7, 0xd6, 0x51, 0xcc, 0xb0, 0xef, 0x2b, 0x90, 0x39, 0x0e, 0xf0, 0xdc, 0xbb, 0x01,
	0x8b, 0xc7, 0x81, 0xba, 0xfe, 0x57, 0xbe, 0xd6, 0xf6, 0x0e, 0x8c, 0xd8, 0xfe, 0x81, 0x11, 0x7b,
	0x76, 0x60, 0x68, 0x1f, 0x77, 0x0c, 0xed, 0xfb, 0x8e, 0xa1, 0xfd, 0xda, 0x31, 0xb4, 0xbd, 0x8e,
	0xa1, 0xed, 0x77, 0x0c, 0xed, 0x8f, 0x8e, 0xa1, 0xfd, 0xd9, 0x31, 0x62, 0xcf, 0x3a, 0x86, 0xf6,
	0xe5, 0xa1, 0x11, 0xfb, 0xf9, 0xd0, 0xd0, 0xf6, 0x0e, 0x8d, 0xd8, 0xfe, 0xa1, 0x11, 0x7b, 0xf4,
	0xc8, 0x65, 0xc1, 0xb6, 0x6b, 0x76, 0xef, 0x7f, 0xe4, 0x9c, 0x98, 0xa1, 0xc8, 0xab, 0x8f, 0x1a,
	0xe3, 0xcd, 0x5c, 0xc0, 0x59, 0xcb, 0x73, 0x90, 0xe7, 0xfa, 0xe1, 0x7c, 0x50, 0x75, 0x59, 0x1e,
	0x9f, 0xc8, 0xde, 0x7b, 0xf0, 0x1f, 0x1f, 0x92, 0xd5, 0x59, 0xf5, 0x44, 0xbc, 0xf9, 0x77, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xec, 0x36, 0x67, 0xd9, 0x9e, 0x0b, 0x00, 0x00,
}

func (x CDNLoadbalancerDeploymentStatus) String() string {
	s, ok := CDNLoadbalancerDeploymentStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CDNSiteDeploymentStatus) String() string {
	s, ok := CDNSiteDeploymentStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Object) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Object)
	if !ok {
		that2, ok := that.(Object)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *SpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpecType)
	if !ok {
		that2, ok := that.(SpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GcSpec.Equal(that1.GcSpec) {
		return false
	}
	return true
}
func (this *CDNLoadbalancerStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNLoadbalancerStatus)
	if !ok {
		that2, ok := that.(CDNLoadbalancerStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeploymentStatus != that1.DeploymentStatus {
		return false
	}
	if this.ErrorMsg != that1.ErrorMsg {
		return false
	}
	if this.CfgVersion != that1.CfgVersion {
		return false
	}
	if this.CpVersion != that1.CpVersion {
		return false
	}
	return true
}
func (this *CDNLbStatusType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CDNLbStatusType)
	if !ok {
		that2, ok := that.(CDNLbStatusType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *StatusObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusObject)
	if !ok {
		that2, ok := that.(StatusObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.ObjectRefs) != len(that1.ObjectRefs) {
		return false
	}
	for i := range this.ObjectRefs {
		if !this.ObjectRefs[i].Equal(that1.ObjectRefs[i]) {
			return false
		}
	}
	if len(this.Conditions) != len(that1.Conditions) {
		return false
	}
	for i := range this.Conditions {
		if !this.Conditions[i].Equal(that1.Conditions[i]) {
			return false
		}
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.SiteStatus.Equal(that1.SiteStatus) {
		return false
	}
	return true
}
func (this *Object) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cdn_loadbalancer.Object{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cdn_loadbalancer.SpecType{")
	if this.GcSpec != nil {
		s = append(s, "GcSpec: "+fmt.Sprintf("%#v", this.GcSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDNLoadbalancerStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cdn_loadbalancer.CDNLoadbalancerStatus{")
	s = append(s, "DeploymentStatus: "+fmt.Sprintf("%#v", this.DeploymentStatus)+",\n")
	s = append(s, "ErrorMsg: "+fmt.Sprintf("%#v", this.ErrorMsg)+",\n")
	s = append(s, "CfgVersion: "+fmt.Sprintf("%#v", this.CfgVersion)+",\n")
	s = append(s, "CpVersion: "+fmt.Sprintf("%#v", this.CpVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDNLbStatusType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cdn_loadbalancer.CDNLbStatusType{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusObject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cdn_loadbalancer.StatusObject{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.ObjectRefs != nil {
		s = append(s, "ObjectRefs: "+fmt.Sprintf("%#v", this.ObjectRefs)+",\n")
	}
	if this.Conditions != nil {
		s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.SiteStatus != nil {
		s = append(s, "SiteStatus: "+fmt.Sprintf("%#v", this.SiteStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringObject(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Object) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GcSpec != nil {
		{
			size, err := m.GcSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CDNLoadbalancerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNLoadbalancerStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNLoadbalancerStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CpVersion != 0 {
		i = encodeVarintObject(dAtA, i, uint64(m.CpVersion))
		i--
		dAtA[i] = 0x28
	}
	if m.CfgVersion != 0 {
		i = encodeVarintObject(dAtA, i, uint64(m.CfgVersion))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintObject(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DeploymentStatus != 0 {
		i = encodeVarintObject(dAtA, i, uint64(m.DeploymentStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CDNLbStatusType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNLbStatusType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNLbStatusType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintObject(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintObject(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintObject(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatusObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SiteStatus != nil {
		{
			size, err := m.SiteStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ObjectRefs) > 0 {
		for iNdEx := len(m.ObjectRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObjectRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintObject(dAtA []byte, offset int, v uint64) int {
	offset -= sovObject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *SpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GcSpec != nil {
		l = m.GcSpec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *CDNLoadbalancerStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeploymentStatus != 0 {
		n += 1 + sovObject(uint64(m.DeploymentStatus))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovObject(uint64(l))
	}
	if m.CfgVersion != 0 {
		n += 1 + sovObject(uint64(m.CfgVersion))
	}
	if m.CpVersion != 0 {
		n += 1 + sovObject(uint64(m.CpVersion))
	}
	return n
}

func (m *CDNLbStatusType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovObject(uint64(m.Status))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovObject(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *StatusObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if len(m.ObjectRefs) > 0 {
		for _, e := range m.ObjectRefs {
			l = e.Size()
			n += 1 + l + sovObject(uint64(l))
		}
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovObject(uint64(l))
		}
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.SiteStatus != nil {
		l = m.SiteStatus.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func sovObject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObject(x uint64) (n int) {
	return sovObject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Object) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Object{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetaType", "schema.ObjectMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectMetaType", "schema.SystemObjectMetaType", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "SpecType", "SpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpecType{`,
		`GcSpec:` + strings.Replace(fmt.Sprintf("%v", this.GcSpec), "GlobalSpecType", "GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNLoadbalancerStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNLoadbalancerStatus{`,
		`DeploymentStatus:` + fmt.Sprintf("%v", this.DeploymentStatus) + `,`,
		`ErrorMsg:` + fmt.Sprintf("%v", this.ErrorMsg) + `,`,
		`CfgVersion:` + fmt.Sprintf("%v", this.CfgVersion) + `,`,
		`CpVersion:` + fmt.Sprintf("%v", this.CpVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDNLbStatusType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDNLbStatusType{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusObject) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForObjectRefs := "[]*ObjectRefType{"
	for _, f := range this.ObjectRefs {
		repeatedStringForObjectRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForObjectRefs += "}"
	repeatedStringForConditions := "[]*ConditionType{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(fmt.Sprintf("%v", f), "ConditionType", "schema.ConditionType", 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&StatusObject{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "StatusMetaType", "schema.StatusMetaType", 1) + `,`,
		`ObjectRefs:` + repeatedStringForObjectRefs + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`Status:` + strings.Replace(this.Status.String(), "CDNLoadbalancerStatus", "CDNLoadbalancerStatus", 1) + `,`,
		`SiteStatus:` + strings.Replace(this.SiteStatus.String(), "CDNLbStatusType", "CDNLbStatusType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringObject(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GcSpec == nil {
				m.GcSpec = &GlobalSpecType{}
			}
			if err := m.GcSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNLoadbalancerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNLoadbalancerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNLoadbalancerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentStatus", wireType)
			}
			m.DeploymentStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeploymentStatus |= CDNLoadbalancerDeploymentStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CfgVersion", wireType)
			}
			m.CfgVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CfgVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpVersion", wireType)
			}
			m.CpVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNLbStatusType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNLbStatusType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNLbStatusType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CDNSiteDeploymentStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.StatusMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectRefs = append(m.ObjectRefs, &schema.ObjectRefType{})
			if err := m.ObjectRefs[len(m.ObjectRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &schema.ConditionType{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &CDNLoadbalancerStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SiteStatus == nil {
				m.SiteStatus = &CDNLbStatusType{}
			}
			if err := m.SiteStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObject = fmt.Errorf("proto: unexpected end of group")
)

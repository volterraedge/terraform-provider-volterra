// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/voltstack_site/types.proto

package voltstack_site

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	fleet "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet"
	network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
	network_interface "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface"
	site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	virtual_network "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_network"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Interface
//
// x-displayName: "Interface"
// Interface definition
type Interface struct {
	// Interface Description
	//
	// x-displayName: "Interface Description"
	// x-example: "value"
	// Description for this Interface
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Interface labels
	//
	// x-displayName: "Interface Labels"
	// x-example: "value"
	// Add Labels for this Interface, these labels can be used in firewall policy
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Interface Config Type
	//
	// x-displayName: "Interface Config Type"
	// x-required
	// Select the interface configuration type
	//
	// Types that are valid to be assigned to InterfaceChoice:
	//	*Interface_EthernetInterface
	//	*Interface_DedicatedInterface
	//	*Interface_DedicatedManagementInterface
	//	*Interface_TunnelInterface
	//	*Interface_LoopbackInterface
	InterfaceChoice isInterface_InterfaceChoice `protobuf_oneof:"interface_choice"`
	// DC Cluster Group Connectivity
	//
	// x-displayName: "DC Cluster Group Connectivity"
	// x-required
	// Controls whether this interface will be used to connect to other sites in DC Cluster Group.
	// If no interfaces are enabled, the default gateway interface will be used.
	//
	// Types that are valid to be assigned to DcClusterGroupConnectivityInterfaceChoice:
	//	*Interface_DcClusterGroupConnectivityInterfaceDisabled
	//	*Interface_DcClusterGroupConnectivityInterfaceEnabled
	DcClusterGroupConnectivityInterfaceChoice isInterface_DcClusterGroupConnectivityInterfaceChoice `protobuf_oneof:"dc_cluster_group_connectivity_interface_choice"`
}

func (m *Interface) Reset()      { *m = Interface{} }
func (*Interface) ProtoMessage() {}
func (*Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{0}
}
func (m *Interface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface.Merge(m, src)
}
func (m *Interface) XXX_Size() int {
	return m.Size()
}
func (m *Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Interface proto.InternalMessageInfo

type isInterface_InterfaceChoice interface {
	isInterface_InterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isInterface_DcClusterGroupConnectivityInterfaceChoice interface {
	isInterface_DcClusterGroupConnectivityInterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Interface_EthernetInterface struct {
	EthernetInterface *network_interface.EthernetInterfaceType `protobuf:"bytes,5,opt,name=ethernet_interface,json=ethernetInterface,proto3,oneof" json:"ethernet_interface,omitempty"`
}
type Interface_DedicatedInterface struct {
	DedicatedInterface *network_interface.DedicatedInterfaceType `protobuf:"bytes,6,opt,name=dedicated_interface,json=dedicatedInterface,proto3,oneof" json:"dedicated_interface,omitempty"`
}
type Interface_DedicatedManagementInterface struct {
	DedicatedManagementInterface *network_interface.DedicatedManagementInterfaceType `protobuf:"bytes,7,opt,name=dedicated_management_interface,json=dedicatedManagementInterface,proto3,oneof" json:"dedicated_management_interface,omitempty"`
}
type Interface_TunnelInterface struct {
	TunnelInterface *network_interface.TunnelInterfaceType `protobuf:"bytes,8,opt,name=tunnel_interface,json=tunnelInterface,proto3,oneof" json:"tunnel_interface,omitempty"`
}
type Interface_LoopbackInterface struct {
	LoopbackInterface *network_interface.LoopbackInterfaceType `protobuf:"bytes,9,opt,name=loopback_interface,json=loopbackInterface,proto3,oneof" json:"loopback_interface,omitempty"`
}
type Interface_DcClusterGroupConnectivityInterfaceDisabled struct {
	DcClusterGroupConnectivityInterfaceDisabled *schema.Empty `protobuf:"bytes,11,opt,name=dc_cluster_group_connectivity_interface_disabled,json=dcClusterGroupConnectivityInterfaceDisabled,proto3,oneof" json:"dc_cluster_group_connectivity_interface_disabled,omitempty"`
}
type Interface_DcClusterGroupConnectivityInterfaceEnabled struct {
	DcClusterGroupConnectivityInterfaceEnabled *schema.Empty `protobuf:"bytes,12,opt,name=dc_cluster_group_connectivity_interface_enabled,json=dcClusterGroupConnectivityInterfaceEnabled,proto3,oneof" json:"dc_cluster_group_connectivity_interface_enabled,omitempty"`
}

func (*Interface_EthernetInterface) isInterface_InterfaceChoice()            {}
func (*Interface_DedicatedInterface) isInterface_InterfaceChoice()           {}
func (*Interface_DedicatedManagementInterface) isInterface_InterfaceChoice() {}
func (*Interface_TunnelInterface) isInterface_InterfaceChoice()              {}
func (*Interface_LoopbackInterface) isInterface_InterfaceChoice()            {}
func (*Interface_DcClusterGroupConnectivityInterfaceDisabled) isInterface_DcClusterGroupConnectivityInterfaceChoice() {
}
func (*Interface_DcClusterGroupConnectivityInterfaceEnabled) isInterface_DcClusterGroupConnectivityInterfaceChoice() {
}

func (m *Interface) GetInterfaceChoice() isInterface_InterfaceChoice {
	if m != nil {
		return m.InterfaceChoice
	}
	return nil
}
func (m *Interface) GetDcClusterGroupConnectivityInterfaceChoice() isInterface_DcClusterGroupConnectivityInterfaceChoice {
	if m != nil {
		return m.DcClusterGroupConnectivityInterfaceChoice
	}
	return nil
}

func (m *Interface) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Interface) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Interface) GetEthernetInterface() *network_interface.EthernetInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_EthernetInterface); ok {
		return x.EthernetInterface
	}
	return nil
}

func (m *Interface) GetDedicatedInterface() *network_interface.DedicatedInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_DedicatedInterface); ok {
		return x.DedicatedInterface
	}
	return nil
}

func (m *Interface) GetDedicatedManagementInterface() *network_interface.DedicatedManagementInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_DedicatedManagementInterface); ok {
		return x.DedicatedManagementInterface
	}
	return nil
}

func (m *Interface) GetTunnelInterface() *network_interface.TunnelInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_TunnelInterface); ok {
		return x.TunnelInterface
	}
	return nil
}

func (m *Interface) GetLoopbackInterface() *network_interface.LoopbackInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_LoopbackInterface); ok {
		return x.LoopbackInterface
	}
	return nil
}

func (m *Interface) GetDcClusterGroupConnectivityInterfaceDisabled() *schema.Empty {
	if x, ok := m.GetDcClusterGroupConnectivityInterfaceChoice().(*Interface_DcClusterGroupConnectivityInterfaceDisabled); ok {
		return x.DcClusterGroupConnectivityInterfaceDisabled
	}
	return nil
}

func (m *Interface) GetDcClusterGroupConnectivityInterfaceEnabled() *schema.Empty {
	if x, ok := m.GetDcClusterGroupConnectivityInterfaceChoice().(*Interface_DcClusterGroupConnectivityInterfaceEnabled); ok {
		return x.DcClusterGroupConnectivityInterfaceEnabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Interface) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Interface_EthernetInterface)(nil),
		(*Interface_DedicatedInterface)(nil),
		(*Interface_DedicatedManagementInterface)(nil),
		(*Interface_TunnelInterface)(nil),
		(*Interface_LoopbackInterface)(nil),
		(*Interface_DcClusterGroupConnectivityInterfaceDisabled)(nil),
		(*Interface_DcClusterGroupConnectivityInterfaceEnabled)(nil),
	}
}

// List of Interfaces
//
// x-displayName: "List of Interface"
// Configure network interfaces for this App Stack site
type InterfaceListType struct {
	// List of Interfaces
	//
	// x-displayName: "List of Interface"
	// x-required
	// Configure network interfaces for this App Stack site
	Interfaces []*Interface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (m *InterfaceListType) Reset()      { *m = InterfaceListType{} }
func (*InterfaceListType) ProtoMessage() {}
func (*InterfaceListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{1}
}
func (m *InterfaceListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfaceListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InterfaceListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceListType.Merge(m, src)
}
func (m *InterfaceListType) XXX_Size() int {
	return m.Size()
}
func (m *InterfaceListType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceListType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceListType proto.InternalMessageInfo

func (m *InterfaceListType) GetInterfaces() []*Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// Storage Interfaces
//
// x-displayName: "Storage Interface"
// Configure storage interface for this App Stack site
type StorageInterfaceType struct {
	// Interface Description
	//
	// x-displayName: "Interface Description"
	// x-example: "value"
	// Description for this Interface
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Interface labels
	//
	// x-displayName: "Interface Labels"
	// x-example: "value"
	// Add Labels for this Interface, these labels can be used in firewall policy
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//  Interface
	//
	// x-displayName: "Interface"
	// x-required
	// Configure storage interface for this App Stack site
	StorageInterface *network_interface.EthernetInterfaceType `protobuf:"bytes,3,opt,name=storage_interface,json=storageInterface,proto3" json:"storage_interface,omitempty"`
}

func (m *StorageInterfaceType) Reset()      { *m = StorageInterfaceType{} }
func (*StorageInterfaceType) ProtoMessage() {}
func (*StorageInterfaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{2}
}
func (m *StorageInterfaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageInterfaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StorageInterfaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageInterfaceType.Merge(m, src)
}
func (m *StorageInterfaceType) XXX_Size() int {
	return m.Size()
}
func (m *StorageInterfaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageInterfaceType.DiscardUnknown(m)
}

var xxx_messageInfo_StorageInterfaceType proto.InternalMessageInfo

func (m *StorageInterfaceType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *StorageInterfaceType) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *StorageInterfaceType) GetStorageInterface() *network_interface.EthernetInterfaceType {
	if m != nil {
		return m.StorageInterface
	}
	return nil
}

// List of Interfaces
//
// x-displayName: "List of Interface"
// Configure storage interfaces for this App Stack site
type StorageInterfaceListType struct {
	// List of Interfaces
	//
	// x-displayName: "List of Interface"
	// x-required
	// Configure storage interfaces for this App Stack site
	StorageInterfaces []*StorageInterfaceType `protobuf:"bytes,1,rep,name=storage_interfaces,json=storageInterfaces,proto3" json:"storage_interfaces,omitempty"`
}

func (m *StorageInterfaceListType) Reset()      { *m = StorageInterfaceListType{} }
func (*StorageInterfaceListType) ProtoMessage() {}
func (*StorageInterfaceListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{3}
}
func (m *StorageInterfaceListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageInterfaceListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StorageInterfaceListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageInterfaceListType.Merge(m, src)
}
func (m *StorageInterfaceListType) XXX_Size() int {
	return m.Size()
}
func (m *StorageInterfaceListType) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageInterfaceListType.DiscardUnknown(m)
}

var xxx_messageInfo_StorageInterfaceListType proto.InternalMessageInfo

func (m *StorageInterfaceListType) GetStorageInterfaces() []*StorageInterfaceType {
	if m != nil {
		return m.StorageInterfaces
	}
	return nil
}

// Static Routes List
//
// x-displayName: "Static Routes List"
// List of static routes
type StaticRoutesListType struct {
	// static_routes
	//
	// x-displayName: "Static Routes"
	// x-required
	// List of static routes
	StaticRoutes []*virtual_network.StaticRouteViewType `protobuf:"bytes,1,rep,name=static_routes,json=staticRoutes,proto3" json:"static_routes,omitempty"`
}

func (m *StaticRoutesListType) Reset()      { *m = StaticRoutesListType{} }
func (*StaticRoutesListType) ProtoMessage() {}
func (*StaticRoutesListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{4}
}
func (m *StaticRoutesListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StaticRoutesListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StaticRoutesListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticRoutesListType.Merge(m, src)
}
func (m *StaticRoutesListType) XXX_Size() int {
	return m.Size()
}
func (m *StaticRoutesListType) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticRoutesListType.DiscardUnknown(m)
}

var xxx_messageInfo_StaticRoutesListType proto.InternalMessageInfo

func (m *StaticRoutesListType) GetStaticRoutes() []*virtual_network.StaticRouteViewType {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

// Virtual Network Configuration
//
// x-displayName: "Site Local Network Configuration"
// Site local network configuration
type VnConfiguration struct {
	// Network labels
	//
	// x-displayName: "Network Labels"
	// x-example: "value"
	// Add Labels for this network, these labels can be used in firewall policy
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Manage Static Routes
	//
	// x-displayName: "Manage Static Routes"
	// x-required
	// Add static routes to network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to StaticRouteChoice:
	//	*VnConfiguration_NoStaticRoutes
	//	*VnConfiguration_StaticRoutes
	StaticRouteChoice isVnConfiguration_StaticRouteChoice `protobuf_oneof:"static_route_choice"`
	// Manage IPv6 Static Routes
	//
	// x-displayName: "Manage IPv6 Static Routes"
	// x-required
	// Add static IPv6 routes to network. Used to reach indirectly connected IPv6 subnets.
	//
	// Types that are valid to be assigned to StaticV6RouteChoice:
	//	*VnConfiguration_NoStaticV6Routes
	//	*VnConfiguration_StaticV6Routes
	StaticV6RouteChoice isVnConfiguration_StaticV6RouteChoice `protobuf_oneof:"static_v6_route_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via this network
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*VnConfiguration_NoDcClusterGroup
	//	*VnConfiguration_DcClusterGroup
	DcClusterGroupChoice isVnConfiguration_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	//  DC Cluster group connectivity interface
	//
	// x-displayName: "DC cluster Group connectivity interface"
	// This App Stack is member of dc cluster group and connected to network over this interface. By default it takes default gateway interface.
	DcClusterGroupInterface []*views.ObjectRefType `protobuf:"bytes,8,rep,name=dc_cluster_group_interface,json=dcClusterGroupInterface,proto3" json:"dc_cluster_group_interface,omitempty"`
}

func (m *VnConfiguration) Reset()      { *m = VnConfiguration{} }
func (*VnConfiguration) ProtoMessage() {}
func (*VnConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{5}
}
func (m *VnConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VnConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VnConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VnConfiguration.Merge(m, src)
}
func (m *VnConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *VnConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_VnConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_VnConfiguration proto.InternalMessageInfo

type isVnConfiguration_StaticRouteChoice interface {
	isVnConfiguration_StaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVnConfiguration_StaticV6RouteChoice interface {
	isVnConfiguration_StaticV6RouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVnConfiguration_DcClusterGroupChoice interface {
	isVnConfiguration_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VnConfiguration_NoStaticRoutes struct {
	NoStaticRoutes *schema.Empty `protobuf:"bytes,3,opt,name=no_static_routes,json=noStaticRoutes,proto3,oneof" json:"no_static_routes,omitempty"`
}
type VnConfiguration_StaticRoutes struct {
	StaticRoutes *StaticRoutesListType `protobuf:"bytes,4,opt,name=static_routes,json=staticRoutes,proto3,oneof" json:"static_routes,omitempty"`
}
type VnConfiguration_NoStaticV6Routes struct {
	NoStaticV6Routes *schema.Empty `protobuf:"bytes,11,opt,name=no_static_v6_routes,json=noStaticV6Routes,proto3,oneof" json:"no_static_v6_routes,omitempty"`
}
type VnConfiguration_StaticV6Routes struct {
	StaticV6Routes *virtual_network.StaticV6RoutesListType `protobuf:"bytes,12,opt,name=static_v6_routes,json=staticV6Routes,proto3,oneof" json:"static_v6_routes,omitempty"`
}
type VnConfiguration_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,6,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type VnConfiguration_DcClusterGroup struct {
	DcClusterGroup *views.ObjectRefType `protobuf:"bytes,7,opt,name=dc_cluster_group,json=dcClusterGroup,proto3,oneof" json:"dc_cluster_group,omitempty"`
}

func (*VnConfiguration_NoStaticRoutes) isVnConfiguration_StaticRouteChoice()      {}
func (*VnConfiguration_StaticRoutes) isVnConfiguration_StaticRouteChoice()        {}
func (*VnConfiguration_NoStaticV6Routes) isVnConfiguration_StaticV6RouteChoice()  {}
func (*VnConfiguration_StaticV6Routes) isVnConfiguration_StaticV6RouteChoice()    {}
func (*VnConfiguration_NoDcClusterGroup) isVnConfiguration_DcClusterGroupChoice() {}
func (*VnConfiguration_DcClusterGroup) isVnConfiguration_DcClusterGroupChoice()   {}

func (m *VnConfiguration) GetStaticRouteChoice() isVnConfiguration_StaticRouteChoice {
	if m != nil {
		return m.StaticRouteChoice
	}
	return nil
}
func (m *VnConfiguration) GetStaticV6RouteChoice() isVnConfiguration_StaticV6RouteChoice {
	if m != nil {
		return m.StaticV6RouteChoice
	}
	return nil
}
func (m *VnConfiguration) GetDcClusterGroupChoice() isVnConfiguration_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}

func (m *VnConfiguration) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *VnConfiguration) GetNoStaticRoutes() *schema.Empty {
	if x, ok := m.GetStaticRouteChoice().(*VnConfiguration_NoStaticRoutes); ok {
		return x.NoStaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetStaticRoutes() *StaticRoutesListType {
	if x, ok := m.GetStaticRouteChoice().(*VnConfiguration_StaticRoutes); ok {
		return x.StaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetNoStaticV6Routes() *schema.Empty {
	if x, ok := m.GetStaticV6RouteChoice().(*VnConfiguration_NoStaticV6Routes); ok {
		return x.NoStaticV6Routes
	}
	return nil
}

func (m *VnConfiguration) GetStaticV6Routes() *virtual_network.StaticV6RoutesListType {
	if x, ok := m.GetStaticV6RouteChoice().(*VnConfiguration_StaticV6Routes); ok {
		return x.StaticV6Routes
	}
	return nil
}

func (m *VnConfiguration) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*VnConfiguration_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *VnConfiguration) GetDcClusterGroup() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*VnConfiguration_DcClusterGroup); ok {
		return x.DcClusterGroup
	}
	return nil
}

func (m *VnConfiguration) GetDcClusterGroupInterface() []*views.ObjectRefType {
	if m != nil {
		return m.DcClusterGroupInterface
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VnConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VnConfiguration_NoStaticRoutes)(nil),
		(*VnConfiguration_StaticRoutes)(nil),
		(*VnConfiguration_NoStaticV6Routes)(nil),
		(*VnConfiguration_StaticV6Routes)(nil),
		(*VnConfiguration_NoDcClusterGroup)(nil),
		(*VnConfiguration_DcClusterGroup)(nil),
	}
}

// SLI Virtual Network Configuration
//
// x-displayName: "Site Local Inside Network Configuration"
// Site local inside network configuration
type SliVnConfiguration struct {
	// Manage Static Routes
	//
	// x-displayName: "Manage Static Routes"
	// x-required
	// Add static routes to network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to StaticRouteChoice:
	//	*SliVnConfiguration_NoStaticRoutes
	//	*SliVnConfiguration_StaticRoutes
	StaticRouteChoice isSliVnConfiguration_StaticRouteChoice `protobuf_oneof:"static_route_choice"`
	// Manage IPv6 Static Routes
	//
	// x-displayName: "Manage IPv6 Static Routes"
	// x-required
	// Add IPv6 static routes to network. Used to reach indirectly connected IPv6 subnets.
	//
	// Types that are valid to be assigned to StaticV6RouteChoice:
	//	*SliVnConfiguration_NoV6StaticRoutes
	//	*SliVnConfiguration_StaticV6Routes
	StaticV6RouteChoice isSliVnConfiguration_StaticV6RouteChoice `protobuf_oneof:"static_v6_route_choice"`
}

func (m *SliVnConfiguration) Reset()      { *m = SliVnConfiguration{} }
func (*SliVnConfiguration) ProtoMessage() {}
func (*SliVnConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{6}
}
func (m *SliVnConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SliVnConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SliVnConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SliVnConfiguration.Merge(m, src)
}
func (m *SliVnConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SliVnConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SliVnConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SliVnConfiguration proto.InternalMessageInfo

type isSliVnConfiguration_StaticRouteChoice interface {
	isSliVnConfiguration_StaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSliVnConfiguration_StaticV6RouteChoice interface {
	isSliVnConfiguration_StaticV6RouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SliVnConfiguration_NoStaticRoutes struct {
	NoStaticRoutes *schema.Empty `protobuf:"bytes,3,opt,name=no_static_routes,json=noStaticRoutes,proto3,oneof" json:"no_static_routes,omitempty"`
}
type SliVnConfiguration_StaticRoutes struct {
	StaticRoutes *StaticRoutesListType `protobuf:"bytes,4,opt,name=static_routes,json=staticRoutes,proto3,oneof" json:"static_routes,omitempty"`
}
type SliVnConfiguration_NoV6StaticRoutes struct {
	NoV6StaticRoutes *schema.Empty `protobuf:"bytes,7,opt,name=no_v6_static_routes,json=noV6StaticRoutes,proto3,oneof" json:"no_v6_static_routes,omitempty"`
}
type SliVnConfiguration_StaticV6Routes struct {
	StaticV6Routes *virtual_network.StaticV6RoutesListType `protobuf:"bytes,8,opt,name=static_v6_routes,json=staticV6Routes,proto3,oneof" json:"static_v6_routes,omitempty"`
}

func (*SliVnConfiguration_NoStaticRoutes) isSliVnConfiguration_StaticRouteChoice()     {}
func (*SliVnConfiguration_StaticRoutes) isSliVnConfiguration_StaticRouteChoice()       {}
func (*SliVnConfiguration_NoV6StaticRoutes) isSliVnConfiguration_StaticV6RouteChoice() {}
func (*SliVnConfiguration_StaticV6Routes) isSliVnConfiguration_StaticV6RouteChoice()   {}

func (m *SliVnConfiguration) GetStaticRouteChoice() isSliVnConfiguration_StaticRouteChoice {
	if m != nil {
		return m.StaticRouteChoice
	}
	return nil
}
func (m *SliVnConfiguration) GetStaticV6RouteChoice() isSliVnConfiguration_StaticV6RouteChoice {
	if m != nil {
		return m.StaticV6RouteChoice
	}
	return nil
}

func (m *SliVnConfiguration) GetNoStaticRoutes() *schema.Empty {
	if x, ok := m.GetStaticRouteChoice().(*SliVnConfiguration_NoStaticRoutes); ok {
		return x.NoStaticRoutes
	}
	return nil
}

func (m *SliVnConfiguration) GetStaticRoutes() *StaticRoutesListType {
	if x, ok := m.GetStaticRouteChoice().(*SliVnConfiguration_StaticRoutes); ok {
		return x.StaticRoutes
	}
	return nil
}

func (m *SliVnConfiguration) GetNoV6StaticRoutes() *schema.Empty {
	if x, ok := m.GetStaticV6RouteChoice().(*SliVnConfiguration_NoV6StaticRoutes); ok {
		return x.NoV6StaticRoutes
	}
	return nil
}

func (m *SliVnConfiguration) GetStaticV6Routes() *virtual_network.StaticV6RoutesListType {
	if x, ok := m.GetStaticV6RouteChoice().(*SliVnConfiguration_StaticV6Routes); ok {
		return x.StaticV6Routes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SliVnConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SliVnConfiguration_NoStaticRoutes)(nil),
		(*SliVnConfiguration_StaticRoutes)(nil),
		(*SliVnConfiguration_NoV6StaticRoutes)(nil),
		(*SliVnConfiguration_StaticV6Routes)(nil),
	}
}

// Global Network Connection
//
// x-displayName: "Global Network Connection"
// Global network connection
type GlobalNetworkConnectionType struct {
	// Connector Choice
	//
	// x-displayName: "Select Network Connection Type"
	// x-required
	// Select the networks and method in which they are connected.
	//
	// Types that are valid to be assigned to ConnectionChoice:
	//	*GlobalNetworkConnectionType_SloToGlobalDr
	ConnectionChoice isGlobalNetworkConnectionType_ConnectionChoice `protobuf_oneof:"connection_choice"`
	// Select Forward Proxy
	//
	// x-displayName: "Select Forward Proxy"
	// x-required
	// Select to enable forward proxy
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*GlobalNetworkConnectionType_DisableForwardProxy
	//	*GlobalNetworkConnectionType_EnableForwardProxy
	ForwardProxyChoice isGlobalNetworkConnectionType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
}

func (m *GlobalNetworkConnectionType) Reset()      { *m = GlobalNetworkConnectionType{} }
func (*GlobalNetworkConnectionType) ProtoMessage() {}
func (*GlobalNetworkConnectionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{7}
}
func (m *GlobalNetworkConnectionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalNetworkConnectionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalNetworkConnectionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalNetworkConnectionType.Merge(m, src)
}
func (m *GlobalNetworkConnectionType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalNetworkConnectionType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalNetworkConnectionType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalNetworkConnectionType proto.InternalMessageInfo

type isGlobalNetworkConnectionType_ConnectionChoice interface {
	isGlobalNetworkConnectionType_ConnectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalNetworkConnectionType_ForwardProxyChoice interface {
	isGlobalNetworkConnectionType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalNetworkConnectionType_SloToGlobalDr struct {
	SloToGlobalDr *views.GlobalConnectorType `protobuf:"bytes,3,opt,name=slo_to_global_dr,json=sloToGlobalDr,proto3,oneof" json:"slo_to_global_dr,omitempty"`
}
type GlobalNetworkConnectionType_DisableForwardProxy struct {
	DisableForwardProxy *schema.Empty `protobuf:"bytes,5,opt,name=disable_forward_proxy,json=disableForwardProxy,proto3,oneof" json:"disable_forward_proxy,omitempty"`
}
type GlobalNetworkConnectionType_EnableForwardProxy struct {
	EnableForwardProxy *schema.ForwardProxyConfigType `protobuf:"bytes,6,opt,name=enable_forward_proxy,json=enableForwardProxy,proto3,oneof" json:"enable_forward_proxy,omitempty"`
}

func (*GlobalNetworkConnectionType_SloToGlobalDr) isGlobalNetworkConnectionType_ConnectionChoice() {}
func (*GlobalNetworkConnectionType_DisableForwardProxy) isGlobalNetworkConnectionType_ForwardProxyChoice() {
}
func (*GlobalNetworkConnectionType_EnableForwardProxy) isGlobalNetworkConnectionType_ForwardProxyChoice() {
}

func (m *GlobalNetworkConnectionType) GetConnectionChoice() isGlobalNetworkConnectionType_ConnectionChoice {
	if m != nil {
		return m.ConnectionChoice
	}
	return nil
}
func (m *GlobalNetworkConnectionType) GetForwardProxyChoice() isGlobalNetworkConnectionType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}

func (m *GlobalNetworkConnectionType) GetSloToGlobalDr() *views.GlobalConnectorType {
	if x, ok := m.GetConnectionChoice().(*GlobalNetworkConnectionType_SloToGlobalDr); ok {
		return x.SloToGlobalDr
	}
	return nil
}

func (m *GlobalNetworkConnectionType) GetDisableForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*GlobalNetworkConnectionType_DisableForwardProxy); ok {
		return x.DisableForwardProxy
	}
	return nil
}

func (m *GlobalNetworkConnectionType) GetEnableForwardProxy() *schema.ForwardProxyConfigType {
	if x, ok := m.GetForwardProxyChoice().(*GlobalNetworkConnectionType_EnableForwardProxy); ok {
		return x.EnableForwardProxy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalNetworkConnectionType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalNetworkConnectionType_SloToGlobalDr)(nil),
		(*GlobalNetworkConnectionType_DisableForwardProxy)(nil),
		(*GlobalNetworkConnectionType_EnableForwardProxy)(nil),
	}
}

// Global Network Connection List
//
// x-displayName: "Global Network Connection List"
// List of global network connections
type GlobalNetworkConnectionListType struct {
	// Global Network Connections
	//
	// x-displayName: "Global Network Connections"
	// x-required
	// Global network connections
	GlobalNetworkConnections []*GlobalNetworkConnectionType `protobuf:"bytes,1,rep,name=global_network_connections,json=globalNetworkConnections,proto3" json:"global_network_connections,omitempty"`
}

func (m *GlobalNetworkConnectionListType) Reset()      { *m = GlobalNetworkConnectionListType{} }
func (*GlobalNetworkConnectionListType) ProtoMessage() {}
func (*GlobalNetworkConnectionListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{8}
}
func (m *GlobalNetworkConnectionListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalNetworkConnectionListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalNetworkConnectionListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalNetworkConnectionListType.Merge(m, src)
}
func (m *GlobalNetworkConnectionListType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalNetworkConnectionListType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalNetworkConnectionListType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalNetworkConnectionListType proto.InternalMessageInfo

func (m *GlobalNetworkConnectionListType) GetGlobalNetworkConnections() []*GlobalNetworkConnectionType {
	if m != nil {
		return m.GlobalNetworkConnections
	}
	return nil
}

// VssNetworkConfiguration
//
// x-displayName: "VssNetworkConfiguration"
type VssNetworkConfiguration struct {
	// Site Local Network
	//
	// x-displayName: "Site Local Network"
	// x-required
	// Select to configure site local network
	//
	// Types that are valid to be assigned to SloChoice:
	//	*VssNetworkConfiguration_DefaultConfig
	//	*VssNetworkConfiguration_SloConfig
	SloChoice isVssNetworkConfiguration_SloChoice `protobuf_oneof:"slo_choice"`
	// Site Local Inside Network
	//
	// x-displayName: "Select Configuration For Site Local Inside Network"
	// Select to configure site local network
	//
	// Types that are valid to be assigned to SliChoice:
	//	*VssNetworkConfiguration_DefaultSliConfig
	//	*VssNetworkConfiguration_SliConfig
	SliChoice isVssNetworkConfiguration_SliChoice `protobuf_oneof:"sli_choice"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*VssNetworkConfiguration_SmConnectionPublicIp
	//	*VssNetworkConfiguration_SmConnectionPvtIp
	//	*VssNetworkConfiguration_SiteToSiteTunnelIp
	SiteMeshGroupChoice isVssNetworkConfiguration_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
	// Select Interface Config
	//
	// x-displayName: "Interface Configuration"
	// x-required
	// Select how interfaces are configured for this site
	//
	// Types that are valid to be assigned to InterfaceChoice:
	//	*VssNetworkConfiguration_DefaultInterfaceConfig
	//	*VssNetworkConfiguration_InterfaceList
	InterfaceChoice isVssNetworkConfiguration_InterfaceChoice `protobuf_oneof:"interface_choice"`
	// Manage Firewall Policy
	//
	// x-displayName: "Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*VssNetworkConfiguration_NoNetworkPolicy
	//	*VssNetworkConfiguration_ActiveNetworkPolicies
	//	*VssNetworkConfiguration_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isVssNetworkConfiguration_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*VssNetworkConfiguration_NoForwardProxy
	//	*VssNetworkConfiguration_ActiveForwardProxyPolicies
	//	*VssNetworkConfiguration_ForwardProxyAllowAll
	ForwardProxyChoice isVssNetworkConfiguration_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Global Networks Connections"
	// x-required
	// Select global networks to connect to site local network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*VssNetworkConfiguration_NoGlobalNetwork
	//	*VssNetworkConfiguration_GlobalNetworkList
	GlobalNetworkChoice isVssNetworkConfiguration_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Common V4 VIP
	//
	// x-displayName: "Common V4 VIP"
	// x-example: "10.1.1.1"
	// Optional common virtual V4 IP  across all nodes to be used as automatic VIP for site local network.
	OutsideVip string `protobuf:"bytes,16,opt,name=outside_vip,json=outsideVip,proto3" json:"outside_vip,omitempty"`
	// Common V6 VIP
	//
	// x-displayName: "Common V6 VIP"
	// x-example: "2001::1"
	// Optional common virtual V6 IP across all nodes to be used as automatic VIP for site local network.
	OutsideVipV6 string `protobuf:"bytes,57,opt,name=outside_vip_v6,json=outsideVipV6,proto3" json:"outside_vip_v6,omitempty"`
	// outside_nameserver
	//
	// x-displayName: "DNS V4 Server for Local Network"
	// x-example: "10.1.1.1"
	// Optional DNS server V4 IP to be used for name resolution in local network
	OutsideNameserver string `protobuf:"bytes,17,opt,name=outside_nameserver,json=outsideNameserver,proto3" json:"outside_nameserver,omitempty"`
	// outside_nameserver_v6
	//
	// x-displayName: "DNS V6 Server for Local Network"
	// x-example: "1001::1"
	// Optional DNS server V6 IP to be used for name resolution in local network
	OutsideNameserverV6 string `protobuf:"bytes,58,opt,name=outside_nameserver_v6,json=outsideNameserverV6,proto3" json:"outside_nameserver_v6,omitempty"`
	// bgp_router_id
	//
	// x-displayName: "BGP Router ID"
	// x-example: "10.1.1.1"
	// Optional bgp router id that can be used as parameter for BGP configuration when BGP is configured to
	// fetch BGP router ID from site object.
	BgpRouterId string `protobuf:"bytes,18,opt,name=bgp_router_id,json=bgpRouterId,proto3" json:"bgp_router_id,omitempty"`
	// bgp_peer_address
	//
	// x-displayName: "BGP Peer Address"
	// x-example: "10.1.1.1"
	// Optional bgp peer address that can be used as parameter for BGP configuration when BGP is configured
	// to fetch BGP peer address from site Object. This can be used to change peer address per site in fleet.
	BgpPeerAddress string `protobuf:"bytes,19,opt,name=bgp_peer_address,json=bgpPeerAddress,proto3" json:"bgp_peer_address,omitempty"`
	// vip_vrrp_mode
	//
	// x-displayName: "VIP Advertisement Mode"
	// Optional VIP VRRP advertisement mode. This controls the ARP behavior for  Common VIP
	// addresses, when it is configured. When turned on, the Master VER would advertise gratuitous ARPs and
	// would respond to ARP queries for these addresses. When turned off, ARP responses are not given by VER.
	//
	// If BGP is configured, common VIP addresses will be advertised by BGP. This is
	// irrespective of the vrrp mode.
	//
	// When Outside VIP / Inside VIP are configured, it is recommended to turn on vrrp and also configure BGP.
	VipVrrpMode schema.VipVrrpType `protobuf:"varint,20,opt,name=vip_vrrp_mode,json=vipVrrpMode,proto3,enum=ves.io.schema.VipVrrpType" json:"vip_vrrp_mode,omitempty"`
	// tunnel_dead_timeout
	//
	// x-displayName: "Tunnel Dead Timeout (msec)"
	// x-example: "0"
	// Time interval, in millisec, within which any ipsec / ssl connection from the site going down is detected.
	// When not set (== 0), a default value of 10000 msec will be used.
	TunnelDeadTimeout uint32 `protobuf:"varint,22,opt,name=tunnel_dead_timeout,json=tunnelDeadTimeout,proto3" json:"tunnel_dead_timeout,omitempty"`
}

func (m *VssNetworkConfiguration) Reset()      { *m = VssNetworkConfiguration{} }
func (*VssNetworkConfiguration) ProtoMessage() {}
func (*VssNetworkConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{9}
}
func (m *VssNetworkConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VssNetworkConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VssNetworkConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VssNetworkConfiguration.Merge(m, src)
}
func (m *VssNetworkConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *VssNetworkConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_VssNetworkConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_VssNetworkConfiguration proto.InternalMessageInfo

type isVssNetworkConfiguration_SloChoice interface {
	isVssNetworkConfiguration_SloChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssNetworkConfiguration_SliChoice interface {
	isVssNetworkConfiguration_SliChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssNetworkConfiguration_SiteMeshGroupChoice interface {
	isVssNetworkConfiguration_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssNetworkConfiguration_InterfaceChoice interface {
	isVssNetworkConfiguration_InterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssNetworkConfiguration_NetworkPolicyChoice interface {
	isVssNetworkConfiguration_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssNetworkConfiguration_ForwardProxyChoice interface {
	isVssNetworkConfiguration_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssNetworkConfiguration_GlobalNetworkChoice interface {
	isVssNetworkConfiguration_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VssNetworkConfiguration_DefaultConfig struct {
	DefaultConfig *schema.Empty `protobuf:"bytes,2,opt,name=default_config,json=defaultConfig,proto3,oneof" json:"default_config,omitempty"`
}
type VssNetworkConfiguration_SloConfig struct {
	SloConfig *VnConfiguration `protobuf:"bytes,3,opt,name=slo_config,json=sloConfig,proto3,oneof" json:"slo_config,omitempty"`
}
type VssNetworkConfiguration_DefaultSliConfig struct {
	DefaultSliConfig *schema.Empty `protobuf:"bytes,25,opt,name=default_sli_config,json=defaultSliConfig,proto3,oneof" json:"default_sli_config,omitempty"`
}
type VssNetworkConfiguration_SliConfig struct {
	SliConfig *SliVnConfiguration `protobuf:"bytes,26,opt,name=sli_config,json=sliConfig,proto3,oneof" json:"sli_config,omitempty"`
}
type VssNetworkConfiguration_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,51,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type VssNetworkConfiguration_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,52,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}
type VssNetworkConfiguration_SiteToSiteTunnelIp struct {
	SiteToSiteTunnelIp string `protobuf:"bytes,21,opt,name=site_to_site_tunnel_ip,json=siteToSiteTunnelIp,proto3,oneof" json:"site_to_site_tunnel_ip,omitempty"`
}
type VssNetworkConfiguration_DefaultInterfaceConfig struct {
	DefaultInterfaceConfig *schema.Empty `protobuf:"bytes,5,opt,name=default_interface_config,json=defaultInterfaceConfig,proto3,oneof" json:"default_interface_config,omitempty"`
}
type VssNetworkConfiguration_InterfaceList struct {
	InterfaceList *InterfaceListType `protobuf:"bytes,6,opt,name=interface_list,json=interfaceList,proto3,oneof" json:"interface_list,omitempty"`
}
type VssNetworkConfiguration_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,8,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type VssNetworkConfiguration_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,9,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type VssNetworkConfiguration_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,27,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type VssNetworkConfiguration_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,11,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type VssNetworkConfiguration_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,12,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type VssNetworkConfiguration_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,23,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type VssNetworkConfiguration_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,14,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type VssNetworkConfiguration_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,15,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}

func (*VssNetworkConfiguration_DefaultConfig) isVssNetworkConfiguration_SloChoice()    {}
func (*VssNetworkConfiguration_SloConfig) isVssNetworkConfiguration_SloChoice()        {}
func (*VssNetworkConfiguration_DefaultSliConfig) isVssNetworkConfiguration_SliChoice() {}
func (*VssNetworkConfiguration_SliConfig) isVssNetworkConfiguration_SliChoice()        {}
func (*VssNetworkConfiguration_SmConnectionPublicIp) isVssNetworkConfiguration_SiteMeshGroupChoice() {
}
func (*VssNetworkConfiguration_SmConnectionPvtIp) isVssNetworkConfiguration_SiteMeshGroupChoice()  {}
func (*VssNetworkConfiguration_SiteToSiteTunnelIp) isVssNetworkConfiguration_SiteMeshGroupChoice() {}
func (*VssNetworkConfiguration_DefaultInterfaceConfig) isVssNetworkConfiguration_InterfaceChoice() {}
func (*VssNetworkConfiguration_InterfaceList) isVssNetworkConfiguration_InterfaceChoice()          {}
func (*VssNetworkConfiguration_NoNetworkPolicy) isVssNetworkConfiguration_NetworkPolicyChoice()    {}
func (*VssNetworkConfiguration_ActiveNetworkPolicies) isVssNetworkConfiguration_NetworkPolicyChoice() {
}
func (*VssNetworkConfiguration_ActiveEnhancedFirewallPolicies) isVssNetworkConfiguration_NetworkPolicyChoice() {
}
func (*VssNetworkConfiguration_NoForwardProxy) isVssNetworkConfiguration_ForwardProxyChoice() {}
func (*VssNetworkConfiguration_ActiveForwardProxyPolicies) isVssNetworkConfiguration_ForwardProxyChoice() {
}
func (*VssNetworkConfiguration_ForwardProxyAllowAll) isVssNetworkConfiguration_ForwardProxyChoice() {}
func (*VssNetworkConfiguration_NoGlobalNetwork) isVssNetworkConfiguration_GlobalNetworkChoice()     {}
func (*VssNetworkConfiguration_GlobalNetworkList) isVssNetworkConfiguration_GlobalNetworkChoice()   {}

func (m *VssNetworkConfiguration) GetSloChoice() isVssNetworkConfiguration_SloChoice {
	if m != nil {
		return m.SloChoice
	}
	return nil
}
func (m *VssNetworkConfiguration) GetSliChoice() isVssNetworkConfiguration_SliChoice {
	if m != nil {
		return m.SliChoice
	}
	return nil
}
func (m *VssNetworkConfiguration) GetSiteMeshGroupChoice() isVssNetworkConfiguration_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}
func (m *VssNetworkConfiguration) GetInterfaceChoice() isVssNetworkConfiguration_InterfaceChoice {
	if m != nil {
		return m.InterfaceChoice
	}
	return nil
}
func (m *VssNetworkConfiguration) GetNetworkPolicyChoice() isVssNetworkConfiguration_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *VssNetworkConfiguration) GetForwardProxyChoice() isVssNetworkConfiguration_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *VssNetworkConfiguration) GetGlobalNetworkChoice() isVssNetworkConfiguration_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}

func (m *VssNetworkConfiguration) GetDefaultConfig() *schema.Empty {
	if x, ok := m.GetSloChoice().(*VssNetworkConfiguration_DefaultConfig); ok {
		return x.DefaultConfig
	}
	return nil
}

func (m *VssNetworkConfiguration) GetSloConfig() *VnConfiguration {
	if x, ok := m.GetSloChoice().(*VssNetworkConfiguration_SloConfig); ok {
		return x.SloConfig
	}
	return nil
}

func (m *VssNetworkConfiguration) GetDefaultSliConfig() *schema.Empty {
	if x, ok := m.GetSliChoice().(*VssNetworkConfiguration_DefaultSliConfig); ok {
		return x.DefaultSliConfig
	}
	return nil
}

func (m *VssNetworkConfiguration) GetSliConfig() *SliVnConfiguration {
	if x, ok := m.GetSliChoice().(*VssNetworkConfiguration_SliConfig); ok {
		return x.SliConfig
	}
	return nil
}

func (m *VssNetworkConfiguration) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*VssNetworkConfiguration_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *VssNetworkConfiguration) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*VssNetworkConfiguration_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

func (m *VssNetworkConfiguration) GetSiteToSiteTunnelIp() string {
	if x, ok := m.GetSiteMeshGroupChoice().(*VssNetworkConfiguration_SiteToSiteTunnelIp); ok {
		return x.SiteToSiteTunnelIp
	}
	return ""
}

func (m *VssNetworkConfiguration) GetDefaultInterfaceConfig() *schema.Empty {
	if x, ok := m.GetInterfaceChoice().(*VssNetworkConfiguration_DefaultInterfaceConfig); ok {
		return x.DefaultInterfaceConfig
	}
	return nil
}

func (m *VssNetworkConfiguration) GetInterfaceList() *InterfaceListType {
	if x, ok := m.GetInterfaceChoice().(*VssNetworkConfiguration_InterfaceList); ok {
		return x.InterfaceList
	}
	return nil
}

func (m *VssNetworkConfiguration) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*VssNetworkConfiguration_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *VssNetworkConfiguration) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*VssNetworkConfiguration_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *VssNetworkConfiguration) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*VssNetworkConfiguration_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *VssNetworkConfiguration) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*VssNetworkConfiguration_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *VssNetworkConfiguration) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*VssNetworkConfiguration_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *VssNetworkConfiguration) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*VssNetworkConfiguration_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *VssNetworkConfiguration) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*VssNetworkConfiguration_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *VssNetworkConfiguration) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*VssNetworkConfiguration_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *VssNetworkConfiguration) GetOutsideVip() string {
	if m != nil {
		return m.OutsideVip
	}
	return ""
}

func (m *VssNetworkConfiguration) GetOutsideVipV6() string {
	if m != nil {
		return m.OutsideVipV6
	}
	return ""
}

func (m *VssNetworkConfiguration) GetOutsideNameserver() string {
	if m != nil {
		return m.OutsideNameserver
	}
	return ""
}

func (m *VssNetworkConfiguration) GetOutsideNameserverV6() string {
	if m != nil {
		return m.OutsideNameserverV6
	}
	return ""
}

func (m *VssNetworkConfiguration) GetBgpRouterId() string {
	if m != nil {
		return m.BgpRouterId
	}
	return ""
}

func (m *VssNetworkConfiguration) GetBgpPeerAddress() string {
	if m != nil {
		return m.BgpPeerAddress
	}
	return ""
}

func (m *VssNetworkConfiguration) GetVipVrrpMode() schema.VipVrrpType {
	if m != nil {
		return m.VipVrrpMode
	}
	return schema.VIP_VRRP_INVALID
}

func (m *VssNetworkConfiguration) GetTunnelDeadTimeout() uint32 {
	if m != nil {
		return m.TunnelDeadTimeout
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VssNetworkConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VssNetworkConfiguration_DefaultConfig)(nil),
		(*VssNetworkConfiguration_SloConfig)(nil),
		(*VssNetworkConfiguration_DefaultSliConfig)(nil),
		(*VssNetworkConfiguration_SliConfig)(nil),
		(*VssNetworkConfiguration_SmConnectionPublicIp)(nil),
		(*VssNetworkConfiguration_SmConnectionPvtIp)(nil),
		(*VssNetworkConfiguration_SiteToSiteTunnelIp)(nil),
		(*VssNetworkConfiguration_DefaultInterfaceConfig)(nil),
		(*VssNetworkConfiguration_InterfaceList)(nil),
		(*VssNetworkConfiguration_NoNetworkPolicy)(nil),
		(*VssNetworkConfiguration_ActiveNetworkPolicies)(nil),
		(*VssNetworkConfiguration_ActiveEnhancedFirewallPolicies)(nil),
		(*VssNetworkConfiguration_NoForwardProxy)(nil),
		(*VssNetworkConfiguration_ActiveForwardProxyPolicies)(nil),
		(*VssNetworkConfiguration_ForwardProxyAllowAll)(nil),
		(*VssNetworkConfiguration_NoGlobalNetwork)(nil),
		(*VssNetworkConfiguration_GlobalNetworkList)(nil),
	}
}

// VssStorageConfiguration
//
// x-displayName: "VssStorageConfiguration"
type VssStorageConfiguration struct {
	// Storage Interfaces
	//
	// x-displayName: "Storage Interfaces"
	// x-required
	// Select if storage interfaces are configured
	//
	// Types that are valid to be assigned to StorageInterfaceChoice:
	//	*VssStorageConfiguration_NoStorageInterfaces
	//	*VssStorageConfiguration_StorageInterfaceList
	StorageInterfaceChoice isVssStorageConfiguration_StorageInterfaceChoice `protobuf_oneof:"storage_interface_choice"`
	// Storage Device Configuration
	//
	// x-displayName: "Storage Device"
	// x-required
	// Configure storage devices for this site
	//
	// Types that are valid to be assigned to StorageDeviceChoice:
	//	*VssStorageConfiguration_NoStorageDevice
	//	*VssStorageConfiguration_StorageDeviceList
	StorageDeviceChoice isVssStorageConfiguration_StorageDeviceChoice `protobuf_oneof:"storage_device_choice"`
	// Storage Class Configuration
	//
	// x-displayName: "Storage Classes"
	// x-required
	// Configure custom storage classes in kubernetes for this site
	//
	// Types that are valid to be assigned to StorageClassChoice:
	//	*VssStorageConfiguration_DefaultStorageClass
	//	*VssStorageConfiguration_StorageClassList
	StorageClassChoice isVssStorageConfiguration_StorageClassChoice `protobuf_oneof:"storage_class_choice"`
	// Manage Storage Static Routes
	//
	// x-displayName: "Storage Static Routes"
	// x-required
	// Add static routes for storage network. Used to reach indirectly connected storage devices.
	//
	// Types that are valid to be assigned to StaticRouteChoice:
	//	*VssStorageConfiguration_NoStaticRoutes
	//	*VssStorageConfiguration_StaticRoutes
	StaticRouteChoice isVssStorageConfiguration_StaticRouteChoice `protobuf_oneof:"static_route_choice"`
}

func (m *VssStorageConfiguration) Reset()      { *m = VssStorageConfiguration{} }
func (*VssStorageConfiguration) ProtoMessage() {}
func (*VssStorageConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{10}
}
func (m *VssStorageConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VssStorageConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VssStorageConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VssStorageConfiguration.Merge(m, src)
}
func (m *VssStorageConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *VssStorageConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_VssStorageConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_VssStorageConfiguration proto.InternalMessageInfo

type isVssStorageConfiguration_StorageInterfaceChoice interface {
	isVssStorageConfiguration_StorageInterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssStorageConfiguration_StorageDeviceChoice interface {
	isVssStorageConfiguration_StorageDeviceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssStorageConfiguration_StorageClassChoice interface {
	isVssStorageConfiguration_StorageClassChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssStorageConfiguration_StaticRouteChoice interface {
	isVssStorageConfiguration_StaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VssStorageConfiguration_NoStorageInterfaces struct {
	NoStorageInterfaces *schema.Empty `protobuf:"bytes,2,opt,name=no_storage_interfaces,json=noStorageInterfaces,proto3,oneof" json:"no_storage_interfaces,omitempty"`
}
type VssStorageConfiguration_StorageInterfaceList struct {
	StorageInterfaceList *StorageInterfaceListType `protobuf:"bytes,3,opt,name=storage_interface_list,json=storageInterfaceList,proto3,oneof" json:"storage_interface_list,omitempty"`
}
type VssStorageConfiguration_NoStorageDevice struct {
	NoStorageDevice *schema.Empty `protobuf:"bytes,5,opt,name=no_storage_device,json=noStorageDevice,proto3,oneof" json:"no_storage_device,omitempty"`
}
type VssStorageConfiguration_StorageDeviceList struct {
	StorageDeviceList *fleet.FleetStorageDeviceListType `protobuf:"bytes,6,opt,name=storage_device_list,json=storageDeviceList,proto3,oneof" json:"storage_device_list,omitempty"`
}
type VssStorageConfiguration_DefaultStorageClass struct {
	DefaultStorageClass *schema.Empty `protobuf:"bytes,8,opt,name=default_storage_class,json=defaultStorageClass,proto3,oneof" json:"default_storage_class,omitempty"`
}
type VssStorageConfiguration_StorageClassList struct {
	StorageClassList *fleet.FleetStorageClassListType `protobuf:"bytes,9,opt,name=storage_class_list,json=storageClassList,proto3,oneof" json:"storage_class_list,omitempty"`
}
type VssStorageConfiguration_NoStaticRoutes struct {
	NoStaticRoutes *schema.Empty `protobuf:"bytes,11,opt,name=no_static_routes,json=noStaticRoutes,proto3,oneof" json:"no_static_routes,omitempty"`
}
type VssStorageConfiguration_StaticRoutes struct {
	StaticRoutes *StaticRoutesListType `protobuf:"bytes,12,opt,name=static_routes,json=staticRoutes,proto3,oneof" json:"static_routes,omitempty"`
}

func (*VssStorageConfiguration_NoStorageInterfaces) isVssStorageConfiguration_StorageInterfaceChoice() {
}
func (*VssStorageConfiguration_StorageInterfaceList) isVssStorageConfiguration_StorageInterfaceChoice() {
}
func (*VssStorageConfiguration_NoStorageDevice) isVssStorageConfiguration_StorageDeviceChoice()    {}
func (*VssStorageConfiguration_StorageDeviceList) isVssStorageConfiguration_StorageDeviceChoice()  {}
func (*VssStorageConfiguration_DefaultStorageClass) isVssStorageConfiguration_StorageClassChoice() {}
func (*VssStorageConfiguration_StorageClassList) isVssStorageConfiguration_StorageClassChoice()    {}
func (*VssStorageConfiguration_NoStaticRoutes) isVssStorageConfiguration_StaticRouteChoice()       {}
func (*VssStorageConfiguration_StaticRoutes) isVssStorageConfiguration_StaticRouteChoice()         {}

func (m *VssStorageConfiguration) GetStorageInterfaceChoice() isVssStorageConfiguration_StorageInterfaceChoice {
	if m != nil {
		return m.StorageInterfaceChoice
	}
	return nil
}
func (m *VssStorageConfiguration) GetStorageDeviceChoice() isVssStorageConfiguration_StorageDeviceChoice {
	if m != nil {
		return m.StorageDeviceChoice
	}
	return nil
}
func (m *VssStorageConfiguration) GetStorageClassChoice() isVssStorageConfiguration_StorageClassChoice {
	if m != nil {
		return m.StorageClassChoice
	}
	return nil
}
func (m *VssStorageConfiguration) GetStaticRouteChoice() isVssStorageConfiguration_StaticRouteChoice {
	if m != nil {
		return m.StaticRouteChoice
	}
	return nil
}

func (m *VssStorageConfiguration) GetNoStorageInterfaces() *schema.Empty {
	if x, ok := m.GetStorageInterfaceChoice().(*VssStorageConfiguration_NoStorageInterfaces); ok {
		return x.NoStorageInterfaces
	}
	return nil
}

func (m *VssStorageConfiguration) GetStorageInterfaceList() *StorageInterfaceListType {
	if x, ok := m.GetStorageInterfaceChoice().(*VssStorageConfiguration_StorageInterfaceList); ok {
		return x.StorageInterfaceList
	}
	return nil
}

func (m *VssStorageConfiguration) GetNoStorageDevice() *schema.Empty {
	if x, ok := m.GetStorageDeviceChoice().(*VssStorageConfiguration_NoStorageDevice); ok {
		return x.NoStorageDevice
	}
	return nil
}

func (m *VssStorageConfiguration) GetStorageDeviceList() *fleet.FleetStorageDeviceListType {
	if x, ok := m.GetStorageDeviceChoice().(*VssStorageConfiguration_StorageDeviceList); ok {
		return x.StorageDeviceList
	}
	return nil
}

func (m *VssStorageConfiguration) GetDefaultStorageClass() *schema.Empty {
	if x, ok := m.GetStorageClassChoice().(*VssStorageConfiguration_DefaultStorageClass); ok {
		return x.DefaultStorageClass
	}
	return nil
}

func (m *VssStorageConfiguration) GetStorageClassList() *fleet.FleetStorageClassListType {
	if x, ok := m.GetStorageClassChoice().(*VssStorageConfiguration_StorageClassList); ok {
		return x.StorageClassList
	}
	return nil
}

func (m *VssStorageConfiguration) GetNoStaticRoutes() *schema.Empty {
	if x, ok := m.GetStaticRouteChoice().(*VssStorageConfiguration_NoStaticRoutes); ok {
		return x.NoStaticRoutes
	}
	return nil
}

func (m *VssStorageConfiguration) GetStaticRoutes() *StaticRoutesListType {
	if x, ok := m.GetStaticRouteChoice().(*VssStorageConfiguration_StaticRoutes); ok {
		return x.StaticRoutes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VssStorageConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VssStorageConfiguration_NoStorageInterfaces)(nil),
		(*VssStorageConfiguration_StorageInterfaceList)(nil),
		(*VssStorageConfiguration_NoStorageDevice)(nil),
		(*VssStorageConfiguration_StorageDeviceList)(nil),
		(*VssStorageConfiguration_DefaultStorageClass)(nil),
		(*VssStorageConfiguration_StorageClassList)(nil),
		(*VssStorageConfiguration_NoStaticRoutes)(nil),
		(*VssStorageConfiguration_StaticRoutes)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the App Stack site specification
type GlobalSpecType struct {
	// Generic Server Certified Hardware
	//
	// x-displayName: "Generic Server Certified Hardware"
	// x-example: "isv-8000-series-voltstack-combo"
	// x-required
	// Name for generic server certified hardware to form this App Stack site.
	VolterraCertifiedHw string `protobuf:"bytes,1,opt,name=volterra_certified_hw,json=volterraCertifiedHw,proto3" json:"volterra_certified_hw,omitempty"`
	// Master Nodes
	//
	// x-displayName: "Master Nodes"
	// x-example: "master-0"
	// Names of master nodes
	MasterNodes []string `protobuf:"bytes,2,rep,name=master_nodes,json=masterNodes,proto3" json:"master_nodes,omitempty"`
	// Master Nodes
	//
	// x-displayName: "Master Nodes"
	// x-required
	// Configuration of master nodes
	MasterNodeConfiguration []*views.MasterNode `protobuf:"bytes,53,rep,name=master_node_configuration,json=masterNodeConfiguration,proto3" json:"master_node_configuration,omitempty"`
	// Worker Nodes
	//
	// x-displayName: "Worker Nodes"
	// x-example: "worker-0"
	// Names of worker nodes
	WorkerNodes []string `protobuf:"bytes,3,rep,name=worker_nodes,json=workerNodes,proto3" json:"worker_nodes,omitempty"`
	// Software Version
	//
	// x-displayName: "Software Version"
	// x-example: "value"
	// Desired volterra software version that should be installed on the site
	VolterraSoftwareVersion string `protobuf:"bytes,4,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	// Operating System Version
	//
	// x-displayName: "Operating System Version"
	// x-example: "value"
	// Desired Operating System version that should be installed on the site
	OperatingSystemVersion string `protobuf:"bytes,5,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// Select Bond Configuration
	//
	// x-displayName: "Bond Configuration"
	// x-required
	// Add bond interface devices to the App Stack site
	//
	// Types that are valid to be assigned to BondChoice:
	//	*GlobalSpecType_NoBondDevices
	//	*GlobalSpecType_BondDeviceList
	BondChoice isGlobalSpecType_BondChoice `protobuf_oneof:"bond_choice"`
	// Select to Configure Networking
	//
	// x-displayName: "Configure Networking"
	// x-required
	// Select to use default or custom networking configuration
	//
	// Types that are valid to be assigned to NetworkCfgChoice:
	//	*GlobalSpecType_DefaultNetworkConfig
	//	*GlobalSpecType_CustomNetworkConfig
	NetworkCfgChoice isGlobalSpecType_NetworkCfgChoice `protobuf_oneof:"network_cfg_choice"`
	// Select to Configure Storage
	//
	// x-displayName: "Configure Storage"
	// x-required
	// Select to use default or custom storage configuration
	//
	// Types that are valid to be assigned to StorageCfgChoice:
	//	*GlobalSpecType_DefaultStorageConfig
	//	*GlobalSpecType_CustomStorageConfig
	StorageCfgChoice isGlobalSpecType_StorageCfgChoice `protobuf_oneof:"storage_cfg_choice"`
	// Select GPU Enable/Disable
	//
	// x-displayName: "Enable/Disable GPU"
	// x-required
	// Enable or Disable GPU for this Site
	//
	// Types that are valid to be assigned to GpuChoice:
	//	*GlobalSpecType_DisableGpu
	//	*GlobalSpecType_EnableGpu
	//	*GlobalSpecType_EnableVgpu
	GpuChoice isGlobalSpecType_GpuChoice `protobuf_oneof:"gpu_choice"`
	// Select VMs support Enable/Disable
	//
	// x-displayName: "Enable/Disable VMs support"
	// Enable or Disable VMs support for this Site
	//
	// Types that are valid to be assigned to VmChoice:
	//	*GlobalSpecType_DisableVm
	//	*GlobalSpecType_EnableVm
	VmChoice isGlobalSpecType_VmChoice `protobuf_oneof:"vm_choice"`
	// address
	//
	// x-displayName: "Geographical Address"
	// x-example: "123 Street, city, country, postal code"
	// Site's geographical address that can be used determine its latitude and longitude.
	Address string `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	// coordinates
	//
	// x-displayName: "Coordinates"
	// Coordinates of the site, longitude and latitude
	Coordinates *site.Coordinates `protobuf:"bytes,19,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Site Local K8s API access
	//
	// x-displayName: "Site Local K8s API access"
	// x-required
	// Enable/Disable choice for site local K8s API access
	//
	// Types that are valid to be assigned to K8SClusterChoice:
	//	*GlobalSpecType_NoK8SCluster
	//	*GlobalSpecType_K8SCluster
	K8SClusterChoice isGlobalSpecType_K8SClusterChoice `protobuf_oneof:"k8s_cluster_choice"`
	// Logs Streaming
	//
	// x-displayName: "Logs Streaming"
	// x-required
	// Select Logs receiver for logs streaming
	//
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GlobalSpecType_LogsStreamingDisabled
	//	*GlobalSpecType_LogReceiver
	LogsReceiverChoice isGlobalSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// USB Device Policy
	//
	// x-displayName: "USB Device Policy"
	// x-required
	// Select USB device policy
	//
	// Types that are valid to be assigned to UsbPolicyChoice:
	//	*GlobalSpecType_DenyAllUsb
	//	*GlobalSpecType_AllowAllUsb
	//	*GlobalSpecType_UsbPolicy
	UsbPolicyChoice isGlobalSpecType_UsbPolicyChoice `protobuf_oneof:"usb_policy_choice"`
	// Site Local Control Plane
	//
	// x-displayName: "Site Local Control Plane"
	// Enable/Disable site local control plane
	//
	// Types that are valid to be assigned to LocalControlPlaneChoice:
	//	*GlobalSpecType_NoLocalControlPlane
	//	*GlobalSpecType_LocalControlPlane
	LocalControlPlaneChoice isGlobalSpecType_LocalControlPlaneChoice `protobuf_oneof:"local_control_plane_choice"`
	// F5XC Software
	//
	// x-displayName: "F5XC Software"
	// F5XC Software Details
	Sw *views.VolterraSoftwareType `protobuf:"bytes,34,opt,name=sw,proto3" json:"sw,omitempty"`
	// Operating System
	//
	// x-displayName: "Operating System"
	// Operating System Details
	Os *views.OperatingSystemType `protobuf:"bytes,35,opt,name=os,proto3" json:"os,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// Configure Blocked Services
	//
	// x-displayName: "Blocked Services"
	// x-required
	// Select to use default or custom blocked service configuration
	//
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*GlobalSpecType_DefaultBlockedServices
	//	*GlobalSpecType_BlockedServices
	BlockedServicesChoice isGlobalSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	// launch_ike_in_namespace
	//
	// x-displayName: "Identify if CE needs to run IKE in namespace"
	// Identify that the CE needs to run IKE in namespace
	LaunchIkeInNamespace bool `protobuf:"varint,45,opt,name=launch_ike_in_namespace,json=launchIkeInNamespace,proto3" json:"launch_ike_in_namespace,omitempty"`
	// Offline Survivability Mode
	//
	// x-displayName: "Offline Survivability Mode"
	// Enable/Disable offline survivability mode
	OfflineSurvivabilityMode *views.OfflineSurvivabilityModeType `protobuf:"bytes,47,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	// IPFabric Mesh Group
	//
	// x-displayName: "IPFabric Mesh Group"
	// Defines the rules for ip-fabric network connection between the sites
	IpfabricMeshGroup []*site.ReMeshGroup `protobuf:"bytes,48,rep,name=ipfabric_mesh_group,json=ipfabricMeshGroup,proto3" json:"ipfabric_mesh_group,omitempty"`
	// Configure SR-IOV interfaces
	//
	// x-displayName: "SR-IOV interfaces"
	// x-required
	// Select to use default or custom Single Root I/O Virtualization interfaces Configuration
	//
	// Types that are valid to be assigned to SriovInterfaceChoice:
	//	*GlobalSpecType_DefaultSriovInterface
	//	*GlobalSpecType_SriovInterfaces
	SriovInterfaceChoice isGlobalSpecType_SriovInterfaceChoice `protobuf_oneof:"sriov_interface_choice"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{11}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_BondChoice interface {
	isGlobalSpecType_BondChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_NetworkCfgChoice interface {
	isGlobalSpecType_NetworkCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_StorageCfgChoice interface {
	isGlobalSpecType_StorageCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_GpuChoice interface {
	isGlobalSpecType_GpuChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_VmChoice interface {
	isGlobalSpecType_VmChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_K8SClusterChoice interface {
	isGlobalSpecType_K8SClusterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_LogsReceiverChoice interface {
	isGlobalSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_UsbPolicyChoice interface {
	isGlobalSpecType_UsbPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_LocalControlPlaneChoice interface {
	isGlobalSpecType_LocalControlPlaneChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_BlockedServicesChoice interface {
	isGlobalSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_SriovInterfaceChoice interface {
	isGlobalSpecType_SriovInterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_NoBondDevices struct {
	NoBondDevices *schema.Empty `protobuf:"bytes,7,opt,name=no_bond_devices,json=noBondDevices,proto3,oneof" json:"no_bond_devices,omitempty"`
}
type GlobalSpecType_BondDeviceList struct {
	BondDeviceList *fleet.FleetBondDevicesListType `protobuf:"bytes,8,opt,name=bond_device_list,json=bondDeviceList,proto3,oneof" json:"bond_device_list,omitempty"`
}
type GlobalSpecType_DefaultNetworkConfig struct {
	DefaultNetworkConfig *schema.Empty `protobuf:"bytes,10,opt,name=default_network_config,json=defaultNetworkConfig,proto3,oneof" json:"default_network_config,omitempty"`
}
type GlobalSpecType_CustomNetworkConfig struct {
	CustomNetworkConfig *VssNetworkConfiguration `protobuf:"bytes,11,opt,name=custom_network_config,json=customNetworkConfig,proto3,oneof" json:"custom_network_config,omitempty"`
}
type GlobalSpecType_DefaultStorageConfig struct {
	DefaultStorageConfig *schema.Empty `protobuf:"bytes,13,opt,name=default_storage_config,json=defaultStorageConfig,proto3,oneof" json:"default_storage_config,omitempty"`
}
type GlobalSpecType_CustomStorageConfig struct {
	CustomStorageConfig *VssStorageConfiguration `protobuf:"bytes,14,opt,name=custom_storage_config,json=customStorageConfig,proto3,oneof" json:"custom_storage_config,omitempty"`
}
type GlobalSpecType_DisableGpu struct {
	DisableGpu *schema.Empty `protobuf:"bytes,16,opt,name=disable_gpu,json=disableGpu,proto3,oneof" json:"disable_gpu,omitempty"`
}
type GlobalSpecType_EnableGpu struct {
	EnableGpu *schema.Empty `protobuf:"bytes,17,opt,name=enable_gpu,json=enableGpu,proto3,oneof" json:"enable_gpu,omitempty"`
}
type GlobalSpecType_EnableVgpu struct {
	EnableVgpu *fleet.VGPUConfiguration `protobuf:"bytes,36,opt,name=enable_vgpu,json=enableVgpu,proto3,oneof" json:"enable_vgpu,omitempty"`
}
type GlobalSpecType_DisableVm struct {
	DisableVm *schema.Empty `protobuf:"bytes,38,opt,name=disable_vm,json=disableVm,proto3,oneof" json:"disable_vm,omitempty"`
}
type GlobalSpecType_EnableVm struct {
	EnableVm *fleet.VMConfiguration `protobuf:"bytes,39,opt,name=enable_vm,json=enableVm,proto3,oneof" json:"enable_vm,omitempty"`
}
type GlobalSpecType_NoK8SCluster struct {
	NoK8SCluster *schema.Empty `protobuf:"bytes,21,opt,name=no_k8s_cluster,json=noK8sCluster,proto3,oneof" json:"no_k8s_cluster,omitempty"`
}
type GlobalSpecType_K8SCluster struct {
	K8SCluster *views.ObjectRefType `protobuf:"bytes,22,opt,name=k8s_cluster,json=k8sCluster,proto3,oneof" json:"k8s_cluster,omitempty"`
}
type GlobalSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,24,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type GlobalSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,25,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type GlobalSpecType_DenyAllUsb struct {
	DenyAllUsb *schema.Empty `protobuf:"bytes,27,opt,name=deny_all_usb,json=denyAllUsb,proto3,oneof" json:"deny_all_usb,omitempty"`
}
type GlobalSpecType_AllowAllUsb struct {
	AllowAllUsb *schema.Empty `protobuf:"bytes,28,opt,name=allow_all_usb,json=allowAllUsb,proto3,oneof" json:"allow_all_usb,omitempty"`
}
type GlobalSpecType_UsbPolicy struct {
	UsbPolicy *views.ObjectRefType `protobuf:"bytes,29,opt,name=usb_policy,json=usbPolicy,proto3,oneof" json:"usb_policy,omitempty"`
}
type GlobalSpecType_NoLocalControlPlane struct {
	NoLocalControlPlane *schema.Empty `protobuf:"bytes,32,opt,name=no_local_control_plane,json=noLocalControlPlane,proto3,oneof" json:"no_local_control_plane,omitempty"`
}
type GlobalSpecType_LocalControlPlane struct {
	LocalControlPlane *fleet.LocalControlPlaneType `protobuf:"bytes,33,opt,name=local_control_plane,json=localControlPlane,proto3,oneof" json:"local_control_plane,omitempty"`
}
type GlobalSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,41,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type GlobalSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,44,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}
type GlobalSpecType_DefaultSriovInterface struct {
	DefaultSriovInterface *schema.Empty `protobuf:"bytes,55,opt,name=default_sriov_interface,json=defaultSriovInterface,proto3,oneof" json:"default_sriov_interface,omitempty"`
}
type GlobalSpecType_SriovInterfaces struct {
	SriovInterfaces *fleet.SriovInterfacesListType `protobuf:"bytes,56,opt,name=sriov_interfaces,json=sriovInterfaces,proto3,oneof" json:"sriov_interfaces,omitempty"`
}

func (*GlobalSpecType_NoBondDevices) isGlobalSpecType_BondChoice()                     {}
func (*GlobalSpecType_BondDeviceList) isGlobalSpecType_BondChoice()                    {}
func (*GlobalSpecType_DefaultNetworkConfig) isGlobalSpecType_NetworkCfgChoice()        {}
func (*GlobalSpecType_CustomNetworkConfig) isGlobalSpecType_NetworkCfgChoice()         {}
func (*GlobalSpecType_DefaultStorageConfig) isGlobalSpecType_StorageCfgChoice()        {}
func (*GlobalSpecType_CustomStorageConfig) isGlobalSpecType_StorageCfgChoice()         {}
func (*GlobalSpecType_DisableGpu) isGlobalSpecType_GpuChoice()                         {}
func (*GlobalSpecType_EnableGpu) isGlobalSpecType_GpuChoice()                          {}
func (*GlobalSpecType_EnableVgpu) isGlobalSpecType_GpuChoice()                         {}
func (*GlobalSpecType_DisableVm) isGlobalSpecType_VmChoice()                           {}
func (*GlobalSpecType_EnableVm) isGlobalSpecType_VmChoice()                            {}
func (*GlobalSpecType_NoK8SCluster) isGlobalSpecType_K8SClusterChoice()                {}
func (*GlobalSpecType_K8SCluster) isGlobalSpecType_K8SClusterChoice()                  {}
func (*GlobalSpecType_LogsStreamingDisabled) isGlobalSpecType_LogsReceiverChoice()     {}
func (*GlobalSpecType_LogReceiver) isGlobalSpecType_LogsReceiverChoice()               {}
func (*GlobalSpecType_DenyAllUsb) isGlobalSpecType_UsbPolicyChoice()                   {}
func (*GlobalSpecType_AllowAllUsb) isGlobalSpecType_UsbPolicyChoice()                  {}
func (*GlobalSpecType_UsbPolicy) isGlobalSpecType_UsbPolicyChoice()                    {}
func (*GlobalSpecType_NoLocalControlPlane) isGlobalSpecType_LocalControlPlaneChoice()  {}
func (*GlobalSpecType_LocalControlPlane) isGlobalSpecType_LocalControlPlaneChoice()    {}
func (*GlobalSpecType_DefaultBlockedServices) isGlobalSpecType_BlockedServicesChoice() {}
func (*GlobalSpecType_BlockedServices) isGlobalSpecType_BlockedServicesChoice()        {}
func (*GlobalSpecType_DefaultSriovInterface) isGlobalSpecType_SriovInterfaceChoice()   {}
func (*GlobalSpecType_SriovInterfaces) isGlobalSpecType_SriovInterfaceChoice()         {}

func (m *GlobalSpecType) GetBondChoice() isGlobalSpecType_BondChoice {
	if m != nil {
		return m.BondChoice
	}
	return nil
}
func (m *GlobalSpecType) GetNetworkCfgChoice() isGlobalSpecType_NetworkCfgChoice {
	if m != nil {
		return m.NetworkCfgChoice
	}
	return nil
}
func (m *GlobalSpecType) GetStorageCfgChoice() isGlobalSpecType_StorageCfgChoice {
	if m != nil {
		return m.StorageCfgChoice
	}
	return nil
}
func (m *GlobalSpecType) GetGpuChoice() isGlobalSpecType_GpuChoice {
	if m != nil {
		return m.GpuChoice
	}
	return nil
}
func (m *GlobalSpecType) GetVmChoice() isGlobalSpecType_VmChoice {
	if m != nil {
		return m.VmChoice
	}
	return nil
}
func (m *GlobalSpecType) GetK8SClusterChoice() isGlobalSpecType_K8SClusterChoice {
	if m != nil {
		return m.K8SClusterChoice
	}
	return nil
}
func (m *GlobalSpecType) GetLogsReceiverChoice() isGlobalSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GlobalSpecType) GetUsbPolicyChoice() isGlobalSpecType_UsbPolicyChoice {
	if m != nil {
		return m.UsbPolicyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetLocalControlPlaneChoice() isGlobalSpecType_LocalControlPlaneChoice {
	if m != nil {
		return m.LocalControlPlaneChoice
	}
	return nil
}
func (m *GlobalSpecType) GetBlockedServicesChoice() isGlobalSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}
func (m *GlobalSpecType) GetSriovInterfaceChoice() isGlobalSpecType_SriovInterfaceChoice {
	if m != nil {
		return m.SriovInterfaceChoice
	}
	return nil
}

func (m *GlobalSpecType) GetVolterraCertifiedHw() string {
	if m != nil {
		return m.VolterraCertifiedHw
	}
	return ""
}

func (m *GlobalSpecType) GetMasterNodes() []string {
	if m != nil {
		return m.MasterNodes
	}
	return nil
}

func (m *GlobalSpecType) GetMasterNodeConfiguration() []*views.MasterNode {
	if m != nil {
		return m.MasterNodeConfiguration
	}
	return nil
}

func (m *GlobalSpecType) GetWorkerNodes() []string {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *GlobalSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GlobalSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GlobalSpecType) GetNoBondDevices() *schema.Empty {
	if x, ok := m.GetBondChoice().(*GlobalSpecType_NoBondDevices); ok {
		return x.NoBondDevices
	}
	return nil
}

func (m *GlobalSpecType) GetBondDeviceList() *fleet.FleetBondDevicesListType {
	if x, ok := m.GetBondChoice().(*GlobalSpecType_BondDeviceList); ok {
		return x.BondDeviceList
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultNetworkConfig() *schema.Empty {
	if x, ok := m.GetNetworkCfgChoice().(*GlobalSpecType_DefaultNetworkConfig); ok {
		return x.DefaultNetworkConfig
	}
	return nil
}

func (m *GlobalSpecType) GetCustomNetworkConfig() *VssNetworkConfiguration {
	if x, ok := m.GetNetworkCfgChoice().(*GlobalSpecType_CustomNetworkConfig); ok {
		return x.CustomNetworkConfig
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultStorageConfig() *schema.Empty {
	if x, ok := m.GetStorageCfgChoice().(*GlobalSpecType_DefaultStorageConfig); ok {
		return x.DefaultStorageConfig
	}
	return nil
}

func (m *GlobalSpecType) GetCustomStorageConfig() *VssStorageConfiguration {
	if x, ok := m.GetStorageCfgChoice().(*GlobalSpecType_CustomStorageConfig); ok {
		return x.CustomStorageConfig
	}
	return nil
}

func (m *GlobalSpecType) GetDisableGpu() *schema.Empty {
	if x, ok := m.GetGpuChoice().(*GlobalSpecType_DisableGpu); ok {
		return x.DisableGpu
	}
	return nil
}

func (m *GlobalSpecType) GetEnableGpu() *schema.Empty {
	if x, ok := m.GetGpuChoice().(*GlobalSpecType_EnableGpu); ok {
		return x.EnableGpu
	}
	return nil
}

func (m *GlobalSpecType) GetEnableVgpu() *fleet.VGPUConfiguration {
	if x, ok := m.GetGpuChoice().(*GlobalSpecType_EnableVgpu); ok {
		return x.EnableVgpu
	}
	return nil
}

func (m *GlobalSpecType) GetDisableVm() *schema.Empty {
	if x, ok := m.GetVmChoice().(*GlobalSpecType_DisableVm); ok {
		return x.DisableVm
	}
	return nil
}

func (m *GlobalSpecType) GetEnableVm() *fleet.VMConfiguration {
	if x, ok := m.GetVmChoice().(*GlobalSpecType_EnableVm); ok {
		return x.EnableVm
	}
	return nil
}

func (m *GlobalSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GlobalSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GlobalSpecType) GetNoK8SCluster() *schema.Empty {
	if x, ok := m.GetK8SClusterChoice().(*GlobalSpecType_NoK8SCluster); ok {
		return x.NoK8SCluster
	}
	return nil
}

func (m *GlobalSpecType) GetK8SCluster() *views.ObjectRefType {
	if x, ok := m.GetK8SClusterChoice().(*GlobalSpecType_K8SCluster); ok {
		return x.K8SCluster
	}
	return nil
}

func (m *GlobalSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GlobalSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GlobalSpecType) GetDenyAllUsb() *schema.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*GlobalSpecType_DenyAllUsb); ok {
		return x.DenyAllUsb
	}
	return nil
}

func (m *GlobalSpecType) GetAllowAllUsb() *schema.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*GlobalSpecType_AllowAllUsb); ok {
		return x.AllowAllUsb
	}
	return nil
}

func (m *GlobalSpecType) GetUsbPolicy() *views.ObjectRefType {
	if x, ok := m.GetUsbPolicyChoice().(*GlobalSpecType_UsbPolicy); ok {
		return x.UsbPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetNoLocalControlPlane() *schema.Empty {
	if x, ok := m.GetLocalControlPlaneChoice().(*GlobalSpecType_NoLocalControlPlane); ok {
		return x.NoLocalControlPlane
	}
	return nil
}

func (m *GlobalSpecType) GetLocalControlPlane() *fleet.LocalControlPlaneType {
	if x, ok := m.GetLocalControlPlaneChoice().(*GlobalSpecType_LocalControlPlane); ok {
		return x.LocalControlPlane
	}
	return nil
}

func (m *GlobalSpecType) GetSw() *views.VolterraSoftwareType {
	if m != nil {
		return m.Sw
	}
	return nil
}

func (m *GlobalSpecType) GetOs() *views.OperatingSystemType {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *GlobalSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *GlobalSpecType) GetLaunchIkeInNamespace() bool {
	if m != nil {
		return m.LaunchIkeInNamespace
	}
	return false
}

func (m *GlobalSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *GlobalSpecType) GetIpfabricMeshGroup() []*site.ReMeshGroup {
	if m != nil {
		return m.IpfabricMeshGroup
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultSriovInterface() *schema.Empty {
	if x, ok := m.GetSriovInterfaceChoice().(*GlobalSpecType_DefaultSriovInterface); ok {
		return x.DefaultSriovInterface
	}
	return nil
}

func (m *GlobalSpecType) GetSriovInterfaces() *fleet.SriovInterfacesListType {
	if x, ok := m.GetSriovInterfaceChoice().(*GlobalSpecType_SriovInterfaces); ok {
		return x.SriovInterfaces
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_NoBondDevices)(nil),
		(*GlobalSpecType_BondDeviceList)(nil),
		(*GlobalSpecType_DefaultNetworkConfig)(nil),
		(*GlobalSpecType_CustomNetworkConfig)(nil),
		(*GlobalSpecType_DefaultStorageConfig)(nil),
		(*GlobalSpecType_CustomStorageConfig)(nil),
		(*GlobalSpecType_DisableGpu)(nil),
		(*GlobalSpecType_EnableGpu)(nil),
		(*GlobalSpecType_EnableVgpu)(nil),
		(*GlobalSpecType_DisableVm)(nil),
		(*GlobalSpecType_EnableVm)(nil),
		(*GlobalSpecType_NoK8SCluster)(nil),
		(*GlobalSpecType_K8SCluster)(nil),
		(*GlobalSpecType_LogsStreamingDisabled)(nil),
		(*GlobalSpecType_LogReceiver)(nil),
		(*GlobalSpecType_DenyAllUsb)(nil),
		(*GlobalSpecType_AllowAllUsb)(nil),
		(*GlobalSpecType_UsbPolicy)(nil),
		(*GlobalSpecType_NoLocalControlPlane)(nil),
		(*GlobalSpecType_LocalControlPlane)(nil),
		(*GlobalSpecType_DefaultBlockedServices)(nil),
		(*GlobalSpecType_BlockedServices)(nil),
		(*GlobalSpecType_DefaultSriovInterface)(nil),
		(*GlobalSpecType_SriovInterfaces)(nil),
	}
}

// CreateSpecType
//
// x-displayName: "Create App Stack site"
// Shape of the App Stack site specification
type CreateSpecType struct {
	VolterraCertifiedHw     string              `protobuf:"bytes,1,opt,name=volterra_certified_hw,json=volterraCertifiedHw,proto3" json:"volterra_certified_hw,omitempty"`
	MasterNodes             []string            `protobuf:"bytes,2,rep,name=master_nodes,json=masterNodes,proto3" json:"master_nodes,omitempty"`
	MasterNodeConfiguration []*views.MasterNode `protobuf:"bytes,53,rep,name=master_node_configuration,json=masterNodeConfiguration,proto3" json:"master_node_configuration,omitempty"`
	WorkerNodes             []string            `protobuf:"bytes,3,rep,name=worker_nodes,json=workerNodes,proto3" json:"worker_nodes,omitempty"`
	// Types that are valid to be assigned to BondChoice:
	//	*CreateSpecType_NoBondDevices
	//	*CreateSpecType_BondDeviceList
	BondChoice isCreateSpecType_BondChoice `protobuf_oneof:"bond_choice"`
	// Types that are valid to be assigned to NetworkCfgChoice:
	//	*CreateSpecType_DefaultNetworkConfig
	//	*CreateSpecType_CustomNetworkConfig
	NetworkCfgChoice isCreateSpecType_NetworkCfgChoice `protobuf_oneof:"network_cfg_choice"`
	// Types that are valid to be assigned to StorageCfgChoice:
	//	*CreateSpecType_DefaultStorageConfig
	//	*CreateSpecType_CustomStorageConfig
	StorageCfgChoice isCreateSpecType_StorageCfgChoice `protobuf_oneof:"storage_cfg_choice"`
	// Types that are valid to be assigned to GpuChoice:
	//	*CreateSpecType_DisableGpu
	//	*CreateSpecType_EnableGpu
	//	*CreateSpecType_EnableVgpu
	GpuChoice   isCreateSpecType_GpuChoice `protobuf_oneof:"gpu_choice"`
	Address     string                     `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates *site.Coordinates          `protobuf:"bytes,19,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to K8SClusterChoice:
	//	*CreateSpecType_NoK8SCluster
	//	*CreateSpecType_K8SCluster
	K8SClusterChoice isCreateSpecType_K8SClusterChoice `protobuf_oneof:"k8s_cluster_choice"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*CreateSpecType_LogsStreamingDisabled
	//	*CreateSpecType_LogReceiver
	LogsReceiverChoice isCreateSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to UsbPolicyChoice:
	//	*CreateSpecType_DenyAllUsb
	//	*CreateSpecType_AllowAllUsb
	//	*CreateSpecType_UsbPolicy
	UsbPolicyChoice isCreateSpecType_UsbPolicyChoice `protobuf_oneof:"usb_policy_choice"`
	// Types that are valid to be assigned to LocalControlPlaneChoice:
	//	*CreateSpecType_NoLocalControlPlane
	//	*CreateSpecType_LocalControlPlane
	LocalControlPlaneChoice isCreateSpecType_LocalControlPlaneChoice `protobuf_oneof:"local_control_plane_choice"`
	// Types that are valid to be assigned to VmChoice:
	//	*CreateSpecType_DisableVm
	//	*CreateSpecType_EnableVm
	VmChoice isCreateSpecType_VmChoice `protobuf_oneof:"vm_choice"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*CreateSpecType_DefaultBlockedServices
	//	*CreateSpecType_BlockedServices
	BlockedServicesChoice isCreateSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	// F5XC Software
	//
	// x-displayName: "F5XC Software"
	// F5XC Software Details
	Sw *views.VolterraSoftwareType `protobuf:"bytes,34,opt,name=sw,proto3" json:"sw,omitempty"`
	// Operating System
	//
	// x-displayName: "Operating System"
	// Operating System Details
	Os                       *views.OperatingSystemType          `protobuf:"bytes,35,opt,name=os,proto3" json:"os,omitempty"`
	OfflineSurvivabilityMode *views.OfflineSurvivabilityModeType `protobuf:"bytes,47,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	// Types that are valid to be assigned to SriovInterfaceChoice:
	//	*CreateSpecType_DefaultSriovInterface
	//	*CreateSpecType_SriovInterfaces
	SriovInterfaceChoice isCreateSpecType_SriovInterfaceChoice `protobuf_oneof:"sriov_interface_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{12}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_BondChoice interface {
	isCreateSpecType_BondChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_NetworkCfgChoice interface {
	isCreateSpecType_NetworkCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_StorageCfgChoice interface {
	isCreateSpecType_StorageCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_GpuChoice interface {
	isCreateSpecType_GpuChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_K8SClusterChoice interface {
	isCreateSpecType_K8SClusterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_LogsReceiverChoice interface {
	isCreateSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_UsbPolicyChoice interface {
	isCreateSpecType_UsbPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_LocalControlPlaneChoice interface {
	isCreateSpecType_LocalControlPlaneChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_VmChoice interface {
	isCreateSpecType_VmChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_BlockedServicesChoice interface {
	isCreateSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_SriovInterfaceChoice interface {
	isCreateSpecType_SriovInterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_NoBondDevices struct {
	NoBondDevices *schema.Empty `protobuf:"bytes,7,opt,name=no_bond_devices,json=noBondDevices,proto3,oneof" json:"no_bond_devices,omitempty"`
}
type CreateSpecType_BondDeviceList struct {
	BondDeviceList *fleet.FleetBondDevicesListType `protobuf:"bytes,8,opt,name=bond_device_list,json=bondDeviceList,proto3,oneof" json:"bond_device_list,omitempty"`
}
type CreateSpecType_DefaultNetworkConfig struct {
	DefaultNetworkConfig *schema.Empty `protobuf:"bytes,10,opt,name=default_network_config,json=defaultNetworkConfig,proto3,oneof" json:"default_network_config,omitempty"`
}
type CreateSpecType_CustomNetworkConfig struct {
	CustomNetworkConfig *VssNetworkConfiguration `protobuf:"bytes,11,opt,name=custom_network_config,json=customNetworkConfig,proto3,oneof" json:"custom_network_config,omitempty"`
}
type CreateSpecType_DefaultStorageConfig struct {
	DefaultStorageConfig *schema.Empty `protobuf:"bytes,13,opt,name=default_storage_config,json=defaultStorageConfig,proto3,oneof" json:"default_storage_config,omitempty"`
}
type CreateSpecType_CustomStorageConfig struct {
	CustomStorageConfig *VssStorageConfiguration `protobuf:"bytes,14,opt,name=custom_storage_config,json=customStorageConfig,proto3,oneof" json:"custom_storage_config,omitempty"`
}
type CreateSpecType_DisableGpu struct {
	DisableGpu *schema.Empty `protobuf:"bytes,16,opt,name=disable_gpu,json=disableGpu,proto3,oneof" json:"disable_gpu,omitempty"`
}
type CreateSpecType_EnableGpu struct {
	EnableGpu *schema.Empty `protobuf:"bytes,17,opt,name=enable_gpu,json=enableGpu,proto3,oneof" json:"enable_gpu,omitempty"`
}
type CreateSpecType_EnableVgpu struct {
	EnableVgpu *fleet.VGPUConfiguration `protobuf:"bytes,36,opt,name=enable_vgpu,json=enableVgpu,proto3,oneof" json:"enable_vgpu,omitempty"`
}
type CreateSpecType_NoK8SCluster struct {
	NoK8SCluster *schema.Empty `protobuf:"bytes,21,opt,name=no_k8s_cluster,json=noK8sCluster,proto3,oneof" json:"no_k8s_cluster,omitempty"`
}
type CreateSpecType_K8SCluster struct {
	K8SCluster *views.ObjectRefType `protobuf:"bytes,22,opt,name=k8s_cluster,json=k8sCluster,proto3,oneof" json:"k8s_cluster,omitempty"`
}
type CreateSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,24,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type CreateSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,25,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type CreateSpecType_DenyAllUsb struct {
	DenyAllUsb *schema.Empty `protobuf:"bytes,27,opt,name=deny_all_usb,json=denyAllUsb,proto3,oneof" json:"deny_all_usb,omitempty"`
}
type CreateSpecType_AllowAllUsb struct {
	AllowAllUsb *schema.Empty `protobuf:"bytes,28,opt,name=allow_all_usb,json=allowAllUsb,proto3,oneof" json:"allow_all_usb,omitempty"`
}
type CreateSpecType_UsbPolicy struct {
	UsbPolicy *views.ObjectRefType `protobuf:"bytes,29,opt,name=usb_policy,json=usbPolicy,proto3,oneof" json:"usb_policy,omitempty"`
}
type CreateSpecType_NoLocalControlPlane struct {
	NoLocalControlPlane *schema.Empty `protobuf:"bytes,32,opt,name=no_local_control_plane,json=noLocalControlPlane,proto3,oneof" json:"no_local_control_plane,omitempty"`
}
type CreateSpecType_LocalControlPlane struct {
	LocalControlPlane *fleet.LocalControlPlaneType `protobuf:"bytes,33,opt,name=local_control_plane,json=localControlPlane,proto3,oneof" json:"local_control_plane,omitempty"`
}
type CreateSpecType_DisableVm struct {
	DisableVm *schema.Empty `protobuf:"bytes,38,opt,name=disable_vm,json=disableVm,proto3,oneof" json:"disable_vm,omitempty"`
}
type CreateSpecType_EnableVm struct {
	EnableVm *fleet.VMConfiguration `protobuf:"bytes,39,opt,name=enable_vm,json=enableVm,proto3,oneof" json:"enable_vm,omitempty"`
}
type CreateSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,41,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type CreateSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,44,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}
type CreateSpecType_DefaultSriovInterface struct {
	DefaultSriovInterface *schema.Empty `protobuf:"bytes,55,opt,name=default_sriov_interface,json=defaultSriovInterface,proto3,oneof" json:"default_sriov_interface,omitempty"`
}
type CreateSpecType_SriovInterfaces struct {
	SriovInterfaces *fleet.SriovInterfacesListType `protobuf:"bytes,56,opt,name=sriov_interfaces,json=sriovInterfaces,proto3,oneof" json:"sriov_interfaces,omitempty"`
}

func (*CreateSpecType_NoBondDevices) isCreateSpecType_BondChoice()                     {}
func (*CreateSpecType_BondDeviceList) isCreateSpecType_BondChoice()                    {}
func (*CreateSpecType_DefaultNetworkConfig) isCreateSpecType_NetworkCfgChoice()        {}
func (*CreateSpecType_CustomNetworkConfig) isCreateSpecType_NetworkCfgChoice()         {}
func (*CreateSpecType_DefaultStorageConfig) isCreateSpecType_StorageCfgChoice()        {}
func (*CreateSpecType_CustomStorageConfig) isCreateSpecType_StorageCfgChoice()         {}
func (*CreateSpecType_DisableGpu) isCreateSpecType_GpuChoice()                         {}
func (*CreateSpecType_EnableGpu) isCreateSpecType_GpuChoice()                          {}
func (*CreateSpecType_EnableVgpu) isCreateSpecType_GpuChoice()                         {}
func (*CreateSpecType_NoK8SCluster) isCreateSpecType_K8SClusterChoice()                {}
func (*CreateSpecType_K8SCluster) isCreateSpecType_K8SClusterChoice()                  {}
func (*CreateSpecType_LogsStreamingDisabled) isCreateSpecType_LogsReceiverChoice()     {}
func (*CreateSpecType_LogReceiver) isCreateSpecType_LogsReceiverChoice()               {}
func (*CreateSpecType_DenyAllUsb) isCreateSpecType_UsbPolicyChoice()                   {}
func (*CreateSpecType_AllowAllUsb) isCreateSpecType_UsbPolicyChoice()                  {}
func (*CreateSpecType_UsbPolicy) isCreateSpecType_UsbPolicyChoice()                    {}
func (*CreateSpecType_NoLocalControlPlane) isCreateSpecType_LocalControlPlaneChoice()  {}
func (*CreateSpecType_LocalControlPlane) isCreateSpecType_LocalControlPlaneChoice()    {}
func (*CreateSpecType_DisableVm) isCreateSpecType_VmChoice()                           {}
func (*CreateSpecType_EnableVm) isCreateSpecType_VmChoice()                            {}
func (*CreateSpecType_DefaultBlockedServices) isCreateSpecType_BlockedServicesChoice() {}
func (*CreateSpecType_BlockedServices) isCreateSpecType_BlockedServicesChoice()        {}
func (*CreateSpecType_DefaultSriovInterface) isCreateSpecType_SriovInterfaceChoice()   {}
func (*CreateSpecType_SriovInterfaces) isCreateSpecType_SriovInterfaceChoice()         {}

func (m *CreateSpecType) GetBondChoice() isCreateSpecType_BondChoice {
	if m != nil {
		return m.BondChoice
	}
	return nil
}
func (m *CreateSpecType) GetNetworkCfgChoice() isCreateSpecType_NetworkCfgChoice {
	if m != nil {
		return m.NetworkCfgChoice
	}
	return nil
}
func (m *CreateSpecType) GetStorageCfgChoice() isCreateSpecType_StorageCfgChoice {
	if m != nil {
		return m.StorageCfgChoice
	}
	return nil
}
func (m *CreateSpecType) GetGpuChoice() isCreateSpecType_GpuChoice {
	if m != nil {
		return m.GpuChoice
	}
	return nil
}
func (m *CreateSpecType) GetK8SClusterChoice() isCreateSpecType_K8SClusterChoice {
	if m != nil {
		return m.K8SClusterChoice
	}
	return nil
}
func (m *CreateSpecType) GetLogsReceiverChoice() isCreateSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *CreateSpecType) GetUsbPolicyChoice() isCreateSpecType_UsbPolicyChoice {
	if m != nil {
		return m.UsbPolicyChoice
	}
	return nil
}
func (m *CreateSpecType) GetLocalControlPlaneChoice() isCreateSpecType_LocalControlPlaneChoice {
	if m != nil {
		return m.LocalControlPlaneChoice
	}
	return nil
}
func (m *CreateSpecType) GetVmChoice() isCreateSpecType_VmChoice {
	if m != nil {
		return m.VmChoice
	}
	return nil
}
func (m *CreateSpecType) GetBlockedServicesChoice() isCreateSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}
func (m *CreateSpecType) GetSriovInterfaceChoice() isCreateSpecType_SriovInterfaceChoice {
	if m != nil {
		return m.SriovInterfaceChoice
	}
	return nil
}

func (m *CreateSpecType) GetVolterraCertifiedHw() string {
	if m != nil {
		return m.VolterraCertifiedHw
	}
	return ""
}

func (m *CreateSpecType) GetMasterNodes() []string {
	if m != nil {
		return m.MasterNodes
	}
	return nil
}

func (m *CreateSpecType) GetMasterNodeConfiguration() []*views.MasterNode {
	if m != nil {
		return m.MasterNodeConfiguration
	}
	return nil
}

func (m *CreateSpecType) GetWorkerNodes() []string {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *CreateSpecType) GetNoBondDevices() *schema.Empty {
	if x, ok := m.GetBondChoice().(*CreateSpecType_NoBondDevices); ok {
		return x.NoBondDevices
	}
	return nil
}

func (m *CreateSpecType) GetBondDeviceList() *fleet.FleetBondDevicesListType {
	if x, ok := m.GetBondChoice().(*CreateSpecType_BondDeviceList); ok {
		return x.BondDeviceList
	}
	return nil
}

func (m *CreateSpecType) GetDefaultNetworkConfig() *schema.Empty {
	if x, ok := m.GetNetworkCfgChoice().(*CreateSpecType_DefaultNetworkConfig); ok {
		return x.DefaultNetworkConfig
	}
	return nil
}

func (m *CreateSpecType) GetCustomNetworkConfig() *VssNetworkConfiguration {
	if x, ok := m.GetNetworkCfgChoice().(*CreateSpecType_CustomNetworkConfig); ok {
		return x.CustomNetworkConfig
	}
	return nil
}

func (m *CreateSpecType) GetDefaultStorageConfig() *schema.Empty {
	if x, ok := m.GetStorageCfgChoice().(*CreateSpecType_DefaultStorageConfig); ok {
		return x.DefaultStorageConfig
	}
	return nil
}

func (m *CreateSpecType) GetCustomStorageConfig() *VssStorageConfiguration {
	if x, ok := m.GetStorageCfgChoice().(*CreateSpecType_CustomStorageConfig); ok {
		return x.CustomStorageConfig
	}
	return nil
}

func (m *CreateSpecType) GetDisableGpu() *schema.Empty {
	if x, ok := m.GetGpuChoice().(*CreateSpecType_DisableGpu); ok {
		return x.DisableGpu
	}
	return nil
}

func (m *CreateSpecType) GetEnableGpu() *schema.Empty {
	if x, ok := m.GetGpuChoice().(*CreateSpecType_EnableGpu); ok {
		return x.EnableGpu
	}
	return nil
}

func (m *CreateSpecType) GetEnableVgpu() *fleet.VGPUConfiguration {
	if x, ok := m.GetGpuChoice().(*CreateSpecType_EnableVgpu); ok {
		return x.EnableVgpu
	}
	return nil
}

func (m *CreateSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *CreateSpecType) GetNoK8SCluster() *schema.Empty {
	if x, ok := m.GetK8SClusterChoice().(*CreateSpecType_NoK8SCluster); ok {
		return x.NoK8SCluster
	}
	return nil
}

func (m *CreateSpecType) GetK8SCluster() *views.ObjectRefType {
	if x, ok := m.GetK8SClusterChoice().(*CreateSpecType_K8SCluster); ok {
		return x.K8SCluster
	}
	return nil
}

func (m *CreateSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *CreateSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *CreateSpecType) GetDenyAllUsb() *schema.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*CreateSpecType_DenyAllUsb); ok {
		return x.DenyAllUsb
	}
	return nil
}

func (m *CreateSpecType) GetAllowAllUsb() *schema.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*CreateSpecType_AllowAllUsb); ok {
		return x.AllowAllUsb
	}
	return nil
}

func (m *CreateSpecType) GetUsbPolicy() *views.ObjectRefType {
	if x, ok := m.GetUsbPolicyChoice().(*CreateSpecType_UsbPolicy); ok {
		return x.UsbPolicy
	}
	return nil
}

func (m *CreateSpecType) GetNoLocalControlPlane() *schema.Empty {
	if x, ok := m.GetLocalControlPlaneChoice().(*CreateSpecType_NoLocalControlPlane); ok {
		return x.NoLocalControlPlane
	}
	return nil
}

func (m *CreateSpecType) GetLocalControlPlane() *fleet.LocalControlPlaneType {
	if x, ok := m.GetLocalControlPlaneChoice().(*CreateSpecType_LocalControlPlane); ok {
		return x.LocalControlPlane
	}
	return nil
}

func (m *CreateSpecType) GetDisableVm() *schema.Empty {
	if x, ok := m.GetVmChoice().(*CreateSpecType_DisableVm); ok {
		return x.DisableVm
	}
	return nil
}

func (m *CreateSpecType) GetEnableVm() *fleet.VMConfiguration {
	if x, ok := m.GetVmChoice().(*CreateSpecType_EnableVm); ok {
		return x.EnableVm
	}
	return nil
}

func (m *CreateSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *CreateSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *CreateSpecType) GetSw() *views.VolterraSoftwareType {
	if m != nil {
		return m.Sw
	}
	return nil
}

func (m *CreateSpecType) GetOs() *views.OperatingSystemType {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *CreateSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *CreateSpecType) GetDefaultSriovInterface() *schema.Empty {
	if x, ok := m.GetSriovInterfaceChoice().(*CreateSpecType_DefaultSriovInterface); ok {
		return x.DefaultSriovInterface
	}
	return nil
}

func (m *CreateSpecType) GetSriovInterfaces() *fleet.SriovInterfacesListType {
	if x, ok := m.GetSriovInterfaceChoice().(*CreateSpecType_SriovInterfaces); ok {
		return x.SriovInterfaces
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_NoBondDevices)(nil),
		(*CreateSpecType_BondDeviceList)(nil),
		(*CreateSpecType_DefaultNetworkConfig)(nil),
		(*CreateSpecType_CustomNetworkConfig)(nil),
		(*CreateSpecType_DefaultStorageConfig)(nil),
		(*CreateSpecType_CustomStorageConfig)(nil),
		(*CreateSpecType_DisableGpu)(nil),
		(*CreateSpecType_EnableGpu)(nil),
		(*CreateSpecType_EnableVgpu)(nil),
		(*CreateSpecType_NoK8SCluster)(nil),
		(*CreateSpecType_K8SCluster)(nil),
		(*CreateSpecType_LogsStreamingDisabled)(nil),
		(*CreateSpecType_LogReceiver)(nil),
		(*CreateSpecType_DenyAllUsb)(nil),
		(*CreateSpecType_AllowAllUsb)(nil),
		(*CreateSpecType_UsbPolicy)(nil),
		(*CreateSpecType_NoLocalControlPlane)(nil),
		(*CreateSpecType_LocalControlPlane)(nil),
		(*CreateSpecType_DisableVm)(nil),
		(*CreateSpecType_EnableVm)(nil),
		(*CreateSpecType_DefaultBlockedServices)(nil),
		(*CreateSpecType_BlockedServices)(nil),
		(*CreateSpecType_DefaultSriovInterface)(nil),
		(*CreateSpecType_SriovInterfaces)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace App Stack site"
// Shape of the App Stack site replace specification
type ReplaceSpecType struct {
	VolterraCertifiedHw     string              `protobuf:"bytes,1,opt,name=volterra_certified_hw,json=volterraCertifiedHw,proto3" json:"volterra_certified_hw,omitempty"`
	MasterNodes             []string            `protobuf:"bytes,2,rep,name=master_nodes,json=masterNodes,proto3" json:"master_nodes,omitempty"`
	MasterNodeConfiguration []*views.MasterNode `protobuf:"bytes,53,rep,name=master_node_configuration,json=masterNodeConfiguration,proto3" json:"master_node_configuration,omitempty"`
	WorkerNodes             []string            `protobuf:"bytes,3,rep,name=worker_nodes,json=workerNodes,proto3" json:"worker_nodes,omitempty"`
	// Types that are valid to be assigned to BondChoice:
	//	*ReplaceSpecType_NoBondDevices
	//	*ReplaceSpecType_BondDeviceList
	BondChoice isReplaceSpecType_BondChoice `protobuf_oneof:"bond_choice"`
	// Types that are valid to be assigned to NetworkCfgChoice:
	//	*ReplaceSpecType_DefaultNetworkConfig
	//	*ReplaceSpecType_CustomNetworkConfig
	NetworkCfgChoice isReplaceSpecType_NetworkCfgChoice `protobuf_oneof:"network_cfg_choice"`
	// Types that are valid to be assigned to StorageCfgChoice:
	//	*ReplaceSpecType_DefaultStorageConfig
	//	*ReplaceSpecType_CustomStorageConfig
	StorageCfgChoice isReplaceSpecType_StorageCfgChoice `protobuf_oneof:"storage_cfg_choice"`
	// Types that are valid to be assigned to GpuChoice:
	//	*ReplaceSpecType_DisableGpu
	//	*ReplaceSpecType_EnableGpu
	//	*ReplaceSpecType_EnableVgpu
	GpuChoice   isReplaceSpecType_GpuChoice `protobuf_oneof:"gpu_choice"`
	Address     string                      `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates *site.Coordinates           `protobuf:"bytes,19,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to K8SClusterChoice:
	//	*ReplaceSpecType_NoK8SCluster
	//	*ReplaceSpecType_K8SCluster
	K8SClusterChoice isReplaceSpecType_K8SClusterChoice `protobuf_oneof:"k8s_cluster_choice"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*ReplaceSpecType_LogsStreamingDisabled
	//	*ReplaceSpecType_LogReceiver
	LogsReceiverChoice isReplaceSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to UsbPolicyChoice:
	//	*ReplaceSpecType_DenyAllUsb
	//	*ReplaceSpecType_AllowAllUsb
	//	*ReplaceSpecType_UsbPolicy
	UsbPolicyChoice isReplaceSpecType_UsbPolicyChoice `protobuf_oneof:"usb_policy_choice"`
	// Types that are valid to be assigned to LocalControlPlaneChoice:
	//	*ReplaceSpecType_NoLocalControlPlane
	//	*ReplaceSpecType_LocalControlPlane
	LocalControlPlaneChoice isReplaceSpecType_LocalControlPlaneChoice `protobuf_oneof:"local_control_plane_choice"`
	// Types that are valid to be assigned to VmChoice:
	//	*ReplaceSpecType_DisableVm
	//	*ReplaceSpecType_EnableVm
	VmChoice isReplaceSpecType_VmChoice `protobuf_oneof:"vm_choice"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*ReplaceSpecType_DefaultBlockedServices
	//	*ReplaceSpecType_BlockedServices
	BlockedServicesChoice    isReplaceSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	OfflineSurvivabilityMode *views.OfflineSurvivabilityModeType     `protobuf:"bytes,47,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	// Types that are valid to be assigned to SriovInterfaceChoice:
	//	*ReplaceSpecType_DefaultSriovInterface
	//	*ReplaceSpecType_SriovInterfaces
	SriovInterfaceChoice isReplaceSpecType_SriovInterfaceChoice `protobuf_oneof:"sriov_interface_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{13}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_BondChoice interface {
	isReplaceSpecType_BondChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_NetworkCfgChoice interface {
	isReplaceSpecType_NetworkCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_StorageCfgChoice interface {
	isReplaceSpecType_StorageCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_GpuChoice interface {
	isReplaceSpecType_GpuChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_K8SClusterChoice interface {
	isReplaceSpecType_K8SClusterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_LogsReceiverChoice interface {
	isReplaceSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_UsbPolicyChoice interface {
	isReplaceSpecType_UsbPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_LocalControlPlaneChoice interface {
	isReplaceSpecType_LocalControlPlaneChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_VmChoice interface {
	isReplaceSpecType_VmChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_BlockedServicesChoice interface {
	isReplaceSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_SriovInterfaceChoice interface {
	isReplaceSpecType_SriovInterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_NoBondDevices struct {
	NoBondDevices *schema.Empty `protobuf:"bytes,7,opt,name=no_bond_devices,json=noBondDevices,proto3,oneof" json:"no_bond_devices,omitempty"`
}
type ReplaceSpecType_BondDeviceList struct {
	BondDeviceList *fleet.FleetBondDevicesListType `protobuf:"bytes,8,opt,name=bond_device_list,json=bondDeviceList,proto3,oneof" json:"bond_device_list,omitempty"`
}
type ReplaceSpecType_DefaultNetworkConfig struct {
	DefaultNetworkConfig *schema.Empty `protobuf:"bytes,10,opt,name=default_network_config,json=defaultNetworkConfig,proto3,oneof" json:"default_network_config,omitempty"`
}
type ReplaceSpecType_CustomNetworkConfig struct {
	CustomNetworkConfig *VssNetworkConfiguration `protobuf:"bytes,11,opt,name=custom_network_config,json=customNetworkConfig,proto3,oneof" json:"custom_network_config,omitempty"`
}
type ReplaceSpecType_DefaultStorageConfig struct {
	DefaultStorageConfig *schema.Empty `protobuf:"bytes,13,opt,name=default_storage_config,json=defaultStorageConfig,proto3,oneof" json:"default_storage_config,omitempty"`
}
type ReplaceSpecType_CustomStorageConfig struct {
	CustomStorageConfig *VssStorageConfiguration `protobuf:"bytes,14,opt,name=custom_storage_config,json=customStorageConfig,proto3,oneof" json:"custom_storage_config,omitempty"`
}
type ReplaceSpecType_DisableGpu struct {
	DisableGpu *schema.Empty `protobuf:"bytes,16,opt,name=disable_gpu,json=disableGpu,proto3,oneof" json:"disable_gpu,omitempty"`
}
type ReplaceSpecType_EnableGpu struct {
	EnableGpu *schema.Empty `protobuf:"bytes,17,opt,name=enable_gpu,json=enableGpu,proto3,oneof" json:"enable_gpu,omitempty"`
}
type ReplaceSpecType_EnableVgpu struct {
	EnableVgpu *fleet.VGPUConfiguration `protobuf:"bytes,36,opt,name=enable_vgpu,json=enableVgpu,proto3,oneof" json:"enable_vgpu,omitempty"`
}
type ReplaceSpecType_NoK8SCluster struct {
	NoK8SCluster *schema.Empty `protobuf:"bytes,21,opt,name=no_k8s_cluster,json=noK8sCluster,proto3,oneof" json:"no_k8s_cluster,omitempty"`
}
type ReplaceSpecType_K8SCluster struct {
	K8SCluster *views.ObjectRefType `protobuf:"bytes,22,opt,name=k8s_cluster,json=k8sCluster,proto3,oneof" json:"k8s_cluster,omitempty"`
}
type ReplaceSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,24,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type ReplaceSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,25,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type ReplaceSpecType_DenyAllUsb struct {
	DenyAllUsb *schema.Empty `protobuf:"bytes,27,opt,name=deny_all_usb,json=denyAllUsb,proto3,oneof" json:"deny_all_usb,omitempty"`
}
type ReplaceSpecType_AllowAllUsb struct {
	AllowAllUsb *schema.Empty `protobuf:"bytes,28,opt,name=allow_all_usb,json=allowAllUsb,proto3,oneof" json:"allow_all_usb,omitempty"`
}
type ReplaceSpecType_UsbPolicy struct {
	UsbPolicy *views.ObjectRefType `protobuf:"bytes,29,opt,name=usb_policy,json=usbPolicy,proto3,oneof" json:"usb_policy,omitempty"`
}
type ReplaceSpecType_NoLocalControlPlane struct {
	NoLocalControlPlane *schema.Empty `protobuf:"bytes,32,opt,name=no_local_control_plane,json=noLocalControlPlane,proto3,oneof" json:"no_local_control_plane,omitempty"`
}
type ReplaceSpecType_LocalControlPlane struct {
	LocalControlPlane *fleet.LocalControlPlaneType `protobuf:"bytes,33,opt,name=local_control_plane,json=localControlPlane,proto3,oneof" json:"local_control_plane,omitempty"`
}
type ReplaceSpecType_DisableVm struct {
	DisableVm *schema.Empty `protobuf:"bytes,38,opt,name=disable_vm,json=disableVm,proto3,oneof" json:"disable_vm,omitempty"`
}
type ReplaceSpecType_EnableVm struct {
	EnableVm *fleet.VMConfiguration `protobuf:"bytes,39,opt,name=enable_vm,json=enableVm,proto3,oneof" json:"enable_vm,omitempty"`
}
type ReplaceSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,41,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type ReplaceSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,44,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}
type ReplaceSpecType_DefaultSriovInterface struct {
	DefaultSriovInterface *schema.Empty `protobuf:"bytes,55,opt,name=default_sriov_interface,json=defaultSriovInterface,proto3,oneof" json:"default_sriov_interface,omitempty"`
}
type ReplaceSpecType_SriovInterfaces struct {
	SriovInterfaces *fleet.SriovInterfacesListType `protobuf:"bytes,56,opt,name=sriov_interfaces,json=sriovInterfaces,proto3,oneof" json:"sriov_interfaces,omitempty"`
}

func (*ReplaceSpecType_NoBondDevices) isReplaceSpecType_BondChoice()                     {}
func (*ReplaceSpecType_BondDeviceList) isReplaceSpecType_BondChoice()                    {}
func (*ReplaceSpecType_DefaultNetworkConfig) isReplaceSpecType_NetworkCfgChoice()        {}
func (*ReplaceSpecType_CustomNetworkConfig) isReplaceSpecType_NetworkCfgChoice()         {}
func (*ReplaceSpecType_DefaultStorageConfig) isReplaceSpecType_StorageCfgChoice()        {}
func (*ReplaceSpecType_CustomStorageConfig) isReplaceSpecType_StorageCfgChoice()         {}
func (*ReplaceSpecType_DisableGpu) isReplaceSpecType_GpuChoice()                         {}
func (*ReplaceSpecType_EnableGpu) isReplaceSpecType_GpuChoice()                          {}
func (*ReplaceSpecType_EnableVgpu) isReplaceSpecType_GpuChoice()                         {}
func (*ReplaceSpecType_NoK8SCluster) isReplaceSpecType_K8SClusterChoice()                {}
func (*ReplaceSpecType_K8SCluster) isReplaceSpecType_K8SClusterChoice()                  {}
func (*ReplaceSpecType_LogsStreamingDisabled) isReplaceSpecType_LogsReceiverChoice()     {}
func (*ReplaceSpecType_LogReceiver) isReplaceSpecType_LogsReceiverChoice()               {}
func (*ReplaceSpecType_DenyAllUsb) isReplaceSpecType_UsbPolicyChoice()                   {}
func (*ReplaceSpecType_AllowAllUsb) isReplaceSpecType_UsbPolicyChoice()                  {}
func (*ReplaceSpecType_UsbPolicy) isReplaceSpecType_UsbPolicyChoice()                    {}
func (*ReplaceSpecType_NoLocalControlPlane) isReplaceSpecType_LocalControlPlaneChoice()  {}
func (*ReplaceSpecType_LocalControlPlane) isReplaceSpecType_LocalControlPlaneChoice()    {}
func (*ReplaceSpecType_DisableVm) isReplaceSpecType_VmChoice()                           {}
func (*ReplaceSpecType_EnableVm) isReplaceSpecType_VmChoice()                            {}
func (*ReplaceSpecType_DefaultBlockedServices) isReplaceSpecType_BlockedServicesChoice() {}
func (*ReplaceSpecType_BlockedServices) isReplaceSpecType_BlockedServicesChoice()        {}
func (*ReplaceSpecType_DefaultSriovInterface) isReplaceSpecType_SriovInterfaceChoice()   {}
func (*ReplaceSpecType_SriovInterfaces) isReplaceSpecType_SriovInterfaceChoice()         {}

func (m *ReplaceSpecType) GetBondChoice() isReplaceSpecType_BondChoice {
	if m != nil {
		return m.BondChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetNetworkCfgChoice() isReplaceSpecType_NetworkCfgChoice {
	if m != nil {
		return m.NetworkCfgChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetStorageCfgChoice() isReplaceSpecType_StorageCfgChoice {
	if m != nil {
		return m.StorageCfgChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetGpuChoice() isReplaceSpecType_GpuChoice {
	if m != nil {
		return m.GpuChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetK8SClusterChoice() isReplaceSpecType_K8SClusterChoice {
	if m != nil {
		return m.K8SClusterChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetLogsReceiverChoice() isReplaceSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetUsbPolicyChoice() isReplaceSpecType_UsbPolicyChoice {
	if m != nil {
		return m.UsbPolicyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetLocalControlPlaneChoice() isReplaceSpecType_LocalControlPlaneChoice {
	if m != nil {
		return m.LocalControlPlaneChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetVmChoice() isReplaceSpecType_VmChoice {
	if m != nil {
		return m.VmChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetBlockedServicesChoice() isReplaceSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetSriovInterfaceChoice() isReplaceSpecType_SriovInterfaceChoice {
	if m != nil {
		return m.SriovInterfaceChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetVolterraCertifiedHw() string {
	if m != nil {
		return m.VolterraCertifiedHw
	}
	return ""
}

func (m *ReplaceSpecType) GetMasterNodes() []string {
	if m != nil {
		return m.MasterNodes
	}
	return nil
}

func (m *ReplaceSpecType) GetMasterNodeConfiguration() []*views.MasterNode {
	if m != nil {
		return m.MasterNodeConfiguration
	}
	return nil
}

func (m *ReplaceSpecType) GetWorkerNodes() []string {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *ReplaceSpecType) GetNoBondDevices() *schema.Empty {
	if x, ok := m.GetBondChoice().(*ReplaceSpecType_NoBondDevices); ok {
		return x.NoBondDevices
	}
	return nil
}

func (m *ReplaceSpecType) GetBondDeviceList() *fleet.FleetBondDevicesListType {
	if x, ok := m.GetBondChoice().(*ReplaceSpecType_BondDeviceList); ok {
		return x.BondDeviceList
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultNetworkConfig() *schema.Empty {
	if x, ok := m.GetNetworkCfgChoice().(*ReplaceSpecType_DefaultNetworkConfig); ok {
		return x.DefaultNetworkConfig
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomNetworkConfig() *VssNetworkConfiguration {
	if x, ok := m.GetNetworkCfgChoice().(*ReplaceSpecType_CustomNetworkConfig); ok {
		return x.CustomNetworkConfig
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultStorageConfig() *schema.Empty {
	if x, ok := m.GetStorageCfgChoice().(*ReplaceSpecType_DefaultStorageConfig); ok {
		return x.DefaultStorageConfig
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomStorageConfig() *VssStorageConfiguration {
	if x, ok := m.GetStorageCfgChoice().(*ReplaceSpecType_CustomStorageConfig); ok {
		return x.CustomStorageConfig
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableGpu() *schema.Empty {
	if x, ok := m.GetGpuChoice().(*ReplaceSpecType_DisableGpu); ok {
		return x.DisableGpu
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableGpu() *schema.Empty {
	if x, ok := m.GetGpuChoice().(*ReplaceSpecType_EnableGpu); ok {
		return x.EnableGpu
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableVgpu() *fleet.VGPUConfiguration {
	if x, ok := m.GetGpuChoice().(*ReplaceSpecType_EnableVgpu); ok {
		return x.EnableVgpu
	}
	return nil
}

func (m *ReplaceSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReplaceSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *ReplaceSpecType) GetNoK8SCluster() *schema.Empty {
	if x, ok := m.GetK8SClusterChoice().(*ReplaceSpecType_NoK8SCluster); ok {
		return x.NoK8SCluster
	}
	return nil
}

func (m *ReplaceSpecType) GetK8SCluster() *views.ObjectRefType {
	if x, ok := m.GetK8SClusterChoice().(*ReplaceSpecType_K8SCluster); ok {
		return x.K8SCluster
	}
	return nil
}

func (m *ReplaceSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *ReplaceSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *ReplaceSpecType) GetDenyAllUsb() *schema.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*ReplaceSpecType_DenyAllUsb); ok {
		return x.DenyAllUsb
	}
	return nil
}

func (m *ReplaceSpecType) GetAllowAllUsb() *schema.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*ReplaceSpecType_AllowAllUsb); ok {
		return x.AllowAllUsb
	}
	return nil
}

func (m *ReplaceSpecType) GetUsbPolicy() *views.ObjectRefType {
	if x, ok := m.GetUsbPolicyChoice().(*ReplaceSpecType_UsbPolicy); ok {
		return x.UsbPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetNoLocalControlPlane() *schema.Empty {
	if x, ok := m.GetLocalControlPlaneChoice().(*ReplaceSpecType_NoLocalControlPlane); ok {
		return x.NoLocalControlPlane
	}
	return nil
}

func (m *ReplaceSpecType) GetLocalControlPlane() *fleet.LocalControlPlaneType {
	if x, ok := m.GetLocalControlPlaneChoice().(*ReplaceSpecType_LocalControlPlane); ok {
		return x.LocalControlPlane
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableVm() *schema.Empty {
	if x, ok := m.GetVmChoice().(*ReplaceSpecType_DisableVm); ok {
		return x.DisableVm
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableVm() *fleet.VMConfiguration {
	if x, ok := m.GetVmChoice().(*ReplaceSpecType_EnableVm); ok {
		return x.EnableVm
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *ReplaceSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultSriovInterface() *schema.Empty {
	if x, ok := m.GetSriovInterfaceChoice().(*ReplaceSpecType_DefaultSriovInterface); ok {
		return x.DefaultSriovInterface
	}
	return nil
}

func (m *ReplaceSpecType) GetSriovInterfaces() *fleet.SriovInterfacesListType {
	if x, ok := m.GetSriovInterfaceChoice().(*ReplaceSpecType_SriovInterfaces); ok {
		return x.SriovInterfaces
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_NoBondDevices)(nil),
		(*ReplaceSpecType_BondDeviceList)(nil),
		(*ReplaceSpecType_DefaultNetworkConfig)(nil),
		(*ReplaceSpecType_CustomNetworkConfig)(nil),
		(*ReplaceSpecType_DefaultStorageConfig)(nil),
		(*ReplaceSpecType_CustomStorageConfig)(nil),
		(*ReplaceSpecType_DisableGpu)(nil),
		(*ReplaceSpecType_EnableGpu)(nil),
		(*ReplaceSpecType_EnableVgpu)(nil),
		(*ReplaceSpecType_NoK8SCluster)(nil),
		(*ReplaceSpecType_K8SCluster)(nil),
		(*ReplaceSpecType_LogsStreamingDisabled)(nil),
		(*ReplaceSpecType_LogReceiver)(nil),
		(*ReplaceSpecType_DenyAllUsb)(nil),
		(*ReplaceSpecType_AllowAllUsb)(nil),
		(*ReplaceSpecType_UsbPolicy)(nil),
		(*ReplaceSpecType_NoLocalControlPlane)(nil),
		(*ReplaceSpecType_LocalControlPlane)(nil),
		(*ReplaceSpecType_DisableVm)(nil),
		(*ReplaceSpecType_EnableVm)(nil),
		(*ReplaceSpecType_DefaultBlockedServices)(nil),
		(*ReplaceSpecType_BlockedServices)(nil),
		(*ReplaceSpecType_DefaultSriovInterface)(nil),
		(*ReplaceSpecType_SriovInterfaces)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get App Stack site"
// Shape of the App Stack site specification
type GetSpecType struct {
	VolterraCertifiedHw     string              `protobuf:"bytes,1,opt,name=volterra_certified_hw,json=volterraCertifiedHw,proto3" json:"volterra_certified_hw,omitempty"`
	MasterNodes             []string            `protobuf:"bytes,2,rep,name=master_nodes,json=masterNodes,proto3" json:"master_nodes,omitempty"`
	MasterNodeConfiguration []*views.MasterNode `protobuf:"bytes,53,rep,name=master_node_configuration,json=masterNodeConfiguration,proto3" json:"master_node_configuration,omitempty"`
	WorkerNodes             []string            `protobuf:"bytes,3,rep,name=worker_nodes,json=workerNodes,proto3" json:"worker_nodes,omitempty"`
	VolterraSoftwareVersion string              `protobuf:"bytes,4,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion  string              `protobuf:"bytes,5,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// Types that are valid to be assigned to BondChoice:
	//	*GetSpecType_NoBondDevices
	//	*GetSpecType_BondDeviceList
	BondChoice isGetSpecType_BondChoice `protobuf_oneof:"bond_choice"`
	// Types that are valid to be assigned to NetworkCfgChoice:
	//	*GetSpecType_DefaultNetworkConfig
	//	*GetSpecType_CustomNetworkConfig
	NetworkCfgChoice isGetSpecType_NetworkCfgChoice `protobuf_oneof:"network_cfg_choice"`
	// Types that are valid to be assigned to StorageCfgChoice:
	//	*GetSpecType_DefaultStorageConfig
	//	*GetSpecType_CustomStorageConfig
	StorageCfgChoice isGetSpecType_StorageCfgChoice `protobuf_oneof:"storage_cfg_choice"`
	// Types that are valid to be assigned to GpuChoice:
	//	*GetSpecType_DisableGpu
	//	*GetSpecType_EnableGpu
	//	*GetSpecType_EnableVgpu
	GpuChoice   isGetSpecType_GpuChoice `protobuf_oneof:"gpu_choice"`
	Address     string                  `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates *site.Coordinates       `protobuf:"bytes,19,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to K8SClusterChoice:
	//	*GetSpecType_NoK8SCluster
	//	*GetSpecType_K8SCluster
	K8SClusterChoice isGetSpecType_K8SClusterChoice `protobuf_oneof:"k8s_cluster_choice"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GetSpecType_LogsStreamingDisabled
	//	*GetSpecType_LogReceiver
	LogsReceiverChoice isGetSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to UsbPolicyChoice:
	//	*GetSpecType_DenyAllUsb
	//	*GetSpecType_AllowAllUsb
	//	*GetSpecType_UsbPolicy
	UsbPolicyChoice isGetSpecType_UsbPolicyChoice `protobuf_oneof:"usb_policy_choice"`
	// site_state
	//
	// x-displayName: "Site State"
	// The operational phase of the site state machine.
	SiteState site.SiteState `protobuf:"varint,30,opt,name=site_state,json=siteState,proto3,enum=ves.io.schema.site.SiteState" json:"site_state,omitempty"`
	// Types that are valid to be assigned to LocalControlPlaneChoice:
	//	*GetSpecType_NoLocalControlPlane
	//	*GetSpecType_LocalControlPlane
	LocalControlPlaneChoice isGetSpecType_LocalControlPlaneChoice `protobuf_oneof:"local_control_plane_choice"`
	// Types that are valid to be assigned to VmChoice:
	//	*GetSpecType_DisableVm
	//	*GetSpecType_EnableVm
	VmChoice isGetSpecType_VmChoice `protobuf_oneof:"vm_choice"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*GetSpecType_DefaultBlockedServices
	//	*GetSpecType_BlockedServices
	BlockedServicesChoice    isGetSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	OfflineSurvivabilityMode *views.OfflineSurvivabilityModeType `protobuf:"bytes,47,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	// Types that are valid to be assigned to SriovInterfaceChoice:
	//	*GetSpecType_DefaultSriovInterface
	//	*GetSpecType_SriovInterfaces
	SriovInterfaceChoice isGetSpecType_SriovInterfaceChoice `protobuf_oneof:"sriov_interface_choice"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d141cd889edd2b08, []int{14}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_BondChoice interface {
	isGetSpecType_BondChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_NetworkCfgChoice interface {
	isGetSpecType_NetworkCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_StorageCfgChoice interface {
	isGetSpecType_StorageCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_GpuChoice interface {
	isGetSpecType_GpuChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_K8SClusterChoice interface {
	isGetSpecType_K8SClusterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_LogsReceiverChoice interface {
	isGetSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_UsbPolicyChoice interface {
	isGetSpecType_UsbPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_LocalControlPlaneChoice interface {
	isGetSpecType_LocalControlPlaneChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_VmChoice interface {
	isGetSpecType_VmChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_BlockedServicesChoice interface {
	isGetSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_SriovInterfaceChoice interface {
	isGetSpecType_SriovInterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_NoBondDevices struct {
	NoBondDevices *schema.Empty `protobuf:"bytes,7,opt,name=no_bond_devices,json=noBondDevices,proto3,oneof" json:"no_bond_devices,omitempty"`
}
type GetSpecType_BondDeviceList struct {
	BondDeviceList *fleet.FleetBondDevicesListType `protobuf:"bytes,8,opt,name=bond_device_list,json=bondDeviceList,proto3,oneof" json:"bond_device_list,omitempty"`
}
type GetSpecType_DefaultNetworkConfig struct {
	DefaultNetworkConfig *schema.Empty `protobuf:"bytes,10,opt,name=default_network_config,json=defaultNetworkConfig,proto3,oneof" json:"default_network_config,omitempty"`
}
type GetSpecType_CustomNetworkConfig struct {
	CustomNetworkConfig *VssNetworkConfiguration `protobuf:"bytes,11,opt,name=custom_network_config,json=customNetworkConfig,proto3,oneof" json:"custom_network_config,omitempty"`
}
type GetSpecType_DefaultStorageConfig struct {
	DefaultStorageConfig *schema.Empty `protobuf:"bytes,13,opt,name=default_storage_config,json=defaultStorageConfig,proto3,oneof" json:"default_storage_config,omitempty"`
}
type GetSpecType_CustomStorageConfig struct {
	CustomStorageConfig *VssStorageConfiguration `protobuf:"bytes,14,opt,name=custom_storage_config,json=customStorageConfig,proto3,oneof" json:"custom_storage_config,omitempty"`
}
type GetSpecType_DisableGpu struct {
	DisableGpu *schema.Empty `protobuf:"bytes,16,opt,name=disable_gpu,json=disableGpu,proto3,oneof" json:"disable_gpu,omitempty"`
}
type GetSpecType_EnableGpu struct {
	EnableGpu *schema.Empty `protobuf:"bytes,17,opt,name=enable_gpu,json=enableGpu,proto3,oneof" json:"enable_gpu,omitempty"`
}
type GetSpecType_EnableVgpu struct {
	EnableVgpu *fleet.VGPUConfiguration `protobuf:"bytes,36,opt,name=enable_vgpu,json=enableVgpu,proto3,oneof" json:"enable_vgpu,omitempty"`
}
type GetSpecType_NoK8SCluster struct {
	NoK8SCluster *schema.Empty `protobuf:"bytes,21,opt,name=no_k8s_cluster,json=noK8sCluster,proto3,oneof" json:"no_k8s_cluster,omitempty"`
}
type GetSpecType_K8SCluster struct {
	K8SCluster *views.ObjectRefType `protobuf:"bytes,22,opt,name=k8s_cluster,json=k8sCluster,proto3,oneof" json:"k8s_cluster,omitempty"`
}
type GetSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,24,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type GetSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,25,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type GetSpecType_DenyAllUsb struct {
	DenyAllUsb *schema.Empty `protobuf:"bytes,27,opt,name=deny_all_usb,json=denyAllUsb,proto3,oneof" json:"deny_all_usb,omitempty"`
}
type GetSpecType_AllowAllUsb struct {
	AllowAllUsb *schema.Empty `protobuf:"bytes,28,opt,name=allow_all_usb,json=allowAllUsb,proto3,oneof" json:"allow_all_usb,omitempty"`
}
type GetSpecType_UsbPolicy struct {
	UsbPolicy *views.ObjectRefType `protobuf:"bytes,29,opt,name=usb_policy,json=usbPolicy,proto3,oneof" json:"usb_policy,omitempty"`
}
type GetSpecType_NoLocalControlPlane struct {
	NoLocalControlPlane *schema.Empty `protobuf:"bytes,32,opt,name=no_local_control_plane,json=noLocalControlPlane,proto3,oneof" json:"no_local_control_plane,omitempty"`
}
type GetSpecType_LocalControlPlane struct {
	LocalControlPlane *fleet.LocalControlPlaneType `protobuf:"bytes,33,opt,name=local_control_plane,json=localControlPlane,proto3,oneof" json:"local_control_plane,omitempty"`
}
type GetSpecType_DisableVm struct {
	DisableVm *schema.Empty `protobuf:"bytes,38,opt,name=disable_vm,json=disableVm,proto3,oneof" json:"disable_vm,omitempty"`
}
type GetSpecType_EnableVm struct {
	EnableVm *fleet.VMConfiguration `protobuf:"bytes,39,opt,name=enable_vm,json=enableVm,proto3,oneof" json:"enable_vm,omitempty"`
}
type GetSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,41,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type GetSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,44,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}
type GetSpecType_DefaultSriovInterface struct {
	DefaultSriovInterface *schema.Empty `protobuf:"bytes,55,opt,name=default_sriov_interface,json=defaultSriovInterface,proto3,oneof" json:"default_sriov_interface,omitempty"`
}
type GetSpecType_SriovInterfaces struct {
	SriovInterfaces *fleet.SriovInterfacesListType `protobuf:"bytes,56,opt,name=sriov_interfaces,json=sriovInterfaces,proto3,oneof" json:"sriov_interfaces,omitempty"`
}

func (*GetSpecType_NoBondDevices) isGetSpecType_BondChoice()                     {}
func (*GetSpecType_BondDeviceList) isGetSpecType_BondChoice()                    {}
func (*GetSpecType_DefaultNetworkConfig) isGetSpecType_NetworkCfgChoice()        {}
func (*GetSpecType_CustomNetworkConfig) isGetSpecType_NetworkCfgChoice()         {}
func (*GetSpecType_DefaultStorageConfig) isGetSpecType_StorageCfgChoice()        {}
func (*GetSpecType_CustomStorageConfig) isGetSpecType_StorageCfgChoice()         {}
func (*GetSpecType_DisableGpu) isGetSpecType_GpuChoice()                         {}
func (*GetSpecType_EnableGpu) isGetSpecType_GpuChoice()                          {}
func (*GetSpecType_EnableVgpu) isGetSpecType_GpuChoice()                         {}
func (*GetSpecType_NoK8SCluster) isGetSpecType_K8SClusterChoice()                {}
func (*GetSpecType_K8SCluster) isGetSpecType_K8SClusterChoice()                  {}
func (*GetSpecType_LogsStreamingDisabled) isGetSpecType_LogsReceiverChoice()     {}
func (*GetSpecType_LogReceiver) isGetSpecType_LogsReceiverChoice()               {}
func (*GetSpecType_DenyAllUsb) isGetSpecType_UsbPolicyChoice()                   {}
func (*GetSpecType_AllowAllUsb) isGetSpecType_UsbPolicyChoice()                  {}
func (*GetSpecType_UsbPolicy) isGetSpecType_UsbPolicyChoice()                    {}
func (*GetSpecType_NoLocalControlPlane) isGetSpecType_LocalControlPlaneChoice()  {}
func (*GetSpecType_LocalControlPlane) isGetSpecType_LocalControlPlaneChoice()    {}
func (*GetSpecType_DisableVm) isGetSpecType_VmChoice()                           {}
func (*GetSpecType_EnableVm) isGetSpecType_VmChoice()                            {}
func (*GetSpecType_DefaultBlockedServices) isGetSpecType_BlockedServicesChoice() {}
func (*GetSpecType_BlockedServices) isGetSpecType_BlockedServicesChoice()        {}
func (*GetSpecType_DefaultSriovInterface) isGetSpecType_SriovInterfaceChoice()   {}
func (*GetSpecType_SriovInterfaces) isGetSpecType_SriovInterfaceChoice()         {}

func (m *GetSpecType) GetBondChoice() isGetSpecType_BondChoice {
	if m != nil {
		return m.BondChoice
	}
	return nil
}
func (m *GetSpecType) GetNetworkCfgChoice() isGetSpecType_NetworkCfgChoice {
	if m != nil {
		return m.NetworkCfgChoice
	}
	return nil
}
func (m *GetSpecType) GetStorageCfgChoice() isGetSpecType_StorageCfgChoice {
	if m != nil {
		return m.StorageCfgChoice
	}
	return nil
}
func (m *GetSpecType) GetGpuChoice() isGetSpecType_GpuChoice {
	if m != nil {
		return m.GpuChoice
	}
	return nil
}
func (m *GetSpecType) GetK8SClusterChoice() isGetSpecType_K8SClusterChoice {
	if m != nil {
		return m.K8SClusterChoice
	}
	return nil
}
func (m *GetSpecType) GetLogsReceiverChoice() isGetSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GetSpecType) GetUsbPolicyChoice() isGetSpecType_UsbPolicyChoice {
	if m != nil {
		return m.UsbPolicyChoice
	}
	return nil
}
func (m *GetSpecType) GetLocalControlPlaneChoice() isGetSpecType_LocalControlPlaneChoice {
	if m != nil {
		return m.LocalControlPlaneChoice
	}
	return nil
}
func (m *GetSpecType) GetVmChoice() isGetSpecType_VmChoice {
	if m != nil {
		return m.VmChoice
	}
	return nil
}
func (m *GetSpecType) GetBlockedServicesChoice() isGetSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}
func (m *GetSpecType) GetSriovInterfaceChoice() isGetSpecType_SriovInterfaceChoice {
	if m != nil {
		return m.SriovInterfaceChoice
	}
	return nil
}

func (m *GetSpecType) GetVolterraCertifiedHw() string {
	if m != nil {
		return m.VolterraCertifiedHw
	}
	return ""
}

func (m *GetSpecType) GetMasterNodes() []string {
	if m != nil {
		return m.MasterNodes
	}
	return nil
}

func (m *GetSpecType) GetMasterNodeConfiguration() []*views.MasterNode {
	if m != nil {
		return m.MasterNodeConfiguration
	}
	return nil
}

func (m *GetSpecType) GetWorkerNodes() []string {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *GetSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GetSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GetSpecType) GetNoBondDevices() *schema.Empty {
	if x, ok := m.GetBondChoice().(*GetSpecType_NoBondDevices); ok {
		return x.NoBondDevices
	}
	return nil
}

func (m *GetSpecType) GetBondDeviceList() *fleet.FleetBondDevicesListType {
	if x, ok := m.GetBondChoice().(*GetSpecType_BondDeviceList); ok {
		return x.BondDeviceList
	}
	return nil
}

func (m *GetSpecType) GetDefaultNetworkConfig() *schema.Empty {
	if x, ok := m.GetNetworkCfgChoice().(*GetSpecType_DefaultNetworkConfig); ok {
		return x.DefaultNetworkConfig
	}
	return nil
}

func (m *GetSpecType) GetCustomNetworkConfig() *VssNetworkConfiguration {
	if x, ok := m.GetNetworkCfgChoice().(*GetSpecType_CustomNetworkConfig); ok {
		return x.CustomNetworkConfig
	}
	return nil
}

func (m *GetSpecType) GetDefaultStorageConfig() *schema.Empty {
	if x, ok := m.GetStorageCfgChoice().(*GetSpecType_DefaultStorageConfig); ok {
		return x.DefaultStorageConfig
	}
	return nil
}

func (m *GetSpecType) GetCustomStorageConfig() *VssStorageConfiguration {
	if x, ok := m.GetStorageCfgChoice().(*GetSpecType_CustomStorageConfig); ok {
		return x.CustomStorageConfig
	}
	return nil
}

func (m *GetSpecType) GetDisableGpu() *schema.Empty {
	if x, ok := m.GetGpuChoice().(*GetSpecType_DisableGpu); ok {
		return x.DisableGpu
	}
	return nil
}

func (m *GetSpecType) GetEnableGpu() *schema.Empty {
	if x, ok := m.GetGpuChoice().(*GetSpecType_EnableGpu); ok {
		return x.EnableGpu
	}
	return nil
}

func (m *GetSpecType) GetEnableVgpu() *fleet.VGPUConfiguration {
	if x, ok := m.GetGpuChoice().(*GetSpecType_EnableVgpu); ok {
		return x.EnableVgpu
	}
	return nil
}

func (m *GetSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GetSpecType) GetNoK8SCluster() *schema.Empty {
	if x, ok := m.GetK8SClusterChoice().(*GetSpecType_NoK8SCluster); ok {
		return x.NoK8SCluster
	}
	return nil
}

func (m *GetSpecType) GetK8SCluster() *views.ObjectRefType {
	if x, ok := m.GetK8SClusterChoice().(*GetSpecType_K8SCluster); ok {
		return x.K8SCluster
	}
	return nil
}

func (m *GetSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GetSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GetSpecType) GetDenyAllUsb() *schema.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*GetSpecType_DenyAllUsb); ok {
		return x.DenyAllUsb
	}
	return nil
}

func (m *GetSpecType) GetAllowAllUsb() *schema.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*GetSpecType_AllowAllUsb); ok {
		return x.AllowAllUsb
	}
	return nil
}

func (m *GetSpecType) GetUsbPolicy() *views.ObjectRefType {
	if x, ok := m.GetUsbPolicyChoice().(*GetSpecType_UsbPolicy); ok {
		return x.UsbPolicy
	}
	return nil
}

func (m *GetSpecType) GetSiteState() site.SiteState {
	if m != nil {
		return m.SiteState
	}
	return site.ONLINE
}

func (m *GetSpecType) GetNoLocalControlPlane() *schema.Empty {
	if x, ok := m.GetLocalControlPlaneChoice().(*GetSpecType_NoLocalControlPlane); ok {
		return x.NoLocalControlPlane
	}
	return nil
}

func (m *GetSpecType) GetLocalControlPlane() *fleet.LocalControlPlaneType {
	if x, ok := m.GetLocalControlPlaneChoice().(*GetSpecType_LocalControlPlane); ok {
		return x.LocalControlPlane
	}
	return nil
}

func (m *GetSpecType) GetDisableVm() *schema.Empty {
	if x, ok := m.GetVmChoice().(*GetSpecType_DisableVm); ok {
		return x.DisableVm
	}
	return nil
}

func (m *GetSpecType) GetEnableVm() *fleet.VMConfiguration {
	if x, ok := m.GetVmChoice().(*GetSpecType_EnableVm); ok {
		return x.EnableVm
	}
	return nil
}

func (m *GetSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *GetSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *GetSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *GetSpecType) GetDefaultSriovInterface() *schema.Empty {
	if x, ok := m.GetSriovInterfaceChoice().(*GetSpecType_DefaultSriovInterface); ok {
		return x.DefaultSriovInterface
	}
	return nil
}

func (m *GetSpecType) GetSriovInterfaces() *fleet.SriovInterfacesListType {
	if x, ok := m.GetSriovInterfaceChoice().(*GetSpecType_SriovInterfaces); ok {
		return x.SriovInterfaces
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_NoBondDevices)(nil),
		(*GetSpecType_BondDeviceList)(nil),
		(*GetSpecType_DefaultNetworkConfig)(nil),
		(*GetSpecType_CustomNetworkConfig)(nil),
		(*GetSpecType_DefaultStorageConfig)(nil),
		(*GetSpecType_CustomStorageConfig)(nil),
		(*GetSpecType_DisableGpu)(nil),
		(*GetSpecType_EnableGpu)(nil),
		(*GetSpecType_EnableVgpu)(nil),
		(*GetSpecType_NoK8SCluster)(nil),
		(*GetSpecType_K8SCluster)(nil),
		(*GetSpecType_LogsStreamingDisabled)(nil),
		(*GetSpecType_LogReceiver)(nil),
		(*GetSpecType_DenyAllUsb)(nil),
		(*GetSpecType_AllowAllUsb)(nil),
		(*GetSpecType_UsbPolicy)(nil),
		(*GetSpecType_NoLocalControlPlane)(nil),
		(*GetSpecType_LocalControlPlane)(nil),
		(*GetSpecType_DisableVm)(nil),
		(*GetSpecType_EnableVm)(nil),
		(*GetSpecType_DefaultBlockedServices)(nil),
		(*GetSpecType_BlockedServices)(nil),
		(*GetSpecType_DefaultSriovInterface)(nil),
		(*GetSpecType_SriovInterfaces)(nil),
	}
}

func init() {
	proto.RegisterType((*Interface)(nil), "ves.io.schema.views.voltstack_site.Interface")
	golang_proto.RegisterType((*Interface)(nil), "ves.io.schema.views.voltstack_site.Interface")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.voltstack_site.Interface.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.voltstack_site.Interface.LabelsEntry")
	proto.RegisterType((*InterfaceListType)(nil), "ves.io.schema.views.voltstack_site.InterfaceListType")
	golang_proto.RegisterType((*InterfaceListType)(nil), "ves.io.schema.views.voltstack_site.InterfaceListType")
	proto.RegisterType((*StorageInterfaceType)(nil), "ves.io.schema.views.voltstack_site.StorageInterfaceType")
	golang_proto.RegisterType((*StorageInterfaceType)(nil), "ves.io.schema.views.voltstack_site.StorageInterfaceType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.voltstack_site.StorageInterfaceType.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.voltstack_site.StorageInterfaceType.LabelsEntry")
	proto.RegisterType((*StorageInterfaceListType)(nil), "ves.io.schema.views.voltstack_site.StorageInterfaceListType")
	golang_proto.RegisterType((*StorageInterfaceListType)(nil), "ves.io.schema.views.voltstack_site.StorageInterfaceListType")
	proto.RegisterType((*StaticRoutesListType)(nil), "ves.io.schema.views.voltstack_site.StaticRoutesListType")
	golang_proto.RegisterType((*StaticRoutesListType)(nil), "ves.io.schema.views.voltstack_site.StaticRoutesListType")
	proto.RegisterType((*VnConfiguration)(nil), "ves.io.schema.views.voltstack_site.VnConfiguration")
	golang_proto.RegisterType((*VnConfiguration)(nil), "ves.io.schema.views.voltstack_site.VnConfiguration")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.voltstack_site.VnConfiguration.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.voltstack_site.VnConfiguration.LabelsEntry")
	proto.RegisterType((*SliVnConfiguration)(nil), "ves.io.schema.views.voltstack_site.SliVnConfiguration")
	golang_proto.RegisterType((*SliVnConfiguration)(nil), "ves.io.schema.views.voltstack_site.SliVnConfiguration")
	proto.RegisterType((*GlobalNetworkConnectionType)(nil), "ves.io.schema.views.voltstack_site.GlobalNetworkConnectionType")
	golang_proto.RegisterType((*GlobalNetworkConnectionType)(nil), "ves.io.schema.views.voltstack_site.GlobalNetworkConnectionType")
	proto.RegisterType((*GlobalNetworkConnectionListType)(nil), "ves.io.schema.views.voltstack_site.GlobalNetworkConnectionListType")
	golang_proto.RegisterType((*GlobalNetworkConnectionListType)(nil), "ves.io.schema.views.voltstack_site.GlobalNetworkConnectionListType")
	proto.RegisterType((*VssNetworkConfiguration)(nil), "ves.io.schema.views.voltstack_site.VssNetworkConfiguration")
	golang_proto.RegisterType((*VssNetworkConfiguration)(nil), "ves.io.schema.views.voltstack_site.VssNetworkConfiguration")
	proto.RegisterType((*VssStorageConfiguration)(nil), "ves.io.schema.views.voltstack_site.VssStorageConfiguration")
	golang_proto.RegisterType((*VssStorageConfiguration)(nil), "ves.io.schema.views.voltstack_site.VssStorageConfiguration")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.voltstack_site.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.voltstack_site.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.voltstack_site.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.voltstack_site.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.voltstack_site.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.voltstack_site.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.voltstack_site.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.voltstack_site.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/voltstack_site/types.proto", fileDescriptor_d141cd889edd2b08)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/voltstack_site/types.proto", fileDescriptor_d141cd889edd2b08)
}

var fileDescriptor_d141cd889edd2b08 = []byte{
	// 5102 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7c, 0x5b, 0x6c, 0x1b, 0xd9,
	0x79, 0xbf, 0x0e, 0x49, 0x49, 0xd4, 0x47, 0x5d, 0x46, 0xa3, 0xdb, 0x88, 0xb2, 0x69, 0xae, 0x7c,
	0x97, 0x47, 0x94, 0x48, 0x49, 0x94, 0xec, 0xec, 0xdf, 0xf9, 0x9b, 0xb2, 0x63, 0x99, 0xb1, 0x1d,
	0x67, 0xb4, 0x16, 0x92, 0xf4, 0x42, 0x0c, 0xc9, 0x23, 0x7a, 0xa2, 0xe1, 0x0c, 0x33, 0x33, 0xa4,
	0x56, 0x2d, 0x0c, 0x2c, 0x6c, 0x20, 0x28, 0x82, 0x02, 0x29, 0xb6, 0x40, 0x0b, 0x14, 0x05, 0x92,
	0x87, 0x16, 0x48, 0xdd, 0x97, 0x02, 0x45, 0x03, 0xb4, 0xcc, 0x83, 0x61, 0xa0, 0x45, 0x90, 0xbe,
	0xa8, 0x05, 0x8a, 0x2e, 0xfa, 0x50, 0x24, 0xda, 0x97, 0x6d, 0xfb, 0x92, 0x97, 0x02, 0xad, 0x1f,
	0x8a, 0x62, 0xce, 0x9c, 0x19, 0xce, 0x0c, 0x87, 0x14, 0xed, 0xb5, 0xbb, 0xdd, 0xae, 0x5e, 0x76,
	0x39, 0x73, 0xbe, 0xdb, 0xb9, 0x7d, 0xe7, 0xf7, 0xfb, 0xce, 0x58, 0x90, 0x6a, 0x60, 0x3d, 0x25,
	0xa9, 0x4b, 0x7a, 0xe9, 0x11, 0xae, 0x8a, 0x4b, 0x0d, 0x09, 0xef, 0xeb, 0x4b, 0x0d, 0x55, 0x36,
	0x74, 0x43, 0x2c, 0xed, 0x15, 0x74, 0xc9, 0xc0, 0x4b, 0xc6, 0x41, 0x0d, 0xeb, 0xa9, 0x9a, 0xa6,
	0x1a, 0x2a, 0x3b, 0x6f, 0xc9, 0xa7, 0x2c, 0xf9, 0x14, 0x91, 0x4f, 0x79, 0xe5, 0xe3, 0x8b, 0x15,
	0xc9, 0x78, 0x54, 0x2f, 0xa6, 0x4a, 0x6a, 0x75, 0xa9, 0xa2, 0x56, 0xd4, 0x25, 0xa2, 0x5a, 0xac,
	0xef, 0x92, 0x27, 0xf2, 0x40, 0x7e, 0x59, 0x26, 0xe3, 0x67, 0xbc, 0x21, 0xec, 0xca, 0x18, 0x1b,
	0x6e, 0x9f, 0xf1, 0x05, 0xaf, 0x80, 0x82, 0x8d, 0x7d, 0x55, 0xdb, 0x2b, 0xec, 0x4a, 0x1a, 0xde,
	0x17, 0x65, 0xd9, 0x23, 0x7b, 0x25, 0x58, 0x56, 0x52, 0x0c, 0xac, 0xed, 0x8a, 0x25, 0x4f, 0x67,
	0xe2, 0x73, 0x5e, 0x61, 0xb5, 0x66, 0x48, 0xaa, 0x62, 0x37, 0x26, 0xbc, 0x8d, 0xfe, 0x91, 0x88,
	0xcf, 0x7a, 0xdb, 0xdd, 0x4d, 0xa7, 0x7c, 0x83, 0x2a, 0xca, 0x52, 0x59, 0x34, 0x30, 0x6d, 0x4d,
	0xb6, 0x0f, 0x79, 0xc1, 0xeb, 0xfa, 0x5c, 0xd0, 0xa4, 0x98, 0x01, 0x14, 0xdc, 0x5e, 0xce, 0x04,
	0x49, 0xb9, 0x05, 0x2e, 0xfb, 0x05, 0x34, 0xa3, 0x2e, 0xca, 0x05, 0x3a, 0x26, 0x6e, 0xd1, 0xf9,
	0xdf, 0x66, 0x61, 0xe8, 0x8e, 0x3d, 0x46, 0x2c, 0x0f, 0xb1, 0x32, 0xd6, 0x4b, 0x9a, 0x44, 0xa2,
	0xe2, 0x50, 0x12, 0x5d, 0x1a, 0xca, 0xc1, 0x5f, 0xfd, 0xcb, 0xf3, 0x70, 0xbf, 0x16, 0xe6, 0x3e,
	0x08, 0x09, 0xee, 0x66, 0x76, 0x17, 0x06, 0x64, 0xb1, 0x88, 0x65, 0x9d, 0x0b, 0x25, 0xc3, 0x97,
	0x62, 0x99, 0xab, 0xa9, 0xe3, 0xd7, 0x48, 0xca, 0x71, 0x96, 0xba, 0x4b, 0x74, 0x6f, 0x29, 0x86,
	0x76, 0x90, 0x9b, 0xf8, 0x83, 0x9f, 0xa0, 0x08, 0x84, 0x50, 0xdf, 0xd1, 0xcf, 0xff, 0x3a, 0x3c,
	0xf0, 0xbd, 0x9f, 0xa0, 0x50, 0xb4, 0x4f, 0xa0, 0xd6, 0xd9, 0x2a, 0xb0, 0xd8, 0x78, 0x84, 0x35,
	0x05, 0x1b, 0xad, 0xf9, 0xe4, 0xfa, 0x93, 0xe8, 0x52, 0x2c, 0x93, 0xf5, 0xf9, 0x6c, 0x9b, 0xf7,
	0xd4, 0x2d, 0xaa, 0xea, 0x38, 0x7e, 0xef, 0xa0, 0x86, 0x73, 0x91, 0xc3, 0x26, 0x42, 0x5b, 0x7d,
	0xc2, 0x38, 0xf6, 0x37, 0xb3, 0xdf, 0x86, 0x89, 0x32, 0x2e, 0x4b, 0x25, 0xd1, 0xc0, 0x65, 0x97,
	0xbf, 0x01, 0xe2, 0x6f, 0xfd, 0x58, 0x7f, 0x37, 0x6d, 0x5d, 0x8f, 0xc3, 0xad, 0x3e, 0x81, 0x2d,
	0xb7, 0xb5, 0xb0, 0xbf, 0x8b, 0x20, 0xd1, 0x72, 0x56, 0x15, 0x15, 0xb1, 0x82, 0xab, 0x58, 0x71,
	0xf7, 0x73, 0x90, 0xf8, 0xbd, 0xd1, 0xbb, 0xdf, 0x7b, 0x8e, 0x15, 0x6f, 0x97, 0xa3, 0xcf, 0x9b,
	0x08, 0xd1, 0x6e, 0x9f, 0x2a, 0x77, 0x91, 0x66, 0xf7, 0x80, 0x31, 0xea, 0x8a, 0x82, 0x65, 0x57,
	0x18, 0x51, 0x12, 0xc6, 0xea, 0xb1, 0x61, 0xbc, 0x47, 0x14, 0x3b, 0x7b, 0x1e, 0x33, 0xbc, 0x02,
	0xec, 0xfb, 0xc0, 0xca, 0xaa, 0x5a, 0x2b, 0x9a, 0x2b, 0xa4, 0xe5, 0x6e, 0xa8, 0xc7, 0xd9, 0xbd,
	0x4b, 0x55, 0xbd, 0x0e, 0xc7, 0x3e, 0x7a, 0x8c, 0x6c, 0x9f, 0x9f, 0xd0, 0x89, 0x96, 0xfd, 0x92,
	0xec, 0x63, 0x58, 0x2e, 0x97, 0x0a, 0x25, 0xb9, 0xae, 0x1b, 0x58, 0x2b, 0x54, 0x34, 0xb5, 0x5e,
	0x2b, 0x94, 0x54, 0x45, 0xc1, 0x25, 0x43, 0x6a, 0x48, 0xc6, 0x41, 0xcb, 0x4d, 0xa1, 0x2c, 0xe9,
	0x62, 0x51, 0xc6, 0x65, 0x2e, 0x46, 0xe2, 0x9a, 0xf4, 0xc5, 0x75, 0xab, 0x5a, 0x33, 0x0e, 0xb6,
	0x90, 0x70, 0xa5, 0x5c, 0xda, 0xb4, 0xcc, 0xdd, 0x36, 0xad, 0x6d, 0xba, 0x8c, 0x39, 0x6e, 0x6f,
	0x52, 0x53, 0xec, 0x6f, 0xc2, 0x52, 0xaf, 0xee, 0xb1, 0x62, 0x79, 0x1f, 0xee, 0xea, 0x7d, 0xa1,
	0x07, 0xef, 0xb7, 0x2c, 0x4b, 0xf1, 0xab, 0x10, 0x73, 0xed, 0x3f, 0x96, 0x81, 0xf0, 0x1e, 0x3e,
	0xb0, 0x36, 0xbc, 0x60, 0xfe, 0x64, 0x27, 0xa1, 0xbf, 0x21, 0xca, 0x75, 0xcc, 0x85, 0xc8, 0x3b,
	0xeb, 0xe1, 0x5a, 0x68, 0x03, 0x5d, 0xfb, 0xc7, 0xe8, 0x8b, 0x26, 0x7a, 0x08, 0xb3, 0xc0, 0x3a,
	0x56, 0x93, 0xf7, 0xb0, 0x21, 0x96, 0x45, 0x43, 0x64, 0xc3, 0x69, 0x3e, 0x03, 0x13, 0x30, 0xda,
	0x6a, 0x32, 0x27, 0x84, 0x45, 0x2b, 0x70, 0x16, 0x4e, 0xdf, 0xdc, 0x4c, 0xd2, 0x00, 0x93, 0x24,
	0xc2, 0xa4, 0x3b, 0x44, 0x36, 0x94, 0x5e, 0xfe, 0x59, 0x13, 0xfd, 0xe7, 0x20, 0xbc, 0x40, 0x10,
	0x31, 0xb5, 0x16, 0xfe, 0x12, 0xc1, 0x8f, 0x11, 0x24, 0x82, 0xb6, 0x7f, 0x26, 0x6a, 0xef, 0x6b,
	0x48, 0x06, 0xee, 0xd7, 0xcc, 0x90, 0xb3, 0x21, 0x20, 0x7b, 0xdc, 0x26, 0xcb, 0x4c, 0x3a, 0xc2,
	0xc9, 0xd6, 0x86, 0x80, 0x78, 0xfb, 0x3e, 0xc8, 0x0c, 0x58, 0x0b, 0xdc, 0x8c, 0xaa, 0x7d, 0xd9,
	0x66, 0xa2, 0xf6, 0x7a, 0x84, 0x1f, 0x21, 0x88, 0xdc, 0x17, 0xab, 0x78, 0xe1, 0x07, 0x08, 0xfe,
	0x10, 0xc1, 0x1c, 0xcc, 0xb6, 0x77, 0x22, 0x55, 0xc6, 0x0d, 0xa9, 0x84, 0xe1, 0x14, 0xc4, 0x03,
	0x7a, 0x60, 0xb7, 0x5e, 0x84, 0xf3, 0xdd, 0xa3, 0xb7, 0x05, 0x67, 0x61, 0xc6, 0x1f, 0x6e, 0xca,
	0x7a, 0x61, 0xba, 0x6f, 0x8f, 0xd6, 0xd6, 0xfb, 0x67, 0x04, 0x91, 0x9d, 0xbb, 0x37, 0xee, 0x2f,
	0xfc, 0x03, 0x82, 0xbf, 0x47, 0x70, 0x11, 0xe6, 0x02, 0x42, 0xad, 0x2b, 0x86, 0x58, 0xa9, 0xe0,
	0x72, 0x26, 0xfa, 0x90, 0xfe, 0x32, 0xc3, 0x0e, 0x10, 0x6c, 0xc8, 0xa2, 0x52, 0x90, 0xca, 0x70,
	0x26, 0x78, 0x5a, 0x5a, 0xea, 0x0b, 0xc7, 0xce, 0x8a, 0xdb, 0x55, 0xfb, 0x4c, 0xb4, 0x5a, 0x3b,
	0xcc, 0x85, 0xd3, 0xfe, 0xfd, 0x30, 0x44, 0xee, 0xab, 0x65, 0xbc, 0xf0, 0xdd, 0x30, 0x3c, 0x0d,
	0x03, 0x1f, 0x18, 0x37, 0xdd, 0x88, 0x99, 0xd1, 0x1b, 0xb2, 0x9c, 0xdc, 0x96, 0x0c, 0x9c, 0x34,
	0x55, 0x74, 0x73, 0x54, 0x03, 0xa4, 0x15, 0xb5, 0x8c, 0x61, 0x11, 0xe6, 0x82, 0xe6, 0xad, 0x93,
	0xa5, 0x38, 0x70, 0x41, 0xe2, 0xc4, 0xd4, 0x06, 0x5c, 0x38, 0x66, 0x92, 0x3b, 0x59, 0x3d, 0x0f,
	0x67, 0x8f, 0xd1, 0x24, 0x0e, 0x16, 0x80, 0x6b, 0x5b, 0x1c, 0x9d, 0x4c, 0xce, 0xc0, 0x54, 0x9b,
	0x2c, 0x31, 0xc2, 0x43, 0x3c, 0x60, 0x19, 0x75, 0x19, 0xb9, 0x00, 0x69, 0x62, 0x68, 0x12, 0x06,
	0xac, 0xf4, 0x93, 0x07, 0x1b, 0x44, 0x30, 0xfd, 0xb9, 0xcb, 0xc0, 0xb4, 0x72, 0x5e, 0xe9, 0x91,
	0x2a, 0x95, 0x30, 0x3b, 0xf5, 0xbc, 0x89, 0xfa, 0x0f, 0x9b, 0x28, 0x7c, 0xd4, 0x44, 0x43, 0x6b,
	0x7c, 0x96, 0x5f, 0xe7, 0x37, 0xf8, 0xab, 0xb9, 0x4d, 0x48, 0xf5, 0x9a, 0x3c, 0xa9, 0xa1, 0xf1,
	0xe7, 0x4d, 0x14, 0x3b, 0x6c, 0x22, 0x38, 0x6a, 0xa2, 0xfe, 0x74, 0x9a, 0x4f, 0x67, 0xf2, 0x91,
	0x68, 0x98, 0x89, 0xe4, 0x23, 0xd1, 0x08, 0xd3, 0x9f, 0x8f, 0x44, 0x81, 0x89, 0xcd, 0x3f, 0x45,
	0x30, 0xee, 0xa4, 0xae, 0xbb, 0x92, 0x6e, 0x90, 0xec, 0xa5, 0x00, 0x38, 0xe6, 0x74, 0x0e, 0x11,
	0xb0, 0xb3, 0xf8, 0x4a, 0x60, 0x27, 0x77, 0xc6, 0x04, 0x51, 0x03, 0x1f, 0xa2, 0x30, 0xf3, 0x01,
	0x22, 0x78, 0xea, 0x43, 0x14, 0x8a, 0x3a, 0xbf, 0x38, 0x24, 0xb8, 0x3c, 0xcc, 0x3f, 0x1d, 0x80,
	0xc9, 0x6d, 0x43, 0xd5, 0xc4, 0x0a, 0xf6, 0x9c, 0x6b, 0xaf, 0x88, 0xcf, 0xbe, 0xe3, 0xc3, 0x67,
	0x37, 0x7b, 0x09, 0x39, 0xc8, 0x6f, 0xef, 0x50, 0xad, 0x04, 0xe3, 0xba, 0x65, 0xc0, 0x75, 0x96,
	0x87, 0x3f, 0x0d, 0x52, 0x13, 0x18, 0xdd, 0x17, 0xd1, 0xa7, 0x39, 0xbb, 0xfe, 0x24, 0xfc, 0xa2,
	0x89, 0xae, 0x74, 0x3b, 0xbb, 0x46, 0xdd, 0x78, 0x18, 0xad, 0xfc, 0xac, 0x89, 0xfe, 0x3d, 0x04,
	0xe7, 0x60, 0xe0, 0x26, 0xc9, 0x95, 0xf1, 0x38, 0x70, 0x6d, 0x1d, 0xb4, 0xf3, 0xe8, 0xd7, 0x68,
	0x1a, 0xbd, 0x0d, 0xb7, 0xe0, 0x02, 0xc4, 0xdb, 0xe5, 0x02, 0x72, 0xe8, 0x1c, 0xcc, 0xb6, 0xcb,
	0xd9, 0x29, 0xf4, 0xeb, 0x34, 0x6d, 0xdd, 0x81, 0xdb, 0x70, 0x25, 0x48, 0xb0, 0xd3, 0xce, 0xe3,
	0x60, 0xba, 0x5d, 0x98, 0x6c, 0xbc, 0x0f, 0x11, 0x0c, 0xde, 0x28, 0x97, 0x35, 0xac, 0xeb, 0x0b,
	0xdf, 0x45, 0xf0, 0x14, 0x01, 0x0f, 0xa7, 0x03, 0x7a, 0xf4, 0xa8, 0x54, 0x2b, 0x94, 0x64, 0x09,
	0x2b, 0x46, 0x26, 0x76, 0x73, 0x6b, 0xf3, 0x41, 0x72, 0x93, 0x3c, 0x74, 0x91, 0xd6, 0xb1, 0xd6,
	0xc0, 0x1a, 0x95, 0xde, 0x26, 0x0f, 0x70, 0x1e, 0xe6, 0xda, 0xa5, 0x75, 0x43, 0x34, 0xa4, 0x52,
	0x41, 0xaa, 0x65, 0x06, 0xb6, 0xc9, 0xcf, 0xe0, 0x6c, 0x30, 0xff, 0xc7, 0x08, 0x38, 0xff, 0x6a,
	0x74, 0xb6, 0xe4, 0x6f, 0x21, 0x60, 0xdb, 0x4c, 0xdb, 0x7b, 0x73, 0xe3, 0x75, 0x17, 0xba, 0x7b,
	0x9b, 0x86, 0x02, 0xb7, 0xe9, 0xb8, 0x7f, 0x35, 0xea, 0xf3, 0xdf, 0x47, 0xe6, 0x6e, 0x35, 0x3b,
	0x22, 0xa8, 0x75, 0x03, 0xeb, 0x4e, 0x8c, 0xfb, 0x30, 0x42, 0xfb, 0xaa, 0x91, 0x06, 0x1a, 0x5d,
	0xa6, 0x2d, 0x3a, 0x0f, 0x3d, 0x4b, 0xb9, 0x6c, 0xed, 0x48, 0x78, 0x9f, 0xc4, 0x95, 0xb0, 0x43,
	0x60, 0x98, 0xc0, 0xb0, 0x86, 0x75, 0x57, 0x00, 0xf3, 0x4f, 0x86, 0x60, 0x6c, 0x47, 0xd9, 0x54,
	0x95, 0x5d, 0xa9, 0x52, 0xd7, 0x44, 0x92, 0x0c, 0x64, 0x27, 0x19, 0x58, 0x51, 0x7c, 0xb9, 0x97,
	0x31, 0xf2, 0x19, 0xe9, 0x3d, 0x0f, 0xfc, 0x7f, 0x60, 0x14, 0xb5, 0xe0, 0xed, 0x7d, 0xb8, 0x0b,
	0x78, 0xed, 0x13, 0x46, 0x15, 0xd5, 0x3d, 0x88, 0x6c, 0xc1, 0x3f, 0x78, 0x11, 0xa2, 0xde, 0xe3,
	0xd4, 0xb6, 0xcf, 0xc6, 0x56, 0x9f, 0x77, 0x90, 0xd8, 0x5b, 0x30, 0xd1, 0x0a, 0xb1, 0x91, 0xb5,
	0xdd, 0x74, 0x07, 0xf8, 0x8c, 0x1d, 0xe5, 0x4e, 0x96, 0x9a, 0x11, 0x81, 0x69, 0xb3, 0x61, 0xc1,
	0xf4, 0xb5, 0x9e, 0xe6, 0xd9, 0x36, 0xe4, 0xc4, 0x89, 0x84, 0x51, 0xdd, 0xeb, 0xe2, 0xab, 0x24,
	0x52, 0xff, 0x71, 0x47, 0x09, 0x69, 0x60, 0xa4, 0xb9, 0x88, 0xc9, 0x7e, 0xb6, 0x42, 0x66, 0xbc,
	0x37, 0x3d, 0xa4, 0x80, 0xad, 0x00, 0xd3, 0x66, 0xc9, 0xa2, 0x98, 0xf3, 0x81, 0x43, 0xfb, 0xb5,
	0xe2, 0xb7, 0x71, 0xc9, 0x10, 0xf0, 0x2e, 0x59, 0x87, 0x33, 0xcf, 0x1e, 0xb7, 0xa9, 0x53, 0x57,
	0xa3, 0x5e, 0xf6, 0xc1, 0xfe, 0x18, 0x41, 0xbc, 0xed, 0x88, 0x76, 0xf3, 0xc9, 0x70, 0x8f, 0x3e,
	0x1f, 0x3e, 0x7b, 0x3c, 0xde, 0x76, 0x58, 0x1c, 0x3d, 0xbe, 0x26, 0xe0, 0x9a, 0x2c, 0x96, 0x70,
	0x39, 0x59, 0x3c, 0x48, 0xbe, 0x1a, 0x16, 0x30, 0x29, 0xa1, 0x30, 0xe3, 0x8d, 0xf7, 0x8d, 0x1c,
	0x2f, 0x5b, 0x2f, 0x9a, 0xe8, 0x26, 0x4c, 0x01, 0x73, 0xdf, 0x8a, 0xb7, 0x75, 0xb6, 0xa0, 0x34,
	0x4c, 0xc2, 0x88, 0x35, 0xe5, 0x49, 0x3a, 0xaf, 0xe1, 0x0c, 0x7f, 0xd5, 0x14, 0xf6, 0xd3, 0x22,
	0x16, 0xad, 0xe5, 0x16, 0x60, 0xc2, 0xbd, 0xfc, 0x6d, 0x10, 0x33, 0xf1, 0xbc, 0x89, 0xc2, 0x3f,
	0xb5, 0x98, 0x6d, 0xe8, 0xa8, 0x89, 0xc2, 0x2b, 0xfc, 0x6a, 0x4e, 0x30, 0xb3, 0xbd, 0x67, 0x09,
	0xda, 0xe2, 0x1b, 0x14, 0xf3, 0x0c, 0x39, 0x98, 0xe7, 0x7b, 0x2f, 0xd1, 0xd9, 0x32, 0xae, 0xaa,
	0x69, 0xde, 0xc0, 0xba, 0xc1, 0x97, 0x34, 0x83, 0xd7, 0x0d, 0xb1, 0x22, 0x29, 0x15, 0x5e, 0x57,
	0x77, 0x8d, 0xa2, 0xa8, 0xec, 0x15, 0xaa, 0xb8, 0x94, 0x4b, 0xc1, 0x4c, 0xfb, 0x98, 0xb6, 0x62,
	0x18, 0xa0, 0x31, 0xf4, 0x9b, 0x31, 0x64, 0xf9, 0xf5, 0x7c, 0x24, 0x1a, 0x62, 0xc2, 0xf9, 0x48,
	0x74, 0x88, 0x81, 0x7c, 0x24, 0xda, 0xcf, 0x0c, 0xcc, 0xff, 0x5b, 0x18, 0xd8, 0x6d, 0x59, 0xf2,
	0xe7, 0xa1, 0xcf, 0x4d, 0x66, 0x68, 0x64, 0x7d, 0x51, 0x0e, 0x1e, 0x97, 0x19, 0x76, 0xb2, 0x9e,
	0x38, 0x83, 0x32, 0x43, 0xf4, 0x8d, 0x66, 0x86, 0x57, 0x5a, 0x25, 0x0f, 0x3a, 0xae, 0x92, 0xec,
	0xf3, 0x26, 0x1a, 0xb4, 0x27, 0x73, 0x9d, 0xdf, 0xe8, 0x71, 0x8d, 0x38, 0x73, 0x6e, 0xce, 0xf6,
	0x9f, 0x87, 0x61, 0xee, 0xb6, 0xac, 0x16, 0x45, 0x99, 0x2e, 0x7d, 0x9b, 0xda, 0xab, 0x0a, 0x39,
	0x0b, 0xb7, 0x81, 0xd1, 0x65, 0xb5, 0x60, 0xa8, 0x85, 0x0a, 0x91, 0x2a, 0x94, 0x35, 0x3a, 0xed,
	0x97, 0x02, 0xe7, 0xcd, 0xb2, 0x45, 0x8d, 0xa8, 0x1a, 0x9d, 0xa7, 0x11, 0x5d, 0x56, 0xdf, 0x53,
	0xad, 0xb6, 0x9b, 0x1a, 0xfb, 0x00, 0xa6, 0x68, 0x61, 0xa6, 0xb0, 0xab, 0x6a, 0xfb, 0xa2, 0x56,
	0x2e, 0xd4, 0x34, 0xf5, 0xfd, 0x03, 0x5a, 0x1b, 0xec, 0x90, 0x1a, 0x49, 0x41, 0x08, 0x09, 0x13,
	0x54, 0xf5, 0x2b, 0x96, 0xe6, 0x03, 0x53, 0x91, 0x2d, 0xc1, 0xa4, 0x55, 0x6b, 0xf1, 0x19, 0xb4,
	0x72, 0xed, 0x79, 0x9f, 0x41, 0xb7, 0xaa, 0xb5, 0xca, 0xad, 0x72, 0x97, 0x53, 0x76, 0x42, 0x02,
	0x6b, 0x99, 0x73, 0x4b, 0x5e, 0xbb, 0xf8, 0xa2, 0x89, 0xce, 0xc2, 0x3b, 0x10, 0xb7, 0x3a, 0x92,
	0xb4, 0x93, 0x45, 0x6b, 0xc8, 0x74, 0x13, 0x8b, 0xae, 0xe6, 0xe6, 0x61, 0xbc, 0xe4, 0xbc, 0xb3,
	0x67, 0x6b, 0xe4, 0x79, 0x13, 0x85, 0x4c, 0x0f, 0x47, 0x4d, 0x84, 0x56, 0x72, 0x4b, 0x30, 0xe9,
	0x09, 0xd5, 0x16, 0x9b, 0x31, 0x79, 0x13, 0x5d, 0x03, 0x11, 0x73, 0x62, 0xd7, 0xf8, 0xec, 0x2f,
	0x9b, 0x08, 0xe5, 0x23, 0x51, 0xc4, 0x84, 0x2c, 0xd2, 0x33, 0xdf, 0x44, 0x70, 0xa6, 0xc3, 0xac,
	0x39, 0x28, 0xe6, 0xf7, 0x11, 0xc4, 0xe9, 0x9c, 0xd9, 0x59, 0xb8, 0x15, 0xd4, 0x2b, 0xa1, 0x89,
	0x2e, 0xeb, 0x23, 0xc7, 0x99, 0x3d, 0x72, 0x40, 0x4e, 0xb4, 0x05, 0x72, 0x04, 0xae, 0x12, 0xac,
	0xa6, 0xcf, 0xff, 0xdd, 0x04, 0xcc, 0xec, 0xe8, 0x7a, 0xab, 0xc5, 0x95, 0x66, 0xfe, 0x1f, 0x8c,
	0x96, 0xf1, 0xae, 0x58, 0x97, 0x0d, 0x33, 0xda, 0x5d, 0xa9, 0x42, 0x92, 0x75, 0xe7, 0x24, 0x33,
	0x42, 0xa5, 0x2d, 0x2b, 0xec, 0xb7, 0x00, 0xcc, 0xe5, 0x4a, 0x55, 0xad, 0x85, 0xba, 0xf2, 0x1a,
	0x88, 0xc9, 0xa9, 0x33, 0x0f, 0xe9, 0xb2, 0x4a, 0x6d, 0xdf, 0x04, 0xd6, 0x0e, 0x4d, 0x97, 0x25,
	0xdb, 0xc7, 0x6c, 0xf7, 0xec, 0x42, 0x35, 0xb6, 0x65, 0x89, 0x5a, 0xf9, 0x35, 0x33, 0x42, 0x47,
	0x3b, 0x1e, 0x48, 0xb1, 0x82, 0x53, 0x60, 0x5b, 0x4e, 0xa6, 0x41, 0x22, 0x33, 0x48, 0xdb, 0xfc,
	0x3d, 0x98, 0xd1, 0xab, 0xae, 0x89, 0x2e, 0xd4, 0xea, 0x45, 0x99, 0xa0, 0x76, 0x6e, 0xa5, 0x4b,
	0xa4, 0x21, 0x61, 0x52, 0xaf, 0xb6, 0xe6, 0xe8, 0x01, 0x51, 0xba, 0x53, 0x63, 0x6f, 0xc3, 0xa4,
	0xcf, 0x5c, 0xc3, 0x30, 0x6d, 0xad, 0x76, 0xb5, 0x35, 0xee, 0xb1, 0xd5, 0x30, 0xee, 0xd4, 0xd8,
	0x4d, 0x98, 0xb6, 0xee, 0x43, 0xd4, 0x82, 0xf5, 0x7f, 0x5a, 0xa7, 0xa8, 0x71, 0x53, 0x84, 0x0c,
	0x9b, 0xbb, 0x83, 0xac, 0xa3, 0x88, 0x16, 0xaa, 0x99, 0xb0, 0x84, 0x35, 0xc5, 0xde, 0x53, 0x4d,
	0x72, 0x44, 0x4b, 0xd3, 0x35, 0xf6, 0x01, 0x70, 0xf6, 0x0c, 0xb8, 0xa0, 0x81, 0x35, 0x92, 0x5d,
	0x52, 0xc7, 0x56, 0x58, 0x98, 0xa6, 0x7a, 0x0e, 0x5a, 0xa0, 0xc3, 0x55, 0x86, 0xd1, 0x96, 0x25,
	0x59, 0xd2, 0x0d, 0x9a, 0x31, 0xd6, 0x5e, 0xa9, 0x4a, 0x60, 0xef, 0x39, 0x3a, 0x21, 0x61, 0x61,
	0x44, 0x72, 0x37, 0xb1, 0x39, 0x18, 0x57, 0x54, 0x67, 0x17, 0xd6, 0x54, 0x59, 0x2a, 0x1d, 0xd0,
	0x23, 0x25, 0x38, 0xe0, 0x88, 0x30, 0xa6, 0xa8, 0x74, 0x7f, 0x3c, 0x20, 0xe2, 0xac, 0x0e, 0x33,
	0xa2, 0x89, 0x8b, 0xb0, 0xd7, 0x8e, 0x84, 0x75, 0x5a, 0x73, 0xbf, 0xda, 0x81, 0xa7, 0xdb, 0xb7,
	0x6e, 0xa9, 0x1b, 0x44, 0xdd, 0x6d, 0x55, 0xc2, 0x3a, 0x49, 0xd0, 0x11, 0x61, 0x4a, 0x0c, 0x6a,
	0x64, 0xbf, 0x8f, 0xe0, 0x1d, 0xea, 0x15, 0x2b, 0x8f, 0x44, 0xa5, 0x84, 0xcb, 0x8e, 0xbd, 0x96,
	0xff, 0x39, 0xe2, 0x3f, 0xd7, 0x9b, 0xff, 0x5b, 0xd4, 0xce, 0x57, 0xe8, 0x6b, 0x5f, 0x20, 0x09,
	0xb1, 0xab, 0x14, 0x85, 0x21, 0xde, 0x24, 0xdf, 0x0d, 0xfa, 0xf7, 0x9b, 0x30, 0xc4, 0x73, 0x54,
	0x3c, 0x45, 0x70, 0x9a, 0xf6, 0xc9, 0x9b, 0x80, 0x9d, 0xfe, 0x58, 0x34, 0xe0, 0x7a, 0x6f, 0xfd,
	0x71, 0xdb, 0xf6, 0xf4, 0xa5, 0x5f, 0x88, 0x8b, 0x1d, 0x25, 0xcc, 0x7d, 0xea, 0xf5, 0x2e, 0xca,
	0xb2, 0xba, 0x6f, 0xfe, 0x97, 0x9b, 0xe9, 0xda, 0x1d, 0xfb, 0xd4, 0x20, 0xe6, 0x6e, 0x98, 0x4a,
	0x37, 0x64, 0x99, 0xae, 0x30, 0x6f, 0xba, 0xe7, 0x46, 0xbb, 0x18, 0x1a, 0x30, 0x57, 0x98, 0x27,
	0xb1, 0xb3, 0xbb, 0x30, 0xe1, 0x3b, 0x2f, 0xc8, 0x86, 0x18, 0x0b, 0xbc, 0x40, 0x72, 0x9f, 0xf6,
	0x1d, 0xcf, 0xa0, 0xad, 0x01, 0x61, 0xdc, 0x73, 0x0a, 0x90, 0xdd, 0xb0, 0x00, 0x31, 0xb5, 0x6e,
	0xe8, 0x52, 0x19, 0x17, 0x1a, 0x52, 0x8d, 0x63, 0xc8, 0xfe, 0x1f, 0xa2, 0x7b, 0xff, 0x7d, 0x24,
	0x00, 0x6d, 0xdd, 0x91, 0x6a, 0xec, 0x32, 0x8c, 0xba, 0x64, 0x0b, 0x8d, 0x2c, 0x77, 0xd5, 0x53,
	0x3b, 0xfb, 0x00, 0x21, 0x61, 0xb8, 0x25, 0xbf, 0x93, 0x65, 0x37, 0x80, 0xb5, 0x35, 0x14, 0xb1,
	0x8a, 0xad, 0xea, 0x06, 0x37, 0xee, 0x77, 0x32, 0x4e, 0x85, 0xee, 0x3b, 0x32, 0xec, 0x75, 0x98,
	0x6a, 0xd7, 0x34, 0x5d, 0x5e, 0x6b, 0x73, 0x39, 0xd1, 0xa6, 0xbd, 0x93, 0x65, 0x17, 0x61, 0xa4,
	0x58, 0xa9, 0x59, 0x10, 0x4d, 0x2b, 0x48, 0x65, 0x8e, 0xf5, 0x38, 0xad, 0x21, 0x21, 0x56, 0xac,
	0xd4, 0x08, 0x02, 0xd4, 0xee, 0x94, 0xd9, 0x15, 0x60, 0x4c, 0xf1, 0x1a, 0xc6, 0x5a, 0x41, 0xb4,
	0x2a, 0x3b, 0xdc, 0x84, 0x5f, 0x63, 0xb4, 0x58, 0xa9, 0x3d, 0xc0, 0x58, 0xa3, 0xa5, 0x1f, 0xf6,
	0x3a, 0x8c, 0x90, 0x71, 0xd0, 0xb4, 0x5a, 0xa1, 0xaa, 0x96, 0x31, 0x37, 0x99, 0x44, 0x97, 0x46,
	0x33, 0x71, 0xdf, 0xec, 0x98, 0x43, 0xa1, 0x69, 0x35, 0x52, 0x87, 0x8b, 0x35, 0xac, 0x87, 0x7b,
	0x6a, 0x19, 0xb3, 0x5f, 0x82, 0x09, 0x9a, 0x79, 0xcb, 0x58, 0x2c, 0x17, 0x0c, 0xa9, 0x8a, 0xd5,
	0xba, 0xc1, 0x4d, 0x27, 0xd1, 0xa5, 0x91, 0x5c, 0x8c, 0x14, 0x51, 0x16, 0x22, 0xdc, 0x0f, 0xff,
	0x0b, 0x84, 0x71, 0x4b, 0xee, 0x26, 0x16, 0xcb, 0xef, 0x59, 0x52, 0xd7, 0xfe, 0x16, 0xbd, 0x68,
	0xa2, 0xbf, 0x41, 0x90, 0x84, 0x29, 0x17, 0xf4, 0x71, 0x1d, 0xde, 0x83, 0x69, 0x3e, 0x9d, 0xe5,
	0xd3, 0xeb, 0x70, 0x0a, 0x66, 0x5a, 0x75, 0x3a, 0xaf, 0x0c, 0x5a, 0x85, 0x04, 0x4c, 0x6f, 0xe3,
	0x52, 0x5d, 0x93, 0x8c, 0x03, 0x5f, 0x63, 0x64, 0x9d, 0x4f, 0x2f, 0x03, 0x07, 0x2c, 0x45, 0x58,
	0x6e, 0x64, 0x15, 0x4a, 0x93, 0xbb, 0x28, 0x52, 0x2d, 0xbb, 0x87, 0xf5, 0x47, 0xad, 0xab, 0x28,
	0x97, 0x81, 0xd0, 0xda, 0x32, 0x9c, 0x87, 0xe9, 0x1b, 0xe5, 0x06, 0x49, 0x1f, 0xbe, 0xd6, 0x58,
	0x7a, 0x83, 0x4f, 0x5f, 0xe5, 0x33, 0xcb, 0x7c, 0x26, 0x93, 0x3b, 0x4d, 0xa1, 0x82, 0x05, 0xbb,
	0xc6, 0x5c, 0xe8, 0x2c, 0x9c, 0xe1, 0x57, 0x72, 0x67, 0xe9, 0x39, 0xdd, 0xaa, 0x66, 0xcf, 0x1e,
	0x36, 0x11, 0x67, 0x12, 0xb2, 0xcc, 0x1a, 0x9f, 0x21, 0x98, 0x2c, 0x97, 0xa2, 0xa7, 0x5a, 0x15,
	0xeb, 0x8f, 0xbc, 0x64, 0x6b, 0xf2, 0x79, 0x13, 0xad, 0x1e, 0x36, 0x51, 0xe6, 0xa8, 0x89, 0xa2,
	0x6b, 0x19, 0x7e, 0x2d, 0xcd, 0x67, 0xd2, 0xb9, 0xb3, 0x01, 0x85, 0xf2, 0x31, 0x5a, 0x28, 0xb7,
	0xc1, 0x5e, 0xee, 0x0a, 0x4c, 0x79, 0x8f, 0x0a, 0x5b, 0x92, 0x7d, 0xde, 0x44, 0x26, 0x46, 0x1d,
	0x3c, 0x6a, 0xa2, 0x81, 0x0d, 0x3e, 0xb3, 0xce, 0x5f, 0xcd, 0xf1, 0x1d, 0x60, 0xe4, 0xa4, 0xab,
	0x6a, 0x1e, 0x4d, 0xa7, 0xf9, 0xcc, 0x0a, 0x9f, 0xce, 0xe4, 0x52, 0x30, 0xe5, 0x87, 0x84, 0xad,
	0xfe, 0x8d, 0x52, 0xd4, 0x39, 0x42, 0x48, 0xe7, 0x2a, 0x9f, 0x5e, 0x73, 0x30, 0x27, 0xc7, 0xcc,
	0xe6, 0x23, 0xd1, 0x0c, 0xb3, 0xe2, 0x14, 0xdd, 0x07, 0x99, 0xa8, 0x55, 0x7a, 0xcf, 0x47, 0xa2,
	0x23, 0xcc, 0xe8, 0xfc, 0x27, 0x83, 0x04, 0xd3, 0xd1, 0xe2, 0x9c, 0x77, 0xd8, 0xf3, 0x30, 0x45,
	0xa8, 0x63, 0x5b, 0xd5, 0xaf, 0x3b, 0xb4, 0x9b, 0x30, 0xf9, 0xa3, 0xaf, 0x68, 0xc7, 0xfe, 0x46,
	0x40, 0x85, 0xd4, 0xca, 0x53, 0x16, 0xd8, 0x7b, 0xf7, 0x75, 0x4a, 0x88, 0xbe, 0xf3, 0xbb, 0x4f,
	0x98, 0xd4, 0x03, 0x24, 0x68, 0x92, 0xb5, 0xdd, 0x5b, 0xc5, 0xe3, 0xae, 0xb8, 0x03, 0x99, 0x49,
	0x96, 0x3a, 0xb3, 0xea, 0xd0, 0xac, 0x68, 0x32, 0x3f, 0xb7, 0x01, 0x37, 0xea, 0x58, 0xf2, 0x59,
	0x21, 0x5f, 0xd6, 0xa4, 0xbe, 0x62, 0xfe, 0xd7, 0x63, 0xc5, 0xc5, 0x2c, 0xed, 0xba, 0x66, 0xab,
	0xc1, 0x1c, 0x6e, 0x07, 0xa7, 0x52, 0x57, 0x25, 0x59, 0xd4, 0xf5, 0xae, 0x88, 0x23, 0x24, 0x4c,
	0xd8, 0x50, 0x95, 0x4e, 0xa1, 0xa9, 0xc2, 0xfe, 0x7a, 0xab, 0x5a, 0x4b, 0x6c, 0x58, 0xd1, 0x5a,
	0x80, 0x23, 0x75, 0x6c, 0xb4, 0xc4, 0x86, 0x13, 0x6c, 0xc8, 0xb9, 0x12, 0x70, 0xde, 0x07, 0x56,
	0x15, 0x62, 0x5d, 0x91, 0xdc, 0xb1, 0x55, 0x85, 0xe1, 0x4f, 0x59, 0x55, 0x08, 0x7b, 0xab, 0x0a,
	0xd7, 0xee, 0xbc, 0x68, 0xa2, 0x5b, 0x70, 0x1e, 0x4e, 0xd3, 0x4e, 0x25, 0x83, 0x73, 0x5f, 0x24,
	0x6d, 0xa6, 0xae, 0x53, 0x30, 0x65, 0x8b, 0x79, 0x9b, 0xc3, 0xab, 0xfc, 0x7a, 0xee, 0x4a, 0xc0,
	0x25, 0x44, 0xc7, 0x04, 0x74, 0x09, 0xa6, 0x7c, 0x2b, 0xa5, 0x53, 0xc2, 0xb8, 0x08, 0x93, 0xde,
	0x49, 0x72, 0x09, 0xda, 0xf9, 0x22, 0xbc, 0x41, 0x92, 0x45, 0x60, 0xd9, 0xc1, 0xdc, 0xfc, 0x31,
	0xba, 0xf9, 0x3d, 0xb7, 0x6c, 0x0e, 0xe1, 0x74, 0x6f, 0xf8, 0xf9, 0x27, 0x49, 0x18, 0xb5, 0xf2,
	0xf3, 0x76, 0x0d, 0x97, 0x08, 0xd7, 0xfc, 0x41, 0x18, 0xa6, 0xcc, 0xb1, 0xc5, 0x9a, 0x26, 0x16,
	0x4a, 0x58, 0x33, 0xa4, 0x5d, 0x09, 0x97, 0x0b, 0x8f, 0xf6, 0xe9, 0x55, 0xd7, 0xbf, 0x86, 0xfe,
	0xa9, 0x89, 0xce, 0x48, 0x7a, 0x63, 0x71, 0x63, 0x79, 0x79, 0x79, 0x51, 0xc7, 0x9a, 0x84, 0xf5,
	0x45, 0x67, 0x36, 0x16, 0x4b, 0x6a, 0xb5, 0xa8, 0x1e, 0x35, 0xd1, 0x9f, 0x86, 0xe0, 0x5c, 0x19,
	0xcb, 0xf2, 0x22, 0x2e, 0x57, 0xf0, 0xfb, 0x5a, 0x3a, 0xdd, 0x41, 0xd4, 0x25, 0xa5, 0x65, 0x57,
	0x97, 0x7b, 0x91, 0x5a, 0xeb, 0x49, 0x2a, 0xdb, 0x51, 0xea, 0x8c, 0x54, 0xd9, 0x5f, 0x5c, 0xeb,
	0x1c, 0x3d, 0x1c, 0xd7, 0x3d, 0x98, 0x6e, 0x54, 0xf7, 0x45, 0x0d, 0xb7, 0xbd, 0x9f, 0xd8, 0x6b,
	0x54, 0xdb, 0x5e, 0xce, 0x57, 0xb0, 0x82, 0x35, 0xa9, 0xb4, 0xa8, 0x4b, 0x4a, 0x45, 0xc6, 0x8b,
	0x8a, 0x54, 0xf2, 0xcb, 0xfc, 0x47, 0x13, 0xf5, 0x51, 0xa4, 0xc0, 0x20, 0x0a, 0x4e, 0x7e, 0x18,
	0x42, 0xc2, 0x84, 0x3d, 0x13, 0x9b, 0xf6, 0x44, 0x6c, 0xed, 0xb3, 0x0f, 0x60, 0xb8, 0x2a, 0x92,
	0x9a, 0xa0, 0xa2, 0x96, 0xb1, 0x75, 0xb3, 0x38, 0x94, 0x5b, 0x3c, 0x7a, 0x7c, 0xc1, 0x5d, 0x8e,
	0xbd, 0xe8, 0x92, 0xa1, 0xc4, 0x8a, 0x2e, 0x60, 0x52, 0x7a, 0x8d, 0x59, 0xcd, 0xe4, 0xae, 0x8a,
	0xd5, 0x60, 0xb6, 0xa3, 0x34, 0xb7, 0x46, 0xaa, 0x0b, 0x67, 0x02, 0x37, 0xe1, 0x3d, 0xc7, 0x48,
	0x6e, 0xca, 0xa9, 0x1c, 0x84, 0xc9, 0x6d, 0xc4, 0x87, 0xd6, 0x6d, 0xc4, 0x4c, 0xcb, 0x8f, 0x77,
	0x17, 0x6d, 0xc0, 0xb0, 0xb9, 0xf5, 0x9c, 0x5e, 0x84, 0x49, 0x2f, 0xa6, 0x02, 0xee, 0x68, 0x39,
	0x24, 0xc4, 0x2c, 0x51, 0x2b, 0xda, 0x3c, 0xcc, 0x3a, 0x0b, 0x54, 0x57, 0x77, 0x0d, 0x73, 0x26,
	0x0a, 0x0d, 0xac, 0xe9, 0x66, 0xb4, 0x11, 0xb2, 0x48, 0x47, 0xed, 0x01, 0xa5, 0x77, 0xb2, 0x33,
	0xb6, 0xc2, 0x36, 0x95, 0xdf, 0xb1, 0xc4, 0xd9, 0x2d, 0xe0, 0xd4, 0x1a, 0x36, 0x43, 0x52, 0x2a,
	0x05, 0xfd, 0x40, 0x37, 0x70, 0xd5, 0x31, 0xd5, 0x1f, 0x68, 0x6a, 0xda, 0x91, 0xdf, 0x26, 0xe2,
	0xb6, 0xa5, 0xeb, 0x30, 0xa6, 0xa8, 0x85, 0xa2, 0xaa, 0x94, 0xe9, 0x1e, 0xef, 0x5e, 0xad, 0xec,
	0x13, 0x46, 0x14, 0x35, 0xa7, 0x2a, 0x65, 0x2b, 0xdb, 0x9b, 0xc9, 0x8f, 0x71, 0x29, 0x5b, 0xc9,
	0xd9, 0xca, 0xf2, 0x8b, 0x9d, 0x93, 0xb3, 0xcb, 0x40, 0xdb, 0xc1, 0x37, 0x5a, 0x74, 0x1a, 0x49,
	0x7e, 0xbe, 0x0b, 0x36, 0x73, 0x76, 0x17, 0x91, 0x4c, 0xbe, 0x0d, 0x5d, 0xcf, 0xbd, 0x49, 0xaa,
	0xe5, 0xa9, 0xf1, 0xb0, 0xfb, 0x30, 0x55, 0xaa, 0xeb, 0x86, 0x5a, 0xf5, 0x1b, 0xb3, 0x52, 0xfe,
	0x97, 0x7a, 0x2a, 0xd4, 0x04, 0x17, 0x8e, 0x9c, 0x5a, 0xc8, 0x84, 0xe5, 0xc1, 0xeb, 0xd8, 0xd5,
	0x0d, 0x27, 0x53, 0x5a, 0x9e, 0x47, 0xba, 0x17, 0x45, 0x7c, 0x67, 0xa2, 0xbf, 0x1b, 0x3e, 0x63,
	0xa3, 0xaf, 0xd4, 0x8d, 0x20, 0xac, 0x44, 0xbb, 0x11, 0xb2, 0xbb, 0xe1, 0x75, 0xbc, 0x0e, 0x31,
	0xbb, 0x6e, 0x5a, 0xa9, 0xd5, 0x09, 0x73, 0xea, 0x7c, 0x50, 0x02, 0x15, 0xbd, 0x5d, 0xab, 0xb3,
	0x6b, 0x00, 0xb4, 0x3c, 0x6a, 0xea, 0x8d, 0x77, 0xd5, 0x1b, 0xb2, 0x24, 0x4d, 0xb5, 0x3b, 0x10,
	0xa3, 0x6a, 0x0d, 0x53, 0xef, 0x1c, 0xd1, 0xbb, 0x10, 0xb8, 0xb2, 0x76, 0x6e, 0x3f, 0x78, 0xe8,
	0xe9, 0x89, 0x19, 0x81, 0xa5, 0xbc, 0x53, 0xb1, 0x22, 0xb0, 0x43, 0x6f, 0x54, 0xb9, 0x0b, 0x5d,
	0x6b, 0x1f, 0x43, 0x54, 0x72, 0xa7, 0xca, 0x6e, 0xc2, 0x90, 0x1d, 0x41, 0x95, 0xbb, 0x48, 0xb4,
	0xce, 0x05, 0xfb, 0xbf, 0xe7, 0xf5, 0x1e, 0x11, 0xa2, 0xd4, 0x7b, 0x95, 0x3d, 0x07, 0x83, 0x36,
	0xc1, 0x62, 0xdb, 0xbe, 0xbc, 0xb0, 0x9b, 0xd8, 0x1b, 0x10, 0x2b, 0xa9, 0xaa, 0x56, 0x96, 0x14,
	0xd1, 0x84, 0x11, 0x13, 0xc4, 0x99, 0x3f, 0x83, 0x91, 0xb9, 0xdb, 0x6c, 0x89, 0x09, 0x6e, 0x1d,
	0xf6, 0x5d, 0x18, 0x55, 0xd4, 0xc2, 0xde, 0x86, 0x6e, 0x5f, 0xc0, 0x90, 0xe2, 0x56, 0x67, 0x2e,
	0x3f, 0xac, 0xa8, 0x5f, 0xdd, 0xd0, 0xe9, 0x1d, 0x12, 0xfb, 0x10, 0x62, 0x6e, 0xd5, 0xe9, 0x9e,
	0x2f, 0xf7, 0x46, 0x9f, 0x3d, 0x76, 0x6b, 0x6e, 0xf5, 0x0b, 0xb0, 0xd7, 0x32, 0x7b, 0x1f, 0x66,
	0x64, 0xb5, 0xa2, 0x17, 0x74, 0x43, 0xc3, 0x62, 0xd5, 0x4c, 0x59, 0xce, 0x47, 0x91, 0x5c, 0xd7,
	0x02, 0xc1, 0x94, 0xa9, 0xb6, 0x6d, 0x6b, 0x39, 0x9f, 0x3f, 0x7e, 0x03, 0x86, 0x65, 0xb5, 0x52,
	0xd0, 0x70, 0x09, 0x4b, 0x26, 0xb5, 0x9e, 0xed, 0x39, 0xce, 0xb1, 0x67, 0x8f, 0x3d, 0xaa, 0x5b,
	0x03, 0x42, 0x4c, 0x56, 0x2b, 0x02, 0x7d, 0x34, 0xb3, 0x7b, 0x19, 0x2b, 0xa4, 0x14, 0x52, 0xa8,
	0xeb, 0x45, 0x5a, 0x57, 0x0a, 0x0e, 0x6f, 0x50, 0x00, 0x53, 0xf6, 0x86, 0x2c, 0x3f, 0xd4, 0x8b,
	0xec, 0x35, 0x18, 0x71, 0xea, 0x27, 0x44, 0xf5, 0x54, 0x57, 0xd5, 0x98, 0x48, 0xeb, 0x26, 0xa6,
	0xae, 0x00, 0x50, 0xd7, 0x8b, 0x76, 0x55, 0xee, 0x74, 0xcf, 0xbd, 0x19, 0x79, 0xf6, 0xd8, 0xa5,
	0xb8, 0x35, 0x28, 0x0c, 0xd5, 0xf5, 0x22, 0x2d, 0xd6, 0x7d, 0x1d, 0xa6, 0x15, 0xb5, 0x20, 0xab,
	0x25, 0x51, 0x36, 0x73, 0x83, 0xa1, 0xa9, 0x72, 0xa1, 0x26, 0x8b, 0x0a, 0xe6, 0x92, 0xc7, 0x5e,
	0xfe, 0x46, 0x4d, 0xe2, 0x73, 0xd7, 0x54, 0xdd, 0xb4, 0x34, 0x1f, 0x98, 0x8a, 0x6c, 0x11, 0x26,
	0x82, 0xec, 0xbd, 0x43, 0xec, 0x2d, 0x04, 0xee, 0x89, 0x36, 0x23, 0x56, 0xaa, 0xa7, 0x5e, 0xc6,
	0xe5, 0x36, 0x1f, 0x5f, 0x86, 0x90, 0xbe, 0xcf, 0xcd, 0x13, 0x93, 0x97, 0x03, 0x87, 0x60, 0xc7,
	0x77, 0x24, 0x5a, 0x16, 0x4d, 0x2e, 0x2c, 0x84, 0xf4, 0x7d, 0xf6, 0x3a, 0x84, 0x54, 0x9d, 0x3b,
	0xdb, 0xe5, 0x7e, 0xe8, 0x6b, 0xde, 0x83, 0xd0, 0xad, 0xaf, 0x9a, 0x74, 0x63, 0x84, 0x7c, 0x5d,
	0x4f, 0xd0, 0xb1, 0x22, 0xca, 0xdc, 0x27, 0xbd, 0x5f, 0x71, 0x4f, 0x3e, 0x7b, 0xec, 0x55, 0x26,
	0x90, 0x65, 0xd8, 0x7c, 0x75, 0x87, 0xbe, 0x71, 0x17, 0x90, 0x8b, 0xb2, 0x5a, 0xda, 0xc3, 0x65,
	0xf2, 0xf9, 0x0b, 0x39, 0x78, 0x2f, 0x77, 0x59, 0x32, 0x43, 0x4e, 0x01, 0x39, 0x67, 0xa9, 0x6d,
	0x53, 0x2d, 0xf6, 0x9b, 0xc0, 0xb4, 0x59, 0xe2, 0x89, 0x25, 0x3e, 0x70, 0x4e, 0x7c, 0xfa, 0x0e,
	0xeb, 0x18, 0x12, 0xc6, 0x8a, 0x3e, 0xd3, 0x6b, 0x30, 0x23, 0x8b, 0x75, 0xa5, 0xf4, 0xa8, 0x20,
	0xed, 0x99, 0x84, 0xc1, 0xaa, 0x4a, 0xd5, 0xc4, 0x12, 0xe6, 0x16, 0x93, 0xe8, 0x52, 0x54, 0x98,
	0xb4, 0x9a, 0xef, 0xec, 0xe1, 0x3b, 0xca, 0x7d, 0xbb, 0x8d, 0x3d, 0x80, 0xb8, 0xba, 0xbb, 0x2b,
	0x4b, 0x0a, 0x2e, 0xe8, 0x75, 0xad, 0x21, 0x35, 0xc4, 0xa2, 0x24, 0x4b, 0xc6, 0x81, 0x55, 0x2f,
	0x5a, 0x22, 0xb1, 0xa5, 0x83, 0xc7, 0xd3, 0x52, 0xdb, 0x76, 0x6b, 0xdd, 0x53, 0xcb, 0xae, 0x6f,
	0xc1, 0xc9, 0x44, 0x71, 0x6a, 0x07, 0x39, 0x73, 0x8d, 0x4a, 0xb5, 0x5d, 0xb1, 0xa8, 0x49, 0x25,
	0x57, 0x49, 0x84, 0x5b, 0x0e, 0x04, 0x83, 0x24, 0x95, 0x0a, 0xf8, 0x1e, 0xd6, 0x1f, 0x91, 0x4a,
	0x4e, 0x6e, 0xfc, 0xa3, 0xc7, 0xe4, 0xf6, 0xcd, 0xc1, 0x84, 0x48, 0x18, 0xb7, 0xcd, 0x39, 0x52,
	0x66, 0x3a, 0x73, 0x8e, 0x72, 0x4d, 0x52, 0x1b, 0xae, 0x4f, 0x13, 0xd6, 0xbb, 0xcc, 0x20, 0x08,
	0x36, 0x29, 0xde, 0x36, 0xb5, 0x5a, 0x9f, 0x8a, 0x7d, 0x13, 0x18, 0x9f, 0x1d, 0x9d, 0xdb, 0xe8,
	0x32, 0x81, 0x5e, 0xf5, 0xd6, 0x04, 0x82, 0x30, 0xa6, 0x7b, 0x9b, 0xae, 0xfd, 0x05, 0x7a, 0xd1,
	0x44, 0x7f, 0x86, 0xe0, 0x2c, 0x4c, 0xe4, 0x44, 0x5d, 0x2a, 0xf9, 0x28, 0xe1, 0x70, 0x9a, 0x5f,
	0x5b, 0xe1, 0x57, 0x78, 0x52, 0x94, 0x82, 0x19, 0x60, 0x4d, 0x60, 0xe6, 0xaf, 0x96, 0x65, 0x21,
	0xde, 0xa9, 0xda, 0x86, 0xae, 0xc2, 0x5c, 0x27, 0xba, 0x19, 0x4a, 0x67, 0x60, 0xbd, 0x63, 0x1d,
	0xec, 0x74, 0x7a, 0x8d, 0x14, 0xc1, 0x56, 0xf8, 0x4c, 0x96, 0x5f, 0x59, 0xe5, 0x57, 0xd6, 0xf8,
	0x95, 0x75, 0x7e, 0x75, 0x99, 0x5f, 0x5d, 0xe7, 0xd7, 0x56, 0x73, 0x09, 0x88, 0x11, 0x54, 0xe9,
	0xa2, 0x91, 0x83, 0x87, 0x4d, 0x34, 0x40, 0xaf, 0x99, 0x73, 0x17, 0x81, 0x75, 0xf0, 0xdb, 0x6e,
	0xc5, 0xfd, 0x9d, 0x26, 0x38, 0xdf, 0x2c, 0x2c, 0xf3, 0xe9, 0xb4, 0x29, 0xe8, 0x20, 0x24, 0xaf,
	0xe0, 0xc8, 0x61, 0x13, 0x0d, 0x13, 0xc1, 0x15, 0x3e, 0xbd, 0x9a, 0x9b, 0x07, 0xa8, 0xd4, 0xea,
	0xee, 0xda, 0x15, 0x73, 0xd8, 0x44, 0x63, 0xa4, 0x76, 0x95, 0xe5, 0xd3, 0xeb, 0xfc, 0x4a, 0x36,
	0x97, 0x80, 0xa1, 0x46, 0xd5, 0x6d, 0xe3, 0xc2, 0x61, 0x13, 0x9d, 0x37, 0x6d, 0xac, 0x6c, 0xf0,
	0x2b, 0x57, 0x4d, 0x67, 0xae, 0x43, 0xd0, 0x2d, 0x38, 0x75, 0xd8, 0x44, 0x93, 0xa4, 0x70, 0x97,
	0xe6, 0x33, 0x99, 0xdc, 0x65, 0x98, 0x24, 0x07, 0xa2, 0x7d, 0x0c, 0xb9, 0x45, 0xb9, 0xc3, 0x26,
	0x9a, 0x21, 0xa2, 0xab, 0x7c, 0x66, 0x2d, 0x77, 0x19, 0xc6, 0x5b, 0x29, 0xde, 0x1d, 0xde, 0xdc,
	0x61, 0x13, 0xc5, 0xcd, 0xf0, 0x32, 0xeb, 0x7c, 0x66, 0x83, 0xcf, 0x5c, 0xcd, 0xad, 0x43, 0x3c,
	0x20, 0x3f, 0xdb, 0x3a, 0xb3, 0xcf, 0x9b, 0x28, 0x49, 0x29, 0xf6, 0x19, 0x12, 0x73, 0x86, 0x5f,
	0x59, 0x21, 0x35, 0xc4, 0x45, 0x98, 0xf1, 0x67, 0x10, 0x77, 0xc1, 0xef, 0xf2, 0x61, 0x13, 0x5d,
	0x3a, 0x6a, 0xa2, 0x81, 0xd5, 0x34, 0x9f, 0x5c, 0x5d, 0xcd, 0x5d, 0x81, 0x69, 0xdf, 0x7a, 0x75,
	0xc7, 0xbf, 0x7e, 0xd8, 0x44, 0x59, 0xd3, 0xfe, 0xda, 0x1a, 0xbf, 0x96, 0xcd, 0x47, 0xa2, 0x03,
	0xcc, 0xa0, 0xf3, 0x75, 0xc7, 0x30, 0x33, 0x92, 0x8f, 0x44, 0xc7, 0x18, 0x26, 0x1f, 0x89, 0x9e,
	0x67, 0x2e, 0xe4, 0x23, 0xd1, 0x49, 0x66, 0x2a, 0x1f, 0x89, 0xce, 0x30, 0x5c, 0x3e, 0x12, 0x8d,
	0x33, 0x73, 0xf9, 0x48, 0x34, 0xc1, 0x9c, 0xc9, 0x47, 0xa2, 0x67, 0x98, 0x64, 0x3e, 0x12, 0xbd,
	0xc4, 0x5c, 0xce, 0x47, 0xa2, 0x0b, 0xcc, 0x95, 0x7c, 0x24, 0x7a, 0x85, 0xe1, 0xf3, 0x91, 0x68,
	0x8a, 0x59, 0xca, 0x47, 0xa2, 0x59, 0x66, 0x7d, 0xfe, 0x29, 0x07, 0xa3, 0x9b, 0x1a, 0x16, 0x0d,
	0xec, 0x14, 0x01, 0x32, 0x5d, 0x6b, 0x00, 0xc1, 0xb4, 0xf4, 0x9d, 0x20, 0x5a, 0xea, 0xe5, 0x99,
	0xbf, 0xf2, 0xe9, 0x79, 0x66, 0x67, 0x42, 0xf9, 0x4e, 0x10, 0xa1, 0xf4, 0x32, 0xc7, 0x4f, 0xcb,
	0xd1, 0xbe, 0xf9, 0x86, 0x38, 0xda, 0x5b, 0x67, 0x67, 0xdf, 0x79, 0x7b, 0xec, 0xec, 0x84, 0x97,
	0xfd, 0x6f, 0xe5, 0x65, 0x9c, 0x8f, 0x1b, 0x7d, 0x86, 0x7c, 0x28, 0xf2, 0xb6, 0xf8, 0x50, 0xe4,
	0x4d, 0xf0, 0xa1, 0xfe, 0xff, 0x01, 0x3e, 0xd4, 0xff, 0xfa, 0x7c, 0x68, 0xe0, 0xf5, 0xf9, 0xd0,
	0xc0, 0x5b, 0xe1, 0x43, 0x03, 0x6e, 0x3e, 0xf4, 0xd5, 0xd7, 0xe1, 0x43, 0x5b, 0x83, 0xc1, 0x4c,
	0xe8, 0x57, 0xdf, 0x10, 0x13, 0xda, 0x1a, 0x0c, 0xe2, 0x40, 0xbd, 0x17, 0x2a, 0xa2, 0x6f, 0xa4,
	0x50, 0x11, 0x75, 0x15, 0x2a, 0x3e, 0x57, 0xf4, 0xe4, 0x33, 0x27, 0x8b, 0xea, 0x5b, 0x21, 0x3a,
	0x5d, 0xe8, 0xcd, 0xe7, 0x88, 0x7a, 0x8c, 0xff, 0xec, 0xba, 0xef, 0x8e, 0xa6, 0x0d, 0xd5, 0x3f,
	0x79, 0x89, 0xdc, 0x2f, 0x72, 0x7c, 0x20, 0xaa, 0x9f, 0x7e, 0xf2, 0x12, 0x05, 0xbc, 0x37, 0xa5,
	0x03, 0xa0, 0x3d, 0x91, 0x6e, 0x7f, 0x9f, 0x3b, 0xe5, 0xc1, 0xf7, 0xa3, 0x4f, 0x5e, 0x22, 0xd7,
	0xb3, 0x69, 0x2b, 0x00, 0xb9, 0x13, 0x5b, 0xed, 0xef, 0x73, 0xcb, 0x1d, 0xe0, 0x3b, 0xf7, 0xe4,
	0x25, 0x0a, 0x6c, 0xc9, 0x2d, 0x04, 0xa1, 0xf8, 0xa9, 0x27, 0x2f, 0x51, 0xfb, 0xeb, 0xdc, 0xbb,
	0x5d, 0x61, 0x7c, 0xe2, 0xc9, 0x4b, 0xd4, 0xa5, 0x3d, 0x17, 0x77, 0x73, 0x94, 0x91, 0x27, 0x2f,
	0x51, 0xeb, 0x31, 0x97, 0xed, 0x8c, 0xf3, 0xe7, 0x9e, 0xbc, 0x44, 0x9d, 0x1a, 0x73, 0xab, 0x1d,
	0x01, 0x7f, 0xfc, 0xc9, 0x4b, 0xd4, 0xa1, 0xcd, 0xb9, 0xb6, 0xeb, 0x67, 0x06, 0xba, 0xb0, 0x80,
	0xee, 0xf8, 0xdf, 0xe2, 0x08, 0x5d, 0x59, 0xc0, 0x0c, 0x8c, 0xd1, 0xfb, 0xa3, 0x13, 0x1a, 0x70,
	0x42, 0x03, 0x4e, 0x68, 0xc0, 0x09, 0x0d, 0x38, 0xa1, 0x01, 0x27, 0x34, 0xe0, 0x84, 0x06, 0x7c,
	0x71, 0x68, 0xc0, 0x09, 0x0a, 0x3f, 0x41, 0xe1, 0x27, 0x28, 0xfc, 0x33, 0x45, 0xe1, 0x7f, 0xc4,
	0x41, 0xec, 0x36, 0x36, 0xfe, 0xaf, 0x23, 0xf0, 0x6b, 0xc7, 0x7e, 0xc2, 0xd5, 0xf9, 0x93, 0xad,
	0x8d, 0xe3, 0x3e, 0xd9, 0x7a, 0x6b, 0x9f, 0x68, 0x9d, 0xe0, 0xfe, 0x13, 0xdc, 0x7f, 0x82, 0xfb,
	0x4f, 0x70, 0xff, 0x17, 0x19, 0xf7, 0xbf, 0x0b, 0x40, 0xfe, 0x99, 0x8c, 0x6e, 0x88, 0x06, 0xe6,
	0x12, 0xe4, 0x9f, 0x2c, 0x9d, 0x0e, 0x5a, 0x4a, 0xdb, 0x92, 0x81, 0xb7, 0x4d, 0x21, 0x61, 0x48,
	0xb7, 0x7f, 0x9e, 0xb0, 0x86, 0x13, 0xd6, 0xf0, 0x85, 0x62, 0x0d, 0x93, 0x6d, 0xac, 0xe1, 0x93,
	0xeb, 0xe8, 0x84, 0x38, 0x7c, 0xc1, 0x88, 0x43, 0xef, 0x64, 0xa1, 0x47, 0x9a, 0x90, 0xfb, 0x3d,
	0x74, 0xf8, 0x8b, 0x44, 0xdf, 0x47, 0xbf, 0x48, 0xf4, 0xfd, 0xf2, 0x17, 0x09, 0xf4, 0xc1, 0x51,
	0x02, 0xfd, 0xe8, 0x28, 0x81, 0x7e, 0x7a, 0x94, 0x40, 0x87, 0x47, 0x09, 0xf4, 0xd1, 0x51, 0x02,
	0xfd, 0xfc, 0x28, 0x81, 0x3e, 0x39, 0x4a, 0xf4, 0xfd, 0xf2, 0x28, 0x81, 0x7e, 0xe7, 0xe3, 0x44,
	0xdf, 0xf3, 0x8f, 0x13, 0xe8, 0xf0, 0xe3, 0x44, 0xdf, 0x47, 0x1f, 0x27, 0xfa, 0xbe, 0xf5, 0x8d,
	0x8a, 0x5a, 0xdb, 0xab, 0xa4, 0x6c, 0x84, 0x9d, 0xaa, 0xeb, 0x4b, 0xe4, 0xc7, 0xae, 0xaa, 0x55,
	0x17, 0x6b, 0x9a, 0xda, 0x90, 0xca, 0x58, 0x5b, 0xb4, 0x9b, 0x97, 0x6a, 0xc5, 0x8a, 0xba, 0x84,
	0xdf, 0x37, 0xec, 0xbf, 0xc6, 0xdc, 0xf9, 0xcf, 0x55, 0x17, 0x07, 0xc8, 0x9f, 0x34, 0x5e, 0xf9,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x29, 0xfa, 0xf5, 0xdb, 0x5a, 0x00, 0x00,
}

func (this *Interface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface)
	if !ok {
		that2, ok := that.(Interface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if that1.InterfaceChoice == nil {
		if this.InterfaceChoice != nil {
			return false
		}
	} else if this.InterfaceChoice == nil {
		return false
	} else if !this.InterfaceChoice.Equal(that1.InterfaceChoice) {
		return false
	}
	if that1.DcClusterGroupConnectivityInterfaceChoice == nil {
		if this.DcClusterGroupConnectivityInterfaceChoice != nil {
			return false
		}
	} else if this.DcClusterGroupConnectivityInterfaceChoice == nil {
		return false
	} else if !this.DcClusterGroupConnectivityInterfaceChoice.Equal(that1.DcClusterGroupConnectivityInterfaceChoice) {
		return false
	}
	return true
}
func (this *Interface_EthernetInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_EthernetInterface)
	if !ok {
		that2, ok := that.(Interface_EthernetInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EthernetInterface.Equal(that1.EthernetInterface) {
		return false
	}
	return true
}
func (this *Interface_DedicatedInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_DedicatedInterface)
	if !ok {
		that2, ok := that.(Interface_DedicatedInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DedicatedInterface.Equal(that1.DedicatedInterface) {
		return false
	}
	return true
}
func (this *Interface_DedicatedManagementInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_DedicatedManagementInterface)
	if !ok {
		that2, ok := that.(Interface_DedicatedManagementInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DedicatedManagementInterface.Equal(that1.DedicatedManagementInterface) {
		return false
	}
	return true
}
func (this *Interface_TunnelInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_TunnelInterface)
	if !ok {
		that2, ok := that.(Interface_TunnelInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TunnelInterface.Equal(that1.TunnelInterface) {
		return false
	}
	return true
}
func (this *Interface_LoopbackInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_LoopbackInterface)
	if !ok {
		that2, ok := that.(Interface_LoopbackInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LoopbackInterface.Equal(that1.LoopbackInterface) {
		return false
	}
	return true
}
func (this *Interface_DcClusterGroupConnectivityInterfaceDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_DcClusterGroupConnectivityInterfaceDisabled)
	if !ok {
		that2, ok := that.(Interface_DcClusterGroupConnectivityInterfaceDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupConnectivityInterfaceDisabled.Equal(that1.DcClusterGroupConnectivityInterfaceDisabled) {
		return false
	}
	return true
}
func (this *Interface_DcClusterGroupConnectivityInterfaceEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_DcClusterGroupConnectivityInterfaceEnabled)
	if !ok {
		that2, ok := that.(Interface_DcClusterGroupConnectivityInterfaceEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupConnectivityInterfaceEnabled.Equal(that1.DcClusterGroupConnectivityInterfaceEnabled) {
		return false
	}
	return true
}
func (this *InterfaceListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InterfaceListType)
	if !ok {
		that2, ok := that.(InterfaceListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Interfaces) != len(that1.Interfaces) {
		return false
	}
	for i := range this.Interfaces {
		if !this.Interfaces[i].Equal(that1.Interfaces[i]) {
			return false
		}
	}
	return true
}
func (this *StorageInterfaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageInterfaceType)
	if !ok {
		that2, ok := that.(StorageInterfaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if !this.StorageInterface.Equal(that1.StorageInterface) {
		return false
	}
	return true
}
func (this *StorageInterfaceListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageInterfaceListType)
	if !ok {
		that2, ok := that.(StorageInterfaceListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StorageInterfaces) != len(that1.StorageInterfaces) {
		return false
	}
	for i := range this.StorageInterfaces {
		if !this.StorageInterfaces[i].Equal(that1.StorageInterfaces[i]) {
			return false
		}
	}
	return true
}
func (this *StaticRoutesListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StaticRoutesListType)
	if !ok {
		that2, ok := that.(StaticRoutesListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StaticRoutes) != len(that1.StaticRoutes) {
		return false
	}
	for i := range this.StaticRoutes {
		if !this.StaticRoutes[i].Equal(that1.StaticRoutes[i]) {
			return false
		}
	}
	return true
}
func (this *VnConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration)
	if !ok {
		that2, ok := that.(VnConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if that1.StaticRouteChoice == nil {
		if this.StaticRouteChoice != nil {
			return false
		}
	} else if this.StaticRouteChoice == nil {
		return false
	} else if !this.StaticRouteChoice.Equal(that1.StaticRouteChoice) {
		return false
	}
	if that1.StaticV6RouteChoice == nil {
		if this.StaticV6RouteChoice != nil {
			return false
		}
	} else if this.StaticV6RouteChoice == nil {
		return false
	} else if !this.StaticV6RouteChoice.Equal(that1.StaticV6RouteChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if len(this.DcClusterGroupInterface) != len(that1.DcClusterGroupInterface) {
		return false
	}
	for i := range this.DcClusterGroupInterface {
		if !this.DcClusterGroupInterface[i].Equal(that1.DcClusterGroupInterface[i]) {
			return false
		}
	}
	return true
}
func (this *VnConfiguration_NoStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoStaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_NoStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoStaticRoutes.Equal(that1.NoStaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_StaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_StaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_StaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StaticRoutes.Equal(that1.StaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_NoStaticV6Routes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoStaticV6Routes)
	if !ok {
		that2, ok := that.(VnConfiguration_NoStaticV6Routes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoStaticV6Routes.Equal(that1.NoStaticV6Routes) {
		return false
	}
	return true
}
func (this *VnConfiguration_StaticV6Routes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_StaticV6Routes)
	if !ok {
		that2, ok := that.(VnConfiguration_StaticV6Routes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StaticV6Routes.Equal(that1.StaticV6Routes) {
		return false
	}
	return true
}
func (this *VnConfiguration_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(VnConfiguration_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *VnConfiguration_DcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_DcClusterGroup)
	if !ok {
		that2, ok := that.(VnConfiguration_DcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroup.Equal(that1.DcClusterGroup) {
		return false
	}
	return true
}
func (this *SliVnConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SliVnConfiguration)
	if !ok {
		that2, ok := that.(SliVnConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.StaticRouteChoice == nil {
		if this.StaticRouteChoice != nil {
			return false
		}
	} else if this.StaticRouteChoice == nil {
		return false
	} else if !this.StaticRouteChoice.Equal(that1.StaticRouteChoice) {
		return false
	}
	if that1.StaticV6RouteChoice == nil {
		if this.StaticV6RouteChoice != nil {
			return false
		}
	} else if this.StaticV6RouteChoice == nil {
		return false
	} else if !this.StaticV6RouteChoice.Equal(that1.StaticV6RouteChoice) {
		return false
	}
	return true
}
func (this *SliVnConfiguration_NoStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SliVnConfiguration_NoStaticRoutes)
	if !ok {
		that2, ok := that.(SliVnConfiguration_NoStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoStaticRoutes.Equal(that1.NoStaticRoutes) {
		return false
	}
	return true
}
func (this *SliVnConfiguration_StaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SliVnConfiguration_StaticRoutes)
	if !ok {
		that2, ok := that.(SliVnConfiguration_StaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StaticRoutes.Equal(that1.StaticRoutes) {
		return false
	}
	return true
}
func (this *SliVnConfiguration_NoV6StaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SliVnConfiguration_NoV6StaticRoutes)
	if !ok {
		that2, ok := that.(SliVnConfiguration_NoV6StaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoV6StaticRoutes.Equal(that1.NoV6StaticRoutes) {
		return false
	}
	return true
}
func (this *SliVnConfiguration_StaticV6Routes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SliVnConfiguration_StaticV6Routes)
	if !ok {
		that2, ok := that.(SliVnConfiguration_StaticV6Routes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StaticV6Routes.Equal(that1.StaticV6Routes) {
		return false
	}
	return true
}
func (this *GlobalNetworkConnectionType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalNetworkConnectionType)
	if !ok {
		that2, ok := that.(GlobalNetworkConnectionType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ConnectionChoice == nil {
		if this.ConnectionChoice != nil {
			return false
		}
	} else if this.ConnectionChoice == nil {
		return false
	} else if !this.ConnectionChoice.Equal(that1.ConnectionChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	return true
}
func (this *GlobalNetworkConnectionType_SloToGlobalDr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalNetworkConnectionType_SloToGlobalDr)
	if !ok {
		that2, ok := that.(GlobalNetworkConnectionType_SloToGlobalDr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SloToGlobalDr.Equal(that1.SloToGlobalDr) {
		return false
	}
	return true
}
func (this *GlobalNetworkConnectionType_DisableForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalNetworkConnectionType_DisableForwardProxy)
	if !ok {
		that2, ok := that.(GlobalNetworkConnectionType_DisableForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableForwardProxy.Equal(that1.DisableForwardProxy) {
		return false
	}
	return true
}
func (this *GlobalNetworkConnectionType_EnableForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalNetworkConnectionType_EnableForwardProxy)
	if !ok {
		that2, ok := that.(GlobalNetworkConnectionType_EnableForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableForwardProxy.Equal(that1.EnableForwardProxy) {
		return false
	}
	return true
}
func (this *GlobalNetworkConnectionListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalNetworkConnectionListType)
	if !ok {
		that2, ok := that.(GlobalNetworkConnectionListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.GlobalNetworkConnections) != len(that1.GlobalNetworkConnections) {
		return false
	}
	for i := range this.GlobalNetworkConnections {
		if !this.GlobalNetworkConnections[i].Equal(that1.GlobalNetworkConnections[i]) {
			return false
		}
	}
	return true
}
func (this *VssNetworkConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SloChoice == nil {
		if this.SloChoice != nil {
			return false
		}
	} else if this.SloChoice == nil {
		return false
	} else if !this.SloChoice.Equal(that1.SloChoice) {
		return false
	}
	if that1.SliChoice == nil {
		if this.SliChoice != nil {
			return false
		}
	} else if this.SliChoice == nil {
		return false
	} else if !this.SliChoice.Equal(that1.SliChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	if that1.InterfaceChoice == nil {
		if this.InterfaceChoice != nil {
			return false
		}
	} else if this.InterfaceChoice == nil {
		return false
	} else if !this.InterfaceChoice.Equal(that1.InterfaceChoice) {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if this.OutsideVip != that1.OutsideVip {
		return false
	}
	if this.OutsideVipV6 != that1.OutsideVipV6 {
		return false
	}
	if this.OutsideNameserver != that1.OutsideNameserver {
		return false
	}
	if this.OutsideNameserverV6 != that1.OutsideNameserverV6 {
		return false
	}
	if this.BgpRouterId != that1.BgpRouterId {
		return false
	}
	if this.BgpPeerAddress != that1.BgpPeerAddress {
		return false
	}
	if this.VipVrrpMode != that1.VipVrrpMode {
		return false
	}
	if this.TunnelDeadTimeout != that1.TunnelDeadTimeout {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_DefaultConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_DefaultConfig)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_DefaultConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultConfig.Equal(that1.DefaultConfig) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_SloConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_SloConfig)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_SloConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SloConfig.Equal(that1.SloConfig) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_DefaultSliConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_DefaultSliConfig)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_DefaultSliConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSliConfig.Equal(that1.DefaultSliConfig) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_SliConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_SliConfig)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_SliConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliConfig.Equal(that1.SliConfig) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_SiteToSiteTunnelIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_SiteToSiteTunnelIp)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_SiteToSiteTunnelIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SiteToSiteTunnelIp != that1.SiteToSiteTunnelIp {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_DefaultInterfaceConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_DefaultInterfaceConfig)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_DefaultInterfaceConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultInterfaceConfig.Equal(that1.DefaultInterfaceConfig) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_InterfaceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_InterfaceList)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_InterfaceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InterfaceList.Equal(that1.InterfaceList) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_NoForwardProxy)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_GlobalNetworkList)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration)
	if !ok {
		that2, ok := that.(VssStorageConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.StorageInterfaceChoice == nil {
		if this.StorageInterfaceChoice != nil {
			return false
		}
	} else if this.StorageInterfaceChoice == nil {
		return false
	} else if !this.StorageInterfaceChoice.Equal(that1.StorageInterfaceChoice) {
		return false
	}
	if that1.StorageDeviceChoice == nil {
		if this.StorageDeviceChoice != nil {
			return false
		}
	} else if this.StorageDeviceChoice == nil {
		return false
	} else if !this.StorageDeviceChoice.Equal(that1.StorageDeviceChoice) {
		return false
	}
	if that1.StorageClassChoice == nil {
		if this.StorageClassChoice != nil {
			return false
		}
	} else if this.StorageClassChoice == nil {
		return false
	} else if !this.StorageClassChoice.Equal(that1.StorageClassChoice) {
		return false
	}
	if that1.StaticRouteChoice == nil {
		if this.StaticRouteChoice != nil {
			return false
		}
	} else if this.StaticRouteChoice == nil {
		return false
	} else if !this.StaticRouteChoice.Equal(that1.StaticRouteChoice) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_NoStorageInterfaces) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_NoStorageInterfaces)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_NoStorageInterfaces)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoStorageInterfaces.Equal(that1.NoStorageInterfaces) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_StorageInterfaceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_StorageInterfaceList)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_StorageInterfaceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StorageInterfaceList.Equal(that1.StorageInterfaceList) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_NoStorageDevice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_NoStorageDevice)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_NoStorageDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoStorageDevice.Equal(that1.NoStorageDevice) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_StorageDeviceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_StorageDeviceList)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_StorageDeviceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StorageDeviceList.Equal(that1.StorageDeviceList) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_DefaultStorageClass) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_DefaultStorageClass)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_DefaultStorageClass)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultStorageClass.Equal(that1.DefaultStorageClass) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_StorageClassList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_StorageClassList)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_StorageClassList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StorageClassList.Equal(that1.StorageClassList) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_NoStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_NoStaticRoutes)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_NoStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoStaticRoutes.Equal(that1.NoStaticRoutes) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_StaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_StaticRoutes)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_StaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StaticRoutes.Equal(that1.StaticRoutes) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VolterraCertifiedHw != that1.VolterraCertifiedHw {
		return false
	}
	if len(this.MasterNodes) != len(that1.MasterNodes) {
		return false
	}
	for i := range this.MasterNodes {
		if this.MasterNodes[i] != that1.MasterNodes[i] {
			return false
		}
	}
	if len(this.MasterNodeConfiguration) != len(that1.MasterNodeConfiguration) {
		return false
	}
	for i := range this.MasterNodeConfiguration {
		if !this.MasterNodeConfiguration[i].Equal(that1.MasterNodeConfiguration[i]) {
			return false
		}
	}
	if len(this.WorkerNodes) != len(that1.WorkerNodes) {
		return false
	}
	for i := range this.WorkerNodes {
		if this.WorkerNodes[i] != that1.WorkerNodes[i] {
			return false
		}
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if that1.BondChoice == nil {
		if this.BondChoice != nil {
			return false
		}
	} else if this.BondChoice == nil {
		return false
	} else if !this.BondChoice.Equal(that1.BondChoice) {
		return false
	}
	if that1.NetworkCfgChoice == nil {
		if this.NetworkCfgChoice != nil {
			return false
		}
	} else if this.NetworkCfgChoice == nil {
		return false
	} else if !this.NetworkCfgChoice.Equal(that1.NetworkCfgChoice) {
		return false
	}
	if that1.StorageCfgChoice == nil {
		if this.StorageCfgChoice != nil {
			return false
		}
	} else if this.StorageCfgChoice == nil {
		return false
	} else if !this.StorageCfgChoice.Equal(that1.StorageCfgChoice) {
		return false
	}
	if that1.GpuChoice == nil {
		if this.GpuChoice != nil {
			return false
		}
	} else if this.GpuChoice == nil {
		return false
	} else if !this.GpuChoice.Equal(that1.GpuChoice) {
		return false
	}
	if that1.VmChoice == nil {
		if this.VmChoice != nil {
			return false
		}
	} else if this.VmChoice == nil {
		return false
	} else if !this.VmChoice.Equal(that1.VmChoice) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.K8SClusterChoice == nil {
		if this.K8SClusterChoice != nil {
			return false
		}
	} else if this.K8SClusterChoice == nil {
		return false
	} else if !this.K8SClusterChoice.Equal(that1.K8SClusterChoice) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.UsbPolicyChoice == nil {
		if this.UsbPolicyChoice != nil {
			return false
		}
	} else if this.UsbPolicyChoice == nil {
		return false
	} else if !this.UsbPolicyChoice.Equal(that1.UsbPolicyChoice) {
		return false
	}
	if that1.LocalControlPlaneChoice == nil {
		if this.LocalControlPlaneChoice != nil {
			return false
		}
	} else if this.LocalControlPlaneChoice == nil {
		return false
	} else if !this.LocalControlPlaneChoice.Equal(that1.LocalControlPlaneChoice) {
		return false
	}
	if !this.Sw.Equal(that1.Sw) {
		return false
	}
	if !this.Os.Equal(that1.Os) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if this.LaunchIkeInNamespace != that1.LaunchIkeInNamespace {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if len(this.IpfabricMeshGroup) != len(that1.IpfabricMeshGroup) {
		return false
	}
	for i := range this.IpfabricMeshGroup {
		if !this.IpfabricMeshGroup[i].Equal(that1.IpfabricMeshGroup[i]) {
			return false
		}
	}
	if that1.SriovInterfaceChoice == nil {
		if this.SriovInterfaceChoice != nil {
			return false
		}
	} else if this.SriovInterfaceChoice == nil {
		return false
	} else if !this.SriovInterfaceChoice.Equal(that1.SriovInterfaceChoice) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoBondDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoBondDevices)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoBondDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoBondDevices.Equal(that1.NoBondDevices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BondDeviceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BondDeviceList)
	if !ok {
		that2, ok := that.(GlobalSpecType_BondDeviceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BondDeviceList.Equal(that1.BondDeviceList) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultNetworkConfig)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultNetworkConfig.Equal(that1.DefaultNetworkConfig) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CustomNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CustomNetworkConfig)
	if !ok {
		that2, ok := that.(GlobalSpecType_CustomNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomNetworkConfig.Equal(that1.CustomNetworkConfig) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultStorageConfig)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultStorageConfig.Equal(that1.DefaultStorageConfig) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CustomStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CustomStorageConfig)
	if !ok {
		that2, ok := that.(GlobalSpecType_CustomStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomStorageConfig.Equal(that1.CustomStorageConfig) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableGpu)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableGpu.Equal(that1.DisableGpu) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableGpu)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableGpu.Equal(that1.EnableGpu) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableVgpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableVgpu)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableVgpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableVgpu.Equal(that1.EnableVgpu) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableVm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableVm)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableVm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableVm.Equal(that1.DisableVm) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableVm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableVm)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableVm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableVm.Equal(that1.EnableVm) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoK8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoK8SCluster)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoK8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoK8SCluster.Equal(that1.NoK8SCluster) {
		return false
	}
	return true
}
func (this *GlobalSpecType_K8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_K8SCluster)
	if !ok {
		that2, ok := that.(GlobalSpecType_K8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SCluster.Equal(that1.K8SCluster) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DenyAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DenyAllUsb)
	if !ok {
		that2, ok := that.(GlobalSpecType_DenyAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyAllUsb.Equal(that1.DenyAllUsb) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AllowAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AllowAllUsb)
	if !ok {
		that2, ok := that.(GlobalSpecType_AllowAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAllUsb.Equal(that1.AllowAllUsb) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UsbPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UsbPolicy)
	if !ok {
		that2, ok := that.(GlobalSpecType_UsbPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UsbPolicy.Equal(that1.UsbPolicy) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoLocalControlPlane) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoLocalControlPlane)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoLocalControlPlane)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoLocalControlPlane.Equal(that1.NoLocalControlPlane) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LocalControlPlane) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LocalControlPlane)
	if !ok {
		that2, ok := that.(GlobalSpecType_LocalControlPlane)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LocalControlPlane.Equal(that1.LocalControlPlane) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultSriovInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultSriovInterface)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultSriovInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSriovInterface.Equal(that1.DefaultSriovInterface) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SriovInterfaces) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SriovInterfaces)
	if !ok {
		that2, ok := that.(GlobalSpecType_SriovInterfaces)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SriovInterfaces.Equal(that1.SriovInterfaces) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VolterraCertifiedHw != that1.VolterraCertifiedHw {
		return false
	}
	if len(this.MasterNodes) != len(that1.MasterNodes) {
		return false
	}
	for i := range this.MasterNodes {
		if this.MasterNodes[i] != that1.MasterNodes[i] {
			return false
		}
	}
	if len(this.MasterNodeConfiguration) != len(that1.MasterNodeConfiguration) {
		return false
	}
	for i := range this.MasterNodeConfiguration {
		if !this.MasterNodeConfiguration[i].Equal(that1.MasterNodeConfiguration[i]) {
			return false
		}
	}
	if len(this.WorkerNodes) != len(that1.WorkerNodes) {
		return false
	}
	for i := range this.WorkerNodes {
		if this.WorkerNodes[i] != that1.WorkerNodes[i] {
			return false
		}
	}
	if that1.BondChoice == nil {
		if this.BondChoice != nil {
			return false
		}
	} else if this.BondChoice == nil {
		return false
	} else if !this.BondChoice.Equal(that1.BondChoice) {
		return false
	}
	if that1.NetworkCfgChoice == nil {
		if this.NetworkCfgChoice != nil {
			return false
		}
	} else if this.NetworkCfgChoice == nil {
		return false
	} else if !this.NetworkCfgChoice.Equal(that1.NetworkCfgChoice) {
		return false
	}
	if that1.StorageCfgChoice == nil {
		if this.StorageCfgChoice != nil {
			return false
		}
	} else if this.StorageCfgChoice == nil {
		return false
	} else if !this.StorageCfgChoice.Equal(that1.StorageCfgChoice) {
		return false
	}
	if that1.GpuChoice == nil {
		if this.GpuChoice != nil {
			return false
		}
	} else if this.GpuChoice == nil {
		return false
	} else if !this.GpuChoice.Equal(that1.GpuChoice) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.K8SClusterChoice == nil {
		if this.K8SClusterChoice != nil {
			return false
		}
	} else if this.K8SClusterChoice == nil {
		return false
	} else if !this.K8SClusterChoice.Equal(that1.K8SClusterChoice) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.UsbPolicyChoice == nil {
		if this.UsbPolicyChoice != nil {
			return false
		}
	} else if this.UsbPolicyChoice == nil {
		return false
	} else if !this.UsbPolicyChoice.Equal(that1.UsbPolicyChoice) {
		return false
	}
	if that1.LocalControlPlaneChoice == nil {
		if this.LocalControlPlaneChoice != nil {
			return false
		}
	} else if this.LocalControlPlaneChoice == nil {
		return false
	} else if !this.LocalControlPlaneChoice.Equal(that1.LocalControlPlaneChoice) {
		return false
	}
	if that1.VmChoice == nil {
		if this.VmChoice != nil {
			return false
		}
	} else if this.VmChoice == nil {
		return false
	} else if !this.VmChoice.Equal(that1.VmChoice) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.Sw.Equal(that1.Sw) {
		return false
	}
	if !this.Os.Equal(that1.Os) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if that1.SriovInterfaceChoice == nil {
		if this.SriovInterfaceChoice != nil {
			return false
		}
	} else if this.SriovInterfaceChoice == nil {
		return false
	} else if !this.SriovInterfaceChoice.Equal(that1.SriovInterfaceChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoBondDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoBondDevices)
	if !ok {
		that2, ok := that.(CreateSpecType_NoBondDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoBondDevices.Equal(that1.NoBondDevices) {
		return false
	}
	return true
}
func (this *CreateSpecType_BondDeviceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BondDeviceList)
	if !ok {
		that2, ok := that.(CreateSpecType_BondDeviceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BondDeviceList.Equal(that1.BondDeviceList) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultNetworkConfig)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultNetworkConfig.Equal(that1.DefaultNetworkConfig) {
		return false
	}
	return true
}
func (this *CreateSpecType_CustomNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CustomNetworkConfig)
	if !ok {
		that2, ok := that.(CreateSpecType_CustomNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomNetworkConfig.Equal(that1.CustomNetworkConfig) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultStorageConfig)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultStorageConfig.Equal(that1.DefaultStorageConfig) {
		return false
	}
	return true
}
func (this *CreateSpecType_CustomStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CustomStorageConfig)
	if !ok {
		that2, ok := that.(CreateSpecType_CustomStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomStorageConfig.Equal(that1.CustomStorageConfig) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableGpu)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableGpu.Equal(that1.DisableGpu) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableGpu)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableGpu.Equal(that1.EnableGpu) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableVgpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableVgpu)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableVgpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableVgpu.Equal(that1.EnableVgpu) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoK8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoK8SCluster)
	if !ok {
		that2, ok := that.(CreateSpecType_NoK8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoK8SCluster.Equal(that1.NoK8SCluster) {
		return false
	}
	return true
}
func (this *CreateSpecType_K8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_K8SCluster)
	if !ok {
		that2, ok := that.(CreateSpecType_K8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SCluster.Equal(that1.K8SCluster) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(CreateSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(CreateSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *CreateSpecType_DenyAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DenyAllUsb)
	if !ok {
		that2, ok := that.(CreateSpecType_DenyAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyAllUsb.Equal(that1.DenyAllUsb) {
		return false
	}
	return true
}
func (this *CreateSpecType_AllowAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AllowAllUsb)
	if !ok {
		that2, ok := that.(CreateSpecType_AllowAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAllUsb.Equal(that1.AllowAllUsb) {
		return false
	}
	return true
}
func (this *CreateSpecType_UsbPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UsbPolicy)
	if !ok {
		that2, ok := that.(CreateSpecType_UsbPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UsbPolicy.Equal(that1.UsbPolicy) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoLocalControlPlane) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoLocalControlPlane)
	if !ok {
		that2, ok := that.(CreateSpecType_NoLocalControlPlane)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoLocalControlPlane.Equal(that1.NoLocalControlPlane) {
		return false
	}
	return true
}
func (this *CreateSpecType_LocalControlPlane) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LocalControlPlane)
	if !ok {
		that2, ok := that.(CreateSpecType_LocalControlPlane)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LocalControlPlane.Equal(that1.LocalControlPlane) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableVm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableVm)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableVm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableVm.Equal(that1.DisableVm) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableVm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableVm)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableVm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableVm.Equal(that1.EnableVm) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *CreateSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(CreateSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultSriovInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultSriovInterface)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultSriovInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSriovInterface.Equal(that1.DefaultSriovInterface) {
		return false
	}
	return true
}
func (this *CreateSpecType_SriovInterfaces) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SriovInterfaces)
	if !ok {
		that2, ok := that.(CreateSpecType_SriovInterfaces)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SriovInterfaces.Equal(that1.SriovInterfaces) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VolterraCertifiedHw != that1.VolterraCertifiedHw {
		return false
	}
	if len(this.MasterNodes) != len(that1.MasterNodes) {
		return false
	}
	for i := range this.MasterNodes {
		if this.MasterNodes[i] != that1.MasterNodes[i] {
			return false
		}
	}
	if len(this.MasterNodeConfiguration) != len(that1.MasterNodeConfiguration) {
		return false
	}
	for i := range this.MasterNodeConfiguration {
		if !this.MasterNodeConfiguration[i].Equal(that1.MasterNodeConfiguration[i]) {
			return false
		}
	}
	if len(this.WorkerNodes) != len(that1.WorkerNodes) {
		return false
	}
	for i := range this.WorkerNodes {
		if this.WorkerNodes[i] != that1.WorkerNodes[i] {
			return false
		}
	}
	if that1.BondChoice == nil {
		if this.BondChoice != nil {
			return false
		}
	} else if this.BondChoice == nil {
		return false
	} else if !this.BondChoice.Equal(that1.BondChoice) {
		return false
	}
	if that1.NetworkCfgChoice == nil {
		if this.NetworkCfgChoice != nil {
			return false
		}
	} else if this.NetworkCfgChoice == nil {
		return false
	} else if !this.NetworkCfgChoice.Equal(that1.NetworkCfgChoice) {
		return false
	}
	if that1.StorageCfgChoice == nil {
		if this.StorageCfgChoice != nil {
			return false
		}
	} else if this.StorageCfgChoice == nil {
		return false
	} else if !this.StorageCfgChoice.Equal(that1.StorageCfgChoice) {
		return false
	}
	if that1.GpuChoice == nil {
		if this.GpuChoice != nil {
			return false
		}
	} else if this.GpuChoice == nil {
		return false
	} else if !this.GpuChoice.Equal(that1.GpuChoice) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.K8SClusterChoice == nil {
		if this.K8SClusterChoice != nil {
			return false
		}
	} else if this.K8SClusterChoice == nil {
		return false
	} else if !this.K8SClusterChoice.Equal(that1.K8SClusterChoice) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.UsbPolicyChoice == nil {
		if this.UsbPolicyChoice != nil {
			return false
		}
	} else if this.UsbPolicyChoice == nil {
		return false
	} else if !this.UsbPolicyChoice.Equal(that1.UsbPolicyChoice) {
		return false
	}
	if that1.LocalControlPlaneChoice == nil {
		if this.LocalControlPlaneChoice != nil {
			return false
		}
	} else if this.LocalControlPlaneChoice == nil {
		return false
	} else if !this.LocalControlPlaneChoice.Equal(that1.LocalControlPlaneChoice) {
		return false
	}
	if that1.VmChoice == nil {
		if this.VmChoice != nil {
			return false
		}
	} else if this.VmChoice == nil {
		return false
	} else if !this.VmChoice.Equal(that1.VmChoice) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if that1.SriovInterfaceChoice == nil {
		if this.SriovInterfaceChoice != nil {
			return false
		}
	} else if this.SriovInterfaceChoice == nil {
		return false
	} else if !this.SriovInterfaceChoice.Equal(that1.SriovInterfaceChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoBondDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoBondDevices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoBondDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoBondDevices.Equal(that1.NoBondDevices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BondDeviceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BondDeviceList)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BondDeviceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BondDeviceList.Equal(that1.BondDeviceList) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultNetworkConfig)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultNetworkConfig.Equal(that1.DefaultNetworkConfig) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CustomNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CustomNetworkConfig)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CustomNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomNetworkConfig.Equal(that1.CustomNetworkConfig) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultStorageConfig)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultStorageConfig.Equal(that1.DefaultStorageConfig) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CustomStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CustomStorageConfig)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CustomStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomStorageConfig.Equal(that1.CustomStorageConfig) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableGpu)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableGpu.Equal(that1.DisableGpu) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableGpu)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableGpu.Equal(that1.EnableGpu) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableVgpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableVgpu)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableVgpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableVgpu.Equal(that1.EnableVgpu) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoK8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoK8SCluster)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoK8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoK8SCluster.Equal(that1.NoK8SCluster) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_K8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_K8SCluster)
	if !ok {
		that2, ok := that.(ReplaceSpecType_K8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SCluster.Equal(that1.K8SCluster) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DenyAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DenyAllUsb)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DenyAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyAllUsb.Equal(that1.DenyAllUsb) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AllowAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AllowAllUsb)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AllowAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAllUsb.Equal(that1.AllowAllUsb) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UsbPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UsbPolicy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UsbPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UsbPolicy.Equal(that1.UsbPolicy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoLocalControlPlane) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoLocalControlPlane)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoLocalControlPlane)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoLocalControlPlane.Equal(that1.NoLocalControlPlane) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LocalControlPlane) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LocalControlPlane)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LocalControlPlane)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LocalControlPlane.Equal(that1.LocalControlPlane) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableVm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableVm)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableVm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableVm.Equal(that1.DisableVm) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableVm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableVm)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableVm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableVm.Equal(that1.EnableVm) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultSriovInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultSriovInterface)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultSriovInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSriovInterface.Equal(that1.DefaultSriovInterface) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SriovInterfaces) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SriovInterfaces)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SriovInterfaces)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SriovInterfaces.Equal(that1.SriovInterfaces) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VolterraCertifiedHw != that1.VolterraCertifiedHw {
		return false
	}
	if len(this.MasterNodes) != len(that1.MasterNodes) {
		return false
	}
	for i := range this.MasterNodes {
		if this.MasterNodes[i] != that1.MasterNodes[i] {
			return false
		}
	}
	if len(this.MasterNodeConfiguration) != len(that1.MasterNodeConfiguration) {
		return false
	}
	for i := range this.MasterNodeConfiguration {
		if !this.MasterNodeConfiguration[i].Equal(that1.MasterNodeConfiguration[i]) {
			return false
		}
	}
	if len(this.WorkerNodes) != len(that1.WorkerNodes) {
		return false
	}
	for i := range this.WorkerNodes {
		if this.WorkerNodes[i] != that1.WorkerNodes[i] {
			return false
		}
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if that1.BondChoice == nil {
		if this.BondChoice != nil {
			return false
		}
	} else if this.BondChoice == nil {
		return false
	} else if !this.BondChoice.Equal(that1.BondChoice) {
		return false
	}
	if that1.NetworkCfgChoice == nil {
		if this.NetworkCfgChoice != nil {
			return false
		}
	} else if this.NetworkCfgChoice == nil {
		return false
	} else if !this.NetworkCfgChoice.Equal(that1.NetworkCfgChoice) {
		return false
	}
	if that1.StorageCfgChoice == nil {
		if this.StorageCfgChoice != nil {
			return false
		}
	} else if this.StorageCfgChoice == nil {
		return false
	} else if !this.StorageCfgChoice.Equal(that1.StorageCfgChoice) {
		return false
	}
	if that1.GpuChoice == nil {
		if this.GpuChoice != nil {
			return false
		}
	} else if this.GpuChoice == nil {
		return false
	} else if !this.GpuChoice.Equal(that1.GpuChoice) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.K8SClusterChoice == nil {
		if this.K8SClusterChoice != nil {
			return false
		}
	} else if this.K8SClusterChoice == nil {
		return false
	} else if !this.K8SClusterChoice.Equal(that1.K8SClusterChoice) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.UsbPolicyChoice == nil {
		if this.UsbPolicyChoice != nil {
			return false
		}
	} else if this.UsbPolicyChoice == nil {
		return false
	} else if !this.UsbPolicyChoice.Equal(that1.UsbPolicyChoice) {
		return false
	}
	if this.SiteState != that1.SiteState {
		return false
	}
	if that1.LocalControlPlaneChoice == nil {
		if this.LocalControlPlaneChoice != nil {
			return false
		}
	} else if this.LocalControlPlaneChoice == nil {
		return false
	} else if !this.LocalControlPlaneChoice.Equal(that1.LocalControlPlaneChoice) {
		return false
	}
	if that1.VmChoice == nil {
		if this.VmChoice != nil {
			return false
		}
	} else if this.VmChoice == nil {
		return false
	} else if !this.VmChoice.Equal(that1.VmChoice) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if that1.SriovInterfaceChoice == nil {
		if this.SriovInterfaceChoice != nil {
			return false
		}
	} else if this.SriovInterfaceChoice == nil {
		return false
	} else if !this.SriovInterfaceChoice.Equal(that1.SriovInterfaceChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_NoBondDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoBondDevices)
	if !ok {
		that2, ok := that.(GetSpecType_NoBondDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoBondDevices.Equal(that1.NoBondDevices) {
		return false
	}
	return true
}
func (this *GetSpecType_BondDeviceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BondDeviceList)
	if !ok {
		that2, ok := that.(GetSpecType_BondDeviceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BondDeviceList.Equal(that1.BondDeviceList) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultNetworkConfig)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultNetworkConfig.Equal(that1.DefaultNetworkConfig) {
		return false
	}
	return true
}
func (this *GetSpecType_CustomNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CustomNetworkConfig)
	if !ok {
		that2, ok := that.(GetSpecType_CustomNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomNetworkConfig.Equal(that1.CustomNetworkConfig) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultStorageConfig)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultStorageConfig.Equal(that1.DefaultStorageConfig) {
		return false
	}
	return true
}
func (this *GetSpecType_CustomStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CustomStorageConfig)
	if !ok {
		that2, ok := that.(GetSpecType_CustomStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomStorageConfig.Equal(that1.CustomStorageConfig) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableGpu)
	if !ok {
		that2, ok := that.(GetSpecType_DisableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableGpu.Equal(that1.DisableGpu) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableGpu)
	if !ok {
		that2, ok := that.(GetSpecType_EnableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableGpu.Equal(that1.EnableGpu) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableVgpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableVgpu)
	if !ok {
		that2, ok := that.(GetSpecType_EnableVgpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableVgpu.Equal(that1.EnableVgpu) {
		return false
	}
	return true
}
func (this *GetSpecType_NoK8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoK8SCluster)
	if !ok {
		that2, ok := that.(GetSpecType_NoK8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoK8SCluster.Equal(that1.NoK8SCluster) {
		return false
	}
	return true
}
func (this *GetSpecType_K8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_K8SCluster)
	if !ok {
		that2, ok := that.(GetSpecType_K8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SCluster.Equal(that1.K8SCluster) {
		return false
	}
	return true
}
func (this *GetSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GetSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GetSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GetSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GetSpecType_DenyAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DenyAllUsb)
	if !ok {
		that2, ok := that.(GetSpecType_DenyAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyAllUsb.Equal(that1.DenyAllUsb) {
		return false
	}
	return true
}
func (this *GetSpecType_AllowAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AllowAllUsb)
	if !ok {
		that2, ok := that.(GetSpecType_AllowAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAllUsb.Equal(that1.AllowAllUsb) {
		return false
	}
	return true
}
func (this *GetSpecType_UsbPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UsbPolicy)
	if !ok {
		that2, ok := that.(GetSpecType_UsbPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UsbPolicy.Equal(that1.UsbPolicy) {
		return false
	}
	return true
}
func (this *GetSpecType_NoLocalControlPlane) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoLocalControlPlane)
	if !ok {
		that2, ok := that.(GetSpecType_NoLocalControlPlane)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoLocalControlPlane.Equal(that1.NoLocalControlPlane) {
		return false
	}
	return true
}
func (this *GetSpecType_LocalControlPlane) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LocalControlPlane)
	if !ok {
		that2, ok := that.(GetSpecType_LocalControlPlane)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LocalControlPlane.Equal(that1.LocalControlPlane) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableVm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableVm)
	if !ok {
		that2, ok := that.(GetSpecType_DisableVm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableVm.Equal(that1.DisableVm) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableVm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableVm)
	if !ok {
		that2, ok := that.(GetSpecType_EnableVm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableVm.Equal(that1.EnableVm) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *GetSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(GetSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultSriovInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultSriovInterface)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultSriovInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSriovInterface.Equal(that1.DefaultSriovInterface) {
		return false
	}
	return true
}
func (this *GetSpecType_SriovInterfaces) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SriovInterfaces)
	if !ok {
		that2, ok := that.(GetSpecType_SriovInterfaces)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SriovInterfaces.Equal(that1.SriovInterfaces) {
		return false
	}
	return true
}
func (this *Interface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&voltstack_site.Interface{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	if this.InterfaceChoice != nil {
		s = append(s, "InterfaceChoice: "+fmt.Sprintf("%#v", this.InterfaceChoice)+",\n")
	}
	if this.DcClusterGroupConnectivityInterfaceChoice != nil {
		s = append(s, "DcClusterGroupConnectivityInterfaceChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupConnectivityInterfaceChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Interface_EthernetInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.Interface_EthernetInterface{` +
		`EthernetInterface:` + fmt.Sprintf("%#v", this.EthernetInterface) + `}`}, ", ")
	return s
}
func (this *Interface_DedicatedInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.Interface_DedicatedInterface{` +
		`DedicatedInterface:` + fmt.Sprintf("%#v", this.DedicatedInterface) + `}`}, ", ")
	return s
}
func (this *Interface_DedicatedManagementInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.Interface_DedicatedManagementInterface{` +
		`DedicatedManagementInterface:` + fmt.Sprintf("%#v", this.DedicatedManagementInterface) + `}`}, ", ")
	return s
}
func (this *Interface_TunnelInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.Interface_TunnelInterface{` +
		`TunnelInterface:` + fmt.Sprintf("%#v", this.TunnelInterface) + `}`}, ", ")
	return s
}
func (this *Interface_LoopbackInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.Interface_LoopbackInterface{` +
		`LoopbackInterface:` + fmt.Sprintf("%#v", this.LoopbackInterface) + `}`}, ", ")
	return s
}
func (this *Interface_DcClusterGroupConnectivityInterfaceDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.Interface_DcClusterGroupConnectivityInterfaceDisabled{` +
		`DcClusterGroupConnectivityInterfaceDisabled:` + fmt.Sprintf("%#v", this.DcClusterGroupConnectivityInterfaceDisabled) + `}`}, ", ")
	return s
}
func (this *Interface_DcClusterGroupConnectivityInterfaceEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.Interface_DcClusterGroupConnectivityInterfaceEnabled{` +
		`DcClusterGroupConnectivityInterfaceEnabled:` + fmt.Sprintf("%#v", this.DcClusterGroupConnectivityInterfaceEnabled) + `}`}, ", ")
	return s
}
func (this *InterfaceListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&voltstack_site.InterfaceListType{")
	if this.Interfaces != nil {
		s = append(s, "Interfaces: "+fmt.Sprintf("%#v", this.Interfaces)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StorageInterfaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&voltstack_site.StorageInterfaceType{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	if this.StorageInterface != nil {
		s = append(s, "StorageInterface: "+fmt.Sprintf("%#v", this.StorageInterface)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StorageInterfaceListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&voltstack_site.StorageInterfaceListType{")
	if this.StorageInterfaces != nil {
		s = append(s, "StorageInterfaces: "+fmt.Sprintf("%#v", this.StorageInterfaces)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StaticRoutesListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&voltstack_site.StaticRoutesListType{")
	if this.StaticRoutes != nil {
		s = append(s, "StaticRoutes: "+fmt.Sprintf("%#v", this.StaticRoutes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VnConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&voltstack_site.VnConfiguration{")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	if this.StaticRouteChoice != nil {
		s = append(s, "StaticRouteChoice: "+fmt.Sprintf("%#v", this.StaticRouteChoice)+",\n")
	}
	if this.StaticV6RouteChoice != nil {
		s = append(s, "StaticV6RouteChoice: "+fmt.Sprintf("%#v", this.StaticV6RouteChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.DcClusterGroupInterface != nil {
		s = append(s, "DcClusterGroupInterface: "+fmt.Sprintf("%#v", this.DcClusterGroupInterface)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VnConfiguration_NoStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VnConfiguration_NoStaticRoutes{` +
		`NoStaticRoutes:` + fmt.Sprintf("%#v", this.NoStaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_StaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VnConfiguration_StaticRoutes{` +
		`StaticRoutes:` + fmt.Sprintf("%#v", this.StaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_NoStaticV6Routes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VnConfiguration_NoStaticV6Routes{` +
		`NoStaticV6Routes:` + fmt.Sprintf("%#v", this.NoStaticV6Routes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_StaticV6Routes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VnConfiguration_StaticV6Routes{` +
		`StaticV6Routes:` + fmt.Sprintf("%#v", this.StaticV6Routes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VnConfiguration_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_DcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VnConfiguration_DcClusterGroup{` +
		`DcClusterGroup:` + fmt.Sprintf("%#v", this.DcClusterGroup) + `}`}, ", ")
	return s
}
func (this *SliVnConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&voltstack_site.SliVnConfiguration{")
	if this.StaticRouteChoice != nil {
		s = append(s, "StaticRouteChoice: "+fmt.Sprintf("%#v", this.StaticRouteChoice)+",\n")
	}
	if this.StaticV6RouteChoice != nil {
		s = append(s, "StaticV6RouteChoice: "+fmt.Sprintf("%#v", this.StaticV6RouteChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SliVnConfiguration_NoStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.SliVnConfiguration_NoStaticRoutes{` +
		`NoStaticRoutes:` + fmt.Sprintf("%#v", this.NoStaticRoutes) + `}`}, ", ")
	return s
}
func (this *SliVnConfiguration_StaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.SliVnConfiguration_StaticRoutes{` +
		`StaticRoutes:` + fmt.Sprintf("%#v", this.StaticRoutes) + `}`}, ", ")
	return s
}
func (this *SliVnConfiguration_NoV6StaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.SliVnConfiguration_NoV6StaticRoutes{` +
		`NoV6StaticRoutes:` + fmt.Sprintf("%#v", this.NoV6StaticRoutes) + `}`}, ", ")
	return s
}
func (this *SliVnConfiguration_StaticV6Routes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.SliVnConfiguration_StaticV6Routes{` +
		`StaticV6Routes:` + fmt.Sprintf("%#v", this.StaticV6Routes) + `}`}, ", ")
	return s
}
func (this *GlobalNetworkConnectionType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&voltstack_site.GlobalNetworkConnectionType{")
	if this.ConnectionChoice != nil {
		s = append(s, "ConnectionChoice: "+fmt.Sprintf("%#v", this.ConnectionChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalNetworkConnectionType_SloToGlobalDr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalNetworkConnectionType_SloToGlobalDr{` +
		`SloToGlobalDr:` + fmt.Sprintf("%#v", this.SloToGlobalDr) + `}`}, ", ")
	return s
}
func (this *GlobalNetworkConnectionType_DisableForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalNetworkConnectionType_DisableForwardProxy{` +
		`DisableForwardProxy:` + fmt.Sprintf("%#v", this.DisableForwardProxy) + `}`}, ", ")
	return s
}
func (this *GlobalNetworkConnectionType_EnableForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalNetworkConnectionType_EnableForwardProxy{` +
		`EnableForwardProxy:` + fmt.Sprintf("%#v", this.EnableForwardProxy) + `}`}, ", ")
	return s
}
func (this *GlobalNetworkConnectionListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&voltstack_site.GlobalNetworkConnectionListType{")
	if this.GlobalNetworkConnections != nil {
		s = append(s, "GlobalNetworkConnections: "+fmt.Sprintf("%#v", this.GlobalNetworkConnections)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VssNetworkConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 29)
	s = append(s, "&voltstack_site.VssNetworkConfiguration{")
	if this.SloChoice != nil {
		s = append(s, "SloChoice: "+fmt.Sprintf("%#v", this.SloChoice)+",\n")
	}
	if this.SliChoice != nil {
		s = append(s, "SliChoice: "+fmt.Sprintf("%#v", this.SliChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	if this.InterfaceChoice != nil {
		s = append(s, "InterfaceChoice: "+fmt.Sprintf("%#v", this.InterfaceChoice)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	s = append(s, "OutsideVip: "+fmt.Sprintf("%#v", this.OutsideVip)+",\n")
	s = append(s, "OutsideVipV6: "+fmt.Sprintf("%#v", this.OutsideVipV6)+",\n")
	s = append(s, "OutsideNameserver: "+fmt.Sprintf("%#v", this.OutsideNameserver)+",\n")
	s = append(s, "OutsideNameserverV6: "+fmt.Sprintf("%#v", this.OutsideNameserverV6)+",\n")
	s = append(s, "BgpRouterId: "+fmt.Sprintf("%#v", this.BgpRouterId)+",\n")
	s = append(s, "BgpPeerAddress: "+fmt.Sprintf("%#v", this.BgpPeerAddress)+",\n")
	s = append(s, "VipVrrpMode: "+fmt.Sprintf("%#v", this.VipVrrpMode)+",\n")
	s = append(s, "TunnelDeadTimeout: "+fmt.Sprintf("%#v", this.TunnelDeadTimeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VssNetworkConfiguration_DefaultConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_DefaultConfig{` +
		`DefaultConfig:` + fmt.Sprintf("%#v", this.DefaultConfig) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_SloConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_SloConfig{` +
		`SloConfig:` + fmt.Sprintf("%#v", this.SloConfig) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_DefaultSliConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_DefaultSliConfig{` +
		`DefaultSliConfig:` + fmt.Sprintf("%#v", this.DefaultSliConfig) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_SliConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_SliConfig{` +
		`SliConfig:` + fmt.Sprintf("%#v", this.SliConfig) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_SiteToSiteTunnelIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_SiteToSiteTunnelIp{` +
		`SiteToSiteTunnelIp:` + fmt.Sprintf("%#v", this.SiteToSiteTunnelIp) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_DefaultInterfaceConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_DefaultInterfaceConfig{` +
		`DefaultInterfaceConfig:` + fmt.Sprintf("%#v", this.DefaultInterfaceConfig) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_InterfaceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_InterfaceList{` +
		`InterfaceList:` + fmt.Sprintf("%#v", this.InterfaceList) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&voltstack_site.VssStorageConfiguration{")
	if this.StorageInterfaceChoice != nil {
		s = append(s, "StorageInterfaceChoice: "+fmt.Sprintf("%#v", this.StorageInterfaceChoice)+",\n")
	}
	if this.StorageDeviceChoice != nil {
		s = append(s, "StorageDeviceChoice: "+fmt.Sprintf("%#v", this.StorageDeviceChoice)+",\n")
	}
	if this.StorageClassChoice != nil {
		s = append(s, "StorageClassChoice: "+fmt.Sprintf("%#v", this.StorageClassChoice)+",\n")
	}
	if this.StaticRouteChoice != nil {
		s = append(s, "StaticRouteChoice: "+fmt.Sprintf("%#v", this.StaticRouteChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VssStorageConfiguration_NoStorageInterfaces) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_NoStorageInterfaces{` +
		`NoStorageInterfaces:` + fmt.Sprintf("%#v", this.NoStorageInterfaces) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration_StorageInterfaceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_StorageInterfaceList{` +
		`StorageInterfaceList:` + fmt.Sprintf("%#v", this.StorageInterfaceList) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration_NoStorageDevice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_NoStorageDevice{` +
		`NoStorageDevice:` + fmt.Sprintf("%#v", this.NoStorageDevice) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration_StorageDeviceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_StorageDeviceList{` +
		`StorageDeviceList:` + fmt.Sprintf("%#v", this.StorageDeviceList) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration_DefaultStorageClass) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_DefaultStorageClass{` +
		`DefaultStorageClass:` + fmt.Sprintf("%#v", this.DefaultStorageClass) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration_StorageClassList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_StorageClassList{` +
		`StorageClassList:` + fmt.Sprintf("%#v", this.StorageClassList) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration_NoStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_NoStaticRoutes{` +
		`NoStaticRoutes:` + fmt.Sprintf("%#v", this.NoStaticRoutes) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration_StaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_StaticRoutes{` +
		`StaticRoutes:` + fmt.Sprintf("%#v", this.StaticRoutes) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 42)
	s = append(s, "&voltstack_site.GlobalSpecType{")
	s = append(s, "VolterraCertifiedHw: "+fmt.Sprintf("%#v", this.VolterraCertifiedHw)+",\n")
	s = append(s, "MasterNodes: "+fmt.Sprintf("%#v", this.MasterNodes)+",\n")
	if this.MasterNodeConfiguration != nil {
		s = append(s, "MasterNodeConfiguration: "+fmt.Sprintf("%#v", this.MasterNodeConfiguration)+",\n")
	}
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	if this.BondChoice != nil {
		s = append(s, "BondChoice: "+fmt.Sprintf("%#v", this.BondChoice)+",\n")
	}
	if this.NetworkCfgChoice != nil {
		s = append(s, "NetworkCfgChoice: "+fmt.Sprintf("%#v", this.NetworkCfgChoice)+",\n")
	}
	if this.StorageCfgChoice != nil {
		s = append(s, "StorageCfgChoice: "+fmt.Sprintf("%#v", this.StorageCfgChoice)+",\n")
	}
	if this.GpuChoice != nil {
		s = append(s, "GpuChoice: "+fmt.Sprintf("%#v", this.GpuChoice)+",\n")
	}
	if this.VmChoice != nil {
		s = append(s, "VmChoice: "+fmt.Sprintf("%#v", this.VmChoice)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.K8SClusterChoice != nil {
		s = append(s, "K8SClusterChoice: "+fmt.Sprintf("%#v", this.K8SClusterChoice)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.UsbPolicyChoice != nil {
		s = append(s, "UsbPolicyChoice: "+fmt.Sprintf("%#v", this.UsbPolicyChoice)+",\n")
	}
	if this.LocalControlPlaneChoice != nil {
		s = append(s, "LocalControlPlaneChoice: "+fmt.Sprintf("%#v", this.LocalControlPlaneChoice)+",\n")
	}
	if this.Sw != nil {
		s = append(s, "Sw: "+fmt.Sprintf("%#v", this.Sw)+",\n")
	}
	if this.Os != nil {
		s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	s = append(s, "LaunchIkeInNamespace: "+fmt.Sprintf("%#v", this.LaunchIkeInNamespace)+",\n")
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.IpfabricMeshGroup != nil {
		s = append(s, "IpfabricMeshGroup: "+fmt.Sprintf("%#v", this.IpfabricMeshGroup)+",\n")
	}
	if this.SriovInterfaceChoice != nil {
		s = append(s, "SriovInterfaceChoice: "+fmt.Sprintf("%#v", this.SriovInterfaceChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_NoBondDevices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_NoBondDevices{` +
		`NoBondDevices:` + fmt.Sprintf("%#v", this.NoBondDevices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BondDeviceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_BondDeviceList{` +
		`BondDeviceList:` + fmt.Sprintf("%#v", this.BondDeviceList) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_DefaultNetworkConfig{` +
		`DefaultNetworkConfig:` + fmt.Sprintf("%#v", this.DefaultNetworkConfig) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CustomNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_CustomNetworkConfig{` +
		`CustomNetworkConfig:` + fmt.Sprintf("%#v", this.CustomNetworkConfig) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_DefaultStorageConfig{` +
		`DefaultStorageConfig:` + fmt.Sprintf("%#v", this.DefaultStorageConfig) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CustomStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_CustomStorageConfig{` +
		`CustomStorageConfig:` + fmt.Sprintf("%#v", this.CustomStorageConfig) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_DisableGpu{` +
		`DisableGpu:` + fmt.Sprintf("%#v", this.DisableGpu) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_EnableGpu{` +
		`EnableGpu:` + fmt.Sprintf("%#v", this.EnableGpu) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableVgpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_EnableVgpu{` +
		`EnableVgpu:` + fmt.Sprintf("%#v", this.EnableVgpu) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableVm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_DisableVm{` +
		`DisableVm:` + fmt.Sprintf("%#v", this.DisableVm) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableVm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_EnableVm{` +
		`EnableVm:` + fmt.Sprintf("%#v", this.EnableVm) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoK8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_NoK8SCluster{` +
		`NoK8SCluster:` + fmt.Sprintf("%#v", this.NoK8SCluster) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_K8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_K8SCluster{` +
		`K8SCluster:` + fmt.Sprintf("%#v", this.K8SCluster) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DenyAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_DenyAllUsb{` +
		`DenyAllUsb:` + fmt.Sprintf("%#v", this.DenyAllUsb) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AllowAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_AllowAllUsb{` +
		`AllowAllUsb:` + fmt.Sprintf("%#v", this.AllowAllUsb) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_UsbPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_UsbPolicy{` +
		`UsbPolicy:` + fmt.Sprintf("%#v", this.UsbPolicy) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoLocalControlPlane) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_NoLocalControlPlane{` +
		`NoLocalControlPlane:` + fmt.Sprintf("%#v", this.NoLocalControlPlane) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LocalControlPlane) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_LocalControlPlane{` +
		`LocalControlPlane:` + fmt.Sprintf("%#v", this.LocalControlPlane) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultSriovInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_DefaultSriovInterface{` +
		`DefaultSriovInterface:` + fmt.Sprintf("%#v", this.DefaultSriovInterface) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SriovInterfaces) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_SriovInterfaces{` +
		`SriovInterfaces:` + fmt.Sprintf("%#v", this.SriovInterfaces) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 37)
	s = append(s, "&voltstack_site.CreateSpecType{")
	s = append(s, "VolterraCertifiedHw: "+fmt.Sprintf("%#v", this.VolterraCertifiedHw)+",\n")
	s = append(s, "MasterNodes: "+fmt.Sprintf("%#v", this.MasterNodes)+",\n")
	if this.MasterNodeConfiguration != nil {
		s = append(s, "MasterNodeConfiguration: "+fmt.Sprintf("%#v", this.MasterNodeConfiguration)+",\n")
	}
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	if this.BondChoice != nil {
		s = append(s, "BondChoice: "+fmt.Sprintf("%#v", this.BondChoice)+",\n")
	}
	if this.NetworkCfgChoice != nil {
		s = append(s, "NetworkCfgChoice: "+fmt.Sprintf("%#v", this.NetworkCfgChoice)+",\n")
	}
	if this.StorageCfgChoice != nil {
		s = append(s, "StorageCfgChoice: "+fmt.Sprintf("%#v", this.StorageCfgChoice)+",\n")
	}
	if this.GpuChoice != nil {
		s = append(s, "GpuChoice: "+fmt.Sprintf("%#v", this.GpuChoice)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.K8SClusterChoice != nil {
		s = append(s, "K8SClusterChoice: "+fmt.Sprintf("%#v", this.K8SClusterChoice)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.UsbPolicyChoice != nil {
		s = append(s, "UsbPolicyChoice: "+fmt.Sprintf("%#v", this.UsbPolicyChoice)+",\n")
	}
	if this.LocalControlPlaneChoice != nil {
		s = append(s, "LocalControlPlaneChoice: "+fmt.Sprintf("%#v", this.LocalControlPlaneChoice)+",\n")
	}
	if this.VmChoice != nil {
		s = append(s, "VmChoice: "+fmt.Sprintf("%#v", this.VmChoice)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.Sw != nil {
		s = append(s, "Sw: "+fmt.Sprintf("%#v", this.Sw)+",\n")
	}
	if this.Os != nil {
		s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.SriovInterfaceChoice != nil {
		s = append(s, "SriovInterfaceChoice: "+fmt.Sprintf("%#v", this.SriovInterfaceChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_NoBondDevices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_NoBondDevices{` +
		`NoBondDevices:` + fmt.Sprintf("%#v", this.NoBondDevices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BondDeviceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_BondDeviceList{` +
		`BondDeviceList:` + fmt.Sprintf("%#v", this.BondDeviceList) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_DefaultNetworkConfig{` +
		`DefaultNetworkConfig:` + fmt.Sprintf("%#v", this.DefaultNetworkConfig) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CustomNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_CustomNetworkConfig{` +
		`CustomNetworkConfig:` + fmt.Sprintf("%#v", this.CustomNetworkConfig) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_DefaultStorageConfig{` +
		`DefaultStorageConfig:` + fmt.Sprintf("%#v", this.DefaultStorageConfig) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CustomStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_CustomStorageConfig{` +
		`CustomStorageConfig:` + fmt.Sprintf("%#v", this.CustomStorageConfig) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_DisableGpu{` +
		`DisableGpu:` + fmt.Sprintf("%#v", this.DisableGpu) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_EnableGpu{` +
		`EnableGpu:` + fmt.Sprintf("%#v", this.EnableGpu) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableVgpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_EnableVgpu{` +
		`EnableVgpu:` + fmt.Sprintf("%#v", this.EnableVgpu) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoK8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_NoK8SCluster{` +
		`NoK8SCluster:` + fmt.Sprintf("%#v", this.NoK8SCluster) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_K8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_K8SCluster{` +
		`K8SCluster:` + fmt.Sprintf("%#v", this.K8SCluster) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DenyAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_DenyAllUsb{` +
		`DenyAllUsb:` + fmt.Sprintf("%#v", this.DenyAllUsb) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AllowAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_AllowAllUsb{` +
		`AllowAllUsb:` + fmt.Sprintf("%#v", this.AllowAllUsb) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_UsbPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_UsbPolicy{` +
		`UsbPolicy:` + fmt.Sprintf("%#v", this.UsbPolicy) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoLocalControlPlane) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_NoLocalControlPlane{` +
		`NoLocalControlPlane:` + fmt.Sprintf("%#v", this.NoLocalControlPlane) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LocalControlPlane) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_LocalControlPlane{` +
		`LocalControlPlane:` + fmt.Sprintf("%#v", this.LocalControlPlane) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableVm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_DisableVm{` +
		`DisableVm:` + fmt.Sprintf("%#v", this.DisableVm) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableVm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_EnableVm{` +
		`EnableVm:` + fmt.Sprintf("%#v", this.EnableVm) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultSriovInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_DefaultSriovInterface{` +
		`DefaultSriovInterface:` + fmt.Sprintf("%#v", this.DefaultSriovInterface) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SriovInterfaces) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_SriovInterfaces{` +
		`SriovInterfaces:` + fmt.Sprintf("%#v", this.SriovInterfaces) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 35)
	s = append(s, "&voltstack_site.ReplaceSpecType{")
	s = append(s, "VolterraCertifiedHw: "+fmt.Sprintf("%#v", this.VolterraCertifiedHw)+",\n")
	s = append(s, "MasterNodes: "+fmt.Sprintf("%#v", this.MasterNodes)+",\n")
	if this.MasterNodeConfiguration != nil {
		s = append(s, "MasterNodeConfiguration: "+fmt.Sprintf("%#v", this.MasterNodeConfiguration)+",\n")
	}
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	if this.BondChoice != nil {
		s = append(s, "BondChoice: "+fmt.Sprintf("%#v", this.BondChoice)+",\n")
	}
	if this.NetworkCfgChoice != nil {
		s = append(s, "NetworkCfgChoice: "+fmt.Sprintf("%#v", this.NetworkCfgChoice)+",\n")
	}
	if this.StorageCfgChoice != nil {
		s = append(s, "StorageCfgChoice: "+fmt.Sprintf("%#v", this.StorageCfgChoice)+",\n")
	}
	if this.GpuChoice != nil {
		s = append(s, "GpuChoice: "+fmt.Sprintf("%#v", this.GpuChoice)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.K8SClusterChoice != nil {
		s = append(s, "K8SClusterChoice: "+fmt.Sprintf("%#v", this.K8SClusterChoice)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.UsbPolicyChoice != nil {
		s = append(s, "UsbPolicyChoice: "+fmt.Sprintf("%#v", this.UsbPolicyChoice)+",\n")
	}
	if this.LocalControlPlaneChoice != nil {
		s = append(s, "LocalControlPlaneChoice: "+fmt.Sprintf("%#v", this.LocalControlPlaneChoice)+",\n")
	}
	if this.VmChoice != nil {
		s = append(s, "VmChoice: "+fmt.Sprintf("%#v", this.VmChoice)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.SriovInterfaceChoice != nil {
		s = append(s, "SriovInterfaceChoice: "+fmt.Sprintf("%#v", this.SriovInterfaceChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_NoBondDevices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_NoBondDevices{` +
		`NoBondDevices:` + fmt.Sprintf("%#v", this.NoBondDevices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BondDeviceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_BondDeviceList{` +
		`BondDeviceList:` + fmt.Sprintf("%#v", this.BondDeviceList) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_DefaultNetworkConfig{` +
		`DefaultNetworkConfig:` + fmt.Sprintf("%#v", this.DefaultNetworkConfig) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CustomNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_CustomNetworkConfig{` +
		`CustomNetworkConfig:` + fmt.Sprintf("%#v", this.CustomNetworkConfig) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_DefaultStorageConfig{` +
		`DefaultStorageConfig:` + fmt.Sprintf("%#v", this.DefaultStorageConfig) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CustomStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_CustomStorageConfig{` +
		`CustomStorageConfig:` + fmt.Sprintf("%#v", this.CustomStorageConfig) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_DisableGpu{` +
		`DisableGpu:` + fmt.Sprintf("%#v", this.DisableGpu) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_EnableGpu{` +
		`EnableGpu:` + fmt.Sprintf("%#v", this.EnableGpu) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableVgpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_EnableVgpu{` +
		`EnableVgpu:` + fmt.Sprintf("%#v", this.EnableVgpu) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoK8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_NoK8SCluster{` +
		`NoK8SCluster:` + fmt.Sprintf("%#v", this.NoK8SCluster) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_K8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_K8SCluster{` +
		`K8SCluster:` + fmt.Sprintf("%#v", this.K8SCluster) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DenyAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_DenyAllUsb{` +
		`DenyAllUsb:` + fmt.Sprintf("%#v", this.DenyAllUsb) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AllowAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_AllowAllUsb{` +
		`AllowAllUsb:` + fmt.Sprintf("%#v", this.AllowAllUsb) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_UsbPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_UsbPolicy{` +
		`UsbPolicy:` + fmt.Sprintf("%#v", this.UsbPolicy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoLocalControlPlane) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_NoLocalControlPlane{` +
		`NoLocalControlPlane:` + fmt.Sprintf("%#v", this.NoLocalControlPlane) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LocalControlPlane) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_LocalControlPlane{` +
		`LocalControlPlane:` + fmt.Sprintf("%#v", this.LocalControlPlane) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableVm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_DisableVm{` +
		`DisableVm:` + fmt.Sprintf("%#v", this.DisableVm) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableVm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_EnableVm{` +
		`EnableVm:` + fmt.Sprintf("%#v", this.EnableVm) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultSriovInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_DefaultSriovInterface{` +
		`DefaultSriovInterface:` + fmt.Sprintf("%#v", this.DefaultSriovInterface) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SriovInterfaces) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_SriovInterfaces{` +
		`SriovInterfaces:` + fmt.Sprintf("%#v", this.SriovInterfaces) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 38)
	s = append(s, "&voltstack_site.GetSpecType{")
	s = append(s, "VolterraCertifiedHw: "+fmt.Sprintf("%#v", this.VolterraCertifiedHw)+",\n")
	s = append(s, "MasterNodes: "+fmt.Sprintf("%#v", this.MasterNodes)+",\n")
	if this.MasterNodeConfiguration != nil {
		s = append(s, "MasterNodeConfiguration: "+fmt.Sprintf("%#v", this.MasterNodeConfiguration)+",\n")
	}
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	if this.BondChoice != nil {
		s = append(s, "BondChoice: "+fmt.Sprintf("%#v", this.BondChoice)+",\n")
	}
	if this.NetworkCfgChoice != nil {
		s = append(s, "NetworkCfgChoice: "+fmt.Sprintf("%#v", this.NetworkCfgChoice)+",\n")
	}
	if this.StorageCfgChoice != nil {
		s = append(s, "StorageCfgChoice: "+fmt.Sprintf("%#v", this.StorageCfgChoice)+",\n")
	}
	if this.GpuChoice != nil {
		s = append(s, "GpuChoice: "+fmt.Sprintf("%#v", this.GpuChoice)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.K8SClusterChoice != nil {
		s = append(s, "K8SClusterChoice: "+fmt.Sprintf("%#v", this.K8SClusterChoice)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.UsbPolicyChoice != nil {
		s = append(s, "UsbPolicyChoice: "+fmt.Sprintf("%#v", this.UsbPolicyChoice)+",\n")
	}
	s = append(s, "SiteState: "+fmt.Sprintf("%#v", this.SiteState)+",\n")
	if this.LocalControlPlaneChoice != nil {
		s = append(s, "LocalControlPlaneChoice: "+fmt.Sprintf("%#v", this.LocalControlPlaneChoice)+",\n")
	}
	if this.VmChoice != nil {
		s = append(s, "VmChoice: "+fmt.Sprintf("%#v", this.VmChoice)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.SriovInterfaceChoice != nil {
		s = append(s, "SriovInterfaceChoice: "+fmt.Sprintf("%#v", this.SriovInterfaceChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_NoBondDevices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_NoBondDevices{` +
		`NoBondDevices:` + fmt.Sprintf("%#v", this.NoBondDevices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BondDeviceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_BondDeviceList{` +
		`BondDeviceList:` + fmt.Sprintf("%#v", this.BondDeviceList) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_DefaultNetworkConfig{` +
		`DefaultNetworkConfig:` + fmt.Sprintf("%#v", this.DefaultNetworkConfig) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CustomNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_CustomNetworkConfig{` +
		`CustomNetworkConfig:` + fmt.Sprintf("%#v", this.CustomNetworkConfig) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_DefaultStorageConfig{` +
		`DefaultStorageConfig:` + fmt.Sprintf("%#v", this.DefaultStorageConfig) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CustomStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_CustomStorageConfig{` +
		`CustomStorageConfig:` + fmt.Sprintf("%#v", this.CustomStorageConfig) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_DisableGpu{` +
		`DisableGpu:` + fmt.Sprintf("%#v", this.DisableGpu) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_EnableGpu{` +
		`EnableGpu:` + fmt.Sprintf("%#v", this.EnableGpu) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableVgpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_EnableVgpu{` +
		`EnableVgpu:` + fmt.Sprintf("%#v", this.EnableVgpu) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoK8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_NoK8SCluster{` +
		`NoK8SCluster:` + fmt.Sprintf("%#v", this.NoK8SCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType_K8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_K8SCluster{` +
		`K8SCluster:` + fmt.Sprintf("%#v", this.K8SCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DenyAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_DenyAllUsb{` +
		`DenyAllUsb:` + fmt.Sprintf("%#v", this.DenyAllUsb) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AllowAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_AllowAllUsb{` +
		`AllowAllUsb:` + fmt.Sprintf("%#v", this.AllowAllUsb) + `}`}, ", ")
	return s
}
func (this *GetSpecType_UsbPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_UsbPolicy{` +
		`UsbPolicy:` + fmt.Sprintf("%#v", this.UsbPolicy) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoLocalControlPlane) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_NoLocalControlPlane{` +
		`NoLocalControlPlane:` + fmt.Sprintf("%#v", this.NoLocalControlPlane) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LocalControlPlane) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_LocalControlPlane{` +
		`LocalControlPlane:` + fmt.Sprintf("%#v", this.LocalControlPlane) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableVm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_DisableVm{` +
		`DisableVm:` + fmt.Sprintf("%#v", this.DisableVm) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableVm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_EnableVm{` +
		`EnableVm:` + fmt.Sprintf("%#v", this.EnableVm) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultSriovInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_DefaultSriovInterface{` +
		`DefaultSriovInterface:` + fmt.Sprintf("%#v", this.DefaultSriovInterface) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SriovInterfaces) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_SriovInterfaces{` +
		`SriovInterfaces:` + fmt.Sprintf("%#v", this.SriovInterfaces) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Interface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DcClusterGroupConnectivityInterfaceChoice != nil {
		{
			size := m.DcClusterGroupConnectivityInterfaceChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupConnectivityInterfaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InterfaceChoice != nil {
		{
			size := m.InterfaceChoice.Size()
			i -= size
			if _, err := m.InterfaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
		for iNdEx := len(keysForLabels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Labels[string(keysForLabels[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForLabels[iNdEx])
			copy(dAtA[i:], keysForLabels[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForLabels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Interface_EthernetInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_EthernetInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EthernetInterface != nil {
		{
			size, err := m.EthernetInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Interface_DedicatedInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_DedicatedInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DedicatedInterface != nil {
		{
			size, err := m.DedicatedInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Interface_DedicatedManagementInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_DedicatedManagementInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DedicatedManagementInterface != nil {
		{
			size, err := m.DedicatedManagementInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Interface_TunnelInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_TunnelInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TunnelInterface != nil {
		{
			size, err := m.TunnelInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Interface_LoopbackInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_LoopbackInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LoopbackInterface != nil {
		{
			size, err := m.LoopbackInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Interface_DcClusterGroupConnectivityInterfaceDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_DcClusterGroupConnectivityInterfaceDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupConnectivityInterfaceDisabled != nil {
		{
			size, err := m.DcClusterGroupConnectivityInterfaceDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Interface_DcClusterGroupConnectivityInterfaceEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_DcClusterGroupConnectivityInterfaceEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupConnectivityInterfaceEnabled != nil {
		{
			size, err := m.DcClusterGroupConnectivityInterfaceEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *InterfaceListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfaceListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StorageInterfaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageInterfaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageInterfaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StorageInterface != nil {
		{
			size, err := m.StorageInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
		for iNdEx := len(keysForLabels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Labels[string(keysForLabels[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForLabels[iNdEx])
			copy(dAtA[i:], keysForLabels[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForLabels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageInterfaceListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageInterfaceListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageInterfaceListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StorageInterfaces) > 0 {
		for iNdEx := len(m.StorageInterfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StorageInterfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StaticRoutesListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaticRoutesListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StaticRoutesListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StaticRoutes) > 0 {
		for iNdEx := len(m.StaticRoutes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StaticRoutes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VnConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VnConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StaticV6RouteChoice != nil {
		{
			size := m.StaticV6RouteChoice.Size()
			i -= size
			if _, err := m.StaticV6RouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DcClusterGroupInterface) > 0 {
		for iNdEx := len(m.DcClusterGroupInterface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DcClusterGroupInterface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StaticRouteChoice != nil {
		{
			size := m.StaticRouteChoice.Size()
			i -= size
			if _, err := m.StaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
		for iNdEx := len(keysForLabels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Labels[string(keysForLabels[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForLabels[iNdEx])
			copy(dAtA[i:], keysForLabels[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForLabels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VnConfiguration_NoStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_NoStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoStaticRoutes != nil {
		{
			size, err := m.NoStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_StaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_StaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StaticRoutes != nil {
		{
			size, err := m.StaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_DcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_DcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroup != nil {
		{
			size, err := m.DcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_NoStaticV6Routes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_NoStaticV6Routes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoStaticV6Routes != nil {
		{
			size, err := m.NoStaticV6Routes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_StaticV6Routes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_StaticV6Routes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StaticV6Routes != nil {
		{
			size, err := m.StaticV6Routes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *SliVnConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SliVnConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SliVnConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StaticV6RouteChoice != nil {
		{
			size := m.StaticV6RouteChoice.Size()
			i -= size
			if _, err := m.StaticV6RouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StaticRouteChoice != nil {
		{
			size := m.StaticRouteChoice.Size()
			i -= size
			if _, err := m.StaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SliVnConfiguration_NoStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SliVnConfiguration_NoStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoStaticRoutes != nil {
		{
			size, err := m.NoStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SliVnConfiguration_StaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SliVnConfiguration_StaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StaticRoutes != nil {
		{
			size, err := m.StaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SliVnConfiguration_NoV6StaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SliVnConfiguration_NoV6StaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoV6StaticRoutes != nil {
		{
			size, err := m.NoV6StaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *SliVnConfiguration_StaticV6Routes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SliVnConfiguration_StaticV6Routes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StaticV6Routes != nil {
		{
			size, err := m.StaticV6Routes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GlobalNetworkConnectionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalNetworkConnectionType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalNetworkConnectionType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ConnectionChoice != nil {
		{
			size := m.ConnectionChoice.Size()
			i -= size
			if _, err := m.ConnectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalNetworkConnectionType_SloToGlobalDr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalNetworkConnectionType_SloToGlobalDr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SloToGlobalDr != nil {
		{
			size, err := m.SloToGlobalDr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalNetworkConnectionType_DisableForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalNetworkConnectionType_DisableForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableForwardProxy != nil {
		{
			size, err := m.DisableForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalNetworkConnectionType_EnableForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalNetworkConnectionType_EnableForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableForwardProxy != nil {
		{
			size, err := m.EnableForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalNetworkConnectionListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalNetworkConnectionListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalNetworkConnectionListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GlobalNetworkConnections) > 0 {
		for iNdEx := len(m.GlobalNetworkConnections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GlobalNetworkConnections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VssNetworkConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VssNetworkConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutsideNameserverV6) > 0 {
		i -= len(m.OutsideNameserverV6)
		copy(dAtA[i:], m.OutsideNameserverV6)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OutsideNameserverV6)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	if len(m.OutsideVipV6) > 0 {
		i -= len(m.OutsideVipV6)
		copy(dAtA[i:], m.OutsideVipV6)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OutsideVipV6)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SliChoice != nil {
		{
			size := m.SliChoice.Size()
			i -= size
			if _, err := m.SliChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TunnelDeadTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelDeadTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.VipVrrpMode != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VipVrrpMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.BgpPeerAddress) > 0 {
		i -= len(m.BgpPeerAddress)
		copy(dAtA[i:], m.BgpPeerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BgpPeerAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.BgpRouterId) > 0 {
		i -= len(m.BgpRouterId)
		copy(dAtA[i:], m.BgpRouterId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BgpRouterId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.OutsideNameserver) > 0 {
		i -= len(m.OutsideNameserver)
		copy(dAtA[i:], m.OutsideNameserver)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OutsideNameserver)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.OutsideVip) > 0 {
		i -= len(m.OutsideVip)
		copy(dAtA[i:], m.OutsideVip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OutsideVip)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InterfaceChoice != nil {
		{
			size := m.InterfaceChoice.Size()
			i -= size
			if _, err := m.InterfaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SloChoice != nil {
		{
			size := m.SloChoice.Size()
			i -= size
			if _, err := m.SloChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VssNetworkConfiguration_DefaultConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_DefaultConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultConfig != nil {
		{
			size, err := m.DefaultConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_SloConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_SloConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SloConfig != nil {
		{
			size, err := m.SloConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_DefaultInterfaceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_DefaultInterfaceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultInterfaceConfig != nil {
		{
			size, err := m.DefaultInterfaceConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_InterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_InterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InterfaceList != nil {
		{
			size, err := m.InterfaceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_SiteToSiteTunnelIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_SiteToSiteTunnelIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SiteToSiteTunnelIp)
	copy(dAtA[i:], m.SiteToSiteTunnelIp)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SiteToSiteTunnelIp)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_DefaultSliConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_DefaultSliConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSliConfig != nil {
		{
			size, err := m.DefaultSliConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_SliConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_SliConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SliConfig != nil {
		{
			size, err := m.SliConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *VssNetworkConfiguration_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssNetworkConfiguration_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *VssStorageConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VssStorageConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssStorageConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StaticRouteChoice != nil {
		{
			size := m.StaticRouteChoice.Size()
			i -= size
			if _, err := m.StaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StorageClassChoice != nil {
		{
			size := m.StorageClassChoice.Size()
			i -= size
			if _, err := m.StorageClassChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StorageDeviceChoice != nil {
		{
			size := m.StorageDeviceChoice.Size()
			i -= size
			if _, err := m.StorageDeviceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StorageInterfaceChoice != nil {
		{
			size := m.StorageInterfaceChoice.Size()
			i -= size
			if _, err := m.StorageInterfaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VssStorageConfiguration_NoStorageInterfaces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssStorageConfiguration_NoStorageInterfaces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoStorageInterfaces != nil {
		{
			size, err := m.NoStorageInterfaces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *VssStorageConfiguration_StorageInterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssStorageConfiguration_StorageInterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StorageInterfaceList != nil {
		{
			size, err := m.StorageInterfaceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *VssStorageConfiguration_NoStorageDevice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssStorageConfiguration_NoStorageDevice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoStorageDevice != nil {
		{
			size, err := m.NoStorageDevice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *VssStorageConfiguration_StorageDeviceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssStorageConfiguration_StorageDeviceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StorageDeviceList != nil {
		{
			size, err := m.StorageDeviceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *VssStorageConfiguration_DefaultStorageClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssStorageConfiguration_DefaultStorageClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultStorageClass != nil {
		{
			size, err := m.DefaultStorageClass.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *VssStorageConfiguration_StorageClassList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssStorageConfiguration_StorageClassList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StorageClassList != nil {
		{
			size, err := m.StorageClassList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *VssStorageConfiguration_NoStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssStorageConfiguration_NoStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoStaticRoutes != nil {
		{
			size, err := m.NoStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *VssStorageConfiguration_StaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VssStorageConfiguration_StaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StaticRoutes != nil {
		{
			size, err := m.StaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.SriovInterfaceChoice != nil {
		{
			size := m.SriovInterfaceChoice.Size()
			i -= size
			if _, err := m.SriovInterfaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.MasterNodeConfiguration) > 0 {
		for iNdEx := len(m.MasterNodeConfiguration) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MasterNodeConfiguration[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.IpfabricMeshGroup) > 0 {
		for iNdEx := len(m.IpfabricMeshGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IpfabricMeshGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x82
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.LaunchIkeInNamespace {
		i--
		if m.LaunchIkeInNamespace {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VmChoice != nil {
		{
			size := m.VmChoice.Size()
			i -= size
			if _, err := m.VmChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GpuChoice != nil {
		{
			size := m.GpuChoice.Size()
			i -= size
			if _, err := m.GpuChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Os != nil {
		{
			size, err := m.Os.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.Sw != nil {
		{
			size, err := m.Sw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.LocalControlPlaneChoice != nil {
		{
			size := m.LocalControlPlaneChoice.Size()
			i -= size
			if _, err := m.LocalControlPlaneChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UsbPolicyChoice != nil {
		{
			size := m.UsbPolicyChoice.Size()
			i -= size
			if _, err := m.UsbPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.K8SClusterChoice != nil {
		{
			size := m.K8SClusterChoice.Size()
			i -= size
			if _, err := m.K8SClusterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.StorageCfgChoice != nil {
		{
			size := m.StorageCfgChoice.Size()
			i -= size
			if _, err := m.StorageCfgChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.NetworkCfgChoice != nil {
		{
			size := m.NetworkCfgChoice.Size()
			i -= size
			if _, err := m.NetworkCfgChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BondChoice != nil {
		{
			size := m.BondChoice.Size()
			i -= size
			if _, err := m.BondChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OperatingSystemVersion) > 0 {
		i -= len(m.OperatingSystemVersion)
		copy(dAtA[i:], m.OperatingSystemVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		i -= len(m.VolterraSoftwareVersion)
		copy(dAtA[i:], m.VolterraSoftwareVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WorkerNodes) > 0 {
		for iNdEx := len(m.WorkerNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WorkerNodes[iNdEx])
			copy(dAtA[i:], m.WorkerNodes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.WorkerNodes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MasterNodes) > 0 {
		for iNdEx := len(m.MasterNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MasterNodes[iNdEx])
			copy(dAtA[i:], m.MasterNodes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.MasterNodes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.VolterraCertifiedHw) > 0 {
		i -= len(m.VolterraCertifiedHw)
		copy(dAtA[i:], m.VolterraCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraCertifiedHw)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_NoBondDevices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoBondDevices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoBondDevices != nil {
		{
			size, err := m.NoBondDevices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BondDeviceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BondDeviceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BondDeviceList != nil {
		{
			size, err := m.BondDeviceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultNetworkConfig != nil {
		{
			size, err := m.DefaultNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_CustomNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_CustomNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomNetworkConfig != nil {
		{
			size, err := m.CustomNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultStorageConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultStorageConfig != nil {
		{
			size, err := m.DefaultStorageConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_CustomStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_CustomStorageConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomStorageConfig != nil {
		{
			size, err := m.CustomStorageConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableGpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableGpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableGpu != nil {
		{
			size, err := m.DisableGpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableGpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableGpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableGpu != nil {
		{
			size, err := m.EnableGpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoK8SCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoK8SCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoK8SCluster != nil {
		{
			size, err := m.NoK8SCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_K8SCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_K8SCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.K8SCluster != nil {
		{
			size, err := m.K8SCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DenyAllUsb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DenyAllUsb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DenyAllUsb != nil {
		{
			size, err := m.DenyAllUsb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AllowAllUsb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AllowAllUsb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAllUsb != nil {
		{
			size, err := m.AllowAllUsb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_UsbPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UsbPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UsbPolicy != nil {
		{
			size, err := m.UsbPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoLocalControlPlane) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoLocalControlPlane) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoLocalControlPlane != nil {
		{
			size, err := m.NoLocalControlPlane.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LocalControlPlane) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LocalControlPlane) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LocalControlPlane != nil {
		{
			size, err := m.LocalControlPlane.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableVgpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableVgpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableVgpu != nil {
		{
			size, err := m.EnableVgpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableVm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableVm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableVm != nil {
		{
			size, err := m.DisableVm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableVm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableVm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableVm != nil {
		{
			size, err := m.EnableVm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultSriovInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultSriovInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSriovInterface != nil {
		{
			size, err := m.DefaultSriovInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SriovInterfaces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SriovInterfaces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SriovInterfaces != nil {
		{
			size, err := m.SriovInterfaces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SriovInterfaceChoice != nil {
		{
			size := m.SriovInterfaceChoice.Size()
			i -= size
			if _, err := m.SriovInterfaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.MasterNodeConfiguration) > 0 {
		for iNdEx := len(m.MasterNodeConfiguration) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MasterNodeConfiguration[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VmChoice != nil {
		{
			size := m.VmChoice.Size()
			i -= size
			if _, err := m.VmChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GpuChoice != nil {
		{
			size := m.GpuChoice.Size()
			i -= size
			if _, err := m.GpuChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Os != nil {
		{
			size, err := m.Os.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.Sw != nil {
		{
			size, err := m.Sw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.LocalControlPlaneChoice != nil {
		{
			size := m.LocalControlPlaneChoice.Size()
			i -= size
			if _, err := m.LocalControlPlaneChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UsbPolicyChoice != nil {
		{
			size := m.UsbPolicyChoice.Size()
			i -= size
			if _, err := m.UsbPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.K8SClusterChoice != nil {
		{
			size := m.K8SClusterChoice.Size()
			i -= size
			if _, err := m.K8SClusterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.StorageCfgChoice != nil {
		{
			size := m.StorageCfgChoice.Size()
			i -= size
			if _, err := m.StorageCfgChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.NetworkCfgChoice != nil {
		{
			size := m.NetworkCfgChoice.Size()
			i -= size
			if _, err := m.NetworkCfgChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BondChoice != nil {
		{
			size := m.BondChoice.Size()
			i -= size
			if _, err := m.BondChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.WorkerNodes) > 0 {
		for iNdEx := len(m.WorkerNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WorkerNodes[iNdEx])
			copy(dAtA[i:], m.WorkerNodes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.WorkerNodes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MasterNodes) > 0 {
		for iNdEx := len(m.MasterNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MasterNodes[iNdEx])
			copy(dAtA[i:], m.MasterNodes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.MasterNodes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.VolterraCertifiedHw) > 0 {
		i -= len(m.VolterraCertifiedHw)
		copy(dAtA[i:], m.VolterraCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraCertifiedHw)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_NoBondDevices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoBondDevices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoBondDevices != nil {
		{
			size, err := m.NoBondDevices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BondDeviceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BondDeviceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BondDeviceList != nil {
		{
			size, err := m.BondDeviceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultNetworkConfig != nil {
		{
			size, err := m.DefaultNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_CustomNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_CustomNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomNetworkConfig != nil {
		{
			size, err := m.CustomNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultStorageConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultStorageConfig != nil {
		{
			size, err := m.DefaultStorageConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_CustomStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_CustomStorageConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomStorageConfig != nil {
		{
			size, err := m.CustomStorageConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableGpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableGpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableGpu != nil {
		{
			size, err := m.DisableGpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableGpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableGpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableGpu != nil {
		{
			size, err := m.EnableGpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoK8SCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoK8SCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoK8SCluster != nil {
		{
			size, err := m.NoK8SCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_K8SCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_K8SCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.K8SCluster != nil {
		{
			size, err := m.K8SCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DenyAllUsb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DenyAllUsb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DenyAllUsb != nil {
		{
			size, err := m.DenyAllUsb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AllowAllUsb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AllowAllUsb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAllUsb != nil {
		{
			size, err := m.AllowAllUsb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_UsbPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_UsbPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UsbPolicy != nil {
		{
			size, err := m.UsbPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoLocalControlPlane) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoLocalControlPlane) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoLocalControlPlane != nil {
		{
			size, err := m.NoLocalControlPlane.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LocalControlPlane) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LocalControlPlane) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LocalControlPlane != nil {
		{
			size, err := m.LocalControlPlane.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableVgpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableVgpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableVgpu != nil {
		{
			size, err := m.EnableVgpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableVm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableVm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableVm != nil {
		{
			size, err := m.DisableVm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableVm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableVm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableVm != nil {
		{
			size, err := m.EnableVm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultSriovInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultSriovInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSriovInterface != nil {
		{
			size, err := m.DefaultSriovInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SriovInterfaces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SriovInterfaces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SriovInterfaces != nil {
		{
			size, err := m.SriovInterfaces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SriovInterfaceChoice != nil {
		{
			size := m.SriovInterfaceChoice.Size()
			i -= size
			if _, err := m.SriovInterfaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.MasterNodeConfiguration) > 0 {
		for iNdEx := len(m.MasterNodeConfiguration) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MasterNodeConfiguration[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VmChoice != nil {
		{
			size := m.VmChoice.Size()
			i -= size
			if _, err := m.VmChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GpuChoice != nil {
		{
			size := m.GpuChoice.Size()
			i -= size
			if _, err := m.GpuChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LocalControlPlaneChoice != nil {
		{
			size := m.LocalControlPlaneChoice.Size()
			i -= size
			if _, err := m.LocalControlPlaneChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UsbPolicyChoice != nil {
		{
			size := m.UsbPolicyChoice.Size()
			i -= size
			if _, err := m.UsbPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.K8SClusterChoice != nil {
		{
			size := m.K8SClusterChoice.Size()
			i -= size
			if _, err := m.K8SClusterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.StorageCfgChoice != nil {
		{
			size := m.StorageCfgChoice.Size()
			i -= size
			if _, err := m.StorageCfgChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.NetworkCfgChoice != nil {
		{
			size := m.NetworkCfgChoice.Size()
			i -= size
			if _, err := m.NetworkCfgChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BondChoice != nil {
		{
			size := m.BondChoice.Size()
			i -= size
			if _, err := m.BondChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.WorkerNodes) > 0 {
		for iNdEx := len(m.WorkerNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WorkerNodes[iNdEx])
			copy(dAtA[i:], m.WorkerNodes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.WorkerNodes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MasterNodes) > 0 {
		for iNdEx := len(m.MasterNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MasterNodes[iNdEx])
			copy(dAtA[i:], m.MasterNodes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.MasterNodes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.VolterraCertifiedHw) > 0 {
		i -= len(m.VolterraCertifiedHw)
		copy(dAtA[i:], m.VolterraCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraCertifiedHw)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_NoBondDevices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoBondDevices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoBondDevices != nil {
		{
			size, err := m.NoBondDevices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BondDeviceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BondDeviceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BondDeviceList != nil {
		{
			size, err := m.BondDeviceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultNetworkConfig != nil {
		{
			size, err := m.DefaultNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_CustomNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_CustomNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomNetworkConfig != nil {
		{
			size, err := m.CustomNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultStorageConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultStorageConfig != nil {
		{
			size, err := m.DefaultStorageConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_CustomStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_CustomStorageConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomStorageConfig != nil {
		{
			size, err := m.CustomStorageConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableGpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableGpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableGpu != nil {
		{
			size, err := m.DisableGpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableGpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableGpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableGpu != nil {
		{
			size, err := m.EnableGpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoK8SCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoK8SCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoK8SCluster != nil {
		{
			size, err := m.NoK8SCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_K8SCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_K8SCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.K8SCluster != nil {
		{
			size, err := m.K8SCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DenyAllUsb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DenyAllUsb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DenyAllUsb != nil {
		{
			size, err := m.DenyAllUsb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AllowAllUsb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AllowAllUsb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAllUsb != nil {
		{
			size, err := m.AllowAllUsb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_UsbPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_UsbPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UsbPolicy != nil {
		{
			size, err := m.UsbPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoLocalControlPlane) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoLocalControlPlane) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoLocalControlPlane != nil {
		{
			size, err := m.NoLocalControlPlane.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LocalControlPlane) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LocalControlPlane) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LocalControlPlane != nil {
		{
			size, err := m.LocalControlPlane.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableVgpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableVgpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableVgpu != nil {
		{
			size, err := m.EnableVgpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableVm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableVm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableVm != nil {
		{
			size, err := m.DisableVm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableVm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableVm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableVm != nil {
		{
			size, err := m.EnableVm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultSriovInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultSriovInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSriovInterface != nil {
		{
			size, err := m.DefaultSriovInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SriovInterfaces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SriovInterfaces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SriovInterfaces != nil {
		{
			size, err := m.SriovInterfaces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SriovInterfaceChoice != nil {
		{
			size := m.SriovInterfaceChoice.Size()
			i -= size
			if _, err := m.SriovInterfaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.MasterNodeConfiguration) > 0 {
		for iNdEx := len(m.MasterNodeConfiguration) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MasterNodeConfiguration[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VmChoice != nil {
		{
			size := m.VmChoice.Size()
			i -= size
			if _, err := m.VmChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GpuChoice != nil {
		{
			size := m.GpuChoice.Size()
			i -= size
			if _, err := m.GpuChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LocalControlPlaneChoice != nil {
		{
			size := m.LocalControlPlaneChoice.Size()
			i -= size
			if _, err := m.LocalControlPlaneChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteState))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.UsbPolicyChoice != nil {
		{
			size := m.UsbPolicyChoice.Size()
			i -= size
			if _, err := m.UsbPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.K8SClusterChoice != nil {
		{
			size := m.K8SClusterChoice.Size()
			i -= size
			if _, err := m.K8SClusterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.StorageCfgChoice != nil {
		{
			size := m.StorageCfgChoice.Size()
			i -= size
			if _, err := m.StorageCfgChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.NetworkCfgChoice != nil {
		{
			size := m.NetworkCfgChoice.Size()
			i -= size
			if _, err := m.NetworkCfgChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BondChoice != nil {
		{
			size := m.BondChoice.Size()
			i -= size
			if _, err := m.BondChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OperatingSystemVersion) > 0 {
		i -= len(m.OperatingSystemVersion)
		copy(dAtA[i:], m.OperatingSystemVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		i -= len(m.VolterraSoftwareVersion)
		copy(dAtA[i:], m.VolterraSoftwareVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WorkerNodes) > 0 {
		for iNdEx := len(m.WorkerNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WorkerNodes[iNdEx])
			copy(dAtA[i:], m.WorkerNodes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.WorkerNodes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MasterNodes) > 0 {
		for iNdEx := len(m.MasterNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MasterNodes[iNdEx])
			copy(dAtA[i:], m.MasterNodes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.MasterNodes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.VolterraCertifiedHw) > 0 {
		i -= len(m.VolterraCertifiedHw)
		copy(dAtA[i:], m.VolterraCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraCertifiedHw)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_NoBondDevices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoBondDevices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoBondDevices != nil {
		{
			size, err := m.NoBondDevices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BondDeviceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BondDeviceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BondDeviceList != nil {
		{
			size, err := m.BondDeviceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultNetworkConfig != nil {
		{
			size, err := m.DefaultNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_CustomNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_CustomNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomNetworkConfig != nil {
		{
			size, err := m.CustomNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultStorageConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultStorageConfig != nil {
		{
			size, err := m.DefaultStorageConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_CustomStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_CustomStorageConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomStorageConfig != nil {
		{
			size, err := m.CustomStorageConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableGpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableGpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableGpu != nil {
		{
			size, err := m.DisableGpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableGpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableGpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableGpu != nil {
		{
			size, err := m.EnableGpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoK8SCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoK8SCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoK8SCluster != nil {
		{
			size, err := m.NoK8SCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_K8SCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_K8SCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.K8SCluster != nil {
		{
			size, err := m.K8SCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DenyAllUsb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DenyAllUsb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DenyAllUsb != nil {
		{
			size, err := m.DenyAllUsb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AllowAllUsb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AllowAllUsb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAllUsb != nil {
		{
			size, err := m.AllowAllUsb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_UsbPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UsbPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UsbPolicy != nil {
		{
			size, err := m.UsbPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoLocalControlPlane) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoLocalControlPlane) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoLocalControlPlane != nil {
		{
			size, err := m.NoLocalControlPlane.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LocalControlPlane) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LocalControlPlane) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LocalControlPlane != nil {
		{
			size, err := m.LocalControlPlane.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableVgpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableVgpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableVgpu != nil {
		{
			size, err := m.EnableVgpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableVm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableVm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableVm != nil {
		{
			size, err := m.DisableVm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableVm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableVm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableVm != nil {
		{
			size, err := m.EnableVm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultSriovInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultSriovInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSriovInterface != nil {
		{
			size, err := m.DefaultSriovInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SriovInterfaces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SriovInterfaces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SriovInterfaces != nil {
		{
			size, err := m.SriovInterfaces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Interface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.InterfaceChoice != nil {
		n += m.InterfaceChoice.Size()
	}
	if m.DcClusterGroupConnectivityInterfaceChoice != nil {
		n += m.DcClusterGroupConnectivityInterfaceChoice.Size()
	}
	return n
}

func (m *Interface_EthernetInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EthernetInterface != nil {
		l = m.EthernetInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_DedicatedInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DedicatedInterface != nil {
		l = m.DedicatedInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_DedicatedManagementInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DedicatedManagementInterface != nil {
		l = m.DedicatedManagementInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_TunnelInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelInterface != nil {
		l = m.TunnelInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_LoopbackInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoopbackInterface != nil {
		l = m.LoopbackInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_DcClusterGroupConnectivityInterfaceDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupConnectivityInterfaceDisabled != nil {
		l = m.DcClusterGroupConnectivityInterfaceDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_DcClusterGroupConnectivityInterfaceEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupConnectivityInterfaceEnabled != nil {
		l = m.DcClusterGroupConnectivityInterfaceEnabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *InterfaceListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *StorageInterfaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.StorageInterface != nil {
		l = m.StorageInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *StorageInterfaceListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StorageInterfaces) > 0 {
		for _, e := range m.StorageInterfaces {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *StaticRoutesListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StaticRoutes) > 0 {
		for _, e := range m.StaticRoutes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *VnConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.StaticRouteChoice != nil {
		n += m.StaticRouteChoice.Size()
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if len(m.DcClusterGroupInterface) > 0 {
		for _, e := range m.DcClusterGroupInterface {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.StaticV6RouteChoice != nil {
		n += m.StaticV6RouteChoice.Size()
	}
	return n
}

func (m *VnConfiguration_NoStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoStaticRoutes != nil {
		l = m.NoStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_StaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StaticRoutes != nil {
		l = m.StaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_DcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroup != nil {
		l = m.DcClusterGroup.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_NoStaticV6Routes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoStaticV6Routes != nil {
		l = m.NoStaticV6Routes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_StaticV6Routes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StaticV6Routes != nil {
		l = m.StaticV6Routes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SliVnConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StaticRouteChoice != nil {
		n += m.StaticRouteChoice.Size()
	}
	if m.StaticV6RouteChoice != nil {
		n += m.StaticV6RouteChoice.Size()
	}
	return n
}

func (m *SliVnConfiguration_NoStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoStaticRoutes != nil {
		l = m.NoStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SliVnConfiguration_StaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StaticRoutes != nil {
		l = m.StaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SliVnConfiguration_NoV6StaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoV6StaticRoutes != nil {
		l = m.NoV6StaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SliVnConfiguration_StaticV6Routes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StaticV6Routes != nil {
		l = m.StaticV6Routes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalNetworkConnectionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectionChoice != nil {
		n += m.ConnectionChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	return n
}

func (m *GlobalNetworkConnectionType_SloToGlobalDr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SloToGlobalDr != nil {
		l = m.SloToGlobalDr.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalNetworkConnectionType_DisableForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableForwardProxy != nil {
		l = m.DisableForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalNetworkConnectionType_EnableForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableForwardProxy != nil {
		l = m.EnableForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalNetworkConnectionListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GlobalNetworkConnections) > 0 {
		for _, e := range m.GlobalNetworkConnections {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *VssNetworkConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SloChoice != nil {
		n += m.SloChoice.Size()
	}
	if m.InterfaceChoice != nil {
		n += m.InterfaceChoice.Size()
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	l = len(m.OutsideVip)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.OutsideNameserver)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.BgpRouterId)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.BgpPeerAddress)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.VipVrrpMode != 0 {
		n += 2 + sovTypes(uint64(m.VipVrrpMode))
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	if m.TunnelDeadTimeout != 0 {
		n += 2 + sovTypes(uint64(m.TunnelDeadTimeout))
	}
	if m.SliChoice != nil {
		n += m.SliChoice.Size()
	}
	l = len(m.OutsideVipV6)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.OutsideNameserverV6)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *VssNetworkConfiguration_DefaultConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultConfig != nil {
		l = m.DefaultConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_SloConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SloConfig != nil {
		l = m.SloConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_DefaultInterfaceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultInterfaceConfig != nil {
		l = m.DefaultInterfaceConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_InterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InterfaceList != nil {
		l = m.InterfaceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_SiteToSiteTunnelIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SiteToSiteTunnelIp)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *VssNetworkConfiguration_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_DefaultSliConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSliConfig != nil {
		l = m.DefaultSliConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_SliConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SliConfig != nil {
		l = m.SliConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageInterfaceChoice != nil {
		n += m.StorageInterfaceChoice.Size()
	}
	if m.StorageDeviceChoice != nil {
		n += m.StorageDeviceChoice.Size()
	}
	if m.StorageClassChoice != nil {
		n += m.StorageClassChoice.Size()
	}
	if m.StaticRouteChoice != nil {
		n += m.StaticRouteChoice.Size()
	}
	return n
}

func (m *VssStorageConfiguration_NoStorageInterfaces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoStorageInterfaces != nil {
		l = m.NoStorageInterfaces.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration_StorageInterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageInterfaceList != nil {
		l = m.StorageInterfaceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration_NoStorageDevice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoStorageDevice != nil {
		l = m.NoStorageDevice.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration_StorageDeviceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageDeviceList != nil {
		l = m.StorageDeviceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration_DefaultStorageClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultStorageClass != nil {
		l = m.DefaultStorageClass.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration_StorageClassList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageClassList != nil {
		l = m.StorageClassList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration_NoStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoStaticRoutes != nil {
		l = m.NoStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration_StaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StaticRoutes != nil {
		l = m.StaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VolterraCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodes) > 0 {
		for _, s := range m.MasterNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BondChoice != nil {
		n += m.BondChoice.Size()
	}
	if m.NetworkCfgChoice != nil {
		n += m.NetworkCfgChoice.Size()
	}
	if m.StorageCfgChoice != nil {
		n += m.StorageCfgChoice.Size()
	}
	if m.GpuChoice != nil {
		n += m.GpuChoice.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.K8SClusterChoice != nil {
		n += m.K8SClusterChoice.Size()
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.UsbPolicyChoice != nil {
		n += m.UsbPolicyChoice.Size()
	}
	if m.LocalControlPlaneChoice != nil {
		n += m.LocalControlPlaneChoice.Size()
	}
	if m.Sw != nil {
		l = m.Sw.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Os != nil {
		l = m.Os.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.VmChoice != nil {
		n += m.VmChoice.Size()
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.LaunchIkeInNamespace {
		n += 3
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.IpfabricMeshGroup) > 0 {
		for _, e := range m.IpfabricMeshGroup {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.MasterNodeConfiguration) > 0 {
		for _, e := range m.MasterNodeConfiguration {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.SriovInterfaceChoice != nil {
		n += m.SriovInterfaceChoice.Size()
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_NoBondDevices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoBondDevices != nil {
		l = m.NoBondDevices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BondDeviceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BondDeviceList != nil {
		l = m.BondDeviceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultNetworkConfig != nil {
		l = m.DefaultNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CustomNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomNetworkConfig != nil {
		l = m.CustomNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultStorageConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultStorageConfig != nil {
		l = m.DefaultStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CustomStorageConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomStorageConfig != nil {
		l = m.CustomStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableGpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableGpu != nil {
		l = m.DisableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableGpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableGpu != nil {
		l = m.EnableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoK8SCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoK8SCluster != nil {
		l = m.NoK8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_K8SCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SCluster != nil {
		l = m.K8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DenyAllUsb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenyAllUsb != nil {
		l = m.DenyAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AllowAllUsb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAllUsb != nil {
		l = m.AllowAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_UsbPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsbPolicy != nil {
		l = m.UsbPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoLocalControlPlane) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoLocalControlPlane != nil {
		l = m.NoLocalControlPlane.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LocalControlPlane) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocalControlPlane != nil {
		l = m.LocalControlPlane.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableVgpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableVgpu != nil {
		l = m.EnableVgpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableVm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableVm != nil {
		l = m.DisableVm.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableVm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableVm != nil {
		l = m.EnableVm.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultSriovInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSriovInterface != nil {
		l = m.DefaultSriovInterface.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SriovInterfaces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SriovInterfaces != nil {
		l = m.SriovInterfaces.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VolterraCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodes) > 0 {
		for _, s := range m.MasterNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BondChoice != nil {
		n += m.BondChoice.Size()
	}
	if m.NetworkCfgChoice != nil {
		n += m.NetworkCfgChoice.Size()
	}
	if m.StorageCfgChoice != nil {
		n += m.StorageCfgChoice.Size()
	}
	if m.GpuChoice != nil {
		n += m.GpuChoice.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.K8SClusterChoice != nil {
		n += m.K8SClusterChoice.Size()
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.UsbPolicyChoice != nil {
		n += m.UsbPolicyChoice.Size()
	}
	if m.LocalControlPlaneChoice != nil {
		n += m.LocalControlPlaneChoice.Size()
	}
	if m.Sw != nil {
		l = m.Sw.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Os != nil {
		l = m.Os.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.VmChoice != nil {
		n += m.VmChoice.Size()
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodeConfiguration) > 0 {
		for _, e := range m.MasterNodeConfiguration {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.SriovInterfaceChoice != nil {
		n += m.SriovInterfaceChoice.Size()
	}
	return n
}

func (m *CreateSpecType_NoBondDevices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoBondDevices != nil {
		l = m.NoBondDevices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BondDeviceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BondDeviceList != nil {
		l = m.BondDeviceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultNetworkConfig != nil {
		l = m.DefaultNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CustomNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomNetworkConfig != nil {
		l = m.CustomNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultStorageConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultStorageConfig != nil {
		l = m.DefaultStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CustomStorageConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomStorageConfig != nil {
		l = m.CustomStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableGpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableGpu != nil {
		l = m.DisableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableGpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableGpu != nil {
		l = m.EnableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoK8SCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoK8SCluster != nil {
		l = m.NoK8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_K8SCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SCluster != nil {
		l = m.K8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DenyAllUsb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenyAllUsb != nil {
		l = m.DenyAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AllowAllUsb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAllUsb != nil {
		l = m.AllowAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_UsbPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsbPolicy != nil {
		l = m.UsbPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoLocalControlPlane) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoLocalControlPlane != nil {
		l = m.NoLocalControlPlane.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LocalControlPlane) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocalControlPlane != nil {
		l = m.LocalControlPlane.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableVgpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableVgpu != nil {
		l = m.EnableVgpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableVm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableVm != nil {
		l = m.DisableVm.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableVm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableVm != nil {
		l = m.EnableVm.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultSriovInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSriovInterface != nil {
		l = m.DefaultSriovInterface.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SriovInterfaces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SriovInterfaces != nil {
		l = m.SriovInterfaces.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VolterraCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodes) > 0 {
		for _, s := range m.MasterNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BondChoice != nil {
		n += m.BondChoice.Size()
	}
	if m.NetworkCfgChoice != nil {
		n += m.NetworkCfgChoice.Size()
	}
	if m.StorageCfgChoice != nil {
		n += m.StorageCfgChoice.Size()
	}
	if m.GpuChoice != nil {
		n += m.GpuChoice.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.K8SClusterChoice != nil {
		n += m.K8SClusterChoice.Size()
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.UsbPolicyChoice != nil {
		n += m.UsbPolicyChoice.Size()
	}
	if m.LocalControlPlaneChoice != nil {
		n += m.LocalControlPlaneChoice.Size()
	}
	if m.VmChoice != nil {
		n += m.VmChoice.Size()
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodeConfiguration) > 0 {
		for _, e := range m.MasterNodeConfiguration {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.SriovInterfaceChoice != nil {
		n += m.SriovInterfaceChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_NoBondDevices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoBondDevices != nil {
		l = m.NoBondDevices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BondDeviceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BondDeviceList != nil {
		l = m.BondDeviceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultNetworkConfig != nil {
		l = m.DefaultNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CustomNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomNetworkConfig != nil {
		l = m.CustomNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultStorageConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultStorageConfig != nil {
		l = m.DefaultStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CustomStorageConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomStorageConfig != nil {
		l = m.CustomStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableGpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableGpu != nil {
		l = m.DisableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableGpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableGpu != nil {
		l = m.EnableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoK8SCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoK8SCluster != nil {
		l = m.NoK8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_K8SCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SCluster != nil {
		l = m.K8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DenyAllUsb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenyAllUsb != nil {
		l = m.DenyAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AllowAllUsb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAllUsb != nil {
		l = m.AllowAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_UsbPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsbPolicy != nil {
		l = m.UsbPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoLocalControlPlane) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoLocalControlPlane != nil {
		l = m.NoLocalControlPlane.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LocalControlPlane) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocalControlPlane != nil {
		l = m.LocalControlPlane.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableVgpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableVgpu != nil {
		l = m.EnableVgpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableVm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableVm != nil {
		l = m.DisableVm.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableVm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableVm != nil {
		l = m.EnableVm.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultSriovInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSriovInterface != nil {
		l = m.DefaultSriovInterface.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SriovInterfaces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SriovInterfaces != nil {
		l = m.SriovInterfaces.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VolterraCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodes) > 0 {
		for _, s := range m.MasterNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BondChoice != nil {
		n += m.BondChoice.Size()
	}
	if m.NetworkCfgChoice != nil {
		n += m.NetworkCfgChoice.Size()
	}
	if m.StorageCfgChoice != nil {
		n += m.StorageCfgChoice.Size()
	}
	if m.GpuChoice != nil {
		n += m.GpuChoice.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.K8SClusterChoice != nil {
		n += m.K8SClusterChoice.Size()
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.UsbPolicyChoice != nil {
		n += m.UsbPolicyChoice.Size()
	}
	if m.SiteState != 0 {
		n += 2 + sovTypes(uint64(m.SiteState))
	}
	if m.LocalControlPlaneChoice != nil {
		n += m.LocalControlPlaneChoice.Size()
	}
	if m.VmChoice != nil {
		n += m.VmChoice.Size()
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodeConfiguration) > 0 {
		for _, e := range m.MasterNodeConfiguration {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.SriovInterfaceChoice != nil {
		n += m.SriovInterfaceChoice.Size()
	}
	return n
}

func (m *GetSpecType_NoBondDevices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoBondDevices != nil {
		l = m.NoBondDevices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BondDeviceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BondDeviceList != nil {
		l = m.BondDeviceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultNetworkConfig != nil {
		l = m.DefaultNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CustomNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomNetworkConfig != nil {
		l = m.CustomNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultStorageConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultStorageConfig != nil {
		l = m.DefaultStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CustomStorageConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomStorageConfig != nil {
		l = m.CustomStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableGpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableGpu != nil {
		l = m.DisableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableGpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableGpu != nil {
		l = m.EnableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoK8SCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoK8SCluster != nil {
		l = m.NoK8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_K8SCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SCluster != nil {
		l = m.K8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DenyAllUsb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenyAllUsb != nil {
		l = m.DenyAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AllowAllUsb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAllUsb != nil {
		l = m.AllowAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_UsbPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsbPolicy != nil {
		l = m.UsbPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoLocalControlPlane) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoLocalControlPlane != nil {
		l = m.NoLocalControlPlane.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LocalControlPlane) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocalControlPlane != nil {
		l = m.LocalControlPlane.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableVgpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableVgpu != nil {
		l = m.EnableVgpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableVm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableVm != nil {
		l = m.DisableVm.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableVm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableVm != nil {
		l = m.EnableVm.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultSriovInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSriovInterface != nil {
		l = m.DefaultSriovInterface.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SriovInterfaces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SriovInterfaces != nil {
		l = m.SriovInterfaces.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Interface) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&Interface{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`InterfaceChoice:` + fmt.Sprintf("%v", this.InterfaceChoice) + `,`,
		`DcClusterGroupConnectivityInterfaceChoice:` + fmt.Sprintf("%v", this.DcClusterGroupConnectivityInterfaceChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_EthernetInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_EthernetInterface{`,
		`EthernetInterface:` + strings.Replace(fmt.Sprintf("%v", this.EthernetInterface), "EthernetInterfaceType", "network_interface.EthernetInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_DedicatedInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_DedicatedInterface{`,
		`DedicatedInterface:` + strings.Replace(fmt.Sprintf("%v", this.DedicatedInterface), "DedicatedInterfaceType", "network_interface.DedicatedInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_DedicatedManagementInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_DedicatedManagementInterface{`,
		`DedicatedManagementInterface:` + strings.Replace(fmt.Sprintf("%v", this.DedicatedManagementInterface), "DedicatedManagementInterfaceType", "network_interface.DedicatedManagementInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_TunnelInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_TunnelInterface{`,
		`TunnelInterface:` + strings.Replace(fmt.Sprintf("%v", this.TunnelInterface), "TunnelInterfaceType", "network_interface.TunnelInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_LoopbackInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_LoopbackInterface{`,
		`LoopbackInterface:` + strings.Replace(fmt.Sprintf("%v", this.LoopbackInterface), "LoopbackInterfaceType", "network_interface.LoopbackInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_DcClusterGroupConnectivityInterfaceDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_DcClusterGroupConnectivityInterfaceDisabled{`,
		`DcClusterGroupConnectivityInterfaceDisabled:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupConnectivityInterfaceDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_DcClusterGroupConnectivityInterfaceEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_DcClusterGroupConnectivityInterfaceEnabled{`,
		`DcClusterGroupConnectivityInterfaceEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupConnectivityInterfaceEnabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterfaceListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInterfaces := "[]*Interface{"
	for _, f := range this.Interfaces {
		repeatedStringForInterfaces += strings.Replace(f.String(), "Interface", "Interface", 1) + ","
	}
	repeatedStringForInterfaces += "}"
	s := strings.Join([]string{`&InterfaceListType{`,
		`Interfaces:` + repeatedStringForInterfaces + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageInterfaceType) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&StorageInterfaceType{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`StorageInterface:` + strings.Replace(fmt.Sprintf("%v", this.StorageInterface), "EthernetInterfaceType", "network_interface.EthernetInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageInterfaceListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStorageInterfaces := "[]*StorageInterfaceType{"
	for _, f := range this.StorageInterfaces {
		repeatedStringForStorageInterfaces += strings.Replace(f.String(), "StorageInterfaceType", "StorageInterfaceType", 1) + ","
	}
	repeatedStringForStorageInterfaces += "}"
	s := strings.Join([]string{`&StorageInterfaceListType{`,
		`StorageInterfaces:` + repeatedStringForStorageInterfaces + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRoutesListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStaticRoutes := "[]*StaticRouteViewType{"
	for _, f := range this.StaticRoutes {
		repeatedStringForStaticRoutes += strings.Replace(fmt.Sprintf("%v", f), "StaticRouteViewType", "virtual_network.StaticRouteViewType", 1) + ","
	}
	repeatedStringForStaticRoutes += "}"
	s := strings.Join([]string{`&StaticRoutesListType{`,
		`StaticRoutes:` + repeatedStringForStaticRoutes + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDcClusterGroupInterface := "[]*ObjectRefType{"
	for _, f := range this.DcClusterGroupInterface {
		repeatedStringForDcClusterGroupInterface += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForDcClusterGroupInterface += "}"
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&VnConfiguration{`,
		`Labels:` + mapStringForLabels + `,`,
		`StaticRouteChoice:` + fmt.Sprintf("%v", this.StaticRouteChoice) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`DcClusterGroupInterface:` + repeatedStringForDcClusterGroupInterface + `,`,
		`StaticV6RouteChoice:` + fmt.Sprintf("%v", this.StaticV6RouteChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoStaticRoutes{`,
		`NoStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_StaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_StaticRoutes{`,
		`StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.StaticRoutes), "StaticRoutesListType", "StaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_DcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_DcClusterGroup{`,
		`DcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroup), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoStaticV6Routes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoStaticV6Routes{`,
		`NoStaticV6Routes:` + strings.Replace(fmt.Sprintf("%v", this.NoStaticV6Routes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_StaticV6Routes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_StaticV6Routes{`,
		`StaticV6Routes:` + strings.Replace(fmt.Sprintf("%v", this.StaticV6Routes), "StaticV6RoutesListType", "virtual_network.StaticV6RoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SliVnConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SliVnConfiguration{`,
		`StaticRouteChoice:` + fmt.Sprintf("%v", this.StaticRouteChoice) + `,`,
		`StaticV6RouteChoice:` + fmt.Sprintf("%v", this.StaticV6RouteChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SliVnConfiguration_NoStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SliVnConfiguration_NoStaticRoutes{`,
		`NoStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SliVnConfiguration_StaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SliVnConfiguration_StaticRoutes{`,
		`StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.StaticRoutes), "StaticRoutesListType", "StaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SliVnConfiguration_NoV6StaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SliVnConfiguration_NoV6StaticRoutes{`,
		`NoV6StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoV6StaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SliVnConfiguration_StaticV6Routes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SliVnConfiguration_StaticV6Routes{`,
		`StaticV6Routes:` + strings.Replace(fmt.Sprintf("%v", this.StaticV6Routes), "StaticV6RoutesListType", "virtual_network.StaticV6RoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalNetworkConnectionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalNetworkConnectionType{`,
		`ConnectionChoice:` + fmt.Sprintf("%v", this.ConnectionChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalNetworkConnectionType_SloToGlobalDr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalNetworkConnectionType_SloToGlobalDr{`,
		`SloToGlobalDr:` + strings.Replace(fmt.Sprintf("%v", this.SloToGlobalDr), "GlobalConnectorType", "views.GlobalConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalNetworkConnectionType_DisableForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalNetworkConnectionType_DisableForwardProxy{`,
		`DisableForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.DisableForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalNetworkConnectionType_EnableForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalNetworkConnectionType_EnableForwardProxy{`,
		`EnableForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.EnableForwardProxy), "ForwardProxyConfigType", "schema.ForwardProxyConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalNetworkConnectionListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGlobalNetworkConnections := "[]*GlobalNetworkConnectionType{"
	for _, f := range this.GlobalNetworkConnections {
		repeatedStringForGlobalNetworkConnections += strings.Replace(f.String(), "GlobalNetworkConnectionType", "GlobalNetworkConnectionType", 1) + ","
	}
	repeatedStringForGlobalNetworkConnections += "}"
	s := strings.Join([]string{`&GlobalNetworkConnectionListType{`,
		`GlobalNetworkConnections:` + repeatedStringForGlobalNetworkConnections + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration{`,
		`SloChoice:` + fmt.Sprintf("%v", this.SloChoice) + `,`,
		`InterfaceChoice:` + fmt.Sprintf("%v", this.InterfaceChoice) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`OutsideVip:` + fmt.Sprintf("%v", this.OutsideVip) + `,`,
		`OutsideNameserver:` + fmt.Sprintf("%v", this.OutsideNameserver) + `,`,
		`BgpRouterId:` + fmt.Sprintf("%v", this.BgpRouterId) + `,`,
		`BgpPeerAddress:` + fmt.Sprintf("%v", this.BgpPeerAddress) + `,`,
		`VipVrrpMode:` + fmt.Sprintf("%v", this.VipVrrpMode) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`TunnelDeadTimeout:` + fmt.Sprintf("%v", this.TunnelDeadTimeout) + `,`,
		`SliChoice:` + fmt.Sprintf("%v", this.SliChoice) + `,`,
		`OutsideVipV6:` + fmt.Sprintf("%v", this.OutsideVipV6) + `,`,
		`OutsideNameserverV6:` + fmt.Sprintf("%v", this.OutsideNameserverV6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_DefaultConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_DefaultConfig{`,
		`DefaultConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_SloConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_SloConfig{`,
		`SloConfig:` + strings.Replace(fmt.Sprintf("%v", this.SloConfig), "VnConfiguration", "VnConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_DefaultInterfaceConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_DefaultInterfaceConfig{`,
		`DefaultInterfaceConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultInterfaceConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_InterfaceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_InterfaceList{`,
		`InterfaceList:` + strings.Replace(fmt.Sprintf("%v", this.InterfaceList), "InterfaceListType", "InterfaceListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_SiteToSiteTunnelIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_SiteToSiteTunnelIp{`,
		`SiteToSiteTunnelIp:` + fmt.Sprintf("%v", this.SiteToSiteTunnelIp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_DefaultSliConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_DefaultSliConfig{`,
		`DefaultSliConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSliConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_SliConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_SliConfig{`,
		`SliConfig:` + strings.Replace(fmt.Sprintf("%v", this.SliConfig), "SliVnConfiguration", "SliVnConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration{`,
		`StorageInterfaceChoice:` + fmt.Sprintf("%v", this.StorageInterfaceChoice) + `,`,
		`StorageDeviceChoice:` + fmt.Sprintf("%v", this.StorageDeviceChoice) + `,`,
		`StorageClassChoice:` + fmt.Sprintf("%v", this.StorageClassChoice) + `,`,
		`StaticRouteChoice:` + fmt.Sprintf("%v", this.StaticRouteChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_NoStorageInterfaces) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_NoStorageInterfaces{`,
		`NoStorageInterfaces:` + strings.Replace(fmt.Sprintf("%v", this.NoStorageInterfaces), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_StorageInterfaceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_StorageInterfaceList{`,
		`StorageInterfaceList:` + strings.Replace(fmt.Sprintf("%v", this.StorageInterfaceList), "StorageInterfaceListType", "StorageInterfaceListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_NoStorageDevice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_NoStorageDevice{`,
		`NoStorageDevice:` + strings.Replace(fmt.Sprintf("%v", this.NoStorageDevice), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_StorageDeviceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_StorageDeviceList{`,
		`StorageDeviceList:` + strings.Replace(fmt.Sprintf("%v", this.StorageDeviceList), "FleetStorageDeviceListType", "fleet.FleetStorageDeviceListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_DefaultStorageClass) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_DefaultStorageClass{`,
		`DefaultStorageClass:` + strings.Replace(fmt.Sprintf("%v", this.DefaultStorageClass), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_StorageClassList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_StorageClassList{`,
		`StorageClassList:` + strings.Replace(fmt.Sprintf("%v", this.StorageClassList), "FleetStorageClassListType", "fleet.FleetStorageClassListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_NoStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_NoStaticRoutes{`,
		`NoStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_StaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_StaticRoutes{`,
		`StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.StaticRoutes), "StaticRoutesListType", "StaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIpfabricMeshGroup := "[]*ReMeshGroup{"
	for _, f := range this.IpfabricMeshGroup {
		repeatedStringForIpfabricMeshGroup += strings.Replace(fmt.Sprintf("%v", f), "ReMeshGroup", "site.ReMeshGroup", 1) + ","
	}
	repeatedStringForIpfabricMeshGroup += "}"
	repeatedStringForMasterNodeConfiguration := "[]*MasterNode{"
	for _, f := range this.MasterNodeConfiguration {
		repeatedStringForMasterNodeConfiguration += strings.Replace(fmt.Sprintf("%v", f), "MasterNode", "views.MasterNode", 1) + ","
	}
	repeatedStringForMasterNodeConfiguration += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`VolterraCertifiedHw:` + fmt.Sprintf("%v", this.VolterraCertifiedHw) + `,`,
		`MasterNodes:` + fmt.Sprintf("%v", this.MasterNodes) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`BondChoice:` + fmt.Sprintf("%v", this.BondChoice) + `,`,
		`NetworkCfgChoice:` + fmt.Sprintf("%v", this.NetworkCfgChoice) + `,`,
		`StorageCfgChoice:` + fmt.Sprintf("%v", this.StorageCfgChoice) + `,`,
		`GpuChoice:` + fmt.Sprintf("%v", this.GpuChoice) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`K8SClusterChoice:` + fmt.Sprintf("%v", this.K8SClusterChoice) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`UsbPolicyChoice:` + fmt.Sprintf("%v", this.UsbPolicyChoice) + `,`,
		`LocalControlPlaneChoice:` + fmt.Sprintf("%v", this.LocalControlPlaneChoice) + `,`,
		`Sw:` + strings.Replace(fmt.Sprintf("%v", this.Sw), "VolterraSoftwareType", "views.VolterraSoftwareType", 1) + `,`,
		`Os:` + strings.Replace(fmt.Sprintf("%v", this.Os), "OperatingSystemType", "views.OperatingSystemType", 1) + `,`,
		`VmChoice:` + fmt.Sprintf("%v", this.VmChoice) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`LaunchIkeInNamespace:` + fmt.Sprintf("%v", this.LaunchIkeInNamespace) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`IpfabricMeshGroup:` + repeatedStringForIpfabricMeshGroup + `,`,
		`MasterNodeConfiguration:` + repeatedStringForMasterNodeConfiguration + `,`,
		`SriovInterfaceChoice:` + fmt.Sprintf("%v", this.SriovInterfaceChoice) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoBondDevices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoBondDevices{`,
		`NoBondDevices:` + strings.Replace(fmt.Sprintf("%v", this.NoBondDevices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BondDeviceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BondDeviceList{`,
		`BondDeviceList:` + strings.Replace(fmt.Sprintf("%v", this.BondDeviceList), "FleetBondDevicesListType", "fleet.FleetBondDevicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultNetworkConfig{`,
		`DefaultNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultNetworkConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CustomNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CustomNetworkConfig{`,
		`CustomNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomNetworkConfig), "VssNetworkConfiguration", "VssNetworkConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultStorageConfig{`,
		`DefaultStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultStorageConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CustomStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CustomStorageConfig{`,
		`CustomStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomStorageConfig), "VssStorageConfiguration", "VssStorageConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableGpu{`,
		`DisableGpu:` + strings.Replace(fmt.Sprintf("%v", this.DisableGpu), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableGpu{`,
		`EnableGpu:` + strings.Replace(fmt.Sprintf("%v", this.EnableGpu), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoK8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoK8SCluster{`,
		`NoK8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.NoK8SCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_K8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_K8SCluster{`,
		`K8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.K8SCluster), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DenyAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DenyAllUsb{`,
		`DenyAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.DenyAllUsb), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AllowAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AllowAllUsb{`,
		`AllowAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.AllowAllUsb), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UsbPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UsbPolicy{`,
		`UsbPolicy:` + strings.Replace(fmt.Sprintf("%v", this.UsbPolicy), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoLocalControlPlane) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoLocalControlPlane{`,
		`NoLocalControlPlane:` + strings.Replace(fmt.Sprintf("%v", this.NoLocalControlPlane), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LocalControlPlane) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LocalControlPlane{`,
		`LocalControlPlane:` + strings.Replace(fmt.Sprintf("%v", this.LocalControlPlane), "LocalControlPlaneType", "fleet.LocalControlPlaneType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableVgpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableVgpu{`,
		`EnableVgpu:` + strings.Replace(fmt.Sprintf("%v", this.EnableVgpu), "VGPUConfiguration", "fleet.VGPUConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableVm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableVm{`,
		`DisableVm:` + strings.Replace(fmt.Sprintf("%v", this.DisableVm), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableVm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableVm{`,
		`EnableVm:` + strings.Replace(fmt.Sprintf("%v", this.EnableVm), "VMConfiguration", "fleet.VMConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultSriovInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultSriovInterface{`,
		`DefaultSriovInterface:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSriovInterface), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SriovInterfaces) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SriovInterfaces{`,
		`SriovInterfaces:` + strings.Replace(fmt.Sprintf("%v", this.SriovInterfaces), "SriovInterfacesListType", "fleet.SriovInterfacesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMasterNodeConfiguration := "[]*MasterNode{"
	for _, f := range this.MasterNodeConfiguration {
		repeatedStringForMasterNodeConfiguration += strings.Replace(fmt.Sprintf("%v", f), "MasterNode", "views.MasterNode", 1) + ","
	}
	repeatedStringForMasterNodeConfiguration += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`VolterraCertifiedHw:` + fmt.Sprintf("%v", this.VolterraCertifiedHw) + `,`,
		`MasterNodes:` + fmt.Sprintf("%v", this.MasterNodes) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`BondChoice:` + fmt.Sprintf("%v", this.BondChoice) + `,`,
		`NetworkCfgChoice:` + fmt.Sprintf("%v", this.NetworkCfgChoice) + `,`,
		`StorageCfgChoice:` + fmt.Sprintf("%v", this.StorageCfgChoice) + `,`,
		`GpuChoice:` + fmt.Sprintf("%v", this.GpuChoice) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`K8SClusterChoice:` + fmt.Sprintf("%v", this.K8SClusterChoice) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`UsbPolicyChoice:` + fmt.Sprintf("%v", this.UsbPolicyChoice) + `,`,
		`LocalControlPlaneChoice:` + fmt.Sprintf("%v", this.LocalControlPlaneChoice) + `,`,
		`Sw:` + strings.Replace(fmt.Sprintf("%v", this.Sw), "VolterraSoftwareType", "views.VolterraSoftwareType", 1) + `,`,
		`Os:` + strings.Replace(fmt.Sprintf("%v", this.Os), "OperatingSystemType", "views.OperatingSystemType", 1) + `,`,
		`VmChoice:` + fmt.Sprintf("%v", this.VmChoice) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`MasterNodeConfiguration:` + repeatedStringForMasterNodeConfiguration + `,`,
		`SriovInterfaceChoice:` + fmt.Sprintf("%v", this.SriovInterfaceChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoBondDevices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoBondDevices{`,
		`NoBondDevices:` + strings.Replace(fmt.Sprintf("%v", this.NoBondDevices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BondDeviceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BondDeviceList{`,
		`BondDeviceList:` + strings.Replace(fmt.Sprintf("%v", this.BondDeviceList), "FleetBondDevicesListType", "fleet.FleetBondDevicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultNetworkConfig{`,
		`DefaultNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultNetworkConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CustomNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CustomNetworkConfig{`,
		`CustomNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomNetworkConfig), "VssNetworkConfiguration", "VssNetworkConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultStorageConfig{`,
		`DefaultStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultStorageConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CustomStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CustomStorageConfig{`,
		`CustomStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomStorageConfig), "VssStorageConfiguration", "VssStorageConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableGpu{`,
		`DisableGpu:` + strings.Replace(fmt.Sprintf("%v", this.DisableGpu), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableGpu{`,
		`EnableGpu:` + strings.Replace(fmt.Sprintf("%v", this.EnableGpu), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoK8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoK8SCluster{`,
		`NoK8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.NoK8SCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_K8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_K8SCluster{`,
		`K8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.K8SCluster), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DenyAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DenyAllUsb{`,
		`DenyAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.DenyAllUsb), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AllowAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AllowAllUsb{`,
		`AllowAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.AllowAllUsb), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UsbPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UsbPolicy{`,
		`UsbPolicy:` + strings.Replace(fmt.Sprintf("%v", this.UsbPolicy), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoLocalControlPlane) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoLocalControlPlane{`,
		`NoLocalControlPlane:` + strings.Replace(fmt.Sprintf("%v", this.NoLocalControlPlane), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LocalControlPlane) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LocalControlPlane{`,
		`LocalControlPlane:` + strings.Replace(fmt.Sprintf("%v", this.LocalControlPlane), "LocalControlPlaneType", "fleet.LocalControlPlaneType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableVgpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableVgpu{`,
		`EnableVgpu:` + strings.Replace(fmt.Sprintf("%v", this.EnableVgpu), "VGPUConfiguration", "fleet.VGPUConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableVm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableVm{`,
		`DisableVm:` + strings.Replace(fmt.Sprintf("%v", this.DisableVm), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableVm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableVm{`,
		`EnableVm:` + strings.Replace(fmt.Sprintf("%v", this.EnableVm), "VMConfiguration", "fleet.VMConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultSriovInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultSriovInterface{`,
		`DefaultSriovInterface:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSriovInterface), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SriovInterfaces) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SriovInterfaces{`,
		`SriovInterfaces:` + strings.Replace(fmt.Sprintf("%v", this.SriovInterfaces), "SriovInterfacesListType", "fleet.SriovInterfacesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMasterNodeConfiguration := "[]*MasterNode{"
	for _, f := range this.MasterNodeConfiguration {
		repeatedStringForMasterNodeConfiguration += strings.Replace(fmt.Sprintf("%v", f), "MasterNode", "views.MasterNode", 1) + ","
	}
	repeatedStringForMasterNodeConfiguration += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`VolterraCertifiedHw:` + fmt.Sprintf("%v", this.VolterraCertifiedHw) + `,`,
		`MasterNodes:` + fmt.Sprintf("%v", this.MasterNodes) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`BondChoice:` + fmt.Sprintf("%v", this.BondChoice) + `,`,
		`NetworkCfgChoice:` + fmt.Sprintf("%v", this.NetworkCfgChoice) + `,`,
		`StorageCfgChoice:` + fmt.Sprintf("%v", this.StorageCfgChoice) + `,`,
		`GpuChoice:` + fmt.Sprintf("%v", this.GpuChoice) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`K8SClusterChoice:` + fmt.Sprintf("%v", this.K8SClusterChoice) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`UsbPolicyChoice:` + fmt.Sprintf("%v", this.UsbPolicyChoice) + `,`,
		`LocalControlPlaneChoice:` + fmt.Sprintf("%v", this.LocalControlPlaneChoice) + `,`,
		`VmChoice:` + fmt.Sprintf("%v", this.VmChoice) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`MasterNodeConfiguration:` + repeatedStringForMasterNodeConfiguration + `,`,
		`SriovInterfaceChoice:` + fmt.Sprintf("%v", this.SriovInterfaceChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoBondDevices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoBondDevices{`,
		`NoBondDevices:` + strings.Replace(fmt.Sprintf("%v", this.NoBondDevices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BondDeviceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BondDeviceList{`,
		`BondDeviceList:` + strings.Replace(fmt.Sprintf("%v", this.BondDeviceList), "FleetBondDevicesListType", "fleet.FleetBondDevicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultNetworkConfig{`,
		`DefaultNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultNetworkConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CustomNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CustomNetworkConfig{`,
		`CustomNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomNetworkConfig), "VssNetworkConfiguration", "VssNetworkConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultStorageConfig{`,
		`DefaultStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultStorageConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CustomStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CustomStorageConfig{`,
		`CustomStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomStorageConfig), "VssStorageConfiguration", "VssStorageConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableGpu{`,
		`DisableGpu:` + strings.Replace(fmt.Sprintf("%v", this.DisableGpu), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableGpu{`,
		`EnableGpu:` + strings.Replace(fmt.Sprintf("%v", this.EnableGpu), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoK8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoK8SCluster{`,
		`NoK8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.NoK8SCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_K8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_K8SCluster{`,
		`K8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.K8SCluster), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DenyAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DenyAllUsb{`,
		`DenyAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.DenyAllUsb), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AllowAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AllowAllUsb{`,
		`AllowAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.AllowAllUsb), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UsbPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UsbPolicy{`,
		`UsbPolicy:` + strings.Replace(fmt.Sprintf("%v", this.UsbPolicy), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoLocalControlPlane) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoLocalControlPlane{`,
		`NoLocalControlPlane:` + strings.Replace(fmt.Sprintf("%v", this.NoLocalControlPlane), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LocalControlPlane) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LocalControlPlane{`,
		`LocalControlPlane:` + strings.Replace(fmt.Sprintf("%v", this.LocalControlPlane), "LocalControlPlaneType", "fleet.LocalControlPlaneType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableVgpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableVgpu{`,
		`EnableVgpu:` + strings.Replace(fmt.Sprintf("%v", this.EnableVgpu), "VGPUConfiguration", "fleet.VGPUConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableVm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableVm{`,
		`DisableVm:` + strings.Replace(fmt.Sprintf("%v", this.DisableVm), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableVm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableVm{`,
		`EnableVm:` + strings.Replace(fmt.Sprintf("%v", this.EnableVm), "VMConfiguration", "fleet.VMConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultSriovInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultSriovInterface{`,
		`DefaultSriovInterface:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSriovInterface), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SriovInterfaces) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SriovInterfaces{`,
		`SriovInterfaces:` + strings.Replace(fmt.Sprintf("%v", this.SriovInterfaces), "SriovInterfacesListType", "fleet.SriovInterfacesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMasterNodeConfiguration := "[]*MasterNode{"
	for _, f := range this.MasterNodeConfiguration {
		repeatedStringForMasterNodeConfiguration += strings.Replace(fmt.Sprintf("%v", f), "MasterNode", "views.MasterNode", 1) + ","
	}
	repeatedStringForMasterNodeConfiguration += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`VolterraCertifiedHw:` + fmt.Sprintf("%v", this.VolterraCertifiedHw) + `,`,
		`MasterNodes:` + fmt.Sprintf("%v", this.MasterNodes) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`BondChoice:` + fmt.Sprintf("%v", this.BondChoice) + `,`,
		`NetworkCfgChoice:` + fmt.Sprintf("%v", this.NetworkCfgChoice) + `,`,
		`StorageCfgChoice:` + fmt.Sprintf("%v", this.StorageCfgChoice) + `,`,
		`GpuChoice:` + fmt.Sprintf("%v", this.GpuChoice) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`K8SClusterChoice:` + fmt.Sprintf("%v", this.K8SClusterChoice) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`UsbPolicyChoice:` + fmt.Sprintf("%v", this.UsbPolicyChoice) + `,`,
		`SiteState:` + fmt.Sprintf("%v", this.SiteState) + `,`,
		`LocalControlPlaneChoice:` + fmt.Sprintf("%v", this.LocalControlPlaneChoice) + `,`,
		`VmChoice:` + fmt.Sprintf("%v", this.VmChoice) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`MasterNodeConfiguration:` + repeatedStringForMasterNodeConfiguration + `,`,
		`SriovInterfaceChoice:` + fmt.Sprintf("%v", this.SriovInterfaceChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoBondDevices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoBondDevices{`,
		`NoBondDevices:` + strings.Replace(fmt.Sprintf("%v", this.NoBondDevices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BondDeviceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BondDeviceList{`,
		`BondDeviceList:` + strings.Replace(fmt.Sprintf("%v", this.BondDeviceList), "FleetBondDevicesListType", "fleet.FleetBondDevicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultNetworkConfig{`,
		`DefaultNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultNetworkConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CustomNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CustomNetworkConfig{`,
		`CustomNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomNetworkConfig), "VssNetworkConfiguration", "VssNetworkConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultStorageConfig{`,
		`DefaultStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultStorageConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CustomStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CustomStorageConfig{`,
		`CustomStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomStorageConfig), "VssStorageConfiguration", "VssStorageConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableGpu{`,
		`DisableGpu:` + strings.Replace(fmt.Sprintf("%v", this.DisableGpu), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableGpu{`,
		`EnableGpu:` + strings.Replace(fmt.Sprintf("%v", this.EnableGpu), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoK8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoK8SCluster{`,
		`NoK8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.NoK8SCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_K8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_K8SCluster{`,
		`K8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.K8SCluster), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DenyAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DenyAllUsb{`,
		`DenyAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.DenyAllUsb), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AllowAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AllowAllUsb{`,
		`AllowAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.AllowAllUsb), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UsbPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UsbPolicy{`,
		`UsbPolicy:` + strings.Replace(fmt.Sprintf("%v", this.UsbPolicy), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoLocalControlPlane) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoLocalControlPlane{`,
		`NoLocalControlPlane:` + strings.Replace(fmt.Sprintf("%v", this.NoLocalControlPlane), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LocalControlPlane) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LocalControlPlane{`,
		`LocalControlPlane:` + strings.Replace(fmt.Sprintf("%v", this.LocalControlPlane), "LocalControlPlaneType", "fleet.LocalControlPlaneType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableVgpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableVgpu{`,
		`EnableVgpu:` + strings.Replace(fmt.Sprintf("%v", this.EnableVgpu), "VGPUConfiguration", "fleet.VGPUConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableVm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableVm{`,
		`DisableVm:` + strings.Replace(fmt.Sprintf("%v", this.DisableVm), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableVm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableVm{`,
		`EnableVm:` + strings.Replace(fmt.Sprintf("%v", this.EnableVm), "VMConfiguration", "fleet.VMConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultSriovInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultSriovInterface{`,
		`DefaultSriovInterface:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSriovInterface), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SriovInterfaces) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SriovInterfaces{`,
		`SriovInterfaces:` + strings.Replace(fmt.Sprintf("%v", this.SriovInterfaces), "SriovInterfacesListType", "fleet.SriovInterfacesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Interface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthernetInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_interface.EthernetInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_EthernetInterface{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedicatedInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_interface.DedicatedInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_DedicatedInterface{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedicatedManagementInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_interface.DedicatedManagementInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_DedicatedManagementInterface{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_interface.TunnelInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_TunnelInterface{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopbackInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_interface.LoopbackInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_LoopbackInterface{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupConnectivityInterfaceDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupConnectivityInterfaceChoice = &Interface_DcClusterGroupConnectivityInterfaceDisabled{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupConnectivityInterfaceEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupConnectivityInterfaceChoice = &Interface_DcClusterGroupConnectivityInterfaceEnabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &Interface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageInterfaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageInterfaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageInterfaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StorageInterface == nil {
				m.StorageInterface = &network_interface.EthernetInterfaceType{}
			}
			if err := m.StorageInterface.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageInterfaceListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageInterfaceListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageInterfaceListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageInterfaces = append(m.StorageInterfaces, &StorageInterfaceType{})
			if err := m.StorageInterfaces[len(m.StorageInterfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaticRoutesListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaticRoutesListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaticRoutesListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticRoutes = append(m.StaticRoutes, &virtual_network.StaticRouteViewType{})
			if err := m.StaticRoutes[len(m.StaticRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VnConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VnConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VnConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticRouteChoice = &VnConfiguration_NoStaticRoutes{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticRouteChoice = &VnConfiguration_StaticRoutes{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &VnConfiguration_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &VnConfiguration_DcClusterGroup{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DcClusterGroupInterface = append(m.DcClusterGroupInterface, &views.ObjectRefType{})
			if err := m.DcClusterGroupInterface[len(m.DcClusterGroupInterface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoStaticV6Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticV6RouteChoice = &VnConfiguration_NoStaticV6Routes{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticV6Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_network.StaticV6RoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticV6RouteChoice = &VnConfiguration_StaticV6Routes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SliVnConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SliVnConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SliVnConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticRouteChoice = &SliVnConfiguration_NoStaticRoutes{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticRouteChoice = &SliVnConfiguration_StaticRoutes{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoV6StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticV6RouteChoice = &SliVnConfiguration_NoV6StaticRoutes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticV6Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_network.StaticV6RoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticV6RouteChoice = &SliVnConfiguration_StaticV6Routes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalNetworkConnectionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalNetworkConnectionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalNetworkConnectionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SloToGlobalDr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionChoice = &GlobalNetworkConnectionType_SloToGlobalDr{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &GlobalNetworkConnectionType_DisableForwardProxy{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.ForwardProxyConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &GlobalNetworkConnectionType_EnableForwardProxy{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalNetworkConnectionListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalNetworkConnectionListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalNetworkConnectionListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkConnections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalNetworkConnections = append(m.GlobalNetworkConnections, &GlobalNetworkConnectionType{})
			if err := m.GlobalNetworkConnections[len(m.GlobalNetworkConnections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VssNetworkConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VssNetworkConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VssNetworkConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SloChoice = &VssNetworkConfiguration_DefaultConfig{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SloConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VnConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SloChoice = &VssNetworkConfiguration_SloConfig{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultInterfaceConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &VssNetworkConfiguration_DefaultInterfaceConfig{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InterfaceListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &VssNetworkConfiguration_InterfaceList{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &VssNetworkConfiguration_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &VssNetworkConfiguration_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &VssNetworkConfiguration_NoForwardProxy{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &VssNetworkConfiguration_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &VssNetworkConfiguration_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &VssNetworkConfiguration_GlobalNetworkList{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutsideVip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideNameserver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutsideNameserver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpRouterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgpRouterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpPeerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgpPeerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipVrrpMode", wireType)
			}
			m.VipVrrpMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipVrrpMode |= schema.VipVrrpType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteToSiteTunnelIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteMeshGroupChoice = &VssNetworkConfiguration_SiteToSiteTunnelIp{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelDeadTimeout", wireType)
			}
			m.TunnelDeadTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelDeadTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &VssNetworkConfiguration_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSliConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SliChoice = &VssNetworkConfiguration_DefaultSliConfig{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SliVnConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SliChoice = &VssNetworkConfiguration_SliConfig{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &VssNetworkConfiguration_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &VssNetworkConfiguration_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &VssNetworkConfiguration_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideVipV6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutsideVipV6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideNameserverV6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutsideNameserverV6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VssStorageConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VssStorageConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VssStorageConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoStorageInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageInterfaceChoice = &VssStorageConfiguration_NoStorageInterfaces{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageInterfaceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StorageInterfaceListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageInterfaceChoice = &VssStorageConfiguration_StorageInterfaceList{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoStorageDevice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageDeviceChoice = &VssStorageConfiguration_NoStorageDevice{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageDeviceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.FleetStorageDeviceListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageDeviceChoice = &VssStorageConfiguration_StorageDeviceList{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorageClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageClassChoice = &VssStorageConfiguration_DefaultStorageClass{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageClassList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.FleetStorageClassListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageClassChoice = &VssStorageConfiguration_StorageClassList{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticRouteChoice = &VssStorageConfiguration_NoStaticRoutes{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticRouteChoice = &VssStorageConfiguration_StaticRoutes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodes = append(m.MasterNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerNodes = append(m.WorkerNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBondDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &GlobalSpecType_NoBondDevices{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDeviceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.FleetBondDevicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &GlobalSpecType_BondDeviceList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &GlobalSpecType_DefaultNetworkConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssNetworkConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &GlobalSpecType_CustomNetworkConfig{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &GlobalSpecType_DefaultStorageConfig{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssStorageConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &GlobalSpecType_CustomStorageConfig{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &GlobalSpecType_DisableGpu{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &GlobalSpecType_EnableGpu{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoK8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &GlobalSpecType_NoK8SCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &GlobalSpecType_K8SCluster{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &GlobalSpecType_DenyAllUsb{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &GlobalSpecType_AllowAllUsb{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsbPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &GlobalSpecType_UsbPolicy{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLocalControlPlane", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LocalControlPlaneChoice = &GlobalSpecType_NoLocalControlPlane{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalControlPlane", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.LocalControlPlaneType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LocalControlPlaneChoice = &GlobalSpecType_LocalControlPlane{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sw == nil {
				m.Sw = &views.VolterraSoftwareType{}
			}
			if err := m.Sw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Os == nil {
				m.Os = &views.OperatingSystemType{}
			}
			if err := m.Os.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableVgpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.VGPUConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &GlobalSpecType_EnableVgpu{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableVm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VmChoice = &GlobalSpecType_DisableVm{v}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableVm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.VMConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VmChoice = &GlobalSpecType_EnableVm{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchIkeInNamespace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LaunchIkeInNamespace = bool(v != 0)
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfabricMeshGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpfabricMeshGroup = append(m.IpfabricMeshGroup, &site.ReMeshGroup{})
			if err := m.IpfabricMeshGroup[len(m.IpfabricMeshGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodeConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodeConfiguration = append(m.MasterNodeConfiguration, &views.MasterNode{})
			if err := m.MasterNodeConfiguration[len(m.MasterNodeConfiguration)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSriovInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SriovInterfaceChoice = &GlobalSpecType_DefaultSriovInterface{v}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SriovInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.SriovInterfacesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SriovInterfaceChoice = &GlobalSpecType_SriovInterfaces{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodes = append(m.MasterNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerNodes = append(m.WorkerNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBondDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &CreateSpecType_NoBondDevices{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDeviceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.FleetBondDevicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &CreateSpecType_BondDeviceList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &CreateSpecType_DefaultNetworkConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssNetworkConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &CreateSpecType_CustomNetworkConfig{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &CreateSpecType_DefaultStorageConfig{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssStorageConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &CreateSpecType_CustomStorageConfig{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &CreateSpecType_DisableGpu{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &CreateSpecType_EnableGpu{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoK8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &CreateSpecType_NoK8SCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &CreateSpecType_K8SCluster{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &CreateSpecType_DenyAllUsb{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &CreateSpecType_AllowAllUsb{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsbPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &CreateSpecType_UsbPolicy{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLocalControlPlane", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LocalControlPlaneChoice = &CreateSpecType_NoLocalControlPlane{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalControlPlane", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.LocalControlPlaneType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LocalControlPlaneChoice = &CreateSpecType_LocalControlPlane{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sw == nil {
				m.Sw = &views.VolterraSoftwareType{}
			}
			if err := m.Sw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Os == nil {
				m.Os = &views.OperatingSystemType{}
			}
			if err := m.Os.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableVgpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.VGPUConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &CreateSpecType_EnableVgpu{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableVm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VmChoice = &CreateSpecType_DisableVm{v}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableVm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.VMConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VmChoice = &CreateSpecType_EnableVm{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodeConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodeConfiguration = append(m.MasterNodeConfiguration, &views.MasterNode{})
			if err := m.MasterNodeConfiguration[len(m.MasterNodeConfiguration)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSriovInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SriovInterfaceChoice = &CreateSpecType_DefaultSriovInterface{v}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SriovInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.SriovInterfacesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SriovInterfaceChoice = &CreateSpecType_SriovInterfaces{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodes = append(m.MasterNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerNodes = append(m.WorkerNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBondDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &ReplaceSpecType_NoBondDevices{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDeviceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.FleetBondDevicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &ReplaceSpecType_BondDeviceList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &ReplaceSpecType_DefaultNetworkConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssNetworkConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &ReplaceSpecType_CustomNetworkConfig{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &ReplaceSpecType_DefaultStorageConfig{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssStorageConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &ReplaceSpecType_CustomStorageConfig{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &ReplaceSpecType_DisableGpu{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &ReplaceSpecType_EnableGpu{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoK8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &ReplaceSpecType_NoK8SCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &ReplaceSpecType_K8SCluster{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &ReplaceSpecType_DenyAllUsb{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &ReplaceSpecType_AllowAllUsb{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsbPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &ReplaceSpecType_UsbPolicy{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLocalControlPlane", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LocalControlPlaneChoice = &ReplaceSpecType_NoLocalControlPlane{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalControlPlane", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.LocalControlPlaneType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LocalControlPlaneChoice = &ReplaceSpecType_LocalControlPlane{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableVgpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.VGPUConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &ReplaceSpecType_EnableVgpu{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableVm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VmChoice = &ReplaceSpecType_DisableVm{v}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableVm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.VMConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VmChoice = &ReplaceSpecType_EnableVm{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodeConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodeConfiguration = append(m.MasterNodeConfiguration, &views.MasterNode{})
			if err := m.MasterNodeConfiguration[len(m.MasterNodeConfiguration)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSriovInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SriovInterfaceChoice = &ReplaceSpecType_DefaultSriovInterface{v}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SriovInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.SriovInterfacesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SriovInterfaceChoice = &ReplaceSpecType_SriovInterfaces{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodes = append(m.MasterNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerNodes = append(m.WorkerNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBondDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &GetSpecType_NoBondDevices{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDeviceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.FleetBondDevicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &GetSpecType_BondDeviceList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &GetSpecType_DefaultNetworkConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssNetworkConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &GetSpecType_CustomNetworkConfig{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &GetSpecType_DefaultStorageConfig{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssStorageConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &GetSpecType_CustomStorageConfig{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &GetSpecType_DisableGpu{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &GetSpecType_EnableGpu{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoK8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &GetSpecType_NoK8SCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &GetSpecType_K8SCluster{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &GetSpecType_DenyAllUsb{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &GetSpecType_AllowAllUsb{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsbPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &GetSpecType_UsbPolicy{v}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteState", wireType)
			}
			m.SiteState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteState |= site.SiteState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLocalControlPlane", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LocalControlPlaneChoice = &GetSpecType_NoLocalControlPlane{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalControlPlane", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.LocalControlPlaneType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LocalControlPlaneChoice = &GetSpecType_LocalControlPlane{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableVgpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.VGPUConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &GetSpecType_EnableVgpu{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableVm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VmChoice = &GetSpecType_DisableVm{v}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableVm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.VMConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VmChoice = &GetSpecType_EnableVm{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodeConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodeConfiguration = append(m.MasterNodeConfiguration, &views.MasterNode{})
			if err := m.MasterNodeConfiguration[len(m.MasterNodeConfiguration)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSriovInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SriovInterfaceChoice = &GetSpecType_DefaultSriovInterface{v}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SriovInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.SriovInterfacesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SriovInterfaceChoice = &GetSpecType_SriovInterfaces{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

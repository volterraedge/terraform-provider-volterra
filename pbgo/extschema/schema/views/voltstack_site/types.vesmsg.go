// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package voltstack_site

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_fleet "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet"
	ves_io_schema_network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
	ves_io_schema_network_interface "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface"
	ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_virtual_network "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_network"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetCustomNetworkConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.custom_network_config")
	}

	if err := m.GetCustomStorageConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.custom_storage_config")
	}

	if err := m.GetLocalControlPlane().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.local_control_plane")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetK8SClusterChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetK8SClusterChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLocalControlPlaneChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLocalControlPlaneChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkCfgChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkCfgChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStorageCfgChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStorageCfgChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUsbPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetUsbPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *CreateSpecType) GetK8SClusterChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetK8SClusterChoice().(type) {
	case *CreateSpecType_NoK8SCluster:

		return nil, nil

	case *CreateSpecType_K8SCluster:

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("k8s_cluster.Object")
		dri := db.DRefInfo{
			RefdType:   "k8s_cluster.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "k8s_cluster",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetK8SClusterChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetK8SClusterChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetK8SClusterChoice().(type) {
	case *CreateSpecType_NoK8SCluster:

	case *CreateSpecType_K8SCluster:
		refdType, err := d.TypeForEntryKind("", "", "k8s_cluster.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: k8s_cluster")
		}

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "k8s_cluster.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetLocalControlPlaneChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLocalControlPlaneChoice() == nil {
		return nil, nil
	}
	switch m.GetLocalControlPlaneChoice().(type) {
	case *CreateSpecType_NoLocalControlPlane:

		return nil, nil

	case *CreateSpecType_LocalControlPlane:

		drInfos, err := m.GetLocalControlPlane().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLocalControlPlane().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "local_control_plane." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *CreateSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:

		return nil, nil

	case *CreateSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:

	case *CreateSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetNetworkCfgChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkCfgChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkCfgChoice().(type) {
	case *CreateSpecType_DefaultNetworkConfig:

		return nil, nil

	case *CreateSpecType_CustomNetworkConfig:

		drInfos, err := m.GetCustomNetworkConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomNetworkConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_network_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetStorageCfgChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStorageCfgChoice() == nil {
		return nil, nil
	}
	switch m.GetStorageCfgChoice().(type) {
	case *CreateSpecType_DefaultStorageConfig:

		return nil, nil

	case *CreateSpecType_CustomStorageConfig:

		drInfos, err := m.GetCustomStorageConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomStorageConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_storage_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *CreateSpecType) GetUsbPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetUsbPolicyChoice().(type) {
	case *CreateSpecType_DenyAllUsb:

		return nil, nil

	case *CreateSpecType_AllowAllUsb:

		return nil, nil

	case *CreateSpecType_UsbPolicy:

		vref := m.GetUsbPolicy()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("usb_policy.Object")
		dri := db.DRefInfo{
			RefdType:   "usb_policy.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "usb_policy",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetUsbPolicyChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetUsbPolicyChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetUsbPolicyChoice().(type) {
	case *CreateSpecType_DenyAllUsb:

	case *CreateSpecType_AllowAllUsb:

	case *CreateSpecType_UsbPolicy:
		refdType, err := d.TypeForEntryKind("", "", "usb_policy.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: usb_policy")
		}

		vref := m.GetUsbPolicy()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "usb_policy.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) BondChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bond_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) GpuChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for gpu_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) K8SClusterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for k8s_cluster_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) NetworkCfgChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_cfg_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) SriovInterfaceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sriov_interface_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) StorageCfgChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for storage_cfg_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) UsbPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for usb_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) VolterraCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for worker_nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for worker_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated worker_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items worker_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) MasterNodeConfigurationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for master_node_configuration")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.MasterNode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.MasterNodeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for master_node_configuration")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.MasterNode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.MasterNode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated master_node_configuration")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items master_node_configuration")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *CreateSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*CreateSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*CreateSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["bond_choice"]; exists {
		val := m.GetBondChoice()
		vOpts := append(opts,
			db.WithValidateField("bond_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBondChoice().(type) {
	case *CreateSpecType_NoBondDevices:
		if fv, exists := v.FldValidators["bond_choice.no_bond_devices"]; exists {
			val := m.GetBondChoice().(*CreateSpecType_NoBondDevices).NoBondDevices
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("no_bond_devices"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BondDeviceList:
		if fv, exists := v.FldValidators["bond_choice.bond_device_list"]; exists {
			val := m.GetBondChoice().(*CreateSpecType_BondDeviceList).BondDeviceList
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("bond_device_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gpu_choice"]; exists {
		val := m.GetGpuChoice()
		vOpts := append(opts,
			db.WithValidateField("gpu_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGpuChoice().(type) {
	case *CreateSpecType_DisableGpu:
		if fv, exists := v.FldValidators["gpu_choice.disable_gpu"]; exists {
			val := m.GetGpuChoice().(*CreateSpecType_DisableGpu).DisableGpu
			vOpts := append(opts,
				db.WithValidateField("gpu_choice"),
				db.WithValidateField("disable_gpu"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EnableGpu:
		if fv, exists := v.FldValidators["gpu_choice.enable_gpu"]; exists {
			val := m.GetGpuChoice().(*CreateSpecType_EnableGpu).EnableGpu
			vOpts := append(opts,
				db.WithValidateField("gpu_choice"),
				db.WithValidateField("enable_gpu"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EnableVgpu:
		if fv, exists := v.FldValidators["gpu_choice.enable_vgpu"]; exists {
			val := m.GetGpuChoice().(*CreateSpecType_EnableVgpu).EnableVgpu
			vOpts := append(opts,
				db.WithValidateField("gpu_choice"),
				db.WithValidateField("enable_vgpu"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["k8s_cluster_choice"]; exists {
		val := m.GetK8SClusterChoice()
		vOpts := append(opts,
			db.WithValidateField("k8s_cluster_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetK8SClusterChoice().(type) {
	case *CreateSpecType_NoK8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.no_k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*CreateSpecType_NoK8SCluster).NoK8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("no_k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_K8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*CreateSpecType_K8SCluster).K8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetLocalControlPlaneChoice().(type) {
	case *CreateSpecType_NoLocalControlPlane:
		if fv, exists := v.FldValidators["local_control_plane_choice.no_local_control_plane"]; exists {
			val := m.GetLocalControlPlaneChoice().(*CreateSpecType_NoLocalControlPlane).NoLocalControlPlane
			vOpts := append(opts,
				db.WithValidateField("local_control_plane_choice"),
				db.WithValidateField("no_local_control_plane"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LocalControlPlane:
		if fv, exists := v.FldValidators["local_control_plane_choice.local_control_plane"]; exists {
			val := m.GetLocalControlPlaneChoice().(*CreateSpecType_LocalControlPlane).LocalControlPlane
			vOpts := append(opts,
				db.WithValidateField("local_control_plane_choice"),
				db.WithValidateField("local_control_plane"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["master_node_configuration"]; exists {
		vOpts := append(opts, db.WithValidateField("master_node_configuration"))
		if err := fv(ctx, m.GetMasterNodeConfiguration(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["master_nodes"]; exists {

		vOpts := append(opts, db.WithValidateField("master_nodes"))
		for idx, item := range m.GetMasterNodes() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_cfg_choice"]; exists {
		val := m.GetNetworkCfgChoice()
		vOpts := append(opts,
			db.WithValidateField("network_cfg_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkCfgChoice().(type) {
	case *CreateSpecType_DefaultNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.default_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*CreateSpecType_DefaultNetworkConfig).DefaultNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("default_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_CustomNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.custom_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*CreateSpecType_CustomNetworkConfig).CustomNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("custom_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["os"]; exists {

		vOpts := append(opts, db.WithValidateField("os"))
		if err := fv(ctx, m.GetOs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sriov_interface_choice"]; exists {
		val := m.GetSriovInterfaceChoice()
		vOpts := append(opts,
			db.WithValidateField("sriov_interface_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSriovInterfaceChoice().(type) {
	case *CreateSpecType_DefaultSriovInterface:
		if fv, exists := v.FldValidators["sriov_interface_choice.default_sriov_interface"]; exists {
			val := m.GetSriovInterfaceChoice().(*CreateSpecType_DefaultSriovInterface).DefaultSriovInterface
			vOpts := append(opts,
				db.WithValidateField("sriov_interface_choice"),
				db.WithValidateField("default_sriov_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SriovInterfaces:
		if fv, exists := v.FldValidators["sriov_interface_choice.sriov_interfaces"]; exists {
			val := m.GetSriovInterfaceChoice().(*CreateSpecType_SriovInterfaces).SriovInterfaces
			vOpts := append(opts,
				db.WithValidateField("sriov_interface_choice"),
				db.WithValidateField("sriov_interfaces"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["storage_cfg_choice"]; exists {
		val := m.GetStorageCfgChoice()
		vOpts := append(opts,
			db.WithValidateField("storage_cfg_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStorageCfgChoice().(type) {
	case *CreateSpecType_DefaultStorageConfig:
		if fv, exists := v.FldValidators["storage_cfg_choice.default_storage_config"]; exists {
			val := m.GetStorageCfgChoice().(*CreateSpecType_DefaultStorageConfig).DefaultStorageConfig
			vOpts := append(opts,
				db.WithValidateField("storage_cfg_choice"),
				db.WithValidateField("default_storage_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_CustomStorageConfig:
		if fv, exists := v.FldValidators["storage_cfg_choice.custom_storage_config"]; exists {
			val := m.GetStorageCfgChoice().(*CreateSpecType_CustomStorageConfig).CustomStorageConfig
			vOpts := append(opts,
				db.WithValidateField("storage_cfg_choice"),
				db.WithValidateField("custom_storage_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["sw"]; exists {

		vOpts := append(opts, db.WithValidateField("sw"))
		if err := fv(ctx, m.GetSw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["usb_policy_choice"]; exists {
		val := m.GetUsbPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("usb_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetUsbPolicyChoice().(type) {
	case *CreateSpecType_DenyAllUsb:
		if fv, exists := v.FldValidators["usb_policy_choice.deny_all_usb"]; exists {
			val := m.GetUsbPolicyChoice().(*CreateSpecType_DenyAllUsb).DenyAllUsb
			vOpts := append(opts,
				db.WithValidateField("usb_policy_choice"),
				db.WithValidateField("deny_all_usb"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AllowAllUsb:
		if fv, exists := v.FldValidators["usb_policy_choice.allow_all_usb"]; exists {
			val := m.GetUsbPolicyChoice().(*CreateSpecType_AllowAllUsb).AllowAllUsb
			vOpts := append(opts,
				db.WithValidateField("usb_policy_choice"),
				db.WithValidateField("allow_all_usb"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_UsbPolicy:
		if fv, exists := v.FldValidators["usb_policy_choice.usb_policy"]; exists {
			val := m.GetUsbPolicyChoice().(*CreateSpecType_UsbPolicy).UsbPolicy
			vOpts := append(opts,
				db.WithValidateField("usb_policy_choice"),
				db.WithValidateField("usb_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetVmChoice().(type) {
	case *CreateSpecType_DisableVm:
		if fv, exists := v.FldValidators["vm_choice.disable_vm"]; exists {
			val := m.GetVmChoice().(*CreateSpecType_DisableVm).DisableVm
			vOpts := append(opts,
				db.WithValidateField("vm_choice"),
				db.WithValidateField("disable_vm"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EnableVm:
		if fv, exists := v.FldValidators["vm_choice.enable_vm"]; exists {
			val := m.GetVmChoice().(*CreateSpecType_EnableVm).EnableVm
			vOpts := append(opts,
				db.WithValidateField("vm_choice"),
				db.WithValidateField("enable_vm"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["volterra_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_certified_hw"))
		if err := fv(ctx, m.GetVolterraCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("worker_nodes"))
		if err := fv(ctx, m.GetWorkerNodes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhBondChoice := v.BondChoiceValidationRuleHandler
	rulesBondChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBondChoice(rulesBondChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.bond_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bond_choice"] = vFn

	vrhGpuChoice := v.GpuChoiceValidationRuleHandler
	rulesGpuChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGpuChoice(rulesGpuChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.gpu_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gpu_choice"] = vFn

	vrhK8SClusterChoice := v.K8SClusterChoiceValidationRuleHandler
	rulesK8SClusterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhK8SClusterChoice(rulesK8SClusterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.k8s_cluster_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["k8s_cluster_choice"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhNetworkCfgChoice := v.NetworkCfgChoiceValidationRuleHandler
	rulesNetworkCfgChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkCfgChoice(rulesNetworkCfgChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.network_cfg_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_cfg_choice"] = vFn

	vrhSriovInterfaceChoice := v.SriovInterfaceChoiceValidationRuleHandler
	rulesSriovInterfaceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSriovInterfaceChoice(rulesSriovInterfaceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.sriov_interface_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sriov_interface_choice"] = vFn

	vrhStorageCfgChoice := v.StorageCfgChoiceValidationRuleHandler
	rulesStorageCfgChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStorageCfgChoice(rulesStorageCfgChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.storage_cfg_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_cfg_choice"] = vFn

	vrhUsbPolicyChoice := v.UsbPolicyChoiceValidationRuleHandler
	rulesUsbPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhUsbPolicyChoice(rulesUsbPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.usb_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["usb_policy_choice"] = vFn

	vrhVolterraCertifiedHw := v.VolterraCertifiedHwValidationRuleHandler
	rulesVolterraCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required":       "true",
		"ves.io.schema.rules.string.min_len":         "1",
		"ves.io.schema.rules.string.ves_object_name": "true",
	}
	vFn, err = vrhVolterraCertifiedHw(rulesVolterraCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.volterra_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_certified_hw"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhMasterNodeConfiguration := v.MasterNodeConfigurationValidationRuleHandler
	rulesMasterNodeConfiguration := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
	}
	vFn, err = vrhMasterNodeConfiguration(rulesMasterNodeConfiguration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.master_node_configuration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["master_node_configuration"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["bond_choice.bond_device_list"] = ves_io_schema_fleet.FleetBondDevicesListTypeValidator().Validate

	v.FldValidators["gpu_choice.enable_vgpu"] = ves_io_schema_fleet.VGPUConfigurationValidator().Validate

	v.FldValidators["k8s_cluster_choice.k8s_cluster"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["local_control_plane_choice.local_control_plane"] = ves_io_schema_fleet.LocalControlPlaneTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["network_cfg_choice.custom_network_config"] = VssNetworkConfigurationValidator().Validate

	v.FldValidators["sriov_interface_choice.sriov_interfaces"] = ves_io_schema_fleet.SriovInterfacesListTypeValidator().Validate

	v.FldValidators["storage_cfg_choice.custom_storage_config"] = VssStorageConfigurationValidator().Validate

	v.FldValidators["usb_policy_choice.usb_policy"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["sw"] = ves_io_schema_views.VolterraSoftwareTypeValidator().Validate

	v.FldValidators["os"] = ves_io_schema_views.OperatingSystemTypeValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetCustomNetworkConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.custom_network_config")
	}

	if err := m.GetCustomStorageConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.custom_storage_config")
	}

	if err := m.GetLocalControlPlane().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.local_control_plane")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetK8SClusterChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetK8SClusterChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLocalControlPlaneChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLocalControlPlaneChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkCfgChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkCfgChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStorageCfgChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStorageCfgChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUsbPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetUsbPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GetSpecType) GetK8SClusterChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetK8SClusterChoice().(type) {
	case *GetSpecType_NoK8SCluster:

		return nil, nil

	case *GetSpecType_K8SCluster:

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("k8s_cluster.Object")
		dri := db.DRefInfo{
			RefdType:   "k8s_cluster.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "k8s_cluster",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetK8SClusterChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetK8SClusterChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetK8SClusterChoice().(type) {
	case *GetSpecType_NoK8SCluster:

	case *GetSpecType_K8SCluster:
		refdType, err := d.TypeForEntryKind("", "", "k8s_cluster.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: k8s_cluster")
		}

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "k8s_cluster.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetLocalControlPlaneChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLocalControlPlaneChoice() == nil {
		return nil, nil
	}
	switch m.GetLocalControlPlaneChoice().(type) {
	case *GetSpecType_NoLocalControlPlane:

		return nil, nil

	case *GetSpecType_LocalControlPlane:

		drInfos, err := m.GetLocalControlPlane().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLocalControlPlane().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "local_control_plane." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GetSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:

		return nil, nil

	case *GetSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:

	case *GetSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetNetworkCfgChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkCfgChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkCfgChoice().(type) {
	case *GetSpecType_DefaultNetworkConfig:

		return nil, nil

	case *GetSpecType_CustomNetworkConfig:

		drInfos, err := m.GetCustomNetworkConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomNetworkConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_network_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetStorageCfgChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStorageCfgChoice() == nil {
		return nil, nil
	}
	switch m.GetStorageCfgChoice().(type) {
	case *GetSpecType_DefaultStorageConfig:

		return nil, nil

	case *GetSpecType_CustomStorageConfig:

		drInfos, err := m.GetCustomStorageConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomStorageConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_storage_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GetSpecType) GetUsbPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetUsbPolicyChoice().(type) {
	case *GetSpecType_DenyAllUsb:

		return nil, nil

	case *GetSpecType_AllowAllUsb:

		return nil, nil

	case *GetSpecType_UsbPolicy:

		vref := m.GetUsbPolicy()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("usb_policy.Object")
		dri := db.DRefInfo{
			RefdType:   "usb_policy.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "usb_policy",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetUsbPolicyChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetUsbPolicyChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetUsbPolicyChoice().(type) {
	case *GetSpecType_DenyAllUsb:

	case *GetSpecType_AllowAllUsb:

	case *GetSpecType_UsbPolicy:
		refdType, err := d.TypeForEntryKind("", "", "usb_policy.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: usb_policy")
		}

		vref := m.GetUsbPolicy()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "usb_policy.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) BondChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bond_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) GpuChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for gpu_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) K8SClusterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for k8s_cluster_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) NetworkCfgChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_cfg_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) SriovInterfaceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sriov_interface_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) StorageCfgChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for storage_cfg_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) UsbPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for usb_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) VolterraCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for worker_nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for worker_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated worker_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items worker_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) VolterraSoftwareVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_software_version")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) OperatingSystemVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for operating_system_version")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) MasterNodeConfigurationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for master_node_configuration")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.MasterNode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.MasterNodeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for master_node_configuration")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.MasterNode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.MasterNode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated master_node_configuration")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items master_node_configuration")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *GetSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GetSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GetSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["bond_choice"]; exists {
		val := m.GetBondChoice()
		vOpts := append(opts,
			db.WithValidateField("bond_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBondChoice().(type) {
	case *GetSpecType_NoBondDevices:
		if fv, exists := v.FldValidators["bond_choice.no_bond_devices"]; exists {
			val := m.GetBondChoice().(*GetSpecType_NoBondDevices).NoBondDevices
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("no_bond_devices"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BondDeviceList:
		if fv, exists := v.FldValidators["bond_choice.bond_device_list"]; exists {
			val := m.GetBondChoice().(*GetSpecType_BondDeviceList).BondDeviceList
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("bond_device_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gpu_choice"]; exists {
		val := m.GetGpuChoice()
		vOpts := append(opts,
			db.WithValidateField("gpu_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGpuChoice().(type) {
	case *GetSpecType_DisableGpu:
		if fv, exists := v.FldValidators["gpu_choice.disable_gpu"]; exists {
			val := m.GetGpuChoice().(*GetSpecType_DisableGpu).DisableGpu
			vOpts := append(opts,
				db.WithValidateField("gpu_choice"),
				db.WithValidateField("disable_gpu"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EnableGpu:
		if fv, exists := v.FldValidators["gpu_choice.enable_gpu"]; exists {
			val := m.GetGpuChoice().(*GetSpecType_EnableGpu).EnableGpu
			vOpts := append(opts,
				db.WithValidateField("gpu_choice"),
				db.WithValidateField("enable_gpu"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EnableVgpu:
		if fv, exists := v.FldValidators["gpu_choice.enable_vgpu"]; exists {
			val := m.GetGpuChoice().(*GetSpecType_EnableVgpu).EnableVgpu
			vOpts := append(opts,
				db.WithValidateField("gpu_choice"),
				db.WithValidateField("enable_vgpu"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["k8s_cluster_choice"]; exists {
		val := m.GetK8SClusterChoice()
		vOpts := append(opts,
			db.WithValidateField("k8s_cluster_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetK8SClusterChoice().(type) {
	case *GetSpecType_NoK8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.no_k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*GetSpecType_NoK8SCluster).NoK8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("no_k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_K8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*GetSpecType_K8SCluster).K8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetLocalControlPlaneChoice().(type) {
	case *GetSpecType_NoLocalControlPlane:
		if fv, exists := v.FldValidators["local_control_plane_choice.no_local_control_plane"]; exists {
			val := m.GetLocalControlPlaneChoice().(*GetSpecType_NoLocalControlPlane).NoLocalControlPlane
			vOpts := append(opts,
				db.WithValidateField("local_control_plane_choice"),
				db.WithValidateField("no_local_control_plane"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LocalControlPlane:
		if fv, exists := v.FldValidators["local_control_plane_choice.local_control_plane"]; exists {
			val := m.GetLocalControlPlaneChoice().(*GetSpecType_LocalControlPlane).LocalControlPlane
			vOpts := append(opts,
				db.WithValidateField("local_control_plane_choice"),
				db.WithValidateField("local_control_plane"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["master_node_configuration"]; exists {
		vOpts := append(opts, db.WithValidateField("master_node_configuration"))
		if err := fv(ctx, m.GetMasterNodeConfiguration(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["master_nodes"]; exists {

		vOpts := append(opts, db.WithValidateField("master_nodes"))
		for idx, item := range m.GetMasterNodes() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_cfg_choice"]; exists {
		val := m.GetNetworkCfgChoice()
		vOpts := append(opts,
			db.WithValidateField("network_cfg_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkCfgChoice().(type) {
	case *GetSpecType_DefaultNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.default_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*GetSpecType_DefaultNetworkConfig).DefaultNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("default_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_CustomNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.custom_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*GetSpecType_CustomNetworkConfig).CustomNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("custom_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["operating_system_version"]; exists {

		vOpts := append(opts, db.WithValidateField("operating_system_version"))
		if err := fv(ctx, m.GetOperatingSystemVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_state"]; exists {

		vOpts := append(opts, db.WithValidateField("site_state"))
		if err := fv(ctx, m.GetSiteState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sriov_interface_choice"]; exists {
		val := m.GetSriovInterfaceChoice()
		vOpts := append(opts,
			db.WithValidateField("sriov_interface_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSriovInterfaceChoice().(type) {
	case *GetSpecType_DefaultSriovInterface:
		if fv, exists := v.FldValidators["sriov_interface_choice.default_sriov_interface"]; exists {
			val := m.GetSriovInterfaceChoice().(*GetSpecType_DefaultSriovInterface).DefaultSriovInterface
			vOpts := append(opts,
				db.WithValidateField("sriov_interface_choice"),
				db.WithValidateField("default_sriov_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SriovInterfaces:
		if fv, exists := v.FldValidators["sriov_interface_choice.sriov_interfaces"]; exists {
			val := m.GetSriovInterfaceChoice().(*GetSpecType_SriovInterfaces).SriovInterfaces
			vOpts := append(opts,
				db.WithValidateField("sriov_interface_choice"),
				db.WithValidateField("sriov_interfaces"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["storage_cfg_choice"]; exists {
		val := m.GetStorageCfgChoice()
		vOpts := append(opts,
			db.WithValidateField("storage_cfg_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStorageCfgChoice().(type) {
	case *GetSpecType_DefaultStorageConfig:
		if fv, exists := v.FldValidators["storage_cfg_choice.default_storage_config"]; exists {
			val := m.GetStorageCfgChoice().(*GetSpecType_DefaultStorageConfig).DefaultStorageConfig
			vOpts := append(opts,
				db.WithValidateField("storage_cfg_choice"),
				db.WithValidateField("default_storage_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_CustomStorageConfig:
		if fv, exists := v.FldValidators["storage_cfg_choice.custom_storage_config"]; exists {
			val := m.GetStorageCfgChoice().(*GetSpecType_CustomStorageConfig).CustomStorageConfig
			vOpts := append(opts,
				db.WithValidateField("storage_cfg_choice"),
				db.WithValidateField("custom_storage_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["usb_policy_choice"]; exists {
		val := m.GetUsbPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("usb_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetUsbPolicyChoice().(type) {
	case *GetSpecType_DenyAllUsb:
		if fv, exists := v.FldValidators["usb_policy_choice.deny_all_usb"]; exists {
			val := m.GetUsbPolicyChoice().(*GetSpecType_DenyAllUsb).DenyAllUsb
			vOpts := append(opts,
				db.WithValidateField("usb_policy_choice"),
				db.WithValidateField("deny_all_usb"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AllowAllUsb:
		if fv, exists := v.FldValidators["usb_policy_choice.allow_all_usb"]; exists {
			val := m.GetUsbPolicyChoice().(*GetSpecType_AllowAllUsb).AllowAllUsb
			vOpts := append(opts,
				db.WithValidateField("usb_policy_choice"),
				db.WithValidateField("allow_all_usb"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_UsbPolicy:
		if fv, exists := v.FldValidators["usb_policy_choice.usb_policy"]; exists {
			val := m.GetUsbPolicyChoice().(*GetSpecType_UsbPolicy).UsbPolicy
			vOpts := append(opts,
				db.WithValidateField("usb_policy_choice"),
				db.WithValidateField("usb_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetVmChoice().(type) {
	case *GetSpecType_DisableVm:
		if fv, exists := v.FldValidators["vm_choice.disable_vm"]; exists {
			val := m.GetVmChoice().(*GetSpecType_DisableVm).DisableVm
			vOpts := append(opts,
				db.WithValidateField("vm_choice"),
				db.WithValidateField("disable_vm"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EnableVm:
		if fv, exists := v.FldValidators["vm_choice.enable_vm"]; exists {
			val := m.GetVmChoice().(*GetSpecType_EnableVm).EnableVm
			vOpts := append(opts,
				db.WithValidateField("vm_choice"),
				db.WithValidateField("enable_vm"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["volterra_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_certified_hw"))
		if err := fv(ctx, m.GetVolterraCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_software_version"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_software_version"))
		if err := fv(ctx, m.GetVolterraSoftwareVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("worker_nodes"))
		if err := fv(ctx, m.GetWorkerNodes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhBondChoice := v.BondChoiceValidationRuleHandler
	rulesBondChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBondChoice(rulesBondChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.bond_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bond_choice"] = vFn

	vrhGpuChoice := v.GpuChoiceValidationRuleHandler
	rulesGpuChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGpuChoice(rulesGpuChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.gpu_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gpu_choice"] = vFn

	vrhK8SClusterChoice := v.K8SClusterChoiceValidationRuleHandler
	rulesK8SClusterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhK8SClusterChoice(rulesK8SClusterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.k8s_cluster_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["k8s_cluster_choice"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhNetworkCfgChoice := v.NetworkCfgChoiceValidationRuleHandler
	rulesNetworkCfgChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkCfgChoice(rulesNetworkCfgChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.network_cfg_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_cfg_choice"] = vFn

	vrhSriovInterfaceChoice := v.SriovInterfaceChoiceValidationRuleHandler
	rulesSriovInterfaceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSriovInterfaceChoice(rulesSriovInterfaceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.sriov_interface_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sriov_interface_choice"] = vFn

	vrhStorageCfgChoice := v.StorageCfgChoiceValidationRuleHandler
	rulesStorageCfgChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStorageCfgChoice(rulesStorageCfgChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.storage_cfg_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_cfg_choice"] = vFn

	vrhUsbPolicyChoice := v.UsbPolicyChoiceValidationRuleHandler
	rulesUsbPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhUsbPolicyChoice(rulesUsbPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.usb_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["usb_policy_choice"] = vFn

	vrhVolterraCertifiedHw := v.VolterraCertifiedHwValidationRuleHandler
	rulesVolterraCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required":       "true",
		"ves.io.schema.rules.string.min_len":         "1",
		"ves.io.schema.rules.string.ves_object_name": "true",
	}
	vFn, err = vrhVolterraCertifiedHw(rulesVolterraCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.volterra_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_certified_hw"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhVolterraSoftwareVersion := v.VolterraSoftwareVersionValidationRuleHandler
	rulesVolterraSoftwareVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhVolterraSoftwareVersion(rulesVolterraSoftwareVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.volterra_software_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_software_version"] = vFn

	vrhOperatingSystemVersion := v.OperatingSystemVersionValidationRuleHandler
	rulesOperatingSystemVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhOperatingSystemVersion(rulesOperatingSystemVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.operating_system_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["operating_system_version"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhMasterNodeConfiguration := v.MasterNodeConfigurationValidationRuleHandler
	rulesMasterNodeConfiguration := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
	}
	vFn, err = vrhMasterNodeConfiguration(rulesMasterNodeConfiguration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.master_node_configuration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["master_node_configuration"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["bond_choice.bond_device_list"] = ves_io_schema_fleet.FleetBondDevicesListTypeValidator().Validate

	v.FldValidators["gpu_choice.enable_vgpu"] = ves_io_schema_fleet.VGPUConfigurationValidator().Validate

	v.FldValidators["k8s_cluster_choice.k8s_cluster"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["local_control_plane_choice.local_control_plane"] = ves_io_schema_fleet.LocalControlPlaneTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["network_cfg_choice.custom_network_config"] = VssNetworkConfigurationValidator().Validate

	v.FldValidators["sriov_interface_choice.sriov_interfaces"] = ves_io_schema_fleet.SriovInterfacesListTypeValidator().Validate

	v.FldValidators["storage_cfg_choice.custom_storage_config"] = VssStorageConfigurationValidator().Validate

	v.FldValidators["usb_policy_choice.usb_policy"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalNetworkConnectionListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalNetworkConnectionListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalNetworkConnectionListType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetGlobalNetworkConnections() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting GlobalNetworkConnectionListType.global_network_connections idx %v", idx)
		}
	}

	return nil
}

func (m *GlobalNetworkConnectionListType) DeepCopy() *GlobalNetworkConnectionListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalNetworkConnectionListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalNetworkConnectionListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalNetworkConnectionListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalNetworkConnectionListTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalNetworkConnectionListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetGlobalNetworkConnectionsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GlobalNetworkConnectionListType) GetGlobalNetworkConnectionsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkConnections() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetGlobalNetworkConnections() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkConnections() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("global_network_connections[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateGlobalNetworkConnectionListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalNetworkConnectionListType) GlobalNetworkConnectionsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for global_network_connections")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*GlobalNetworkConnectionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := GlobalNetworkConnectionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for global_network_connections")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*GlobalNetworkConnectionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*GlobalNetworkConnectionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated global_network_connections")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items global_network_connections")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalNetworkConnectionListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalNetworkConnectionListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalNetworkConnectionListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["global_network_connections"]; exists {
		vOpts := append(opts, db.WithValidateField("global_network_connections"))
		if err := fv(ctx, m.GetGlobalNetworkConnections(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalNetworkConnectionListTypeValidator = func() *ValidateGlobalNetworkConnectionListType {
	v := &ValidateGlobalNetworkConnectionListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhGlobalNetworkConnections := v.GlobalNetworkConnectionsValidationRuleHandler
	rulesGlobalNetworkConnections := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhGlobalNetworkConnections(rulesGlobalNetworkConnections)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalNetworkConnectionListType.global_network_connections: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_connections"] = vFn

	return v
}()

func GlobalNetworkConnectionListTypeValidator() db.Validator {
	return DefaultGlobalNetworkConnectionListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalNetworkConnectionType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalNetworkConnectionType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalNetworkConnectionType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetEnableForwardProxy().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalNetworkConnectionType.enable_forward_proxy")
	}

	return nil
}

func (m *GlobalNetworkConnectionType) DeepCopy() *GlobalNetworkConnectionType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalNetworkConnectionType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalNetworkConnectionType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalNetworkConnectionType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalNetworkConnectionTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalNetworkConnectionType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetConnectionChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GlobalNetworkConnectionType) GetConnectionChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetConnectionChoice() == nil {
		return nil, nil
	}
	switch m.GetConnectionChoice().(type) {
	case *GlobalNetworkConnectionType_SloToGlobalDr:

		drInfos, err := m.GetSloToGlobalDr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSloToGlobalDr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "slo_to_global_dr." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGlobalNetworkConnectionType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalNetworkConnectionType) ConnectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalNetworkConnectionType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalNetworkConnectionType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalNetworkConnectionType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalNetworkConnectionType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["connection_choice"]; exists {
		val := m.GetConnectionChoice()
		vOpts := append(opts,
			db.WithValidateField("connection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetConnectionChoice().(type) {
	case *GlobalNetworkConnectionType_SloToGlobalDr:
		if fv, exists := v.FldValidators["connection_choice.slo_to_global_dr"]; exists {
			val := m.GetConnectionChoice().(*GlobalNetworkConnectionType_SloToGlobalDr).SloToGlobalDr
			vOpts := append(opts,
				db.WithValidateField("connection_choice"),
				db.WithValidateField("slo_to_global_dr"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *GlobalNetworkConnectionType_DisableForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.disable_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*GlobalNetworkConnectionType_DisableForwardProxy).DisableForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("disable_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalNetworkConnectionType_EnableForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.enable_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*GlobalNetworkConnectionType_EnableForwardProxy).EnableForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("enable_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalNetworkConnectionTypeValidator = func() *ValidateGlobalNetworkConnectionType {
	v := &ValidateGlobalNetworkConnectionType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConnectionChoice := v.ConnectionChoiceValidationRuleHandler
	rulesConnectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhConnectionChoice(rulesConnectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalNetworkConnectionType.connection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connection_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalNetworkConnectionType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	v.FldValidators["connection_choice.slo_to_global_dr"] = ves_io_schema_views.GlobalConnectorTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.enable_forward_proxy"] = ves_io_schema.ForwardProxyConfigTypeValidator().Validate

	return v
}()

func GlobalNetworkConnectionTypeValidator() db.Validator {
	return DefaultGlobalNetworkConnectionTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetCustomNetworkConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.custom_network_config")
	}

	if err := m.GetCustomStorageConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.custom_storage_config")
	}

	if err := m.GetLocalControlPlane().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.local_control_plane")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetK8SClusterChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetK8SClusterChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLocalControlPlaneChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLocalControlPlaneChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkCfgChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkCfgChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStorageCfgChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStorageCfgChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUsbPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetUsbPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetK8SClusterChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetK8SClusterChoice().(type) {
	case *GlobalSpecType_NoK8SCluster:

		return nil, nil

	case *GlobalSpecType_K8SCluster:

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("k8s_cluster.Object")
		dri := db.DRefInfo{
			RefdType:   "k8s_cluster.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "k8s_cluster",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetK8SClusterChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetK8SClusterChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetK8SClusterChoice().(type) {
	case *GlobalSpecType_NoK8SCluster:

	case *GlobalSpecType_K8SCluster:
		refdType, err := d.TypeForEntryKind("", "", "k8s_cluster.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: k8s_cluster")
		}

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "k8s_cluster.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetLocalControlPlaneChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLocalControlPlaneChoice() == nil {
		return nil, nil
	}
	switch m.GetLocalControlPlaneChoice().(type) {
	case *GlobalSpecType_NoLocalControlPlane:

		return nil, nil

	case *GlobalSpecType_LocalControlPlane:

		drInfos, err := m.GetLocalControlPlane().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLocalControlPlane().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "local_control_plane." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:

		return nil, nil

	case *GlobalSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:

	case *GlobalSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetNetworkCfgChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkCfgChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkCfgChoice().(type) {
	case *GlobalSpecType_DefaultNetworkConfig:

		return nil, nil

	case *GlobalSpecType_CustomNetworkConfig:

		drInfos, err := m.GetCustomNetworkConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomNetworkConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_network_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetStorageCfgChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStorageCfgChoice() == nil {
		return nil, nil
	}
	switch m.GetStorageCfgChoice().(type) {
	case *GlobalSpecType_DefaultStorageConfig:

		return nil, nil

	case *GlobalSpecType_CustomStorageConfig:

		drInfos, err := m.GetCustomStorageConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomStorageConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_storage_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetUsbPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetUsbPolicyChoice().(type) {
	case *GlobalSpecType_DenyAllUsb:

		return nil, nil

	case *GlobalSpecType_AllowAllUsb:

		return nil, nil

	case *GlobalSpecType_UsbPolicy:

		vref := m.GetUsbPolicy()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("usb_policy.Object")
		dri := db.DRefInfo{
			RefdType:   "usb_policy.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "usb_policy",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetUsbPolicyChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetUsbPolicyChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetUsbPolicyChoice().(type) {
	case *GlobalSpecType_DenyAllUsb:

	case *GlobalSpecType_AllowAllUsb:

	case *GlobalSpecType_UsbPolicy:
		refdType, err := d.TypeForEntryKind("", "", "usb_policy.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: usb_policy")
		}

		vref := m.GetUsbPolicy()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "usb_policy.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) BondChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bond_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) GpuChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for gpu_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) K8SClusterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for k8s_cluster_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) NetworkCfgChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_cfg_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SriovInterfaceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sriov_interface_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) StorageCfgChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for storage_cfg_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) UsbPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for usb_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VolterraCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for worker_nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for worker_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated worker_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items worker_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VolterraSoftwareVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_software_version")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) OperatingSystemVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for operating_system_version")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) IpfabricMeshGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ipfabric_mesh_group")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_site.ReMeshGroup, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_site.ReMeshGroupValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ipfabric_mesh_group")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_site.ReMeshGroup)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_site.ReMeshGroup, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ipfabric_mesh_group")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ipfabric_mesh_group")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) MasterNodeConfigurationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for master_node_configuration")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.MasterNode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.MasterNodeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for master_node_configuration")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.MasterNode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.MasterNode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated master_node_configuration")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items master_node_configuration")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *GlobalSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GlobalSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["bond_choice"]; exists {
		val := m.GetBondChoice()
		vOpts := append(opts,
			db.WithValidateField("bond_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBondChoice().(type) {
	case *GlobalSpecType_NoBondDevices:
		if fv, exists := v.FldValidators["bond_choice.no_bond_devices"]; exists {
			val := m.GetBondChoice().(*GlobalSpecType_NoBondDevices).NoBondDevices
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("no_bond_devices"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BondDeviceList:
		if fv, exists := v.FldValidators["bond_choice.bond_device_list"]; exists {
			val := m.GetBondChoice().(*GlobalSpecType_BondDeviceList).BondDeviceList
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("bond_device_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gpu_choice"]; exists {
		val := m.GetGpuChoice()
		vOpts := append(opts,
			db.WithValidateField("gpu_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGpuChoice().(type) {
	case *GlobalSpecType_DisableGpu:
		if fv, exists := v.FldValidators["gpu_choice.disable_gpu"]; exists {
			val := m.GetGpuChoice().(*GlobalSpecType_DisableGpu).DisableGpu
			vOpts := append(opts,
				db.WithValidateField("gpu_choice"),
				db.WithValidateField("disable_gpu"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EnableGpu:
		if fv, exists := v.FldValidators["gpu_choice.enable_gpu"]; exists {
			val := m.GetGpuChoice().(*GlobalSpecType_EnableGpu).EnableGpu
			vOpts := append(opts,
				db.WithValidateField("gpu_choice"),
				db.WithValidateField("enable_gpu"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EnableVgpu:
		if fv, exists := v.FldValidators["gpu_choice.enable_vgpu"]; exists {
			val := m.GetGpuChoice().(*GlobalSpecType_EnableVgpu).EnableVgpu
			vOpts := append(opts,
				db.WithValidateField("gpu_choice"),
				db.WithValidateField("enable_vgpu"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ipfabric_mesh_group"]; exists {
		vOpts := append(opts, db.WithValidateField("ipfabric_mesh_group"))
		if err := fv(ctx, m.GetIpfabricMeshGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["k8s_cluster_choice"]; exists {
		val := m.GetK8SClusterChoice()
		vOpts := append(opts,
			db.WithValidateField("k8s_cluster_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetK8SClusterChoice().(type) {
	case *GlobalSpecType_NoK8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.no_k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*GlobalSpecType_NoK8SCluster).NoK8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("no_k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_K8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*GlobalSpecType_K8SCluster).K8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["launch_ike_in_namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("launch_ike_in_namespace"))
		if err := fv(ctx, m.GetLaunchIkeInNamespace(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetLocalControlPlaneChoice().(type) {
	case *GlobalSpecType_NoLocalControlPlane:
		if fv, exists := v.FldValidators["local_control_plane_choice.no_local_control_plane"]; exists {
			val := m.GetLocalControlPlaneChoice().(*GlobalSpecType_NoLocalControlPlane).NoLocalControlPlane
			vOpts := append(opts,
				db.WithValidateField("local_control_plane_choice"),
				db.WithValidateField("no_local_control_plane"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LocalControlPlane:
		if fv, exists := v.FldValidators["local_control_plane_choice.local_control_plane"]; exists {
			val := m.GetLocalControlPlaneChoice().(*GlobalSpecType_LocalControlPlane).LocalControlPlane
			vOpts := append(opts,
				db.WithValidateField("local_control_plane_choice"),
				db.WithValidateField("local_control_plane"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["master_node_configuration"]; exists {
		vOpts := append(opts, db.WithValidateField("master_node_configuration"))
		if err := fv(ctx, m.GetMasterNodeConfiguration(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["master_nodes"]; exists {

		vOpts := append(opts, db.WithValidateField("master_nodes"))
		for idx, item := range m.GetMasterNodes() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_cfg_choice"]; exists {
		val := m.GetNetworkCfgChoice()
		vOpts := append(opts,
			db.WithValidateField("network_cfg_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkCfgChoice().(type) {
	case *GlobalSpecType_DefaultNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.default_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*GlobalSpecType_DefaultNetworkConfig).DefaultNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("default_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_CustomNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.custom_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*GlobalSpecType_CustomNetworkConfig).CustomNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("custom_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["operating_system_version"]; exists {

		vOpts := append(opts, db.WithValidateField("operating_system_version"))
		if err := fv(ctx, m.GetOperatingSystemVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["os"]; exists {

		vOpts := append(opts, db.WithValidateField("os"))
		if err := fv(ctx, m.GetOs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sriov_interface_choice"]; exists {
		val := m.GetSriovInterfaceChoice()
		vOpts := append(opts,
			db.WithValidateField("sriov_interface_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSriovInterfaceChoice().(type) {
	case *GlobalSpecType_DefaultSriovInterface:
		if fv, exists := v.FldValidators["sriov_interface_choice.default_sriov_interface"]; exists {
			val := m.GetSriovInterfaceChoice().(*GlobalSpecType_DefaultSriovInterface).DefaultSriovInterface
			vOpts := append(opts,
				db.WithValidateField("sriov_interface_choice"),
				db.WithValidateField("default_sriov_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SriovInterfaces:
		if fv, exists := v.FldValidators["sriov_interface_choice.sriov_interfaces"]; exists {
			val := m.GetSriovInterfaceChoice().(*GlobalSpecType_SriovInterfaces).SriovInterfaces
			vOpts := append(opts,
				db.WithValidateField("sriov_interface_choice"),
				db.WithValidateField("sriov_interfaces"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["storage_cfg_choice"]; exists {
		val := m.GetStorageCfgChoice()
		vOpts := append(opts,
			db.WithValidateField("storage_cfg_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStorageCfgChoice().(type) {
	case *GlobalSpecType_DefaultStorageConfig:
		if fv, exists := v.FldValidators["storage_cfg_choice.default_storage_config"]; exists {
			val := m.GetStorageCfgChoice().(*GlobalSpecType_DefaultStorageConfig).DefaultStorageConfig
			vOpts := append(opts,
				db.WithValidateField("storage_cfg_choice"),
				db.WithValidateField("default_storage_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_CustomStorageConfig:
		if fv, exists := v.FldValidators["storage_cfg_choice.custom_storage_config"]; exists {
			val := m.GetStorageCfgChoice().(*GlobalSpecType_CustomStorageConfig).CustomStorageConfig
			vOpts := append(opts,
				db.WithValidateField("storage_cfg_choice"),
				db.WithValidateField("custom_storage_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["sw"]; exists {

		vOpts := append(opts, db.WithValidateField("sw"))
		if err := fv(ctx, m.GetSw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["usb_policy_choice"]; exists {
		val := m.GetUsbPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("usb_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetUsbPolicyChoice().(type) {
	case *GlobalSpecType_DenyAllUsb:
		if fv, exists := v.FldValidators["usb_policy_choice.deny_all_usb"]; exists {
			val := m.GetUsbPolicyChoice().(*GlobalSpecType_DenyAllUsb).DenyAllUsb
			vOpts := append(opts,
				db.WithValidateField("usb_policy_choice"),
				db.WithValidateField("deny_all_usb"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AllowAllUsb:
		if fv, exists := v.FldValidators["usb_policy_choice.allow_all_usb"]; exists {
			val := m.GetUsbPolicyChoice().(*GlobalSpecType_AllowAllUsb).AllowAllUsb
			vOpts := append(opts,
				db.WithValidateField("usb_policy_choice"),
				db.WithValidateField("allow_all_usb"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_UsbPolicy:
		if fv, exists := v.FldValidators["usb_policy_choice.usb_policy"]; exists {
			val := m.GetUsbPolicyChoice().(*GlobalSpecType_UsbPolicy).UsbPolicy
			vOpts := append(opts,
				db.WithValidateField("usb_policy_choice"),
				db.WithValidateField("usb_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetVmChoice().(type) {
	case *GlobalSpecType_DisableVm:
		if fv, exists := v.FldValidators["vm_choice.disable_vm"]; exists {
			val := m.GetVmChoice().(*GlobalSpecType_DisableVm).DisableVm
			vOpts := append(opts,
				db.WithValidateField("vm_choice"),
				db.WithValidateField("disable_vm"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EnableVm:
		if fv, exists := v.FldValidators["vm_choice.enable_vm"]; exists {
			val := m.GetVmChoice().(*GlobalSpecType_EnableVm).EnableVm
			vOpts := append(opts,
				db.WithValidateField("vm_choice"),
				db.WithValidateField("enable_vm"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["volterra_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_certified_hw"))
		if err := fv(ctx, m.GetVolterraCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_software_version"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_software_version"))
		if err := fv(ctx, m.GetVolterraSoftwareVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("worker_nodes"))
		if err := fv(ctx, m.GetWorkerNodes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhBondChoice := v.BondChoiceValidationRuleHandler
	rulesBondChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBondChoice(rulesBondChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.bond_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bond_choice"] = vFn

	vrhGpuChoice := v.GpuChoiceValidationRuleHandler
	rulesGpuChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGpuChoice(rulesGpuChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.gpu_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gpu_choice"] = vFn

	vrhK8SClusterChoice := v.K8SClusterChoiceValidationRuleHandler
	rulesK8SClusterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhK8SClusterChoice(rulesK8SClusterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.k8s_cluster_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["k8s_cluster_choice"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhNetworkCfgChoice := v.NetworkCfgChoiceValidationRuleHandler
	rulesNetworkCfgChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkCfgChoice(rulesNetworkCfgChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.network_cfg_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_cfg_choice"] = vFn

	vrhSriovInterfaceChoice := v.SriovInterfaceChoiceValidationRuleHandler
	rulesSriovInterfaceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSriovInterfaceChoice(rulesSriovInterfaceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.sriov_interface_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sriov_interface_choice"] = vFn

	vrhStorageCfgChoice := v.StorageCfgChoiceValidationRuleHandler
	rulesStorageCfgChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStorageCfgChoice(rulesStorageCfgChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.storage_cfg_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_cfg_choice"] = vFn

	vrhUsbPolicyChoice := v.UsbPolicyChoiceValidationRuleHandler
	rulesUsbPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhUsbPolicyChoice(rulesUsbPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.usb_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["usb_policy_choice"] = vFn

	vrhVolterraCertifiedHw := v.VolterraCertifiedHwValidationRuleHandler
	rulesVolterraCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required":       "true",
		"ves.io.schema.rules.string.min_len":         "1",
		"ves.io.schema.rules.string.ves_object_name": "true",
	}
	vFn, err = vrhVolterraCertifiedHw(rulesVolterraCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.volterra_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_certified_hw"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhVolterraSoftwareVersion := v.VolterraSoftwareVersionValidationRuleHandler
	rulesVolterraSoftwareVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhVolterraSoftwareVersion(rulesVolterraSoftwareVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.volterra_software_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_software_version"] = vFn

	vrhOperatingSystemVersion := v.OperatingSystemVersionValidationRuleHandler
	rulesOperatingSystemVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhOperatingSystemVersion(rulesOperatingSystemVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.operating_system_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["operating_system_version"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhIpfabricMeshGroup := v.IpfabricMeshGroupValidationRuleHandler
	rulesIpfabricMeshGroup := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhIpfabricMeshGroup(rulesIpfabricMeshGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ipfabric_mesh_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ipfabric_mesh_group"] = vFn

	vrhMasterNodeConfiguration := v.MasterNodeConfigurationValidationRuleHandler
	rulesMasterNodeConfiguration := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
	}
	vFn, err = vrhMasterNodeConfiguration(rulesMasterNodeConfiguration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.master_node_configuration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["master_node_configuration"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["bond_choice.bond_device_list"] = ves_io_schema_fleet.FleetBondDevicesListTypeValidator().Validate

	v.FldValidators["gpu_choice.enable_vgpu"] = ves_io_schema_fleet.VGPUConfigurationValidator().Validate

	v.FldValidators["k8s_cluster_choice.k8s_cluster"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["local_control_plane_choice.local_control_plane"] = ves_io_schema_fleet.LocalControlPlaneTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["network_cfg_choice.custom_network_config"] = VssNetworkConfigurationValidator().Validate

	v.FldValidators["sriov_interface_choice.sriov_interfaces"] = ves_io_schema_fleet.SriovInterfacesListTypeValidator().Validate

	v.FldValidators["storage_cfg_choice.custom_storage_config"] = VssStorageConfigurationValidator().Validate

	v.FldValidators["usb_policy_choice.usb_policy"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["sw"] = ves_io_schema_views.VolterraSoftwareTypeValidator().Validate

	v.FldValidators["os"] = ves_io_schema_views.OperatingSystemTypeValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Interface) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Interface) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Interface) DeepCopy() *Interface {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Interface{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Interface) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Interface) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return InterfaceValidator().Validate(ctx, m, opts...)
}

func (m *Interface) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInterfaceChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *Interface) GetInterfaceChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInterfaceChoice() == nil {
		return nil, nil
	}
	switch m.GetInterfaceChoice().(type) {
	case *Interface_EthernetInterface:

		drInfos, err := m.GetEthernetInterface().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEthernetInterface().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ethernet_interface." + dri.DRField
		}
		return drInfos, err

	case *Interface_DedicatedInterface:

		return nil, nil

	case *Interface_DedicatedManagementInterface:

		return nil, nil

	case *Interface_TunnelInterface:

		drInfos, err := m.GetTunnelInterface().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetTunnelInterface().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "tunnel_interface." + dri.DRField
		}
		return drInfos, err

	case *Interface_LoopbackInterface:

		drInfos, err := m.GetLoopbackInterface().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLoopbackInterface().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "loopback_interface." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateInterface struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateInterface) DcClusterGroupConnectivityInterfaceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_connectivity_interface_choice")
	}
	return validatorFn, nil
}

func (v *ValidateInterface) InterfaceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for interface_choice")
	}
	return validatorFn, nil
}

func (v *ValidateInterface) DescriptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for description")
	}

	return validatorFn, nil
}

func (v *ValidateInterface) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Interface)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Interface got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dc_cluster_group_connectivity_interface_choice"]; exists {
		val := m.GetDcClusterGroupConnectivityInterfaceChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_connectivity_interface_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupConnectivityInterfaceChoice().(type) {
	case *Interface_DcClusterGroupConnectivityInterfaceDisabled:
		if fv, exists := v.FldValidators["dc_cluster_group_connectivity_interface_choice.dc_cluster_group_connectivity_interface_disabled"]; exists {
			val := m.GetDcClusterGroupConnectivityInterfaceChoice().(*Interface_DcClusterGroupConnectivityInterfaceDisabled).DcClusterGroupConnectivityInterfaceDisabled
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_connectivity_interface_choice"),
				db.WithValidateField("dc_cluster_group_connectivity_interface_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_DcClusterGroupConnectivityInterfaceEnabled:
		if fv, exists := v.FldValidators["dc_cluster_group_connectivity_interface_choice.dc_cluster_group_connectivity_interface_enabled"]; exists {
			val := m.GetDcClusterGroupConnectivityInterfaceChoice().(*Interface_DcClusterGroupConnectivityInterfaceEnabled).DcClusterGroupConnectivityInterfaceEnabled
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_connectivity_interface_choice"),
				db.WithValidateField("dc_cluster_group_connectivity_interface_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["description"]; exists {

		vOpts := append(opts, db.WithValidateField("description"))
		if err := fv(ctx, m.GetDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interface_choice"]; exists {
		val := m.GetInterfaceChoice()
		vOpts := append(opts,
			db.WithValidateField("interface_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInterfaceChoice().(type) {
	case *Interface_EthernetInterface:
		if fv, exists := v.FldValidators["interface_choice.ethernet_interface"]; exists {
			val := m.GetInterfaceChoice().(*Interface_EthernetInterface).EthernetInterface
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("ethernet_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_DedicatedInterface:
		if fv, exists := v.FldValidators["interface_choice.dedicated_interface"]; exists {
			val := m.GetInterfaceChoice().(*Interface_DedicatedInterface).DedicatedInterface
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("dedicated_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_DedicatedManagementInterface:
		if fv, exists := v.FldValidators["interface_choice.dedicated_management_interface"]; exists {
			val := m.GetInterfaceChoice().(*Interface_DedicatedManagementInterface).DedicatedManagementInterface
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("dedicated_management_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_TunnelInterface:
		if fv, exists := v.FldValidators["interface_choice.tunnel_interface"]; exists {
			val := m.GetInterfaceChoice().(*Interface_TunnelInterface).TunnelInterface
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("tunnel_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_LoopbackInterface:
		if fv, exists := v.FldValidators["interface_choice.loopback_interface"]; exists {
			val := m.GetInterfaceChoice().(*Interface_LoopbackInterface).LoopbackInterface
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("loopback_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["labels"]; exists {

		vOpts := append(opts, db.WithValidateField("labels"))
		for key, value := range m.GetLabels() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultInterfaceValidator = func() *ValidateInterface {
	v := &ValidateInterface{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupConnectivityInterfaceChoice := v.DcClusterGroupConnectivityInterfaceChoiceValidationRuleHandler
	rulesDcClusterGroupConnectivityInterfaceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupConnectivityInterfaceChoice(rulesDcClusterGroupConnectivityInterfaceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.dc_cluster_group_connectivity_interface_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_connectivity_interface_choice"] = vFn

	vrhInterfaceChoice := v.InterfaceChoiceValidationRuleHandler
	rulesInterfaceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInterfaceChoice(rulesInterfaceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.interface_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interface_choice"] = vFn

	vrhDescription := v.DescriptionValidationRuleHandler
	rulesDescription := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhDescription(rulesDescription)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.description: %s", err)
		panic(errMsg)
	}
	v.FldValidators["description"] = vFn

	v.FldValidators["interface_choice.ethernet_interface"] = ves_io_schema_network_interface.EthernetInterfaceTypeValidator().Validate
	v.FldValidators["interface_choice.dedicated_interface"] = ves_io_schema_network_interface.DedicatedInterfaceTypeValidator().Validate
	v.FldValidators["interface_choice.dedicated_management_interface"] = ves_io_schema_network_interface.DedicatedManagementInterfaceTypeValidator().Validate
	v.FldValidators["interface_choice.tunnel_interface"] = ves_io_schema_network_interface.TunnelInterfaceTypeValidator().Validate
	v.FldValidators["interface_choice.loopback_interface"] = ves_io_schema_network_interface.LoopbackInterfaceTypeValidator().Validate

	return v
}()

func InterfaceValidator() db.Validator {
	return DefaultInterfaceValidator
}

// augmented methods on protoc/std generated struct

func (m *InterfaceListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *InterfaceListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *InterfaceListType) DeepCopy() *InterfaceListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &InterfaceListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *InterfaceListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *InterfaceListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return InterfaceListTypeValidator().Validate(ctx, m, opts...)
}

func (m *InterfaceListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInterfacesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *InterfaceListType) GetInterfacesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInterfaces() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetInterfaces() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInterfaces() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("interfaces[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateInterfaceListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateInterfaceListType) InterfacesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for interfaces")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Interface, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := InterfaceValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for interfaces")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Interface)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Interface, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated interfaces")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items interfaces")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateInterfaceListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*InterfaceListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *InterfaceListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["interfaces"]; exists {
		vOpts := append(opts, db.WithValidateField("interfaces"))
		if err := fv(ctx, m.GetInterfaces(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultInterfaceListTypeValidator = func() *ValidateInterfaceListType {
	v := &ValidateInterfaceListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhInterfaces := v.InterfacesValidationRuleHandler
	rulesInterfaces := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhInterfaces(rulesInterfaces)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InterfaceListType.interfaces: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interfaces"] = vFn

	return v
}()

func InterfaceListTypeValidator() db.Validator {
	return DefaultInterfaceListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetCustomNetworkConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.custom_network_config")
	}

	if err := m.GetCustomStorageConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.custom_storage_config")
	}

	if err := m.GetLocalControlPlane().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.local_control_plane")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetK8SClusterChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetK8SClusterChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLocalControlPlaneChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLocalControlPlaneChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkCfgChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkCfgChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStorageCfgChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStorageCfgChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUsbPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetUsbPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *ReplaceSpecType) GetK8SClusterChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetK8SClusterChoice().(type) {
	case *ReplaceSpecType_NoK8SCluster:

		return nil, nil

	case *ReplaceSpecType_K8SCluster:

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("k8s_cluster.Object")
		dri := db.DRefInfo{
			RefdType:   "k8s_cluster.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "k8s_cluster",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetK8SClusterChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetK8SClusterChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetK8SClusterChoice().(type) {
	case *ReplaceSpecType_NoK8SCluster:

	case *ReplaceSpecType_K8SCluster:
		refdType, err := d.TypeForEntryKind("", "", "k8s_cluster.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: k8s_cluster")
		}

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "k8s_cluster.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetLocalControlPlaneChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLocalControlPlaneChoice() == nil {
		return nil, nil
	}
	switch m.GetLocalControlPlaneChoice().(type) {
	case *ReplaceSpecType_NoLocalControlPlane:

		return nil, nil

	case *ReplaceSpecType_LocalControlPlane:

		drInfos, err := m.GetLocalControlPlane().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLocalControlPlane().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "local_control_plane." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *ReplaceSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:

		return nil, nil

	case *ReplaceSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:

	case *ReplaceSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetNetworkCfgChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkCfgChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkCfgChoice().(type) {
	case *ReplaceSpecType_DefaultNetworkConfig:

		return nil, nil

	case *ReplaceSpecType_CustomNetworkConfig:

		drInfos, err := m.GetCustomNetworkConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomNetworkConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_network_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetStorageCfgChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStorageCfgChoice() == nil {
		return nil, nil
	}
	switch m.GetStorageCfgChoice().(type) {
	case *ReplaceSpecType_DefaultStorageConfig:

		return nil, nil

	case *ReplaceSpecType_CustomStorageConfig:

		drInfos, err := m.GetCustomStorageConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomStorageConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_storage_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *ReplaceSpecType) GetUsbPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetUsbPolicyChoice().(type) {
	case *ReplaceSpecType_DenyAllUsb:

		return nil, nil

	case *ReplaceSpecType_AllowAllUsb:

		return nil, nil

	case *ReplaceSpecType_UsbPolicy:

		vref := m.GetUsbPolicy()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("usb_policy.Object")
		dri := db.DRefInfo{
			RefdType:   "usb_policy.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "usb_policy",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetUsbPolicyChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetUsbPolicyChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetUsbPolicyChoice().(type) {
	case *ReplaceSpecType_DenyAllUsb:

	case *ReplaceSpecType_AllowAllUsb:

	case *ReplaceSpecType_UsbPolicy:
		refdType, err := d.TypeForEntryKind("", "", "usb_policy.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: usb_policy")
		}

		vref := m.GetUsbPolicy()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "usb_policy.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) BondChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bond_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) GpuChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for gpu_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) K8SClusterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for k8s_cluster_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) NetworkCfgChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_cfg_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) SriovInterfaceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sriov_interface_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) StorageCfgChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for storage_cfg_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) UsbPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for usb_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) VolterraCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for worker_nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for worker_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated worker_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items worker_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) MasterNodeConfigurationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for master_node_configuration")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.MasterNode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.MasterNodeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for master_node_configuration")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.MasterNode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.MasterNode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated master_node_configuration")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items master_node_configuration")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *ReplaceSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*ReplaceSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["bond_choice"]; exists {
		val := m.GetBondChoice()
		vOpts := append(opts,
			db.WithValidateField("bond_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBondChoice().(type) {
	case *ReplaceSpecType_NoBondDevices:
		if fv, exists := v.FldValidators["bond_choice.no_bond_devices"]; exists {
			val := m.GetBondChoice().(*ReplaceSpecType_NoBondDevices).NoBondDevices
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("no_bond_devices"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BondDeviceList:
		if fv, exists := v.FldValidators["bond_choice.bond_device_list"]; exists {
			val := m.GetBondChoice().(*ReplaceSpecType_BondDeviceList).BondDeviceList
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("bond_device_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gpu_choice"]; exists {
		val := m.GetGpuChoice()
		vOpts := append(opts,
			db.WithValidateField("gpu_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGpuChoice().(type) {
	case *ReplaceSpecType_DisableGpu:
		if fv, exists := v.FldValidators["gpu_choice.disable_gpu"]; exists {
			val := m.GetGpuChoice().(*ReplaceSpecType_DisableGpu).DisableGpu
			vOpts := append(opts,
				db.WithValidateField("gpu_choice"),
				db.WithValidateField("disable_gpu"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EnableGpu:
		if fv, exists := v.FldValidators["gpu_choice.enable_gpu"]; exists {
			val := m.GetGpuChoice().(*ReplaceSpecType_EnableGpu).EnableGpu
			vOpts := append(opts,
				db.WithValidateField("gpu_choice"),
				db.WithValidateField("enable_gpu"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EnableVgpu:
		if fv, exists := v.FldValidators["gpu_choice.enable_vgpu"]; exists {
			val := m.GetGpuChoice().(*ReplaceSpecType_EnableVgpu).EnableVgpu
			vOpts := append(opts,
				db.WithValidateField("gpu_choice"),
				db.WithValidateField("enable_vgpu"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["k8s_cluster_choice"]; exists {
		val := m.GetK8SClusterChoice()
		vOpts := append(opts,
			db.WithValidateField("k8s_cluster_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetK8SClusterChoice().(type) {
	case *ReplaceSpecType_NoK8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.no_k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*ReplaceSpecType_NoK8SCluster).NoK8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("no_k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_K8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*ReplaceSpecType_K8SCluster).K8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetLocalControlPlaneChoice().(type) {
	case *ReplaceSpecType_NoLocalControlPlane:
		if fv, exists := v.FldValidators["local_control_plane_choice.no_local_control_plane"]; exists {
			val := m.GetLocalControlPlaneChoice().(*ReplaceSpecType_NoLocalControlPlane).NoLocalControlPlane
			vOpts := append(opts,
				db.WithValidateField("local_control_plane_choice"),
				db.WithValidateField("no_local_control_plane"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LocalControlPlane:
		if fv, exists := v.FldValidators["local_control_plane_choice.local_control_plane"]; exists {
			val := m.GetLocalControlPlaneChoice().(*ReplaceSpecType_LocalControlPlane).LocalControlPlane
			vOpts := append(opts,
				db.WithValidateField("local_control_plane_choice"),
				db.WithValidateField("local_control_plane"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["master_node_configuration"]; exists {
		vOpts := append(opts, db.WithValidateField("master_node_configuration"))
		if err := fv(ctx, m.GetMasterNodeConfiguration(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["master_nodes"]; exists {

		vOpts := append(opts, db.WithValidateField("master_nodes"))
		for idx, item := range m.GetMasterNodes() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_cfg_choice"]; exists {
		val := m.GetNetworkCfgChoice()
		vOpts := append(opts,
			db.WithValidateField("network_cfg_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkCfgChoice().(type) {
	case *ReplaceSpecType_DefaultNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.default_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*ReplaceSpecType_DefaultNetworkConfig).DefaultNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("default_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_CustomNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.custom_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*ReplaceSpecType_CustomNetworkConfig).CustomNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("custom_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["os"]; exists {

		vOpts := append(opts, db.WithValidateField("os"))
		if err := fv(ctx, m.GetOs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sriov_interface_choice"]; exists {
		val := m.GetSriovInterfaceChoice()
		vOpts := append(opts,
			db.WithValidateField("sriov_interface_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSriovInterfaceChoice().(type) {
	case *ReplaceSpecType_DefaultSriovInterface:
		if fv, exists := v.FldValidators["sriov_interface_choice.default_sriov_interface"]; exists {
			val := m.GetSriovInterfaceChoice().(*ReplaceSpecType_DefaultSriovInterface).DefaultSriovInterface
			vOpts := append(opts,
				db.WithValidateField("sriov_interface_choice"),
				db.WithValidateField("default_sriov_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SriovInterfaces:
		if fv, exists := v.FldValidators["sriov_interface_choice.sriov_interfaces"]; exists {
			val := m.GetSriovInterfaceChoice().(*ReplaceSpecType_SriovInterfaces).SriovInterfaces
			vOpts := append(opts,
				db.WithValidateField("sriov_interface_choice"),
				db.WithValidateField("sriov_interfaces"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["storage_cfg_choice"]; exists {
		val := m.GetStorageCfgChoice()
		vOpts := append(opts,
			db.WithValidateField("storage_cfg_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStorageCfgChoice().(type) {
	case *ReplaceSpecType_DefaultStorageConfig:
		if fv, exists := v.FldValidators["storage_cfg_choice.default_storage_config"]; exists {
			val := m.GetStorageCfgChoice().(*ReplaceSpecType_DefaultStorageConfig).DefaultStorageConfig
			vOpts := append(opts,
				db.WithValidateField("storage_cfg_choice"),
				db.WithValidateField("default_storage_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_CustomStorageConfig:
		if fv, exists := v.FldValidators["storage_cfg_choice.custom_storage_config"]; exists {
			val := m.GetStorageCfgChoice().(*ReplaceSpecType_CustomStorageConfig).CustomStorageConfig
			vOpts := append(opts,
				db.WithValidateField("storage_cfg_choice"),
				db.WithValidateField("custom_storage_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["sw"]; exists {

		vOpts := append(opts, db.WithValidateField("sw"))
		if err := fv(ctx, m.GetSw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["usb_policy_choice"]; exists {
		val := m.GetUsbPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("usb_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetUsbPolicyChoice().(type) {
	case *ReplaceSpecType_DenyAllUsb:
		if fv, exists := v.FldValidators["usb_policy_choice.deny_all_usb"]; exists {
			val := m.GetUsbPolicyChoice().(*ReplaceSpecType_DenyAllUsb).DenyAllUsb
			vOpts := append(opts,
				db.WithValidateField("usb_policy_choice"),
				db.WithValidateField("deny_all_usb"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AllowAllUsb:
		if fv, exists := v.FldValidators["usb_policy_choice.allow_all_usb"]; exists {
			val := m.GetUsbPolicyChoice().(*ReplaceSpecType_AllowAllUsb).AllowAllUsb
			vOpts := append(opts,
				db.WithValidateField("usb_policy_choice"),
				db.WithValidateField("allow_all_usb"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_UsbPolicy:
		if fv, exists := v.FldValidators["usb_policy_choice.usb_policy"]; exists {
			val := m.GetUsbPolicyChoice().(*ReplaceSpecType_UsbPolicy).UsbPolicy
			vOpts := append(opts,
				db.WithValidateField("usb_policy_choice"),
				db.WithValidateField("usb_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetVmChoice().(type) {
	case *ReplaceSpecType_DisableVm:
		if fv, exists := v.FldValidators["vm_choice.disable_vm"]; exists {
			val := m.GetVmChoice().(*ReplaceSpecType_DisableVm).DisableVm
			vOpts := append(opts,
				db.WithValidateField("vm_choice"),
				db.WithValidateField("disable_vm"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EnableVm:
		if fv, exists := v.FldValidators["vm_choice.enable_vm"]; exists {
			val := m.GetVmChoice().(*ReplaceSpecType_EnableVm).EnableVm
			vOpts := append(opts,
				db.WithValidateField("vm_choice"),
				db.WithValidateField("enable_vm"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["volterra_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_certified_hw"))
		if err := fv(ctx, m.GetVolterraCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("worker_nodes"))
		if err := fv(ctx, m.GetWorkerNodes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhBondChoice := v.BondChoiceValidationRuleHandler
	rulesBondChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBondChoice(rulesBondChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.bond_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bond_choice"] = vFn

	vrhGpuChoice := v.GpuChoiceValidationRuleHandler
	rulesGpuChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGpuChoice(rulesGpuChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.gpu_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gpu_choice"] = vFn

	vrhK8SClusterChoice := v.K8SClusterChoiceValidationRuleHandler
	rulesK8SClusterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhK8SClusterChoice(rulesK8SClusterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.k8s_cluster_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["k8s_cluster_choice"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhNetworkCfgChoice := v.NetworkCfgChoiceValidationRuleHandler
	rulesNetworkCfgChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkCfgChoice(rulesNetworkCfgChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.network_cfg_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_cfg_choice"] = vFn

	vrhSriovInterfaceChoice := v.SriovInterfaceChoiceValidationRuleHandler
	rulesSriovInterfaceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSriovInterfaceChoice(rulesSriovInterfaceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.sriov_interface_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sriov_interface_choice"] = vFn

	vrhStorageCfgChoice := v.StorageCfgChoiceValidationRuleHandler
	rulesStorageCfgChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStorageCfgChoice(rulesStorageCfgChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.storage_cfg_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_cfg_choice"] = vFn

	vrhUsbPolicyChoice := v.UsbPolicyChoiceValidationRuleHandler
	rulesUsbPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhUsbPolicyChoice(rulesUsbPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.usb_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["usb_policy_choice"] = vFn

	vrhVolterraCertifiedHw := v.VolterraCertifiedHwValidationRuleHandler
	rulesVolterraCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required":       "true",
		"ves.io.schema.rules.string.min_len":         "1",
		"ves.io.schema.rules.string.ves_object_name": "true",
	}
	vFn, err = vrhVolterraCertifiedHw(rulesVolterraCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.volterra_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_certified_hw"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhMasterNodeConfiguration := v.MasterNodeConfigurationValidationRuleHandler
	rulesMasterNodeConfiguration := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
	}
	vFn, err = vrhMasterNodeConfiguration(rulesMasterNodeConfiguration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.master_node_configuration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["master_node_configuration"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["bond_choice.bond_device_list"] = ves_io_schema_fleet.FleetBondDevicesListTypeValidator().Validate

	v.FldValidators["gpu_choice.enable_vgpu"] = ves_io_schema_fleet.VGPUConfigurationValidator().Validate

	v.FldValidators["k8s_cluster_choice.k8s_cluster"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["local_control_plane_choice.local_control_plane"] = ves_io_schema_fleet.LocalControlPlaneTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["network_cfg_choice.custom_network_config"] = VssNetworkConfigurationValidator().Validate

	v.FldValidators["sriov_interface_choice.sriov_interfaces"] = ves_io_schema_fleet.SriovInterfacesListTypeValidator().Validate

	v.FldValidators["storage_cfg_choice.custom_storage_config"] = VssStorageConfigurationValidator().Validate

	v.FldValidators["usb_policy_choice.usb_policy"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["sw"] = ves_io_schema_views.VolterraSoftwareTypeValidator().Validate

	v.FldValidators["os"] = ves_io_schema_views.OperatingSystemTypeValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SliVnConfiguration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SliVnConfiguration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SliVnConfiguration) DeepCopy() *SliVnConfiguration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SliVnConfiguration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SliVnConfiguration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SliVnConfiguration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SliVnConfigurationValidator().Validate(ctx, m, opts...)
}

func (m *SliVnConfiguration) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStaticV6RouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStaticV6RouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *SliVnConfiguration) GetStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetStaticRouteChoice().(type) {
	case *SliVnConfiguration_NoStaticRoutes:

		return nil, nil

	case *SliVnConfiguration_StaticRoutes:

		drInfos, err := m.GetStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *SliVnConfiguration) GetStaticV6RouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticV6RouteChoice() == nil {
		return nil, nil
	}
	switch m.GetStaticV6RouteChoice().(type) {
	case *SliVnConfiguration_NoV6StaticRoutes:

		return nil, nil

	case *SliVnConfiguration_StaticV6Routes:

		drInfos, err := m.GetStaticV6Routes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticV6Routes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "static_v6_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateSliVnConfiguration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSliVnConfiguration) StaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSliVnConfiguration) StaticV6RouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for static_v6_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSliVnConfiguration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SliVnConfiguration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SliVnConfiguration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["static_route_choice"]; exists {
		val := m.GetStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStaticRouteChoice().(type) {
	case *SliVnConfiguration_NoStaticRoutes:
		if fv, exists := v.FldValidators["static_route_choice.no_static_routes"]; exists {
			val := m.GetStaticRouteChoice().(*SliVnConfiguration_NoStaticRoutes).NoStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("static_route_choice"),
				db.WithValidateField("no_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SliVnConfiguration_StaticRoutes:
		if fv, exists := v.FldValidators["static_route_choice.static_routes"]; exists {
			val := m.GetStaticRouteChoice().(*SliVnConfiguration_StaticRoutes).StaticRoutes
			vOpts := append(opts,
				db.WithValidateField("static_route_choice"),
				db.WithValidateField("static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["static_v6_route_choice"]; exists {
		val := m.GetStaticV6RouteChoice()
		vOpts := append(opts,
			db.WithValidateField("static_v6_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStaticV6RouteChoice().(type) {
	case *SliVnConfiguration_NoV6StaticRoutes:
		if fv, exists := v.FldValidators["static_v6_route_choice.no_v6_static_routes"]; exists {
			val := m.GetStaticV6RouteChoice().(*SliVnConfiguration_NoV6StaticRoutes).NoV6StaticRoutes
			vOpts := append(opts,
				db.WithValidateField("static_v6_route_choice"),
				db.WithValidateField("no_v6_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SliVnConfiguration_StaticV6Routes:
		if fv, exists := v.FldValidators["static_v6_route_choice.static_v6_routes"]; exists {
			val := m.GetStaticV6RouteChoice().(*SliVnConfiguration_StaticV6Routes).StaticV6Routes
			vOpts := append(opts,
				db.WithValidateField("static_v6_route_choice"),
				db.WithValidateField("static_v6_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSliVnConfigurationValidator = func() *ValidateSliVnConfiguration {
	v := &ValidateSliVnConfiguration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhStaticRouteChoice := v.StaticRouteChoiceValidationRuleHandler
	rulesStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStaticRouteChoice(rulesStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SliVnConfiguration.static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_route_choice"] = vFn

	vrhStaticV6RouteChoice := v.StaticV6RouteChoiceValidationRuleHandler
	rulesStaticV6RouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStaticV6RouteChoice(rulesStaticV6RouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SliVnConfiguration.static_v6_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_v6_route_choice"] = vFn

	v.FldValidators["static_route_choice.static_routes"] = StaticRoutesListTypeValidator().Validate

	v.FldValidators["static_v6_route_choice.static_v6_routes"] = ves_io_schema_virtual_network.StaticV6RoutesListTypeValidator().Validate

	return v
}()

func SliVnConfigurationValidator() db.Validator {
	return DefaultSliVnConfigurationValidator
}

// augmented methods on protoc/std generated struct

func (m *StaticRoutesListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StaticRoutesListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StaticRoutesListType) DeepCopy() *StaticRoutesListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StaticRoutesListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StaticRoutesListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StaticRoutesListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StaticRoutesListTypeValidator().Validate(ctx, m, opts...)
}

func (m *StaticRoutesListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetStaticRoutesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *StaticRoutesListType) GetStaticRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetStaticRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("static_routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateStaticRoutesListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStaticRoutesListType) StaticRoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for static_routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_virtual_network.StaticRouteViewType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_virtual_network.StaticRouteViewTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_virtual_network.StaticRouteViewType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_virtual_network.StaticRouteViewType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateStaticRoutesListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StaticRoutesListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StaticRoutesListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["static_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_routes"))
		if err := fv(ctx, m.GetStaticRoutes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStaticRoutesListTypeValidator = func() *ValidateStaticRoutesListType {
	v := &ValidateStaticRoutesListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhStaticRoutes := v.StaticRoutesValidationRuleHandler
	rulesStaticRoutes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStaticRoutes(rulesStaticRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StaticRoutesListType.static_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_routes"] = vFn

	return v
}()

func StaticRoutesListTypeValidator() db.Validator {
	return DefaultStaticRoutesListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *StorageInterfaceListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StorageInterfaceListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StorageInterfaceListType) DeepCopy() *StorageInterfaceListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StorageInterfaceListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StorageInterfaceListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StorageInterfaceListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StorageInterfaceListTypeValidator().Validate(ctx, m, opts...)
}

func (m *StorageInterfaceListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetStorageInterfacesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *StorageInterfaceListType) GetStorageInterfacesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStorageInterfaces() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetStorageInterfaces() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStorageInterfaces() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("storage_interfaces[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateStorageInterfaceListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStorageInterfaceListType) StorageInterfacesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for storage_interfaces")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*StorageInterfaceType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := StorageInterfaceTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for storage_interfaces")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*StorageInterfaceType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*StorageInterfaceType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated storage_interfaces")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items storage_interfaces")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateStorageInterfaceListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StorageInterfaceListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StorageInterfaceListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["storage_interfaces"]; exists {
		vOpts := append(opts, db.WithValidateField("storage_interfaces"))
		if err := fv(ctx, m.GetStorageInterfaces(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStorageInterfaceListTypeValidator = func() *ValidateStorageInterfaceListType {
	v := &ValidateStorageInterfaceListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhStorageInterfaces := v.StorageInterfacesValidationRuleHandler
	rulesStorageInterfaces := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "256",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStorageInterfaces(rulesStorageInterfaces)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StorageInterfaceListType.storage_interfaces: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_interfaces"] = vFn

	return v
}()

func StorageInterfaceListTypeValidator() db.Validator {
	return DefaultStorageInterfaceListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *StorageInterfaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StorageInterfaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StorageInterfaceType) DeepCopy() *StorageInterfaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StorageInterfaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StorageInterfaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StorageInterfaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StorageInterfaceTypeValidator().Validate(ctx, m, opts...)
}

func (m *StorageInterfaceType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetStorageInterfaceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *StorageInterfaceType) GetStorageInterfaceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStorageInterface() == nil {
		return nil, nil
	}

	drInfos, err := m.GetStorageInterface().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetStorageInterface().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "storage_interface." + dri.DRField
	}
	return drInfos, err

}

type ValidateStorageInterfaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStorageInterfaceType) DescriptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for description")
	}

	return validatorFn, nil
}

func (v *ValidateStorageInterfaceType) StorageInterfaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for storage_interface")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_network_interface.EthernetInterfaceTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateStorageInterfaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StorageInterfaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StorageInterfaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["description"]; exists {

		vOpts := append(opts, db.WithValidateField("description"))
		if err := fv(ctx, m.GetDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["labels"]; exists {

		vOpts := append(opts, db.WithValidateField("labels"))
		for key, value := range m.GetLabels() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["storage_interface"]; exists {

		vOpts := append(opts, db.WithValidateField("storage_interface"))
		if err := fv(ctx, m.GetStorageInterface(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStorageInterfaceTypeValidator = func() *ValidateStorageInterfaceType {
	v := &ValidateStorageInterfaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDescription := v.DescriptionValidationRuleHandler
	rulesDescription := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhDescription(rulesDescription)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StorageInterfaceType.description: %s", err)
		panic(errMsg)
	}
	v.FldValidators["description"] = vFn

	vrhStorageInterface := v.StorageInterfaceValidationRuleHandler
	rulesStorageInterface := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhStorageInterface(rulesStorageInterface)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StorageInterfaceType.storage_interface: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_interface"] = vFn

	return v
}()

func StorageInterfaceTypeValidator() db.Validator {
	return DefaultStorageInterfaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *VnConfiguration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VnConfiguration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VnConfiguration) DeepCopy() *VnConfiguration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VnConfiguration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VnConfiguration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VnConfiguration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VnConfigurationValidator().Validate(ctx, m, opts...)
}

func (m *VnConfiguration) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDcClusterGroupInterfaceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupInterfaceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStaticV6RouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStaticV6RouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *VnConfiguration) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *VnConfiguration_NoDcClusterGroup:

		return nil, nil

	case *VnConfiguration_DcClusterGroup:

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *VnConfiguration) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *VnConfiguration_NoDcClusterGroup:

	case *VnConfiguration_DcClusterGroup:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

func (m *VnConfiguration) GetDcClusterGroupInterfaceDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetDcClusterGroupInterface()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("VnConfiguration.dc_cluster_group_interface[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_interface.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_interface",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetDcClusterGroupInterfaceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *VnConfiguration) GetDcClusterGroupInterfaceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
	}
	for i, vref := range m.GetDcClusterGroupInterface() {
		if vref == nil {
			return nil, fmt.Errorf("VnConfiguration.dc_cluster_group_interface[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_interface.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *VnConfiguration) GetStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetStaticRouteChoice().(type) {
	case *VnConfiguration_NoStaticRoutes:

		return nil, nil

	case *VnConfiguration_StaticRoutes:

		drInfos, err := m.GetStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *VnConfiguration) GetStaticV6RouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticV6RouteChoice() == nil {
		return nil, nil
	}
	switch m.GetStaticV6RouteChoice().(type) {
	case *VnConfiguration_NoStaticV6Routes:

		return nil, nil

	case *VnConfiguration_StaticV6Routes:

		drInfos, err := m.GetStaticV6Routes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticV6Routes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "static_v6_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateVnConfiguration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVnConfiguration) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVnConfiguration) StaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVnConfiguration) StaticV6RouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for static_v6_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVnConfiguration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VnConfiguration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VnConfiguration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *VnConfiguration_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*VnConfiguration_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VnConfiguration_DcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*VnConfiguration_DcClusterGroup).DcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["dc_cluster_group_interface"]; exists {

		vOpts := append(opts, db.WithValidateField("dc_cluster_group_interface"))
		for idx, item := range m.GetDcClusterGroupInterface() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["labels"]; exists {

		vOpts := append(opts, db.WithValidateField("labels"))
		for key, value := range m.GetLabels() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["static_route_choice"]; exists {
		val := m.GetStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStaticRouteChoice().(type) {
	case *VnConfiguration_NoStaticRoutes:
		if fv, exists := v.FldValidators["static_route_choice.no_static_routes"]; exists {
			val := m.GetStaticRouteChoice().(*VnConfiguration_NoStaticRoutes).NoStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("static_route_choice"),
				db.WithValidateField("no_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VnConfiguration_StaticRoutes:
		if fv, exists := v.FldValidators["static_route_choice.static_routes"]; exists {
			val := m.GetStaticRouteChoice().(*VnConfiguration_StaticRoutes).StaticRoutes
			vOpts := append(opts,
				db.WithValidateField("static_route_choice"),
				db.WithValidateField("static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["static_v6_route_choice"]; exists {
		val := m.GetStaticV6RouteChoice()
		vOpts := append(opts,
			db.WithValidateField("static_v6_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStaticV6RouteChoice().(type) {
	case *VnConfiguration_NoStaticV6Routes:
		if fv, exists := v.FldValidators["static_v6_route_choice.no_static_v6_routes"]; exists {
			val := m.GetStaticV6RouteChoice().(*VnConfiguration_NoStaticV6Routes).NoStaticV6Routes
			vOpts := append(opts,
				db.WithValidateField("static_v6_route_choice"),
				db.WithValidateField("no_static_v6_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VnConfiguration_StaticV6Routes:
		if fv, exists := v.FldValidators["static_v6_route_choice.static_v6_routes"]; exists {
			val := m.GetStaticV6RouteChoice().(*VnConfiguration_StaticV6Routes).StaticV6Routes
			vOpts := append(opts,
				db.WithValidateField("static_v6_route_choice"),
				db.WithValidateField("static_v6_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVnConfigurationValidator = func() *ValidateVnConfiguration {
	v := &ValidateVnConfiguration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VnConfiguration.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhStaticRouteChoice := v.StaticRouteChoiceValidationRuleHandler
	rulesStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStaticRouteChoice(rulesStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VnConfiguration.static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_route_choice"] = vFn

	vrhStaticV6RouteChoice := v.StaticV6RouteChoiceValidationRuleHandler
	rulesStaticV6RouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStaticV6RouteChoice(rulesStaticV6RouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VnConfiguration.static_v6_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_v6_route_choice"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["static_route_choice.static_routes"] = StaticRoutesListTypeValidator().Validate

	v.FldValidators["static_v6_route_choice.static_v6_routes"] = ves_io_schema_virtual_network.StaticV6RoutesListTypeValidator().Validate

	v.FldValidators["dc_cluster_group_interface"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func VnConfigurationValidator() db.Validator {
	return DefaultVnConfigurationValidator
}

// augmented methods on protoc/std generated struct

func (m *VssNetworkConfiguration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VssNetworkConfiguration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *VssNetworkConfiguration) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting VssNetworkConfiguration.global_network_list")
	}

	return nil
}

func (m *VssNetworkConfiguration) DeepCopy() *VssNetworkConfiguration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VssNetworkConfiguration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VssNetworkConfiguration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VssNetworkConfiguration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VssNetworkConfigurationValidator().Validate(ctx, m, opts...)
}

func (m *VssNetworkConfiguration) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetInterfaceChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetInterfaceChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSliChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSliChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSloChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSloChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *VssNetworkConfiguration) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *VssNetworkConfiguration_NoForwardProxy:

		return nil, nil

	case *VssNetworkConfiguration_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *VssNetworkConfiguration_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *VssNetworkConfiguration) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *VssNetworkConfiguration_NoGlobalNetwork:

		return nil, nil

	case *VssNetworkConfiguration_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *VssNetworkConfiguration) GetInterfaceChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInterfaceChoice() == nil {
		return nil, nil
	}
	switch m.GetInterfaceChoice().(type) {
	case *VssNetworkConfiguration_DefaultInterfaceConfig:

		return nil, nil

	case *VssNetworkConfiguration_InterfaceList:

		drInfos, err := m.GetInterfaceList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInterfaceList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "interface_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *VssNetworkConfiguration) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *VssNetworkConfiguration_NoNetworkPolicy:

		return nil, nil

	case *VssNetworkConfiguration_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *VssNetworkConfiguration_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *VssNetworkConfiguration) GetSliChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSliChoice() == nil {
		return nil, nil
	}
	switch m.GetSliChoice().(type) {
	case *VssNetworkConfiguration_DefaultSliConfig:

		return nil, nil

	case *VssNetworkConfiguration_SliConfig:

		drInfos, err := m.GetSliConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSliConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sli_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *VssNetworkConfiguration) GetSloChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSloChoice() == nil {
		return nil, nil
	}
	switch m.GetSloChoice().(type) {
	case *VssNetworkConfiguration_DefaultConfig:

		return nil, nil

	case *VssNetworkConfiguration_SloConfig:

		drInfos, err := m.GetSloConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSloConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "slo_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateVssNetworkConfiguration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVssNetworkConfiguration) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVssNetworkConfiguration) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVssNetworkConfiguration) InterfaceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for interface_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVssNetworkConfiguration) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVssNetworkConfiguration) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVssNetworkConfiguration) SiteMeshGroupChoiceSiteToSiteTunnelIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SiteToSiteTunnelIp, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_to_site_tunnel_ip")
	}
	return oValidatorFn_SiteToSiteTunnelIp, nil
}

func (v *ValidateVssNetworkConfiguration) SloChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for slo_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVssNetworkConfiguration) OutsideVipValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_vip")
	}

	return validatorFn, nil
}

func (v *ValidateVssNetworkConfiguration) OutsideNameserverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_nameserver")
	}

	return validatorFn, nil
}

func (v *ValidateVssNetworkConfiguration) BgpRouterIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_router_id")
	}

	return validatorFn, nil
}

func (v *ValidateVssNetworkConfiguration) BgpPeerAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_peer_address")
	}

	return validatorFn, nil
}

func (v *ValidateVssNetworkConfiguration) TunnelDeadTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tunnel_dead_timeout")
	}

	return validatorFn, nil
}

func (v *ValidateVssNetworkConfiguration) OutsideVipV6ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_vip_v6")
	}

	return validatorFn, nil
}

func (v *ValidateVssNetworkConfiguration) OutsideNameserverV6ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_nameserver_v6")
	}

	return validatorFn, nil
}

func (v *ValidateVssNetworkConfiguration) BgpPeerAddressV6ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_peer_address_v6")
	}

	return validatorFn, nil
}

func (v *ValidateVssNetworkConfiguration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VssNetworkConfiguration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VssNetworkConfiguration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bgp_peer_address"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peer_address"))
		if err := fv(ctx, m.GetBgpPeerAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peer_address_v6"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peer_address_v6"))
		if err := fv(ctx, m.GetBgpPeerAddressV6(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_router_id"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_router_id"))
		if err := fv(ctx, m.GetBgpRouterId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *VssNetworkConfiguration_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*VssNetworkConfiguration_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VssNetworkConfiguration_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*VssNetworkConfiguration_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VssNetworkConfiguration_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*VssNetworkConfiguration_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *VssNetworkConfiguration_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*VssNetworkConfiguration_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VssNetworkConfiguration_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*VssNetworkConfiguration_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["interface_choice"]; exists {
		val := m.GetInterfaceChoice()
		vOpts := append(opts,
			db.WithValidateField("interface_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInterfaceChoice().(type) {
	case *VssNetworkConfiguration_DefaultInterfaceConfig:
		if fv, exists := v.FldValidators["interface_choice.default_interface_config"]; exists {
			val := m.GetInterfaceChoice().(*VssNetworkConfiguration_DefaultInterfaceConfig).DefaultInterfaceConfig
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("default_interface_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VssNetworkConfiguration_InterfaceList:
		if fv, exists := v.FldValidators["interface_choice.interface_list"]; exists {
			val := m.GetInterfaceChoice().(*VssNetworkConfiguration_InterfaceList).InterfaceList
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("interface_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *VssNetworkConfiguration_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*VssNetworkConfiguration_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VssNetworkConfiguration_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*VssNetworkConfiguration_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VssNetworkConfiguration_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*VssNetworkConfiguration_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_nameserver"]; exists {

		vOpts := append(opts, db.WithValidateField("outside_nameserver"))
		if err := fv(ctx, m.GetOutsideNameserver(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["outside_nameserver_v6"]; exists {

		vOpts := append(opts, db.WithValidateField("outside_nameserver_v6"))
		if err := fv(ctx, m.GetOutsideNameserverV6(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["outside_vip"]; exists {

		vOpts := append(opts, db.WithValidateField("outside_vip"))
		if err := fv(ctx, m.GetOutsideVip(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["outside_vip_v6"]; exists {

		vOpts := append(opts, db.WithValidateField("outside_vip_v6"))
		if err := fv(ctx, m.GetOutsideVipV6(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *VssNetworkConfiguration_SiteToSiteTunnelIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.site_to_site_tunnel_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*VssNetworkConfiguration_SiteToSiteTunnelIp).SiteToSiteTunnelIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("site_to_site_tunnel_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VssNetworkConfiguration_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*VssNetworkConfiguration_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VssNetworkConfiguration_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*VssNetworkConfiguration_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetSliChoice().(type) {
	case *VssNetworkConfiguration_DefaultSliConfig:
		if fv, exists := v.FldValidators["sli_choice.default_sli_config"]; exists {
			val := m.GetSliChoice().(*VssNetworkConfiguration_DefaultSliConfig).DefaultSliConfig
			vOpts := append(opts,
				db.WithValidateField("sli_choice"),
				db.WithValidateField("default_sli_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VssNetworkConfiguration_SliConfig:
		if fv, exists := v.FldValidators["sli_choice.sli_config"]; exists {
			val := m.GetSliChoice().(*VssNetworkConfiguration_SliConfig).SliConfig
			vOpts := append(opts,
				db.WithValidateField("sli_choice"),
				db.WithValidateField("sli_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["slo_choice"]; exists {
		val := m.GetSloChoice()
		vOpts := append(opts,
			db.WithValidateField("slo_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSloChoice().(type) {
	case *VssNetworkConfiguration_DefaultConfig:
		if fv, exists := v.FldValidators["slo_choice.default_config"]; exists {
			val := m.GetSloChoice().(*VssNetworkConfiguration_DefaultConfig).DefaultConfig
			vOpts := append(opts,
				db.WithValidateField("slo_choice"),
				db.WithValidateField("default_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VssNetworkConfiguration_SloConfig:
		if fv, exists := v.FldValidators["slo_choice.slo_config"]; exists {
			val := m.GetSloChoice().(*VssNetworkConfiguration_SloConfig).SloConfig
			vOpts := append(opts,
				db.WithValidateField("slo_choice"),
				db.WithValidateField("slo_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tunnel_dead_timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("tunnel_dead_timeout"))
		if err := fv(ctx, m.GetTunnelDeadTimeout(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_vrrp_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("vip_vrrp_mode"))
		if err := fv(ctx, m.GetVipVrrpMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVssNetworkConfigurationValidator = func() *ValidateVssNetworkConfiguration {
	v := &ValidateVssNetworkConfiguration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssNetworkConfiguration.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssNetworkConfiguration.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhInterfaceChoice := v.InterfaceChoiceValidationRuleHandler
	rulesInterfaceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInterfaceChoice(rulesInterfaceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssNetworkConfiguration.interface_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interface_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssNetworkConfiguration.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssNetworkConfiguration.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	vrhSiteMeshGroupChoiceSiteToSiteTunnelIp := v.SiteMeshGroupChoiceSiteToSiteTunnelIpValidationRuleHandler
	rulesSiteMeshGroupChoiceSiteToSiteTunnelIp := map[string]string{
		"ves.io.schema.rules.string.ip": "true",
	}
	vFnMap["site_mesh_group_choice.site_to_site_tunnel_ip"], err = vrhSiteMeshGroupChoiceSiteToSiteTunnelIp(rulesSiteMeshGroupChoiceSiteToSiteTunnelIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field VssNetworkConfiguration.site_mesh_group_choice_site_to_site_tunnel_ip: %s", err)
		panic(errMsg)
	}

	v.FldValidators["site_mesh_group_choice.site_to_site_tunnel_ip"] = vFnMap["site_mesh_group_choice.site_to_site_tunnel_ip"]

	vrhSloChoice := v.SloChoiceValidationRuleHandler
	rulesSloChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSloChoice(rulesSloChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssNetworkConfiguration.slo_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["slo_choice"] = vFn

	vrhOutsideVip := v.OutsideVipValidationRuleHandler
	rulesOutsideVip := map[string]string{
		"ves.io.schema.rules.string.ipv4": "true",
	}
	vFn, err = vrhOutsideVip(rulesOutsideVip)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssNetworkConfiguration.outside_vip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_vip"] = vFn

	vrhOutsideNameserver := v.OutsideNameserverValidationRuleHandler
	rulesOutsideNameserver := map[string]string{
		"ves.io.schema.rules.string.ipv4": "true",
	}
	vFn, err = vrhOutsideNameserver(rulesOutsideNameserver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssNetworkConfiguration.outside_nameserver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_nameserver"] = vFn

	vrhBgpRouterId := v.BgpRouterIdValidationRuleHandler
	rulesBgpRouterId := map[string]string{
		"ves.io.schema.rules.string.ip": "true",
	}
	vFn, err = vrhBgpRouterId(rulesBgpRouterId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssNetworkConfiguration.bgp_router_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_router_id"] = vFn

	vrhBgpPeerAddress := v.BgpPeerAddressValidationRuleHandler
	rulesBgpPeerAddress := map[string]string{
		"ves.io.schema.rules.string.ip": "true",
	}
	vFn, err = vrhBgpPeerAddress(rulesBgpPeerAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssNetworkConfiguration.bgp_peer_address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peer_address"] = vFn

	vrhTunnelDeadTimeout := v.TunnelDeadTimeoutValidationRuleHandler
	rulesTunnelDeadTimeout := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "180000",
	}
	vFn, err = vrhTunnelDeadTimeout(rulesTunnelDeadTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssNetworkConfiguration.tunnel_dead_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tunnel_dead_timeout"] = vFn

	vrhOutsideVipV6 := v.OutsideVipV6ValidationRuleHandler
	rulesOutsideVipV6 := map[string]string{
		"ves.io.schema.rules.string.ipv6": "true",
	}
	vFn, err = vrhOutsideVipV6(rulesOutsideVipV6)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssNetworkConfiguration.outside_vip_v6: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_vip_v6"] = vFn

	vrhOutsideNameserverV6 := v.OutsideNameserverV6ValidationRuleHandler
	rulesOutsideNameserverV6 := map[string]string{
		"ves.io.schema.rules.string.ipv6": "true",
	}
	vFn, err = vrhOutsideNameserverV6(rulesOutsideNameserverV6)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssNetworkConfiguration.outside_nameserver_v6: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_nameserver_v6"] = vFn

	vrhBgpPeerAddressV6 := v.BgpPeerAddressV6ValidationRuleHandler
	rulesBgpPeerAddressV6 := map[string]string{
		"ves.io.schema.rules.string.ipv6": "true",
	}
	vFn, err = vrhBgpPeerAddressV6(rulesBgpPeerAddressV6)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssNetworkConfiguration.bgp_peer_address_v6: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peer_address_v6"] = vFn

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["interface_choice.interface_list"] = InterfaceListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["sli_choice.sli_config"] = SliVnConfigurationValidator().Validate

	v.FldValidators["slo_choice.slo_config"] = VnConfigurationValidator().Validate

	return v
}()

func VssNetworkConfigurationValidator() db.Validator {
	return DefaultVssNetworkConfigurationValidator
}

// augmented methods on protoc/std generated struct

func (m *VssStorageConfiguration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VssStorageConfiguration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *VssStorageConfiguration) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetStorageDeviceList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting VssStorageConfiguration.storage_device_list")
	}

	return nil
}

func (m *VssStorageConfiguration) DeepCopy() *VssStorageConfiguration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VssStorageConfiguration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VssStorageConfiguration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VssStorageConfiguration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VssStorageConfigurationValidator().Validate(ctx, m, opts...)
}

func (m *VssStorageConfiguration) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStorageInterfaceChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStorageInterfaceChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *VssStorageConfiguration) GetStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetStaticRouteChoice().(type) {
	case *VssStorageConfiguration_NoStaticRoutes:

		return nil, nil

	case *VssStorageConfiguration_StaticRoutes:

		drInfos, err := m.GetStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *VssStorageConfiguration) GetStorageInterfaceChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStorageInterfaceChoice() == nil {
		return nil, nil
	}
	switch m.GetStorageInterfaceChoice().(type) {
	case *VssStorageConfiguration_NoStorageInterfaces:

		return nil, nil

	case *VssStorageConfiguration_StorageInterfaceList:

		drInfos, err := m.GetStorageInterfaceList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStorageInterfaceList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "storage_interface_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateVssStorageConfiguration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVssStorageConfiguration) StaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVssStorageConfiguration) StorageClassChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for storage_class_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVssStorageConfiguration) StorageDeviceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for storage_device_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVssStorageConfiguration) StorageInterfaceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for storage_interface_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVssStorageConfiguration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VssStorageConfiguration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VssStorageConfiguration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["static_route_choice"]; exists {
		val := m.GetStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStaticRouteChoice().(type) {
	case *VssStorageConfiguration_NoStaticRoutes:
		if fv, exists := v.FldValidators["static_route_choice.no_static_routes"]; exists {
			val := m.GetStaticRouteChoice().(*VssStorageConfiguration_NoStaticRoutes).NoStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("static_route_choice"),
				db.WithValidateField("no_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VssStorageConfiguration_StaticRoutes:
		if fv, exists := v.FldValidators["static_route_choice.static_routes"]; exists {
			val := m.GetStaticRouteChoice().(*VssStorageConfiguration_StaticRoutes).StaticRoutes
			vOpts := append(opts,
				db.WithValidateField("static_route_choice"),
				db.WithValidateField("static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["storage_class_choice"]; exists {
		val := m.GetStorageClassChoice()
		vOpts := append(opts,
			db.WithValidateField("storage_class_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStorageClassChoice().(type) {
	case *VssStorageConfiguration_DefaultStorageClass:
		if fv, exists := v.FldValidators["storage_class_choice.default_storage_class"]; exists {
			val := m.GetStorageClassChoice().(*VssStorageConfiguration_DefaultStorageClass).DefaultStorageClass
			vOpts := append(opts,
				db.WithValidateField("storage_class_choice"),
				db.WithValidateField("default_storage_class"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VssStorageConfiguration_StorageClassList:
		if fv, exists := v.FldValidators["storage_class_choice.storage_class_list"]; exists {
			val := m.GetStorageClassChoice().(*VssStorageConfiguration_StorageClassList).StorageClassList
			vOpts := append(opts,
				db.WithValidateField("storage_class_choice"),
				db.WithValidateField("storage_class_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["storage_device_choice"]; exists {
		val := m.GetStorageDeviceChoice()
		vOpts := append(opts,
			db.WithValidateField("storage_device_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStorageDeviceChoice().(type) {
	case *VssStorageConfiguration_NoStorageDevice:
		if fv, exists := v.FldValidators["storage_device_choice.no_storage_device"]; exists {
			val := m.GetStorageDeviceChoice().(*VssStorageConfiguration_NoStorageDevice).NoStorageDevice
			vOpts := append(opts,
				db.WithValidateField("storage_device_choice"),
				db.WithValidateField("no_storage_device"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VssStorageConfiguration_StorageDeviceList:
		if fv, exists := v.FldValidators["storage_device_choice.storage_device_list"]; exists {
			val := m.GetStorageDeviceChoice().(*VssStorageConfiguration_StorageDeviceList).StorageDeviceList
			vOpts := append(opts,
				db.WithValidateField("storage_device_choice"),
				db.WithValidateField("storage_device_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["storage_interface_choice"]; exists {
		val := m.GetStorageInterfaceChoice()
		vOpts := append(opts,
			db.WithValidateField("storage_interface_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStorageInterfaceChoice().(type) {
	case *VssStorageConfiguration_NoStorageInterfaces:
		if fv, exists := v.FldValidators["storage_interface_choice.no_storage_interfaces"]; exists {
			val := m.GetStorageInterfaceChoice().(*VssStorageConfiguration_NoStorageInterfaces).NoStorageInterfaces
			vOpts := append(opts,
				db.WithValidateField("storage_interface_choice"),
				db.WithValidateField("no_storage_interfaces"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VssStorageConfiguration_StorageInterfaceList:
		if fv, exists := v.FldValidators["storage_interface_choice.storage_interface_list"]; exists {
			val := m.GetStorageInterfaceChoice().(*VssStorageConfiguration_StorageInterfaceList).StorageInterfaceList
			vOpts := append(opts,
				db.WithValidateField("storage_interface_choice"),
				db.WithValidateField("storage_interface_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVssStorageConfigurationValidator = func() *ValidateVssStorageConfiguration {
	v := &ValidateVssStorageConfiguration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhStaticRouteChoice := v.StaticRouteChoiceValidationRuleHandler
	rulesStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStaticRouteChoice(rulesStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssStorageConfiguration.static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_route_choice"] = vFn

	vrhStorageClassChoice := v.StorageClassChoiceValidationRuleHandler
	rulesStorageClassChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStorageClassChoice(rulesStorageClassChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssStorageConfiguration.storage_class_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_class_choice"] = vFn

	vrhStorageDeviceChoice := v.StorageDeviceChoiceValidationRuleHandler
	rulesStorageDeviceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStorageDeviceChoice(rulesStorageDeviceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssStorageConfiguration.storage_device_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_device_choice"] = vFn

	vrhStorageInterfaceChoice := v.StorageInterfaceChoiceValidationRuleHandler
	rulesStorageInterfaceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStorageInterfaceChoice(rulesStorageInterfaceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VssStorageConfiguration.storage_interface_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_interface_choice"] = vFn

	v.FldValidators["static_route_choice.static_routes"] = StaticRoutesListTypeValidator().Validate

	v.FldValidators["storage_class_choice.storage_class_list"] = ves_io_schema_fleet.FleetStorageClassListTypeValidator().Validate

	v.FldValidators["storage_device_choice.storage_device_list"] = ves_io_schema_fleet.FleetStorageDeviceListTypeValidator().Validate

	v.FldValidators["storage_interface_choice.storage_interface_list"] = StorageInterfaceListTypeValidator().Validate

	return v
}()

func VssStorageConfigurationValidator() db.Validator {
	return DefaultVssStorageConfigurationValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *CreateSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *CreateSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &CreateSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &CreateSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetBondChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BondChoice.(type) {
	case nil:
		o.BondChoice = nil

	case *CreateSpecType_BondDeviceList:
		o.BondChoice = &GlobalSpecType_BondDeviceList{BondDeviceList: of.BondDeviceList}

	case *CreateSpecType_NoBondDevices:
		o.BondChoice = &GlobalSpecType_NoBondDevices{NoBondDevices: of.NoBondDevices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetBondChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BondChoice.(type) {
	case nil:
		r.BondChoice = nil

	case *GlobalSpecType_BondDeviceList:
		r.BondChoice = &CreateSpecType_BondDeviceList{BondDeviceList: of.BondDeviceList}

	case *GlobalSpecType_NoBondDevices:
		r.BondChoice = &CreateSpecType_NoBondDevices{NoBondDevices: of.NoBondDevices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetGpuChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.GpuChoice.(type) {
	case nil:
		o.GpuChoice = nil

	case *CreateSpecType_DisableGpu:
		o.GpuChoice = &GlobalSpecType_DisableGpu{DisableGpu: of.DisableGpu}

	case *CreateSpecType_EnableGpu:
		o.GpuChoice = &GlobalSpecType_EnableGpu{EnableGpu: of.EnableGpu}

	case *CreateSpecType_EnableVgpu:
		o.GpuChoice = &GlobalSpecType_EnableVgpu{EnableVgpu: of.EnableVgpu}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetGpuChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.GpuChoice.(type) {
	case nil:
		r.GpuChoice = nil

	case *GlobalSpecType_DisableGpu:
		r.GpuChoice = &CreateSpecType_DisableGpu{DisableGpu: of.DisableGpu}

	case *GlobalSpecType_EnableGpu:
		r.GpuChoice = &CreateSpecType_EnableGpu{EnableGpu: of.EnableGpu}

	case *GlobalSpecType_EnableVgpu:
		r.GpuChoice = &CreateSpecType_EnableVgpu{EnableVgpu: of.EnableVgpu}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetK8SClusterChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.K8SClusterChoice.(type) {
	case nil:
		o.K8SClusterChoice = nil

	case *CreateSpecType_K8SCluster:
		o.K8SClusterChoice = &GlobalSpecType_K8SCluster{K8SCluster: of.K8SCluster}

	case *CreateSpecType_NoK8SCluster:
		o.K8SClusterChoice = &GlobalSpecType_NoK8SCluster{NoK8SCluster: of.NoK8SCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetK8SClusterChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.K8SClusterChoice.(type) {
	case nil:
		r.K8SClusterChoice = nil

	case *GlobalSpecType_K8SCluster:
		r.K8SClusterChoice = &CreateSpecType_K8SCluster{K8SCluster: of.K8SCluster}

	case *GlobalSpecType_NoK8SCluster:
		r.K8SClusterChoice = &CreateSpecType_NoK8SCluster{NoK8SCluster: of.NoK8SCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetLocalControlPlaneChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LocalControlPlaneChoice.(type) {
	case nil:
		o.LocalControlPlaneChoice = nil

	case *CreateSpecType_LocalControlPlane:
		o.LocalControlPlaneChoice = &GlobalSpecType_LocalControlPlane{LocalControlPlane: of.LocalControlPlane}

	case *CreateSpecType_NoLocalControlPlane:
		o.LocalControlPlaneChoice = &GlobalSpecType_NoLocalControlPlane{NoLocalControlPlane: of.NoLocalControlPlane}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetLocalControlPlaneChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LocalControlPlaneChoice.(type) {
	case nil:
		r.LocalControlPlaneChoice = nil

	case *GlobalSpecType_LocalControlPlane:
		r.LocalControlPlaneChoice = &CreateSpecType_LocalControlPlane{LocalControlPlane: of.LocalControlPlane}

	case *GlobalSpecType_NoLocalControlPlane:
		r.LocalControlPlaneChoice = &CreateSpecType_NoLocalControlPlane{NoLocalControlPlane: of.NoLocalControlPlane}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *CreateSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *CreateSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &CreateSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetNetworkCfgChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.NetworkCfgChoice.(type) {
	case nil:
		o.NetworkCfgChoice = nil

	case *CreateSpecType_CustomNetworkConfig:
		o.NetworkCfgChoice = &GlobalSpecType_CustomNetworkConfig{CustomNetworkConfig: of.CustomNetworkConfig}

	case *CreateSpecType_DefaultNetworkConfig:
		o.NetworkCfgChoice = &GlobalSpecType_DefaultNetworkConfig{DefaultNetworkConfig: of.DefaultNetworkConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetNetworkCfgChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.NetworkCfgChoice.(type) {
	case nil:
		r.NetworkCfgChoice = nil

	case *GlobalSpecType_CustomNetworkConfig:
		r.NetworkCfgChoice = &CreateSpecType_CustomNetworkConfig{CustomNetworkConfig: of.CustomNetworkConfig}

	case *GlobalSpecType_DefaultNetworkConfig:
		r.NetworkCfgChoice = &CreateSpecType_DefaultNetworkConfig{DefaultNetworkConfig: of.DefaultNetworkConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetSriovInterfaceChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SriovInterfaceChoice.(type) {
	case nil:
		o.SriovInterfaceChoice = nil

	case *CreateSpecType_DefaultSriovInterface:
		o.SriovInterfaceChoice = &GlobalSpecType_DefaultSriovInterface{DefaultSriovInterface: of.DefaultSriovInterface}

	case *CreateSpecType_SriovInterfaces:
		o.SriovInterfaceChoice = &GlobalSpecType_SriovInterfaces{SriovInterfaces: of.SriovInterfaces}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetSriovInterfaceChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SriovInterfaceChoice.(type) {
	case nil:
		r.SriovInterfaceChoice = nil

	case *GlobalSpecType_DefaultSriovInterface:
		r.SriovInterfaceChoice = &CreateSpecType_DefaultSriovInterface{DefaultSriovInterface: of.DefaultSriovInterface}

	case *GlobalSpecType_SriovInterfaces:
		r.SriovInterfaceChoice = &CreateSpecType_SriovInterfaces{SriovInterfaces: of.SriovInterfaces}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetStorageCfgChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.StorageCfgChoice.(type) {
	case nil:
		o.StorageCfgChoice = nil

	case *CreateSpecType_CustomStorageConfig:
		o.StorageCfgChoice = &GlobalSpecType_CustomStorageConfig{CustomStorageConfig: of.CustomStorageConfig}

	case *CreateSpecType_DefaultStorageConfig:
		o.StorageCfgChoice = &GlobalSpecType_DefaultStorageConfig{DefaultStorageConfig: of.DefaultStorageConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetStorageCfgChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.StorageCfgChoice.(type) {
	case nil:
		r.StorageCfgChoice = nil

	case *GlobalSpecType_CustomStorageConfig:
		r.StorageCfgChoice = &CreateSpecType_CustomStorageConfig{CustomStorageConfig: of.CustomStorageConfig}

	case *GlobalSpecType_DefaultStorageConfig:
		r.StorageCfgChoice = &CreateSpecType_DefaultStorageConfig{DefaultStorageConfig: of.DefaultStorageConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetUsbPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.UsbPolicyChoice.(type) {
	case nil:
		o.UsbPolicyChoice = nil

	case *CreateSpecType_AllowAllUsb:
		o.UsbPolicyChoice = &GlobalSpecType_AllowAllUsb{AllowAllUsb: of.AllowAllUsb}

	case *CreateSpecType_DenyAllUsb:
		o.UsbPolicyChoice = &GlobalSpecType_DenyAllUsb{DenyAllUsb: of.DenyAllUsb}

	case *CreateSpecType_UsbPolicy:
		o.UsbPolicyChoice = &GlobalSpecType_UsbPolicy{UsbPolicy: of.UsbPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetUsbPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.UsbPolicyChoice.(type) {
	case nil:
		r.UsbPolicyChoice = nil

	case *GlobalSpecType_AllowAllUsb:
		r.UsbPolicyChoice = &CreateSpecType_AllowAllUsb{AllowAllUsb: of.AllowAllUsb}

	case *GlobalSpecType_DenyAllUsb:
		r.UsbPolicyChoice = &CreateSpecType_DenyAllUsb{DenyAllUsb: of.DenyAllUsb}

	case *GlobalSpecType_UsbPolicy:
		r.UsbPolicyChoice = &CreateSpecType_UsbPolicy{UsbPolicy: of.UsbPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetVmChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.VmChoice.(type) {
	case nil:
		o.VmChoice = nil

	case *CreateSpecType_DisableVm:
		o.VmChoice = &GlobalSpecType_DisableVm{DisableVm: of.DisableVm}

	case *CreateSpecType_EnableVm:
		o.VmChoice = &GlobalSpecType_EnableVm{EnableVm: of.EnableVm}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetVmChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.VmChoice.(type) {
	case nil:
		r.VmChoice = nil

	case *GlobalSpecType_DisableVm:
		r.VmChoice = &CreateSpecType_DisableVm{DisableVm: of.DisableVm}

	case *GlobalSpecType_EnableVm:
		r.VmChoice = &CreateSpecType_EnableVm{EnableVm: of.EnableVm}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.GetBondChoiceFromGlobalSpecType(f)
	m.Coordinates = f.GetCoordinates()
	m.CustomDns = f.GetCustomDns()
	m.GetGpuChoiceFromGlobalSpecType(f)
	m.GetK8SClusterChoiceFromGlobalSpecType(f)
	m.GetLocalControlPlaneChoiceFromGlobalSpecType(f)
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.MasterNodeConfiguration = f.GetMasterNodeConfiguration()
	m.MasterNodes = f.GetMasterNodes()
	m.GetNetworkCfgChoiceFromGlobalSpecType(f)
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.Os = f.GetOs()
	m.GetSriovInterfaceChoiceFromGlobalSpecType(f)
	m.GetStorageCfgChoiceFromGlobalSpecType(f)
	m.Sw = f.GetSw()
	m.GetUsbPolicyChoiceFromGlobalSpecType(f)
	m.GetVmChoiceFromGlobalSpecType(f)
	m.VolterraCertifiedHw = f.GetVolterraCertifiedHw()
	m.WorkerNodes = f.GetWorkerNodes()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	m1.SetBondChoiceToGlobalSpecType(f)
	f.Coordinates = m1.Coordinates
	f.CustomDns = m1.CustomDns
	m1.SetGpuChoiceToGlobalSpecType(f)
	m1.SetK8SClusterChoiceToGlobalSpecType(f)
	m1.SetLocalControlPlaneChoiceToGlobalSpecType(f)
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.MasterNodeConfiguration = m1.MasterNodeConfiguration
	f.MasterNodes = m1.MasterNodes
	m1.SetNetworkCfgChoiceToGlobalSpecType(f)
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	f.Os = m1.Os
	m1.SetSriovInterfaceChoiceToGlobalSpecType(f)
	m1.SetStorageCfgChoiceToGlobalSpecType(f)
	f.Sw = m1.Sw
	m1.SetUsbPolicyChoiceToGlobalSpecType(f)
	m1.SetVmChoiceToGlobalSpecType(f)
	f.VolterraCertifiedHw = m1.VolterraCertifiedHw
	f.WorkerNodes = m1.WorkerNodes
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *GetSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GetSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &GetSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &GetSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetBondChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BondChoice.(type) {
	case nil:
		o.BondChoice = nil

	case *GetSpecType_BondDeviceList:
		o.BondChoice = &GlobalSpecType_BondDeviceList{BondDeviceList: of.BondDeviceList}

	case *GetSpecType_NoBondDevices:
		o.BondChoice = &GlobalSpecType_NoBondDevices{NoBondDevices: of.NoBondDevices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetBondChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BondChoice.(type) {
	case nil:
		r.BondChoice = nil

	case *GlobalSpecType_BondDeviceList:
		r.BondChoice = &GetSpecType_BondDeviceList{BondDeviceList: of.BondDeviceList}

	case *GlobalSpecType_NoBondDevices:
		r.BondChoice = &GetSpecType_NoBondDevices{NoBondDevices: of.NoBondDevices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetGpuChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.GpuChoice.(type) {
	case nil:
		o.GpuChoice = nil

	case *GetSpecType_DisableGpu:
		o.GpuChoice = &GlobalSpecType_DisableGpu{DisableGpu: of.DisableGpu}

	case *GetSpecType_EnableGpu:
		o.GpuChoice = &GlobalSpecType_EnableGpu{EnableGpu: of.EnableGpu}

	case *GetSpecType_EnableVgpu:
		o.GpuChoice = &GlobalSpecType_EnableVgpu{EnableVgpu: of.EnableVgpu}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetGpuChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.GpuChoice.(type) {
	case nil:
		r.GpuChoice = nil

	case *GlobalSpecType_DisableGpu:
		r.GpuChoice = &GetSpecType_DisableGpu{DisableGpu: of.DisableGpu}

	case *GlobalSpecType_EnableGpu:
		r.GpuChoice = &GetSpecType_EnableGpu{EnableGpu: of.EnableGpu}

	case *GlobalSpecType_EnableVgpu:
		r.GpuChoice = &GetSpecType_EnableVgpu{EnableVgpu: of.EnableVgpu}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetK8SClusterChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.K8SClusterChoice.(type) {
	case nil:
		o.K8SClusterChoice = nil

	case *GetSpecType_K8SCluster:
		o.K8SClusterChoice = &GlobalSpecType_K8SCluster{K8SCluster: of.K8SCluster}

	case *GetSpecType_NoK8SCluster:
		o.K8SClusterChoice = &GlobalSpecType_NoK8SCluster{NoK8SCluster: of.NoK8SCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetK8SClusterChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.K8SClusterChoice.(type) {
	case nil:
		r.K8SClusterChoice = nil

	case *GlobalSpecType_K8SCluster:
		r.K8SClusterChoice = &GetSpecType_K8SCluster{K8SCluster: of.K8SCluster}

	case *GlobalSpecType_NoK8SCluster:
		r.K8SClusterChoice = &GetSpecType_NoK8SCluster{NoK8SCluster: of.NoK8SCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetLocalControlPlaneChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LocalControlPlaneChoice.(type) {
	case nil:
		o.LocalControlPlaneChoice = nil

	case *GetSpecType_LocalControlPlane:
		o.LocalControlPlaneChoice = &GlobalSpecType_LocalControlPlane{LocalControlPlane: of.LocalControlPlane}

	case *GetSpecType_NoLocalControlPlane:
		o.LocalControlPlaneChoice = &GlobalSpecType_NoLocalControlPlane{NoLocalControlPlane: of.NoLocalControlPlane}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetLocalControlPlaneChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LocalControlPlaneChoice.(type) {
	case nil:
		r.LocalControlPlaneChoice = nil

	case *GlobalSpecType_LocalControlPlane:
		r.LocalControlPlaneChoice = &GetSpecType_LocalControlPlane{LocalControlPlane: of.LocalControlPlane}

	case *GlobalSpecType_NoLocalControlPlane:
		r.LocalControlPlaneChoice = &GetSpecType_NoLocalControlPlane{NoLocalControlPlane: of.NoLocalControlPlane}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *GetSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GetSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &GetSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetNetworkCfgChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.NetworkCfgChoice.(type) {
	case nil:
		o.NetworkCfgChoice = nil

	case *GetSpecType_CustomNetworkConfig:
		o.NetworkCfgChoice = &GlobalSpecType_CustomNetworkConfig{CustomNetworkConfig: of.CustomNetworkConfig}

	case *GetSpecType_DefaultNetworkConfig:
		o.NetworkCfgChoice = &GlobalSpecType_DefaultNetworkConfig{DefaultNetworkConfig: of.DefaultNetworkConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetNetworkCfgChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.NetworkCfgChoice.(type) {
	case nil:
		r.NetworkCfgChoice = nil

	case *GlobalSpecType_CustomNetworkConfig:
		r.NetworkCfgChoice = &GetSpecType_CustomNetworkConfig{CustomNetworkConfig: of.CustomNetworkConfig}

	case *GlobalSpecType_DefaultNetworkConfig:
		r.NetworkCfgChoice = &GetSpecType_DefaultNetworkConfig{DefaultNetworkConfig: of.DefaultNetworkConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetSriovInterfaceChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SriovInterfaceChoice.(type) {
	case nil:
		o.SriovInterfaceChoice = nil

	case *GetSpecType_DefaultSriovInterface:
		o.SriovInterfaceChoice = &GlobalSpecType_DefaultSriovInterface{DefaultSriovInterface: of.DefaultSriovInterface}

	case *GetSpecType_SriovInterfaces:
		o.SriovInterfaceChoice = &GlobalSpecType_SriovInterfaces{SriovInterfaces: of.SriovInterfaces}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetSriovInterfaceChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SriovInterfaceChoice.(type) {
	case nil:
		r.SriovInterfaceChoice = nil

	case *GlobalSpecType_DefaultSriovInterface:
		r.SriovInterfaceChoice = &GetSpecType_DefaultSriovInterface{DefaultSriovInterface: of.DefaultSriovInterface}

	case *GlobalSpecType_SriovInterfaces:
		r.SriovInterfaceChoice = &GetSpecType_SriovInterfaces{SriovInterfaces: of.SriovInterfaces}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetStorageCfgChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.StorageCfgChoice.(type) {
	case nil:
		o.StorageCfgChoice = nil

	case *GetSpecType_CustomStorageConfig:
		o.StorageCfgChoice = &GlobalSpecType_CustomStorageConfig{CustomStorageConfig: of.CustomStorageConfig}

	case *GetSpecType_DefaultStorageConfig:
		o.StorageCfgChoice = &GlobalSpecType_DefaultStorageConfig{DefaultStorageConfig: of.DefaultStorageConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetStorageCfgChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.StorageCfgChoice.(type) {
	case nil:
		r.StorageCfgChoice = nil

	case *GlobalSpecType_CustomStorageConfig:
		r.StorageCfgChoice = &GetSpecType_CustomStorageConfig{CustomStorageConfig: of.CustomStorageConfig}

	case *GlobalSpecType_DefaultStorageConfig:
		r.StorageCfgChoice = &GetSpecType_DefaultStorageConfig{DefaultStorageConfig: of.DefaultStorageConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetUsbPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.UsbPolicyChoice.(type) {
	case nil:
		o.UsbPolicyChoice = nil

	case *GetSpecType_AllowAllUsb:
		o.UsbPolicyChoice = &GlobalSpecType_AllowAllUsb{AllowAllUsb: of.AllowAllUsb}

	case *GetSpecType_DenyAllUsb:
		o.UsbPolicyChoice = &GlobalSpecType_DenyAllUsb{DenyAllUsb: of.DenyAllUsb}

	case *GetSpecType_UsbPolicy:
		o.UsbPolicyChoice = &GlobalSpecType_UsbPolicy{UsbPolicy: of.UsbPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetUsbPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.UsbPolicyChoice.(type) {
	case nil:
		r.UsbPolicyChoice = nil

	case *GlobalSpecType_AllowAllUsb:
		r.UsbPolicyChoice = &GetSpecType_AllowAllUsb{AllowAllUsb: of.AllowAllUsb}

	case *GlobalSpecType_DenyAllUsb:
		r.UsbPolicyChoice = &GetSpecType_DenyAllUsb{DenyAllUsb: of.DenyAllUsb}

	case *GlobalSpecType_UsbPolicy:
		r.UsbPolicyChoice = &GetSpecType_UsbPolicy{UsbPolicy: of.UsbPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetVmChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.VmChoice.(type) {
	case nil:
		o.VmChoice = nil

	case *GetSpecType_DisableVm:
		o.VmChoice = &GlobalSpecType_DisableVm{DisableVm: of.DisableVm}

	case *GetSpecType_EnableVm:
		o.VmChoice = &GlobalSpecType_EnableVm{EnableVm: of.EnableVm}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetVmChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.VmChoice.(type) {
	case nil:
		r.VmChoice = nil

	case *GlobalSpecType_DisableVm:
		r.VmChoice = &GetSpecType_DisableVm{DisableVm: of.DisableVm}

	case *GlobalSpecType_EnableVm:
		r.VmChoice = &GetSpecType_EnableVm{EnableVm: of.EnableVm}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.GetBondChoiceFromGlobalSpecType(f)
	m.Coordinates = f.GetCoordinates()
	m.CustomDns = f.GetCustomDns()
	m.GetGpuChoiceFromGlobalSpecType(f)
	m.GetK8SClusterChoiceFromGlobalSpecType(f)
	m.GetLocalControlPlaneChoiceFromGlobalSpecType(f)
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.MasterNodeConfiguration = f.GetMasterNodeConfiguration()
	m.MasterNodes = f.GetMasterNodes()
	m.GetNetworkCfgChoiceFromGlobalSpecType(f)
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.OperatingSystemVersion = f.GetOperatingSystemVersion()

	m.GetSriovInterfaceChoiceFromGlobalSpecType(f)
	m.GetStorageCfgChoiceFromGlobalSpecType(f)
	m.GetUsbPolicyChoiceFromGlobalSpecType(f)
	m.GetVmChoiceFromGlobalSpecType(f)
	m.VolterraCertifiedHw = f.GetVolterraCertifiedHw()
	m.VolterraSoftwareVersion = f.GetVolterraSoftwareVersion()
	m.WorkerNodes = f.GetWorkerNodes()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	m1.SetBondChoiceToGlobalSpecType(f)
	f.Coordinates = m1.Coordinates
	f.CustomDns = m1.CustomDns
	m1.SetGpuChoiceToGlobalSpecType(f)
	m1.SetK8SClusterChoiceToGlobalSpecType(f)
	m1.SetLocalControlPlaneChoiceToGlobalSpecType(f)
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.MasterNodeConfiguration = m1.MasterNodeConfiguration
	f.MasterNodes = m1.MasterNodes
	m1.SetNetworkCfgChoiceToGlobalSpecType(f)
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	f.OperatingSystemVersion = m1.OperatingSystemVersion

	m1.SetSriovInterfaceChoiceToGlobalSpecType(f)
	m1.SetStorageCfgChoiceToGlobalSpecType(f)
	m1.SetUsbPolicyChoiceToGlobalSpecType(f)
	m1.SetVmChoiceToGlobalSpecType(f)
	f.VolterraCertifiedHw = m1.VolterraCertifiedHw
	f.VolterraSoftwareVersion = m1.VolterraSoftwareVersion
	f.WorkerNodes = m1.WorkerNodes
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *ReplaceSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *ReplaceSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &ReplaceSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &ReplaceSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetBondChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BondChoice.(type) {
	case nil:
		o.BondChoice = nil

	case *ReplaceSpecType_BondDeviceList:
		o.BondChoice = &GlobalSpecType_BondDeviceList{BondDeviceList: of.BondDeviceList}

	case *ReplaceSpecType_NoBondDevices:
		o.BondChoice = &GlobalSpecType_NoBondDevices{NoBondDevices: of.NoBondDevices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetBondChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BondChoice.(type) {
	case nil:
		r.BondChoice = nil

	case *GlobalSpecType_BondDeviceList:
		r.BondChoice = &ReplaceSpecType_BondDeviceList{BondDeviceList: of.BondDeviceList}

	case *GlobalSpecType_NoBondDevices:
		r.BondChoice = &ReplaceSpecType_NoBondDevices{NoBondDevices: of.NoBondDevices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetGpuChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.GpuChoice.(type) {
	case nil:
		o.GpuChoice = nil

	case *ReplaceSpecType_DisableGpu:
		o.GpuChoice = &GlobalSpecType_DisableGpu{DisableGpu: of.DisableGpu}

	case *ReplaceSpecType_EnableGpu:
		o.GpuChoice = &GlobalSpecType_EnableGpu{EnableGpu: of.EnableGpu}

	case *ReplaceSpecType_EnableVgpu:
		o.GpuChoice = &GlobalSpecType_EnableVgpu{EnableVgpu: of.EnableVgpu}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetGpuChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.GpuChoice.(type) {
	case nil:
		r.GpuChoice = nil

	case *GlobalSpecType_DisableGpu:
		r.GpuChoice = &ReplaceSpecType_DisableGpu{DisableGpu: of.DisableGpu}

	case *GlobalSpecType_EnableGpu:
		r.GpuChoice = &ReplaceSpecType_EnableGpu{EnableGpu: of.EnableGpu}

	case *GlobalSpecType_EnableVgpu:
		r.GpuChoice = &ReplaceSpecType_EnableVgpu{EnableVgpu: of.EnableVgpu}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetK8SClusterChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.K8SClusterChoice.(type) {
	case nil:
		o.K8SClusterChoice = nil

	case *ReplaceSpecType_K8SCluster:
		o.K8SClusterChoice = &GlobalSpecType_K8SCluster{K8SCluster: of.K8SCluster}

	case *ReplaceSpecType_NoK8SCluster:
		o.K8SClusterChoice = &GlobalSpecType_NoK8SCluster{NoK8SCluster: of.NoK8SCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetK8SClusterChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.K8SClusterChoice.(type) {
	case nil:
		r.K8SClusterChoice = nil

	case *GlobalSpecType_K8SCluster:
		r.K8SClusterChoice = &ReplaceSpecType_K8SCluster{K8SCluster: of.K8SCluster}

	case *GlobalSpecType_NoK8SCluster:
		r.K8SClusterChoice = &ReplaceSpecType_NoK8SCluster{NoK8SCluster: of.NoK8SCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetLocalControlPlaneChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LocalControlPlaneChoice.(type) {
	case nil:
		o.LocalControlPlaneChoice = nil

	case *ReplaceSpecType_LocalControlPlane:
		o.LocalControlPlaneChoice = &GlobalSpecType_LocalControlPlane{LocalControlPlane: of.LocalControlPlane}

	case *ReplaceSpecType_NoLocalControlPlane:
		o.LocalControlPlaneChoice = &GlobalSpecType_NoLocalControlPlane{NoLocalControlPlane: of.NoLocalControlPlane}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetLocalControlPlaneChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LocalControlPlaneChoice.(type) {
	case nil:
		r.LocalControlPlaneChoice = nil

	case *GlobalSpecType_LocalControlPlane:
		r.LocalControlPlaneChoice = &ReplaceSpecType_LocalControlPlane{LocalControlPlane: of.LocalControlPlane}

	case *GlobalSpecType_NoLocalControlPlane:
		r.LocalControlPlaneChoice = &ReplaceSpecType_NoLocalControlPlane{NoLocalControlPlane: of.NoLocalControlPlane}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *ReplaceSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *ReplaceSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetNetworkCfgChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.NetworkCfgChoice.(type) {
	case nil:
		o.NetworkCfgChoice = nil

	case *ReplaceSpecType_CustomNetworkConfig:
		o.NetworkCfgChoice = &GlobalSpecType_CustomNetworkConfig{CustomNetworkConfig: of.CustomNetworkConfig}

	case *ReplaceSpecType_DefaultNetworkConfig:
		o.NetworkCfgChoice = &GlobalSpecType_DefaultNetworkConfig{DefaultNetworkConfig: of.DefaultNetworkConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetNetworkCfgChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.NetworkCfgChoice.(type) {
	case nil:
		r.NetworkCfgChoice = nil

	case *GlobalSpecType_CustomNetworkConfig:
		r.NetworkCfgChoice = &ReplaceSpecType_CustomNetworkConfig{CustomNetworkConfig: of.CustomNetworkConfig}

	case *GlobalSpecType_DefaultNetworkConfig:
		r.NetworkCfgChoice = &ReplaceSpecType_DefaultNetworkConfig{DefaultNetworkConfig: of.DefaultNetworkConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetSriovInterfaceChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SriovInterfaceChoice.(type) {
	case nil:
		o.SriovInterfaceChoice = nil

	case *ReplaceSpecType_DefaultSriovInterface:
		o.SriovInterfaceChoice = &GlobalSpecType_DefaultSriovInterface{DefaultSriovInterface: of.DefaultSriovInterface}

	case *ReplaceSpecType_SriovInterfaces:
		o.SriovInterfaceChoice = &GlobalSpecType_SriovInterfaces{SriovInterfaces: of.SriovInterfaces}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetSriovInterfaceChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SriovInterfaceChoice.(type) {
	case nil:
		r.SriovInterfaceChoice = nil

	case *GlobalSpecType_DefaultSriovInterface:
		r.SriovInterfaceChoice = &ReplaceSpecType_DefaultSriovInterface{DefaultSriovInterface: of.DefaultSriovInterface}

	case *GlobalSpecType_SriovInterfaces:
		r.SriovInterfaceChoice = &ReplaceSpecType_SriovInterfaces{SriovInterfaces: of.SriovInterfaces}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetStorageCfgChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.StorageCfgChoice.(type) {
	case nil:
		o.StorageCfgChoice = nil

	case *ReplaceSpecType_CustomStorageConfig:
		o.StorageCfgChoice = &GlobalSpecType_CustomStorageConfig{CustomStorageConfig: of.CustomStorageConfig}

	case *ReplaceSpecType_DefaultStorageConfig:
		o.StorageCfgChoice = &GlobalSpecType_DefaultStorageConfig{DefaultStorageConfig: of.DefaultStorageConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetStorageCfgChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.StorageCfgChoice.(type) {
	case nil:
		r.StorageCfgChoice = nil

	case *GlobalSpecType_CustomStorageConfig:
		r.StorageCfgChoice = &ReplaceSpecType_CustomStorageConfig{CustomStorageConfig: of.CustomStorageConfig}

	case *GlobalSpecType_DefaultStorageConfig:
		r.StorageCfgChoice = &ReplaceSpecType_DefaultStorageConfig{DefaultStorageConfig: of.DefaultStorageConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetUsbPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.UsbPolicyChoice.(type) {
	case nil:
		o.UsbPolicyChoice = nil

	case *ReplaceSpecType_AllowAllUsb:
		o.UsbPolicyChoice = &GlobalSpecType_AllowAllUsb{AllowAllUsb: of.AllowAllUsb}

	case *ReplaceSpecType_DenyAllUsb:
		o.UsbPolicyChoice = &GlobalSpecType_DenyAllUsb{DenyAllUsb: of.DenyAllUsb}

	case *ReplaceSpecType_UsbPolicy:
		o.UsbPolicyChoice = &GlobalSpecType_UsbPolicy{UsbPolicy: of.UsbPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetUsbPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.UsbPolicyChoice.(type) {
	case nil:
		r.UsbPolicyChoice = nil

	case *GlobalSpecType_AllowAllUsb:
		r.UsbPolicyChoice = &ReplaceSpecType_AllowAllUsb{AllowAllUsb: of.AllowAllUsb}

	case *GlobalSpecType_DenyAllUsb:
		r.UsbPolicyChoice = &ReplaceSpecType_DenyAllUsb{DenyAllUsb: of.DenyAllUsb}

	case *GlobalSpecType_UsbPolicy:
		r.UsbPolicyChoice = &ReplaceSpecType_UsbPolicy{UsbPolicy: of.UsbPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetVmChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.VmChoice.(type) {
	case nil:
		o.VmChoice = nil

	case *ReplaceSpecType_DisableVm:
		o.VmChoice = &GlobalSpecType_DisableVm{DisableVm: of.DisableVm}

	case *ReplaceSpecType_EnableVm:
		o.VmChoice = &GlobalSpecType_EnableVm{EnableVm: of.EnableVm}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetVmChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.VmChoice.(type) {
	case nil:
		r.VmChoice = nil

	case *GlobalSpecType_DisableVm:
		r.VmChoice = &ReplaceSpecType_DisableVm{DisableVm: of.DisableVm}

	case *GlobalSpecType_EnableVm:
		r.VmChoice = &ReplaceSpecType_EnableVm{EnableVm: of.EnableVm}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.GetBondChoiceFromGlobalSpecType(f)
	m.Coordinates = f.GetCoordinates()
	m.CustomDns = f.GetCustomDns()
	m.GetGpuChoiceFromGlobalSpecType(f)
	m.GetK8SClusterChoiceFromGlobalSpecType(f)
	m.GetLocalControlPlaneChoiceFromGlobalSpecType(f)
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.MasterNodeConfiguration = f.GetMasterNodeConfiguration()
	m.MasterNodes = f.GetMasterNodes()
	m.GetNetworkCfgChoiceFromGlobalSpecType(f)
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.Os = f.GetOs()
	m.GetSriovInterfaceChoiceFromGlobalSpecType(f)
	m.GetStorageCfgChoiceFromGlobalSpecType(f)
	m.Sw = f.GetSw()
	m.GetUsbPolicyChoiceFromGlobalSpecType(f)
	m.GetVmChoiceFromGlobalSpecType(f)
	m.VolterraCertifiedHw = f.GetVolterraCertifiedHw()
	m.WorkerNodes = f.GetWorkerNodes()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	m1.SetBondChoiceToGlobalSpecType(f)
	f.Coordinates = m1.Coordinates
	f.CustomDns = m1.CustomDns
	m1.SetGpuChoiceToGlobalSpecType(f)
	m1.SetK8SClusterChoiceToGlobalSpecType(f)
	m1.SetLocalControlPlaneChoiceToGlobalSpecType(f)
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.MasterNodeConfiguration = m1.MasterNodeConfiguration
	f.MasterNodes = m1.MasterNodes
	m1.SetNetworkCfgChoiceToGlobalSpecType(f)
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	f.Os = m1.Os
	m1.SetSriovInterfaceChoiceToGlobalSpecType(f)
	m1.SetStorageCfgChoiceToGlobalSpecType(f)
	f.Sw = m1.Sw
	m1.SetUsbPolicyChoiceToGlobalSpecType(f)
	m1.SetVmChoiceToGlobalSpecType(f)
	f.VolterraCertifiedHw = m1.VolterraCertifiedHw
	f.WorkerNodes = m1.WorkerNodes
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

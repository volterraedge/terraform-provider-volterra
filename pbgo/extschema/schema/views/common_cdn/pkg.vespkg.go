// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package common_cdn

import (
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.views.common_cdn.CDNControllerStatus"] = CDNControllerStatusValidator()
	vr["ves.io.schema.views.common_cdn.CDNSiteStatus"] = CDNSiteStatusValidator()
	vr["ves.io.schema.views.common_cdn.GetServiceOperationReq"] = GetServiceOperationReqValidator()
	vr["ves.io.schema.views.common_cdn.GetServiceOperationRsp"] = GetServiceOperationRspValidator()
	vr["ves.io.schema.views.common_cdn.LilacCDNCachePurgeRequest"] = LilacCDNCachePurgeRequestValidator()
	vr["ves.io.schema.views.common_cdn.LilacCDNCachePurgeResponse"] = LilacCDNCachePurgeResponseValidator()
	vr["ves.io.schema.views.common_cdn.ListServiceOperationsReq"] = ListServiceOperationsReqValidator()
	vr["ves.io.schema.views.common_cdn.ListServiceOperationsRsp"] = ListServiceOperationsRspValidator()
	vr["ves.io.schema.views.common_cdn.PurgeOperationItem"] = PurgeOperationItemValidator()
	vr["ves.io.schema.views.common_cdn.ServiceOperationItem"] = ServiceOperationItemValidator()
	vr["ves.io.schema.views.common_cdn.ServiceOperationsItem"] = ServiceOperationsItemValidator()
	vr["ves.io.schema.views.common_cdn.ServiceOperationsTimeRange"] = ServiceOperationsTimeRangeValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/common_cache_rule/common_cache_rule_types.proto

package common_cache_rule

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Custom Cache Rules
//
// x-displayName: "Custom Cache Rules"
// Caching policies for CDN
type CustomCacheRule struct {
	// cdn_cache_rule
	//
	// x-displayName: "CDN Cache Rule"
	// Reference to CDN Cache Rule configuration object
	CdnCacheRules []*views.ObjectRefType `protobuf:"bytes,1,rep,name=cdn_cache_rules,json=cdnCacheRules,proto3" json:"cdn_cache_rules,omitempty"`
}

func (m *CustomCacheRule) Reset()      { *m = CustomCacheRule{} }
func (*CustomCacheRule) ProtoMessage() {}
func (*CustomCacheRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7d4979fb0ca2c7, []int{0}
}
func (m *CustomCacheRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomCacheRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomCacheRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomCacheRule.Merge(m, src)
}
func (m *CustomCacheRule) XXX_Size() int {
	return m.Size()
}
func (m *CustomCacheRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomCacheRule.DiscardUnknown(m)
}

var xxx_messageInfo_CustomCacheRule proto.InternalMessageInfo

func (m *CustomCacheRule) GetCdnCacheRules() []*views.ObjectRefType {
	if m != nil {
		return m.CdnCacheRules
	}
	return nil
}

// Default Cache Action
//
// x-displayName: "Default Cache Behaviour"
// This defines a Default Cache Action
type DefaultCacheAction struct {
	// Cache TTL Behaviour
	//
	// x-displayName: "Cache TTL Mode"
	// Configure the Cache Actions for a rule.
	//
	// Types that are valid to be assigned to CacheActions:
	//	*DefaultCacheAction_EligibleForCache
	//	*DefaultCacheAction_CacheTtlDefault
	//	*DefaultCacheAction_CacheTtlOverride
	//	*DefaultCacheAction_CacheDisabled
	CacheActions isDefaultCacheAction_CacheActions `protobuf_oneof:"cache_actions"`
}

func (m *DefaultCacheAction) Reset()      { *m = DefaultCacheAction{} }
func (*DefaultCacheAction) ProtoMessage() {}
func (*DefaultCacheAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7d4979fb0ca2c7, []int{1}
}
func (m *DefaultCacheAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultCacheAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultCacheAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultCacheAction.Merge(m, src)
}
func (m *DefaultCacheAction) XXX_Size() int {
	return m.Size()
}
func (m *DefaultCacheAction) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultCacheAction.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultCacheAction proto.InternalMessageInfo

type isDefaultCacheAction_CacheActions interface {
	isDefaultCacheAction_CacheActions()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DefaultCacheAction_EligibleForCache struct {
	EligibleForCache *DefaultCacheTTLProps `protobuf:"bytes,2,opt,name=eligible_for_cache,json=eligibleForCache,proto3,oneof" json:"eligible_for_cache,omitempty"`
}
type DefaultCacheAction_CacheTtlDefault struct {
	CacheTtlDefault string `protobuf:"bytes,3,opt,name=cache_ttl_default,json=cacheTtlDefault,proto3,oneof" json:"cache_ttl_default,omitempty"`
}
type DefaultCacheAction_CacheTtlOverride struct {
	CacheTtlOverride string `protobuf:"bytes,4,opt,name=cache_ttl_override,json=cacheTtlOverride,proto3,oneof" json:"cache_ttl_override,omitempty"`
}
type DefaultCacheAction_CacheDisabled struct {
	CacheDisabled *schema.Empty `protobuf:"bytes,5,opt,name=cache_disabled,json=cacheDisabled,proto3,oneof" json:"cache_disabled,omitempty"`
}

func (*DefaultCacheAction_EligibleForCache) isDefaultCacheAction_CacheActions() {}
func (*DefaultCacheAction_CacheTtlDefault) isDefaultCacheAction_CacheActions()  {}
func (*DefaultCacheAction_CacheTtlOverride) isDefaultCacheAction_CacheActions() {}
func (*DefaultCacheAction_CacheDisabled) isDefaultCacheAction_CacheActions()    {}

func (m *DefaultCacheAction) GetCacheActions() isDefaultCacheAction_CacheActions {
	if m != nil {
		return m.CacheActions
	}
	return nil
}

// Deprecated: Do not use.
func (m *DefaultCacheAction) GetEligibleForCache() *DefaultCacheTTLProps {
	if x, ok := m.GetCacheActions().(*DefaultCacheAction_EligibleForCache); ok {
		return x.EligibleForCache
	}
	return nil
}

func (m *DefaultCacheAction) GetCacheTtlDefault() string {
	if x, ok := m.GetCacheActions().(*DefaultCacheAction_CacheTtlDefault); ok {
		return x.CacheTtlDefault
	}
	return ""
}

func (m *DefaultCacheAction) GetCacheTtlOverride() string {
	if x, ok := m.GetCacheActions().(*DefaultCacheAction_CacheTtlOverride); ok {
		return x.CacheTtlOverride
	}
	return ""
}

func (m *DefaultCacheAction) GetCacheDisabled() *schema.Empty {
	if x, ok := m.GetCacheActions().(*DefaultCacheAction_CacheDisabled); ok {
		return x.CacheDisabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DefaultCacheAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DefaultCacheAction_EligibleForCache)(nil),
		(*DefaultCacheAction_CacheTtlDefault)(nil),
		(*DefaultCacheAction_CacheTtlOverride)(nil),
		(*DefaultCacheAction_CacheDisabled)(nil),
	}
}

// Default Cache TTL Props
//
// x-displayName: "Default Cache TTL Props"
// Default Cache TTL Enable Values
type DefaultCacheTTLProps struct {
	// Cache TTL Key
	//
	// x-displayName: "Cache TTL"
	// x-required
	// x-example: "5m, 60s, 120s, 3h, 1d, 15d"
	// Cache TTL value is used to cache the resource/content for the specified amount of time
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	CacheTtl string `protobuf:"bytes,1,opt,name=cache_ttl,json=cacheTtl,proto3" json:"cache_ttl,omitempty"`
}

func (m *DefaultCacheTTLProps) Reset()      { *m = DefaultCacheTTLProps{} }
func (*DefaultCacheTTLProps) ProtoMessage() {}
func (*DefaultCacheTTLProps) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7d4979fb0ca2c7, []int{2}
}
func (m *DefaultCacheTTLProps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultCacheTTLProps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultCacheTTLProps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultCacheTTLProps.Merge(m, src)
}
func (m *DefaultCacheTTLProps) XXX_Size() int {
	return m.Size()
}
func (m *DefaultCacheTTLProps) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultCacheTTLProps.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultCacheTTLProps proto.InternalMessageInfo

func (m *DefaultCacheTTLProps) GetCacheTtl() string {
	if m != nil {
		return m.CacheTtl
	}
	return ""
}

func init() {
	proto.RegisterType((*CustomCacheRule)(nil), "ves.io.schema.views.common_cache_rule.CustomCacheRule")
	golang_proto.RegisterType((*CustomCacheRule)(nil), "ves.io.schema.views.common_cache_rule.CustomCacheRule")
	proto.RegisterType((*DefaultCacheAction)(nil), "ves.io.schema.views.common_cache_rule.DefaultCacheAction")
	golang_proto.RegisterType((*DefaultCacheAction)(nil), "ves.io.schema.views.common_cache_rule.DefaultCacheAction")
	proto.RegisterType((*DefaultCacheTTLProps)(nil), "ves.io.schema.views.common_cache_rule.DefaultCacheTTLProps")
	golang_proto.RegisterType((*DefaultCacheTTLProps)(nil), "ves.io.schema.views.common_cache_rule.DefaultCacheTTLProps")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/common_cache_rule/common_cache_rule_types.proto", fileDescriptor_5a7d4979fb0ca2c7)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/common_cache_rule/common_cache_rule_types.proto", fileDescriptor_5a7d4979fb0ca2c7)
}

var fileDescriptor_5a7d4979fb0ca2c7 = []byte{
	// 661 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcd, 0x6e, 0xd3, 0x4e,
	0x14, 0xc5, 0x3d, 0x4d, 0xfb, 0x57, 0xeb, 0xaa, 0x5f, 0x56, 0x17, 0x69, 0xff, 0x68, 0x1a, 0x45,
	0x02, 0xb2, 0x89, 0x2d, 0xda, 0x0d, 0x2a, 0x42, 0x88, 0xb4, 0xa0, 0x0a, 0x21, 0x15, 0x45, 0x59,
	0x81, 0x90, 0xe5, 0x8f, 0x1b, 0x67, 0x60, 0x9c, 0x19, 0xcd, 0x8c, 0x03, 0x59, 0x54, 0xe2, 0x11,
	0x58, 0xb0, 0xe1, 0x09, 0x40, 0x3c, 0x02, 0xdd, 0x74, 0xc9, 0x32, 0xcb, 0x2e, 0xa9, 0xb3, 0x29,
	0xbb, 0x3e, 0x02, 0xca, 0x38, 0x69, 0xe3, 0xd6, 0xaa, 0xd8, 0xd9, 0xf7, 0xfe, 0xce, 0xf1, 0x99,
	0x3b, 0x37, 0x31, 0xf7, 0x7a, 0x20, 0x6d, 0xc2, 0x1c, 0x19, 0x74, 0x20, 0xf6, 0x9c, 0x1e, 0x81,
	0x0f, 0xd2, 0x09, 0x58, 0x1c, 0xb3, 0xae, 0x1b, 0x78, 0x41, 0x07, 0x5c, 0x91, 0x50, 0xb8, 0x59,
	0x71, 0x55, 0x9f, 0x83, 0xb4, 0xb9, 0x60, 0x8a, 0x59, 0x77, 0x33, 0x13, 0x3b, 0x33, 0xb1, 0xb5,
	0x89, 0x7d, 0x43, 0xb2, 0x59, 0x8f, 0x88, 0xea, 0x24, 0xfe, 0xa8, 0xe3, 0x44, 0x2c, 0x62, 0x8e,
	0x56, 0xfb, 0x49, 0x5b, 0xbf, 0xe9, 0x17, 0xfd, 0x94, 0xb9, 0x6e, 0x6e, 0x45, 0x8c, 0x45, 0x14,
	0xae, 0x28, 0x45, 0x62, 0x90, 0xca, 0x8b, 0xf9, 0x18, 0xa8, 0xe6, 0xb3, 0x7b, 0x9c, 0xeb, 0x54,
	0xce, 0x54, 0xb4, 0xcd, 0xff, 0xf3, 0x0c, 0xe3, 0x8a, 0xb0, 0xee, 0xa4, 0x59, 0xc9, 0x37, 0x39,
	0xa3, 0x24, 0xe8, 0xe7, 0xe4, 0xf7, 0xf2, 0x84, 0xf0, 0x14, 0xb8, 0x94, 0xc4, 0x44, 0x81, 0xc8,
	0x71, 0xb5, 0x3c, 0x27, 0x41, 0xf4, 0x48, 0x00, 0x6e, 0x81, 0x63, 0xfd, 0x36, 0x32, 0x1b, 0xf6,
	0x34, 0xbe, 0x91, 0xc7, 0xa7, 0x5b, 0x77, 0xae, 0x5d, 0x9d, 0x47, 0x49, 0xe8, 0x29, 0x28, 0x3e,
	0xdb, 0xe8, 0x4e, 0xdc, 0xfc, 0xe9, 0x77, 0x8a, 0xae, 0x7e, 0xfa, 0x84, 0x45, 0xf1, 0xb7, 0x8a,
	0x44, 0xb7, 0x4c, 0xac, 0x47, 0x84, 0x4a, 0x3c, 0xea, 0x76, 0x98, 0x54, 0xd3, 0x5c, 0x95, 0x9b,
	0x2b, 0x7b, 0x89, 0x54, 0x2c, 0xde, 0x1b, 0x2d, 0x48, 0x33, 0xa1, 0x60, 0xbd, 0x35, 0x57, 0x82,
	0x70, 0x7a, 0x63, 0x64, 0x19, 0x55, 0x4a, 0xb5, 0xc5, 0xed, 0xaa, 0x5d, 0xb4, 0x60, 0x87, 0xfe,
	0x3b, 0x08, 0x54, 0x13, 0xda, 0xad, 0x3e, 0x87, 0xc6, 0xda, 0x8f, 0xa3, 0xe5, 0xbc, 0xba, 0xb9,
	0x14, 0x84, 0xdd, 0x4b, 0x77, 0x59, 0xfd, 0x52, 0x32, 0xad, 0x7d, 0x68, 0x7b, 0x09, 0x55, 0xba,
	0xfa, 0x34, 0x18, 0x4d, 0xc3, 0xfa, 0x86, 0x4c, 0x0b, 0x28, 0x89, 0x88, 0x4f, 0xc1, 0x6d, 0x33,
	0x91, 0x39, 0x94, 0x67, 0x2a, 0xa8, 0xb6, 0xb8, 0xfd, 0xc8, 0xfe, 0xa7, 0xd5, 0xb6, 0xa7, 0x7d,
	0x5b, 0xad, 0x97, 0xaf, 0x04, 0xe3, 0xb2, 0xb1, 0x9b, 0x1e, 0x3d, 0x68, 0x02, 0xa7, 0x5e, 0x00,
	0x61, 0xc5, 0xef, 0x57, 0x32, 0x5e, 0x29, 0xea, 0xb2, 0x1e, 0x08, 0x41, 0x42, 0xa8, 0x78, 0xdd,
	0x70, 0x5c, 0x0e, 0x89, 0xf4, 0x7c, 0x0a, 0xe1, 0xf9, 0x31, 0x42, 0x65, 0x74, 0x60, 0x34, 0x57,
	0x27, 0xa1, 0x9e, 0x33, 0xa1, 0x7d, 0xad, 0x87, 0xe6, 0xda, 0x95, 0x45, 0x98, 0x7d, 0xb1, 0x5c,
	0xaa, 0xa0, 0xda, 0x42, 0xc3, 0xfc, 0xf9, 0xe7, 0xa4, 0x34, 0x27, 0x4a, 0x17, 0x33, 0x23, 0xe9,
	0x8a, 0xc6, 0x5a, 0x8a, 0x8e, 0x63, 0x59, 0xbb, 0xa6, 0x75, 0xf3, 0xe3, 0xe5, 0xd9, 0x02, 0xe9,
	0xea, 0x44, 0x7a, 0x38, 0xa6, 0xac, 0xc7, 0xe6, 0x72, 0x3e, 0x61, 0x79, 0x4e, 0x8f, 0x66, 0xfd,
	0xda, 0x68, 0x9e, 0xc5, 0x5c, 0xf5, 0x0f, 0x8c, 0xe6, 0x92, 0xa6, 0xf7, 0xc7, 0x70, 0x63, 0xc3,
	0xcc, 0x0a, 0xae, 0xa7, 0xc7, 0x2d, 0xad, 0xf9, 0x93, 0x63, 0x54, 0x1a, 0x1c, 0x23, 0xf4, 0x62,
	0x76, 0x1e, 0xad, 0xce, 0x54, 0x9f, 0x98, 0xeb, 0x45, 0xd3, 0xb3, 0xee, 0x9b, 0x0b, 0x97, 0x99,
	0xcb, 0xe8, 0x7a, 0xd4, 0xe6, 0xfc, 0x24, 0x68, 0xe3, 0x2b, 0x1a, 0x9c, 0x61, 0xe3, 0xf4, 0x0c,
	0x1b, 0x17, 0x67, 0x18, 0x7d, 0x4a, 0x31, 0xfa, 0x9e, 0x62, 0xf4, 0x2b, 0xc5, 0x68, 0x90, 0x62,
	0x74, 0x9a, 0x62, 0xf4, 0x3b, 0xc5, 0xe8, 0x3c, 0xc5, 0xc6, 0x45, 0x8a, 0xd1, 0xe7, 0x21, 0x36,
	0x4e, 0x86, 0x18, 0x0d, 0x86, 0xd8, 0x38, 0x1d, 0x62, 0xe3, 0xf5, 0x9b, 0x88, 0xf1, 0xf7, 0x91,
	0xdd, 0x63, 0x54, 0x81, 0x10, 0x9e, 0x9d, 0x48, 0x47, 0x3f, 0xb4, 0x99, 0x88, 0xeb, 0x5c, 0xb0,
	0x1e, 0x09, 0x41, 0xd4, 0x27, 0x6d, 0x87, 0xfb, 0x11, 0x73, 0xe0, 0xa3, 0x9a, 0xfc, 0x7e, 0x6f,
	0xfd, 0xdf, 0xf4, 0xff, 0xd3, 0xcb, 0xbe, 0xf3, 0x37, 0x00, 0x00, 0xff, 0xff, 0x22, 0x7d, 0xd0,
	0xfb, 0x67, 0x05, 0x00, 0x00,
}

func (this *CustomCacheRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomCacheRule)
	if !ok {
		that2, ok := that.(CustomCacheRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CdnCacheRules) != len(that1.CdnCacheRules) {
		return false
	}
	for i := range this.CdnCacheRules {
		if !this.CdnCacheRules[i].Equal(that1.CdnCacheRules[i]) {
			return false
		}
	}
	return true
}
func (this *DefaultCacheAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultCacheAction)
	if !ok {
		that2, ok := that.(DefaultCacheAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CacheActions == nil {
		if this.CacheActions != nil {
			return false
		}
	} else if this.CacheActions == nil {
		return false
	} else if !this.CacheActions.Equal(that1.CacheActions) {
		return false
	}
	return true
}
func (this *DefaultCacheAction_EligibleForCache) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultCacheAction_EligibleForCache)
	if !ok {
		that2, ok := that.(DefaultCacheAction_EligibleForCache)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EligibleForCache.Equal(that1.EligibleForCache) {
		return false
	}
	return true
}
func (this *DefaultCacheAction_CacheTtlDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultCacheAction_CacheTtlDefault)
	if !ok {
		that2, ok := that.(DefaultCacheAction_CacheTtlDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CacheTtlDefault != that1.CacheTtlDefault {
		return false
	}
	return true
}
func (this *DefaultCacheAction_CacheTtlOverride) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultCacheAction_CacheTtlOverride)
	if !ok {
		that2, ok := that.(DefaultCacheAction_CacheTtlOverride)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CacheTtlOverride != that1.CacheTtlOverride {
		return false
	}
	return true
}
func (this *DefaultCacheAction_CacheDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultCacheAction_CacheDisabled)
	if !ok {
		that2, ok := that.(DefaultCacheAction_CacheDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CacheDisabled.Equal(that1.CacheDisabled) {
		return false
	}
	return true
}
func (this *DefaultCacheTTLProps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultCacheTTLProps)
	if !ok {
		that2, ok := that.(DefaultCacheTTLProps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CacheTtl != that1.CacheTtl {
		return false
	}
	return true
}
func (this *CustomCacheRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_cache_rule.CustomCacheRule{")
	if this.CdnCacheRules != nil {
		s = append(s, "CdnCacheRules: "+fmt.Sprintf("%#v", this.CdnCacheRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DefaultCacheAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&common_cache_rule.DefaultCacheAction{")
	if this.CacheActions != nil {
		s = append(s, "CacheActions: "+fmt.Sprintf("%#v", this.CacheActions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DefaultCacheAction_EligibleForCache) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_cache_rule.DefaultCacheAction_EligibleForCache{` +
		`EligibleForCache:` + fmt.Sprintf("%#v", this.EligibleForCache) + `}`}, ", ")
	return s
}
func (this *DefaultCacheAction_CacheTtlDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_cache_rule.DefaultCacheAction_CacheTtlDefault{` +
		`CacheTtlDefault:` + fmt.Sprintf("%#v", this.CacheTtlDefault) + `}`}, ", ")
	return s
}
func (this *DefaultCacheAction_CacheTtlOverride) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_cache_rule.DefaultCacheAction_CacheTtlOverride{` +
		`CacheTtlOverride:` + fmt.Sprintf("%#v", this.CacheTtlOverride) + `}`}, ", ")
	return s
}
func (this *DefaultCacheAction_CacheDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_cache_rule.DefaultCacheAction_CacheDisabled{` +
		`CacheDisabled:` + fmt.Sprintf("%#v", this.CacheDisabled) + `}`}, ", ")
	return s
}
func (this *DefaultCacheTTLProps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_cache_rule.DefaultCacheTTLProps{")
	s = append(s, "CacheTtl: "+fmt.Sprintf("%#v", this.CacheTtl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCommonCacheRuleTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CustomCacheRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomCacheRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomCacheRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CdnCacheRules) > 0 {
		for iNdEx := len(m.CdnCacheRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CdnCacheRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonCacheRuleTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DefaultCacheAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultCacheAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultCacheAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CacheActions != nil {
		{
			size := m.CacheActions.Size()
			i -= size
			if _, err := m.CacheActions.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DefaultCacheAction_EligibleForCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultCacheAction_EligibleForCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EligibleForCache != nil {
		{
			size, err := m.EligibleForCache.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonCacheRuleTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DefaultCacheAction_CacheTtlDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultCacheAction_CacheTtlDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.CacheTtlDefault)
	copy(dAtA[i:], m.CacheTtlDefault)
	i = encodeVarintCommonCacheRuleTypes(dAtA, i, uint64(len(m.CacheTtlDefault)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *DefaultCacheAction_CacheTtlOverride) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultCacheAction_CacheTtlOverride) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.CacheTtlOverride)
	copy(dAtA[i:], m.CacheTtlOverride)
	i = encodeVarintCommonCacheRuleTypes(dAtA, i, uint64(len(m.CacheTtlOverride)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *DefaultCacheAction_CacheDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultCacheAction_CacheDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CacheDisabled != nil {
		{
			size, err := m.CacheDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonCacheRuleTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DefaultCacheTTLProps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultCacheTTLProps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultCacheTTLProps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CacheTtl) > 0 {
		i -= len(m.CacheTtl)
		copy(dAtA[i:], m.CacheTtl)
		i = encodeVarintCommonCacheRuleTypes(dAtA, i, uint64(len(m.CacheTtl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommonCacheRuleTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommonCacheRuleTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CustomCacheRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CdnCacheRules) > 0 {
		for _, e := range m.CdnCacheRules {
			l = e.Size()
			n += 1 + l + sovCommonCacheRuleTypes(uint64(l))
		}
	}
	return n
}

func (m *DefaultCacheAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CacheActions != nil {
		n += m.CacheActions.Size()
	}
	return n
}

func (m *DefaultCacheAction_EligibleForCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EligibleForCache != nil {
		l = m.EligibleForCache.Size()
		n += 1 + l + sovCommonCacheRuleTypes(uint64(l))
	}
	return n
}
func (m *DefaultCacheAction_CacheTtlDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CacheTtlDefault)
	n += 1 + l + sovCommonCacheRuleTypes(uint64(l))
	return n
}
func (m *DefaultCacheAction_CacheTtlOverride) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CacheTtlOverride)
	n += 1 + l + sovCommonCacheRuleTypes(uint64(l))
	return n
}
func (m *DefaultCacheAction_CacheDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CacheDisabled != nil {
		l = m.CacheDisabled.Size()
		n += 1 + l + sovCommonCacheRuleTypes(uint64(l))
	}
	return n
}
func (m *DefaultCacheTTLProps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CacheTtl)
	if l > 0 {
		n += 1 + l + sovCommonCacheRuleTypes(uint64(l))
	}
	return n
}

func sovCommonCacheRuleTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommonCacheRuleTypes(x uint64) (n int) {
	return sovCommonCacheRuleTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CustomCacheRule) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCdnCacheRules := "[]*ObjectRefType{"
	for _, f := range this.CdnCacheRules {
		repeatedStringForCdnCacheRules += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForCdnCacheRules += "}"
	s := strings.Join([]string{`&CustomCacheRule{`,
		`CdnCacheRules:` + repeatedStringForCdnCacheRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *DefaultCacheAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultCacheAction{`,
		`CacheActions:` + fmt.Sprintf("%v", this.CacheActions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DefaultCacheAction_EligibleForCache) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultCacheAction_EligibleForCache{`,
		`EligibleForCache:` + strings.Replace(fmt.Sprintf("%v", this.EligibleForCache), "DefaultCacheTTLProps", "DefaultCacheTTLProps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DefaultCacheAction_CacheTtlDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultCacheAction_CacheTtlDefault{`,
		`CacheTtlDefault:` + fmt.Sprintf("%v", this.CacheTtlDefault) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DefaultCacheAction_CacheTtlOverride) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultCacheAction_CacheTtlOverride{`,
		`CacheTtlOverride:` + fmt.Sprintf("%v", this.CacheTtlOverride) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DefaultCacheAction_CacheDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultCacheAction_CacheDisabled{`,
		`CacheDisabled:` + strings.Replace(fmt.Sprintf("%v", this.CacheDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DefaultCacheTTLProps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultCacheTTLProps{`,
		`CacheTtl:` + fmt.Sprintf("%v", this.CacheTtl) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCommonCacheRuleTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CustomCacheRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonCacheRuleTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomCacheRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomCacheRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdnCacheRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonCacheRuleTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CdnCacheRules = append(m.CdnCacheRules, &views.ObjectRefType{})
			if err := m.CdnCacheRules[len(m.CdnCacheRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonCacheRuleTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultCacheAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonCacheRuleTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultCacheAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultCacheAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibleForCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonCacheRuleTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DefaultCacheTTLProps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CacheActions = &DefaultCacheAction_EligibleForCache{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTtlDefault", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonCacheRuleTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheActions = &DefaultCacheAction_CacheTtlDefault{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTtlOverride", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonCacheRuleTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheActions = &DefaultCacheAction_CacheTtlOverride{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonCacheRuleTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CacheActions = &DefaultCacheAction_CacheDisabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonCacheRuleTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultCacheTTLProps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonCacheRuleTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultCacheTTLProps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultCacheTTLProps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTtl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonCacheRuleTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheTtl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonCacheRuleTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonCacheRuleTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommonCacheRuleTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommonCacheRuleTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommonCacheRuleTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommonCacheRuleTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommonCacheRuleTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommonCacheRuleTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommonCacheRuleTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommonCacheRuleTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommonCacheRuleTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommonCacheRuleTypes = fmt.Errorf("proto: unexpected end of group")
)

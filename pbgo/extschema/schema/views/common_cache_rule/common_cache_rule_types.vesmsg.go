// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package common_cache_rule

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CustomCacheRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CustomCacheRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CustomCacheRule) DeepCopy() *CustomCacheRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CustomCacheRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CustomCacheRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CustomCacheRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CustomCacheRuleValidator().Validate(ctx, m, opts...)
}

func (m *CustomCacheRule) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCdnCacheRulesDRefInfo()

}

func (m *CustomCacheRule) GetCdnCacheRulesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetCdnCacheRules()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("CustomCacheRule.cdn_cache_rules[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cdn_cache_rule.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "cdn_cache_rule.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "cdn_cache_rules",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetCdnCacheRulesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CustomCacheRule) GetCdnCacheRulesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cdn_cache_rule.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cdn_cache_rule")
	}
	for i, vref := range m.GetCdnCacheRules() {
		if vref == nil {
			return nil, fmt.Errorf("CustomCacheRule.cdn_cache_rules[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cdn_cache_rule.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateCustomCacheRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCustomCacheRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CustomCacheRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CustomCacheRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cdn_cache_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("cdn_cache_rules"))
		for idx, item := range m.GetCdnCacheRules() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCustomCacheRuleValidator = func() *ValidateCustomCacheRule {
	v := &ValidateCustomCacheRule{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["cdn_cache_rules"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func CustomCacheRuleValidator() db.Validator {
	return DefaultCustomCacheRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *DefaultCacheAction) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DefaultCacheAction) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DefaultCacheAction) DeepCopy() *DefaultCacheAction {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DefaultCacheAction{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DefaultCacheAction) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DefaultCacheAction) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DefaultCacheActionValidator().Validate(ctx, m, opts...)
}

type ValidateDefaultCacheAction struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDefaultCacheAction) CacheActionsCacheTtlDefaultValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_CacheTtlDefault, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cache_ttl_default")
	}
	return oValidatorFn_CacheTtlDefault, nil
}
func (v *ValidateDefaultCacheAction) CacheActionsCacheTtlOverrideValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_CacheTtlOverride, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cache_ttl_override")
	}
	return oValidatorFn_CacheTtlOverride, nil
}

func (v *ValidateDefaultCacheAction) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DefaultCacheAction)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DefaultCacheAction got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetCacheActions().(type) {
	case *DefaultCacheAction_EligibleForCache:
		if fv, exists := v.FldValidators["cache_actions.eligible_for_cache"]; exists {
			val := m.GetCacheActions().(*DefaultCacheAction_EligibleForCache).EligibleForCache
			vOpts := append(opts,
				db.WithValidateField("cache_actions"),
				db.WithValidateField("eligible_for_cache"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DefaultCacheAction_CacheTtlDefault:
		if fv, exists := v.FldValidators["cache_actions.cache_ttl_default"]; exists {
			val := m.GetCacheActions().(*DefaultCacheAction_CacheTtlDefault).CacheTtlDefault
			vOpts := append(opts,
				db.WithValidateField("cache_actions"),
				db.WithValidateField("cache_ttl_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DefaultCacheAction_CacheTtlOverride:
		if fv, exists := v.FldValidators["cache_actions.cache_ttl_override"]; exists {
			val := m.GetCacheActions().(*DefaultCacheAction_CacheTtlOverride).CacheTtlOverride
			vOpts := append(opts,
				db.WithValidateField("cache_actions"),
				db.WithValidateField("cache_ttl_override"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DefaultCacheAction_CacheDisabled:
		if fv, exists := v.FldValidators["cache_actions.cache_disabled"]; exists {
			val := m.GetCacheActions().(*DefaultCacheAction_CacheDisabled).CacheDisabled
			vOpts := append(opts,
				db.WithValidateField("cache_actions"),
				db.WithValidateField("cache_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDefaultCacheActionValidator = func() *ValidateDefaultCacheAction {
	v := &ValidateDefaultCacheAction{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCacheActionsCacheTtlDefault := v.CacheActionsCacheTtlDefaultValidationRuleHandler
	rulesCacheActionsCacheTtlDefault := map[string]string{
		"ves.io.schema.rules.string.time_interval": "true",
	}
	vFnMap["cache_actions.cache_ttl_default"], err = vrhCacheActionsCacheTtlDefault(rulesCacheActionsCacheTtlDefault)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field DefaultCacheAction.cache_actions_cache_ttl_default: %s", err)
		panic(errMsg)
	}
	vrhCacheActionsCacheTtlOverride := v.CacheActionsCacheTtlOverrideValidationRuleHandler
	rulesCacheActionsCacheTtlOverride := map[string]string{
		"ves.io.schema.rules.string.time_interval": "true",
	}
	vFnMap["cache_actions.cache_ttl_override"], err = vrhCacheActionsCacheTtlOverride(rulesCacheActionsCacheTtlOverride)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field DefaultCacheAction.cache_actions_cache_ttl_override: %s", err)
		panic(errMsg)
	}

	v.FldValidators["cache_actions.cache_ttl_default"] = vFnMap["cache_actions.cache_ttl_default"]
	v.FldValidators["cache_actions.cache_ttl_override"] = vFnMap["cache_actions.cache_ttl_override"]

	v.FldValidators["cache_actions.eligible_for_cache"] = DefaultCacheTTLPropsValidator().Validate

	return v
}()

func DefaultCacheActionValidator() db.Validator {
	return DefaultDefaultCacheActionValidator
}

// augmented methods on protoc/std generated struct

func (m *DefaultCacheTTLProps) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DefaultCacheTTLProps) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DefaultCacheTTLProps) DeepCopy() *DefaultCacheTTLProps {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DefaultCacheTTLProps{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DefaultCacheTTLProps) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DefaultCacheTTLProps) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DefaultCacheTTLPropsValidator().Validate(ctx, m, opts...)
}

type ValidateDefaultCacheTTLProps struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDefaultCacheTTLProps) CacheTtlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cache_ttl")
	}

	return validatorFn, nil
}

func (v *ValidateDefaultCacheTTLProps) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DefaultCacheTTLProps)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DefaultCacheTTLProps got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cache_ttl"]; exists {

		vOpts := append(opts, db.WithValidateField("cache_ttl"))
		if err := fv(ctx, m.GetCacheTtl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDefaultCacheTTLPropsValidator = func() *ValidateDefaultCacheTTLProps {
	v := &ValidateDefaultCacheTTLProps{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCacheTtl := v.CacheTtlValidationRuleHandler
	rulesCacheTtl := map[string]string{
		"ves.io.schema.rules.message.required":     "true",
		"ves.io.schema.rules.string.time_interval": "true",
	}
	vFn, err = vrhCacheTtl(rulesCacheTtl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DefaultCacheTTLProps.cache_ttl: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cache_ttl"] = vFn

	return v
}()

func DefaultCacheTTLPropsValidator() db.Validator {
	return DefaultDefaultCacheTTLPropsValidator
}

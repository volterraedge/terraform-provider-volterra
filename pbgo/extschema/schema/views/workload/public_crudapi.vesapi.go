//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package workload

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	google_protobuf "github.com/gogo/protobuf/types"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	multierror "github.com/hashicorp/go-multierror"
	"go.uber.org/zap"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/client/configapi"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/flags"
	"gopkg.volterra.us/stdlib/log"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

const (
	// CreateRequestFQN is the fully-qualified-name of the CreateRequest message
	CreateRequestFQN = "ves.io.schema.views.workload.CreateRequest"
	// CreateResponseFQN is the fully-qualified-name of the CreateResponse message
	CreateResponseFQN = "ves.io.schema.views.workload.CreateResponse"
	// ReplaceRequestFQN is the fully-qualified-name of the ReplaceRequest message
	ReplaceRequestFQN = "ves.io.schema.views.workload.ReplaceRequest"
	// ReplaceResponseFQN is the fully-qualified-name of the ReplaceResponse message
	ReplaceResponseFQN = "ves.io.schema.views.workload.ReplaceResponse"
	// GetRequestFQN is the fully-qualified-name of the GetRequest message
	GetRequestFQN = "ves.io.schema.views.workload.GetRequest"
	// GetResponseFQN is the fully-qualified-name of the GetResponse message
	GetResponseFQN = "ves.io.schema.views.workload.GetResponse"
	// ListRequestFQN is the fully-qualified-name of the ListRequest message
	ListRequestFQN = "ves.io.schema.views.workload.ListRequest"
	// ListResponseFQN is the fully-qualified-name of the ListResponse message
	ListResponseFQN = "ves.io.schema.views.workload.ListResponse"
	// DeleteRequestFQN is the fully-qualified-name of the DeleteRequest message
	DeleteRequestFQN = "ves.io.schema.views.workload.DeleteRequest"
	// DeleteResponseFQN is the fully-qualified-name of the DeleteResponse message
	DeleteResponseFQN = "ves.io.schema.views.workload.DeleteResponse"
)

// CLIENT side
func NewCreateRequest(e db.Entry) (*CreateRequest, error) {
	r := &CreateRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewReplaceRequest(e db.Entry) (*ReplaceRequest, error) {
	r := &ReplaceRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewGetRequest(key string, opts ...server.CRUDCallOpt) (*GetRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	var rspFmt GetResponseFormatCode
	switch ccOpts.ResponseFormat {
	case server.DefaultForm:
		rspFmt = GET_RSP_FORMAT_DEFAULT
	case server.CreateRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_CREATE
	case server.ReplaceRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_REPLACE
	case server.StatusForm:
		rspFmt = GET_RSP_FORMAT_STATUS
	case server.GetSpecForm:
		rspFmt = GET_RSP_FORMAT_READ
	default:
		return nil, fmt.Errorf("Unsupported Response Format %s", ccOpts.ResponseFormat)
	}
	return &GetRequest{Namespace: strs[0], Name: strs[1], ResponseFormat: rspFmt}, nil
}
func (m *GetRequest) ResponseFormatString() string {
	return m.GetResponseFormat().String()
}

func NewListRequest(opts ...server.CRUDCallOpt) *ListRequest {
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	return &ListRequest{Namespace: ccOpts.Namespace}
}

func NewDeleteRequest(key string) (*DeleteRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	return &DeleteRequest{Namespace: strs[0], Name: strs[1]}, nil
}

// GRPC Client
type crudAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient APIClient
}

func (c *crudAPIGrpcClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *CreateRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*CreateRequest)
		if !ok {
			return nil, fmt.Errorf("%T is not *CreateRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Create")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return nil, err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Create(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	obj := NewDBObject(nil)
	rsp.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rsp, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIGrpcClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *ReplaceRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*ReplaceRequest)
		if !ok {
			return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewReplaceRequest(e)
		if err != nil {
			return errors.Wrap(err, "Replace")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)
	req.ResourceVersion = cco.ResourceVersion

	rsp, err := c.grpcClient.Replace(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return nil

}

func (c *crudAPIGrpcClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Get(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIGrpcClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIGrpcClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}
	req.ReportFields = cco.ReportFields
	req.ReportStatusFields = cco.ReportStatusFields
	rsp, err := c.grpcClient.List(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIGrpcClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	req, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Delete(ctx, req, cco.GrpcCallOpts...)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func NewCRUDAPIGrpcClient(cc *grpc.ClientConn) server.CRUDClient {
	ccl := &crudAPIGrpcClient{cc, NewAPIClient(cc)}
	return ccl
}

// REST Client
type crudAPIRestClient struct {
	baseURL string
	client  http.Client
}

func (c *crudAPIRestClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *CreateRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*CreateRequest)
		if !ok {
			return nil, fmt.Errorf("%T is not *CreateRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new create request")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return nil, err
			}
		}
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/workloads", c.baseURL, req.Metadata.GetNamespace())
	jsn, err := req.ToJSON()
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Create")
	}

	hReq, err := http.NewRequest("POST", url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	client.AddHdrsToReq(cco.Headers, hReq)
	hReq.Header.Set("Content-Type", "application/json")

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient create")
	}

	rspo := &CreateResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	configapi.TranscribeCall(ctx, req, rspo)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}

	obj := NewDBObject(nil)
	rspo.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rspo, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIRestClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var rReq *ReplaceRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*ReplaceRequest)
		if !ok {
			return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
		}
		rReq = r
	} else {
		r, err := NewReplaceRequest(e)
		if err != nil {
			return errors.Wrap(err, "Creating new replace request")
		}
		rReq = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, rReq); err != nil {
				return err
			}
		}
	}

	got := 0
	if e != nil {
		got++
	}
	if cco.RequestProto != nil {
		got++
	}
	if cco.ReplaceJSONReq != "" {
		got++
	}
	if got != 1 {
		return fmt.Errorf("Only one of entry, WithRequestProto() or WithReplaceJSONRequest() should be specified")
	}
	if e == nil && cco.RequestProto == nil && cco.ReplaceJSONReq == "" {
		return fmt.Errorf("Neither entry nor WithRequestProto() nor WithReplaceJSONRequest() specified")
	}

	var jsn, namespace, name string
	var err error
	_ = namespace
	if e != nil || cco.RequestProto != nil {
		rReq.ResourceVersion = cco.ResourceVersion
		jsn, err = rReq.ToJSON()
		if err != nil {
			return errors.Wrap(err, "RestClient Replace")
		}
		namespace = rReq.GetMetadata().GetNamespace()
		name = rReq.GetMetadata().GetName()
	} else {
		jsn = cco.ReplaceJSONReq
		reqMap := make(map[string]interface{})
		if err := json.Unmarshal([]byte(jsn), &reqMap); err != nil {
			return errors.Wrapf(err, "Unmarshaling ReplaceJSONReq")
		}
		md, ok := reqMap["metadata"].(map[string]interface{})
		if !ok {
			return fmt.Errorf("ReplaceJSONReq does not have 'metadata'")
		}
		if val, ok := md["namespace"].(string); ok {
			namespace = val
		}
		if val, ok := md["name"].(string); ok {
			name = val
		}
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/workloads/%s", c.baseURL, namespace, name)

	hReq, err := http.NewRequest(http.MethodPut, url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return errors.Wrap(err, "RestClient replace")
	}
	hReq = hReq.WithContext(ctx)
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return fmt.Errorf("Unsuccessful PUT at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}

	if _, err := ioutil.ReadAll(rsp.Body); err != nil {
		return errors.Wrap(err, "RestClient replace")
	}

	configapi.TranscribeCall(ctx, rReq, nil)
	return nil

}

func (c *crudAPIRestClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/workloads/%s", c.baseURL, req.Namespace, req.Name)
	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	q.Add("response_format", fmt.Sprintf("%d", req.ResponseFormat))
	hReq.URL.RawQuery += q.Encode()

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful GET at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Get")
	}

	rspo := &GetResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rspo.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIRestClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIRestClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIRestClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIRestClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)
	_ = req
	url := fmt.Sprintf("%s/public/namespaces/%s/workloads", c.baseURL, req.Namespace)

	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		q.Add("label_filter", cco.LabelFilter[0])
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	for _, fName := range cco.ReportFields {
		q.Add("report_fields", fName)
	}
	for _, fName := range cco.ReportStatusFields {
		q.Add("report_status_fields", fName)
	}

	hReq.URL.RawQuery += q.Encode()
	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful List at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient List")
	}

	rspo := &ListResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIRestClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	dReq, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/workloads/%s", c.baseURL, dReq.Namespace, dReq.Name)
	hReq, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return fmt.Errorf("Unsuccessful DELETE at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}

	_, err = ioutil.ReadAll(rsp.Body)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}
	configapi.TranscribeCall(ctx, dReq, nil)

	return nil

}

func NewCRUDAPIRestClient(baseURL string, cl http.Client) server.CRUDClient {
	crcl := &crudAPIRestClient{baseURL, cl}
	return crcl
}

// INPROC Client (satisfying APIClient interface)
type APIInprocClient struct {
	crudCl *crudAPIInprocClient
}

func (c *APIInprocClient) Create(ctx context.Context, req *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.views.workload.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.views.workload")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	rsp, err := oah.Create(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) Replace(ctx context.Context, req *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.views.workload.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.views.workload")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	if rsp, err := oah.Replace(ctx, req); err != nil {
		return rsp, err
	}
	return NewObjectReplaceRsp(nil)
}

func (c *APIInprocClient) Get(ctx context.Context, req *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.views.workload.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.views.workload")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.Get(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) List(ctx context.Context, req *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.views.workload.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.views.workload")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.List(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) Delete(ctx context.Context, req *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.views.workload.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.views.workload")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.Delete(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func NewAPIInprocClient(svc svcfw.Service) APIClient {
	crudCl := newCRUDAPIInprocClient(svc)
	return &APIInprocClient{crudCl}
}

// INPROC CRUD Client (satisfying server.CRUDClient interface)
type crudAPIInprocClient struct {
	svc svcfw.Service
}

func (c *crudAPIInprocClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	ah := c.svc.GetAPIHandler("ves.io.schema.views.workload.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.views.workload")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewCreateRequest(e)
	if err != nil {
		return nil, errors.Wrap(err, "Creating new create request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return nil, err
		}
	}

	rsp, err := oah.Create(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	if err != nil {
		return nil, err
	}
	obj := NewDBObject(nil)
	rsp.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rsp, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIInprocClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	ah := c.svc.GetAPIHandler("ves.io.schema.views.workload.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return fmt.Errorf("No CRUD Server for ves.io.schema.views.workload")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewReplaceRequest(e)
	if err != nil {
		return errors.Wrap(err, "Creating new replace request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return err
		}
	}

	req.ResourceVersion = cco.ResourceVersion

	rsp, err := oah.Replace(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func (c *crudAPIInprocClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.views.workload.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.views.workload")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	rsp, err := oah.Get(ctx, req)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIInprocClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIInprocClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIInprocClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIInprocClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIInprocClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.views.workload.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.views.workload")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req := NewListRequest(opts...)
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	rsp, err := oah.List(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, err
}

func (c *crudAPIInprocClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIInprocClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	ah := c.svc.GetAPIHandler("ves.io.schema.views.workload.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return fmt.Errorf("No CRUD Server for ves.io.schema.views.workload")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	rsp, err := oah.Delete(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func newCRUDAPIInprocClient(svc svcfw.Service) *crudAPIInprocClient {
	crcl := &crudAPIInprocClient{svc: svc}
	return crcl
}

func NewCRUDAPIInprocClient(svc svcfw.Service) server.CRUDClient {
	return newCRUDAPIInprocClient(svc)
}

// SERVER side
type APISrv struct {
	oType   string
	tblName string
	sf      svcfw.Service

	opts *server.CrudServerOpts
	// derived from opts
	apiWrapper *server.DBAPIWrapper

	// resource handler function pointers
}

func (s *APISrv) validateTransport(ctx context.Context) error {
	if s.sf.IsTransportNotSupported("ves.io.schema.views.workload.API", server.TransportFromContext(ctx)) {
		userMsg := fmt.Sprintf("ves.io.schema.views.workload.API not allowed in transport '%s'", server.TransportFromContext(ctx))
		err := svcfw.NewPermissionDeniedError(userMsg, fmt.Errorf(userMsg))
		return server.GRPCStatusFromError(err).Err()
	}
	return nil
}

func (s *APISrv) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.views.workload.API.Create"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.views.workload.API.Create"), zap.Error(err))
			}
		}
	}
	reqMsgFQN := "ves.io.schema.views.workload.CreateRequest"
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, reqMsgFQN, req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	obj := NewDBObject(nil)
	req.ToObject(obj)
	if conv, exists := s.sf.Config().MsgToObjConverters[reqMsgFQN]; exists {
		if err := conv(req, obj); err != nil {
			return nil, err
		}
	}
	obj.SystemMetadata = &ves_io_schema.SystemObjectMetaType{}
	rsrcReq := &server.ResourceCreateRequest{Entry: obj}
	rsrcRsp, err := s.opts.RsrcHandler.CreateFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "CreateResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectCreateRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "CreateResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.views.workload.CreateResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			return nil, err
		}
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.views.workload.API.CreateResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Replace(ctx context.Context, req *ReplaceRequest) (*ReplaceResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if req.Spec == nil {
		err := fmt.Errorf("Nil spec in Replace Request")
		return nil, svcfw.NewInvalidInputError(err.Error(), err)
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.views.workload.API.Replace"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.views.workload.API.Replace"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.views.workload.API.ReplaceRequest", req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	rsrcReq := &server.ResourceReplaceRequest{RequestMsg: req}
	rsrcRsp, err := s.opts.RsrcHandler.ReplaceFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectReplaceRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.views.workload.API.ReplaceResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.views.workload.API.Get"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	tenant := server.TenantFromContext(ctx)
	rsrcReq := &server.ResourceGetRequest{IsPublic: true, Tenant: tenant, Namespace: req.GetNamespace(), Name: req.GetName()}
	switch req.ResponseFormat {
	case GET_RSP_FORMAT_FOR_CREATE:
		rsrcReq.RspInCreateForm = true

	case GET_RSP_FORMAT_FOR_REPLACE:
		rsrcReq.RspInReplaceForm = true

	case GET_RSP_FORMAT_READ:
		rsrcReq.RspInReadForm = true

	case GET_RSP_FORMAT_STATUS:
		rsrcReq.RspInStatusForm = true

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		rsrcReq.RspInReferringObjectsForm = true

	}

	rsrcRsp, err := s.opts.RsrcHandler.GetFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectGetRsp(ctx, s.sf, req, rsrcRsp)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.views.workload.GetResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (s *APISrv) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.views.workload.API.List"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	var merr *multierror.Error
	rsrcReq := &server.ResourceListRequest{
		Namespace:   req.Namespace,
		LabelFilter: req.LabelFilter,
		RspStreamed: false,
	}
	if len(req.ReportStatusFields) > 0 {
		rsrcReq.ReportStatusFields = &req.ReportStatusFields
	}
	rsrcRsp, err := s.opts.RsrcHandler.ListFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResource"))
	}
	rsp, err := NewListResponse(ctx, req, s.sf, rsrcRsp)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResponse allocation failed"))
	}
	if merr != nil {
		if rsp == nil {
			return nil, merr
		}
		rsp.Errors = append(rsp.Errors, &ves_io_schema.ErrorType{
			Code:    ves_io_schema.EINTERNAL,
			Message: merr.Error(),
		})

	}
	return rsp, nil
}

func (s *APISrv) Delete(ctx context.Context, req *DeleteRequest) (*google_protobuf.Empty, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.views.workload.API.Delete"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.views.workload.API.Delete"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.views.workload.API.DeleteRequest", req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	tenant := server.TenantFromContext(ctx)
	key := fmt.Sprintf("%s/%s/%s", tenant, req.GetNamespace(), req.GetName())
	rsrcReq := &server.ResourceDeleteRequest{Key: key}
	rsrcReq.FailIfReferred = req.FailIfReferred
	_, err := s.opts.RsrcHandler.DeleteFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "DeleteResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	return &google_protobuf.Empty{}, nil
}

// Assert that APISrv implements the generated gRPC APIServer interface
var _ APIServer = &APISrv{}

func NewCRUDAPIServer(oType string, tblName string, sf svcfw.Service, opts ...server.CRUDServerOpt) (server.APIHandler, string) {
	// convert ves.io.examplesvc.objectone.Object to
	//         ves.io.examplesvc.objectone.API
	sl := strings.Split(oType, ".")
	csOpts := server.NewCRUDServerOpts()
	for _, o := range opts {
		o(csOpts)
	}
	wrapper := server.NewDBAPIWrapper(csOpts.APIWrapperOpts...)
	s := &APISrv{
		oType:      oType,
		tblName:    tblName,
		sf:         sf,
		opts:       csOpts,
		apiWrapper: wrapper,
	}
	return s, fmt.Sprintf("%s.API", strings.Join(sl[:len(sl)-1], "."))
}

func (r *Object) Key() string {
	m := r.GetMetadata()
	if m == nil {
		return ""
	}
	return strings.Join([]string{m.Namespace, m.Name}, "/")
}

func (r *Object) Uid() string {
	return r.SystemMetadata.Uid
}

func (r *ListResponse) GetKeys() []string {
	var ret []string
	for _, i := range r.Items {
		ret = append(ret, i.Namespace+"/"+i.Name)
	}
	return ret
}

// Implement server.SROListItem interface on ListResponseItem
func (l *ListResponseItem) GetObjUid() string {
	return l.Uid
}

func (l *ListResponseItem) GetObjTenant() string {
	return l.Tenant
}

func (l *ListResponseItem) GetObjNamespace() string {
	return l.Namespace
}

func (l *ListResponseItem) GetObjName() string {
	return l.Name
}

func (l *ListResponseItem) GetObjLabels() map[string]string {
	return l.Labels
}

func NewObjectCreateRsp(e db.Entry) (*CreateResponse, error) {
	switch e.(type) {
	case nil:
		return nil, nil
	case *DBObject:
		rsp := &CreateResponse{}
		rsp.FromObject(e)
		return rsp, nil
	}
	return nil, fmt.Errorf("Entry not of type *DBObject in NewObjectCreateRsp")
}

func NewObjectReplaceRsp(e db.Entry) (*ReplaceResponse, error) {
	return &ReplaceResponse{}, nil
}

func NewObjectGetRsp(ctx context.Context, sf svcfw.Service, req *GetRequest, rsrcRsp *server.ResourceGetResponse) (*GetResponse, error) {
	rsp := &GetResponse{}
	e := rsrcRsp.Entry
	if e == nil {
		return rsp, nil
	}
	o, ok := e.(*DBObject)
	if !ok {
		return nil, fmt.Errorf("entry not of type *DBObject in NewObjectGetRsp")
	}

	rsp.ResourceVersion = rsrcRsp.ResourceVersion
	var merr *multierror.Error
	buildReadForm := func() {
		rsp.Metadata = &ves_io_schema.ObjectGetMetaType{}
		rsp.Metadata.FromObjectMetaType(o.Metadata)
		rsp.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
		rsp.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)
		rsp.Spec = &GetSpecType{}
		rsp.Spec.FromGlobalSpecType(o.Spec.GcSpec)

	}
	_ = buildReadForm
	buildStatusForm := func() {
		for _, statusEnt := range rsrcRsp.BackRefs {
			statusObj, ok := statusEnt.ToStore().(*StatusObject)
			if !ok {
				merr = multierror.Append(merr, fmt.Errorf("%T is not *StatusObject", statusEnt))
				continue
			}
			rsp.Status = append(rsp.Status, statusObj)
		}

	}
	_ = buildStatusForm
	buildReferringObjectsForm := func() {
		for _, br := range rsrcRsp.ReferringObjects {
			rsp.ReferringObjects = append(rsp.ReferringObjects, &ves_io_schema.ObjectRefType{
				Kind:      db.KindForEntryType(br.Type),
				Uid:       br.UID,
				Tenant:    br.Tenant,
				Namespace: br.Namespace,
				Name:      br.Name,
			})
		}

	}
	_ = buildReferringObjectsForm

	switch req.ResponseFormat {

	case GET_RSP_FORMAT_FOR_CREATE:
		createReq, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building CreateRequest from entry")
		}
		// Name has to be specified for a new create
		createReq.Metadata.Name = ""
		rsp.CreateForm = createReq

	case GET_RSP_FORMAT_FOR_REPLACE:
		replaceReq, err := NewReplaceRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building ReplaceRequest from entry")
		}
		rsp.ReplaceForm = replaceReq

	case GET_RSP_FORMAT_STATUS:
		buildStatusForm()

	case GET_RSP_FORMAT_READ:
		buildReadForm()

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		buildReferringObjectsForm()

	default:
		noDBForm, _ := flags.GetEnvGetRspNoDBForm()
		if !noDBForm {
			rsp.Object = o.Object
			sf.Logger().Alert(svcfw.GetResponseInDBForm,
				log.MinorAlert,
				zap.String("user", server.UserFromContext(ctx)),
				zap.String("useragent", server.UseragentStrFromContext(ctx)),
				zap.String("operation", "Get"),
			)
			buildReadForm()

		} else {
			buildReadForm()

		}
		buildStatusForm()
	}

	return rsp, errors.ErrOrNil(merr)
}

func NewListResponse(ctx context.Context, req *ListRequest, sf svcfw.Service, rsrcRsp *server.ResourceListResponse) (*ListResponse, error) {
	if req == nil {
		return nil, fmt.Errorf("Nil ListRequest")
	}
	if rsrcRsp == nil {
		return nil, fmt.Errorf("Nil ResourceResponse")
	}

	errStrs := []string{}
	resp := &ListResponse{}
	resp.Items = []*ListResponseItem{}

	for _, rsrcItem := range rsrcRsp.Items {
		if rsrcItem == nil {
			errStrs = append(errStrs, fmt.Sprintf("Nil ResourceListResponseItem"))
			continue
		}

		e := rsrcItem.Entry
		o, ok := e.(*DBObject)
		if !ok {
			resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
				Code:    ves_io_schema.EINTERNAL,
				Message: fmt.Sprintf("Entry %T not of type *DBObject in NewListResponse", e),
			})

			continue
		}
		item := &ListResponseItem{
			Tenant:    o.GetSystemMetadata().GetTenant(),
			Namespace: o.GetMetadata().GetNamespace(),
			Name:      o.GetMetadata().GetName(),
			Uid:       o.GetMetadata().GetUid(),
			OwnerView: o.GetSystemMetadata().GetOwnerView(),
			Labels:    o.GetMetadata().GetLabels(),
		}

		item.Description = o.GetMetadata().GetDescription()
		item.Annotations = o.GetMetadata().GetAnnotations()
		item.Disabled = o.GetMetadata().GetDisable()

		if len(req.ReportFields) > 0 {
			noDBForm, _ := flags.GetEnvGetRspNoDBForm()
			if !noDBForm {
				item.Object = o.Object
				sf.Logger().Alert(svcfw.GetResponseInDBForm,
					log.MinorAlert,
					zap.String("user", server.UserFromContext(ctx)),
					zap.String("useragent", server.UseragentStrFromContext(ctx)),
					zap.String("operation", "List"),
				)
			}

			item.Metadata = &ves_io_schema.ObjectGetMetaType{}
			item.Metadata.FromObjectMetaType(o.Metadata)
			item.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
			item.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)

			if o.Object != nil && o.Object.GetSpec().GetGcSpec() != nil {
				msgFQN := "ves.io.schema.views.workload.GetResponse"
				if conv, exists := sf.Config().ObjToMsgConverters[msgFQN]; exists {
					getSpec := &GetSpecType{}
					getSpec.FromGlobalSpecType(o.Spec.GcSpec)
					getRsp := &GetResponse{Spec: getSpec}
					if err := conv(o, getRsp); err != nil {
						resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
							Code:    ves_io_schema.EINTERNAL,
							Message: fmt.Sprintf("Converting entry to getResponse: %s", err),
						})

						continue
					}
					item.GetSpec = getRsp.Spec
				} else {
					item.GetSpec = &GetSpecType{}
					item.GetSpec.FromGlobalSpecType(o.Spec.GcSpec)
				}
			}

		}

		if len(req.ReportStatusFields) > 0 {
			for _, sroStatus := range rsrcItem.StatusSet {
				statusDBO, ok := sroStatus.(*DBStatusObject)
				if !ok {
					resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
						Code:    ves_io_schema.EINTERNAL,
						Message: fmt.Sprintf("sro.Status %T is not of type *DBStatusObject in NewListResponse", sroStatus),
					})

					continue
				}
				item.StatusSet = append(item.StatusSet, statusDBO.StatusObject)
			}
		}

		resp.Items = append(resp.Items, item)
	}
	return resp, nil
}

func RegisterGwAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterAPIHandlerClient(ctx, mux, NewAPIInprocClient(s))
}

var APISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Workload",
        "description": "Workload is used to configure and deploy a workload in Virtual Kubernetes. A workload can be\neither a service or stateful service or a batch job. Services and jobs can be deployed on\nregional edges or customer sites. Services can be exposed in-cluster or by L7 or L4\nload balancer on Internet or on sites using an advertise policy.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": null,
    "paths": {
        "/public/namespaces/{metadata.namespace}/workloads": {
            "post": {
                "summary": "CreateSpecType",
                "description": "Shape of Workload",
                "operationId": "ves.io.schema.views.workload.API.Create",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/workloadCreateResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "metadata.namespace",
                        "description": "namespace\n\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created. \nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadCreateRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-workload-API-Create"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.workload.API.Create"
            },
            "x-displayname": "Workload",
            "x-ves-proto-service": "ves.io.schema.views.workload.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{metadata.namespace}/workloads/{metadata.name}": {
            "put": {
                "summary": "ReplaceSpecType",
                "description": "Shape of Workload",
                "operationId": "ves.io.schema.views.workload.API.Replace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/workloadReplaceResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "metadata.namespace",
                        "description": "namespace\n\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created. \nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "metadata.name",
                        "description": "name\n\nx-example: \"acmecorp-web\"\nThe configuration object to be replaced will be looked up by name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadReplaceRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-workload-API-Replace"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.workload.API.Replace"
            },
            "x-displayname": "Workload",
            "x-ves-proto-service": "ves.io.schema.views.workload.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{namespace}/workloads": {
            "get": {
                "summary": "List",
                "description": "List the set of workload in a namespace",
                "operationId": "ves.io.schema.views.workload.API.List",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/workloadListResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of workload",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "label_filter",
                        "description": "x-example: \"env in (staging, testing), tier in (web, db)\"\nA LabelSelectorType expression that every item in list response will satisfy",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Label Filter"
                    },
                    {
                        "name": "report_fields",
                        "description": "x-example: \"\"\nExtra fields to return along with summary fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-displayname": "Report Fields"
                    },
                    {
                        "name": "report_status_fields",
                        "description": "x-example: \"\"\nExtra status fields to return along with summary fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-displayname": "Report Status Fields"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-workload-API-List"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.workload.API.List"
            },
            "x-displayname": "Workload",
            "x-ves-proto-service": "ves.io.schema.views.workload.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{namespace}/workloads/{name}": {
            "get": {
                "summary": "GetSpecType",
                "description": "Shape of Workload",
                "operationId": "ves.io.schema.views.workload.API.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/workloadGetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe namespace in which the configuration object is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"name\"\nThe name of the configuration object to be fetched",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "response_format",
                        "description": "The format in which the configuration object is to be fetched. This could be for example\n    - in GetSpec form for the contents of object\n    - in CreateRequest form to create a new similar object\n    - to ReplaceRequest form to replace changeable values\n\nDefault format of returned resource\nResponse should be in CreateRequest format\nResponse should be in ReplaceRequest format\nResponse should be in StatusObject(s) format\nResponse should be in format of GetSpecType\nResponse should have other objects referring to this object",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "GET_RSP_FORMAT_DEFAULT",
                            "GET_RSP_FORMAT_FOR_CREATE",
                            "GET_RSP_FORMAT_FOR_REPLACE",
                            "GET_RSP_FORMAT_STATUS",
                            "GET_RSP_FORMAT_READ",
                            "GET_RSP_FORMAT_REFERRING_OBJECTS"
                        ],
                        "default": "GET_RSP_FORMAT_DEFAULT",
                        "x-displayname": "Referring Objects"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-workload-API-Get"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.workload.API.Get"
            },
            "delete": {
                "summary": "Delete",
                "description": "Delete the specified workload",
                "operationId": "ves.io.schema.views.workload.API.Delete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace in which the configuration object is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"name\"\nName of the configuration object",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadDeleteRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-workload-API-Delete"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.workload.API.Delete"
            },
            "x-displayname": "Workload",
            "x-ves-proto-service": "ves.io.schema.views.workload.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        }
    },
    "definitions": {
        "http_loadbalancerDownstreamTlsValidationContext": {
            "type": "object",
            "description": "Validation context for downstream client TLS connections",
            "title": "DownstreamTlsValidationContext",
            "x-displayname": "Clients TLS validation context",
            "x-ves-proto-message": "ves.io.schema.views.http_loadbalancer.DownstreamTlsValidationContext",
            "properties": {
                "trusted_ca_url": {
                    "type": "string",
                    "description": " The URL for a trust store\nRequired: YES",
                    "title": "trusted_ca_url",
                    "x-displayname": "Trusted CA",
                    "x-ves-required": "true"
                }
            }
        },
        "http_loadbalancerProxyTypeHttp": {
            "type": "object",
            "description": "Choice for selecting HTTP proxy",
            "title": "HTTP Choice",
            "x-displayname": "HTTP Choice",
            "x-ves-displayorder": "1",
            "x-ves-proto-message": "ves.io.schema.views.http_loadbalancer.ProxyTypeHttp",
            "properties": {
                "dns_volterra_managed": {
                    "type": "boolean",
                    "description": " DNS records for domains will be managed automatically by Volterra.\n This requires the domain to be delegated to Volterra using the Delegated Domain feature.",
                    "title": "Manage DNS Domain",
                    "format": "boolean",
                    "x-displayname": "Automatically Manage DNS Records"
                }
            }
        },
        "http_loadbalancerProxyTypeHttps": {
            "type": "object",
            "description": "Choice for selecting HTTP proxy with bring your own certificates",
            "title": "BYOC HTTPS Choice",
            "x-displayname": "BYOC HTTPS Choice",
            "x-ves-displayorder": "1,2,3,4",
            "x-ves-oneof-field-server_header_choice": "[\"append_server_name\",\"default_header\",\"pass_through\",\"server_name\"]",
            "x-ves-proto-message": "ves.io.schema.views.http_loadbalancer.ProxyTypeHttps",
            "properties": {
                "add_hsts": {
                    "type": "boolean",
                    "description": " Add HTTP Strict-Transport-Security response header",
                    "title": "Add HSTS",
                    "format": "boolean",
                    "x-displayname": "Add HSTS Header"
                },
                "append_server_name": {
                    "type": "string",
                    "description": "Exclusive with [default_header pass_through server_name]\nx-displayName: \"Append Server Name if absent\"\nSpecifies the value to be used for Server header if it is not already present.\nIf Server Header is already present it is not overwritten. It is just passed.",
                    "title": "append_server_name"
                },
                "default_header": {
                    "description": "Exclusive with [append_server_name pass_through server_name]\nx-displayName: \"Default value for Server header\"\nSpecifies that the default value of \"volt-adc\" should be used for Server Header",
                    "title": "default_header",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "http_redirect": {
                    "type": "boolean",
                    "description": " Redirect HTTP traffic to corresponding HTTPS",
                    "title": "HTTP Redirect",
                    "format": "boolean",
                    "x-displayname": "HTTP Redirect to HTTPS"
                },
                "pass_through": {
                    "description": "Exclusive with [append_server_name default_header server_name]\nx-displayName: \"Pass existing Server header\"\nPasses existing Server Header as is. If server header is absent, nothing is\nappended.",
                    "title": "pass_through",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "server_name": {
                    "type": "string",
                    "description": "Exclusive with [append_server_name default_header pass_through]\nx-displayName: \"Server Name\"\nSpecifies the value to be used for Server header inserted in responses.\nThis will overwrite existing values if any for Server Header",
                    "title": "server_name"
                },
                "tls_parameters": {
                    "description": " TLS parameters for downstream connections.",
                    "$ref": "#/definitions/viewshttp_loadbalancerDownstreamTlsParamsType",
                    "x-displayname": "HTTP Loadbalancer TLS Parameters"
                }
            }
        },
        "http_loadbalancerProxyTypeHttpsAutoCerts": {
            "type": "object",
            "description": "Choice for selecting HTTP proxy with bring your own certificates",
            "title": "HTTPS with Auto Certs Choice",
            "x-displayname": "HTTPS with Auto Certs Choice",
            "x-ves-displayorder": "1,2,4,3,7",
            "x-ves-oneof-field-mtls_choice": "[\"no_mtls\",\"use_mtls\"]",
            "x-ves-oneof-field-server_header_choice": "[\"append_server_name\",\"default_header\",\"pass_through\",\"server_name\"]",
            "x-ves-proto-message": "ves.io.schema.views.http_loadbalancer.ProxyTypeHttpsAutoCerts",
            "properties": {
                "add_hsts": {
                    "type": "boolean",
                    "description": " Add HTTP Strict-Transport-Security response header",
                    "title": "Add HSTS",
                    "format": "boolean",
                    "x-displayname": "Add HSTS Header"
                },
                "append_server_name": {
                    "type": "string",
                    "description": "Exclusive with [default_header pass_through server_name]\nx-displayName: \"Append Server Name if absent\"\nSpecifies the value to be used for Server header if it is not already present.\nIf Server Header is already present it is not overwritten. It is just passed.",
                    "title": "append_server_name"
                },
                "default_header": {
                    "description": "Exclusive with [append_server_name pass_through server_name]\nx-displayName: \"Default value for Server header\"\nSpecifies that the default value of \"volt-adc\" should be used for Server Header",
                    "title": "default_header",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "http_redirect": {
                    "type": "boolean",
                    "description": " Redirect HTTP traffic to corresponding HTTPS",
                    "title": "HTTP Redirect",
                    "format": "boolean",
                    "x-displayname": "HTTP Redirect to HTTPS"
                },
                "no_mtls": {
                    "description": "Exclusive with [use_mtls]\nx-displayName: \"No mTLS\"\nmTLS with clients is not enabled",
                    "title": "No mTLS",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "pass_through": {
                    "description": "Exclusive with [append_server_name default_header server_name]\nx-displayName: \"Pass existing Server header\"\nPasses existing Server Header as is. If server header is absent, nothing is\nappended.",
                    "title": "pass_through",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "server_name": {
                    "type": "string",
                    "description": "Exclusive with [append_server_name default_header pass_through]\nx-displayName: \"Server Name\"\nSpecifies the value to be used for Server header inserted in responses.\nThis will overwrite existing values if any for Server Header",
                    "title": "server_name"
                },
                "tls_config": {
                    "description": " Configuration for TLS parameters such as min/max TLS version and ciphers",
                    "title": "TLS Config",
                    "$ref": "#/definitions/viewsTlsConfig",
                    "x-displayname": "TLS Config"
                },
                "use_mtls": {
                    "description": "Exclusive with [no_mtls]\nx-displayName: \"mTLS\"\nmTLS with clients is enabled",
                    "title": "Use mTLS",
                    "$ref": "#/definitions/http_loadbalancerDownstreamTlsValidationContext"
                }
            }
        },
        "http_loadbalancerRouteTypeCustomRoute": {
            "type": "object",
            "description": "A custom route uses a route object created outside of this view.",
            "title": "RouteTypeCustomRoute",
            "x-ves-proto-message": "ves.io.schema.views.http_loadbalancer.RouteTypeCustomRoute",
            "properties": {
                "route_ref": {
                    "description": " Reference to a custom route object",
                    "title": "route_refs",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Reference to Custom Route"
                }
            }
        },
        "http_loadbalancerRouteTypeDirectResponse": {
            "type": "object",
            "description": "A direct response route matches on patch and/or HTTP method and responds directly to the matching traffic",
            "title": "RouteTypeDirectResponse",
            "x-ves-displayorder": "2,1,3",
            "x-ves-proto-message": "ves.io.schema.views.http_loadbalancer.RouteTypeDirectResponse",
            "properties": {
                "http_method": {
                    "description": " The name of the HTTP Method (GET, PUT, POST, etc)",
                    "title": "http_method",
                    "$ref": "#/definitions/schemaHttpMethod",
                    "x-displayname": "HTTP Method"
                },
                "path": {
                    "description": " URI path of route",
                    "title": "path",
                    "$ref": "#/definitions/ioschemaPathMatcherType",
                    "x-displayname": "Path"
                },
                "route_direct_response": {
                    "description": " Send direct response",
                    "title": "route_direct_response",
                    "$ref": "#/definitions/routeRouteDirectResponse",
                    "x-displayname": "Direct Response"
                }
            }
        },
        "http_loadbalancerRouteTypeRedirect": {
            "type": "object",
            "description": "A redirect route matches on patch and/or HTTP method and redirects the matching traffic to a different URL",
            "title": "RouteTypeRedirect",
            "x-ves-displayorder": "2,1,3",
            "x-ves-proto-message": "ves.io.schema.views.http_loadbalancer.RouteTypeRedirect",
            "properties": {
                "http_method": {
                    "description": " The name of the HTTP Method (GET, PUT, POST, etc)",
                    "title": "http_method",
                    "$ref": "#/definitions/schemaHttpMethod",
                    "x-displayname": "HTTP Method"
                },
                "path": {
                    "description": " URI path of route",
                    "title": "path",
                    "$ref": "#/definitions/ioschemaPathMatcherType",
                    "x-displayname": "Path"
                },
                "route_redirect": {
                    "description": " Send redirect response",
                    "title": "route_redirect",
                    "$ref": "#/definitions/routeRouteRedirect",
                    "x-displayname": "Redirect Parameters"
                }
            }
        },
        "http_loadbalancerRouteTypeSimpleWithDefaultOriginPool": {
            "type": "object",
            "description": "A simple route matches on path and/or HTTP method and forwards the matching traffic to the default origin pool specified outside",
            "title": "RouteTypeSimpleWithDefaultOriginPool",
            "x-displayname": "Simple Route",
            "x-ves-displayorder": "1,2,3",
            "x-ves-oneof-field-host_rewrite_params": "[\"auto_host_rewrite\",\"disable_host_rewrite\",\"host_rewrite\"]",
            "x-ves-proto-message": "ves.io.schema.views.http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool",
            "properties": {
                "auto_host_rewrite": {
                    "description": "Exclusive with [disable_host_rewrite host_rewrite]\nx-displayName: \"Automatic Host Rewrite\"\nHost header will be swapped with hostname of upstream host chosen by the cluster",
                    "title": "Auto Host Rewrite",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "disable_host_rewrite": {
                    "description": "Exclusive with [auto_host_rewrite host_rewrite]\nx-displayName: \"Disable Host Rewrite\"\nHost header is not modified",
                    "title": "Disable Host Rewrite",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "host_rewrite": {
                    "type": "string",
                    "description": "Exclusive with [auto_host_rewrite disable_host_rewrite]\nx-displayName: \"Host Rewrite Value\"\nx-example: \"one.volterra.com\"\nHost header will be swapped with this value",
                    "title": "HostRewrite"
                },
                "http_method": {
                    "description": " The name of the HTTP Method (GET, PUT, POST, etc)",
                    "title": "http_method",
                    "$ref": "#/definitions/schemaHttpMethod",
                    "x-displayname": "HTTP Method"
                },
                "path": {
                    "description": " URI path of route",
                    "title": "path",
                    "$ref": "#/definitions/ioschemaPathMatcherType",
                    "x-displayname": "Path"
                }
            }
        },
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "ioschemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred). \nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "ioschemaPathMatcherType": {
            "type": "object",
            "description": "Path match of the URI can be either be, Prefix match or exact match or regular expression match",
            "title": "PathMatcherType",
            "x-displayname": "Path to Match",
            "x-ves-displayorder": "4",
            "x-ves-oneof-field-path_match": "[\"path\",\"prefix\",\"regex\"]",
            "x-ves-proto-message": "ves.io.schema.PathMatcherType",
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Exclusive with [prefix regex]\nx-displayName: \"Path\"\nx-example: \"/logout\"\nExact path value to match",
                    "title": "path"
                },
                "prefix": {
                    "type": "string",
                    "description": "Exclusive with [path regex]\nx-displayName: \"Prefix\"\nx-example: \"/register/\"\nPath prefix to match",
                    "title": "prefix"
                },
                "regex": {
                    "type": "string",
                    "description": "Exclusive with [path prefix]\nx-displayName: \"Regex\"\nRegular expression of path match",
                    "title": "regex"
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "routeRouteDirectResponse": {
            "type": "object",
            "description": "Send this direct response in case of route match action is direct response",
            "title": "RouteDirectResponse",
            "x-displayname": "Direct Response",
            "x-ves-proto-message": "ves.io.schema.route.RouteDirectResponse",
            "properties": {
                "response_body": {
                    "type": "string",
                    "description": " response body to send\n\nExample: - \"OK\"-",
                    "title": "response_body",
                    "x-displayname": "Response Body",
                    "x-ves-example": "OK"
                },
                "response_code": {
                    "type": "integer",
                    "description": " response code to send\n\nExample: - 200-",
                    "title": "response_code",
                    "format": "int64",
                    "x-displayname": "Response Code"
                }
            }
        },
        "routeRouteQueryParams": {
            "type": "object",
            "description": "Query params keys to strip while manipulating the HTTP request",
            "title": "RouteQueryParams",
            "x-displayname": "Query Parameters",
            "x-ves-proto-message": "ves.io.schema.route.RouteQueryParams",
            "properties": {
                "query_params": {
                    "type": "array",
                    "description": " Query params keys to strip while manipulating the HTTP request\n\nExample: - \"userid\"-",
                    "title": "query_params",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Query Parameters",
                    "x-ves-example": "userid"
                }
            }
        },
        "routeRouteRedirect": {
            "type": "object",
            "description": "route redirect parameters when match action is redirect.",
            "title": "RouteRedirect",
            "x-displayname": "Redirect",
            "x-ves-displayorder": "3,1,2,6,7",
            "x-ves-oneof-field-query_params": "[\"all_params\",\"remove_all_params\",\"retain_all_params\",\"strip_query_params\"]",
            "x-ves-proto-message": "ves.io.schema.route.RouteRedirect",
            "properties": {
                "all_params": {
                    "type": "boolean",
                    "description": "Exclusive with [remove_all_params retain_all_params strip_query_params]\nx-displayName: \"Remove All Parameters Enable/Disable\"\nx-example: true\nIf true, it indicates that during redirection, the query portion of the URL will\nbe removed. Default value is false, which means query portion of the URL will NOT be removed",
                    "title": "all_params",
                    "format": "boolean"
                },
                "host_redirect": {
                    "type": "string",
                    "description": " swap host part of incoming URL in redirect URL\n\nExample: - \"one.ves.io\"-",
                    "title": "host_redirect",
                    "x-displayname": "Host",
                    "x-ves-example": "one.ves.io"
                },
                "path_redirect": {
                    "type": "string",
                    "description": " swap path part of incoming URL in redirect URL\n\nExample: - \"/api/register\"-",
                    "title": "path_redirect",
                    "x-displayname": "Path",
                    "x-ves-example": "/api/register"
                },
                "proto_redirect": {
                    "type": "string",
                    "description": " swap protocol part of incoming URL in redirect URL\n The protocol can be swapped with either http or https\n When incoming-proto option is specified, swapping of protocol is not done.\n\nExample: - \"https\"-",
                    "title": "proto_redirect",
                    "x-displayname": "Protocol",
                    "x-ves-example": "https"
                },
                "remove_all_params": {
                    "description": "Exclusive with [all_params retain_all_params strip_query_params]\nx-displayName: \"Remove All Parameters\"\nRemove all query parameters",
                    "title": "Remove All Params",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "response_code": {
                    "type": "integer",
                    "description": " The HTTP status code to use in the redirect response. The default response\n code is MOVED_PERMANENTLY (301).\n\nExample: - 303-",
                    "title": "response_code",
                    "format": "int64",
                    "x-displayname": "Response Code"
                },
                "retain_all_params": {
                    "description": "Exclusive with [all_params remove_all_params strip_query_params]\nx-displayName: \"Retain All Parameters\"\nRetain all query parameters",
                    "title": "Retain All Params",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "strip_query_params": {
                    "description": "Exclusive with [all_params remove_all_params retain_all_params]\nx-displayName: \"Query Parameters to Remove\"\nSpecifies the list of query params to be removed. Not supported",
                    "title": "strip_query_params",
                    "$ref": "#/definitions/routeRouteQueryParams"
                }
            }
        },
        "schemaBlindfoldSecretInfoType": {
            "type": "object",
            "description": "BlindfoldSecretInfoType specifies information about the Secret managed by Volterra Secret Management",
            "title": "BlindfoldSecretInfoType",
            "x-displayname": "Blindfold Secret",
            "x-ves-displayorder": "3,1,2",
            "x-ves-proto-message": "ves.io.schema.BlindfoldSecretInfoType",
            "properties": {
                "decryption_provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the backend Secret Management service.",
                    "title": "Decryption Provider",
                    "x-displayname": "Decryption Provider"
                },
                "location": {
                    "type": "string",
                    "description": " Location is the uri_ref. It could be in url format for string:///\n Or it could be a path if the store provider is an http/https location\n\nExample: - \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"-\nRequired: YES",
                    "title": "Location",
                    "x-displayname": "Location",
                    "x-ves-example": "string:///U2VjcmV0SW5mb3JtYXRpb24=",
                    "x-ves-required": "true"
                },
                "store_provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the store to get encrypted bytes\n This field needs to be provided only if the url scheme is not string:///",
                    "title": "Store Provider",
                    "x-displayname": "Store Provider"
                }
            }
        },
        "schemaClearSecretInfoType": {
            "type": "object",
            "description": "ClearSecretInfoType specifies information about the Secret that is not encrypted.",
            "title": "ClearSecretInfoType",
            "x-displayname": "In-Clear Secret",
            "x-ves-displayorder": "2,1",
            "x-ves-proto-message": "ves.io.schema.ClearSecretInfoType",
            "properties": {
                "provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the store to get encrypted bytes\n This field needs to be provided only if the url scheme is not string:///\n\nExample: - \"box-provider\"-",
                    "title": "Provider",
                    "x-displayname": "Provider",
                    "x-ves-example": "box-provider"
                },
                "url": {
                    "type": "string",
                    "description": " URL of the secret. Currently supported URL schemes is string:///.\n For string:/// scheme, Secret needs to be encoded Base64 format.\n When asked for this secret, caller will get Secret bytes after Base64 decoding.  \n\nExample: - \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"-\nRequired: YES",
                    "title": "URL",
                    "x-displayname": "URL",
                    "x-ves-example": "string:///U2VjcmV0SW5mb3JtYXRpb24=",
                    "x-ves-required": "true"
                }
            }
        },
        "schemaConditionType": {
            "type": "object",
            "description": "Conditions are used in the object status to describe the current state of the\nobject, e.g. Ready, Succeeded, etc.",
            "title": "ConditionType",
            "x-displayname": "Status Condition",
            "x-ves-proto-message": "ves.io.schema.ConditionType",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": " Hostname of the instance of the site that sent the status",
                    "title": "hostname",
                    "x-displayname": "Hostname"
                },
                "last_update_time": {
                    "type": "string",
                    "description": " Last time the condition was updated",
                    "title": "last_update_time",
                    "format": "date-time",
                    "x-displayname": "Last Updated"
                },
                "reason": {
                    "type": "string",
                    "description": " x-reason: \"Insufficient memory in data plane\"\n A human readable string explaining the reason for reaching this condition\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "service_name": {
                    "type": "string",
                    "description": " Name of the service that sent the status",
                    "title": "service name",
                    "x-displayname": "Service Name"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the condition\n \"Success\" Validtion has succeded. Requested operation was successful.\n \"Failed\"  Validation has failed. \n \"Incomplete\" Validation of configuration has failed due to missing configuration.\n \"Installed\" Validation has passed and configuration has been installed in data path or K8s\n \"Down\" Configuration is operationally down. e.g. down interface\n \"Disabled\" Configuration is administratively disabled i.e. ObjectMetaType.Disable = true.\n \"NotApplicable\" Configuration is not applicable e.g. tenant service_policy_set(s) in system namespace are not applicable on REs\n\nExample: - \"Failed\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "Failed"
                },
                "type": {
                    "type": "string",
                    "description": " Type of the condition\n \"Validation\" represents validation user given configuration object\n \"Operational\" represents operational status of a given configuration object\n\nExample: - \"Operational\"-",
                    "title": "type",
                    "x-displayname": "Type",
                    "x-ves-example": "Operational"
                }
            }
        },
        "schemaErrorCode": {
            "type": "string",
            "description": "Union of all possible error-codes from system\n\n - EOK: No error\n - EPERMS: Permissions error\n - EBADINPUT: Input is not correct\n - ENOTFOUND: Not found\n - EEXISTS: Already exists\n - EUNKNOWN: Unknown/catchall error\n - ESERIALIZE: Error in serializing/de-serializing\n - EINTERNAL: Server error",
            "title": "ErrorCode",
            "enum": [
                "EOK",
                "EPERMS",
                "EBADINPUT",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN",
                "ESERIALIZE",
                "EINTERNAL"
            ],
            "default": "EOK",
            "x-displayname": "Error Code",
            "x-ves-proto-enum": "ves.io.schema.ErrorCode"
        },
        "schemaErrorType": {
            "type": "object",
            "description": "Information about a error in API operation",
            "title": "ErrorType",
            "x-displayname": "Error Type",
            "x-ves-proto-message": "ves.io.schema.ErrorType",
            "properties": {
                "code": {
                    "description": " A simple general code by category",
                    "title": "code",
                    "$ref": "#/definitions/schemaErrorCode",
                    "x-displayname": "Code"
                },
                "error_obj": {
                    "description": " A structured error object for machine parsing",
                    "title": "error_obj",
                    "$ref": "#/definitions/protobufAny",
                    "x-displayname": "Error Object"
                },
                "message": {
                    "type": "string",
                    "description": " A human readable string of the error\n\nExample: - \"value\"-",
                    "title": "message",
                    "x-displayname": "Message",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaHttpMethod": {
            "type": "string",
            "description": "Specifies the HTTP method used to acess a resource.\n\nAny HTTP Method\nGET method\nHEAD method\nPOST method\nPUT method\nDELETE method\nCONNECT method\nOPTIONS method\nTRACE method\nPATCH method",
            "title": "HttpMethod",
            "enum": [
                "ANY",
                "GET",
                "HEAD",
                "POST",
                "PUT",
                "DELETE",
                "CONNECT",
                "OPTIONS",
                "TRACE",
                "PATCH"
            ],
            "default": "ANY",
            "x-displayname": "HTTP Method",
            "x-ves-proto-enum": "ves.io.schema.HttpMethod"
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "Initializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "x-displayname": "Initializer",
            "x-ves-proto-message": "ves.io.schema.InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " name of the service that is responsible for initializing this object.",
                    "title": "name",
                    "x-displayname": "Name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "Initializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "x-displayname": "Initializers",
            "x-ves-proto-message": "ves.io.schema.InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": " Pending is a list of initializers that must execute in order before this object is initialized.\n When the last pending initializer is removed, and no failing result is set, the initializers\n struct will be set to nil and the object is considered as initialized and visible to all\n clients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    },
                    "x-displayname": "Pending"
                },
                "result": {
                    "description": " If result is set with the Failure field, the object will be persisted to storage and then deleted,\n ensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/schemaStatusType",
                    "x-displayname": "Result"
                }
            }
        },
        "schemaKubeRefType": {
            "type": "object",
            "description": "KubeRefType represents a reference to a Kubernetes (K8s) object",
            "title": "KubeRefType",
            "x-displayname": "Kubernetes Reference",
            "x-ves-proto-message": "ves.io.schema.KubeRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the kubernetes object\n\nExample: - \"Deployment\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "Deployment"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the kubernetes object\n\nExample: - \"adservice\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "adservice"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace of the kubernetes object\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                }
            }
        },
        "schemaObjectCreateMetaType": {
            "type": "object",
            "description": "ObjectCreateMetaType is metadata that can be specified in Create request of an object.",
            "title": "ObjectCreateMetaType",
            "x-displayname": "Create Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectCreateMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotation"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectGetMetaType": {
            "type": "object",
            "description": "ObjectGetMetaType is metadata that can be specified in Get/Create response of an object.",
            "title": "ObjectGetMetaType",
            "x-displayname": "Get Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectGetMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotation",
                    "x-ves-example": "value"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectMetaType": {
            "type": "object",
            "description": "ObjectMetaType is metadata(common attributes) of an object that all configuration objects will have.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "ObjectMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotations",
                    "x-ves-example": "value"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. Object create will fail if \n provided by the client and the value exists in the system. Typically generated by the\n server on successful creation of an object and is not allowed to change once populated.\n Shadowed by SystemObjectMeta's uid field.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaObjectReplaceMetaType": {
            "type": "object",
            "description": "ObjectReplaceMetaType is metadata that can be specified in Replace request of an object.",
            "title": "ObjectReplaceMetaType",
            "x-displayname": "Replace Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectReplaceMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotations"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaSecretEncodingType": {
            "type": "string",
            "description": "SecretEncodingType defines the encoding type of the secret before handled by the Secret Management Service.\n\nNo Encoding\n - EncodingBase64: Base64\n\nBase64 encoding",
            "title": "SecretEncodingType",
            "enum": [
                "EncodingNone",
                "EncodingBase64"
            ],
            "default": "EncodingNone",
            "x-displayname": "Secret Encoding",
            "x-ves-proto-enum": "ves.io.schema.SecretEncodingType"
        },
        "schemaSecretType": {
            "type": "object",
            "description": "SecretType is used in an object to indicate a sensitive/confidential field",
            "title": "SecretType",
            "x-displayname": "Secret",
            "x-ves-oneof-field-secret_info_oneof": "[\"blindfold_secret_info\",\"clear_secret_info\",\"vault_secret_info\",\"wingman_secret_info\"]",
            "x-ves-proto-message": "ves.io.schema.SecretType",
            "properties": {
                "blindfold_secret_info": {
                    "description": "Exclusive with [clear_secret_info vault_secret_info wingman_secret_info]\nx-displayName: \"Blindfold Secret\"\nBlindfold Secret is used for the secrets managed by Volterra Secret Management Service",
                    "title": "Blindfold Secret",
                    "$ref": "#/definitions/schemaBlindfoldSecretInfoType"
                },
                "blindfold_secret_info_internal": {
                    "description": " Blindfold Secret Internal is used for the putting re-encrypted blindfold secret",
                    "title": "Blindfold Secret Internal",
                    "$ref": "#/definitions/schemaBlindfoldSecretInfoType",
                    "x-displayname": "Blindfold Secret Internal"
                },
                "clear_secret_info": {
                    "description": "Exclusive with [blindfold_secret_info vault_secret_info wingman_secret_info]\nx-displayName: \"Clear Secret\"\nClear Secret is used for the secrets that are not encrypted",
                    "title": "Clear Secret",
                    "$ref": "#/definitions/schemaClearSecretInfoType"
                },
                "secret_encoding_type": {
                    "description": " This field defines the encoding type of the secret BEFORE the secret is given to any Secret Management System.\n this will be set if the secret is encoded and not plaintext BEFORE it is encrypted and put it in SecretType.\n Note - Do NOT set this field for Clear Secret with string:/// scheme.\n e.g. if a secret is base64 encoded and then put into vault.",
                    "title": "secret_encoding_type",
                    "$ref": "#/definitions/schemaSecretEncodingType",
                    "x-displayname": "Secret Encoding"
                },
                "vault_secret_info": {
                    "description": "Exclusive with [blindfold_secret_info clear_secret_info wingman_secret_info]\nx-displayName: \"Vault Secret\"\nVault Secret is used for the secrets managed by Hashicorp Vault",
                    "title": "Vault Secret",
                    "$ref": "#/definitions/schemaVaultSecretInfoType"
                },
                "wingman_secret_info": {
                    "description": "Exclusive with [blindfold_secret_info clear_secret_info vault_secret_info]\nx-displayName: \"Bootstrap Secret\"\nSecret is given as bootstrap secret in Volterra Security Sidecar",
                    "title": "Wingman Secret",
                    "$ref": "#/definitions/schemaWingmanSecretInfoType"
                }
            }
        },
        "schemaStatusMetaType": {
            "type": "object",
            "description": "StatusMetaType is metadata that all status must have.",
            "title": "StatusMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.StatusMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " creation_timestamp is when the status object was created. It is used to find/tie-break\n for latest status object from same origin",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " Class of creator which created this StatusObject. This will be service's DNS FQDN.\n This will be set by the system based on client certificate information.\n\nExample: - \"ver.re1.int.ves.io\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "ver.re1.int.ves.io"
                },
                "creator_id": {
                    "type": "string",
                    "description": " ID of creator which created this StatusObject. This will be a concrete identifier for service (e.g.\n identifying the environment also). This will be set by the system based on client certificate\n information\n\nExample: - \"ver-instance-1\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "ver-instance-1"
                },
                "publish": {
                    "description": " Decides wether this status object will be propagated to user.",
                    "title": "publish",
                    "$ref": "#/definitions/schemaStatusPublishType",
                    "x-displayname": "Publish"
                },
                "status_id": {
                    "type": "string",
                    "description": " status_id is a field used by the generator to distinguish (if necessary) between two status \n objects for the same config object from the same site and same service and potentially same\n daemon(creator-id)",
                    "title": "status_id",
                    "x-displayname": "Status ID"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for a StatusObject.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Oriong of this status exchanged by VTRP. ",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                }
            }
        },
        "schemaStatusPublishType": {
            "type": "string",
            "description": "StatusPublishType is all possible publish operations on a StatusObject\n\n - STATUS_DO_NOT_PUBLISH: Do not propagate this status to user. This could be because status is only informational\n - STATUS_PUBLISH: Propagate this status up to user as it might be actionable",
            "title": "StatusPublishType",
            "enum": [
                "STATUS_DO_NOT_PUBLISH",
                "STATUS_PUBLISH"
            ],
            "default": "STATUS_DO_NOT_PUBLISH",
            "x-displayname": "Publish",
            "x-ves-proto-enum": "ves.io.schema.StatusPublishType"
        },
        "schemaStatusType": {
            "type": "object",
            "description": "Status is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": " Suggested HTTP return code for this status, 0 if not set.\n\nExample: - \"0\"-",
                    "title": "code",
                    "format": "int32",
                    "x-displayname": "Code",
                    "x-ves-example": "0"
                },
                "reason": {
                    "type": "string",
                    "description": " A human-readable description of why this operation is in the\n \"Failure\" status. If this value is empty there\n is no information available.\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation.\n One of: \"Success\" or \"Failure\".\n\nExample: - \"value\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaSystemObjectGetMetaType": {
            "type": "object",
            "description": "SystemObjectGetMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectGetMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectGetMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "prism"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "admin@acmecorp.com"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n \n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n \n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaSystemObjectMetaType": {
            "type": "object",
            "description": "SystemObjectMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "value"
                },
                "creator_cookie": {
                    "type": "string",
                    "description": " This can used by the creator of the object for later audit for e.g. by storing the\n version identifying information of the object so at future it can be determined if\n version present at remote end is current or stale.\n\nExample: - \"value\"-",
                    "title": "creator_cookie",
                    "x-displayname": "Creator Cookie",
                    "x-ves-example": "value"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "value"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n \n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n \n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "namespace": {
                    "type": "array",
                    "description": " The namespace this object belongs to. This is populated by the service based on the\n metadata.namespace field when an object is created.",
                    "title": "namespace",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Namespace Reference"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "sre_disable": {
                    "type": "boolean",
                    "description": " This should be set to true If VES/SRE operator wants to suppress an object from being\n presented to business-logic of a daemon(e.g. due to bad-form/issue-causing Object).\n This is meant only to be used in temporary situations for operational continuity till\n a fix is rolled out in business-logic.\n\nExample: - \"true\"-",
                    "title": "sre_disable",
                    "format": "boolean",
                    "x-displayname": "SRE Disable",
                    "x-ves-example": "true"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "trace_info": {
                    "type": "string",
                    "description": " trace_info holds information(\u003ctrace-id\u003e:\u003cspan-id\u003e:\u003cparent-span-id\u003e) of the request doing\n the object modification. This can be used on the watch side to create subsequent spans.\n This information can be used to co-relate activities across services (modulo state compression)\n for a synchronous API.\n\nExample: - \"value\"-",
                    "title": "trace_info",
                    "x-displayname": "Trace Info",
                    "x-ves-example": "value"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Indicate origin of this object.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                }
            }
        },
        "schemaTlsCertificateType": {
            "type": "object",
            "description": "Handle to fetch certificate and key",
            "title": "TlsCertificateType",
            "x-displayname": "TLS Certificate",
            "x-ves-displayorder": "1,4,5",
            "x-ves-proto-message": "ves.io.schema.TlsCertificateType",
            "properties": {
                "certificate_url": {
                    "type": "string",
                    "description": " TLS certificate.\n Certificate or certificate chain in PEM format including the PEM headers.\nRequired: YES",
                    "title": "certificate_url",
                    "x-displayname": "Certificate URL",
                    "x-ves-required": "true"
                },
                "description": {
                    "type": "string",
                    "description": " Description for the certificate",
                    "title": "description",
                    "x-displayname": "Description"
                },
                "private_key": {
                    "description": " TLS Private Key data in unencrypted PEM format including the PEM headers. The data may be optionally secured using BlindFold. TLS key has to match the accompanying certificate.\nRequired: YES",
                    "title": "private_key",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "Private Key",
                    "x-ves-required": "true"
                }
            }
        },
        "schemaTlsProtocol": {
            "type": "string",
            "description": "TlsProtocol is enumeration of supported TLS versions\n\nVolterra will choose the optimal TLS version.\nTLS 1.0\nTLS 1.1\nTLS 1.2\nTLS 1.3",
            "title": "TlsProtocol",
            "enum": [
                "TLS_AUTO",
                "TLSv1_0",
                "TLSv1_1",
                "TLSv1_2",
                "TLSv1_3"
            ],
            "default": "TLS_AUTO",
            "x-displayname": "TLS Protocol",
            "x-ves-proto-enum": "ves.io.schema.TlsProtocol"
        },
        "schemaVaultSecretInfoType": {
            "type": "object",
            "description": "VaultSecretInfoType specifies information about the Secret managed by Hashicorp Vault.",
            "title": "VaultSecretInfoType",
            "x-displayname": "Vault Secret",
            "x-ves-displayorder": "1,2,3,4,5",
            "x-ves-proto-message": "ves.io.schema.VaultSecretInfoType",
            "properties": {
                "key": {
                    "type": "string",
                    "description": " Key of the individual secret. Vault Secrets are stored as key-value pair.\n If user is only interested in one value from the map, this field should be set to the corresponding key.\n If not provided entire secret will be returned.\n\nExample: - \"key_pem\"-",
                    "title": "Key",
                    "x-displayname": "Key",
                    "x-ves-example": "key_pem"
                },
                "location": {
                    "type": "string",
                    "description": " Path to secret in Vault.\n\nExample: - \"v1/data/vhost_key\"-\nRequired: YES",
                    "title": "Location",
                    "x-displayname": "Location",
                    "x-ves-example": "v1/data/vhost_key",
                    "x-ves-required": "true"
                },
                "provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the backend Vault.\n\nExample: - \"vault-vh-provider\"-\nRequired: YES",
                    "title": "Provider",
                    "x-displayname": "Provider",
                    "x-ves-example": "vault-vh-provider",
                    "x-ves-required": "true"
                },
                "secret_encoding": {
                    "description": " This field defines the encoding type of the secret BEFORE the secret is put into Hashicorp Vault.",
                    "title": "secret_encoding",
                    "$ref": "#/definitions/schemaSecretEncodingType",
                    "x-displayname": "Secret Encoding"
                },
                "version": {
                    "type": "integer",
                    "description": " Version of the secret to be fetched. As vault secrets are versioned, user can specify this field to fetch specific version.\n If not provided latest version will be returned.\n\nExample: - \"1\"-",
                    "title": "Version",
                    "format": "int64",
                    "x-displayname": "Version",
                    "x-ves-example": "1"
                }
            }
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "ViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "x-displayname": "View Reference",
            "x-ves-proto-message": "ves.io.schema.ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the view object\n\nExample: - \"http_proxy\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "http_proxy"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "uid": {
                    "type": "string",
                    "description": " UID of the view object\n\nExample: - \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "f3744323-1adf-4aaa-a5dc-0707c1d1bd82"
                }
            }
        },
        "schemaWingmanSecretInfoType": {
            "type": "object",
            "description": "WingmanSecretInfoType specifies the handle to the wingman secret",
            "title": "WingmanSecretInfoType",
            "x-displayname": "Wingman Secret",
            "x-ves-proto-message": "ves.io.schema.WingmanSecretInfoType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Name of the secret.\n\nExample: - \"ChargeBack-API-Key\"-\nRequired: YES",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "ChargeBack-API-Key",
                    "x-ves-required": "true"
                }
            }
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "This type establishes a direct reference from one object(the referrer) to another(the referred). \nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.views.ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contacts-route\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contacts-route",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                }
            }
        },
        "viewsCustomCiphers": {
            "type": "object",
            "description": "This defines TLS protocol config including min/max versions and allowed ciphers",
            "title": "CustomCiphers",
            "x-displayname": "Custom Ciphers",
            "x-ves-displayorder": "1,2,3",
            "x-ves-proto-message": "ves.io.schema.views.CustomCiphers",
            "properties": {
                "cipher_suites": {
                    "type": "array",
                    "description": " The TLS listener will only support the specified cipher list.\nRequired: YES",
                    "title": "cipher_suites",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Cipher Suites",
                    "x-ves-required": "true"
                },
                "max_version": {
                    "description": " Maximum TLS protocol version.",
                    "title": "maximum_protocol_version",
                    "$ref": "#/definitions/schemaTlsProtocol",
                    "x-displayname": "Maximum TLS version"
                },
                "min_version": {
                    "description": " Minimum TLS protocol version.",
                    "title": "minimum_protocol_version",
                    "$ref": "#/definitions/schemaTlsProtocol",
                    "x-displayname": "Minimum TLS version"
                }
            }
        },
        "viewsSiteNetwork": {
            "type": "string",
            "description": "This defines network types to be used on site\n\nAll inside and outside networks.\nAll inside networks.\nAll outside networks.\nvK8s service network.",
            "title": "SiteNetwork",
            "enum": [
                "SITE_NETWORK_INSIDE_AND_OUTSIDE",
                "SITE_NETWORK_INSIDE",
                "SITE_NETWORK_OUTSIDE",
                "SITE_NETWORK_SERVICE"
            ],
            "default": "SITE_NETWORK_INSIDE_AND_OUTSIDE",
            "x-displayname": "Site Network",
            "x-ves-proto-enum": "ves.io.schema.views.SiteNetwork"
        },
        "viewsTlsConfig": {
            "type": "object",
            "description": "This defines various options to configure TLS configuration parameters",
            "title": "TlsConfig",
            "x-displayname": "TLS Config",
            "x-ves-displayorder": "5",
            "x-ves-oneof-field-choice": "[\"custom_security\",\"default_security\",\"low_security\",\"medium_security\"]",
            "x-ves-proto-message": "ves.io.schema.views.TlsConfig",
            "properties": {
                "custom_security": {
                    "description": "Exclusive with [default_security low_security medium_security]\nx-displayName: \"Custom\"\nCustom selection of TLS versions and cipher suites",
                    "title": "Custom Security",
                    "$ref": "#/definitions/viewsCustomCiphers"
                },
                "default_security": {
                    "description": "Exclusive with [custom_security low_security medium_security]\nx-displayName: \"High\"\nHigh Option chooses highest level of security.\nTLS v1.2+ with PFS ciphers with strong crypto algorithms.",
                    "title": "Default Security",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "low_security": {
                    "description": "Exclusive with [custom_security default_security medium_security]\nx-displayName: \"Low\"\nLow Security chooses TLS v1.0+ including non-PFS ciphers and weak crypto algorithms.",
                    "title": "Low Security",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "medium_security": {
                    "description": "Exclusive with [custom_security default_security low_security]\nx-displayName: \"Medium\"\nMedium Security chooses TLS v1.0+ with only PFS ciphers and medium strength crypto algorithms.",
                    "title": "Medium Security",
                    "$ref": "#/definitions/ioschemaEmpty"
                }
            }
        },
        "viewsWhereSite": {
            "type": "object",
            "description": "This defines a reference to a CE site along with network type and an optional ip address where a load balancer could be advertised",
            "title": "WhereSite",
            "x-displayname": "Site",
            "x-ves-displayorder": "1,2,3",
            "x-ves-proto-message": "ves.io.schema.views.WhereSite",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": " Use given IP address as VIP on the site",
                    "title": "IP address on the site",
                    "x-displayname": "IP Address"
                },
                "network": {
                    "description": " Select network types to be used on site\n By default VIP chosen as ip address of primary network interface in the network\nRequired: YES",
                    "title": "SiteNetwork",
                    "$ref": "#/definitions/viewsSiteNetwork",
                    "x-displayname": "Site Network",
                    "x-ves-required": "true"
                },
                "site": {
                    "description": " Reference to site object\nRequired: YES",
                    "title": "Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Site Reference",
                    "x-ves-required": "true"
                }
            }
        },
        "viewsWhereVK8SService": {
            "type": "object",
            "description": "This defines a reference to a RE site or virtual site where a load balancer could be advertised in the vK8s service network",
            "title": "WhereVK8SService",
            "x-displayname": "vK8s Services on RE",
            "x-ves-displayorder": "3",
            "x-ves-oneof-field-choice": "[\"site\",\"virtual_site\"]",
            "x-ves-proto-message": "ves.io.schema.views.WhereVK8SService",
            "properties": {
                "site": {
                    "description": "Exclusive with [virtual_site]\nx-displayName: \"RE Reference\"\nReference to site object",
                    "title": "RE Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "virtual_site": {
                    "description": "Exclusive with [site]\nx-displayName: \"Virtual Site Reference\"\nReference to virtual site object",
                    "title": "Virtual Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                }
            }
        },
        "viewsWhereVirtualSite": {
            "type": "object",
            "description": "This defines a reference to a customer site virtual site along with network type where a load balancer could be advertised",
            "title": "WhereVirtualSite",
            "x-displayname": "Virtual Site",
            "x-ves-displayorder": "1,2",
            "x-ves-proto-message": "ves.io.schema.views.WhereVirtualSite",
            "properties": {
                "network": {
                    "description": " Select network types to be used on site.\n IP address of primary network interface in the network\nRequired: YES",
                    "title": "SiteNetwork",
                    "$ref": "#/definitions/viewsSiteNetwork",
                    "x-displayname": "Site Network",
                    "x-ves-required": "true"
                },
                "virtual_site": {
                    "description": " Reference to virtual site object\nRequired: YES",
                    "title": "Virtual Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Virtual Site Reference",
                    "x-ves-required": "true"
                }
            }
        },
        "viewshttp_loadbalancerDownstreamTlsParamsType": {
            "type": "object",
            "description": "TLS parameters for HTTP loadbalancer.",
            "title": "DownstreamTlsParamsType",
            "x-displayname": "HTTP Loadbalancer TLS Parameters",
            "x-ves-oneof-field-mtls_choice": "[\"no_mtls\",\"use_mtls\"]",
            "x-ves-proto-message": "ves.io.schema.views.http_loadbalancer.DownstreamTlsParamsType",
            "properties": {
                "no_mtls": {
                    "description": "Exclusive with [use_mtls]\nx-displayName: \"No mTLS\"\nmTLS with clients is not enabled",
                    "title": "No mTLS",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "tls_certificates": {
                    "type": "array",
                    "description": " Set of TLS certificates\nRequired: YES",
                    "title": "tls_certificates",
                    "items": {
                        "$ref": "#/definitions/schemaTlsCertificateType"
                    },
                    "x-displayname": "TLS Certificates",
                    "x-ves-required": "true"
                },
                "tls_config": {
                    "description": " Configuration for TLS parameters such as min/max TLS version and ciphers",
                    "title": "TLS Config",
                    "$ref": "#/definitions/viewsTlsConfig",
                    "x-displayname": "TLS Config"
                },
                "use_mtls": {
                    "description": "Exclusive with [no_mtls]\nx-displayName: \"mTLS\"\nmTLS with clients is enabled",
                    "title": "Use mTLS",
                    "$ref": "#/definitions/http_loadbalancerDownstreamTlsValidationContext"
                }
            }
        },
        "viewsworkloadCreateSpecType": {
            "type": "object",
            "description": "Shape of Workload",
            "title": "CreateSpecType",
            "x-displayname": "Create Workload",
            "x-ves-oneof-field-workload_choice": "[\"job\",\"service\",\"simple_service\",\"stateful_service\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.CreateSpecType",
            "properties": {
                "job": {
                    "description": "Exclusive with [service simple_service stateful_service]\n",
                    "$ref": "#/definitions/workloadJobType"
                },
                "service": {
                    "description": "Exclusive with [job simple_service stateful_service]\n",
                    "$ref": "#/definitions/viewsworkloadServiceType"
                },
                "simple_service": {
                    "description": "Exclusive with [job service stateful_service]\n",
                    "$ref": "#/definitions/workloadSimpleServiceType"
                },
                "stateful_service": {
                    "description": "Exclusive with [job service simple_service]\n",
                    "$ref": "#/definitions/workloadStatefulServiceType"
                }
            }
        },
        "viewsworkloadGetSpecType": {
            "type": "object",
            "description": "Shape of Workload",
            "title": "GetSpecType",
            "x-displayname": "Get Workload",
            "x-ves-oneof-field-workload_choice": "[\"job\",\"service\",\"simple_service\",\"stateful_service\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.GetSpecType",
            "properties": {
                "job": {
                    "description": "Exclusive with [service simple_service stateful_service]\n",
                    "$ref": "#/definitions/workloadJobType"
                },
                "service": {
                    "description": "Exclusive with [job simple_service stateful_service]\n",
                    "$ref": "#/definitions/viewsworkloadServiceType"
                },
                "simple_service": {
                    "description": "Exclusive with [job service stateful_service]\n",
                    "$ref": "#/definitions/workloadSimpleServiceType"
                },
                "stateful_service": {
                    "description": "Exclusive with [job service simple_service]\n",
                    "$ref": "#/definitions/workloadStatefulServiceType"
                }
            }
        },
        "viewsworkloadGlobalSpecType": {
            "type": "object",
            "description": "Specification for Workload",
            "title": "GlobalSpecType",
            "x-displayname": "Global Specification",
            "x-ves-oneof-field-workload_choice": "[\"job\",\"service\",\"simple_service\",\"stateful_service\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.GlobalSpecType",
            "properties": {
                "job": {
                    "description": "Exclusive with [service simple_service stateful_service]\nx-displayName: \"Job\"\nJobs are used for running batch processing tasks and run to completion. Jobs are generally used for tasks\nlike report generation, billing, parallel data processing, ETL processing, etc.",
                    "title": "Job",
                    "$ref": "#/definitions/workloadJobType"
                },
                "service": {
                    "description": "Exclusive with [job simple_service stateful_service]\nx-displayName: \"Service\"\nService does not maintain per replica state, however it can be configured to use persistent\nstorage that is shared amongst all the replicas. Replicas of a service are fungible and do\nnot have a stable network identity or storage. Common examples of services are web servers,\napplication servers, traditional SQL databases, etc.",
                    "title": "Service",
                    "$ref": "#/definitions/viewsworkloadServiceType"
                },
                "simple_service": {
                    "description": "Exclusive with [job service stateful_service]\nx-displayName: \"Simple service on all REs\"\nSimpleService is a service having one container and one replica that is\ndeployed on all Regional Edges and advertised on Internet via HTTP loadbalancer\non default VIP",
                    "title": "SimpleService",
                    "$ref": "#/definitions/workloadSimpleServiceType"
                },
                "stateful_service": {
                    "description": "Exclusive with [job service simple_service]\nx-displayName: \"Stateful Service\"\nStateful Service maintains per replica state and each replica has its own persistent storage. Each replica\nhas a unique network identity and stable storage. Stateful service are used for distributed stateful\napplications like cassandra, mongodb, redis, etc.",
                    "title": "Stateful Service",
                    "$ref": "#/definitions/workloadStatefulServiceType"
                },
                "view_internal": {
                    "description": " Reference to view internal object",
                    "title": "view_internal",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "View Internal"
                },
                "virtual_k8s": {
                    "description": " Reference to virtual K8s object",
                    "title": "virtual_k8s",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "vK8S"
                }
            }
        },
        "viewsworkloadObject": {
            "type": "object",
            "description": "Workload object",
            "title": "Workload object",
            "x-displayname": "Workload",
            "x-ves-proto-message": "ves.io.schema.views.workload.Object",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the workload ",
                    "title": "spec",
                    "$ref": "#/definitions/viewsworkloadSpecType",
                    "x-displayname": "Spec"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "viewsworkloadReplaceSpecType": {
            "type": "object",
            "description": "Shape of Workload",
            "title": "ReplaceSpecType",
            "x-displayname": "Replace Workload",
            "x-ves-oneof-field-workload_choice": "[\"job\",\"service\",\"simple_service\",\"stateful_service\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.ReplaceSpecType",
            "properties": {
                "job": {
                    "description": "Exclusive with [service simple_service stateful_service]\n",
                    "$ref": "#/definitions/workloadJobType"
                },
                "service": {
                    "description": "Exclusive with [job simple_service stateful_service]\n",
                    "$ref": "#/definitions/viewsworkloadServiceType"
                },
                "simple_service": {
                    "description": "Exclusive with [job service stateful_service]\n",
                    "$ref": "#/definitions/workloadSimpleServiceType"
                },
                "stateful_service": {
                    "description": "Exclusive with [job service simple_service]\n",
                    "$ref": "#/definitions/workloadStatefulServiceType"
                }
            }
        },
        "viewsworkloadRouteType": {
            "type": "object",
            "description": "This defines various options to define a route",
            "title": "RouteType",
            "x-displayname": "Route Type",
            "x-ves-proto-message": "ves.io.schema.views.workload.RouteType",
            "properties": {
                "routes": {
                    "type": "array",
                    "description": " Routes for this loadbalancer",
                    "title": "Routes",
                    "items": {
                        "$ref": "#/definitions/workloadRouteInfoType"
                    },
                    "x-displayname": "Routes"
                }
            }
        },
        "viewsworkloadServiceType": {
            "type": "object",
            "description": "Service does not maintain per replica state, however it can be configured to use persistent\nstorage that is shared amongst all the replicas. Replicas of a service are fungible and do\nnot have a stable network identity or storage. Common examples of services are web servers,\napplication servers, traditional SQL databases, etc.",
            "x-ves-oneof-field-scaling_choice": "[\"num_replicas\",\"scale_to_zero\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.ServiceType",
            "properties": {
                "advertise_options": {
                    "description": " Advertise options for the service control how the service is advertised\nRequired: YES",
                    "title": "Advertise Options",
                    "$ref": "#/definitions/workloadAdvertiseOptionsType",
                    "x-displayname": "Advertise Options",
                    "x-ves-required": "true"
                },
                "configuration": {
                    "description": " Configuration parameters for the service",
                    "title": "Configuration Parameters",
                    "$ref": "#/definitions/workloadConfigurationParametersType",
                    "x-displayname": "Configuration Parameters"
                },
                "containers": {
                    "type": "array",
                    "description": " Containers to use for service\nRequired: YES",
                    "title": "Containers",
                    "items": {
                        "$ref": "#/definitions/workloadContainerType"
                    },
                    "x-displayname": "Containers",
                    "x-ves-required": "true"
                },
                "deploy_options": {
                    "description": " Deploy options for the service are used to decide where and how to deploy the service\nRequired: YES",
                    "title": "Deploy Options",
                    "$ref": "#/definitions/workloadDeployOptionsType",
                    "x-displayname": "Deploy Options",
                    "x-ves-required": "true"
                },
                "num_replicas": {
                    "type": "integer",
                    "description": "Exclusive with [scale_to_zero]\nx-example: \"2\"\nx-displayName: \"Number of Replicas\"\nNumber of replicas of service to spawn per site",
                    "title": "Number of Replicas",
                    "format": "int32"
                },
                "scale_to_zero": {
                    "description": "Exclusive with [num_replicas]\nx-displayName: \"Scale Down to Zero\"\nSet number of replicas of service to spawn per site to zero",
                    "title": "Scale down to zero",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "volumes": {
                    "type": "array",
                    "description": " Volumes for the service",
                    "title": "Volumes",
                    "items": {
                        "$ref": "#/definitions/workloadStorageVolumeType"
                    },
                    "x-displayname": "Volumes"
                }
            }
        },
        "viewsworkloadSpecType": {
            "type": "object",
            "description": "Shape of the workload specification",
            "title": "Specification for Workload",
            "x-displayname": "Specification",
            "x-ves-proto-message": "ves.io.schema.views.workload.SpecType",
            "properties": {
                "gc_spec": {
                    "title": "gc_spec",
                    "$ref": "#/definitions/viewsworkloadGlobalSpecType",
                    "x-displayname": "GC Spec"
                }
            }
        },
        "workloadAdvertiseCustomType": {
            "type": "object",
            "description": "Advertise this workload via loadbalancer on specific sites",
            "title": "AdvertiseCustomType",
            "x-displayname": "Advertise on specific sites",
            "x-ves-proto-message": "ves.io.schema.views.workload.AdvertiseCustomType",
            "properties": {
                "advertise_where": {
                    "type": "array",
                    "description": " Where should this load balancer be available\nRequired: YES",
                    "title": "Advertise Where",
                    "items": {
                        "$ref": "#/definitions/workloadAdvertiseWhereType"
                    },
                    "x-displayname": "List of Sites to Advertise",
                    "x-ves-required": "true"
                },
                "ports": {
                    "type": "array",
                    "description": " Ports to advertise\nRequired: YES",
                    "title": "Ports",
                    "items": {
                        "$ref": "#/definitions/workloadAdvertisePortType"
                    },
                    "x-displayname": "Ports",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadAdvertiseInClusterType": {
            "type": "object",
            "description": "Advertise the workload locally in-cluster",
            "title": "AdvertiseInClusterType",
            "x-displayname": "Advertise In Cluster",
            "x-ves-oneof-field-port_choice": "[\"multi_ports\",\"port\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.AdvertiseInClusterType",
            "properties": {
                "multi_ports": {
                    "description": "Exclusive with [port]\nx-displayName: \"Multiple Ports\"\nMulti Ports",
                    "title": "Multi Ports",
                    "$ref": "#/definitions/workloadMultiPortType"
                },
                "port": {
                    "description": "Exclusive with [multi_ports]\nx-displayName: \"Port\"\nSingle Port",
                    "title": "Single Port",
                    "$ref": "#/definitions/workloadSinglePortType"
                }
            }
        },
        "workloadAdvertiseMultiPortType": {
            "type": "object",
            "description": "Advertise multiple ports",
            "title": "AdvertiseMultiPortType",
            "x-displayname": "Advertise Multiple Ports",
            "x-ves-proto-message": "ves.io.schema.views.workload.AdvertiseMultiPortType",
            "properties": {
                "ports": {
                    "type": "array",
                    "description": " Ports to advertise\nRequired: YES",
                    "title": "Ports",
                    "items": {
                        "$ref": "#/definitions/workloadAdvertisePortType"
                    },
                    "x-displayname": "Ports",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadAdvertiseOptionsType": {
            "type": "object",
            "description": "\nAdvertise options are used to configure how and where to advertise the workload using load balancers",
            "title": "Advertise Options",
            "x-displayname": "Advertise Options",
            "x-ves-oneof-field-advertise_choice": "[\"advertise_custom\",\"advertise_in_cluster\",\"advertise_on_public\",\"do_not_advertise\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.AdvertiseOptionsType",
            "properties": {
                "advertise_custom": {
                    "description": "Exclusive with [advertise_in_cluster advertise_on_public do_not_advertise]\nx-displayName: \"Advertise Custom\"\nAdvertise the workload via load balancer on specific sites",
                    "title": "Advertise Custom",
                    "$ref": "#/definitions/workloadAdvertiseCustomType"
                },
                "advertise_in_cluster": {
                    "description": "Exclusive with [advertise_custom advertise_on_public do_not_advertise]\nx-displayName: \"Advertise In Cluster\"\nAdvertise the workload locally in the cluster where it is deployed",
                    "title": "Advertise In Cluster",
                    "$ref": "#/definitions/workloadAdvertiseInClusterType"
                },
                "advertise_on_public": {
                    "description": "Exclusive with [advertise_custom advertise_in_cluster do_not_advertise]\nx-displayName: \"Advertise On Internet\"\nAdvertise the workload via load balancer on Internet with default VIP",
                    "title": "Advertise On Public Default VIP",
                    "$ref": "#/definitions/workloadAdvertisePublicType"
                },
                "do_not_advertise": {
                    "description": "Exclusive with [advertise_custom advertise_in_cluster advertise_on_public]\nx-displayName: \"Do Not Advertise\"\nDo not advertise the workload",
                    "title": "Do Not Advertise",
                    "$ref": "#/definitions/ioschemaEmpty"
                }
            }
        },
        "workloadAdvertisePortType": {
            "type": "object",
            "description": "Advertise port",
            "title": "AdvertisePortType",
            "x-displayname": "Advertise Port",
            "x-ves-oneof-field-advertise_choice": "[\"http_loadbalancer\",\"tcp_loadbalancer\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.AdvertisePortType",
            "properties": {
                "http_loadbalancer": {
                    "description": "Exclusive with [tcp_loadbalancer]\nx-displayName: \"HTTP/HTTPS Load Balancer\"\nHTTP/HTTPS Load balancer",
                    "title": "HTTP Load balancer",
                    "$ref": "#/definitions/workloadHTTPLoadBalancerType"
                },
                "port": {
                    "description": " Port information\nRequired: YES",
                    "title": "Port",
                    "$ref": "#/definitions/workloadPortType",
                    "x-displayname": "Port",
                    "x-ves-required": "true"
                },
                "tcp_loadbalancer": {
                    "description": "Exclusive with [http_loadbalancer]\nx-displayName: \"TCP Load Balancer\"\nTCP Load balancer",
                    "title": "TCPLoadBalancerType",
                    "$ref": "#/definitions/workloadTCPLoadBalancerType"
                }
            }
        },
        "workloadAdvertisePublicType": {
            "type": "object",
            "description": "Advertise this workload via loadbalancer on Internet with default VIP",
            "title": "AdvertisePublicType",
            "x-displayname": "Advertise On Internet",
            "x-ves-oneof-field-advertise_choice": "[\"multi_ports\",\"port\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.AdvertisePublicType",
            "properties": {
                "multi_ports": {
                    "description": "Exclusive with [port]\nx-displayName: \"Multiple Ports\"\nMultiple Ports",
                    "title": "Multiple Ports",
                    "$ref": "#/definitions/workloadAdvertiseMultiPortType"
                },
                "port": {
                    "description": "Exclusive with [multi_ports]\nx-displayName: \"Port\"\nSingle Port",
                    "title": "Single Port",
                    "$ref": "#/definitions/workloadAdvertiseSinglePortType"
                }
            }
        },
        "workloadAdvertiseSimpleServiceType": {
            "type": "object",
            "description": "Advertise options for Simple Service",
            "title": "AdvertiseSimpleServiceType",
            "x-displayname": "Advertise Options For Simple Service",
            "x-ves-proto-message": "ves.io.schema.views.workload.AdvertiseSimpleServiceType",
            "properties": {
                "domains": {
                    "type": "array",
                    "description": " A list of domains (host/authority header) that will be matched to loadbalancer.\n Wildcard hosts are supported in the suffix or prefix form\n\n Domain search order:\n  1. Exact domain names: --www.foo.com--.\n  2. Prefix domain wildcards: --*.foo.com-- or --*-bar.foo.com--.\n  3. Special wildcard --*-- matching any domain.\n\n Wildcard will not match empty string.\n e.g. --*-bar.foo.com-- will match --baz-bar.foo.com-- but not ---bar.foo.com--.\n The longest wildcards match first.\n\n Domains are also used for SNI matching if the loadbalancer type is HTTPS\n Domains also indicate the list of names for which DNS resolution will be done by VER\n\nExample: - \"www.foo.com\"-\nRequired: YES",
                    "title": "Domains",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Domains",
                    "x-ves-example": "www.foo.com",
                    "x-ves-required": "true"
                },
                "service_port": {
                    "type": "integer",
                    "description": " Service port to advertise on Internet via HTTP loadbalancer using port 80\nRequired: YES",
                    "title": "Service Port",
                    "format": "int64",
                    "x-displayname": "Service Port",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadAdvertiseSinglePortType": {
            "type": "object",
            "description": "Advertise single port",
            "title": "AdvertiseSinglePortType",
            "x-displayname": "Advertise Port",
            "x-ves-oneof-field-advertise_choice": "[\"http_loadbalancer\",\"tcp_loadbalancer\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.AdvertiseSinglePortType",
            "properties": {
                "http_loadbalancer": {
                    "description": "Exclusive with [tcp_loadbalancer]\nx-displayName: \"HTTP/HTTPS Load Balancer\"\nHTTP/HTTPS Load balancer",
                    "title": "HTTP/HTTPS Load balancer",
                    "$ref": "#/definitions/workloadHTTPLoadBalancerType"
                },
                "port": {
                    "description": " Port information\nRequired: YES",
                    "title": "Port",
                    "$ref": "#/definitions/workloadSinglePortType",
                    "x-displayname": "Port",
                    "x-ves-required": "true"
                },
                "tcp_loadbalancer": {
                    "description": "Exclusive with [http_loadbalancer]\nx-displayName: \"TCP Load Balancer\"\nTCP Load balancer",
                    "title": "TCPLoadBalancerType",
                    "$ref": "#/definitions/workloadTCPLoadBalancerType"
                }
            }
        },
        "workloadAdvertiseWhereType": {
            "type": "object",
            "description": "This defines various options where a load balancer could be advertised",
            "title": "AdvertiseWhereType",
            "x-displayname": "Select Where to Advertise",
            "x-ves-oneof-field-choice": "[\"site\",\"virtual_site\",\"vk8s_service\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.AdvertiseWhereType",
            "properties": {
                "site": {
                    "description": "Exclusive with [virtual_site vk8s_service]\nx-displayName: \"Site\"\nAdvertise on a customer edge site and a given network.",
                    "title": "Site",
                    "$ref": "#/definitions/viewsWhereSite"
                },
                "virtual_site": {
                    "description": "Exclusive with [site vk8s_service]\nx-displayName: \"Virtual Site\"\nAdvertise on a customer edge virtual site and a given network.",
                    "title": "Virtual Site",
                    "$ref": "#/definitions/viewsWhereVirtualSite"
                },
                "vk8s_service": {
                    "description": "Exclusive with [site virtual_site]\nx-displayName: \"vK8s Service Network on RE\"\nAdvertise on vK8s Service Network on RE.",
                    "title": "vk8s services network",
                    "$ref": "#/definitions/viewsWhereVK8SService"
                }
            }
        },
        "workloadConfigurationFileType": {
            "type": "object",
            "description": "Configuration File for the workload",
            "title": "ConfigurationFileType",
            "x-displayname": "Configuration File",
            "x-ves-proto-message": "ves.io.schema.views.workload.ConfigurationFileType",
            "properties": {
                "data": {
                    "type": "string",
                    "description": " File data",
                    "title": "Data",
                    "x-displayname": "Data"
                },
                "mount": {
                    "description": " Volume Mount information\nRequired: YES",
                    "title": "VolumeMount",
                    "$ref": "#/definitions/workloadVolumeMountType",
                    "x-displayname": "Volume Mount",
                    "x-ves-required": "true"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the file\nRequired: YES",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-required": "true"
                },
                "volume_name": {
                    "type": "string",
                    "description": " Name of the Volume\nRequired: YES",
                    "title": "VolumeName",
                    "x-displayname": "Volume Name",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadConfigurationParameterType": {
            "type": "object",
            "description": "Configuration parameter for the workload",
            "title": "ConfigurationParameterType",
            "x-displayname": "Configuration Parameter",
            "x-ves-oneof-field-choice": "[\"env_var\",\"file\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.ConfigurationParameterType",
            "properties": {
                "env_var": {
                    "description": "Exclusive with [file]\nx-displayName: \"Environment Variable\"\nExpose as environment variable",
                    "title": "EnvVar",
                    "$ref": "#/definitions/workloadEnvironmentVariableType"
                },
                "file": {
                    "description": "Exclusive with [env_var]\nx-displayName: \"File\"\nConfiguration file",
                    "title": "ConfigurationFileType",
                    "$ref": "#/definitions/workloadConfigurationFileType"
                }
            }
        },
        "workloadConfigurationParametersType": {
            "type": "object",
            "description": "Configuration parameters of the workload",
            "title": "ConfigurationParametersType",
            "x-displayname": "Configuration Parameters",
            "x-ves-proto-message": "ves.io.schema.views.workload.ConfigurationParametersType",
            "properties": {
                "parameters": {
                    "type": "array",
                    "description": " Parameters for the workload",
                    "title": "Parameters",
                    "items": {
                        "$ref": "#/definitions/workloadConfigurationParameterType"
                    },
                    "x-displayname": "Parameters"
                }
            }
        },
        "workloadContainerFlavorType": {
            "type": "string",
            "description": "Container Flavor type\n\n - CONTAINER_FLAVOR_TYPE_TINY: Tiny\n\nTiny containers have limit of 0.1 vCPU and 100 MiB (mebibyte) memory\n - CONTAINER_FLAVOR_TYPE_MEDIUM: Medium\n\nMedium containers have limit of 0.25 vCPU and 250 MiB (mebibyte) memory\n - CONTAINER_FLAVOR_TYPE_LARGE: Large\n\nLarge containers have limit of 1 vCPU and 1024 MiB (mebibyte) memory",
            "title": "ContainerFlavorType",
            "enum": [
                "CONTAINER_FLAVOR_TYPE_TINY",
                "CONTAINER_FLAVOR_TYPE_MEDIUM",
                "CONTAINER_FLAVOR_TYPE_LARGE"
            ],
            "default": "CONTAINER_FLAVOR_TYPE_TINY",
            "x-displayname": "Container Flavor Type",
            "x-ves-proto-enum": "ves.io.schema.views.workload.ContainerFlavorType"
        },
        "workloadContainerType": {
            "type": "object",
            "description": "ContainerType configures the container information",
            "title": "ContainerType",
            "x-displayname": "Container Configuration",
            "x-ves-proto-message": "ves.io.schema.views.workload.ContainerType",
            "properties": {
                "args": {
                    "type": "array",
                    "description": " Arguments to the entrypoint. Overrides the docker image's CMD",
                    "title": "Args",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Arguments"
                },
                "command": {
                    "type": "array",
                    "description": " Command to execute. Overrides the docker image's ENTRYPOINT",
                    "title": "Command",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Command"
                },
                "flavor": {
                    "description": " Flavor",
                    "title": "Flavor",
                    "$ref": "#/definitions/workloadContainerFlavorType",
                    "x-displayname": "Container Resources via Flavor"
                },
                "image": {
                    "description": " Container image information\nRequired: YES",
                    "title": "Image",
                    "$ref": "#/definitions/workloadImageType",
                    "x-displayname": "Image to Use",
                    "x-ves-required": "true"
                },
                "init_container": {
                    "type": "boolean",
                    "description": " Specialized container that runs before application container and runs to completion",
                    "title": "Init Container",
                    "format": "boolean",
                    "x-displayname": "Initialization Container"
                },
                "liveness_check": {
                    "description": " Health check of container liveness.\n Container will be restarted if the health check fails.",
                    "title": "LivenessCheck",
                    "$ref": "#/definitions/workloadHealthCheckType",
                    "x-displayname": "Liveness Check"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the container\nRequired: YES",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-required": "true"
                },
                "readiness_check": {
                    "description": " Health check of container service readiness.\n Container will be removed from service endpoints if the health check fails.",
                    "title": "ReadinessCheck",
                    "$ref": "#/definitions/workloadHealthCheckType",
                    "x-displayname": "Readiness Check"
                }
            }
        },
        "workloadCreateRequest": {
            "type": "object",
            "description": "This is the input message of the 'Create' RPC",
            "title": "CreateRequest is used to create an instance of workload",
            "x-displayname": "Create Request",
            "x-ves-proto-message": "ves.io.schema.views.workload.CreateRequest",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectCreateMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the workload ",
                    "title": "spec",
                    "$ref": "#/definitions/viewsworkloadCreateSpecType",
                    "x-displayname": "Spec"
                }
            }
        },
        "workloadCreateResponse": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.views.workload.CreateResponse",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the workload ",
                    "title": "spec",
                    "$ref": "#/definitions/viewsworkloadGetSpecType",
                    "x-displayname": "Spec"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "workloadDeleteRequest": {
            "type": "object",
            "description": "This is the input message of the 'Delete' RPC.",
            "title": "DeleteRequest is used to delete a workload",
            "x-displayname": "Delete Request",
            "x-ves-proto-message": "ves.io.schema.views.workload.DeleteRequest",
            "properties": {
                "fail_if_referred": {
                    "type": "boolean",
                    "description": " Fail the delete operation if this object is being referred by other objects",
                    "title": "fail_if_referred",
                    "format": "boolean",
                    "x-displayname": "Fail-If-Referred"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the configuration object\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace in which the configuration object is present\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                }
            }
        },
        "workloadDeployCESiteType": {
            "type": "object",
            "description": "This defines a way to deploy a workload on specific Customer sites",
            "title": "DeployCESiteType",
            "x-displayname": "Customer Sites",
            "x-ves-proto-message": "ves.io.schema.views.workload.DeployCESiteType",
            "properties": {
                "site": {
                    "type": "array",
                    "description": " Which customer sites should this workload be deployed\nRequired: YES",
                    "title": "Site",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "List of Customer Sites to Deploy",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadDeployCEVirtualSiteType": {
            "type": "object",
            "description": "This defines a way to deploy a workload on specific Customer virtual sites",
            "title": "DeployCEVirtualSiteType",
            "x-displayname": "Customer Virtual Sites",
            "x-ves-proto-message": "ves.io.schema.views.workload.DeployCEVirtualSiteType",
            "properties": {
                "virtual_site": {
                    "type": "array",
                    "description": " Which customer virtual sites should this workload be deployed\nRequired: YES",
                    "title": "Virtual Site",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "List of Customer Virtual Sites to Deploy",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadDeployOptionsType": {
            "type": "object",
            "description": "Deploy Options are used to configure the workload deployment options",
            "title": "DeployOptionsType",
            "x-displayname": "Deploy Options",
            "x-ves-oneof-field-deploy_choice": "[\"all_res\",\"default_virtual_sites\",\"deploy_ce_sites\",\"deploy_ce_virtual_sites\",\"deploy_re_sites\",\"deploy_re_virtual_sites\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.DeployOptionsType",
            "properties": {
                "all_res": {
                    "description": "Exclusive with [default_virtual_sites deploy_ce_sites deploy_ce_virtual_sites deploy_re_sites deploy_re_virtual_sites]\nx-displayName: \"All Regional Edges\"\nDeploy the workload on all Regional Edges",
                    "title": "All REs",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "default_virtual_sites": {
                    "description": "Exclusive with [all_res deploy_ce_sites deploy_ce_virtual_sites deploy_re_sites deploy_re_virtual_sites]\nx-displayName: \"Default Virtual Sites\"\nDeploy the workload on virtual sites referred by the Virtual Kubernetes",
                    "title": "Default Virtual Sites",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "deploy_ce_sites": {
                    "description": "Exclusive with [all_res default_virtual_sites deploy_ce_virtual_sites deploy_re_sites deploy_re_virtual_sites]\nx-displayName: \"Customer Sites\"\nDeploy the workload on specific Customer sites",
                    "title": "Deploy Customer Sites",
                    "$ref": "#/definitions/workloadDeployCESiteType"
                },
                "deploy_ce_virtual_sites": {
                    "description": "Exclusive with [all_res default_virtual_sites deploy_ce_sites deploy_re_sites deploy_re_virtual_sites]\nx-displayName: \"Customer Virtual Sites\"\nDeploy the workload on specific Customer virtual sites",
                    "title": "Deploy Customer Virtual Sites",
                    "$ref": "#/definitions/workloadDeployCEVirtualSiteType"
                },
                "deploy_re_sites": {
                    "description": "Exclusive with [all_res default_virtual_sites deploy_ce_sites deploy_ce_virtual_sites deploy_re_virtual_sites]\nx-displayName: \"Regional Edge Sites\"\nDeploy the workload on specific Regional Edge sites",
                    "title": "Deploy Regional Edge Sites",
                    "$ref": "#/definitions/workloadDeployRESiteType"
                },
                "deploy_re_virtual_sites": {
                    "description": "Exclusive with [all_res default_virtual_sites deploy_ce_sites deploy_ce_virtual_sites deploy_re_sites]\nx-displayName: \"Regional Edge Virtual Sites\"\nDeploy the workload on specific Regional Edge virtual sites",
                    "title": "Deploy Regional Edge Virtual Sites",
                    "$ref": "#/definitions/workloadDeployREVirtualSiteType"
                }
            }
        },
        "workloadDeployRESiteType": {
            "type": "object",
            "description": "This defines a way to deploy a workload on specific Regional Edge sites",
            "title": "DeployRESiteType",
            "x-displayname": "Regional Edge Sites",
            "x-ves-proto-message": "ves.io.schema.views.workload.DeployRESiteType",
            "properties": {
                "site": {
                    "type": "array",
                    "description": " Which regional edge sites should this workload be deployed\nRequired: YES",
                    "title": "Site",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "List of Regional Edge Sites to Deploy",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadDeployREVirtualSiteType": {
            "type": "object",
            "description": "This defines a way to deploy a workload on specific Regional Edge virtual sites",
            "title": "DeployREVirtualSiteType",
            "x-displayname": "Regional Edge Virtual Sites",
            "x-ves-proto-message": "ves.io.schema.views.workload.DeployREVirtualSiteType",
            "properties": {
                "virtual_site": {
                    "type": "array",
                    "description": " Which regional edge virtual sites should this workload be deployed\nRequired: YES",
                    "title": "Virtual Site",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "List of Regional Edge Virtual Sites to Deploy",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadEmptyDirectoryVolumeType": {
            "type": "object",
            "description": "Volume containing a temporary directory whose lifetime is the same as a replica of a workload",
            "title": "EmptyDirectoryVolumeType",
            "x-displayname": "Empty Directory Volume",
            "x-ves-proto-message": "ves.io.schema.views.workload.EmptyDirectoryVolumeType",
            "properties": {
                "mount": {
                    "description": " Volume mount associated with the empty directory\nRequired: YES",
                    "title": "Volume Mount",
                    "$ref": "#/definitions/workloadVolumeMountType",
                    "x-displayname": "Volume Mount",
                    "x-ves-required": "true"
                },
                "size_limit": {
                    "type": "number",
                    "description": "\nRequired: YES",
                    "title": "Size",
                    "format": "double",
                    "x-displayname": "Size Limit (in GiB)",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadEnvironmentVariableType": {
            "type": "object",
            "description": "Environment Variable",
            "title": "EnvironmentVariableType",
            "x-displayname": "Environment Variable",
            "x-ves-proto-message": "ves.io.schema.views.workload.EnvironmentVariableType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Name of Environment Variable.",
                    "title": "Name",
                    "x-displayname": "Name"
                },
                "value": {
                    "type": "string",
                    "description": " Value of Environment Variable.",
                    "title": "Value",
                    "x-displayname": "Value"
                }
            }
        },
        "workloadEphemeralStorageVolumeType": {
            "type": "object",
            "description": "Ephemeral storage volume configuration for the workload",
            "title": "EphemeralStorageVolumeType",
            "x-displayname": "Ephemeral Storage Volume",
            "x-ves-oneof-field-volume_choice": "[\"empty_dir\",\"host_path\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.EphemeralStorageVolumeType",
            "properties": {
                "empty_dir": {
                    "description": "Exclusive with [host_path]\nx-displayName: \"Empty Directory Volume\"\nVolume containing a temporary directory whose lifetime is the same as a replica of a workload",
                    "title": "EmptyDirectoryVolumeType",
                    "$ref": "#/definitions/workloadEmptyDirectoryVolumeType"
                },
                "host_path": {
                    "description": "Exclusive with [empty_dir]\nx-displayName: \"HostPath Volume\"\nVolume containing a host mapped path into the workload",
                    "title": "HostPathVolumeType",
                    "$ref": "#/definitions/workloadHostPathVolumeType"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the volume",
                    "title": "Name",
                    "x-displayname": "Name"
                }
            }
        },
        "workloadExecHealthCheckType": {
            "type": "object",
            "description": "ExecHealthCheckType describes a health check based on \"run in container\" action.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.",
            "title": "ExecHealthCheckType",
            "x-displayname": "Exec Health Check",
            "x-ves-proto-message": "ves.io.schema.views.workload.ExecHealthCheckType",
            "properties": {
                "command": {
                    "type": "array",
                    "description": " Command is the command line to execute inside the container, the working directory for the\n command  is root ('/') in the container's filesystem. The command is simply exec'd, it is\n not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\n a shell, you need to explicitly call out to that shell.\nRequired: YES",
                    "title": "Command",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Command",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadGetResponse": {
            "type": "object",
            "description": "This is the output message of the 'Get' RPC",
            "title": "GetResponse is the shape of a read workload",
            "x-displayname": "Get Response",
            "x-ves-proto-message": "ves.io.schema.views.workload.GetResponse",
            "properties": {
                "create_form": {
                    "description": "Format used to create a new similar object",
                    "title": "create_form",
                    "$ref": "#/definitions/workloadCreateRequest",
                    "x-displayname": "CreateRequest Format"
                },
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "object": {
                    "title": "object",
                    "$ref": "#/definitions/viewsworkloadObject",
                    "x-displayname": "Object"
                },
                "referring_objects": {
                    "type": "array",
                    "description": "The set of objects that are referring to this object in their spec",
                    "title": "referring_objects",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Referring Objects"
                },
                "replace_form": {
                    "description": "Format to replace changeable values in object",
                    "title": "replace_form",
                    "$ref": "#/definitions/workloadReplaceRequest",
                    "x-displayname": "ReplaceRequest Format"
                },
                "resource_version": {
                    "type": "string",
                    "description": "Version of the object\n\nExample: -\"42\"-",
                    "title": "resource_version",
                    "x-displayname": "Resource Version",
                    "x-ves-example": "42"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the workload ",
                    "title": "spec",
                    "$ref": "#/definitions/viewsworkloadGetSpecType",
                    "x-displayname": "Spec"
                },
                "status": {
                    "type": "array",
                    "description": "The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/workloadStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "workloadGetResponseFormatCode": {
            "type": "string",
            "description": "x-displayName: \"Get Response Format\"\nThis is the various forms that can be requested to be sent in the GetResponse\n\n - GET_RSP_FORMAT_DEFAULT: x-displayName: \"Default Format\"\nDefault format of returned resource\n - GET_RSP_FORMAT_FOR_CREATE: x-displayName: \"Create request Format\"\nResponse should be in CreateRequest format\n - GET_RSP_FORMAT_FOR_REPLACE: x-displayName: \"Replace request format\"\nResponse should be in ReplaceRequest format\n - GET_RSP_FORMAT_STATUS: x-displayName: \"Status format\"\nResponse should be in StatusObject(s) format\n - GET_RSP_FORMAT_READ: x-displayName: \"GetSpecType format\"\nResponse should be in format of GetSpecType\n - GET_RSP_FORMAT_REFERRING_OBJECTS: x-displayName: \"Referring Objects\"\nResponse should have other objects referring to this object",
            "title": "GetResponseFormatCode",
            "enum": [
                "GET_RSP_FORMAT_DEFAULT",
                "GET_RSP_FORMAT_FOR_CREATE",
                "GET_RSP_FORMAT_FOR_REPLACE",
                "GET_RSP_FORMAT_STATUS",
                "GET_RSP_FORMAT_READ",
                "GET_RSP_FORMAT_REFERRING_OBJECTS"
            ],
            "default": "GET_RSP_FORMAT_DEFAULT"
        },
        "workloadHTTPHealthCheckType": {
            "type": "object",
            "description": "HTTPHealthCheckType describes a health check based on HTTP GET requests.",
            "title": "HTTPHealthCheckType",
            "x-displayname": "HTTP Health Check",
            "x-ves-proto-message": "ves.io.schema.views.workload.HTTPHealthCheckType",
            "properties": {
                "headers": {
                    "type": "object",
                    "description": " Specifies a list of HTTP headers that should be added to each request that is sent to the\n health checked container. This is a list of key-value pairs.",
                    "title": "Headers to add in health check request",
                    "x-displayname": "Request Headers to Add"
                },
                "host_header": {
                    "type": "string",
                    "description": " The value of the host header in the HTTP health check request.\n\nExample: - \"one.volterra.com\"-",
                    "title": "Host Header",
                    "x-displayname": "Host Header",
                    "x-ves-example": "one.volterra.com"
                },
                "path": {
                    "type": "string",
                    "description": " Path to access on the HTTP server.\nRequired: YES",
                    "title": "Path",
                    "x-displayname": "Path",
                    "x-ves-required": "true"
                },
                "port": {
                    "description": " Name or number of the port to access on the container.\nRequired: YES",
                    "title": "Port",
                    "$ref": "#/definitions/workloadPortChoiceType",
                    "x-displayname": "Port",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadHTTPLoadBalancerType": {
            "type": "object",
            "description": "\nHTTP/HTTPS Load balancer",
            "title": "HTTP/HTTPS Load balancer",
            "x-displayname": "HTTP/HTTPS Load Balancer",
            "x-ves-oneof-field-loadbalancer_type": "[\"http\",\"https\",\"https_auto_cert\"]",
            "x-ves-oneof-field-route_choice": "[\"default_route\",\"specific_routes\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.HTTPLoadBalancerType",
            "properties": {
                "default_route": {
                    "description": "Exclusive with [specific_routes]\nx-displayName: \"Default Route\"\nDefault route matching all APIs",
                    "title": "Default Route",
                    "$ref": "#/definitions/workloadMatchAllRouteType"
                },
                "domains": {
                    "type": "array",
                    "description": " A list of domains (host/authority header) that will be matched to loadbalancer.\n Wildcard hosts are supported in the suffix or prefix form\n\n Domain search order:\n  1. Exact domain names: --www.foo.com--.\n  2. Prefix domain wildcards: --*.foo.com-- or --*-bar.foo.com--.\n  3. Special wildcard --*-- matching any domain.\n\n Wildcard will not match empty string.\n e.g. --*-bar.foo.com-- will match --baz-bar.foo.com-- but not ---bar.foo.com--.\n The longest wildcards match first.\n\n Domains are also used for SNI matching if the loadbalancer type is HTTPS\n Domains also indicate the list of names for which DNS resolution will be done by VER\n\nExample: - \"www.foo.com\"-\nRequired: YES",
                    "title": "Domains",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Domains",
                    "x-ves-example": "www.foo.com",
                    "x-ves-required": "true"
                },
                "http": {
                    "description": "Exclusive with [https https_auto_cert]\nx-displayName: \"HTTP\"\nHTTP Load balancer.",
                    "title": "HTTP",
                    "$ref": "#/definitions/http_loadbalancerProxyTypeHttp"
                },
                "https": {
                    "description": "Exclusive with [http https_auto_cert]\nx-displayName: \"HTTPS with Custom Certificate\"\nHTTPS Load balancer with a custom public/private certificate.\nThis is also known as BYOC (Bring Your Own Certificate).\nUser is responsible for managing DNS to this Load Balancer.",
                    "title": "HTTPS",
                    "$ref": "#/definitions/http_loadbalancerProxyTypeHttps"
                },
                "https_auto_cert": {
                    "description": "Exclusive with [http https]\nx-displayName: \"HTTPS with Automatic Certificate\"\nHTTPS Load balancer with automatic public certificate provisioning.\nThis requires the domain to be delegated to Volterra using Delegated Domain feature.\nDNS records will be managed by Volterra.",
                    "title": "HTTPS",
                    "$ref": "#/definitions/http_loadbalancerProxyTypeHttpsAutoCerts"
                },
                "specific_routes": {
                    "description": "Exclusive with [default_route]\nx-displayName: \"Specific Routes\"\nRoutes matching specific APIs",
                    "title": "Specific Routes",
                    "$ref": "#/definitions/viewsworkloadRouteType"
                }
            }
        },
        "workloadHealthCheckType": {
            "type": "object",
            "description": "HealthCheckType describes a health check to be performed against a container to determine whether it has\nstarted up or is alive or ready to receive traffic",
            "title": "HealthCheckType",
            "x-displayname": "Health Check",
            "x-ves-oneof-field-health_check_choice": "[\"exec_health_check\",\"http_health_check\",\"tcp_health_check\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.HealthCheckType",
            "properties": {
                "exec_health_check": {
                    "description": "Exclusive with [http_health_check tcp_health_check]\nx-displayName: \"Exec Health Check\"\nSpecifies the run in container action to use for health check requests\nExit status of 0 is treated as live/healthy and non-zero is unhealthy",
                    "title": "ExecHealthCheck",
                    "$ref": "#/definitions/workloadExecHealthCheckType"
                },
                "healthy_threshold": {
                    "type": "integer",
                    "description": " Number of consecutive successful responses after having failed before declaring healthy.\n In other words, this is the number of healthy health checks required before marking\n healthy. Note that during startup and liveliness, only a single successful health check is\n required to mark a container healthy.\n\nExample: - \"2\"-\nRequired: YES",
                    "title": "HealthyThreshold",
                    "format": "int64",
                    "x-displayname": "Healthy Threshold",
                    "x-ves-example": "2",
                    "x-ves-required": "true"
                },
                "http_health_check": {
                    "description": "Exclusive with [exec_health_check tcp_health_check]\nx-displayName: \"HTTP Health Check\"\nSpecifies details for HTTP GET health check requests",
                    "title": "HttpHealthCheck",
                    "$ref": "#/definitions/workloadHTTPHealthCheckType"
                },
                "initial_delay": {
                    "type": "integer",
                    "description": " Number of seconds after the container has started before health checks are initiated\n\nExample: - \"30\"-",
                    "title": "InitialDelay",
                    "format": "int64",
                    "x-displayname": "Initial Delay",
                    "x-ves-example": "30"
                },
                "interval": {
                    "type": "integer",
                    "description": " Time interval in seconds between two health check requests.\n\nExample: - \"10\"-\nRequired: YES",
                    "title": "Interval",
                    "format": "int64",
                    "x-displayname": "Interval",
                    "x-ves-example": "10",
                    "x-ves-required": "true"
                },
                "tcp_health_check": {
                    "description": "Exclusive with [exec_health_check http_health_check]\nx-displayName: \"TCP Health Check\"\nSpecifies port to use for TCP connection for health checks",
                    "title": "TCPHealthCheck",
                    "$ref": "#/definitions/workloadTCPHealthCheckType"
                },
                "timeout": {
                    "type": "integer",
                    "description": " Timeout in seconds to wait for successful response. In other words, it is\n the time to wait for a health check response. If the timeout is reached the\n health check attempt will be considered a failure.\n\nExample: - \"3\"-\nRequired: YES",
                    "title": "Timeout",
                    "format": "int64",
                    "x-displayname": "Timeout",
                    "x-ves-example": "3",
                    "x-ves-required": "true"
                },
                "unhealthy_threshold": {
                    "type": "integer",
                    "description": " Number of consecutive failed responses before declaring unhealthy. In other words, this is\n the number of unhealthy health checks required before a container is marked unhealthy.\n\nExample: - \"5\"-\nRequired: YES",
                    "title": "UnhealthyThreshold",
                    "format": "int64",
                    "x-displayname": "Unhealthy Threshold",
                    "x-ves-example": "5",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadHostPathVolumeType": {
            "type": "object",
            "description": "Volume containing a host mapped path into the workload",
            "title": "HostPathVolumeType",
            "x-displayname": "HostPath Volume",
            "x-ves-proto-message": "ves.io.schema.views.workload.HostPathVolumeType",
            "properties": {
                "mount": {
                    "description": " Volume mount associated with the host path\nRequired: YES",
                    "title": "Volume Mount",
                    "$ref": "#/definitions/workloadVolumeMountType",
                    "x-displayname": "Volume Mount",
                    "x-ves-required": "true"
                },
                "path": {
                    "type": "string",
                    "description": " Path of the directory on the host\nRequired: YES",
                    "title": "Path",
                    "x-displayname": "Path",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadImagePullPolicyType": {
            "type": "string",
            "description": "Image pull policy type enumerates the policy choices to use for pulling the image prior to starting the workload\n\n - IMAGE_PULL_POLICY_DEFAULT: Default\n\nDefault will always pull image if :latest tag is specified in image name. If :latest tag is not specified in image name, it will pull image only if it\ndoes not already exist on the node\n - IMAGE_PULL_POLICY_IF_NOT_PRESENT: IfNotPresent\n\nOnly pull the image if it does not already exist on the node\n - IMAGE_PULL_POLICY_ALWAYS: Always\n\nAlways pull the image\n - IMAGE_PULL_POLICY_NEVER: Never\n\nNever pull the image",
            "title": "ImagePullPolicyType",
            "enum": [
                "IMAGE_PULL_POLICY_DEFAULT",
                "IMAGE_PULL_POLICY_IF_NOT_PRESENT",
                "IMAGE_PULL_POLICY_ALWAYS",
                "IMAGE_PULL_POLICY_NEVER"
            ],
            "default": "IMAGE_PULL_POLICY_DEFAULT",
            "x-displayname": "Image Pull Policy Type",
            "x-ves-proto-enum": "ves.io.schema.views.workload.ImagePullPolicyType"
        },
        "workloadImageType": {
            "type": "object",
            "description": "ImageType configures the image to use, how to pull the image, and the associated secrets to use if any",
            "title": "ImageType",
            "x-displayname": "Image Configuration",
            "x-ves-oneof-field-registry_choice": "[\"container_registry\",\"public\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.ImageType",
            "properties": {
                "container_registry": {
                    "description": "Exclusive with [public]\nx-displayName: \"Private Registry\"\nPull image from a private container registry. Private registries include Amazon ECR, Azure Container Registry,\nQuay Enterprise, Docker Hub, GCP Container Registry",
                    "title": "Private Registry",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "name": {
                    "type": "string",
                    "description": " Name is a container image which are usually given a name such as alpine, ubuntu, or quay.io/etcd:0.13.\n The format is registry/image:tag or registry/image@image-digest. If registry is not specified, the\n Docker public registry is assumed. If tag is not specified, latest is assumed.\n\nExample: - \"quay.io/etcd:0.13\"-\nRequired: YES",
                    "title": "Name",
                    "x-displayname": "Image Name",
                    "x-ves-example": "quay.io/etcd:0.13",
                    "x-ves-required": "true"
                },
                "public": {
                    "description": "Exclusive with [container_registry]\nx-displayName: \"Public Registry\"\nPull image from a public registry like Docker",
                    "title": "Public Registry",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "pull_policy": {
                    "description": " Pull Policy determines the policy to use for pulling the image prior to starting the service",
                    "title": "PullPolicy",
                    "$ref": "#/definitions/workloadImagePullPolicyType",
                    "x-displayname": "Select Image Pull Policy"
                }
            }
        },
        "workloadJobType": {
            "type": "object",
            "description": "Jobs are used for running batch processing tasks and run to completion. Jobs are generally used for tasks\nlike report generation, billing, parallel data processing, ETL processing, etc.",
            "x-ves-proto-message": "ves.io.schema.views.workload.JobType",
            "properties": {
                "configuration": {
                    "description": " Configuration parameters for the job",
                    "title": "Configuration Parameters",
                    "$ref": "#/definitions/workloadConfigurationParametersType",
                    "x-displayname": "Configuration Parameters"
                },
                "containers": {
                    "type": "array",
                    "description": " Containers to use for the job\nRequired: YES",
                    "title": "Containers",
                    "items": {
                        "$ref": "#/definitions/workloadContainerType"
                    },
                    "x-displayname": "Containers",
                    "x-ves-required": "true"
                },
                "deploy_options": {
                    "description": " Deploy options for the job are used to decide where and how to deploy the job\nRequired: YES",
                    "title": "Deploy Options",
                    "$ref": "#/definitions/workloadDeployOptionsType",
                    "x-displayname": "Deploy Options",
                    "x-ves-required": "true"
                },
                "num_replicas": {
                    "type": "integer",
                    "description": " Number of replicas of the batch job to spawn per site\n\nExample: - \"2\"-",
                    "title": "Number of Replicas",
                    "format": "int32",
                    "x-displayname": "Number of Replicas",
                    "x-ves-example": "2"
                },
                "volumes": {
                    "type": "array",
                    "description": " Volumes for the job",
                    "title": "Volumes",
                    "items": {
                        "$ref": "#/definitions/workloadStorageVolumeType"
                    },
                    "x-displayname": "Volumes"
                }
            }
        },
        "workloadListResponse": {
            "type": "object",
            "description": "This is the output message of 'List' RPC.",
            "title": "ListResponse is the collection of workload",
            "x-displayname": "List Response",
            "x-ves-proto-message": "ves.io.schema.views.workload.ListResponse",
            "properties": {
                "errors": {
                    "type": "array",
                    "description": " Errors(if any) while listing items from collection",
                    "title": "errors",
                    "items": {
                        "$ref": "#/definitions/schemaErrorType"
                    },
                    "x-displayname": "Errors"
                },
                "items": {
                    "type": "array",
                    "description": " items represents the collection in response",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/workloadListResponseItem"
                    },
                    "x-displayname": "Items"
                }
            }
        },
        "workloadListResponseItem": {
            "type": "object",
            "description": "By default a summary of workload is returned in 'List'. By setting\n'report_fields' in the ListRequest more details of each item can be got.",
            "title": "ListResponseItem is an individual item in a collection of workload",
            "x-displayname": "List Item",
            "x-ves-proto-message": "ves.io.schema.views.workload.ListResponseItem",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " The set of annotations present on this workload",
                    "title": "annotations",
                    "x-displayname": "Annotations"
                },
                "description": {
                    "type": "string",
                    "description": " The description set for this workload",
                    "title": "description",
                    "x-displayname": "Description"
                },
                "disabled": {
                    "type": "boolean",
                    "description": " A value of true indicates workload is administratively disabled",
                    "title": "disabled",
                    "format": "boolean",
                    "x-displayname": "Disabled"
                },
                "get_spec": {
                    "description": " If ListRequest has any specified report_fields, it will appear in object",
                    "title": "get_spec",
                    "$ref": "#/definitions/viewsworkloadGetSpecType",
                    "x-displayname": "Get Specification"
                },
                "labels": {
                    "type": "object",
                    "description": " The set of labels present on this workload",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "metadata": {
                    "description": " If list request has report_fields set then metadata will\n contain all the metadata associated with the object.",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "name": {
                    "type": "string",
                    "description": " The name of this workload\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " The namespace this item belongs to\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "object": {
                    "description": " If ListRequest has any specified report_fields, it will appear in object\n DEPRECATED by get_spec, metadata and system_metadata",
                    "title": "object",
                    "$ref": "#/definitions/viewsworkloadObject",
                    "x-displayname": "Object"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "status_set": {
                    "type": "array",
                    "description": " The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/workloadStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " If list request has report_fields set then system_metadata will\n contain all the system generated details of this object.",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                },
                "tenant": {
                    "type": "string",
                    "description": " The tenant this item belongs to\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " The unique uid of this workload\n\nExample: - \"d27938ba-967e-40a7-9709-57b8627f9f75\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d27938ba-967e-40a7-9709-57b8627f9f75"
                }
            }
        },
        "workloadMatchAllRouteType": {
            "type": "object",
            "description": "Default route matching all APIs",
            "title": "MatchAllRouteType",
            "x-displayname": "Default Route",
            "x-ves-oneof-field-host_rewrite_params": "[\"auto_host_rewrite\",\"disable_host_rewrite\",\"host_rewrite\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.MatchAllRouteType",
            "properties": {
                "auto_host_rewrite": {
                    "description": "Exclusive with [disable_host_rewrite host_rewrite]\nx-displayName: \"Automatic Host Rewrite\"\nHost header will be swapped with hostname of upstream host chosen by the cluster",
                    "title": "Auto Host Rewrite",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "disable_host_rewrite": {
                    "description": "Exclusive with [auto_host_rewrite host_rewrite]\nx-displayName: \"Disable Host Rewrite\"\nHost header is not modified",
                    "title": "Disable Host Rewrite",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "host_rewrite": {
                    "type": "string",
                    "description": "Exclusive with [auto_host_rewrite disable_host_rewrite]\nx-displayName: \"Host Rewrite Value\"\nx-example: \"one.volterra.com\"\nHost header will be swapped with this value",
                    "title": "HostRewrite"
                }
            }
        },
        "workloadMultiPortType": {
            "type": "object",
            "description": "Multiple ports",
            "title": "MultiPortType",
            "x-displayname": "Multiple Ports",
            "x-ves-proto-message": "ves.io.schema.views.workload.MultiPortType",
            "properties": {
                "ports": {
                    "type": "array",
                    "description": " Ports to advertise\nRequired: YES",
                    "title": "Ports",
                    "items": {
                        "$ref": "#/definitions/workloadPortType"
                    },
                    "x-displayname": "Ports",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadPersistentStorageAccessModeType": {
            "type": "string",
            "description": "Persistence storage access mode is used to configure access mode for persistent storage\n\n - ACCESS_MODE_READ_WRITE_ONCE: Read Write Once\n\nRead Write Once is used to mount persistent storage in read/write mode to exactly 1 host\n - ACCESS_MODE_READ_WRITE_MANY: Read Write Many\n\nRead Write Many is used to mount persistent storage in read/write mode to many hosts\n - ACCESS_MODE_READ_ONLY_MANY: Read Only Many\n\nRead Only Many is used to mount persistent storage in read-only mode to many hosts",
            "title": "PersistentStorageAccessModeType",
            "enum": [
                "ACCESS_MODE_READ_WRITE_ONCE",
                "ACCESS_MODE_READ_WRITE_MANY",
                "ACCESS_MODE_READ_ONLY_MANY"
            ],
            "default": "ACCESS_MODE_READ_WRITE_ONCE",
            "x-displayname": "Persistent Storage Access Mode",
            "x-ves-proto-enum": "ves.io.schema.views.workload.PersistentStorageAccessModeType"
        },
        "workloadPersistentStorageType": {
            "type": "object",
            "description": "Persistent storage configuration is used to configure Persistent Volume Claim (PVC)",
            "title": "PersistentStorageType",
            "x-displayname": "Persistence Storage Configuration",
            "x-ves-oneof-field-class_name_choice": "[\"class_name\",\"default\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.PersistentStorageType",
            "properties": {
                "access_mode": {
                    "description": " AccessMode is used to configure access mode for the persistent storage",
                    "title": "Access Mode",
                    "$ref": "#/definitions/workloadPersistentStorageAccessModeType",
                    "x-displayname": "Access Mode"
                },
                "class_name": {
                    "type": "string",
                    "description": "Exclusive with [default]\nx-displayName: \"Class Name\"\nUse the specified class name",
                    "title": "Class Name"
                },
                "default": {
                    "description": "Exclusive with [class_name]\nx-displayName: \"Default Class\"\nDefault class",
                    "title": "Default Class",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "storage_size": {
                    "type": "number",
                    "description": " Size in GiB of the persistent storage\nRequired: YES",
                    "title": "Size (in GiB)",
                    "format": "double",
                    "x-displayname": "Size (in GiB)",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadPersistentStorageVolumeType": {
            "type": "object",
            "description": "Volume containing the Persistent Storage for the workload",
            "title": "PersistentStorageVolumeType",
            "x-displayname": "Persistent Storage Volume",
            "x-ves-proto-message": "ves.io.schema.views.workload.PersistentStorageVolumeType",
            "properties": {
                "mount": {
                    "description": " Volume mount associated with the persistent storage\nRequired: YES",
                    "title": "Volume Mount",
                    "$ref": "#/definitions/workloadVolumeMountType",
                    "x-displayname": "Volume Mount",
                    "x-ves-required": "true"
                },
                "storage": {
                    "description": " Persistent storage configuration\nRequired: YES",
                    "title": "Storage",
                    "$ref": "#/definitions/workloadPersistentStorageType",
                    "x-displayname": "Storage Configuration",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadPersistentVolumeType": {
            "type": "object",
            "description": "Persistent storage volume configuration for the workload",
            "title": "PersistentVolumeType",
            "x-displayname": "Persistent Storage Volume",
            "x-ves-proto-message": "ves.io.schema.views.workload.PersistentVolumeType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Name of the volume\nRequired: YES",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-required": "true"
                },
                "persistent_volume": {
                    "description": " Volume containing the Persistent Storage for the workload\nRequired: YES",
                    "title": "PersistentStorageVolumeType",
                    "$ref": "#/definitions/workloadPersistentStorageVolumeType",
                    "x-displayname": "Persistent Storage Volume",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadPortChoiceType": {
            "type": "object",
            "description": "Port",
            "title": "PortChoiceType",
            "x-displayname": "Port",
            "x-ves-oneof-field-port_choice": "[\"name\",\"num\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.PortChoiceType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Exclusive with [num]\nx-displayName: \"Port Name\"\nPort Name",
                    "title": "Name"
                },
                "num": {
                    "type": "integer",
                    "description": "Exclusive with [name]\nx-displayName: \"Port Number\"\nPort number",
                    "title": "Number",
                    "format": "int64"
                }
            }
        },
        "workloadPortInfoType": {
            "type": "object",
            "description": "Port information",
            "title": "PortInfoType",
            "x-displayname": "Port Information",
            "x-ves-displayorder": "1,2,3",
            "x-ves-oneof-field-target_port_choice": "[\"same_as_port\",\"target_port\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.PortInfoType",
            "properties": {
                "port": {
                    "type": "integer",
                    "description": " Port the workload can be reached on\n\nExample: - \"80\"-\nRequired: YES",
                    "title": "Port",
                    "format": "int64",
                    "x-displayname": "Port",
                    "x-ves-example": "80",
                    "x-ves-required": "true"
                },
                "protocol": {
                    "description": " Application protocol used by the workload",
                    "title": "Protocol",
                    "$ref": "#/definitions/workloadProtocolType",
                    "x-displayname": "Application Protocol"
                },
                "same_as_port": {
                    "description": "Exclusive with [target_port]\nx-displayName: \"Same as Port\"\nSame as Port",
                    "title": "Same as Port",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "target_port": {
                    "type": "integer",
                    "description": "Exclusive with [same_as_port]\nx-displayName: \"Different than Port\"\nPort the workload is listening on",
                    "title": "Port",
                    "format": "int64"
                }
            }
        },
        "workloadPortType": {
            "type": "object",
            "description": "Port of the workload",
            "title": "PortType",
            "x-displayname": "Port",
            "x-ves-displayorder": "1,2",
            "x-ves-proto-message": "ves.io.schema.views.workload.PortType",
            "properties": {
                "info": {
                    "description": " Information of the Port\nRequired: YES",
                    "title": "Port Information",
                    "$ref": "#/definitions/workloadPortInfoType",
                    "x-displayname": "Port Information",
                    "x-ves-required": "true"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the Port\nRequired: YES",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadProtocolType": {
            "type": "string",
            "description": "Type of protocol\n\n - PROTOCOL_TCP: TCP\n\nTCP\n - PROTOCOL_HTTP: HTTP\n\nHTTP\n - PROTOCOL_HTTP2: HTTP2\n\nHTTP2\n - PROTOCOL_TLS_WITH_SNI: TLS with SNI\n\nTLS with SNI\n - PROTOCOL_UDP: UDP\n\nUDP",
            "title": "Protocol Type",
            "enum": [
                "PROTOCOL_TCP",
                "PROTOCOL_HTTP",
                "PROTOCOL_HTTP2",
                "PROTOCOL_TLS_WITH_SNI",
                "PROTOCOL_UDP"
            ],
            "default": "PROTOCOL_TCP",
            "x-displayname": "Protocol Type",
            "x-ves-proto-enum": "ves.io.schema.views.workload.ProtocolType"
        },
        "workloadReplaceRequest": {
            "type": "object",
            "description": "This is the input message of the 'Replace' RPC",
            "title": "ReplaceRequest is used to replace contents of a workload",
            "x-displayname": "Replace Request",
            "x-ves-proto-message": "ves.io.schema.views.workload.ReplaceRequest",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectReplaceMetaType",
                    "x-displayname": "Metadata"
                },
                "resource_version": {
                    "type": "string",
                    "description": "If provided, do the replace operation if the configuration object is still at 'resource_version'\n\nExample: -\"42\"-",
                    "title": "resource_version",
                    "x-displayname": "Resource Version",
                    "x-ves-example": "42"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the workload ",
                    "title": "spec",
                    "$ref": "#/definitions/viewsworkloadReplaceSpecType",
                    "x-displayname": "Spec"
                }
            }
        },
        "workloadReplaceResponse": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.views.workload.ReplaceResponse"
        },
        "workloadRouteInfoType": {
            "type": "object",
            "description": "This defines various options to define a route",
            "title": "RouteInfoType",
            "x-displayname": "Route Information",
            "x-ves-oneof-field-choice": "[\"custom_route_object\",\"direct_response_route\",\"redirect_route\",\"simple_route\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.RouteInfoType",
            "properties": {
                "custom_route_object": {
                    "description": "Exclusive with [direct_response_route redirect_route simple_route]\nx-displayName: \"Custom Route Object\"\nA custom route uses a route object created outside of this view.",
                    "title": "RouteTypeCustomRoute",
                    "$ref": "#/definitions/http_loadbalancerRouteTypeCustomRoute"
                },
                "direct_response_route": {
                    "description": "Exclusive with [custom_route_object redirect_route simple_route]\nx-displayName: \"Direct Response Route\"\nA direct response route matches on path and/or HTTP method and responds directly to the matching traffic",
                    "title": "RouteTypeDirectResponse",
                    "$ref": "#/definitions/http_loadbalancerRouteTypeDirectResponse"
                },
                "redirect_route": {
                    "description": "Exclusive with [custom_route_object direct_response_route simple_route]\nx-displayName: \"Redirect Route\"\nA redirect route matches on path and/or HTTP method and redirects the matching traffic to a different URL",
                    "title": "RouteTypeRedirect",
                    "$ref": "#/definitions/http_loadbalancerRouteTypeRedirect"
                },
                "simple_route": {
                    "description": "Exclusive with [custom_route_object direct_response_route redirect_route]\nx-displayName: \"Simple Route\"\nA simple route matches on path and/or HTTP method and forwards the matching traffic to the workload",
                    "title": "RouteTypeSimple",
                    "$ref": "#/definitions/http_loadbalancerRouteTypeSimpleWithDefaultOriginPool"
                }
            }
        },
        "workloadSimpleServiceType": {
            "type": "object",
            "title": "SimpleService is a service having one container and one replica that is\ndeployed on all Regional Edges and advertised on Internet via HTTP loadbalancer\non default VIP",
            "x-ves-oneof-field-advertise_choice": "[\"do_not_advertise\",\"service_port\",\"simple_advertise\"]",
            "x-ves-oneof-field-persistence_choice": "[\"disabled\",\"enabled\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.SimpleServiceType",
            "properties": {
                "configuration": {
                    "description": " Configuration parameters for the service",
                    "title": "Configuration Parameters",
                    "$ref": "#/definitions/workloadConfigurationParametersType",
                    "x-displayname": "Configuration Parameters"
                },
                "container": {
                    "description": " Container information\nRequired: YES",
                    "title": "Container",
                    "$ref": "#/definitions/workloadContainerType",
                    "x-displayname": "Container Information",
                    "x-ves-required": "true"
                },
                "disabled": {
                    "description": "Exclusive with [enabled]\nx-displayName: \"Disabled\"\nDisabled",
                    "title": "Disabled",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "do_not_advertise": {
                    "description": "Exclusive with [service_port simple_advertise]\nx-displayName: \"Do Not Advertise\"\nDo not advertise the service",
                    "title": "Do Not Advertise",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "enabled": {
                    "description": "Exclusive with [disabled]\nx-displayName: \"Enabled\"",
                    "title": "Enabled",
                    "$ref": "#/definitions/workloadPersistentVolumeType"
                },
                "scale_to_zero": {
                    "type": "boolean",
                    "description": " Scale down replicas of the service to zero",
                    "title": "Scale down to zero",
                    "format": "boolean",
                    "x-displayname": "Scale Down to Zero"
                },
                "service_port": {
                    "type": "integer",
                    "description": "Exclusive with [do_not_advertise simple_advertise]\nx-displayName: \"Service Port\"\nService port to advertise on Internet via HTTP loadbalancer using port 80",
                    "title": "Service Port",
                    "format": "int64"
                },
                "simple_advertise": {
                    "description": "Exclusive with [do_not_advertise service_port]\nx-displayName: \"Domains and Service Port\"\nDomains and service port to advertise on Internet via HTTP loadbalancer using port 80",
                    "title": "Advertise Simple Service",
                    "$ref": "#/definitions/workloadAdvertiseSimpleServiceType"
                }
            }
        },
        "workloadSinglePortType": {
            "type": "object",
            "description": "Single port",
            "title": "SinglePortType",
            "x-displayname": "Port",
            "x-ves-proto-message": "ves.io.schema.views.workload.SinglePortType",
            "properties": {
                "info": {
                    "description": " Information of the Port\nRequired: YES",
                    "title": "Port Information",
                    "$ref": "#/definitions/workloadPortInfoType",
                    "x-displayname": "Port Information",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadStatefulServiceType": {
            "type": "object",
            "description": "StatefulService maintains per replica state and each replica has its own persistent storage. Each replica\nhas a unique network identity and stable storage. Stateful service are used for distributed stateful\napplications like cassandra, mongodb, redis, etc.",
            "x-ves-oneof-field-scaling_choice": "[\"num_replicas\",\"scale_to_zero\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.StatefulServiceType",
            "properties": {
                "advertise_options": {
                    "description": " Advertise options for the service control how the service is advertised\nRequired: YES",
                    "title": "Advertise Options",
                    "$ref": "#/definitions/workloadAdvertiseOptionsType",
                    "x-displayname": "Advertise Options",
                    "x-ves-required": "true"
                },
                "configuration": {
                    "description": " Configuration parameters for the service",
                    "title": "Configuration Parameters",
                    "$ref": "#/definitions/workloadConfigurationParametersType",
                    "x-displayname": "Configuration Parameters"
                },
                "containers": {
                    "type": "array",
                    "description": " Containers to use for service\nRequired: YES",
                    "title": "Containers",
                    "items": {
                        "$ref": "#/definitions/workloadContainerType"
                    },
                    "x-displayname": "Containers",
                    "x-ves-required": "true"
                },
                "deploy_options": {
                    "description": " Deploy options for the service are used to decide where and how to deploy the service\nRequired: YES",
                    "title": "Deploy Options",
                    "$ref": "#/definitions/workloadDeployOptionsType",
                    "x-displayname": "Deploy Options",
                    "x-ves-required": "true"
                },
                "num_replicas": {
                    "type": "integer",
                    "description": "Exclusive with [scale_to_zero]\nx-example: \"2\"\nx-displayName: \"Number of Replicas\"\nNumber of replicas of service to spawn per site",
                    "title": "Number of Replicas",
                    "format": "int32"
                },
                "persistent_volumes": {
                    "type": "array",
                    "description": " Persistent storage configuration for the service\nRequired: YES",
                    "title": "Persistence",
                    "items": {
                        "$ref": "#/definitions/workloadPersistentVolumeType"
                    },
                    "x-displayname": "Persistent Storage Configuration",
                    "x-ves-required": "true"
                },
                "scale_to_zero": {
                    "description": "Exclusive with [num_replicas]\nx-displayName: \"Scale Down to Zero\"\nSet number of replicas of service to spawn per site to zero",
                    "title": "Scale down to zero",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "volumes": {
                    "type": "array",
                    "description": " Ephemeral volumes for the service",
                    "title": "Ephemeral Storage Volumes",
                    "items": {
                        "$ref": "#/definitions/workloadEphemeralStorageVolumeType"
                    },
                    "x-displayname": "Ephemeral Volumes"
                }
            }
        },
        "workloadStatusObject": {
            "type": "object",
            "description": "Most recently observed status of the workload",
            "title": "Status of Workload",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.views.workload.StatusObject",
            "properties": {
                "child_objects": {
                    "type": "array",
                    "description": " Reference to Child Kubernetes Objects",
                    "title": "child_objects",
                    "items": {
                        "$ref": "#/definitions/schemaKubeRefType"
                    },
                    "x-displayname": "Child Kubernetes Objects"
                },
                "conditions": {
                    "type": "array",
                    "description": " Conditions",
                    "title": "conditions",
                    "items": {
                        "$ref": "#/definitions/schemaConditionType"
                    },
                    "x-displayname": "Conditions"
                },
                "metadata": {
                    "description": " Standard status's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaStatusMetaType",
                    "x-displayname": "Metadata"
                },
                "object_refs": {
                    "type": "array",
                    "description": " Object reference",
                    "title": "object_refs",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Config Object"
                }
            }
        },
        "workloadStorageVolumeType": {
            "type": "object",
            "description": "Storage volume configuration for the workload",
            "title": "StorageVolumeType",
            "x-displayname": "Storage Volume",
            "x-ves-oneof-field-volume_choice": "[\"empty_dir\",\"host_path\",\"persistent_volume\"]",
            "x-ves-proto-message": "ves.io.schema.views.workload.StorageVolumeType",
            "properties": {
                "empty_dir": {
                    "description": "Exclusive with [host_path persistent_volume]\nx-displayName: \"Empty Directory Volume\"\nVolume containing a temporary directory whose lifetime is the same as a replica of a workload",
                    "title": "EmptyDirectoryVolumeType",
                    "$ref": "#/definitions/workloadEmptyDirectoryVolumeType"
                },
                "host_path": {
                    "description": "Exclusive with [empty_dir persistent_volume]\nx-displayName: \"HostPath Volume\"\nVolume containing a host mapped path into the workload",
                    "title": "HostPathVolumeType",
                    "$ref": "#/definitions/workloadHostPathVolumeType"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the volume",
                    "title": "Name",
                    "x-displayname": "Name"
                },
                "persistent_volume": {
                    "description": "Exclusive with [empty_dir host_path]\nx-displayName: \"Persistent Storage Volume\"\nVolume containing the Persistent Storage for the workload",
                    "title": "PersistentStorageVolumeType",
                    "$ref": "#/definitions/workloadPersistentStorageVolumeType"
                }
            }
        },
        "workloadTCPHealthCheckType": {
            "type": "object",
            "description": "TCPHealthCheckType describes a health check based on opening a TCP connection",
            "title": "TCPHealthCheckType",
            "x-displayname": "TCP Health Check",
            "x-ves-proto-message": "ves.io.schema.views.workload.TCPHealthCheckType",
            "properties": {
                "port": {
                    "description": " Number or name of the port to access on the container.\nRequired: YES",
                    "title": "Port",
                    "$ref": "#/definitions/workloadPortChoiceType",
                    "x-displayname": "Port",
                    "x-ves-required": "true"
                }
            }
        },
        "workloadTCPLoadBalancerType": {
            "type": "object",
            "description": "TCP loadbalancer",
            "title": "TCPLoadBalancerType",
            "x-displayname": "TCP Load Balancer",
            "x-ves-proto-message": "ves.io.schema.views.workload.TCPLoadBalancerType",
            "properties": {
                "domains": {
                    "type": "array",
                    "description": " A list of additional domains (host/authority header) that will be matched to this loadbalancer.\n\n Domains are also used for SNI matching if the -with_sni- is true\n Domains also indicate the list of names for which DNS resolution will be done by VER\n\nExample: - \"www.foo.com\"-",
                    "title": "Domains",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Domains",
                    "x-ves-example": "www.foo.com"
                },
                "with_sni": {
                    "type": "boolean",
                    "description": " Set to true to enable TCP loadbalancer with SNI\n\nExample: - \"true\"-",
                    "title": "With SNI",
                    "format": "boolean",
                    "x-displayname": "With SNI",
                    "x-ves-example": "true"
                }
            }
        },
        "workloadVolumeMountModeType": {
            "type": "string",
            "description": "Mode in which the volume should be mounted to the workload\n\n - VOLUME_MOUNT_READ_ONLY: ReadOnly\n\nMount the volume in read-only mode\n - VOLUME_MOUNT_READ_WRITE: Read Write\n\nMount the volume in read-write mode",
            "title": "VolumeMountModeType",
            "enum": [
                "VOLUME_MOUNT_READ_ONLY",
                "VOLUME_MOUNT_READ_WRITE"
            ],
            "default": "VOLUME_MOUNT_READ_ONLY",
            "x-displayname": "Mode",
            "x-ves-proto-enum": "ves.io.schema.views.workload.VolumeMountModeType"
        },
        "workloadVolumeMountType": {
            "type": "object",
            "description": "Volume mount describes how volume is mounted inside a workload",
            "title": "VolumeMountType",
            "x-displayname": "Volume Mount",
            "x-ves-proto-message": "ves.io.schema.views.workload.VolumeMountType",
            "properties": {
                "mode": {
                    "description": " Mode of the volume",
                    "title": "Mode",
                    "$ref": "#/definitions/workloadVolumeMountModeType",
                    "x-displayname": "Mode"
                },
                "mount_path": {
                    "type": "string",
                    "description": " Path within the workload container at which the volume should be mounted. Must not contain ':'.\nRequired: YES",
                    "title": "MountPath",
                    "x-displayname": "Mount Path",
                    "x-ves-required": "true"
                },
                "sub_path": {
                    "type": "string",
                    "description": " Path within the volume from which the workload's volume should be mounted. Defaults to \"\" (volume's root).",
                    "title": "SubPath",
                    "x-displayname": "Sub Path"
                }
            }
        }
    },
    "x-displayname": "Workload",
    "x-ves-proto-file": "ves.io/schema/views/workload/public_crudapi.proto"
}`

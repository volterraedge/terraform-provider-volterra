// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/workload/public_custom_data_api.proto

// Workload
//
// x-displayName: "Workload"
// APIs to get the cpu, memory and the disk IO for the workloads in a given namespace

package workload

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Usage Type
//
// x-displayName: "Usage Type"
// List of usage types that can be queried
type UsageType int32

const (
	// x-displayName: "CPU Usage"
	// x-unit: "Number of cores"
	CPU_USAGE UsageType = 0
	// x-displayName: "Memory Usage"
	// x-unit: "Bytes"
	MEMORY_USAGE UsageType = 1
	// x-displayName: "Disk Reads"
	// x-unit: "Bytes per second"
	DISK_READS UsageType = 2
	// x-displayName: "Disk Writes"
	// x-unit: "Bytes per second"
	DISK_WRITES UsageType = 3
)

var UsageType_name = map[int32]string{
	0: "CPU_USAGE",
	1: "MEMORY_USAGE",
	2: "DISK_READS",
	3: "DISK_WRITES",
}

var UsageType_value = map[string]int32{
	"CPU_USAGE":    0,
	"MEMORY_USAGE": 1,
	"DISK_READS":   2,
	"DISK_WRITES":  3,
}

func (UsageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d83794e80dd68dc3, []int{0}
}

// Usage Label
//
// x-displayName: "Usage Label"
// Labels in usage metric
type UsageLabel int32

const (
	// x-displayName: "Namespace"
	NAMESPACE UsageLabel = 0
	// x-displayName: "Container"
	CONTAINER UsageLabel = 1
	// x-displayName: "Pod"
	POD UsageLabel = 2
	// x-displayName: "Site"
	SITE UsageLabel = 3
	// x-displayName: "Workload"
	WORKLOAD UsageLabel = 4
)

var UsageLabel_name = map[int32]string{
	0: "NAMESPACE",
	1: "CONTAINER",
	2: "POD",
	3: "SITE",
	4: "WORKLOAD",
}

var UsageLabel_value = map[string]int32{
	"NAMESPACE": 0,
	"CONTAINER": 1,
	"POD":       2,
	"SITE":      3,
	"WORKLOAD":  4,
}

func (UsageLabel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d83794e80dd68dc3, []int{1}
}

// Usage Request
//
// x-displayName: "Usage Request"
// Request to get workload usage in the given namespace
type UsageRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// namespace is used to scope the workload usage to a given namespace.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Label Filter
	//
	// x-displayName: "Filter"
	// x-example: "{POD=\"pod-1\"}"
	// filter is used to specify the list of matchers
	// syntax for filter := {[<matcher>]}
	// <matcher> := <label><operator>"<value>"
	//   <label> := string
	//     One or more labels defined in UsageLabel {CONTAINER, POD, SITE} can be specified in the filter.
	//   <value> := string
	//   <operator> := ["="|"!="|"=~"|"!~"]
	//     =  : equal to
	//     != : not equal to
	//     =~ : regex match
	//     !~ : not regex match
	//
	// Optional: If not specified, all workloads usage in the given namespace will be aggregated based on the group_by field.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Group by
	//
	// x-displayName: "Group By"
	// Aggregate data by zero or more labels {NAMESPACE, CONTAINER, POD, SITE}
	GroupBy []UsageLabel `protobuf:"varint,3,rep,packed,name=group_by,json=groupBy,proto3,enum=ves.io.schema.views.workload.UsageLabel" json:"group_by,omitempty"`
	// Field Selector
	//
	// x-displayName: "Field Selector"
	// x-required
	// Select fields to be returned in the response.
	// One or more fields in {CPU_USAGE, MEMORY_USAGE, DISK_READS, DISK_WRITES} can be specified.
	FieldSelector []UsageType `protobuf:"varint,4,rep,packed,name=field_selector,json=fieldSelector,proto3,enum=ves.io.schema.views.workload.UsageType" json:"field_selector,omitempty"`
	// Start time
	//
	// x-displayName: "Start Time"
	// x-example: "1570194000"
	//
	// start time of metric collection from which data will be considered to build graph.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time
	//
	// x-displayName: "End Time"
	// x-example: "1570197600"
	// end time of metric collection from which data will be considered to build graph.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Step
	//
	// x-displayName: "Step"
	// x-example: "5m"
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Optional: If not specified, then step size is evaluated to <end_time - start_time>
	Step string `protobuf:"bytes,7,opt,name=step,proto3" json:"step,omitempty"`
	// Range
	//
	// x-displayName: "Range"
	// x-example: "10m"
	// range decides how far to go back in time to fetch values for each step.
	// For example, if the range is 5m, then for step t1, query will be evaluated for t1-5m and for
	// t2, query will be evaluated for t2-5m and so on.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Note: For non-timeseries query, i.e., for step=end_time-start_time, range should be set to end_time-start_time
	//
	// Optional: If not specified, range is set to 5m
	Range string `protobuf:"bytes,8,opt,name=range,proto3" json:"range,omitempty"`
	// Include System Workloads
	//
	// x-displayName: "Include System Workloads"
	// allows user to specify if the usage of system workloads (such as pods running in volterra namespaces and the kubernetes pods) should be included in the response.
	// This field is applicable only in the `system` namespace where the response contains data across all namespaces.
	//
	// Optional: If not specified, only the workloads running in the customer namespaces would be returned in the response.
	IncludeSystemWorkloads bool `protobuf:"varint,9,opt,name=include_system_workloads,json=includeSystemWorkloads,proto3" json:"include_system_workloads,omitempty"`
}

func (m *UsageRequest) Reset()      { *m = UsageRequest{} }
func (*UsageRequest) ProtoMessage() {}
func (*UsageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d83794e80dd68dc3, []int{0}
}
func (m *UsageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsageRequest.Merge(m, src)
}
func (m *UsageRequest) XXX_Size() int {
	return m.Size()
}
func (m *UsageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UsageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UsageRequest proto.InternalMessageInfo

func (m *UsageRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UsageRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *UsageRequest) GetGroupBy() []UsageLabel {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *UsageRequest) GetFieldSelector() []UsageType {
	if m != nil {
		return m.FieldSelector
	}
	return nil
}

func (m *UsageRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *UsageRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *UsageRequest) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

func (m *UsageRequest) GetRange() string {
	if m != nil {
		return m.Range
	}
	return ""
}

func (m *UsageRequest) GetIncludeSystemWorkloads() bool {
	if m != nil {
		return m.IncludeSystemWorkloads
	}
	return false
}

// Usage Response
//
// x-displayName: "Usage Response"
// Workload usage response
type UsageResponse struct {
	// Data
	//
	// x-displayName: "Data"
	// Data contains time-series data for the workload usage
	Data []*UsageData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *UsageResponse) Reset()      { *m = UsageResponse{} }
func (*UsageResponse) ProtoMessage() {}
func (*UsageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d83794e80dd68dc3, []int{1}
}
func (m *UsageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsageResponse.Merge(m, src)
}
func (m *UsageResponse) XXX_Size() int {
	return m.Size()
}
func (m *UsageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UsageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UsageResponse proto.InternalMessageInfo

func (m *UsageResponse) GetData() []*UsageData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Usage Type Data
//
// x-displayName: "Usage Type Data"
// Usage Type Data contains key/value pair that uniquely identifies a workload in the response and the corresponding metric data.
type UsageTypeData struct {
	// Key
	//
	// x-displayName: "Key"
	// Key contains the name/value pair.
	// "name" is the label name defined in "UsageLabel"
	Key map[string]string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Value
	//
	// x-displayName: "Value"
	// List of metric values.
	Value []*schema.MetricValue `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (m *UsageTypeData) Reset()      { *m = UsageTypeData{} }
func (*UsageTypeData) ProtoMessage() {}
func (*UsageTypeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d83794e80dd68dc3, []int{2}
}
func (m *UsageTypeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsageTypeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsageTypeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsageTypeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsageTypeData.Merge(m, src)
}
func (m *UsageTypeData) XXX_Size() int {
	return m.Size()
}
func (m *UsageTypeData) XXX_DiscardUnknown() {
	xxx_messageInfo_UsageTypeData.DiscardUnknown(m)
}

var xxx_messageInfo_UsageTypeData proto.InternalMessageInfo

func (m *UsageTypeData) GetKey() map[string]string {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *UsageTypeData) GetValue() []*schema.MetricValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// Usage Data
//
// x-displayName: "Usage Data"
// Usage data contains the usage type and the corresponding metric
type UsageData struct {
	// Type
	//
	// x-displayName: "Type"
	// Usage Type
	Type UsageType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.views.workload.UsageType" json:"type,omitempty"`
	// Data
	//
	// x-displayName: "Data"
	// List of metric data
	Data []*UsageTypeData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *UsageData) Reset()      { *m = UsageData{} }
func (*UsageData) ProtoMessage() {}
func (*UsageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d83794e80dd68dc3, []int{3}
}
func (m *UsageData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsageData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsageData.Merge(m, src)
}
func (m *UsageData) XXX_Size() int {
	return m.Size()
}
func (m *UsageData) XXX_DiscardUnknown() {
	xxx_messageInfo_UsageData.DiscardUnknown(m)
}

var xxx_messageInfo_UsageData proto.InternalMessageInfo

func (m *UsageData) GetType() UsageType {
	if m != nil {
		return m.Type
	}
	return CPU_USAGE
}

func (m *UsageData) GetData() []*UsageTypeData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.views.workload.UsageType", UsageType_name, UsageType_value)
	golang_proto.RegisterEnum("ves.io.schema.views.workload.UsageType", UsageType_name, UsageType_value)
	proto.RegisterEnum("ves.io.schema.views.workload.UsageLabel", UsageLabel_name, UsageLabel_value)
	golang_proto.RegisterEnum("ves.io.schema.views.workload.UsageLabel", UsageLabel_name, UsageLabel_value)
	proto.RegisterType((*UsageRequest)(nil), "ves.io.schema.views.workload.UsageRequest")
	golang_proto.RegisterType((*UsageRequest)(nil), "ves.io.schema.views.workload.UsageRequest")
	proto.RegisterType((*UsageResponse)(nil), "ves.io.schema.views.workload.UsageResponse")
	golang_proto.RegisterType((*UsageResponse)(nil), "ves.io.schema.views.workload.UsageResponse")
	proto.RegisterType((*UsageTypeData)(nil), "ves.io.schema.views.workload.UsageTypeData")
	golang_proto.RegisterType((*UsageTypeData)(nil), "ves.io.schema.views.workload.UsageTypeData")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.workload.UsageTypeData.KeyEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.workload.UsageTypeData.KeyEntry")
	proto.RegisterType((*UsageData)(nil), "ves.io.schema.views.workload.UsageData")
	golang_proto.RegisterType((*UsageData)(nil), "ves.io.schema.views.workload.UsageData")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/workload/public_custom_data_api.proto", fileDescriptor_d83794e80dd68dc3)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/workload/public_custom_data_api.proto", fileDescriptor_d83794e80dd68dc3)
}

var fileDescriptor_d83794e80dd68dc3 = []byte{
	// 872 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xac, 0x9d, 0xc4, 0x9e, 0x26, 0x61, 0x35, 0x2a, 0xd5, 0xd6, 0x84, 0x55, 0x64, 0x0e,
	0x58, 0xa9, 0xbc, 0x0b, 0x2d, 0x42, 0xa5, 0x1c, 0x90, 0x1b, 0x1b, 0x64, 0x25, 0x8e, 0xa3, 0xb5,
	0xd3, 0x08, 0x2e, 0xab, 0xf1, 0xfa, 0x65, 0xbb, 0x64, 0xbd, 0xb3, 0xec, 0xcc, 0xba, 0x58, 0x08,
	0x09, 0xf5, 0x86, 0xc4, 0x01, 0x89, 0x3f, 0xc1, 0x4f, 0xa8, 0xd4, 0x4b, 0x39, 0xd1, 0x13, 0x8a,
	0xe0, 0xd2, 0x23, 0x71, 0x38, 0x70, 0xec, 0x8d, 0x13, 0x12, 0x9a, 0xd9, 0x75, 0x42, 0xaa, 0xaa,
	0x72, 0x2f, 0xd6, 0x7b, 0xef, 0x9b, 0xef, 0xf3, 0x7b, 0x9f, 0x9e, 0x9f, 0xf1, 0x47, 0x13, 0xe0,
	0x56, 0xc0, 0x6c, 0xee, 0xdd, 0x87, 0x31, 0xb5, 0x27, 0x01, 0x3c, 0xe0, 0xf6, 0x03, 0x96, 0x1c,
	0x87, 0x8c, 0x8e, 0xec, 0x38, 0x1d, 0x86, 0x81, 0xe7, 0x7a, 0x29, 0x17, 0x6c, 0xec, 0x8e, 0xa8,
	0xa0, 0x2e, 0x8d, 0x03, 0x2b, 0x4e, 0x98, 0x60, 0x64, 0x23, 0xa3, 0x5a, 0x19, 0xd5, 0x52, 0x54,
	0x6b, 0x4e, 0xad, 0x36, 0xfc, 0x40, 0xdc, 0x4f, 0x87, 0x96, 0xc7, 0xc6, 0xb6, 0xcf, 0x7c, 0x66,
	0x2b, 0xd2, 0x30, 0x3d, 0x52, 0x99, 0x4a, 0x54, 0x94, 0x89, 0x55, 0x37, 0x7c, 0xc6, 0xfc, 0x10,
	0x6c, 0x1a, 0x07, 0x36, 0x8d, 0x22, 0x26, 0xa8, 0x08, 0x58, 0xc4, 0x73, 0xf4, 0xad, 0xcb, 0x5d,
	0xb2, 0xf8, 0xff, 0xe0, 0xf5, 0xcb, 0xa0, 0x98, 0xc6, 0x30, 0x87, 0x6a, 0x2f, 0x4c, 0x07, 0x1c,
	0xa2, 0xc9, 0x65, 0x7a, 0xed, 0x1f, 0x0d, 0xaf, 0x1e, 0x70, 0xea, 0x83, 0x03, 0x5f, 0xa5, 0xc0,
	0x05, 0xd9, 0xc0, 0x95, 0x88, 0x8e, 0x81, 0xc7, 0xd4, 0x03, 0x03, 0x6d, 0xa2, 0x7a, 0xc5, 0xb9,
	0x28, 0x90, 0x6b, 0x78, 0xf9, 0x28, 0x08, 0x05, 0x24, 0x86, 0xa6, 0xa0, 0x3c, 0x23, 0xdb, 0xb8,
	0xec, 0x27, 0x2c, 0x8d, 0xdd, 0xe1, 0xd4, 0x28, 0x6e, 0x16, 0xeb, 0xeb, 0x37, 0xeb, 0xd6, 0xab,
	0x0c, 0xb2, 0xd4, 0x77, 0xee, 0xd2, 0x21, 0x84, 0xce, 0x8a, 0x62, 0xde, 0x9d, 0x92, 0x3d, 0xbc,
	0x7e, 0x14, 0x40, 0x38, 0x72, 0x39, 0x84, 0xe0, 0x09, 0x96, 0x18, 0x25, 0x25, 0xf5, 0xee, 0x02,
	0x52, 0x83, 0x69, 0x0c, 0xce, 0x9a, 0xa2, 0xf7, 0x73, 0x36, 0x79, 0x1b, 0x63, 0x2e, 0x68, 0x22,
	0x5c, 0x11, 0x8c, 0xc1, 0x58, 0xca, 0x66, 0x51, 0x95, 0x41, 0x30, 0x06, 0x72, 0x1d, 0x97, 0x21,
	0x1a, 0x65, 0xe0, 0xb2, 0x02, 0x57, 0x20, 0x1a, 0x29, 0x88, 0xe0, 0x12, 0x17, 0x10, 0x1b, 0x2b,
	0xaa, 0xac, 0x62, 0x72, 0x15, 0x2f, 0x25, 0x34, 0xf2, 0xc1, 0x28, 0xab, 0x62, 0x96, 0x90, 0xdb,
	0xd8, 0x08, 0x22, 0x2f, 0x4c, 0x47, 0xe0, 0xf2, 0x29, 0x17, 0x30, 0x76, 0xe7, 0x7d, 0x71, 0xa3,
	0xb2, 0x89, 0xea, 0x65, 0xe7, 0x5a, 0x8e, 0xf7, 0x15, 0x7c, 0x38, 0x47, 0x6b, 0xbb, 0x78, 0x2d,
	0x37, 0x9e, 0xc7, 0x2c, 0xe2, 0x40, 0x3e, 0xc6, 0x25, 0xb9, 0x63, 0x06, 0xda, 0x2c, 0xd6, 0xaf,
	0x2c, 0x34, 0x74, 0x8b, 0x0a, 0xea, 0x28, 0x52, 0xed, 0x17, 0x94, 0xcb, 0x49, 0x23, 0x64, 0x9d,
	0x7c, 0x8a, 0x8b, 0xc7, 0x30, 0xcd, 0xd5, 0x3e, 0x58, 0xd0, 0x42, 0xc9, 0xb4, 0x76, 0x60, 0xda,
	0x8e, 0x44, 0x32, 0x75, 0xa4, 0x00, 0x79, 0x0f, 0x2f, 0x4d, 0x68, 0x98, 0x82, 0xa1, 0x29, 0xa5,
	0xea, 0x0b, 0x4a, 0x5d, 0x10, 0x49, 0xe0, 0xdd, 0x93, 0x2f, 0x9c, 0xec, 0x61, 0xf5, 0x43, 0x5c,
	0x9e, 0x4b, 0x10, 0x7d, 0xde, 0x85, 0xf4, 0x4c, 0xe9, 0x5d, 0xbd, 0xd0, 0x53, 0x3e, 0xaa, 0xe4,
	0x8e, 0x76, 0x1b, 0xd5, 0xbe, 0x47, 0xb8, 0x72, 0x3e, 0x97, 0xb4, 0x43, 0x2e, 0xb3, 0xa2, 0xbe,
	0xc6, 0x0e, 0x28, 0x12, 0xf9, 0x24, 0xf7, 0x32, 0xeb, 0xf9, 0xc6, 0x6b, 0x4c, 0x9f, 0xf9, 0xb9,
	0xd5, 0xcd, 0x5b, 0x91, 0x65, 0xb2, 0x86, 0x2b, 0xdb, 0xfb, 0x07, 0xee, 0x41, 0xbf, 0xf9, 0x59,
	0x5b, 0x2f, 0x10, 0x1d, 0xaf, 0x76, 0xdb, 0xdd, 0x9e, 0xf3, 0x79, 0x5e, 0x41, 0x64, 0x1d, 0xe3,
	0x56, 0xa7, 0xbf, 0xe3, 0x3a, 0xed, 0x66, 0xab, 0xaf, 0x6b, 0xe4, 0x0d, 0x7c, 0x45, 0xe5, 0x87,
	0x4e, 0x67, 0xd0, 0xee, 0xeb, 0xc5, 0xad, 0x1d, 0x8c, 0x2f, 0x36, 0x5e, 0xea, 0xed, 0x35, 0xbb,
	0xed, 0xfe, 0x7e, 0x73, 0x5b, 0xea, 0x49, 0xf9, 0xde, 0xde, 0xa0, 0xd9, 0xd9, 0x6b, 0x3b, 0x3a,
	0x22, 0x2b, 0xb8, 0xb8, 0xdf, 0x6b, 0xe9, 0x1a, 0x29, 0xe3, 0x52, 0xbf, 0x33, 0x68, 0xeb, 0x45,
	0xb2, 0x8a, 0xcb, 0x87, 0x3d, 0x67, 0x67, 0xb7, 0xd7, 0x6c, 0xe9, 0xa5, 0x9b, 0xff, 0x22, 0xbc,
	0xb6, 0xad, 0x8e, 0x92, 0x6c, 0xb8, 0xb9, 0xdf, 0x21, 0x8f, 0x10, 0x5e, 0x52, 0xfa, 0x64, 0x6b,
	0x81, 0x51, 0xf3, 0x9f, 0x7a, 0xf5, 0xc6, 0x42, 0x6f, 0xb3, 0xed, 0xac, 0xdd, 0x7b, 0xfa, 0x48,
	0x43, 0xb3, 0x5f, 0x8d, 0x37, 0x27, 0xc0, 0x1b, 0x01, 0x6b, 0x04, 0x94, 0xf2, 0x86, 0x27, 0x3f,
	0x12, 0xa0, 0xa3, 0x87, 0x7f, 0xfc, 0xf5, 0x93, 0x76, 0xab, 0x66, 0xe5, 0x37, 0xd3, 0x3e, 0xbf,
	0x18, 0xdc, 0xfe, 0xe6, 0x3c, 0xfe, 0xf6, 0xfc, 0xb4, 0x72, 0x3b, 0x95, 0xe2, 0x77, 0xd0, 0x56,
	0xf5, 0xfd, 0x27, 0x8f, 0x51, 0xf1, 0xf7, 0xc7, 0xe8, 0x9d, 0x57, 0xf6, 0xd2, 0x1b, 0x7e, 0x09,
	0x9e, 0x78, 0xf8, 0x9b, 0xa1, 0x19, 0xe8, 0xee, 0x0f, 0xe8, 0xe4, 0xd4, 0x2c, 0x3c, 0x3b, 0x35,
	0x0b, 0xcf, 0x4f, 0x4d, 0xf4, 0xdd, 0xcc, 0x44, 0x3f, 0xcf, 0x4c, 0xf4, 0x74, 0x66, 0xa2, 0x93,
	0x99, 0x89, 0xfe, 0x9c, 0x99, 0xe8, 0xef, 0x99, 0x59, 0x78, 0x3e, 0x33, 0xd1, 0x8f, 0x67, 0x66,
	0xe1, 0xc9, 0x99, 0x89, 0x4e, 0xce, 0xcc, 0xc2, 0xb3, 0x33, 0xb3, 0xf0, 0x85, 0xe3, 0xb3, 0xf8,
	0xd8, 0xb7, 0x26, 0x4c, 0x5e, 0xad, 0x84, 0x5a, 0x29, 0xb7, 0x55, 0x70, 0xc4, 0x92, 0x71, 0x23,
	0x4e, 0xd8, 0x24, 0x18, 0x41, 0xd2, 0x98, 0xc3, 0x76, 0x3c, 0xf4, 0x99, 0x0d, 0x5f, 0x8b, 0xfc,
	0x82, 0xbe, 0xf4, 0x6f, 0x62, 0xb8, 0xac, 0x2e, 0xe9, 0xad, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xbb, 0x8c, 0x4e, 0x59, 0x4d, 0x06, 0x00, 0x00,
}

func (x UsageType) String() string {
	s, ok := UsageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UsageLabel) String() string {
	s, ok := UsageLabel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UsageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UsageRequest)
	if !ok {
		that2, ok := that.(UsageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Filter != that1.Filter {
		return false
	}
	if len(this.GroupBy) != len(that1.GroupBy) {
		return false
	}
	for i := range this.GroupBy {
		if this.GroupBy[i] != that1.GroupBy[i] {
			return false
		}
	}
	if len(this.FieldSelector) != len(that1.FieldSelector) {
		return false
	}
	for i := range this.FieldSelector {
		if this.FieldSelector[i] != that1.FieldSelector[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	if this.Range != that1.Range {
		return false
	}
	if this.IncludeSystemWorkloads != that1.IncludeSystemWorkloads {
		return false
	}
	return true
}
func (this *UsageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UsageResponse)
	if !ok {
		that2, ok := that.(UsageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *UsageTypeData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UsageTypeData)
	if !ok {
		that2, ok := that.(UsageTypeData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Key) != len(that1.Key) {
		return false
	}
	for i := range this.Key {
		if this.Key[i] != that1.Key[i] {
			return false
		}
	}
	if len(this.Value) != len(that1.Value) {
		return false
	}
	for i := range this.Value {
		if !this.Value[i].Equal(that1.Value[i]) {
			return false
		}
	}
	return true
}
func (this *UsageData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UsageData)
	if !ok {
		that2, ok := that.(UsageData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *UsageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&workload.UsageRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	s = append(s, "GroupBy: "+fmt.Sprintf("%#v", this.GroupBy)+",\n")
	s = append(s, "FieldSelector: "+fmt.Sprintf("%#v", this.FieldSelector)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "Range: "+fmt.Sprintf("%#v", this.Range)+",\n")
	s = append(s, "IncludeSystemWorkloads: "+fmt.Sprintf("%#v", this.IncludeSystemWorkloads)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UsageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&workload.UsageResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UsageTypeData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workload.UsageTypeData{")
	keysForKey := make([]string, 0, len(this.Key))
	for k, _ := range this.Key {
		keysForKey = append(keysForKey, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForKey)
	mapStringForKey := "map[string]string{"
	for _, k := range keysForKey {
		mapStringForKey += fmt.Sprintf("%#v: %#v,", k, this.Key[k])
	}
	mapStringForKey += "}"
	if this.Key != nil {
		s = append(s, "Key: "+mapStringForKey+",\n")
	}
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UsageData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workload.UsageData{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomDataApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomDataAPIClient is the client API for CustomDataAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomDataAPIClient interface {
	// Usage Metrics
	//
	// x-displayName: "Usage Metrics"
	// Get the workload usage
	Usage(ctx context.Context, in *UsageRequest, opts ...grpc.CallOption) (*UsageResponse, error)
}

type customDataAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomDataAPIClient(cc *grpc.ClientConn) CustomDataAPIClient {
	return &customDataAPIClient{cc}
}

func (c *customDataAPIClient) Usage(ctx context.Context, in *UsageRequest, opts ...grpc.CallOption) (*UsageResponse, error) {
	out := new(UsageResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.workload.CustomDataAPI/Usage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomDataAPIServer is the server API for CustomDataAPI service.
type CustomDataAPIServer interface {
	// Usage Metrics
	//
	// x-displayName: "Usage Metrics"
	// Get the workload usage
	Usage(context.Context, *UsageRequest) (*UsageResponse, error)
}

// UnimplementedCustomDataAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomDataAPIServer struct {
}

func (*UnimplementedCustomDataAPIServer) Usage(ctx context.Context, req *UsageRequest) (*UsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Usage not implemented")
}

func RegisterCustomDataAPIServer(s *grpc.Server, srv CustomDataAPIServer) {
	s.RegisterService(&_CustomDataAPI_serviceDesc, srv)
}

func _CustomDataAPI_Usage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataAPIServer).Usage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.workload.CustomDataAPI/Usage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataAPIServer).Usage(ctx, req.(*UsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomDataAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.workload.CustomDataAPI",
	HandlerType: (*CustomDataAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Usage",
			Handler:    _CustomDataAPI_Usage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/workload/public_custom_data_api.proto",
}

func (m *UsageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeSystemWorkloads {
		i--
		if m.IncludeSystemWorkloads {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Range) > 0 {
		i -= len(m.Range)
		copy(dAtA[i:], m.Range)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Range)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FieldSelector) > 0 {
		dAtA2 := make([]byte, len(m.FieldSelector)*10)
		var j1 int
		for _, num := range m.FieldSelector {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupBy) > 0 {
		dAtA4 := make([]byte, len(m.GroupBy)*10)
		var j3 int
		for _, num := range m.GroupBy {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UsageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UsageTypeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsageTypeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsageTypeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Value[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Key) > 0 {
		for k := range m.Key {
			v := m.Key[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UsageData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsageData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsageData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomDataApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomDataApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UsageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if len(m.GroupBy) > 0 {
		l = 0
		for _, e := range m.GroupBy {
			l += sovPublicCustomDataApi(uint64(e))
		}
		n += 1 + sovPublicCustomDataApi(uint64(l)) + l
	}
	if len(m.FieldSelector) > 0 {
		l = 0
		for _, e := range m.FieldSelector {
			l += sovPublicCustomDataApi(uint64(e))
		}
		n += 1 + sovPublicCustomDataApi(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Range)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if m.IncludeSystemWorkloads {
		n += 2
	}
	return n
}

func (m *UsageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func (m *UsageTypeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Key) > 0 {
		for k, v := range m.Key {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomDataApi(uint64(len(k))) + 1 + len(v) + sovPublicCustomDataApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomDataApi(uint64(mapEntrySize))
		}
	}
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func (m *UsageData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPublicCustomDataApi(uint64(m.Type))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomDataApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomDataApi(x uint64) (n int) {
	return sovPublicCustomDataApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UsageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UsageRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Filter:` + fmt.Sprintf("%v", this.Filter) + `,`,
		`GroupBy:` + fmt.Sprintf("%v", this.GroupBy) + `,`,
		`FieldSelector:` + fmt.Sprintf("%v", this.FieldSelector) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`Range:` + fmt.Sprintf("%v", this.Range) + `,`,
		`IncludeSystemWorkloads:` + fmt.Sprintf("%v", this.IncludeSystemWorkloads) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UsageResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*UsageData{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "UsageData", "UsageData", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&UsageResponse{`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *UsageTypeData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValue := "[]*MetricValue{"
	for _, f := range this.Value {
		repeatedStringForValue += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForValue += "}"
	keysForKey := make([]string, 0, len(this.Key))
	for k, _ := range this.Key {
		keysForKey = append(keysForKey, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForKey)
	mapStringForKey := "map[string]string{"
	for _, k := range keysForKey {
		mapStringForKey += fmt.Sprintf("%v: %v,", k, this.Key[k])
	}
	mapStringForKey += "}"
	s := strings.Join([]string{`&UsageTypeData{`,
		`Key:` + mapStringForKey + `,`,
		`Value:` + repeatedStringForValue + `,`,
		`}`,
	}, "")
	return s
}
func (this *UsageData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*UsageTypeData{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "UsageTypeData", "UsageTypeData", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&UsageData{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomDataApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UsageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v UsageLabel
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UsageLabel(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupBy = append(m.GroupBy, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicCustomDataApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicCustomDataApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.GroupBy) == 0 {
					m.GroupBy = make([]UsageLabel, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UsageLabel
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UsageLabel(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupBy = append(m.GroupBy, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
		case 4:
			if wireType == 0 {
				var v UsageType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UsageType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FieldSelector = append(m.FieldSelector, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicCustomDataApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicCustomDataApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.FieldSelector) == 0 {
					m.FieldSelector = make([]UsageType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UsageType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UsageType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FieldSelector = append(m.FieldSelector, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldSelector", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Range = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSystemWorkloads", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeSystemWorkloads = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &UsageData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsageTypeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsageTypeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsageTypeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Key[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, &schema.MetricValue{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsageData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsageData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsageData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UsageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &UsageTypeData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomDataApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomDataApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomDataApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomDataApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomDataApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomDataApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomDataApi = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package aws_vpc_site

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_fleet "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet"
	ves_io_schema_network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
	ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AWSVPCIngressEgressGwReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSVPCIngressEgressGwReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AWSVPCIngressEgressGwReplaceType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AWSVPCIngressEgressGwReplaceType.global_network_list")
	}

	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) DeepCopy() *AWSVPCIngressEgressGwReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSVPCIngressEgressGwReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSVPCIngressEgressGwReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSVPCIngressEgressGwReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSVPCIngressEgressGwReplaceTypeValidator().Validate(ctx, m, opts...)
}

func (m *AWSVPCIngressEgressGwReplaceType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetInsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetInsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *AWSVPCIngressEgressGwReplaceType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup:

		return nil, nil

	case *AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn:

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_outside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn:

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_inside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AWSVPCIngressEgressGwReplaceType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup:

	case *AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AWSVPCIngressEgressGwReplaceType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *AWSVPCIngressEgressGwReplaceType_NoForwardProxy:

		return nil, nil

	case *AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AWSVPCIngressEgressGwReplaceType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork:

		return nil, nil

	case *AWSVPCIngressEgressGwReplaceType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AWSVPCIngressEgressGwReplaceType) GetInsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetInsideStaticRouteChoice().(type) {
	case *AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes:

		return nil, nil

	case *AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes:

		drInfos, err := m.GetInsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "inside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AWSVPCIngressEgressGwReplaceType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy:

		return nil, nil

	case *AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AWSVPCIngressEgressGwReplaceType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes:

		return nil, nil

	case *AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateAWSVPCIngressEgressGwReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSVPCIngressEgressGwReplaceType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwReplaceType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwReplaceType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwReplaceType) InsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for inside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwReplaceType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwReplaceType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwReplaceType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSVPCIngressEgressGwReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSVPCIngressEgressGwReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["allowed_vip_port"]; exists {

		vOpts := append(opts, db.WithValidateField("allowed_vip_port"))
		if err := fv(ctx, m.GetAllowedVipPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["allowed_vip_port_sli"]; exists {

		vOpts := append(opts, db.WithValidateField("allowed_vip_port_sli"))
		if err := fv(ctx, m.GetAllowedVipPortSli(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn).DcClusterGroupOutsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_outside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn).DcClusterGroupInsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_inside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AWSVPCIngressEgressGwReplaceType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AWSVPCIngressEgressGwReplaceType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwReplaceType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AWSVPCIngressEgressGwReplaceType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["inside_static_route_choice"]; exists {
		val := m.GetInsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("inside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsideStaticRouteChoice().(type) {
	case *AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.no_inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes).NoInsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("no_inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes).InsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSVPCIngressEgressGwReplaceTypeValidator = func() *ValidateAWSVPCIngressEgressGwReplaceType {
	v := &ValidateAWSVPCIngressEgressGwReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwReplaceType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwReplaceType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwReplaceType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhInsideStaticRouteChoice := v.InsideStaticRouteChoiceValidationRuleHandler
	rulesInsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsideStaticRouteChoice(rulesInsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwReplaceType.inside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["inside_static_route_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwReplaceType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwReplaceType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwReplaceType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["inside_static_route_choice.inside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["allowed_vip_port"] = ves_io_schema_views.AllowedVIPPortsValidator().Validate

	v.FldValidators["allowed_vip_port_sli"] = ves_io_schema_views.AllowedVIPPortsValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	return v
}()

func AWSVPCIngressEgressGwReplaceTypeValidator() db.Validator {
	return DefaultAWSVPCIngressEgressGwReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSVPCIngressEgressGwType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSVPCIngressEgressGwType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AWSVPCIngressEgressGwType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AWSVPCIngressEgressGwType.global_network_list")
	}

	return nil
}

func (m *AWSVPCIngressEgressGwType) DeepCopy() *AWSVPCIngressEgressGwType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSVPCIngressEgressGwType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSVPCIngressEgressGwType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSVPCIngressEgressGwType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSVPCIngressEgressGwTypeValidator().Validate(ctx, m, opts...)
}

func (m *AWSVPCIngressEgressGwType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetInsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetInsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *AWSVPCIngressEgressGwType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *AWSVPCIngressEgressGwType_NoDcClusterGroup:

		return nil, nil

	case *AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn:

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_outside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *AWSVPCIngressEgressGwType_DcClusterGroupInsideVn:

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_inside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AWSVPCIngressEgressGwType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *AWSVPCIngressEgressGwType_NoDcClusterGroup:

	case *AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *AWSVPCIngressEgressGwType_DcClusterGroupInsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AWSVPCIngressEgressGwType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *AWSVPCIngressEgressGwType_NoForwardProxy:

		return nil, nil

	case *AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *AWSVPCIngressEgressGwType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AWSVPCIngressEgressGwType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *AWSVPCIngressEgressGwType_NoGlobalNetwork:

		return nil, nil

	case *AWSVPCIngressEgressGwType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AWSVPCIngressEgressGwType) GetInsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetInsideStaticRouteChoice().(type) {
	case *AWSVPCIngressEgressGwType_NoInsideStaticRoutes:

		return nil, nil

	case *AWSVPCIngressEgressGwType_InsideStaticRoutes:

		drInfos, err := m.GetInsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "inside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AWSVPCIngressEgressGwType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *AWSVPCIngressEgressGwType_NoNetworkPolicy:

		return nil, nil

	case *AWSVPCIngressEgressGwType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AWSVPCIngressEgressGwType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AWSVPCIngressEgressGwType_NoOutsideStaticRoutes:

		return nil, nil

	case *AWSVPCIngressEgressGwType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateAWSVPCIngressEgressGwType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSVPCIngressEgressGwType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwType) InsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for inside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwType) AzNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for az_nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.AWSVPCTwoInterfaceNodeType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.AWSVPCTwoInterfaceNodeTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for az_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.AWSVPCTwoInterfaceNodeType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.AWSVPCTwoInterfaceNodeType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated az_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items az_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwType) AwsCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for aws_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressEgressGwType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSVPCIngressEgressGwType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSVPCIngressEgressGwType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["allowed_vip_port"]; exists {

		vOpts := append(opts, db.WithValidateField("allowed_vip_port"))
		if err := fv(ctx, m.GetAllowedVipPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["allowed_vip_port_sli"]; exists {

		vOpts := append(opts, db.WithValidateField("allowed_vip_port_sli"))
		if err := fv(ctx, m.GetAllowedVipPortSli(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["aws_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_certified_hw"))
		if err := fv(ctx, m.GetAwsCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["az_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("az_nodes"))
		if err := fv(ctx, m.GetAzNodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *AWSVPCIngressEgressGwType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AWSVPCIngressEgressGwType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn).DcClusterGroupOutsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_outside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwType_DcClusterGroupInsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*AWSVPCIngressEgressGwType_DcClusterGroupInsideVn).DcClusterGroupInsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_inside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AWSVPCIngressEgressGwType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AWSVPCIngressEgressGwType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AWSVPCIngressEgressGwType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AWSVPCIngressEgressGwType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AWSVPCIngressEgressGwType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AWSVPCIngressEgressGwType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["inside_static_route_choice"]; exists {
		val := m.GetInsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("inside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsideStaticRouteChoice().(type) {
	case *AWSVPCIngressEgressGwType_NoInsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.no_inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AWSVPCIngressEgressGwType_NoInsideStaticRoutes).NoInsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("no_inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwType_InsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AWSVPCIngressEgressGwType_InsideStaticRoutes).InsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AWSVPCIngressEgressGwType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AWSVPCIngressEgressGwType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AWSVPCIngressEgressGwType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AWSVPCIngressEgressGwType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AWSVPCIngressEgressGwType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AWSVPCIngressEgressGwType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *AWSVPCIngressEgressGwType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AWSVPCIngressEgressGwType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCIngressEgressGwType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AWSVPCIngressEgressGwType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSVPCIngressEgressGwTypeValidator = func() *ValidateAWSVPCIngressEgressGwType {
	v := &ValidateAWSVPCIngressEgressGwType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhInsideStaticRouteChoice := v.InsideStaticRouteChoiceValidationRuleHandler
	rulesInsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsideStaticRouteChoice(rulesInsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwType.inside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["inside_static_route_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	vrhAzNodes := v.AzNodesValidationRuleHandler
	rulesAzNodes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.num_items": "1,3",
	}
	vFn, err = vrhAzNodes(rulesAzNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwType.az_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["az_nodes"] = vFn

	vrhAwsCertifiedHw := v.AwsCertifiedHwValidationRuleHandler
	rulesAwsCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"aws-byol-multi-nic-voltmesh\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhAwsCertifiedHw(rulesAwsCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressEgressGwType.aws_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_certified_hw"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["inside_static_route_choice.inside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["allowed_vip_port"] = ves_io_schema_views.AllowedVIPPortsValidator().Validate

	v.FldValidators["allowed_vip_port_sli"] = ves_io_schema_views.AllowedVIPPortsValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	return v
}()

func AWSVPCIngressEgressGwTypeValidator() db.Validator {
	return DefaultAWSVPCIngressEgressGwTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSVPCIngressGwReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSVPCIngressGwReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSVPCIngressGwReplaceType) DeepCopy() *AWSVPCIngressGwReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSVPCIngressGwReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSVPCIngressGwReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSVPCIngressGwReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSVPCIngressGwReplaceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSVPCIngressGwReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSVPCIngressGwReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSVPCIngressGwReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSVPCIngressGwReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["allowed_vip_port"]; exists {

		vOpts := append(opts, db.WithValidateField("allowed_vip_port"))
		if err := fv(ctx, m.GetAllowedVipPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSVPCIngressGwReplaceTypeValidator = func() *ValidateAWSVPCIngressGwReplaceType {
	v := &ValidateAWSVPCIngressGwReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["allowed_vip_port"] = ves_io_schema_views.AllowedVIPPortsValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	return v
}()

func AWSVPCIngressGwReplaceTypeValidator() db.Validator {
	return DefaultAWSVPCIngressGwReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSVPCIngressGwType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSVPCIngressGwType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSVPCIngressGwType) DeepCopy() *AWSVPCIngressGwType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSVPCIngressGwType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSVPCIngressGwType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSVPCIngressGwType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSVPCIngressGwTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSVPCIngressGwType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSVPCIngressGwType) AzNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for az_nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.AWSVPCOneInterfaceNodeType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.AWSVPCOneInterfaceNodeTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for az_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.AWSVPCOneInterfaceNodeType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.AWSVPCOneInterfaceNodeType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated az_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items az_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressGwType) AwsCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for aws_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateAWSVPCIngressGwType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSVPCIngressGwType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSVPCIngressGwType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["allowed_vip_port"]; exists {

		vOpts := append(opts, db.WithValidateField("allowed_vip_port"))
		if err := fv(ctx, m.GetAllowedVipPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["aws_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_certified_hw"))
		if err := fv(ctx, m.GetAwsCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["az_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("az_nodes"))
		if err := fv(ctx, m.GetAzNodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSVPCIngressGwTypeValidator = func() *ValidateAWSVPCIngressGwType {
	v := &ValidateAWSVPCIngressGwType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAzNodes := v.AzNodesValidationRuleHandler
	rulesAzNodes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.num_items": "1,3",
	}
	vFn, err = vrhAzNodes(rulesAzNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressGwType.az_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["az_nodes"] = vFn

	vrhAwsCertifiedHw := v.AwsCertifiedHwValidationRuleHandler
	rulesAwsCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"aws-byol-voltmesh\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhAwsCertifiedHw(rulesAwsCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCIngressGwType.aws_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_certified_hw"] = vFn

	v.FldValidators["allowed_vip_port"] = ves_io_schema_views.AllowedVIPPortsValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	return v
}()

func AWSVPCIngressGwTypeValidator() db.Validator {
	return DefaultAWSVPCIngressGwTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSVPCSiteInfoType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSVPCSiteInfoType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSVPCSiteInfoType) DeepCopy() *AWSVPCSiteInfoType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSVPCSiteInfoType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSVPCSiteInfoType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSVPCSiteInfoType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSVPCSiteInfoTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSVPCSiteInfoType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSVPCSiteInfoType) PublicIpsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for public_ips")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for public_ips")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated public_ips")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items public_ips")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSVPCSiteInfoType) PrivateIpsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for private_ips")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for private_ips")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated private_ips")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items private_ips")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSVPCSiteInfoType) SubnetIdsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for subnet_ids")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.AWSSubnetIdsType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.AWSSubnetIdsTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for subnet_ids")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.AWSSubnetIdsType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.AWSSubnetIdsType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated subnet_ids")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items subnet_ids")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSVPCSiteInfoType) VpcIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vpc_id")
	}

	return validatorFn, nil
}

func (v *ValidateAWSVPCSiteInfoType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSVPCSiteInfoType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSVPCSiteInfoType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["private_ips"]; exists {
		vOpts := append(opts, db.WithValidateField("private_ips"))
		if err := fv(ctx, m.GetPrivateIps(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["public_ips"]; exists {
		vOpts := append(opts, db.WithValidateField("public_ips"))
		if err := fv(ctx, m.GetPublicIps(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["subnet_ids"]; exists {
		vOpts := append(opts, db.WithValidateField("subnet_ids"))
		if err := fv(ctx, m.GetSubnetIds(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vpc_id"]; exists {

		vOpts := append(opts, db.WithValidateField("vpc_id"))
		if err := fv(ctx, m.GetVpcId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vpc_name"]; exists {

		vOpts := append(opts, db.WithValidateField("vpc_name"))
		if err := fv(ctx, m.GetVpcName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSVPCSiteInfoTypeValidator = func() *ValidateAWSVPCSiteInfoType {
	v := &ValidateAWSVPCSiteInfoType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPublicIps := v.PublicIpsValidationRuleHandler
	rulesPublicIps := map[string]string{
		"ves.io.schema.rules.message.required":         "true",
		"ves.io.schema.rules.repeated.items.string.ip": "true",
		"ves.io.schema.rules.repeated.num_items":       "0,1,3",
		"ves.io.schema.rules.repeated.unique":          "true",
	}
	vFn, err = vrhPublicIps(rulesPublicIps)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCSiteInfoType.public_ips: %s", err)
		panic(errMsg)
	}
	v.FldValidators["public_ips"] = vFn

	vrhPrivateIps := v.PrivateIpsValidationRuleHandler
	rulesPrivateIps := map[string]string{
		"ves.io.schema.rules.message.required":         "true",
		"ves.io.schema.rules.repeated.items.string.ip": "true",
		"ves.io.schema.rules.repeated.num_items":       "0,1,3",
		"ves.io.schema.rules.repeated.unique":          "true",
	}
	vFn, err = vrhPrivateIps(rulesPrivateIps)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCSiteInfoType.private_ips: %s", err)
		panic(errMsg)
	}
	v.FldValidators["private_ips"] = vFn

	vrhSubnetIds := v.SubnetIdsValidationRuleHandler
	rulesSubnetIds := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.num_items": "0,1,3",
	}
	vFn, err = vrhSubnetIds(rulesSubnetIds)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCSiteInfoType.subnet_ids: %s", err)
		panic(errMsg)
	}
	v.FldValidators["subnet_ids"] = vFn

	vrhVpcId := v.VpcIdValidationRuleHandler
	rulesVpcId := map[string]string{
		"ves.io.schema.rules.string.pattern": "^(vpc-)([a-z0-9]{8}|[a-z0-9]{17})$|^$",
	}
	vFn, err = vrhVpcId(rulesVpcId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCSiteInfoType.vpc_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vpc_id"] = vFn

	return v
}()

func AWSVPCSiteInfoTypeValidator() db.Validator {
	return DefaultAWSVPCSiteInfoTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSVPCVoltstackClusterReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSVPCVoltstackClusterReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AWSVPCVoltstackClusterReplaceType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AWSVPCVoltstackClusterReplaceType.global_network_list")
	}

	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) DeepCopy() *AWSVPCVoltstackClusterReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSVPCVoltstackClusterReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSVPCVoltstackClusterReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSVPCVoltstackClusterReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSVPCVoltstackClusterReplaceTypeValidator().Validate(ctx, m, opts...)
}

func (m *AWSVPCVoltstackClusterReplaceType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *AWSVPCVoltstackClusterReplaceType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup:

		return nil, nil

	case *AWSVPCVoltstackClusterReplaceType_DcClusterGroup:

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AWSVPCVoltstackClusterReplaceType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup:

	case *AWSVPCVoltstackClusterReplaceType_DcClusterGroup:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AWSVPCVoltstackClusterReplaceType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *AWSVPCVoltstackClusterReplaceType_NoForwardProxy:

		return nil, nil

	case *AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AWSVPCVoltstackClusterReplaceType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork:

		return nil, nil

	case *AWSVPCVoltstackClusterReplaceType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AWSVPCVoltstackClusterReplaceType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy:

		return nil, nil

	case *AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AWSVPCVoltstackClusterReplaceType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes:

		return nil, nil

	case *AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateAWSVPCVoltstackClusterReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSVPCVoltstackClusterReplaceType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterReplaceType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterReplaceType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterReplaceType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterReplaceType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterReplaceType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSVPCVoltstackClusterReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSVPCVoltstackClusterReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["allowed_vip_port"]; exists {

		vOpts := append(opts, db.WithValidateField("allowed_vip_port"))
		if err := fv(ctx, m.GetAllowedVipPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterReplaceType_DcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AWSVPCVoltstackClusterReplaceType_DcClusterGroup).DcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AWSVPCVoltstackClusterReplaceType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AWSVPCVoltstackClusterReplaceType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterReplaceType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AWSVPCVoltstackClusterReplaceType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSVPCVoltstackClusterReplaceTypeValidator = func() *ValidateAWSVPCVoltstackClusterReplaceType {
	v := &ValidateAWSVPCVoltstackClusterReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterReplaceType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterReplaceType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterReplaceType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterReplaceType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterReplaceType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterReplaceType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["allowed_vip_port"] = ves_io_schema_views.AllowedVIPPortsValidator().Validate

	return v
}()

func AWSVPCVoltstackClusterReplaceTypeValidator() db.Validator {
	return DefaultAWSVPCVoltstackClusterReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSVPCVoltstackClusterType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSVPCVoltstackClusterType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AWSVPCVoltstackClusterType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AWSVPCVoltstackClusterType.global_network_list")
	}

	return nil
}

func (m *AWSVPCVoltstackClusterType) DeepCopy() *AWSVPCVoltstackClusterType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSVPCVoltstackClusterType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSVPCVoltstackClusterType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSVPCVoltstackClusterType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSVPCVoltstackClusterTypeValidator().Validate(ctx, m, opts...)
}

func (m *AWSVPCVoltstackClusterType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetK8SClusterChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetK8SClusterChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *AWSVPCVoltstackClusterType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *AWSVPCVoltstackClusterType_NoDcClusterGroup:

		return nil, nil

	case *AWSVPCVoltstackClusterType_DcClusterGroup:

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AWSVPCVoltstackClusterType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *AWSVPCVoltstackClusterType_NoDcClusterGroup:

	case *AWSVPCVoltstackClusterType_DcClusterGroup:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AWSVPCVoltstackClusterType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *AWSVPCVoltstackClusterType_NoForwardProxy:

		return nil, nil

	case *AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *AWSVPCVoltstackClusterType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AWSVPCVoltstackClusterType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *AWSVPCVoltstackClusterType_NoGlobalNetwork:

		return nil, nil

	case *AWSVPCVoltstackClusterType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *AWSVPCVoltstackClusterType) GetK8SClusterChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetK8SClusterChoice().(type) {
	case *AWSVPCVoltstackClusterType_NoK8SCluster:

		return nil, nil

	case *AWSVPCVoltstackClusterType_K8SCluster:

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("k8s_cluster.Object")
		dri := db.DRefInfo{
			RefdType:   "k8s_cluster.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "k8s_cluster",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetK8SClusterChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AWSVPCVoltstackClusterType) GetK8SClusterChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetK8SClusterChoice().(type) {
	case *AWSVPCVoltstackClusterType_NoK8SCluster:

	case *AWSVPCVoltstackClusterType_K8SCluster:
		refdType, err := d.TypeForEntryKind("", "", "k8s_cluster.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: k8s_cluster")
		}

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "k8s_cluster.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AWSVPCVoltstackClusterType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *AWSVPCVoltstackClusterType_NoNetworkPolicy:

		return nil, nil

	case *AWSVPCVoltstackClusterType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AWSVPCVoltstackClusterType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AWSVPCVoltstackClusterType_NoOutsideStaticRoutes:

		return nil, nil

	case *AWSVPCVoltstackClusterType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateAWSVPCVoltstackClusterType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSVPCVoltstackClusterType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterType) K8SClusterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for k8s_cluster_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterType) StorageClassChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for storage_class_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterType) AwsCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for aws_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterType) AzNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for az_nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.AWSVPCOneInterfaceNodeType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.AWSVPCOneInterfaceNodeTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for az_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.AWSVPCOneInterfaceNodeType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.AWSVPCOneInterfaceNodeType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated az_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items az_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSVPCVoltstackClusterType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSVPCVoltstackClusterType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSVPCVoltstackClusterType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["allowed_vip_port"]; exists {

		vOpts := append(opts, db.WithValidateField("allowed_vip_port"))
		if err := fv(ctx, m.GetAllowedVipPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["aws_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_certified_hw"))
		if err := fv(ctx, m.GetAwsCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["az_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("az_nodes"))
		if err := fv(ctx, m.GetAzNodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *AWSVPCVoltstackClusterType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AWSVPCVoltstackClusterType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterType_DcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*AWSVPCVoltstackClusterType_DcClusterGroup).DcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AWSVPCVoltstackClusterType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AWSVPCVoltstackClusterType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AWSVPCVoltstackClusterType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AWSVPCVoltstackClusterType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AWSVPCVoltstackClusterType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AWSVPCVoltstackClusterType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["k8s_cluster_choice"]; exists {
		val := m.GetK8SClusterChoice()
		vOpts := append(opts,
			db.WithValidateField("k8s_cluster_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetK8SClusterChoice().(type) {
	case *AWSVPCVoltstackClusterType_NoK8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.no_k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*AWSVPCVoltstackClusterType_NoK8SCluster).NoK8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("no_k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterType_K8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*AWSVPCVoltstackClusterType_K8SCluster).K8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AWSVPCVoltstackClusterType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AWSVPCVoltstackClusterType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AWSVPCVoltstackClusterType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AWSVPCVoltstackClusterType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AWSVPCVoltstackClusterType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AWSVPCVoltstackClusterType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *AWSVPCVoltstackClusterType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AWSVPCVoltstackClusterType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*AWSVPCVoltstackClusterType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["storage_class_choice"]; exists {
		val := m.GetStorageClassChoice()
		vOpts := append(opts,
			db.WithValidateField("storage_class_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStorageClassChoice().(type) {
	case *AWSVPCVoltstackClusterType_DefaultStorage:
		if fv, exists := v.FldValidators["storage_class_choice.default_storage"]; exists {
			val := m.GetStorageClassChoice().(*AWSVPCVoltstackClusterType_DefaultStorage).DefaultStorage
			vOpts := append(opts,
				db.WithValidateField("storage_class_choice"),
				db.WithValidateField("default_storage"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCVoltstackClusterType_StorageClassList:
		if fv, exists := v.FldValidators["storage_class_choice.storage_class_list"]; exists {
			val := m.GetStorageClassChoice().(*AWSVPCVoltstackClusterType_StorageClassList).StorageClassList
			vOpts := append(opts,
				db.WithValidateField("storage_class_choice"),
				db.WithValidateField("storage_class_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSVPCVoltstackClusterTypeValidator = func() *ValidateAWSVPCVoltstackClusterType {
	v := &ValidateAWSVPCVoltstackClusterType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhK8SClusterChoice := v.K8SClusterChoiceValidationRuleHandler
	rulesK8SClusterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhK8SClusterChoice(rulesK8SClusterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterType.k8s_cluster_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["k8s_cluster_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	vrhStorageClassChoice := v.StorageClassChoiceValidationRuleHandler
	rulesStorageClassChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStorageClassChoice(rulesStorageClassChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterType.storage_class_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_class_choice"] = vFn

	vrhAwsCertifiedHw := v.AwsCertifiedHwValidationRuleHandler
	rulesAwsCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"aws-byol-voltstack-combo\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhAwsCertifiedHw(rulesAwsCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterType.aws_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_certified_hw"] = vFn

	vrhAzNodes := v.AzNodesValidationRuleHandler
	rulesAzNodes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.num_items": "1,3",
	}
	vFn, err = vrhAzNodes(rulesAzNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCVoltstackClusterType.az_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["az_nodes"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["k8s_cluster_choice.k8s_cluster"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["storage_class_choice.storage_class_list"] = ves_io_schema_views.StorageClassListTypeValidator().Validate

	v.FldValidators["allowed_vip_port"] = ves_io_schema_views.AllowedVIPPortsValidator().Validate

	return v
}()

func AWSVPCVoltstackClusterTypeValidator() db.Validator {
	return DefaultAWSVPCVoltstackClusterTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.voltstack_cluster")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDeploymentDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDirectConnectChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDirectConnectChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *CreateSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDeployment().(type) {
	case *CreateSpecType_AwsCred:

		vref := m.GetAwsCred()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		dri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "aws_cred",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *CreateSpecType_AwsCred:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetAwsCred()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetDirectConnectChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDirectConnectChoice() == nil {
		return nil, nil
	}
	switch m.GetDirectConnectChoice().(type) {
	case *CreateSpecType_DirectConnectDisabled:

		return nil, nil

	case *CreateSpecType_DirectConnectEnabled:

		return nil, nil

	case *CreateSpecType_PrivateConnectivity:

		drInfos, err := m.GetPrivateConnectivity().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPrivateConnectivity().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "private_connectivity." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *CreateSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:

		return nil, nil

	case *CreateSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:

	case *CreateSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteType() == nil {
		return nil, nil
	}
	switch m.GetSiteType().(type) {
	case *CreateSpecType_IngressGw:

		return nil, nil

	case *CreateSpecType_IngressEgressGw:

		drInfos, err := m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGw().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_VoltstackCluster:

		drInfos, err := m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackCluster().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DirectConnectChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for direct_connect_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) EgressGatewayChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for egress_gateway_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) InternetVipChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for internet_vip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) SecurityGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for security_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for worker_nodes")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) WorkerNodesNodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_NodesPerAz, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}
	return oValidatorFn_NodesPerAz, nil
}
func (v *ValidateCreateSpecType) WorkerNodesTotalNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TotalNodes, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for total_nodes")
	}
	return oValidatorFn_TotalNodes, nil
}

func (v *ValidateCreateSpecType) InstanceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for instance_type")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) AwsRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for aws_region")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) TagsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for tags")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for tags")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for tags")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map tags")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tags")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["aws_region"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_region"))
		if err := fv(ctx, m.GetAwsRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *CreateSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*CreateSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*CreateSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BlockAllServices:
		if fv, exists := v.FldValidators["blocked_services_choice.block_all_services"]; exists {
			val := m.GetBlockedServicesChoice().(*CreateSpecType_BlockAllServices).BlockAllServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("block_all_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *CreateSpecType_AwsCred:
		if fv, exists := v.FldValidators["deployment.aws_cred"]; exists {
			val := m.GetDeployment().(*CreateSpecType_AwsCred).AwsCred
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("aws_cred"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["direct_connect_choice"]; exists {
		val := m.GetDirectConnectChoice()
		vOpts := append(opts,
			db.WithValidateField("direct_connect_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDirectConnectChoice().(type) {
	case *CreateSpecType_DirectConnectDisabled:
		if fv, exists := v.FldValidators["direct_connect_choice.direct_connect_disabled"]; exists {
			val := m.GetDirectConnectChoice().(*CreateSpecType_DirectConnectDisabled).DirectConnectDisabled
			vOpts := append(opts,
				db.WithValidateField("direct_connect_choice"),
				db.WithValidateField("direct_connect_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DirectConnectEnabled:
		if fv, exists := v.FldValidators["direct_connect_choice.direct_connect_enabled"]; exists {
			val := m.GetDirectConnectChoice().(*CreateSpecType_DirectConnectEnabled).DirectConnectEnabled
			vOpts := append(opts,
				db.WithValidateField("direct_connect_choice"),
				db.WithValidateField("direct_connect_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_PrivateConnectivity:
		if fv, exists := v.FldValidators["direct_connect_choice.private_connectivity"]; exists {
			val := m.GetDirectConnectChoice().(*CreateSpecType_PrivateConnectivity).PrivateConnectivity
			vOpts := append(opts,
				db.WithValidateField("direct_connect_choice"),
				db.WithValidateField("private_connectivity"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["egress_gateway_choice"]; exists {
		val := m.GetEgressGatewayChoice()
		vOpts := append(opts,
			db.WithValidateField("egress_gateway_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEgressGatewayChoice().(type) {
	case *CreateSpecType_EgressGatewayDefault:
		if fv, exists := v.FldValidators["egress_gateway_choice.egress_gateway_default"]; exists {
			val := m.GetEgressGatewayChoice().(*CreateSpecType_EgressGatewayDefault).EgressGatewayDefault
			vOpts := append(opts,
				db.WithValidateField("egress_gateway_choice"),
				db.WithValidateField("egress_gateway_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EgressNatGw:
		if fv, exists := v.FldValidators["egress_gateway_choice.egress_nat_gw"]; exists {
			val := m.GetEgressGatewayChoice().(*CreateSpecType_EgressNatGw).EgressNatGw
			vOpts := append(opts,
				db.WithValidateField("egress_gateway_choice"),
				db.WithValidateField("egress_nat_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EgressVirtualPrivateGateway:
		if fv, exists := v.FldValidators["egress_gateway_choice.egress_virtual_private_gateway"]; exists {
			val := m.GetEgressGatewayChoice().(*CreateSpecType_EgressVirtualPrivateGateway).EgressVirtualPrivateGateway
			vOpts := append(opts,
				db.WithValidateField("egress_gateway_choice"),
				db.WithValidateField("egress_virtual_private_gateway"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["instance_type"]; exists {

		vOpts := append(opts, db.WithValidateField("instance_type"))
		if err := fv(ctx, m.GetInstanceType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["internet_vip_choice"]; exists {
		val := m.GetInternetVipChoice()
		vOpts := append(opts,
			db.WithValidateField("internet_vip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInternetVipChoice().(type) {
	case *CreateSpecType_DisableInternetVip:
		if fv, exists := v.FldValidators["internet_vip_choice.disable_internet_vip"]; exists {
			val := m.GetInternetVipChoice().(*CreateSpecType_DisableInternetVip).DisableInternetVip
			vOpts := append(opts,
				db.WithValidateField("internet_vip_choice"),
				db.WithValidateField("disable_internet_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EnableInternetVip:
		if fv, exists := v.FldValidators["internet_vip_choice.enable_internet_vip"]; exists {
			val := m.GetInternetVipChoice().(*CreateSpecType_EnableInternetVip).EnableInternetVip
			vOpts := append(opts,
				db.WithValidateField("internet_vip_choice"),
				db.WithValidateField("enable_internet_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["os"]; exists {

		vOpts := append(opts, db.WithValidateField("os"))
		if err := fv(ctx, m.GetOs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["security_group_choice"]; exists {
		val := m.GetSecurityGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("security_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSecurityGroupChoice().(type) {
	case *CreateSpecType_F5XcSecurityGroup:
		if fv, exists := v.FldValidators["security_group_choice.f5xc_security_group"]; exists {
			val := m.GetSecurityGroupChoice().(*CreateSpecType_F5XcSecurityGroup).F5XcSecurityGroup
			vOpts := append(opts,
				db.WithValidateField("security_group_choice"),
				db.WithValidateField("f5xc_security_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_CustomSecurityGroup:
		if fv, exists := v.FldValidators["security_group_choice.custom_security_group"]; exists {
			val := m.GetSecurityGroupChoice().(*CreateSpecType_CustomSecurityGroup).CustomSecurityGroup
			vOpts := append(opts,
				db.WithValidateField("security_group_choice"),
				db.WithValidateField("custom_security_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *CreateSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*CreateSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*CreateSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*CreateSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sw"]; exists {

		vOpts := append(opts, db.WithValidateField("sw"))
		if err := fv(ctx, m.GetSw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {
		vOpts := append(opts, db.WithValidateField("tags"))
		if err := fv(ctx, m.GetTags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vpc"]; exists {

		vOpts := append(opts, db.WithValidateField("vpc"))
		if err := fv(ctx, m.GetVpc(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		val := m.GetWorkerNodes()
		vOpts := append(opts,
			db.WithValidateField("worker_nodes"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWorkerNodes().(type) {
	case *CreateSpecType_NodesPerAz:
		if fv, exists := v.FldValidators["worker_nodes.nodes_per_az"]; exists {
			val := m.GetWorkerNodes().(*CreateSpecType_NodesPerAz).NodesPerAz
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("nodes_per_az"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_TotalNodes:
		if fv, exists := v.FldValidators["worker_nodes.total_nodes"]; exists {
			val := m.GetWorkerNodes().(*CreateSpecType_TotalNodes).TotalNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("total_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NoWorkerNodes:
		if fv, exists := v.FldValidators["worker_nodes.no_worker_nodes"]; exists {
			val := m.GetWorkerNodes().(*CreateSpecType_NoWorkerNodes).NoWorkerNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("no_worker_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhDirectConnectChoice := v.DirectConnectChoiceValidationRuleHandler
	rulesDirectConnectChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDirectConnectChoice(rulesDirectConnectChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.direct_connect_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["direct_connect_choice"] = vFn

	vrhEgressGatewayChoice := v.EgressGatewayChoiceValidationRuleHandler
	rulesEgressGatewayChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEgressGatewayChoice(rulesEgressGatewayChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.egress_gateway_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["egress_gateway_choice"] = vFn

	vrhInternetVipChoice := v.InternetVipChoiceValidationRuleHandler
	rulesInternetVipChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInternetVipChoice(rulesInternetVipChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.internet_vip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["internet_vip_choice"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhSecurityGroupChoice := v.SecurityGroupChoiceValidationRuleHandler
	rulesSecurityGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSecurityGroupChoice(rulesSecurityGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.security_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["security_group_choice"] = vFn

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhWorkerNodesNodesPerAz := v.WorkerNodesNodesPerAzValidationRuleHandler
	rulesWorkerNodesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFnMap["worker_nodes.nodes_per_az"], err = vrhWorkerNodesNodesPerAz(rulesWorkerNodesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.worker_nodes_nodes_per_az: %s", err)
		panic(errMsg)
	}
	vrhWorkerNodesTotalNodes := v.WorkerNodesTotalNodesValidationRuleHandler
	rulesWorkerNodesTotalNodes := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "61",
	}
	vFnMap["worker_nodes.total_nodes"], err = vrhWorkerNodesTotalNodes(rulesWorkerNodesTotalNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.worker_nodes_total_nodes: %s", err)
		panic(errMsg)
	}

	v.FldValidators["worker_nodes.nodes_per_az"] = vFnMap["worker_nodes.nodes_per_az"]
	v.FldValidators["worker_nodes.total_nodes"] = vFnMap["worker_nodes.total_nodes"]

	vrhInstanceType := v.InstanceTypeValidationRuleHandler
	rulesInstanceType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhInstanceType(rulesInstanceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.instance_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["instance_type"] = vFn

	vrhAwsRegion := v.AwsRegionValidationRuleHandler
	rulesAwsRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAwsRegion(rulesAwsRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.aws_region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_region"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "8192",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "2048",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhTags := v.TagsValidationRuleHandler
	rulesTags := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "127",
		"ves.io.schema.rules.map.max_pairs":             "40",
		"ves.io.schema.rules.map.values.string.max_len": "255",
	}
	vFn, err = vrhTags(rulesTags)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.tags: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tags"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["deployment.aws_cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["direct_connect_choice.direct_connect_enabled"] = ves_io_schema_views.DirectConnectConfigTypeValidator().Validate
	v.FldValidators["direct_connect_choice.private_connectivity"] = ves_io_schema_views.PrivateConnectConfigTypeValidator().Validate

	v.FldValidators["egress_gateway_choice.egress_nat_gw"] = ves_io_schema_views.AWSNATGatewaychoiceTypeValidator().Validate
	v.FldValidators["egress_gateway_choice.egress_virtual_private_gateway"] = ves_io_schema_views.AWSVirtualPrivateGatewaychoiceTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["security_group_choice.custom_security_group"] = ves_io_schema_views.SecurityGroupTypeValidator().Validate

	v.FldValidators["site_type.ingress_gw"] = AWSVPCIngressGwTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw"] = AWSVPCIngressEgressGwTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = AWSVPCVoltstackClusterTypeValidator().Validate

	v.FldValidators["vpc"] = ves_io_schema_views.AWSVPCchoiceTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["sw"] = ves_io_schema_views.VolterraSoftwareTypeValidator().Validate

	v.FldValidators["os"] = ves_io_schema_views.OperatingSystemTypeValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.voltstack_cluster")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDeploymentDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDirectConnectChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDirectConnectChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GetSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDeployment().(type) {
	case *GetSpecType_AwsCred:

		vref := m.GetAwsCred()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		dri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "aws_cred",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GetSpecType_Assisted:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *GetSpecType_AwsCred:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetAwsCred()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GetSpecType_Assisted:

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetDirectConnectChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDirectConnectChoice() == nil {
		return nil, nil
	}
	switch m.GetDirectConnectChoice().(type) {
	case *GetSpecType_DirectConnectDisabled:

		return nil, nil

	case *GetSpecType_DirectConnectEnabled:

		return nil, nil

	case *GetSpecType_PrivateConnectivity:

		drInfos, err := m.GetPrivateConnectivity().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPrivateConnectivity().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "private_connectivity." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GetSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:

		return nil, nil

	case *GetSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:

	case *GetSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteType() == nil {
		return nil, nil
	}
	switch m.GetSiteType().(type) {
	case *GetSpecType_IngressGw:

		return nil, nil

	case *GetSpecType_IngressEgressGw:

		drInfos, err := m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGw().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_VoltstackCluster:

		drInfos, err := m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackCluster().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) DirectConnectChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for direct_connect_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) EgressGatewayChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for egress_gateway_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) InternetVipChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for internet_vip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) SecurityGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for security_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for worker_nodes")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) WorkerNodesNodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_NodesPerAz, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}
	return oValidatorFn_NodesPerAz, nil
}
func (v *ValidateGetSpecType) WorkerNodesTotalNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TotalNodes, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for total_nodes")
	}
	return oValidatorFn_TotalNodes, nil
}

func (v *ValidateGetSpecType) InstanceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for instance_type")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) VolterraSoftwareVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_software_version")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) OperatingSystemVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for operating_system_version")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) AwsRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for aws_region")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) VipParamsPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for vip_params_per_az")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_site.PublishVIPParamsPerAz, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_site.PublishVIPParamsPerAzValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for vip_params_per_az")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_site.PublishVIPParamsPerAz)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_site.PublishVIPParamsPerAz, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated vip_params_per_az")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items vip_params_per_az")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) TagsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for tags")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for tags")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for tags")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map tags")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tags")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["aws_region"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_region"))
		if err := fv(ctx, m.GetAwsRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *GetSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GetSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GetSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BlockAllServices:
		if fv, exists := v.FldValidators["blocked_services_choice.block_all_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GetSpecType_BlockAllServices).BlockAllServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("block_all_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cloud_site_info"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_site_info"))
		if err := fv(ctx, m.GetCloudSiteInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *GetSpecType_AwsCred:
		if fv, exists := v.FldValidators["deployment.aws_cred"]; exists {
			val := m.GetDeployment().(*GetSpecType_AwsCred).AwsCred
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("aws_cred"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Assisted:
		if fv, exists := v.FldValidators["deployment.assisted"]; exists {
			val := m.GetDeployment().(*GetSpecType_Assisted).Assisted
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("assisted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["direct_connect_choice"]; exists {
		val := m.GetDirectConnectChoice()
		vOpts := append(opts,
			db.WithValidateField("direct_connect_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDirectConnectChoice().(type) {
	case *GetSpecType_DirectConnectDisabled:
		if fv, exists := v.FldValidators["direct_connect_choice.direct_connect_disabled"]; exists {
			val := m.GetDirectConnectChoice().(*GetSpecType_DirectConnectDisabled).DirectConnectDisabled
			vOpts := append(opts,
				db.WithValidateField("direct_connect_choice"),
				db.WithValidateField("direct_connect_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DirectConnectEnabled:
		if fv, exists := v.FldValidators["direct_connect_choice.direct_connect_enabled"]; exists {
			val := m.GetDirectConnectChoice().(*GetSpecType_DirectConnectEnabled).DirectConnectEnabled
			vOpts := append(opts,
				db.WithValidateField("direct_connect_choice"),
				db.WithValidateField("direct_connect_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_PrivateConnectivity:
		if fv, exists := v.FldValidators["direct_connect_choice.private_connectivity"]; exists {
			val := m.GetDirectConnectChoice().(*GetSpecType_PrivateConnectivity).PrivateConnectivity
			vOpts := append(opts,
				db.WithValidateField("direct_connect_choice"),
				db.WithValidateField("private_connectivity"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["direct_connect_info"]; exists {

		vOpts := append(opts, db.WithValidateField("direct_connect_info"))
		if err := fv(ctx, m.GetDirectConnectInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["egress_gateway_choice"]; exists {
		val := m.GetEgressGatewayChoice()
		vOpts := append(opts,
			db.WithValidateField("egress_gateway_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEgressGatewayChoice().(type) {
	case *GetSpecType_EgressGatewayDefault:
		if fv, exists := v.FldValidators["egress_gateway_choice.egress_gateway_default"]; exists {
			val := m.GetEgressGatewayChoice().(*GetSpecType_EgressGatewayDefault).EgressGatewayDefault
			vOpts := append(opts,
				db.WithValidateField("egress_gateway_choice"),
				db.WithValidateField("egress_gateway_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EgressNatGw:
		if fv, exists := v.FldValidators["egress_gateway_choice.egress_nat_gw"]; exists {
			val := m.GetEgressGatewayChoice().(*GetSpecType_EgressNatGw).EgressNatGw
			vOpts := append(opts,
				db.WithValidateField("egress_gateway_choice"),
				db.WithValidateField("egress_nat_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EgressVirtualPrivateGateway:
		if fv, exists := v.FldValidators["egress_gateway_choice.egress_virtual_private_gateway"]; exists {
			val := m.GetEgressGatewayChoice().(*GetSpecType_EgressVirtualPrivateGateway).EgressVirtualPrivateGateway
			vOpts := append(opts,
				db.WithValidateField("egress_gateway_choice"),
				db.WithValidateField("egress_virtual_private_gateway"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["error_description"]; exists {

		vOpts := append(opts, db.WithValidateField("error_description"))
		if err := fv(ctx, m.GetErrorDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["instance_type"]; exists {

		vOpts := append(opts, db.WithValidateField("instance_type"))
		if err := fv(ctx, m.GetInstanceType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["internet_vip_choice"]; exists {
		val := m.GetInternetVipChoice()
		vOpts := append(opts,
			db.WithValidateField("internet_vip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInternetVipChoice().(type) {
	case *GetSpecType_DisableInternetVip:
		if fv, exists := v.FldValidators["internet_vip_choice.disable_internet_vip"]; exists {
			val := m.GetInternetVipChoice().(*GetSpecType_DisableInternetVip).DisableInternetVip
			vOpts := append(opts,
				db.WithValidateField("internet_vip_choice"),
				db.WithValidateField("disable_internet_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EnableInternetVip:
		if fv, exists := v.FldValidators["internet_vip_choice.enable_internet_vip"]; exists {
			val := m.GetInternetVipChoice().(*GetSpecType_EnableInternetVip).EnableInternetVip
			vOpts := append(opts,
				db.WithValidateField("internet_vip_choice"),
				db.WithValidateField("enable_internet_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["operating_system_version"]; exists {

		vOpts := append(opts, db.WithValidateField("operating_system_version"))
		if err := fv(ctx, m.GetOperatingSystemVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["security_group_choice"]; exists {
		val := m.GetSecurityGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("security_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSecurityGroupChoice().(type) {
	case *GetSpecType_F5XcSecurityGroup:
		if fv, exists := v.FldValidators["security_group_choice.f5xc_security_group"]; exists {
			val := m.GetSecurityGroupChoice().(*GetSpecType_F5XcSecurityGroup).F5XcSecurityGroup
			vOpts := append(opts,
				db.WithValidateField("security_group_choice"),
				db.WithValidateField("f5xc_security_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_CustomSecurityGroup:
		if fv, exists := v.FldValidators["security_group_choice.custom_security_group"]; exists {
			val := m.GetSecurityGroupChoice().(*GetSpecType_CustomSecurityGroup).CustomSecurityGroup
			vOpts := append(opts,
				db.WithValidateField("security_group_choice"),
				db.WithValidateField("custom_security_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_errors"]; exists {

		vOpts := append(opts, db.WithValidateField("site_errors"))
		for idx, item := range m.GetSiteErrors() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_state"]; exists {

		vOpts := append(opts, db.WithValidateField("site_state"))
		if err := fv(ctx, m.GetSiteState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *GetSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*GetSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*GetSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*GetSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["suggested_action"]; exists {

		vOpts := append(opts, db.WithValidateField("suggested_action"))
		if err := fv(ctx, m.GetSuggestedAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {
		vOpts := append(opts, db.WithValidateField("tags"))
		if err := fv(ctx, m.GetTags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_modification_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("user_modification_timestamp"))
		if err := fv(ctx, m.GetUserModificationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["validation_state"]; exists {

		vOpts := append(opts, db.WithValidateField("validation_state"))
		if err := fv(ctx, m.GetValidationState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_params_per_az"]; exists {
		vOpts := append(opts, db.WithValidateField("vip_params_per_az"))
		if err := fv(ctx, m.GetVipParamsPerAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_software_version"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_software_version"))
		if err := fv(ctx, m.GetVolterraSoftwareVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vpc"]; exists {

		vOpts := append(opts, db.WithValidateField("vpc"))
		if err := fv(ctx, m.GetVpc(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		val := m.GetWorkerNodes()
		vOpts := append(opts,
			db.WithValidateField("worker_nodes"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWorkerNodes().(type) {
	case *GetSpecType_NodesPerAz:
		if fv, exists := v.FldValidators["worker_nodes.nodes_per_az"]; exists {
			val := m.GetWorkerNodes().(*GetSpecType_NodesPerAz).NodesPerAz
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("nodes_per_az"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_TotalNodes:
		if fv, exists := v.FldValidators["worker_nodes.total_nodes"]; exists {
			val := m.GetWorkerNodes().(*GetSpecType_TotalNodes).TotalNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("total_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NoWorkerNodes:
		if fv, exists := v.FldValidators["worker_nodes.no_worker_nodes"]; exists {
			val := m.GetWorkerNodes().(*GetSpecType_NoWorkerNodes).NoWorkerNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("no_worker_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhDirectConnectChoice := v.DirectConnectChoiceValidationRuleHandler
	rulesDirectConnectChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDirectConnectChoice(rulesDirectConnectChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.direct_connect_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["direct_connect_choice"] = vFn

	vrhEgressGatewayChoice := v.EgressGatewayChoiceValidationRuleHandler
	rulesEgressGatewayChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEgressGatewayChoice(rulesEgressGatewayChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.egress_gateway_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["egress_gateway_choice"] = vFn

	vrhInternetVipChoice := v.InternetVipChoiceValidationRuleHandler
	rulesInternetVipChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInternetVipChoice(rulesInternetVipChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.internet_vip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["internet_vip_choice"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhSecurityGroupChoice := v.SecurityGroupChoiceValidationRuleHandler
	rulesSecurityGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSecurityGroupChoice(rulesSecurityGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.security_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["security_group_choice"] = vFn

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhWorkerNodesNodesPerAz := v.WorkerNodesNodesPerAzValidationRuleHandler
	rulesWorkerNodesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFnMap["worker_nodes.nodes_per_az"], err = vrhWorkerNodesNodesPerAz(rulesWorkerNodesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.worker_nodes_nodes_per_az: %s", err)
		panic(errMsg)
	}
	vrhWorkerNodesTotalNodes := v.WorkerNodesTotalNodesValidationRuleHandler
	rulesWorkerNodesTotalNodes := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "61",
	}
	vFnMap["worker_nodes.total_nodes"], err = vrhWorkerNodesTotalNodes(rulesWorkerNodesTotalNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.worker_nodes_total_nodes: %s", err)
		panic(errMsg)
	}

	v.FldValidators["worker_nodes.nodes_per_az"] = vFnMap["worker_nodes.nodes_per_az"]
	v.FldValidators["worker_nodes.total_nodes"] = vFnMap["worker_nodes.total_nodes"]

	vrhInstanceType := v.InstanceTypeValidationRuleHandler
	rulesInstanceType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhInstanceType(rulesInstanceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.instance_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["instance_type"] = vFn

	vrhVolterraSoftwareVersion := v.VolterraSoftwareVersionValidationRuleHandler
	rulesVolterraSoftwareVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhVolterraSoftwareVersion(rulesVolterraSoftwareVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.volterra_software_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_software_version"] = vFn

	vrhOperatingSystemVersion := v.OperatingSystemVersionValidationRuleHandler
	rulesOperatingSystemVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhOperatingSystemVersion(rulesOperatingSystemVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.operating_system_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["operating_system_version"] = vFn

	vrhAwsRegion := v.AwsRegionValidationRuleHandler
	rulesAwsRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAwsRegion(rulesAwsRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.aws_region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_region"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "8192",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "2048",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhVipParamsPerAz := v.VipParamsPerAzValidationRuleHandler
	rulesVipParamsPerAz := map[string]string{
		"ves.io.schema.rules.repeated.num_items": "0,1,2,3",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhVipParamsPerAz(rulesVipParamsPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.vip_params_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_params_per_az"] = vFn

	vrhTags := v.TagsValidationRuleHandler
	rulesTags := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "127",
		"ves.io.schema.rules.map.max_pairs":             "40",
		"ves.io.schema.rules.map.values.string.max_len": "255",
	}
	vFn, err = vrhTags(rulesTags)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.tags: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tags"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["deployment.aws_cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["direct_connect_choice.direct_connect_enabled"] = ves_io_schema_views.DirectConnectConfigTypeValidator().Validate
	v.FldValidators["direct_connect_choice.private_connectivity"] = ves_io_schema_views.PrivateConnectConfigTypeValidator().Validate

	v.FldValidators["egress_gateway_choice.egress_nat_gw"] = ves_io_schema_views.AWSNATGatewaychoiceTypeValidator().Validate
	v.FldValidators["egress_gateway_choice.egress_virtual_private_gateway"] = ves_io_schema_views.AWSVirtualPrivateGatewaychoiceTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["security_group_choice.custom_security_group"] = ves_io_schema_views.SecurityGroupTypeValidator().Validate

	v.FldValidators["site_type.ingress_gw"] = AWSVPCIngressGwTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw"] = AWSVPCIngressEgressGwTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = AWSVPCVoltstackClusterTypeValidator().Validate

	v.FldValidators["vpc"] = ves_io_schema_views.AWSVPCchoiceTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	v.FldValidators["cloud_site_info"] = AWSVPCSiteInfoTypeValidator().Validate

	v.FldValidators["direct_connect_info"] = ves_io_schema_views.DirectConnectInfoValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.voltstack_cluster")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDeploymentDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDirectConnectChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDirectConnectChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetTfParamsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetTfParamsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDeployment().(type) {
	case *GlobalSpecType_AwsCred:

		vref := m.GetAwsCred()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		dri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "aws_cred",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GlobalSpecType_Assisted:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *GlobalSpecType_AwsCred:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetAwsCred()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GlobalSpecType_Assisted:

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetDirectConnectChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDirectConnectChoice() == nil {
		return nil, nil
	}
	switch m.GetDirectConnectChoice().(type) {
	case *GlobalSpecType_DirectConnectDisabled:

		return nil, nil

	case *GlobalSpecType_DirectConnectEnabled:

		return nil, nil

	case *GlobalSpecType_PrivateConnectivity:

		drInfos, err := m.GetPrivateConnectivity().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPrivateConnectivity().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "private_connectivity." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:

		return nil, nil

	case *GlobalSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:

	case *GlobalSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteType() == nil {
		return nil, nil
	}
	switch m.GetSiteType().(type) {
	case *GlobalSpecType_IngressGw:

		return nil, nil

	case *GlobalSpecType_IngressEgressGw:

		drInfos, err := m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGw().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_VoltstackCluster:

		drInfos, err := m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackCluster().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetTfParamsDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetTfParams()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("terraform_parameters.Object")
	dri := db.DRefInfo{
		RefdType:   "terraform_parameters.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "tf_params",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetTfParamsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetTfParamsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "terraform_parameters.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: terraform_parameters")
	}

	vref := m.GetTfParams()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "terraform_parameters.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DirectConnectChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for direct_connect_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) EgressGatewayChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for egress_gateway_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) InternetVipChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for internet_vip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SecurityGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for security_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for worker_nodes")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) WorkerNodesNodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_NodesPerAz, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}
	return oValidatorFn_NodesPerAz, nil
}
func (v *ValidateGlobalSpecType) WorkerNodesTotalNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TotalNodes, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for total_nodes")
	}
	return oValidatorFn_TotalNodes, nil
}

func (v *ValidateGlobalSpecType) InstanceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for instance_type")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VolterraSoftwareVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_software_version")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) OperatingSystemVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for operating_system_version")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) AwsRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for aws_region")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VipParamsPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for vip_params_per_az")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_site.PublishVIPParamsPerAz, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_site.PublishVIPParamsPerAzValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for vip_params_per_az")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_site.PublishVIPParamsPerAz)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_site.PublishVIPParamsPerAz, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated vip_params_per_az")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items vip_params_per_az")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TagsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for tags")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for tags")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for tags")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map tags")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tags")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["aws_region"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_region"))
		if err := fv(ctx, m.GetAwsRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *GlobalSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GlobalSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BlockAllServices:
		if fv, exists := v.FldValidators["blocked_services_choice.block_all_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockAllServices).BlockAllServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("block_all_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cloud_site_info"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_site_info"))
		if err := fv(ctx, m.GetCloudSiteInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *GlobalSpecType_AwsCred:
		if fv, exists := v.FldValidators["deployment.aws_cred"]; exists {
			val := m.GetDeployment().(*GlobalSpecType_AwsCred).AwsCred
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("aws_cred"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Assisted:
		if fv, exists := v.FldValidators["deployment.assisted"]; exists {
			val := m.GetDeployment().(*GlobalSpecType_Assisted).Assisted
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("assisted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["direct_connect_choice"]; exists {
		val := m.GetDirectConnectChoice()
		vOpts := append(opts,
			db.WithValidateField("direct_connect_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDirectConnectChoice().(type) {
	case *GlobalSpecType_DirectConnectDisabled:
		if fv, exists := v.FldValidators["direct_connect_choice.direct_connect_disabled"]; exists {
			val := m.GetDirectConnectChoice().(*GlobalSpecType_DirectConnectDisabled).DirectConnectDisabled
			vOpts := append(opts,
				db.WithValidateField("direct_connect_choice"),
				db.WithValidateField("direct_connect_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DirectConnectEnabled:
		if fv, exists := v.FldValidators["direct_connect_choice.direct_connect_enabled"]; exists {
			val := m.GetDirectConnectChoice().(*GlobalSpecType_DirectConnectEnabled).DirectConnectEnabled
			vOpts := append(opts,
				db.WithValidateField("direct_connect_choice"),
				db.WithValidateField("direct_connect_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_PrivateConnectivity:
		if fv, exists := v.FldValidators["direct_connect_choice.private_connectivity"]; exists {
			val := m.GetDirectConnectChoice().(*GlobalSpecType_PrivateConnectivity).PrivateConnectivity
			vOpts := append(opts,
				db.WithValidateField("direct_connect_choice"),
				db.WithValidateField("private_connectivity"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["direct_connect_info"]; exists {

		vOpts := append(opts, db.WithValidateField("direct_connect_info"))
		if err := fv(ctx, m.GetDirectConnectInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["egress_gateway_choice"]; exists {
		val := m.GetEgressGatewayChoice()
		vOpts := append(opts,
			db.WithValidateField("egress_gateway_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEgressGatewayChoice().(type) {
	case *GlobalSpecType_EgressGatewayDefault:
		if fv, exists := v.FldValidators["egress_gateway_choice.egress_gateway_default"]; exists {
			val := m.GetEgressGatewayChoice().(*GlobalSpecType_EgressGatewayDefault).EgressGatewayDefault
			vOpts := append(opts,
				db.WithValidateField("egress_gateway_choice"),
				db.WithValidateField("egress_gateway_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EgressNatGw:
		if fv, exists := v.FldValidators["egress_gateway_choice.egress_nat_gw"]; exists {
			val := m.GetEgressGatewayChoice().(*GlobalSpecType_EgressNatGw).EgressNatGw
			vOpts := append(opts,
				db.WithValidateField("egress_gateway_choice"),
				db.WithValidateField("egress_nat_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EgressVirtualPrivateGateway:
		if fv, exists := v.FldValidators["egress_gateway_choice.egress_virtual_private_gateway"]; exists {
			val := m.GetEgressGatewayChoice().(*GlobalSpecType_EgressVirtualPrivateGateway).EgressVirtualPrivateGateway
			vOpts := append(opts,
				db.WithValidateField("egress_gateway_choice"),
				db.WithValidateField("egress_virtual_private_gateway"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["error_description"]; exists {

		vOpts := append(opts, db.WithValidateField("error_description"))
		if err := fv(ctx, m.GetErrorDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["instance_type"]; exists {

		vOpts := append(opts, db.WithValidateField("instance_type"))
		if err := fv(ctx, m.GetInstanceType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["internet_vip_choice"]; exists {
		val := m.GetInternetVipChoice()
		vOpts := append(opts,
			db.WithValidateField("internet_vip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInternetVipChoice().(type) {
	case *GlobalSpecType_DisableInternetVip:
		if fv, exists := v.FldValidators["internet_vip_choice.disable_internet_vip"]; exists {
			val := m.GetInternetVipChoice().(*GlobalSpecType_DisableInternetVip).DisableInternetVip
			vOpts := append(opts,
				db.WithValidateField("internet_vip_choice"),
				db.WithValidateField("disable_internet_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EnableInternetVip:
		if fv, exists := v.FldValidators["internet_vip_choice.enable_internet_vip"]; exists {
			val := m.GetInternetVipChoice().(*GlobalSpecType_EnableInternetVip).EnableInternetVip
			vOpts := append(opts,
				db.WithValidateField("internet_vip_choice"),
				db.WithValidateField("enable_internet_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["operating_system_version"]; exists {

		vOpts := append(opts, db.WithValidateField("operating_system_version"))
		if err := fv(ctx, m.GetOperatingSystemVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["os"]; exists {

		vOpts := append(opts, db.WithValidateField("os"))
		if err := fv(ctx, m.GetOs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["security_group_choice"]; exists {
		val := m.GetSecurityGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("security_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSecurityGroupChoice().(type) {
	case *GlobalSpecType_F5XcSecurityGroup:
		if fv, exists := v.FldValidators["security_group_choice.f5xc_security_group"]; exists {
			val := m.GetSecurityGroupChoice().(*GlobalSpecType_F5XcSecurityGroup).F5XcSecurityGroup
			vOpts := append(opts,
				db.WithValidateField("security_group_choice"),
				db.WithValidateField("f5xc_security_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_CustomSecurityGroup:
		if fv, exists := v.FldValidators["security_group_choice.custom_security_group"]; exists {
			val := m.GetSecurityGroupChoice().(*GlobalSpecType_CustomSecurityGroup).CustomSecurityGroup
			vOpts := append(opts,
				db.WithValidateField("security_group_choice"),
				db.WithValidateField("custom_security_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_errors"]; exists {

		vOpts := append(opts, db.WithValidateField("site_errors"))
		for idx, item := range m.GetSiteErrors() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_to_site_tunnel_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("site_to_site_tunnel_ip"))
		if err := fv(ctx, m.GetSiteToSiteTunnelIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *GlobalSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["suggested_action"]; exists {

		vOpts := append(opts, db.WithValidateField("suggested_action"))
		if err := fv(ctx, m.GetSuggestedAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sw"]; exists {

		vOpts := append(opts, db.WithValidateField("sw"))
		if err := fv(ctx, m.GetSw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {
		vOpts := append(opts, db.WithValidateField("tags"))
		if err := fv(ctx, m.GetTags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tf_params"]; exists {

		vOpts := append(opts, db.WithValidateField("tf_params"))
		if err := fv(ctx, m.GetTfParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_modification_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("user_modification_timestamp"))
		if err := fv(ctx, m.GetUserModificationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["validation_state"]; exists {

		vOpts := append(opts, db.WithValidateField("validation_state"))
		if err := fv(ctx, m.GetValidationState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_params_per_az"]; exists {
		vOpts := append(opts, db.WithValidateField("vip_params_per_az"))
		if err := fv(ctx, m.GetVipParamsPerAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_software_version"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_software_version"))
		if err := fv(ctx, m.GetVolterraSoftwareVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vpc"]; exists {

		vOpts := append(opts, db.WithValidateField("vpc"))
		if err := fv(ctx, m.GetVpc(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		val := m.GetWorkerNodes()
		vOpts := append(opts,
			db.WithValidateField("worker_nodes"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWorkerNodes().(type) {
	case *GlobalSpecType_NodesPerAz:
		if fv, exists := v.FldValidators["worker_nodes.nodes_per_az"]; exists {
			val := m.GetWorkerNodes().(*GlobalSpecType_NodesPerAz).NodesPerAz
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("nodes_per_az"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_TotalNodes:
		if fv, exists := v.FldValidators["worker_nodes.total_nodes"]; exists {
			val := m.GetWorkerNodes().(*GlobalSpecType_TotalNodes).TotalNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("total_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NoWorkerNodes:
		if fv, exists := v.FldValidators["worker_nodes.no_worker_nodes"]; exists {
			val := m.GetWorkerNodes().(*GlobalSpecType_NoWorkerNodes).NoWorkerNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("no_worker_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhDirectConnectChoice := v.DirectConnectChoiceValidationRuleHandler
	rulesDirectConnectChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDirectConnectChoice(rulesDirectConnectChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.direct_connect_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["direct_connect_choice"] = vFn

	vrhEgressGatewayChoice := v.EgressGatewayChoiceValidationRuleHandler
	rulesEgressGatewayChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEgressGatewayChoice(rulesEgressGatewayChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.egress_gateway_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["egress_gateway_choice"] = vFn

	vrhInternetVipChoice := v.InternetVipChoiceValidationRuleHandler
	rulesInternetVipChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInternetVipChoice(rulesInternetVipChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.internet_vip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["internet_vip_choice"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhSecurityGroupChoice := v.SecurityGroupChoiceValidationRuleHandler
	rulesSecurityGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSecurityGroupChoice(rulesSecurityGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.security_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["security_group_choice"] = vFn

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhWorkerNodesNodesPerAz := v.WorkerNodesNodesPerAzValidationRuleHandler
	rulesWorkerNodesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFnMap["worker_nodes.nodes_per_az"], err = vrhWorkerNodesNodesPerAz(rulesWorkerNodesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.worker_nodes_nodes_per_az: %s", err)
		panic(errMsg)
	}
	vrhWorkerNodesTotalNodes := v.WorkerNodesTotalNodesValidationRuleHandler
	rulesWorkerNodesTotalNodes := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "61",
	}
	vFnMap["worker_nodes.total_nodes"], err = vrhWorkerNodesTotalNodes(rulesWorkerNodesTotalNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.worker_nodes_total_nodes: %s", err)
		panic(errMsg)
	}

	v.FldValidators["worker_nodes.nodes_per_az"] = vFnMap["worker_nodes.nodes_per_az"]
	v.FldValidators["worker_nodes.total_nodes"] = vFnMap["worker_nodes.total_nodes"]

	vrhInstanceType := v.InstanceTypeValidationRuleHandler
	rulesInstanceType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhInstanceType(rulesInstanceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.instance_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["instance_type"] = vFn

	vrhVolterraSoftwareVersion := v.VolterraSoftwareVersionValidationRuleHandler
	rulesVolterraSoftwareVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhVolterraSoftwareVersion(rulesVolterraSoftwareVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.volterra_software_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_software_version"] = vFn

	vrhOperatingSystemVersion := v.OperatingSystemVersionValidationRuleHandler
	rulesOperatingSystemVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhOperatingSystemVersion(rulesOperatingSystemVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.operating_system_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["operating_system_version"] = vFn

	vrhAwsRegion := v.AwsRegionValidationRuleHandler
	rulesAwsRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAwsRegion(rulesAwsRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.aws_region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_region"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "8192",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "2048",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhVipParamsPerAz := v.VipParamsPerAzValidationRuleHandler
	rulesVipParamsPerAz := map[string]string{
		"ves.io.schema.rules.repeated.num_items": "0,1,2,3",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhVipParamsPerAz(rulesVipParamsPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.vip_params_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_params_per_az"] = vFn

	vrhTags := v.TagsValidationRuleHandler
	rulesTags := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "127",
		"ves.io.schema.rules.map.max_pairs":             "40",
		"ves.io.schema.rules.map.values.string.max_len": "255",
	}
	vFn, err = vrhTags(rulesTags)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.tags: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tags"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["deployment.aws_cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["direct_connect_choice.direct_connect_enabled"] = ves_io_schema_views.DirectConnectConfigTypeValidator().Validate
	v.FldValidators["direct_connect_choice.private_connectivity"] = ves_io_schema_views.PrivateConnectConfigTypeValidator().Validate

	v.FldValidators["egress_gateway_choice.egress_nat_gw"] = ves_io_schema_views.AWSNATGatewaychoiceTypeValidator().Validate
	v.FldValidators["egress_gateway_choice.egress_virtual_private_gateway"] = ves_io_schema_views.AWSVirtualPrivateGatewaychoiceTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["security_group_choice.custom_security_group"] = ves_io_schema_views.SecurityGroupTypeValidator().Validate

	v.FldValidators["site_type.ingress_gw"] = AWSVPCIngressGwTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw"] = AWSVPCIngressEgressGwTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = AWSVPCVoltstackClusterTypeValidator().Validate

	v.FldValidators["vpc"] = ves_io_schema_views.AWSVPCchoiceTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["sw"] = ves_io_schema_views.VolterraSoftwareTypeValidator().Validate

	v.FldValidators["os"] = ves_io_schema_views.OperatingSystemTypeValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	v.FldValidators["tf_params"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cloud_site_info"] = AWSVPCSiteInfoTypeValidator().Validate

	v.FldValidators["direct_connect_info"] = ves_io_schema_views.DirectConnectInfoValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.voltstack_cluster")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDeploymentDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDirectConnectChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDirectConnectChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *ReplaceSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDeployment().(type) {
	case *ReplaceSpecType_AwsCred:

		vref := m.GetAwsCred()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		dri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "aws_cred",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *ReplaceSpecType_AwsCred:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetAwsCred()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetDirectConnectChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDirectConnectChoice() == nil {
		return nil, nil
	}
	switch m.GetDirectConnectChoice().(type) {
	case *ReplaceSpecType_DirectConnectDisabled:

		return nil, nil

	case *ReplaceSpecType_DirectConnectEnabled:

		return nil, nil

	case *ReplaceSpecType_PrivateConnectivity:

		drInfos, err := m.GetPrivateConnectivity().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPrivateConnectivity().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "private_connectivity." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *ReplaceSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:

		return nil, nil

	case *ReplaceSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:

	case *ReplaceSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteType() == nil {
		return nil, nil
	}
	switch m.GetSiteType().(type) {
	case *ReplaceSpecType_IngressGw:

		return nil, nil

	case *ReplaceSpecType_IngressEgressGw:

		drInfos, err := m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGw().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_VoltstackCluster:

		drInfos, err := m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackCluster().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DirectConnectChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for direct_connect_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) InternetVipChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for internet_vip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for worker_nodes")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) WorkerNodesNodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_NodesPerAz, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}
	return oValidatorFn_NodesPerAz, nil
}
func (v *ValidateReplaceSpecType) WorkerNodesTotalNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TotalNodes, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for total_nodes")
	}
	return oValidatorFn_TotalNodes, nil
}

func (v *ValidateReplaceSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *ReplaceSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*ReplaceSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BlockAllServices:
		if fv, exists := v.FldValidators["blocked_services_choice.block_all_services"]; exists {
			val := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockAllServices).BlockAllServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("block_all_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *ReplaceSpecType_AwsCred:
		if fv, exists := v.FldValidators["deployment.aws_cred"]; exists {
			val := m.GetDeployment().(*ReplaceSpecType_AwsCred).AwsCred
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("aws_cred"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["direct_connect_choice"]; exists {
		val := m.GetDirectConnectChoice()
		vOpts := append(opts,
			db.WithValidateField("direct_connect_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDirectConnectChoice().(type) {
	case *ReplaceSpecType_DirectConnectDisabled:
		if fv, exists := v.FldValidators["direct_connect_choice.direct_connect_disabled"]; exists {
			val := m.GetDirectConnectChoice().(*ReplaceSpecType_DirectConnectDisabled).DirectConnectDisabled
			vOpts := append(opts,
				db.WithValidateField("direct_connect_choice"),
				db.WithValidateField("direct_connect_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DirectConnectEnabled:
		if fv, exists := v.FldValidators["direct_connect_choice.direct_connect_enabled"]; exists {
			val := m.GetDirectConnectChoice().(*ReplaceSpecType_DirectConnectEnabled).DirectConnectEnabled
			vOpts := append(opts,
				db.WithValidateField("direct_connect_choice"),
				db.WithValidateField("direct_connect_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_PrivateConnectivity:
		if fv, exists := v.FldValidators["direct_connect_choice.private_connectivity"]; exists {
			val := m.GetDirectConnectChoice().(*ReplaceSpecType_PrivateConnectivity).PrivateConnectivity
			vOpts := append(opts,
				db.WithValidateField("direct_connect_choice"),
				db.WithValidateField("private_connectivity"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["internet_vip_choice"]; exists {
		val := m.GetInternetVipChoice()
		vOpts := append(opts,
			db.WithValidateField("internet_vip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInternetVipChoice().(type) {
	case *ReplaceSpecType_DisableInternetVip:
		if fv, exists := v.FldValidators["internet_vip_choice.disable_internet_vip"]; exists {
			val := m.GetInternetVipChoice().(*ReplaceSpecType_DisableInternetVip).DisableInternetVip
			vOpts := append(opts,
				db.WithValidateField("internet_vip_choice"),
				db.WithValidateField("disable_internet_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EnableInternetVip:
		if fv, exists := v.FldValidators["internet_vip_choice.enable_internet_vip"]; exists {
			val := m.GetInternetVipChoice().(*ReplaceSpecType_EnableInternetVip).EnableInternetVip
			vOpts := append(opts,
				db.WithValidateField("internet_vip_choice"),
				db.WithValidateField("enable_internet_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *ReplaceSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		val := m.GetWorkerNodes()
		vOpts := append(opts,
			db.WithValidateField("worker_nodes"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWorkerNodes().(type) {
	case *ReplaceSpecType_NodesPerAz:
		if fv, exists := v.FldValidators["worker_nodes.nodes_per_az"]; exists {
			val := m.GetWorkerNodes().(*ReplaceSpecType_NodesPerAz).NodesPerAz
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("nodes_per_az"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_TotalNodes:
		if fv, exists := v.FldValidators["worker_nodes.total_nodes"]; exists {
			val := m.GetWorkerNodes().(*ReplaceSpecType_TotalNodes).TotalNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("total_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NoWorkerNodes:
		if fv, exists := v.FldValidators["worker_nodes.no_worker_nodes"]; exists {
			val := m.GetWorkerNodes().(*ReplaceSpecType_NoWorkerNodes).NoWorkerNodes
			vOpts := append(opts,
				db.WithValidateField("worker_nodes"),
				db.WithValidateField("no_worker_nodes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhDirectConnectChoice := v.DirectConnectChoiceValidationRuleHandler
	rulesDirectConnectChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDirectConnectChoice(rulesDirectConnectChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.direct_connect_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["direct_connect_choice"] = vFn

	vrhInternetVipChoice := v.InternetVipChoiceValidationRuleHandler
	rulesInternetVipChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInternetVipChoice(rulesInternetVipChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.internet_vip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["internet_vip_choice"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhWorkerNodesNodesPerAz := v.WorkerNodesNodesPerAzValidationRuleHandler
	rulesWorkerNodesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFnMap["worker_nodes.nodes_per_az"], err = vrhWorkerNodesNodesPerAz(rulesWorkerNodesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.worker_nodes_nodes_per_az: %s", err)
		panic(errMsg)
	}
	vrhWorkerNodesTotalNodes := v.WorkerNodesTotalNodesValidationRuleHandler
	rulesWorkerNodesTotalNodes := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "61",
	}
	vFnMap["worker_nodes.total_nodes"], err = vrhWorkerNodesTotalNodes(rulesWorkerNodesTotalNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.worker_nodes_total_nodes: %s", err)
		panic(errMsg)
	}

	v.FldValidators["worker_nodes.nodes_per_az"] = vFnMap["worker_nodes.nodes_per_az"]
	v.FldValidators["worker_nodes.total_nodes"] = vFnMap["worker_nodes.total_nodes"]

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["deployment.aws_cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["direct_connect_choice.direct_connect_enabled"] = ves_io_schema_views.DirectConnectConfigTypeValidator().Validate
	v.FldValidators["direct_connect_choice.private_connectivity"] = ves_io_schema_views.PrivateConnectConfigTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["site_type.ingress_gw"] = AWSVPCIngressGwReplaceTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw"] = AWSVPCIngressEgressGwReplaceTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = AWSVPCVoltstackClusterReplaceTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in AWSVPCIngressEgressGwReplaceType from AWSVPCIngressEgressGwType for oneof fields
func (r *AWSVPCIngressEgressGwReplaceType) SetDcClusterGroupChoiceToAWSVPCIngressEgressGwType(o *AWSVPCIngressEgressGwType) error {
	switch of := r.DcClusterGroupChoice.(type) {
	case nil:
		o.DcClusterGroupChoice = nil

	case *AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn:
		o.DcClusterGroupChoice = &AWSVPCIngressEgressGwType_DcClusterGroupInsideVn{DcClusterGroupInsideVn: of.DcClusterGroupInsideVn}

	case *AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn:
		o.DcClusterGroupChoice = &AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn{DcClusterGroupOutsideVn: of.DcClusterGroupOutsideVn}

	case *AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup:
		o.DcClusterGroupChoice = &AWSVPCIngressEgressGwType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AWSVPCIngressEgressGwReplaceType) GetDcClusterGroupChoiceFromAWSVPCIngressEgressGwType(o *AWSVPCIngressEgressGwType) error {
	switch of := o.DcClusterGroupChoice.(type) {
	case nil:
		r.DcClusterGroupChoice = nil

	case *AWSVPCIngressEgressGwType_DcClusterGroupInsideVn:
		r.DcClusterGroupChoice = &AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn{DcClusterGroupInsideVn: of.DcClusterGroupInsideVn}

	case *AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn:
		r.DcClusterGroupChoice = &AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn{DcClusterGroupOutsideVn: of.DcClusterGroupOutsideVn}

	case *AWSVPCIngressEgressGwType_NoDcClusterGroup:
		r.DcClusterGroupChoice = &AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AWSVPCIngressEgressGwReplaceType from AWSVPCIngressEgressGwType for oneof fields
func (r *AWSVPCIngressEgressGwReplaceType) SetForwardProxyChoiceToAWSVPCIngressEgressGwType(o *AWSVPCIngressEgressGwType) error {
	switch of := r.ForwardProxyChoice.(type) {
	case nil:
		o.ForwardProxyChoice = nil

	case *AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies:
		o.ForwardProxyChoice = &AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll:
		o.ForwardProxyChoice = &AWSVPCIngressEgressGwType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AWSVPCIngressEgressGwReplaceType_NoForwardProxy:
		o.ForwardProxyChoice = &AWSVPCIngressEgressGwType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AWSVPCIngressEgressGwReplaceType) GetForwardProxyChoiceFromAWSVPCIngressEgressGwType(o *AWSVPCIngressEgressGwType) error {
	switch of := o.ForwardProxyChoice.(type) {
	case nil:
		r.ForwardProxyChoice = nil

	case *AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies:
		r.ForwardProxyChoice = &AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AWSVPCIngressEgressGwType_ForwardProxyAllowAll:
		r.ForwardProxyChoice = &AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AWSVPCIngressEgressGwType_NoForwardProxy:
		r.ForwardProxyChoice = &AWSVPCIngressEgressGwReplaceType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AWSVPCIngressEgressGwReplaceType from AWSVPCIngressEgressGwType for oneof fields
func (r *AWSVPCIngressEgressGwReplaceType) SetGlobalNetworkChoiceToAWSVPCIngressEgressGwType(o *AWSVPCIngressEgressGwType) error {
	switch of := r.GlobalNetworkChoice.(type) {
	case nil:
		o.GlobalNetworkChoice = nil

	case *AWSVPCIngressEgressGwReplaceType_GlobalNetworkList:
		o.GlobalNetworkChoice = &AWSVPCIngressEgressGwType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork:
		o.GlobalNetworkChoice = &AWSVPCIngressEgressGwType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AWSVPCIngressEgressGwReplaceType) GetGlobalNetworkChoiceFromAWSVPCIngressEgressGwType(o *AWSVPCIngressEgressGwType) error {
	switch of := o.GlobalNetworkChoice.(type) {
	case nil:
		r.GlobalNetworkChoice = nil

	case *AWSVPCIngressEgressGwType_GlobalNetworkList:
		r.GlobalNetworkChoice = &AWSVPCIngressEgressGwReplaceType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AWSVPCIngressEgressGwType_NoGlobalNetwork:
		r.GlobalNetworkChoice = &AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AWSVPCIngressEgressGwReplaceType from AWSVPCIngressEgressGwType for oneof fields
func (r *AWSVPCIngressEgressGwReplaceType) SetInsideStaticRouteChoiceToAWSVPCIngressEgressGwType(o *AWSVPCIngressEgressGwType) error {
	switch of := r.InsideStaticRouteChoice.(type) {
	case nil:
		o.InsideStaticRouteChoice = nil

	case *AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes:
		o.InsideStaticRouteChoice = &AWSVPCIngressEgressGwType_InsideStaticRoutes{InsideStaticRoutes: of.InsideStaticRoutes}

	case *AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes:
		o.InsideStaticRouteChoice = &AWSVPCIngressEgressGwType_NoInsideStaticRoutes{NoInsideStaticRoutes: of.NoInsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AWSVPCIngressEgressGwReplaceType) GetInsideStaticRouteChoiceFromAWSVPCIngressEgressGwType(o *AWSVPCIngressEgressGwType) error {
	switch of := o.InsideStaticRouteChoice.(type) {
	case nil:
		r.InsideStaticRouteChoice = nil

	case *AWSVPCIngressEgressGwType_InsideStaticRoutes:
		r.InsideStaticRouteChoice = &AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes{InsideStaticRoutes: of.InsideStaticRoutes}

	case *AWSVPCIngressEgressGwType_NoInsideStaticRoutes:
		r.InsideStaticRouteChoice = &AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes{NoInsideStaticRoutes: of.NoInsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AWSVPCIngressEgressGwReplaceType from AWSVPCIngressEgressGwType for oneof fields
func (r *AWSVPCIngressEgressGwReplaceType) SetNetworkPolicyChoiceToAWSVPCIngressEgressGwType(o *AWSVPCIngressEgressGwType) error {
	switch of := r.NetworkPolicyChoice.(type) {
	case nil:
		o.NetworkPolicyChoice = nil

	case *AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies:
		o.NetworkPolicyChoice = &AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies:
		o.NetworkPolicyChoice = &AWSVPCIngressEgressGwType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy:
		o.NetworkPolicyChoice = &AWSVPCIngressEgressGwType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AWSVPCIngressEgressGwReplaceType) GetNetworkPolicyChoiceFromAWSVPCIngressEgressGwType(o *AWSVPCIngressEgressGwType) error {
	switch of := o.NetworkPolicyChoice.(type) {
	case nil:
		r.NetworkPolicyChoice = nil

	case *AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies:
		r.NetworkPolicyChoice = &AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *AWSVPCIngressEgressGwType_ActiveNetworkPolicies:
		r.NetworkPolicyChoice = &AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AWSVPCIngressEgressGwType_NoNetworkPolicy:
		r.NetworkPolicyChoice = &AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AWSVPCIngressEgressGwReplaceType from AWSVPCIngressEgressGwType for oneof fields
func (r *AWSVPCIngressEgressGwReplaceType) SetOutsideStaticRouteChoiceToAWSVPCIngressEgressGwType(o *AWSVPCIngressEgressGwType) error {
	switch of := r.OutsideStaticRouteChoice.(type) {
	case nil:
		o.OutsideStaticRouteChoice = nil

	case *AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AWSVPCIngressEgressGwType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AWSVPCIngressEgressGwType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AWSVPCIngressEgressGwReplaceType) GetOutsideStaticRouteChoiceFromAWSVPCIngressEgressGwType(o *AWSVPCIngressEgressGwType) error {
	switch of := o.OutsideStaticRouteChoice.(type) {
	case nil:
		r.OutsideStaticRouteChoice = nil

	case *AWSVPCIngressEgressGwType_NoOutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AWSVPCIngressEgressGwType_OutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AWSVPCIngressEgressGwReplaceType from AWSVPCIngressEgressGwType for oneof fields
func (r *AWSVPCIngressEgressGwReplaceType) SetSiteMeshGroupChoiceToAWSVPCIngressEgressGwType(o *AWSVPCIngressEgressGwType) error {
	switch of := r.SiteMeshGroupChoice.(type) {
	case nil:
		o.SiteMeshGroupChoice = nil

	case *AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp:
		o.SiteMeshGroupChoice = &AWSVPCIngressEgressGwType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp:
		o.SiteMeshGroupChoice = &AWSVPCIngressEgressGwType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AWSVPCIngressEgressGwReplaceType) GetSiteMeshGroupChoiceFromAWSVPCIngressEgressGwType(o *AWSVPCIngressEgressGwType) error {
	switch of := o.SiteMeshGroupChoice.(type) {
	case nil:
		r.SiteMeshGroupChoice = nil

	case *AWSVPCIngressEgressGwType_SmConnectionPublicIp:
		r.SiteMeshGroupChoice = &AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *AWSVPCIngressEgressGwType_SmConnectionPvtIp:
		r.SiteMeshGroupChoice = &AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) fromAWSVPCIngressEgressGwType(f *AWSVPCIngressEgressGwType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AllowedVipPort = f.GetAllowedVipPort()
	m.AllowedVipPortSli = f.GetAllowedVipPortSli()
	m.GetDcClusterGroupChoiceFromAWSVPCIngressEgressGwType(f)
	m.GetForwardProxyChoiceFromAWSVPCIngressEgressGwType(f)
	m.GetGlobalNetworkChoiceFromAWSVPCIngressEgressGwType(f)
	m.GetInsideStaticRouteChoiceFromAWSVPCIngressEgressGwType(f)
	m.GetNetworkPolicyChoiceFromAWSVPCIngressEgressGwType(f)
	m.GetOutsideStaticRouteChoiceFromAWSVPCIngressEgressGwType(f)
	m.PerformanceEnhancementMode = f.GetPerformanceEnhancementMode()
	m.GetSiteMeshGroupChoiceFromAWSVPCIngressEgressGwType(f)
}

func (m *AWSVPCIngressEgressGwReplaceType) FromAWSVPCIngressEgressGwType(f *AWSVPCIngressEgressGwType) {
	m.fromAWSVPCIngressEgressGwType(f, true)
}

func (m *AWSVPCIngressEgressGwReplaceType) FromAWSVPCIngressEgressGwTypeWithoutDeepCopy(f *AWSVPCIngressEgressGwType) {
	m.fromAWSVPCIngressEgressGwType(f, false)
}

func (m *AWSVPCIngressEgressGwReplaceType) toAWSVPCIngressEgressGwType(f *AWSVPCIngressEgressGwType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AllowedVipPort = m1.AllowedVipPort
	f.AllowedVipPortSli = m1.AllowedVipPortSli
	m1.SetDcClusterGroupChoiceToAWSVPCIngressEgressGwType(f)
	m1.SetForwardProxyChoiceToAWSVPCIngressEgressGwType(f)
	m1.SetGlobalNetworkChoiceToAWSVPCIngressEgressGwType(f)
	m1.SetInsideStaticRouteChoiceToAWSVPCIngressEgressGwType(f)
	m1.SetNetworkPolicyChoiceToAWSVPCIngressEgressGwType(f)
	m1.SetOutsideStaticRouteChoiceToAWSVPCIngressEgressGwType(f)
	f.PerformanceEnhancementMode = m1.PerformanceEnhancementMode
	m1.SetSiteMeshGroupChoiceToAWSVPCIngressEgressGwType(f)
}

func (m *AWSVPCIngressEgressGwReplaceType) ToAWSVPCIngressEgressGwType(f *AWSVPCIngressEgressGwType) {
	m.toAWSVPCIngressEgressGwType(f, true)
}

func (m *AWSVPCIngressEgressGwReplaceType) ToAWSVPCIngressEgressGwTypeWithoutDeepCopy(f *AWSVPCIngressEgressGwType) {
	m.toAWSVPCIngressEgressGwType(f, false)
}

func (m *AWSVPCIngressGwReplaceType) fromAWSVPCIngressGwType(f *AWSVPCIngressGwType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AllowedVipPort = f.GetAllowedVipPort()
	m.PerformanceEnhancementMode = f.GetPerformanceEnhancementMode()
}

func (m *AWSVPCIngressGwReplaceType) FromAWSVPCIngressGwType(f *AWSVPCIngressGwType) {
	m.fromAWSVPCIngressGwType(f, true)
}

func (m *AWSVPCIngressGwReplaceType) FromAWSVPCIngressGwTypeWithoutDeepCopy(f *AWSVPCIngressGwType) {
	m.fromAWSVPCIngressGwType(f, false)
}

func (m *AWSVPCIngressGwReplaceType) toAWSVPCIngressGwType(f *AWSVPCIngressGwType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AllowedVipPort = m1.AllowedVipPort
	f.PerformanceEnhancementMode = m1.PerformanceEnhancementMode
}

func (m *AWSVPCIngressGwReplaceType) ToAWSVPCIngressGwType(f *AWSVPCIngressGwType) {
	m.toAWSVPCIngressGwType(f, true)
}

func (m *AWSVPCIngressGwReplaceType) ToAWSVPCIngressGwTypeWithoutDeepCopy(f *AWSVPCIngressGwType) {
	m.toAWSVPCIngressGwType(f, false)
}

// create setters in AWSVPCVoltstackClusterReplaceType from AWSVPCVoltstackClusterType for oneof fields
func (r *AWSVPCVoltstackClusterReplaceType) SetDcClusterGroupChoiceToAWSVPCVoltstackClusterType(o *AWSVPCVoltstackClusterType) error {
	switch of := r.DcClusterGroupChoice.(type) {
	case nil:
		o.DcClusterGroupChoice = nil

	case *AWSVPCVoltstackClusterReplaceType_DcClusterGroup:
		o.DcClusterGroupChoice = &AWSVPCVoltstackClusterType_DcClusterGroup{DcClusterGroup: of.DcClusterGroup}

	case *AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup:
		o.DcClusterGroupChoice = &AWSVPCVoltstackClusterType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AWSVPCVoltstackClusterReplaceType) GetDcClusterGroupChoiceFromAWSVPCVoltstackClusterType(o *AWSVPCVoltstackClusterType) error {
	switch of := o.DcClusterGroupChoice.(type) {
	case nil:
		r.DcClusterGroupChoice = nil

	case *AWSVPCVoltstackClusterType_DcClusterGroup:
		r.DcClusterGroupChoice = &AWSVPCVoltstackClusterReplaceType_DcClusterGroup{DcClusterGroup: of.DcClusterGroup}

	case *AWSVPCVoltstackClusterType_NoDcClusterGroup:
		r.DcClusterGroupChoice = &AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AWSVPCVoltstackClusterReplaceType from AWSVPCVoltstackClusterType for oneof fields
func (r *AWSVPCVoltstackClusterReplaceType) SetForwardProxyChoiceToAWSVPCVoltstackClusterType(o *AWSVPCVoltstackClusterType) error {
	switch of := r.ForwardProxyChoice.(type) {
	case nil:
		o.ForwardProxyChoice = nil

	case *AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies:
		o.ForwardProxyChoice = &AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll:
		o.ForwardProxyChoice = &AWSVPCVoltstackClusterType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AWSVPCVoltstackClusterReplaceType_NoForwardProxy:
		o.ForwardProxyChoice = &AWSVPCVoltstackClusterType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AWSVPCVoltstackClusterReplaceType) GetForwardProxyChoiceFromAWSVPCVoltstackClusterType(o *AWSVPCVoltstackClusterType) error {
	switch of := o.ForwardProxyChoice.(type) {
	case nil:
		r.ForwardProxyChoice = nil

	case *AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies:
		r.ForwardProxyChoice = &AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AWSVPCVoltstackClusterType_ForwardProxyAllowAll:
		r.ForwardProxyChoice = &AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AWSVPCVoltstackClusterType_NoForwardProxy:
		r.ForwardProxyChoice = &AWSVPCVoltstackClusterReplaceType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AWSVPCVoltstackClusterReplaceType from AWSVPCVoltstackClusterType for oneof fields
func (r *AWSVPCVoltstackClusterReplaceType) SetGlobalNetworkChoiceToAWSVPCVoltstackClusterType(o *AWSVPCVoltstackClusterType) error {
	switch of := r.GlobalNetworkChoice.(type) {
	case nil:
		o.GlobalNetworkChoice = nil

	case *AWSVPCVoltstackClusterReplaceType_GlobalNetworkList:
		o.GlobalNetworkChoice = &AWSVPCVoltstackClusterType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork:
		o.GlobalNetworkChoice = &AWSVPCVoltstackClusterType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AWSVPCVoltstackClusterReplaceType) GetGlobalNetworkChoiceFromAWSVPCVoltstackClusterType(o *AWSVPCVoltstackClusterType) error {
	switch of := o.GlobalNetworkChoice.(type) {
	case nil:
		r.GlobalNetworkChoice = nil

	case *AWSVPCVoltstackClusterType_GlobalNetworkList:
		r.GlobalNetworkChoice = &AWSVPCVoltstackClusterReplaceType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AWSVPCVoltstackClusterType_NoGlobalNetwork:
		r.GlobalNetworkChoice = &AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AWSVPCVoltstackClusterReplaceType from AWSVPCVoltstackClusterType for oneof fields
func (r *AWSVPCVoltstackClusterReplaceType) SetNetworkPolicyChoiceToAWSVPCVoltstackClusterType(o *AWSVPCVoltstackClusterType) error {
	switch of := r.NetworkPolicyChoice.(type) {
	case nil:
		o.NetworkPolicyChoice = nil

	case *AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies:
		o.NetworkPolicyChoice = &AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies:
		o.NetworkPolicyChoice = &AWSVPCVoltstackClusterType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy:
		o.NetworkPolicyChoice = &AWSVPCVoltstackClusterType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AWSVPCVoltstackClusterReplaceType) GetNetworkPolicyChoiceFromAWSVPCVoltstackClusterType(o *AWSVPCVoltstackClusterType) error {
	switch of := o.NetworkPolicyChoice.(type) {
	case nil:
		r.NetworkPolicyChoice = nil

	case *AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies:
		r.NetworkPolicyChoice = &AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *AWSVPCVoltstackClusterType_ActiveNetworkPolicies:
		r.NetworkPolicyChoice = &AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AWSVPCVoltstackClusterType_NoNetworkPolicy:
		r.NetworkPolicyChoice = &AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AWSVPCVoltstackClusterReplaceType from AWSVPCVoltstackClusterType for oneof fields
func (r *AWSVPCVoltstackClusterReplaceType) SetOutsideStaticRouteChoiceToAWSVPCVoltstackClusterType(o *AWSVPCVoltstackClusterType) error {
	switch of := r.OutsideStaticRouteChoice.(type) {
	case nil:
		o.OutsideStaticRouteChoice = nil

	case *AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AWSVPCVoltstackClusterType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AWSVPCVoltstackClusterType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AWSVPCVoltstackClusterReplaceType) GetOutsideStaticRouteChoiceFromAWSVPCVoltstackClusterType(o *AWSVPCVoltstackClusterType) error {
	switch of := o.OutsideStaticRouteChoice.(type) {
	case nil:
		r.OutsideStaticRouteChoice = nil

	case *AWSVPCVoltstackClusterType_NoOutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AWSVPCVoltstackClusterType_OutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AWSVPCVoltstackClusterReplaceType from AWSVPCVoltstackClusterType for oneof fields
func (r *AWSVPCVoltstackClusterReplaceType) SetSiteMeshGroupChoiceToAWSVPCVoltstackClusterType(o *AWSVPCVoltstackClusterType) error {
	switch of := r.SiteMeshGroupChoice.(type) {
	case nil:
		o.SiteMeshGroupChoice = nil

	case *AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp:
		o.SiteMeshGroupChoice = &AWSVPCVoltstackClusterType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp:
		o.SiteMeshGroupChoice = &AWSVPCVoltstackClusterType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AWSVPCVoltstackClusterReplaceType) GetSiteMeshGroupChoiceFromAWSVPCVoltstackClusterType(o *AWSVPCVoltstackClusterType) error {
	switch of := o.SiteMeshGroupChoice.(type) {
	case nil:
		r.SiteMeshGroupChoice = nil

	case *AWSVPCVoltstackClusterType_SmConnectionPublicIp:
		r.SiteMeshGroupChoice = &AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *AWSVPCVoltstackClusterType_SmConnectionPvtIp:
		r.SiteMeshGroupChoice = &AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) fromAWSVPCVoltstackClusterType(f *AWSVPCVoltstackClusterType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AllowedVipPort = f.GetAllowedVipPort()
	m.GetDcClusterGroupChoiceFromAWSVPCVoltstackClusterType(f)
	m.GetForwardProxyChoiceFromAWSVPCVoltstackClusterType(f)
	m.GetGlobalNetworkChoiceFromAWSVPCVoltstackClusterType(f)
	m.GetNetworkPolicyChoiceFromAWSVPCVoltstackClusterType(f)
	m.GetOutsideStaticRouteChoiceFromAWSVPCVoltstackClusterType(f)
	m.GetSiteMeshGroupChoiceFromAWSVPCVoltstackClusterType(f)
}

func (m *AWSVPCVoltstackClusterReplaceType) FromAWSVPCVoltstackClusterType(f *AWSVPCVoltstackClusterType) {
	m.fromAWSVPCVoltstackClusterType(f, true)
}

func (m *AWSVPCVoltstackClusterReplaceType) FromAWSVPCVoltstackClusterTypeWithoutDeepCopy(f *AWSVPCVoltstackClusterType) {
	m.fromAWSVPCVoltstackClusterType(f, false)
}

func (m *AWSVPCVoltstackClusterReplaceType) toAWSVPCVoltstackClusterType(f *AWSVPCVoltstackClusterType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AllowedVipPort = m1.AllowedVipPort
	m1.SetDcClusterGroupChoiceToAWSVPCVoltstackClusterType(f)
	m1.SetForwardProxyChoiceToAWSVPCVoltstackClusterType(f)
	m1.SetGlobalNetworkChoiceToAWSVPCVoltstackClusterType(f)
	m1.SetNetworkPolicyChoiceToAWSVPCVoltstackClusterType(f)
	m1.SetOutsideStaticRouteChoiceToAWSVPCVoltstackClusterType(f)
	m1.SetSiteMeshGroupChoiceToAWSVPCVoltstackClusterType(f)
}

func (m *AWSVPCVoltstackClusterReplaceType) ToAWSVPCVoltstackClusterType(f *AWSVPCVoltstackClusterType) {
	m.toAWSVPCVoltstackClusterType(f, true)
}

func (m *AWSVPCVoltstackClusterReplaceType) ToAWSVPCVoltstackClusterTypeWithoutDeepCopy(f *AWSVPCVoltstackClusterType) {
	m.toAWSVPCVoltstackClusterType(f, false)
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *CreateSpecType_BlockAllServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *CreateSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *CreateSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockAllServices:
		r.BlockedServicesChoice = &CreateSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &CreateSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &CreateSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetDeploymentToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Deployment.(type) {
	case nil:
		o.Deployment = nil

	case *CreateSpecType_AwsCred:
		o.Deployment = &GlobalSpecType_AwsCred{AwsCred: of.AwsCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetDeploymentFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Deployment.(type) {
	case nil:
		r.Deployment = nil

	case *GlobalSpecType_AwsCred:
		r.Deployment = &CreateSpecType_AwsCred{AwsCred: of.AwsCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetDirectConnectChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DirectConnectChoice.(type) {
	case nil:
		o.DirectConnectChoice = nil

	case *CreateSpecType_DirectConnectDisabled:
		o.DirectConnectChoice = &GlobalSpecType_DirectConnectDisabled{DirectConnectDisabled: of.DirectConnectDisabled}

	case *CreateSpecType_DirectConnectEnabled:
		o.DirectConnectChoice = &GlobalSpecType_DirectConnectEnabled{DirectConnectEnabled: of.DirectConnectEnabled}

	case *CreateSpecType_PrivateConnectivity:
		o.DirectConnectChoice = &GlobalSpecType_PrivateConnectivity{PrivateConnectivity: of.PrivateConnectivity}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetDirectConnectChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DirectConnectChoice.(type) {
	case nil:
		r.DirectConnectChoice = nil

	case *GlobalSpecType_DirectConnectDisabled:
		r.DirectConnectChoice = &CreateSpecType_DirectConnectDisabled{DirectConnectDisabled: of.DirectConnectDisabled}

	case *GlobalSpecType_DirectConnectEnabled:
		r.DirectConnectChoice = &CreateSpecType_DirectConnectEnabled{DirectConnectEnabled: of.DirectConnectEnabled}

	case *GlobalSpecType_PrivateConnectivity:
		r.DirectConnectChoice = &CreateSpecType_PrivateConnectivity{PrivateConnectivity: of.PrivateConnectivity}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetEgressGatewayChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.EgressGatewayChoice.(type) {
	case nil:
		o.EgressGatewayChoice = nil

	case *CreateSpecType_EgressGatewayDefault:
		o.EgressGatewayChoice = &GlobalSpecType_EgressGatewayDefault{EgressGatewayDefault: of.EgressGatewayDefault}

	case *CreateSpecType_EgressNatGw:
		o.EgressGatewayChoice = &GlobalSpecType_EgressNatGw{EgressNatGw: of.EgressNatGw}

	case *CreateSpecType_EgressVirtualPrivateGateway:
		o.EgressGatewayChoice = &GlobalSpecType_EgressVirtualPrivateGateway{EgressVirtualPrivateGateway: of.EgressVirtualPrivateGateway}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetEgressGatewayChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.EgressGatewayChoice.(type) {
	case nil:
		r.EgressGatewayChoice = nil

	case *GlobalSpecType_EgressGatewayDefault:
		r.EgressGatewayChoice = &CreateSpecType_EgressGatewayDefault{EgressGatewayDefault: of.EgressGatewayDefault}

	case *GlobalSpecType_EgressNatGw:
		r.EgressGatewayChoice = &CreateSpecType_EgressNatGw{EgressNatGw: of.EgressNatGw}

	case *GlobalSpecType_EgressVirtualPrivateGateway:
		r.EgressGatewayChoice = &CreateSpecType_EgressVirtualPrivateGateway{EgressVirtualPrivateGateway: of.EgressVirtualPrivateGateway}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetInternetVipChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.InternetVipChoice.(type) {
	case nil:
		o.InternetVipChoice = nil

	case *CreateSpecType_DisableInternetVip:
		o.InternetVipChoice = &GlobalSpecType_DisableInternetVip{DisableInternetVip: of.DisableInternetVip}

	case *CreateSpecType_EnableInternetVip:
		o.InternetVipChoice = &GlobalSpecType_EnableInternetVip{EnableInternetVip: of.EnableInternetVip}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetInternetVipChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.InternetVipChoice.(type) {
	case nil:
		r.InternetVipChoice = nil

	case *GlobalSpecType_DisableInternetVip:
		r.InternetVipChoice = &CreateSpecType_DisableInternetVip{DisableInternetVip: of.DisableInternetVip}

	case *GlobalSpecType_EnableInternetVip:
		r.InternetVipChoice = &CreateSpecType_EnableInternetVip{EnableInternetVip: of.EnableInternetVip}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *CreateSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *CreateSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &CreateSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetSecurityGroupChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SecurityGroupChoice.(type) {
	case nil:
		o.SecurityGroupChoice = nil

	case *CreateSpecType_CustomSecurityGroup:
		o.SecurityGroupChoice = &GlobalSpecType_CustomSecurityGroup{CustomSecurityGroup: of.CustomSecurityGroup}

	case *CreateSpecType_F5XcSecurityGroup:
		o.SecurityGroupChoice = &GlobalSpecType_F5XcSecurityGroup{F5XcSecurityGroup: of.F5XcSecurityGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetSecurityGroupChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SecurityGroupChoice.(type) {
	case nil:
		r.SecurityGroupChoice = nil

	case *GlobalSpecType_CustomSecurityGroup:
		r.SecurityGroupChoice = &CreateSpecType_CustomSecurityGroup{CustomSecurityGroup: of.CustomSecurityGroup}

	case *GlobalSpecType_F5XcSecurityGroup:
		r.SecurityGroupChoice = &CreateSpecType_F5XcSecurityGroup{F5XcSecurityGroup: of.F5XcSecurityGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetSiteTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteType.(type) {
	case nil:
		o.SiteType = nil

	case *CreateSpecType_IngressEgressGw:
		o.SiteType = &GlobalSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *CreateSpecType_IngressGw:
		o.SiteType = &GlobalSpecType_IngressGw{IngressGw: of.IngressGw}

	case *CreateSpecType_VoltstackCluster:
		o.SiteType = &GlobalSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetSiteTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteType.(type) {
	case nil:
		r.SiteType = nil

	case *GlobalSpecType_IngressEgressGw:
		r.SiteType = &CreateSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *GlobalSpecType_IngressGw:
		r.SiteType = &CreateSpecType_IngressGw{IngressGw: of.IngressGw}

	case *GlobalSpecType_VoltstackCluster:
		r.SiteType = &CreateSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetWorkerNodesToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WorkerNodes.(type) {
	case nil:
		o.WorkerNodes = nil

	case *CreateSpecType_NoWorkerNodes:
		o.WorkerNodes = &GlobalSpecType_NoWorkerNodes{NoWorkerNodes: of.NoWorkerNodes}

	case *CreateSpecType_NodesPerAz:
		o.WorkerNodes = &GlobalSpecType_NodesPerAz{NodesPerAz: of.NodesPerAz}

	case *CreateSpecType_TotalNodes:
		o.WorkerNodes = &GlobalSpecType_TotalNodes{TotalNodes: of.TotalNodes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetWorkerNodesFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WorkerNodes.(type) {
	case nil:
		r.WorkerNodes = nil

	case *GlobalSpecType_NoWorkerNodes:
		r.WorkerNodes = &CreateSpecType_NoWorkerNodes{NoWorkerNodes: of.NoWorkerNodes}

	case *GlobalSpecType_NodesPerAz:
		r.WorkerNodes = &CreateSpecType_NodesPerAz{NodesPerAz: of.NodesPerAz}

	case *GlobalSpecType_TotalNodes:
		r.WorkerNodes = &CreateSpecType_TotalNodes{TotalNodes: of.TotalNodes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.AwsRegion = f.GetAwsRegion()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.Coordinates = f.GetCoordinates()
	m.CustomDns = f.GetCustomDns()
	m.GetDeploymentFromGlobalSpecType(f)
	m.GetDirectConnectChoiceFromGlobalSpecType(f)
	m.DiskSize = f.GetDiskSize()
	m.GetEgressGatewayChoiceFromGlobalSpecType(f)
	m.InstanceType = f.GetInstanceType()
	m.GetInternetVipChoiceFromGlobalSpecType(f)
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.Os = f.GetOs()
	m.GetSecurityGroupChoiceFromGlobalSpecType(f)
	m.GetSiteTypeFromGlobalSpecType(f)
	m.SshKey = f.GetSshKey()
	m.Sw = f.GetSw()
	m.Tags = f.GetTags()
	m.Vpc = f.GetVpc()
	m.GetWorkerNodesFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	f.AwsRegion = m1.AwsRegion
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	f.Coordinates = m1.Coordinates
	f.CustomDns = m1.CustomDns
	m1.SetDeploymentToGlobalSpecType(f)
	m1.SetDirectConnectChoiceToGlobalSpecType(f)
	f.DiskSize = m1.DiskSize
	m1.SetEgressGatewayChoiceToGlobalSpecType(f)
	f.InstanceType = m1.InstanceType
	m1.SetInternetVipChoiceToGlobalSpecType(f)
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	f.Os = m1.Os
	m1.SetSecurityGroupChoiceToGlobalSpecType(f)
	m1.SetSiteTypeToGlobalSpecType(f)
	f.SshKey = m1.SshKey
	f.Sw = m1.Sw
	f.Tags = m1.Tags
	f.Vpc = m1.Vpc
	m1.SetWorkerNodesToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *GetSpecType_BlockAllServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *GetSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GetSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockAllServices:
		r.BlockedServicesChoice = &GetSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &GetSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &GetSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetDeploymentToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Deployment.(type) {
	case nil:
		o.Deployment = nil

	case *GetSpecType_Assisted:
		o.Deployment = &GlobalSpecType_Assisted{Assisted: of.Assisted}

	case *GetSpecType_AwsCred:
		o.Deployment = &GlobalSpecType_AwsCred{AwsCred: of.AwsCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetDeploymentFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Deployment.(type) {
	case nil:
		r.Deployment = nil

	case *GlobalSpecType_Assisted:
		r.Deployment = &GetSpecType_Assisted{Assisted: of.Assisted}

	case *GlobalSpecType_AwsCred:
		r.Deployment = &GetSpecType_AwsCred{AwsCred: of.AwsCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetDirectConnectChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DirectConnectChoice.(type) {
	case nil:
		o.DirectConnectChoice = nil

	case *GetSpecType_DirectConnectDisabled:
		o.DirectConnectChoice = &GlobalSpecType_DirectConnectDisabled{DirectConnectDisabled: of.DirectConnectDisabled}

	case *GetSpecType_DirectConnectEnabled:
		o.DirectConnectChoice = &GlobalSpecType_DirectConnectEnabled{DirectConnectEnabled: of.DirectConnectEnabled}

	case *GetSpecType_PrivateConnectivity:
		o.DirectConnectChoice = &GlobalSpecType_PrivateConnectivity{PrivateConnectivity: of.PrivateConnectivity}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetDirectConnectChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DirectConnectChoice.(type) {
	case nil:
		r.DirectConnectChoice = nil

	case *GlobalSpecType_DirectConnectDisabled:
		r.DirectConnectChoice = &GetSpecType_DirectConnectDisabled{DirectConnectDisabled: of.DirectConnectDisabled}

	case *GlobalSpecType_DirectConnectEnabled:
		r.DirectConnectChoice = &GetSpecType_DirectConnectEnabled{DirectConnectEnabled: of.DirectConnectEnabled}

	case *GlobalSpecType_PrivateConnectivity:
		r.DirectConnectChoice = &GetSpecType_PrivateConnectivity{PrivateConnectivity: of.PrivateConnectivity}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetEgressGatewayChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.EgressGatewayChoice.(type) {
	case nil:
		o.EgressGatewayChoice = nil

	case *GetSpecType_EgressGatewayDefault:
		o.EgressGatewayChoice = &GlobalSpecType_EgressGatewayDefault{EgressGatewayDefault: of.EgressGatewayDefault}

	case *GetSpecType_EgressNatGw:
		o.EgressGatewayChoice = &GlobalSpecType_EgressNatGw{EgressNatGw: of.EgressNatGw}

	case *GetSpecType_EgressVirtualPrivateGateway:
		o.EgressGatewayChoice = &GlobalSpecType_EgressVirtualPrivateGateway{EgressVirtualPrivateGateway: of.EgressVirtualPrivateGateway}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetEgressGatewayChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.EgressGatewayChoice.(type) {
	case nil:
		r.EgressGatewayChoice = nil

	case *GlobalSpecType_EgressGatewayDefault:
		r.EgressGatewayChoice = &GetSpecType_EgressGatewayDefault{EgressGatewayDefault: of.EgressGatewayDefault}

	case *GlobalSpecType_EgressNatGw:
		r.EgressGatewayChoice = &GetSpecType_EgressNatGw{EgressNatGw: of.EgressNatGw}

	case *GlobalSpecType_EgressVirtualPrivateGateway:
		r.EgressGatewayChoice = &GetSpecType_EgressVirtualPrivateGateway{EgressVirtualPrivateGateway: of.EgressVirtualPrivateGateway}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetInternetVipChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.InternetVipChoice.(type) {
	case nil:
		o.InternetVipChoice = nil

	case *GetSpecType_DisableInternetVip:
		o.InternetVipChoice = &GlobalSpecType_DisableInternetVip{DisableInternetVip: of.DisableInternetVip}

	case *GetSpecType_EnableInternetVip:
		o.InternetVipChoice = &GlobalSpecType_EnableInternetVip{EnableInternetVip: of.EnableInternetVip}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetInternetVipChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.InternetVipChoice.(type) {
	case nil:
		r.InternetVipChoice = nil

	case *GlobalSpecType_DisableInternetVip:
		r.InternetVipChoice = &GetSpecType_DisableInternetVip{DisableInternetVip: of.DisableInternetVip}

	case *GlobalSpecType_EnableInternetVip:
		r.InternetVipChoice = &GetSpecType_EnableInternetVip{EnableInternetVip: of.EnableInternetVip}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *GetSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GetSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &GetSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetSecurityGroupChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SecurityGroupChoice.(type) {
	case nil:
		o.SecurityGroupChoice = nil

	case *GetSpecType_CustomSecurityGroup:
		o.SecurityGroupChoice = &GlobalSpecType_CustomSecurityGroup{CustomSecurityGroup: of.CustomSecurityGroup}

	case *GetSpecType_F5XcSecurityGroup:
		o.SecurityGroupChoice = &GlobalSpecType_F5XcSecurityGroup{F5XcSecurityGroup: of.F5XcSecurityGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetSecurityGroupChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SecurityGroupChoice.(type) {
	case nil:
		r.SecurityGroupChoice = nil

	case *GlobalSpecType_CustomSecurityGroup:
		r.SecurityGroupChoice = &GetSpecType_CustomSecurityGroup{CustomSecurityGroup: of.CustomSecurityGroup}

	case *GlobalSpecType_F5XcSecurityGroup:
		r.SecurityGroupChoice = &GetSpecType_F5XcSecurityGroup{F5XcSecurityGroup: of.F5XcSecurityGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetSiteTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteType.(type) {
	case nil:
		o.SiteType = nil

	case *GetSpecType_IngressEgressGw:
		o.SiteType = &GlobalSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *GetSpecType_IngressGw:
		o.SiteType = &GlobalSpecType_IngressGw{IngressGw: of.IngressGw}

	case *GetSpecType_VoltstackCluster:
		o.SiteType = &GlobalSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetSiteTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteType.(type) {
	case nil:
		r.SiteType = nil

	case *GlobalSpecType_IngressEgressGw:
		r.SiteType = &GetSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *GlobalSpecType_IngressGw:
		r.SiteType = &GetSpecType_IngressGw{IngressGw: of.IngressGw}

	case *GlobalSpecType_VoltstackCluster:
		r.SiteType = &GetSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetWorkerNodesToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WorkerNodes.(type) {
	case nil:
		o.WorkerNodes = nil

	case *GetSpecType_NoWorkerNodes:
		o.WorkerNodes = &GlobalSpecType_NoWorkerNodes{NoWorkerNodes: of.NoWorkerNodes}

	case *GetSpecType_NodesPerAz:
		o.WorkerNodes = &GlobalSpecType_NodesPerAz{NodesPerAz: of.NodesPerAz}

	case *GetSpecType_TotalNodes:
		o.WorkerNodes = &GlobalSpecType_TotalNodes{TotalNodes: of.TotalNodes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetWorkerNodesFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WorkerNodes.(type) {
	case nil:
		r.WorkerNodes = nil

	case *GlobalSpecType_NoWorkerNodes:
		r.WorkerNodes = &GetSpecType_NoWorkerNodes{NoWorkerNodes: of.NoWorkerNodes}

	case *GlobalSpecType_NodesPerAz:
		r.WorkerNodes = &GetSpecType_NodesPerAz{NodesPerAz: of.NodesPerAz}

	case *GlobalSpecType_TotalNodes:
		r.WorkerNodes = &GetSpecType_TotalNodes{TotalNodes: of.TotalNodes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.AwsRegion = f.GetAwsRegion()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.CloudSiteInfo = f.GetCloudSiteInfo()
	m.Coordinates = f.GetCoordinates()
	m.CustomDns = f.GetCustomDns()
	m.GetDeploymentFromGlobalSpecType(f)
	m.GetDirectConnectChoiceFromGlobalSpecType(f)
	m.DirectConnectInfo = f.GetDirectConnectInfo()
	m.DiskSize = f.GetDiskSize()
	m.GetEgressGatewayChoiceFromGlobalSpecType(f)
	m.ErrorDescription = f.GetErrorDescription()
	m.InstanceType = f.GetInstanceType()
	m.GetInternetVipChoiceFromGlobalSpecType(f)
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.OperatingSystemVersion = f.GetOperatingSystemVersion()
	m.GetSecurityGroupChoiceFromGlobalSpecType(f)
	m.SiteErrors = f.GetSiteErrors()

	m.GetSiteTypeFromGlobalSpecType(f)
	m.SshKey = f.GetSshKey()
	m.SuggestedAction = f.GetSuggestedAction()
	m.Tags = f.GetTags()
	m.UserModificationTimestamp = f.GetUserModificationTimestamp()
	m.ValidationState = f.GetValidationState()
	m.VipParamsPerAz = f.GetVipParamsPerAz()
	m.VolterraSoftwareVersion = f.GetVolterraSoftwareVersion()
	m.Vpc = f.GetVpc()
	m.GetWorkerNodesFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	f.AwsRegion = m1.AwsRegion
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	f.CloudSiteInfo = m1.CloudSiteInfo
	f.Coordinates = m1.Coordinates
	f.CustomDns = m1.CustomDns
	m1.SetDeploymentToGlobalSpecType(f)
	m1.SetDirectConnectChoiceToGlobalSpecType(f)
	f.DirectConnectInfo = m1.DirectConnectInfo
	f.DiskSize = m1.DiskSize
	m1.SetEgressGatewayChoiceToGlobalSpecType(f)
	f.ErrorDescription = m1.ErrorDescription
	f.InstanceType = m1.InstanceType
	m1.SetInternetVipChoiceToGlobalSpecType(f)
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	f.OperatingSystemVersion = m1.OperatingSystemVersion
	m1.SetSecurityGroupChoiceToGlobalSpecType(f)
	f.SiteErrors = m1.SiteErrors

	m1.SetSiteTypeToGlobalSpecType(f)
	f.SshKey = m1.SshKey
	f.SuggestedAction = m1.SuggestedAction
	f.Tags = m1.Tags
	f.UserModificationTimestamp = m1.UserModificationTimestamp
	f.ValidationState = m1.ValidationState
	f.VipParamsPerAz = m1.VipParamsPerAz
	f.VolterraSoftwareVersion = m1.VolterraSoftwareVersion
	f.Vpc = m1.Vpc
	m1.SetWorkerNodesToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *ReplaceSpecType_BlockAllServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *ReplaceSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *ReplaceSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockAllServices:
		r.BlockedServicesChoice = &ReplaceSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &ReplaceSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &ReplaceSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetDeploymentToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Deployment.(type) {
	case nil:
		o.Deployment = nil

	case *ReplaceSpecType_AwsCred:
		o.Deployment = &GlobalSpecType_AwsCred{AwsCred: of.AwsCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetDeploymentFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Deployment.(type) {
	case nil:
		r.Deployment = nil

	case *GlobalSpecType_AwsCred:
		r.Deployment = &ReplaceSpecType_AwsCred{AwsCred: of.AwsCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetDirectConnectChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DirectConnectChoice.(type) {
	case nil:
		o.DirectConnectChoice = nil

	case *ReplaceSpecType_DirectConnectDisabled:
		o.DirectConnectChoice = &GlobalSpecType_DirectConnectDisabled{DirectConnectDisabled: of.DirectConnectDisabled}

	case *ReplaceSpecType_DirectConnectEnabled:
		o.DirectConnectChoice = &GlobalSpecType_DirectConnectEnabled{DirectConnectEnabled: of.DirectConnectEnabled}

	case *ReplaceSpecType_PrivateConnectivity:
		o.DirectConnectChoice = &GlobalSpecType_PrivateConnectivity{PrivateConnectivity: of.PrivateConnectivity}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetDirectConnectChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DirectConnectChoice.(type) {
	case nil:
		r.DirectConnectChoice = nil

	case *GlobalSpecType_DirectConnectDisabled:
		r.DirectConnectChoice = &ReplaceSpecType_DirectConnectDisabled{DirectConnectDisabled: of.DirectConnectDisabled}

	case *GlobalSpecType_DirectConnectEnabled:
		r.DirectConnectChoice = &ReplaceSpecType_DirectConnectEnabled{DirectConnectEnabled: of.DirectConnectEnabled}

	case *GlobalSpecType_PrivateConnectivity:
		r.DirectConnectChoice = &ReplaceSpecType_PrivateConnectivity{PrivateConnectivity: of.PrivateConnectivity}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetInternetVipChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.InternetVipChoice.(type) {
	case nil:
		o.InternetVipChoice = nil

	case *ReplaceSpecType_DisableInternetVip:
		o.InternetVipChoice = &GlobalSpecType_DisableInternetVip{DisableInternetVip: of.DisableInternetVip}

	case *ReplaceSpecType_EnableInternetVip:
		o.InternetVipChoice = &GlobalSpecType_EnableInternetVip{EnableInternetVip: of.EnableInternetVip}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetInternetVipChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.InternetVipChoice.(type) {
	case nil:
		r.InternetVipChoice = nil

	case *GlobalSpecType_DisableInternetVip:
		r.InternetVipChoice = &ReplaceSpecType_DisableInternetVip{DisableInternetVip: of.DisableInternetVip}

	case *GlobalSpecType_EnableInternetVip:
		r.InternetVipChoice = &ReplaceSpecType_EnableInternetVip{EnableInternetVip: of.EnableInternetVip}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *ReplaceSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *ReplaceSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetSiteTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteType.(type) {
	case nil:
		o.SiteType = nil

	case *ReplaceSpecType_IngressEgressGw:

		f1 := o.GetIngressEgressGw()
		if f1 == nil {
			f1 = &AWSVPCIngressEgressGwType{}
		}
		of.IngressEgressGw.ToAWSVPCIngressEgressGwTypeWithoutDeepCopy(f1)
		o.SiteType = &GlobalSpecType_IngressEgressGw{IngressEgressGw: f1}

	case *ReplaceSpecType_IngressGw:

		f1 := o.GetIngressGw()
		if f1 == nil {
			f1 = &AWSVPCIngressGwType{}
		}
		of.IngressGw.ToAWSVPCIngressGwTypeWithoutDeepCopy(f1)
		o.SiteType = &GlobalSpecType_IngressGw{IngressGw: f1}

	case *ReplaceSpecType_VoltstackCluster:

		f1 := o.GetVoltstackCluster()
		if f1 == nil {
			f1 = &AWSVPCVoltstackClusterType{}
		}
		of.VoltstackCluster.ToAWSVPCVoltstackClusterTypeWithoutDeepCopy(f1)
		o.SiteType = &GlobalSpecType_VoltstackCluster{VoltstackCluster: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetSiteTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteType.(type) {
	case nil:
		r.SiteType = nil

	case *GlobalSpecType_IngressEgressGw:

		f1 := &AWSVPCIngressEgressGwReplaceType{}
		f1.FromAWSVPCIngressEgressGwTypeWithoutDeepCopy(of.IngressEgressGw)
		r.SiteType = &ReplaceSpecType_IngressEgressGw{IngressEgressGw: f1}

	case *GlobalSpecType_IngressGw:

		f1 := &AWSVPCIngressGwReplaceType{}
		f1.FromAWSVPCIngressGwTypeWithoutDeepCopy(of.IngressGw)
		r.SiteType = &ReplaceSpecType_IngressGw{IngressGw: f1}

	case *GlobalSpecType_VoltstackCluster:

		f1 := &AWSVPCVoltstackClusterReplaceType{}
		f1.FromAWSVPCVoltstackClusterTypeWithoutDeepCopy(of.VoltstackCluster)
		r.SiteType = &ReplaceSpecType_VoltstackCluster{VoltstackCluster: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetWorkerNodesToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WorkerNodes.(type) {
	case nil:
		o.WorkerNodes = nil

	case *ReplaceSpecType_NoWorkerNodes:
		o.WorkerNodes = &GlobalSpecType_NoWorkerNodes{NoWorkerNodes: of.NoWorkerNodes}

	case *ReplaceSpecType_NodesPerAz:
		o.WorkerNodes = &GlobalSpecType_NodesPerAz{NodesPerAz: of.NodesPerAz}

	case *ReplaceSpecType_TotalNodes:
		o.WorkerNodes = &GlobalSpecType_TotalNodes{TotalNodes: of.TotalNodes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetWorkerNodesFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WorkerNodes.(type) {
	case nil:
		r.WorkerNodes = nil

	case *GlobalSpecType_NoWorkerNodes:
		r.WorkerNodes = &ReplaceSpecType_NoWorkerNodes{NoWorkerNodes: of.NoWorkerNodes}

	case *GlobalSpecType_NodesPerAz:
		r.WorkerNodes = &ReplaceSpecType_NodesPerAz{NodesPerAz: of.NodesPerAz}

	case *GlobalSpecType_TotalNodes:
		r.WorkerNodes = &ReplaceSpecType_TotalNodes{TotalNodes: of.TotalNodes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.Coordinates = f.GetCoordinates()
	m.CustomDns = f.GetCustomDns()
	m.GetDeploymentFromGlobalSpecType(f)
	m.GetDirectConnectChoiceFromGlobalSpecType(f)
	m.GetInternetVipChoiceFromGlobalSpecType(f)
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.GetSiteTypeFromGlobalSpecType(f)
	m.GetWorkerNodesFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	f.Coordinates = m1.Coordinates
	f.CustomDns = m1.CustomDns
	m1.SetDeploymentToGlobalSpecType(f)
	m1.SetDirectConnectChoiceToGlobalSpecType(f)
	m1.SetInternetVipChoiceToGlobalSpecType(f)
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	m1.SetSiteTypeToGlobalSpecType(f)
	m1.SetWorkerNodesToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/aws_vpc_site/types.proto

package aws_vpc_site

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	fleet "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet"
	network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
	site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AWS Ingress Gateway
//
// x-displayName: "AWS Ingress Gateway"
// Single interface AWS ingress site
type AWSVPCIngressGwType struct {
	// Nodes
	//
	// x-displayName: "Ingress Gateway (One Interface) Nodes in AZ"
	// x-required
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	AzNodes []*views.AWSVPCOneInterfaceNodeType `protobuf:"bytes,1,rep,name=az_nodes,json=azNodes,proto3" json:"az_nodes,omitempty"`
	// AWS Certified Hardware
	//
	// x-displayName: "AWS Certified Hardware"
	// x-example: "aws-byol-voltmesh"
	// x-required
	// Name for AWS certified hardware.
	AwsCertifiedHw string `protobuf:"bytes,2,opt,name=aws_certified_hw,json=awsCertifiedHw,proto3" json:"aws_certified_hw,omitempty"`
	// Allowed VIP Port Configuration
	//
	// x-displayName: "Allowed VIP Port Configuration"
	// Allowed VIP Port Configuration
	AllowedVipPort *views.AllowedVIPPorts `protobuf:"bytes,3,opt,name=allowed_vip_port,json=allowedVipPort,proto3" json:"allowed_vip_port,omitempty"`
	// Performance Enhancement Choice
	//
	// x-displayName: "Performance Enhancement Mode"
	// Performance Enhancement Mode to optimize for L3 or L7 networking
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,45,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
}

func (m *AWSVPCIngressGwType) Reset()      { *m = AWSVPCIngressGwType{} }
func (*AWSVPCIngressGwType) ProtoMessage() {}
func (*AWSVPCIngressGwType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea70a88e595e3c7c, []int{0}
}
func (m *AWSVPCIngressGwType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSVPCIngressGwType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSVPCIngressGwType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSVPCIngressGwType.Merge(m, src)
}
func (m *AWSVPCIngressGwType) XXX_Size() int {
	return m.Size()
}
func (m *AWSVPCIngressGwType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSVPCIngressGwType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSVPCIngressGwType proto.InternalMessageInfo

func (m *AWSVPCIngressGwType) GetAzNodes() []*views.AWSVPCOneInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *AWSVPCIngressGwType) GetAwsCertifiedHw() string {
	if m != nil {
		return m.AwsCertifiedHw
	}
	return ""
}

func (m *AWSVPCIngressGwType) GetAllowedVipPort() *views.AllowedVIPPorts {
	if m != nil {
		return m.AllowedVipPort
	}
	return nil
}

func (m *AWSVPCIngressGwType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

// AWS Ingress Egress Gateway
//
// x-displayName: "AWS Ingress/Egress Gateway"
// Two interface AWS ingress/egress site
type AWSVPCIngressEgressGwType struct {
	// Nodes
	//
	// x-displayName: "Ingress/Egress Gateway (two Interface) Nodes in AZ"
	// x-required
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	AzNodes []*views.AWSVPCTwoInterfaceNodeType `protobuf:"bytes,1,rep,name=az_nodes,json=azNodes,proto3" json:"az_nodes,omitempty"`
	// Manage Firewall Policy
	//
	// x-displayName: "Manage Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AWSVPCIngressEgressGwType_NoNetworkPolicy
	//	*AWSVPCIngressEgressGwType_ActiveNetworkPolicies
	//	*AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isAWSVPCIngressEgressGwType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AWSVPCIngressEgressGwType_NoForwardProxy
	//	*AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies
	//	*AWSVPCIngressEgressGwType_ForwardProxyAllowAll
	ForwardProxyChoice isAWSVPCIngressEgressGwType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// AWS Certified Hardware
	//
	// x-displayName: "AWS Certified Hardware"
	// x-example: "aws-byol-multi-nic-voltmesh"
	// x-required
	// Name for AWS certified hardware.
	AwsCertifiedHw string `protobuf:"bytes,8,opt,name=aws_certified_hw,json=awsCertifiedHw,proto3" json:"aws_certified_hw,omitempty"`
	// Manage Static Routes for Inside Network
	//
	// x-displayName: "Manage Static Routes for Inside Network"
	// x-required
	// Add static routes to inside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to InsideStaticRouteChoice:
	//	*AWSVPCIngressEgressGwType_NoInsideStaticRoutes
	//	*AWSVPCIngressEgressGwType_InsideStaticRoutes
	InsideStaticRouteChoice isAWSVPCIngressEgressGwType_InsideStaticRouteChoice `protobuf_oneof:"inside_static_route_choice"`
	// Manage Static Routes for Outside Network
	//
	// x-displayName: "Manage Static Routes for Outside Network"
	// x-required
	// Add static routes to outside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AWSVPCIngressEgressGwType_NoOutsideStaticRoutes
	//	*AWSVPCIngressEgressGwType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAWSVPCIngressEgressGwType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to inside or outside network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AWSVPCIngressEgressGwType_NoGlobalNetwork
	//	*AWSVPCIngressEgressGwType_GlobalNetworkList
	GlobalNetworkChoice isAWSVPCIngressEgressGwType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via selected network type
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*AWSVPCIngressEgressGwType_NoDcClusterGroup
	//	*AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn
	//	*AWSVPCIngressEgressGwType_DcClusterGroupInsideVn
	DcClusterGroupChoice isAWSVPCIngressEgressGwType_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*AWSVPCIngressEgressGwType_SmConnectionPublicIp
	//	*AWSVPCIngressEgressGwType_SmConnectionPvtIp
	SiteMeshGroupChoice isAWSVPCIngressEgressGwType_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
	// Allowed VIP Port Configuration for Outside Network
	//
	// x-displayName: "Allowed VIP Port Configuration for Outside Network"
	// Allowed VIP Port Configuration for Outside Network
	AllowedVipPort *views.AllowedVIPPorts `protobuf:"bytes,21,opt,name=allowed_vip_port,json=allowedVipPort,proto3" json:"allowed_vip_port,omitempty"`
	// Allowed VIP Port Configuration for Inside Network
	//
	// x-displayName: "Allowed VIP Port Configuration for Inside Network"
	// Allowed VIP Port Configuration for Inside Network
	AllowedVipPortSli *views.AllowedVIPPorts `protobuf:"bytes,22,opt,name=allowed_vip_port_sli,json=allowedVipPortSli,proto3" json:"allowed_vip_port_sli,omitempty"`
	// Performance Enhancement Choice
	//
	// x-displayName: "Performance Enhancement Mode"
	// Performance Enhancement Mode to optimize for L3 or L7 networking
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,45,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
}

func (m *AWSVPCIngressEgressGwType) Reset()      { *m = AWSVPCIngressEgressGwType{} }
func (*AWSVPCIngressEgressGwType) ProtoMessage() {}
func (*AWSVPCIngressEgressGwType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea70a88e595e3c7c, []int{1}
}
func (m *AWSVPCIngressEgressGwType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSVPCIngressEgressGwType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSVPCIngressEgressGwType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSVPCIngressEgressGwType.Merge(m, src)
}
func (m *AWSVPCIngressEgressGwType) XXX_Size() int {
	return m.Size()
}
func (m *AWSVPCIngressEgressGwType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSVPCIngressEgressGwType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSVPCIngressEgressGwType proto.InternalMessageInfo

type isAWSVPCIngressEgressGwType_NetworkPolicyChoice interface {
	isAWSVPCIngressEgressGwType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCIngressEgressGwType_ForwardProxyChoice interface {
	isAWSVPCIngressEgressGwType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCIngressEgressGwType_InsideStaticRouteChoice interface {
	isAWSVPCIngressEgressGwType_InsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCIngressEgressGwType_OutsideStaticRouteChoice interface {
	isAWSVPCIngressEgressGwType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCIngressEgressGwType_GlobalNetworkChoice interface {
	isAWSVPCIngressEgressGwType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCIngressEgressGwType_DcClusterGroupChoice interface {
	isAWSVPCIngressEgressGwType_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCIngressEgressGwType_SiteMeshGroupChoice interface {
	isAWSVPCIngressEgressGwType_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AWSVPCIngressEgressGwType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,2,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type AWSVPCIngressEgressGwType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,10,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,31,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type AWSVPCIngressEgressGwType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,4,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,9,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type AWSVPCIngressEgressGwType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,20,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type AWSVPCIngressEgressGwType_NoInsideStaticRoutes struct {
	NoInsideStaticRoutes *schema.Empty `protobuf:"bytes,12,opt,name=no_inside_static_routes,json=noInsideStaticRoutes,proto3,oneof" json:"no_inside_static_routes,omitempty"`
}
type AWSVPCIngressEgressGwType_InsideStaticRoutes struct {
	InsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,13,opt,name=inside_static_routes,json=insideStaticRoutes,proto3,oneof" json:"inside_static_routes,omitempty"`
}
type AWSVPCIngressEgressGwType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *schema.Empty `protobuf:"bytes,15,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,proto3,oneof" json:"no_outside_static_routes,omitempty"`
}
type AWSVPCIngressEgressGwType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,16,opt,name=outside_static_routes,json=outsideStaticRoutes,proto3,oneof" json:"outside_static_routes,omitempty"`
}
type AWSVPCIngressEgressGwType_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,18,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type AWSVPCIngressEgressGwType_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,19,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}
type AWSVPCIngressEgressGwType_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,24,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn struct {
	DcClusterGroupOutsideVn *views.ObjectRefType `protobuf:"bytes,25,opt,name=dc_cluster_group_outside_vn,json=dcClusterGroupOutsideVn,proto3,oneof" json:"dc_cluster_group_outside_vn,omitempty"`
}
type AWSVPCIngressEgressGwType_DcClusterGroupInsideVn struct {
	DcClusterGroupInsideVn *views.ObjectRefType `protobuf:"bytes,26,opt,name=dc_cluster_group_inside_vn,json=dcClusterGroupInsideVn,proto3,oneof" json:"dc_cluster_group_inside_vn,omitempty"`
}
type AWSVPCIngressEgressGwType_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,29,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type AWSVPCIngressEgressGwType_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,30,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}

func (*AWSVPCIngressEgressGwType_NoNetworkPolicy) isAWSVPCIngressEgressGwType_NetworkPolicyChoice() {}
func (*AWSVPCIngressEgressGwType_ActiveNetworkPolicies) isAWSVPCIngressEgressGwType_NetworkPolicyChoice() {
}
func (*AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies) isAWSVPCIngressEgressGwType_NetworkPolicyChoice() {
}
func (*AWSVPCIngressEgressGwType_NoForwardProxy) isAWSVPCIngressEgressGwType_ForwardProxyChoice() {}
func (*AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies) isAWSVPCIngressEgressGwType_ForwardProxyChoice() {
}
func (*AWSVPCIngressEgressGwType_ForwardProxyAllowAll) isAWSVPCIngressEgressGwType_ForwardProxyChoice() {
}
func (*AWSVPCIngressEgressGwType_NoInsideStaticRoutes) isAWSVPCIngressEgressGwType_InsideStaticRouteChoice() {
}
func (*AWSVPCIngressEgressGwType_InsideStaticRoutes) isAWSVPCIngressEgressGwType_InsideStaticRouteChoice() {
}
func (*AWSVPCIngressEgressGwType_NoOutsideStaticRoutes) isAWSVPCIngressEgressGwType_OutsideStaticRouteChoice() {
}
func (*AWSVPCIngressEgressGwType_OutsideStaticRoutes) isAWSVPCIngressEgressGwType_OutsideStaticRouteChoice() {
}
func (*AWSVPCIngressEgressGwType_NoGlobalNetwork) isAWSVPCIngressEgressGwType_GlobalNetworkChoice() {}
func (*AWSVPCIngressEgressGwType_GlobalNetworkList) isAWSVPCIngressEgressGwType_GlobalNetworkChoice() {
}
func (*AWSVPCIngressEgressGwType_NoDcClusterGroup) isAWSVPCIngressEgressGwType_DcClusterGroupChoice() {
}
func (*AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn) isAWSVPCIngressEgressGwType_DcClusterGroupChoice() {
}
func (*AWSVPCIngressEgressGwType_DcClusterGroupInsideVn) isAWSVPCIngressEgressGwType_DcClusterGroupChoice() {
}
func (*AWSVPCIngressEgressGwType_SmConnectionPublicIp) isAWSVPCIngressEgressGwType_SiteMeshGroupChoice() {
}
func (*AWSVPCIngressEgressGwType_SmConnectionPvtIp) isAWSVPCIngressEgressGwType_SiteMeshGroupChoice() {
}

func (m *AWSVPCIngressEgressGwType) GetNetworkPolicyChoice() isAWSVPCIngressEgressGwType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AWSVPCIngressEgressGwType) GetForwardProxyChoice() isAWSVPCIngressEgressGwType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AWSVPCIngressEgressGwType) GetInsideStaticRouteChoice() isAWSVPCIngressEgressGwType_InsideStaticRouteChoice {
	if m != nil {
		return m.InsideStaticRouteChoice
	}
	return nil
}
func (m *AWSVPCIngressEgressGwType) GetOutsideStaticRouteChoice() isAWSVPCIngressEgressGwType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AWSVPCIngressEgressGwType) GetGlobalNetworkChoice() isAWSVPCIngressEgressGwType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *AWSVPCIngressEgressGwType) GetDcClusterGroupChoice() isAWSVPCIngressEgressGwType_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}
func (m *AWSVPCIngressEgressGwType) GetSiteMeshGroupChoice() isAWSVPCIngressEgressGwType_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetAzNodes() []*views.AWSVPCTwoInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AWSVPCIngressEgressGwType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AWSVPCIngressEgressGwType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AWSVPCIngressEgressGwType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AWSVPCIngressEgressGwType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetAwsCertifiedHw() string {
	if m != nil {
		return m.AwsCertifiedHw
	}
	return ""
}

func (m *AWSVPCIngressEgressGwType) GetNoInsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetInsideStaticRouteChoice().(*AWSVPCIngressEgressGwType_NoInsideStaticRoutes); ok {
		return x.NoInsideStaticRoutes
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetInsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetInsideStaticRouteChoice().(*AWSVPCIngressEgressGwType_InsideStaticRoutes); ok {
		return x.InsideStaticRoutes
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetNoOutsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AWSVPCIngressEgressGwType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetOutsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AWSVPCIngressEgressGwType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AWSVPCIngressEgressGwType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AWSVPCIngressEgressGwType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*AWSVPCIngressEgressGwType_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetDcClusterGroupOutsideVn() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn); ok {
		return x.DcClusterGroupOutsideVn
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetDcClusterGroupInsideVn() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AWSVPCIngressEgressGwType_DcClusterGroupInsideVn); ok {
		return x.DcClusterGroupInsideVn
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AWSVPCIngressEgressGwType_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AWSVPCIngressEgressGwType_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetAllowedVipPort() *views.AllowedVIPPorts {
	if m != nil {
		return m.AllowedVipPort
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetAllowedVipPortSli() *views.AllowedVIPPorts {
	if m != nil {
		return m.AllowedVipPortSli
	}
	return nil
}

func (m *AWSVPCIngressEgressGwType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AWSVPCIngressEgressGwType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AWSVPCIngressEgressGwType_NoNetworkPolicy)(nil),
		(*AWSVPCIngressEgressGwType_ActiveNetworkPolicies)(nil),
		(*AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies)(nil),
		(*AWSVPCIngressEgressGwType_NoForwardProxy)(nil),
		(*AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies)(nil),
		(*AWSVPCIngressEgressGwType_ForwardProxyAllowAll)(nil),
		(*AWSVPCIngressEgressGwType_NoInsideStaticRoutes)(nil),
		(*AWSVPCIngressEgressGwType_InsideStaticRoutes)(nil),
		(*AWSVPCIngressEgressGwType_NoOutsideStaticRoutes)(nil),
		(*AWSVPCIngressEgressGwType_OutsideStaticRoutes)(nil),
		(*AWSVPCIngressEgressGwType_NoGlobalNetwork)(nil),
		(*AWSVPCIngressEgressGwType_GlobalNetworkList)(nil),
		(*AWSVPCIngressEgressGwType_NoDcClusterGroup)(nil),
		(*AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn)(nil),
		(*AWSVPCIngressEgressGwType_DcClusterGroupInsideVn)(nil),
		(*AWSVPCIngressEgressGwType_SmConnectionPublicIp)(nil),
		(*AWSVPCIngressEgressGwType_SmConnectionPvtIp)(nil),
	}
}

// AWS App Stack Cluster
//
// x-displayName: "AWS App Stack Cluster"
// App Stack cluster of single interface AWS nodes
type AWSVPCVoltstackClusterType struct {
	// AWS Certified Hardware
	//
	// x-displayName: "AWS Certified Hardware"
	// x-example: "aws-byol-multi-nic-voltmesh"
	// x-required
	// Name for AWS certified hardware.
	AwsCertifiedHw string `protobuf:"bytes,1,opt,name=aws_certified_hw,json=awsCertifiedHw,proto3" json:"aws_certified_hw,omitempty"`
	// Nodes
	//
	// x-displayName: "App Stack Cluster (One Interface) Nodes in AZ"
	// x-required
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	AzNodes []*views.AWSVPCOneInterfaceNodeType `protobuf:"bytes,2,rep,name=az_nodes,json=azNodes,proto3" json:"az_nodes,omitempty"`
	// Manage Firewall Policy
	//
	// x-displayName: "Manage Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AWSVPCVoltstackClusterType_NoNetworkPolicy
	//	*AWSVPCVoltstackClusterType_ActiveNetworkPolicies
	//	*AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isAWSVPCVoltstackClusterType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AWSVPCVoltstackClusterType_NoForwardProxy
	//	*AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies
	//	*AWSVPCVoltstackClusterType_ForwardProxyAllowAll
	ForwardProxyChoice isAWSVPCVoltstackClusterType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Site Local Network
	//
	// x-displayName: "Manage Static Routes for Site Local Network"
	// x-required
	// Add static routes to site local network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AWSVPCVoltstackClusterType_NoOutsideStaticRoutes
	//	*AWSVPCVoltstackClusterType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAWSVPCVoltstackClusterType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to site local network.
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AWSVPCVoltstackClusterType_NoGlobalNetwork
	//	*AWSVPCVoltstackClusterType_GlobalNetworkList
	GlobalNetworkChoice isAWSVPCVoltstackClusterType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via selected network type
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*AWSVPCVoltstackClusterType_NoDcClusterGroup
	//	*AWSVPCVoltstackClusterType_DcClusterGroup
	DcClusterGroupChoice isAWSVPCVoltstackClusterType_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*AWSVPCVoltstackClusterType_SmConnectionPublicIp
	//	*AWSVPCVoltstackClusterType_SmConnectionPvtIp
	SiteMeshGroupChoice isAWSVPCVoltstackClusterType_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
	// Storage Class Configuration
	//
	// x-displayName: "Select Configuration for Storage Classes"
	// x-required
	// Configure custom storage classes in kubernetes for this site
	//
	// Types that are valid to be assigned to StorageClassChoice:
	//	*AWSVPCVoltstackClusterType_DefaultStorage
	//	*AWSVPCVoltstackClusterType_StorageClassList
	StorageClassChoice isAWSVPCVoltstackClusterType_StorageClassChoice `protobuf_oneof:"storage_class_choice"`
	// Allowed VIP Port Configuration
	//
	// x-displayName: "Allowed VIP Port Configuration"
	// Allowed VIP Port Configuration
	AllowedVipPort *views.AllowedVIPPorts `protobuf:"bytes,22,opt,name=allowed_vip_port,json=allowedVipPort,proto3" json:"allowed_vip_port,omitempty"`
	// Site Local K8s API access
	//
	// x-displayName: "Site Local K8s API access"
	// x-required
	// Enable/Disable choice for site local K8s API access
	//
	// Types that are valid to be assigned to K8SClusterChoice:
	//	*AWSVPCVoltstackClusterType_NoK8SCluster
	//	*AWSVPCVoltstackClusterType_K8SCluster
	K8SClusterChoice isAWSVPCVoltstackClusterType_K8SClusterChoice `protobuf_oneof:"k8s_cluster_choice"`
}

func (m *AWSVPCVoltstackClusterType) Reset()      { *m = AWSVPCVoltstackClusterType{} }
func (*AWSVPCVoltstackClusterType) ProtoMessage() {}
func (*AWSVPCVoltstackClusterType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea70a88e595e3c7c, []int{2}
}
func (m *AWSVPCVoltstackClusterType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSVPCVoltstackClusterType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSVPCVoltstackClusterType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSVPCVoltstackClusterType.Merge(m, src)
}
func (m *AWSVPCVoltstackClusterType) XXX_Size() int {
	return m.Size()
}
func (m *AWSVPCVoltstackClusterType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSVPCVoltstackClusterType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSVPCVoltstackClusterType proto.InternalMessageInfo

type isAWSVPCVoltstackClusterType_NetworkPolicyChoice interface {
	isAWSVPCVoltstackClusterType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCVoltstackClusterType_ForwardProxyChoice interface {
	isAWSVPCVoltstackClusterType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCVoltstackClusterType_OutsideStaticRouteChoice interface {
	isAWSVPCVoltstackClusterType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCVoltstackClusterType_GlobalNetworkChoice interface {
	isAWSVPCVoltstackClusterType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCVoltstackClusterType_DcClusterGroupChoice interface {
	isAWSVPCVoltstackClusterType_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCVoltstackClusterType_SiteMeshGroupChoice interface {
	isAWSVPCVoltstackClusterType_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCVoltstackClusterType_StorageClassChoice interface {
	isAWSVPCVoltstackClusterType_StorageClassChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCVoltstackClusterType_K8SClusterChoice interface {
	isAWSVPCVoltstackClusterType_K8SClusterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AWSVPCVoltstackClusterType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,4,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type AWSVPCVoltstackClusterType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,5,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,35,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type AWSVPCVoltstackClusterType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,7,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,8,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type AWSVPCVoltstackClusterType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,15,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type AWSVPCVoltstackClusterType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *schema.Empty `protobuf:"bytes,10,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,proto3,oneof" json:"no_outside_static_routes,omitempty"`
}
type AWSVPCVoltstackClusterType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,11,opt,name=outside_static_routes,json=outsideStaticRoutes,proto3,oneof" json:"outside_static_routes,omitempty"`
}
type AWSVPCVoltstackClusterType_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,13,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type AWSVPCVoltstackClusterType_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,14,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}
type AWSVPCVoltstackClusterType_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,29,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type AWSVPCVoltstackClusterType_DcClusterGroup struct {
	DcClusterGroup *views.ObjectRefType `protobuf:"bytes,30,opt,name=dc_cluster_group,json=dcClusterGroup,proto3,oneof" json:"dc_cluster_group,omitempty"`
}
type AWSVPCVoltstackClusterType_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,33,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type AWSVPCVoltstackClusterType_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,34,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}
type AWSVPCVoltstackClusterType_DefaultStorage struct {
	DefaultStorage *schema.Empty `protobuf:"bytes,20,opt,name=default_storage,json=defaultStorage,proto3,oneof" json:"default_storage,omitempty"`
}
type AWSVPCVoltstackClusterType_StorageClassList struct {
	StorageClassList *views.StorageClassListType `protobuf:"bytes,21,opt,name=storage_class_list,json=storageClassList,proto3,oneof" json:"storage_class_list,omitempty"`
}
type AWSVPCVoltstackClusterType_NoK8SCluster struct {
	NoK8SCluster *schema.Empty `protobuf:"bytes,26,opt,name=no_k8s_cluster,json=noK8sCluster,proto3,oneof" json:"no_k8s_cluster,omitempty"`
}
type AWSVPCVoltstackClusterType_K8SCluster struct {
	K8SCluster *views.ObjectRefType `protobuf:"bytes,27,opt,name=k8s_cluster,json=k8sCluster,proto3,oneof" json:"k8s_cluster,omitempty"`
}

func (*AWSVPCVoltstackClusterType_NoNetworkPolicy) isAWSVPCVoltstackClusterType_NetworkPolicyChoice() {
}
func (*AWSVPCVoltstackClusterType_ActiveNetworkPolicies) isAWSVPCVoltstackClusterType_NetworkPolicyChoice() {
}
func (*AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies) isAWSVPCVoltstackClusterType_NetworkPolicyChoice() {
}
func (*AWSVPCVoltstackClusterType_NoForwardProxy) isAWSVPCVoltstackClusterType_ForwardProxyChoice() {}
func (*AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies) isAWSVPCVoltstackClusterType_ForwardProxyChoice() {
}
func (*AWSVPCVoltstackClusterType_ForwardProxyAllowAll) isAWSVPCVoltstackClusterType_ForwardProxyChoice() {
}
func (*AWSVPCVoltstackClusterType_NoOutsideStaticRoutes) isAWSVPCVoltstackClusterType_OutsideStaticRouteChoice() {
}
func (*AWSVPCVoltstackClusterType_OutsideStaticRoutes) isAWSVPCVoltstackClusterType_OutsideStaticRouteChoice() {
}
func (*AWSVPCVoltstackClusterType_NoGlobalNetwork) isAWSVPCVoltstackClusterType_GlobalNetworkChoice() {
}
func (*AWSVPCVoltstackClusterType_GlobalNetworkList) isAWSVPCVoltstackClusterType_GlobalNetworkChoice() {
}
func (*AWSVPCVoltstackClusterType_NoDcClusterGroup) isAWSVPCVoltstackClusterType_DcClusterGroupChoice() {
}
func (*AWSVPCVoltstackClusterType_DcClusterGroup) isAWSVPCVoltstackClusterType_DcClusterGroupChoice() {
}
func (*AWSVPCVoltstackClusterType_SmConnectionPublicIp) isAWSVPCVoltstackClusterType_SiteMeshGroupChoice() {
}
func (*AWSVPCVoltstackClusterType_SmConnectionPvtIp) isAWSVPCVoltstackClusterType_SiteMeshGroupChoice() {
}
func (*AWSVPCVoltstackClusterType_DefaultStorage) isAWSVPCVoltstackClusterType_StorageClassChoice() {}
func (*AWSVPCVoltstackClusterType_StorageClassList) isAWSVPCVoltstackClusterType_StorageClassChoice() {
}
func (*AWSVPCVoltstackClusterType_NoK8SCluster) isAWSVPCVoltstackClusterType_K8SClusterChoice() {}
func (*AWSVPCVoltstackClusterType_K8SCluster) isAWSVPCVoltstackClusterType_K8SClusterChoice()   {}

func (m *AWSVPCVoltstackClusterType) GetNetworkPolicyChoice() isAWSVPCVoltstackClusterType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AWSVPCVoltstackClusterType) GetForwardProxyChoice() isAWSVPCVoltstackClusterType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AWSVPCVoltstackClusterType) GetOutsideStaticRouteChoice() isAWSVPCVoltstackClusterType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AWSVPCVoltstackClusterType) GetGlobalNetworkChoice() isAWSVPCVoltstackClusterType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *AWSVPCVoltstackClusterType) GetDcClusterGroupChoice() isAWSVPCVoltstackClusterType_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}
func (m *AWSVPCVoltstackClusterType) GetSiteMeshGroupChoice() isAWSVPCVoltstackClusterType_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}
func (m *AWSVPCVoltstackClusterType) GetStorageClassChoice() isAWSVPCVoltstackClusterType_StorageClassChoice {
	if m != nil {
		return m.StorageClassChoice
	}
	return nil
}
func (m *AWSVPCVoltstackClusterType) GetK8SClusterChoice() isAWSVPCVoltstackClusterType_K8SClusterChoice {
	if m != nil {
		return m.K8SClusterChoice
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetAwsCertifiedHw() string {
	if m != nil {
		return m.AwsCertifiedHw
	}
	return ""
}

func (m *AWSVPCVoltstackClusterType) GetAzNodes() []*views.AWSVPCOneInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AWSVPCVoltstackClusterType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AWSVPCVoltstackClusterType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AWSVPCVoltstackClusterType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AWSVPCVoltstackClusterType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetNoOutsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AWSVPCVoltstackClusterType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetOutsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AWSVPCVoltstackClusterType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AWSVPCVoltstackClusterType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AWSVPCVoltstackClusterType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*AWSVPCVoltstackClusterType_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetDcClusterGroup() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AWSVPCVoltstackClusterType_DcClusterGroup); ok {
		return x.DcClusterGroup
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AWSVPCVoltstackClusterType_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AWSVPCVoltstackClusterType_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetDefaultStorage() *schema.Empty {
	if x, ok := m.GetStorageClassChoice().(*AWSVPCVoltstackClusterType_DefaultStorage); ok {
		return x.DefaultStorage
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetStorageClassList() *views.StorageClassListType {
	if x, ok := m.GetStorageClassChoice().(*AWSVPCVoltstackClusterType_StorageClassList); ok {
		return x.StorageClassList
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetAllowedVipPort() *views.AllowedVIPPorts {
	if m != nil {
		return m.AllowedVipPort
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetNoK8SCluster() *schema.Empty {
	if x, ok := m.GetK8SClusterChoice().(*AWSVPCVoltstackClusterType_NoK8SCluster); ok {
		return x.NoK8SCluster
	}
	return nil
}

func (m *AWSVPCVoltstackClusterType) GetK8SCluster() *views.ObjectRefType {
	if x, ok := m.GetK8SClusterChoice().(*AWSVPCVoltstackClusterType_K8SCluster); ok {
		return x.K8SCluster
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AWSVPCVoltstackClusterType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AWSVPCVoltstackClusterType_NoNetworkPolicy)(nil),
		(*AWSVPCVoltstackClusterType_ActiveNetworkPolicies)(nil),
		(*AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies)(nil),
		(*AWSVPCVoltstackClusterType_NoForwardProxy)(nil),
		(*AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies)(nil),
		(*AWSVPCVoltstackClusterType_ForwardProxyAllowAll)(nil),
		(*AWSVPCVoltstackClusterType_NoOutsideStaticRoutes)(nil),
		(*AWSVPCVoltstackClusterType_OutsideStaticRoutes)(nil),
		(*AWSVPCVoltstackClusterType_NoGlobalNetwork)(nil),
		(*AWSVPCVoltstackClusterType_GlobalNetworkList)(nil),
		(*AWSVPCVoltstackClusterType_NoDcClusterGroup)(nil),
		(*AWSVPCVoltstackClusterType_DcClusterGroup)(nil),
		(*AWSVPCVoltstackClusterType_SmConnectionPublicIp)(nil),
		(*AWSVPCVoltstackClusterType_SmConnectionPvtIp)(nil),
		(*AWSVPCVoltstackClusterType_DefaultStorage)(nil),
		(*AWSVPCVoltstackClusterType_StorageClassList)(nil),
		(*AWSVPCVoltstackClusterType_NoK8SCluster)(nil),
		(*AWSVPCVoltstackClusterType_K8SCluster)(nil),
	}
}

// AWS Ingress Gateway
//
// x-displayName: "AWS Ingress Gateway"
// Single interface AWS ingress site
type AWSVPCIngressGwReplaceType struct {
	// Allowed VIP Port Configuration
	//
	// x-displayName: "Allowed VIP Port Configuration"
	// Allowed VIP Port Configuration
	AllowedVipPort *views.AllowedVIPPorts `protobuf:"bytes,3,opt,name=allowed_vip_port,json=allowedVipPort,proto3" json:"allowed_vip_port,omitempty"`
	// Performance Enhancement Choice
	//
	// x-displayName: "Performance Enhancement Mode"
	// Performance Enhancement Mode to optimize for L3 or L7 networking
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,45,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
}

func (m *AWSVPCIngressGwReplaceType) Reset()      { *m = AWSVPCIngressGwReplaceType{} }
func (*AWSVPCIngressGwReplaceType) ProtoMessage() {}
func (*AWSVPCIngressGwReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea70a88e595e3c7c, []int{3}
}
func (m *AWSVPCIngressGwReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSVPCIngressGwReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSVPCIngressGwReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSVPCIngressGwReplaceType.Merge(m, src)
}
func (m *AWSVPCIngressGwReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *AWSVPCIngressGwReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSVPCIngressGwReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSVPCIngressGwReplaceType proto.InternalMessageInfo

func (m *AWSVPCIngressGwReplaceType) GetAllowedVipPort() *views.AllowedVIPPorts {
	if m != nil {
		return m.AllowedVipPort
	}
	return nil
}

func (m *AWSVPCIngressGwReplaceType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

// AWS Ingress Egress Gateway
//
// x-displayName: "AWS Ingress/Egress Gateway"
// Two interface AWS ingress/egress site
type AWSVPCIngressEgressGwReplaceType struct {
	// Manage Firewall Policy
	//
	// x-displayName: "Manage Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy
	//	*AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies
	//	*AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isAWSVPCIngressEgressGwReplaceType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AWSVPCIngressEgressGwReplaceType_NoForwardProxy
	//	*AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies
	//	*AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll
	ForwardProxyChoice isAWSVPCIngressEgressGwReplaceType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Inside Network
	//
	// x-displayName: "Manage Static Routes for Inside Network"
	// x-required
	// Add static routes to inside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to InsideStaticRouteChoice:
	//	*AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes
	//	*AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes
	InsideStaticRouteChoice isAWSVPCIngressEgressGwReplaceType_InsideStaticRouteChoice `protobuf_oneof:"inside_static_route_choice"`
	// Manage Static Routes for Outside Network
	//
	// x-displayName: "Manage Static Routes for Outside Network"
	// x-required
	// Add static routes to outside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes
	//	*AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAWSVPCIngressEgressGwReplaceType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to inside or outside network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork
	//	*AWSVPCIngressEgressGwReplaceType_GlobalNetworkList
	GlobalNetworkChoice isAWSVPCIngressEgressGwReplaceType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via selected network type
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup
	//	*AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn
	//	*AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn
	DcClusterGroupChoice isAWSVPCIngressEgressGwReplaceType_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp
	//	*AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp
	SiteMeshGroupChoice isAWSVPCIngressEgressGwReplaceType_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
	// Allowed VIP Port Configuration for Outside Network
	//
	// x-displayName: "Allowed VIP Port Configuration for Outside Network"
	// Allowed VIP Port Configuration for Outside Network
	AllowedVipPort *views.AllowedVIPPorts `protobuf:"bytes,21,opt,name=allowed_vip_port,json=allowedVipPort,proto3" json:"allowed_vip_port,omitempty"`
	// Allowed VIP Port Configuration for Inside Network
	//
	// x-displayName: "Allowed VIP Port Configuration for Inside Network"
	// Allowed VIP Port Configuration for Inside Network
	AllowedVipPortSli *views.AllowedVIPPorts `protobuf:"bytes,22,opt,name=allowed_vip_port_sli,json=allowedVipPortSli,proto3" json:"allowed_vip_port_sli,omitempty"`
	// Performance Enhancement Choice
	//
	// x-displayName: "Performance Enhancement Mode"
	// Performance Enhancement Mode to optimize for L3 or L7 networking
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,45,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
}

func (m *AWSVPCIngressEgressGwReplaceType) Reset()      { *m = AWSVPCIngressEgressGwReplaceType{} }
func (*AWSVPCIngressEgressGwReplaceType) ProtoMessage() {}
func (*AWSVPCIngressEgressGwReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea70a88e595e3c7c, []int{4}
}
func (m *AWSVPCIngressEgressGwReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSVPCIngressEgressGwReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSVPCIngressEgressGwReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSVPCIngressEgressGwReplaceType.Merge(m, src)
}
func (m *AWSVPCIngressEgressGwReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *AWSVPCIngressEgressGwReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSVPCIngressEgressGwReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSVPCIngressEgressGwReplaceType proto.InternalMessageInfo

type isAWSVPCIngressEgressGwReplaceType_NetworkPolicyChoice interface {
	isAWSVPCIngressEgressGwReplaceType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCIngressEgressGwReplaceType_ForwardProxyChoice interface {
	isAWSVPCIngressEgressGwReplaceType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCIngressEgressGwReplaceType_InsideStaticRouteChoice interface {
	isAWSVPCIngressEgressGwReplaceType_InsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCIngressEgressGwReplaceType_OutsideStaticRouteChoice interface {
	isAWSVPCIngressEgressGwReplaceType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCIngressEgressGwReplaceType_GlobalNetworkChoice interface {
	isAWSVPCIngressEgressGwReplaceType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCIngressEgressGwReplaceType_DcClusterGroupChoice interface {
	isAWSVPCIngressEgressGwReplaceType_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCIngressEgressGwReplaceType_SiteMeshGroupChoice interface {
	isAWSVPCIngressEgressGwReplaceType_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,2,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,10,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,31,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,4,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,9,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,20,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes struct {
	NoInsideStaticRoutes *schema.Empty `protobuf:"bytes,12,opt,name=no_inside_static_routes,json=noInsideStaticRoutes,proto3,oneof" json:"no_inside_static_routes,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes struct {
	InsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,13,opt,name=inside_static_routes,json=insideStaticRoutes,proto3,oneof" json:"inside_static_routes,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *schema.Empty `protobuf:"bytes,15,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,proto3,oneof" json:"no_outside_static_routes,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,16,opt,name=outside_static_routes,json=outsideStaticRoutes,proto3,oneof" json:"outside_static_routes,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,18,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,19,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,24,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn struct {
	DcClusterGroupOutsideVn *views.ObjectRefType `protobuf:"bytes,25,opt,name=dc_cluster_group_outside_vn,json=dcClusterGroupOutsideVn,proto3,oneof" json:"dc_cluster_group_outside_vn,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn struct {
	DcClusterGroupInsideVn *views.ObjectRefType `protobuf:"bytes,26,opt,name=dc_cluster_group_inside_vn,json=dcClusterGroupInsideVn,proto3,oneof" json:"dc_cluster_group_inside_vn,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,29,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,30,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}

func (*AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy) isAWSVPCIngressEgressGwReplaceType_NetworkPolicyChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies) isAWSVPCIngressEgressGwReplaceType_NetworkPolicyChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies) isAWSVPCIngressEgressGwReplaceType_NetworkPolicyChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_NoForwardProxy) isAWSVPCIngressEgressGwReplaceType_ForwardProxyChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies) isAWSVPCIngressEgressGwReplaceType_ForwardProxyChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll) isAWSVPCIngressEgressGwReplaceType_ForwardProxyChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes) isAWSVPCIngressEgressGwReplaceType_InsideStaticRouteChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes) isAWSVPCIngressEgressGwReplaceType_InsideStaticRouteChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes) isAWSVPCIngressEgressGwReplaceType_OutsideStaticRouteChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes) isAWSVPCIngressEgressGwReplaceType_OutsideStaticRouteChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork) isAWSVPCIngressEgressGwReplaceType_GlobalNetworkChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_GlobalNetworkList) isAWSVPCIngressEgressGwReplaceType_GlobalNetworkChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup) isAWSVPCIngressEgressGwReplaceType_DcClusterGroupChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn) isAWSVPCIngressEgressGwReplaceType_DcClusterGroupChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn) isAWSVPCIngressEgressGwReplaceType_DcClusterGroupChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp) isAWSVPCIngressEgressGwReplaceType_SiteMeshGroupChoice() {
}
func (*AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp) isAWSVPCIngressEgressGwReplaceType_SiteMeshGroupChoice() {
}

func (m *AWSVPCIngressEgressGwReplaceType) GetNetworkPolicyChoice() isAWSVPCIngressEgressGwReplaceType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AWSVPCIngressEgressGwReplaceType) GetForwardProxyChoice() isAWSVPCIngressEgressGwReplaceType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AWSVPCIngressEgressGwReplaceType) GetInsideStaticRouteChoice() isAWSVPCIngressEgressGwReplaceType_InsideStaticRouteChoice {
	if m != nil {
		return m.InsideStaticRouteChoice
	}
	return nil
}
func (m *AWSVPCIngressEgressGwReplaceType) GetOutsideStaticRouteChoice() isAWSVPCIngressEgressGwReplaceType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AWSVPCIngressEgressGwReplaceType) GetGlobalNetworkChoice() isAWSVPCIngressEgressGwReplaceType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *AWSVPCIngressEgressGwReplaceType) GetDcClusterGroupChoice() isAWSVPCIngressEgressGwReplaceType_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}
func (m *AWSVPCIngressEgressGwReplaceType) GetSiteMeshGroupChoice() isAWSVPCIngressEgressGwReplaceType_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AWSVPCIngressEgressGwReplaceType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetNoInsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetInsideStaticRouteChoice().(*AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes); ok {
		return x.NoInsideStaticRoutes
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetInsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetInsideStaticRouteChoice().(*AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes); ok {
		return x.InsideStaticRoutes
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetNoOutsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetOutsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AWSVPCIngressEgressGwReplaceType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetDcClusterGroupOutsideVn() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn); ok {
		return x.DcClusterGroupOutsideVn
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetDcClusterGroupInsideVn() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn); ok {
		return x.DcClusterGroupInsideVn
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetAllowedVipPort() *views.AllowedVIPPorts {
	if m != nil {
		return m.AllowedVipPort
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetAllowedVipPortSli() *views.AllowedVIPPorts {
	if m != nil {
		return m.AllowedVipPortSli
	}
	return nil
}

func (m *AWSVPCIngressEgressGwReplaceType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AWSVPCIngressEgressGwReplaceType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy)(nil),
		(*AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies)(nil),
		(*AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies)(nil),
		(*AWSVPCIngressEgressGwReplaceType_NoForwardProxy)(nil),
		(*AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies)(nil),
		(*AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll)(nil),
		(*AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes)(nil),
		(*AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes)(nil),
		(*AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes)(nil),
		(*AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes)(nil),
		(*AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork)(nil),
		(*AWSVPCIngressEgressGwReplaceType_GlobalNetworkList)(nil),
		(*AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup)(nil),
		(*AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn)(nil),
		(*AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn)(nil),
		(*AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp)(nil),
		(*AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp)(nil),
	}
}

// AWS App Stack Cluster
//
// x-displayName: "AWS App Stack Cluster"
// App Stack cluster of single interface AWS nodes
type AWSVPCVoltstackClusterReplaceType struct {
	// Manage Firewall Policy
	//
	// x-displayName: "Manage Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy
	//	*AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies
	//	*AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isAWSVPCVoltstackClusterReplaceType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AWSVPCVoltstackClusterReplaceType_NoForwardProxy
	//	*AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies
	//	*AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll
	ForwardProxyChoice isAWSVPCVoltstackClusterReplaceType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Site Local Network
	//
	// x-displayName: "Manage Static Routes for Site Local Network"
	// x-required
	// Add static routes to site local network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes
	//	*AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAWSVPCVoltstackClusterReplaceType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to site local network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork
	//	*AWSVPCVoltstackClusterReplaceType_GlobalNetworkList
	GlobalNetworkChoice isAWSVPCVoltstackClusterReplaceType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via selected network type
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup
	//	*AWSVPCVoltstackClusterReplaceType_DcClusterGroup
	DcClusterGroupChoice isAWSVPCVoltstackClusterReplaceType_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp
	//	*AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp
	SiteMeshGroupChoice isAWSVPCVoltstackClusterReplaceType_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
	// Allowed VIP Port Configuration
	//
	// x-displayName: "Allowed VIP Port Configuration"
	// Allowed VIP Port Configuration
	AllowedVipPort *views.AllowedVIPPorts `protobuf:"bytes,22,opt,name=allowed_vip_port,json=allowedVipPort,proto3" json:"allowed_vip_port,omitempty"`
}

func (m *AWSVPCVoltstackClusterReplaceType) Reset()      { *m = AWSVPCVoltstackClusterReplaceType{} }
func (*AWSVPCVoltstackClusterReplaceType) ProtoMessage() {}
func (*AWSVPCVoltstackClusterReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea70a88e595e3c7c, []int{5}
}
func (m *AWSVPCVoltstackClusterReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSVPCVoltstackClusterReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSVPCVoltstackClusterReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSVPCVoltstackClusterReplaceType.Merge(m, src)
}
func (m *AWSVPCVoltstackClusterReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *AWSVPCVoltstackClusterReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSVPCVoltstackClusterReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSVPCVoltstackClusterReplaceType proto.InternalMessageInfo

type isAWSVPCVoltstackClusterReplaceType_NetworkPolicyChoice interface {
	isAWSVPCVoltstackClusterReplaceType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCVoltstackClusterReplaceType_ForwardProxyChoice interface {
	isAWSVPCVoltstackClusterReplaceType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCVoltstackClusterReplaceType_OutsideStaticRouteChoice interface {
	isAWSVPCVoltstackClusterReplaceType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCVoltstackClusterReplaceType_GlobalNetworkChoice interface {
	isAWSVPCVoltstackClusterReplaceType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCVoltstackClusterReplaceType_DcClusterGroupChoice interface {
	isAWSVPCVoltstackClusterReplaceType_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSVPCVoltstackClusterReplaceType_SiteMeshGroupChoice interface {
	isAWSVPCVoltstackClusterReplaceType_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,4,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,5,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,35,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type AWSVPCVoltstackClusterReplaceType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,7,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,8,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,15,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *schema.Empty `protobuf:"bytes,10,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,proto3,oneof" json:"no_outside_static_routes,omitempty"`
}
type AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,11,opt,name=outside_static_routes,json=outsideStaticRoutes,proto3,oneof" json:"outside_static_routes,omitempty"`
}
type AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,13,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type AWSVPCVoltstackClusterReplaceType_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,14,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}
type AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,29,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type AWSVPCVoltstackClusterReplaceType_DcClusterGroup struct {
	DcClusterGroup *views.ObjectRefType `protobuf:"bytes,30,opt,name=dc_cluster_group,json=dcClusterGroup,proto3,oneof" json:"dc_cluster_group,omitempty"`
}
type AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,33,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,34,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}

func (*AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy) isAWSVPCVoltstackClusterReplaceType_NetworkPolicyChoice() {
}
func (*AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies) isAWSVPCVoltstackClusterReplaceType_NetworkPolicyChoice() {
}
func (*AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies) isAWSVPCVoltstackClusterReplaceType_NetworkPolicyChoice() {
}
func (*AWSVPCVoltstackClusterReplaceType_NoForwardProxy) isAWSVPCVoltstackClusterReplaceType_ForwardProxyChoice() {
}
func (*AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies) isAWSVPCVoltstackClusterReplaceType_ForwardProxyChoice() {
}
func (*AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll) isAWSVPCVoltstackClusterReplaceType_ForwardProxyChoice() {
}
func (*AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes) isAWSVPCVoltstackClusterReplaceType_OutsideStaticRouteChoice() {
}
func (*AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes) isAWSVPCVoltstackClusterReplaceType_OutsideStaticRouteChoice() {
}
func (*AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork) isAWSVPCVoltstackClusterReplaceType_GlobalNetworkChoice() {
}
func (*AWSVPCVoltstackClusterReplaceType_GlobalNetworkList) isAWSVPCVoltstackClusterReplaceType_GlobalNetworkChoice() {
}
func (*AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup) isAWSVPCVoltstackClusterReplaceType_DcClusterGroupChoice() {
}
func (*AWSVPCVoltstackClusterReplaceType_DcClusterGroup) isAWSVPCVoltstackClusterReplaceType_DcClusterGroupChoice() {
}
func (*AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp) isAWSVPCVoltstackClusterReplaceType_SiteMeshGroupChoice() {
}
func (*AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp) isAWSVPCVoltstackClusterReplaceType_SiteMeshGroupChoice() {
}

func (m *AWSVPCVoltstackClusterReplaceType) GetNetworkPolicyChoice() isAWSVPCVoltstackClusterReplaceType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AWSVPCVoltstackClusterReplaceType) GetForwardProxyChoice() isAWSVPCVoltstackClusterReplaceType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AWSVPCVoltstackClusterReplaceType) GetOutsideStaticRouteChoice() isAWSVPCVoltstackClusterReplaceType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AWSVPCVoltstackClusterReplaceType) GetGlobalNetworkChoice() isAWSVPCVoltstackClusterReplaceType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *AWSVPCVoltstackClusterReplaceType) GetDcClusterGroupChoice() isAWSVPCVoltstackClusterReplaceType_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}
func (m *AWSVPCVoltstackClusterReplaceType) GetSiteMeshGroupChoice() isAWSVPCVoltstackClusterReplaceType_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AWSVPCVoltstackClusterReplaceType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetNoOutsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetOutsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AWSVPCVoltstackClusterReplaceType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetDcClusterGroup() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*AWSVPCVoltstackClusterReplaceType_DcClusterGroup); ok {
		return x.DcClusterGroup
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

func (m *AWSVPCVoltstackClusterReplaceType) GetAllowedVipPort() *views.AllowedVIPPorts {
	if m != nil {
		return m.AllowedVipPort
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AWSVPCVoltstackClusterReplaceType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy)(nil),
		(*AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies)(nil),
		(*AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies)(nil),
		(*AWSVPCVoltstackClusterReplaceType_NoForwardProxy)(nil),
		(*AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies)(nil),
		(*AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll)(nil),
		(*AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes)(nil),
		(*AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes)(nil),
		(*AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork)(nil),
		(*AWSVPCVoltstackClusterReplaceType_GlobalNetworkList)(nil),
		(*AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup)(nil),
		(*AWSVPCVoltstackClusterReplaceType_DcClusterGroup)(nil),
		(*AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp)(nil),
		(*AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp)(nil),
	}
}

// AWS VPC Site Information Config
//
// x-displayName: "AWS VPC Site Information Config"
// AWS VPC Site information like
type AWSVPCSiteInfoType struct {
	// AWS Node Elastic IPs
	//
	// x-displayName: "AWS Node Elastic IPs"
	// x-required
	// x-example: "1.1.1.1, 2.2.2.2, 3.3.3.3"
	// AWS Elastic IPs used by the nodes
	PublicIps []string `protobuf:"bytes,1,rep,name=public_ips,json=publicIps,proto3" json:"public_ips,omitempty"`
	// AWS Node Private IPs
	//
	// x-displayName: "AWS Node Private IPs"
	// x-required
	// x-example: "10.0.0.1, 10.0.0.2, 10.0.0.3"
	// AWS Private IPs used by the nodes
	PrivateIps []string `protobuf:"bytes,2,rep,name=private_ips,json=privateIps,proto3" json:"private_ips,omitempty"`
	// AWS Subnet Info
	//
	// x-displayName: "AWS Subnet Info"
	// x-required
	// AWS Subnet Info where the F5XC site is deployed
	SubnetIds []*views.AWSSubnetIdsType `protobuf:"bytes,3,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// VPC ID
	//
	// x-displayName: "VPC ID"
	// x-example: "vpc-12345678"
	// VPC ID where the volterra site exists
	VpcId string `protobuf:"bytes,4,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// VPC Name
	//
	// x-displayName: "VPC Name"
	// VPC Name where the volterra site exists
	VpcName string `protobuf:"bytes,5,opt,name=vpc_name,json=vpcName,proto3" json:"vpc_name,omitempty"`
}

func (m *AWSVPCSiteInfoType) Reset()      { *m = AWSVPCSiteInfoType{} }
func (*AWSVPCSiteInfoType) ProtoMessage() {}
func (*AWSVPCSiteInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea70a88e595e3c7c, []int{6}
}
func (m *AWSVPCSiteInfoType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSVPCSiteInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSVPCSiteInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSVPCSiteInfoType.Merge(m, src)
}
func (m *AWSVPCSiteInfoType) XXX_Size() int {
	return m.Size()
}
func (m *AWSVPCSiteInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSVPCSiteInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSVPCSiteInfoType proto.InternalMessageInfo

func (m *AWSVPCSiteInfoType) GetPublicIps() []string {
	if m != nil {
		return m.PublicIps
	}
	return nil
}

func (m *AWSVPCSiteInfoType) GetPrivateIps() []string {
	if m != nil {
		return m.PrivateIps
	}
	return nil
}

func (m *AWSVPCSiteInfoType) GetSubnetIds() []*views.AWSSubnetIdsType {
	if m != nil {
		return m.SubnetIds
	}
	return nil
}

func (m *AWSVPCSiteInfoType) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *AWSVPCSiteInfoType) GetVpcName() string {
	if m != nil {
		return m.VpcName
	}
	return ""
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the AWS VPC site specification
type GlobalSpecType struct {
	// VPC
	//
	// x-displayName: "VPC"
	// Choice of using existing VPC or create new VPC
	Vpc *views.AWSVPCchoiceType `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
	// Number of interfaces on CE
	//
	// x-displayName: "Select Ingress Gateway or Ingress/Egress Gateway"
	// x-required
	// Choice of deploying one interface or two interface site
	//
	// Types that are valid to be assigned to SiteType:
	//	*GlobalSpecType_IngressGw
	//	*GlobalSpecType_IngressEgressGw
	//	*GlobalSpecType_VoltstackCluster
	SiteType isGlobalSpecType_SiteType `protobuf_oneof:"site_type"`
	// Automatic Deployment
	//
	// x-displayName: "Automatic Deployment"
	// x-required
	// Deploying automatic via volterra.
	//
	// Types that are valid to be assigned to Deployment:
	//	*GlobalSpecType_AwsCred
	//	*GlobalSpecType_Assisted
	Deployment isGlobalSpecType_Deployment `protobuf_oneof:"deployment"`
	// Instance Type
	//
	// x-displayName: "AWS Instance Type for Node"
	// x-example: "a1.xlarge"
	// x-required
	// Select Instance size based on performance needed
	InstanceType string `protobuf:"bytes,6,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// Desired Worker Nodes Selection
	//
	// x-displayName: "Desired Worker Nodes Selection"
	// x-required
	// Choice of deploying desired number of worker nodes.
	//
	// Types that are valid to be assigned to WorkerNodes:
	//	*GlobalSpecType_NodesPerAz
	//	*GlobalSpecType_TotalNodes
	//	*GlobalSpecType_NoWorkerNodes
	WorkerNodes isGlobalSpecType_WorkerNodes `protobuf_oneof:"worker_nodes"`
	// volterra_software_version
	//
	// x-displayName: "Software Version"
	// x-example: "value"
	// Desired F5XC software version for this site, a string matching released set of software components.
	VolterraSoftwareVersion string `protobuf:"bytes,8,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	// operating_system_version
	//
	// x-displayName: "Operating System Version"
	// x-example: "value"
	// Desired Operating System version for this site.
	OperatingSystemVersion string `protobuf:"bytes,9,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// AWS Region
	//
	// x-displayName: "AWS Region"
	// x-example: "us-east-1"
	// x-required
	// Name for AWS Region.
	AwsRegion string `protobuf:"bytes,12,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	// Cloud Disk size
	//
	// x-displayName: "Cloud Disk Size"
	// x-example: "80"
	// Disk size to be used for this instance in GiB. 80 is 80 GiB
	DiskSize uint32 `protobuf:"varint,15,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// x-example: "ssh-rsa AAAAB..."
	// x-required
	// Public SSH key for accessing the site.
	SshKey string `protobuf:"bytes,13,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// address
	//
	// x-displayName: "Geographical Address"
	// x-example: "123 Street, city, country, postal code"
	// Site's geographical address that can be used determine its latitude and longitude.
	Address string `protobuf:"bytes,17,opt,name=address,proto3" json:"address,omitempty"`
	// coordinates
	//
	// x-displayName: "Co-ordinates"
	// Site longitude and latitude co-ordinates
	Coordinates *site.Coordinates `protobuf:"bytes,18,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Logs Streaming
	//
	// x-displayName: "Logs Streaming"
	// x-required
	// Select Logs receiver for logs streaming
	//
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GlobalSpecType_LogsStreamingDisabled
	//	*GlobalSpecType_LogReceiver
	LogsReceiverChoice isGlobalSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// F5XC Software
	//
	// x-displayName: "F5XC Software"
	// F5XC Software Details
	Sw *views.VolterraSoftwareType `protobuf:"bytes,22,opt,name=sw,proto3" json:"sw,omitempty"`
	// Operating System
	//
	// x-displayName: "Operating System"
	// Operating System Details
	Os *views.OperatingSystemType `protobuf:"bytes,23,opt,name=os,proto3" json:"os,omitempty"`
	// AWS Tags
	//
	// x-displayName: "AWS Tags"
	// x-example: "dev: staging"
	// AWS Tags is a label consisting of a user-defined key and value.
	// It helps to manage, identify, organize, search for, and filter resources in AWS console.
	Tags map[string]string `protobuf:"bytes,30,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// VIP Params Per Az
	//
	// x-displayName: "VIP Params Per AZ"
	// VIP Parameters Per AZ.
	VipParamsPerAz []*site.PublishVIPParamsPerAz `protobuf:"bytes,24,rep,name=vip_params_per_az,json=vipParamsPerAz,proto3" json:"vip_params_per_az,omitempty"`
	// user_modification_timestamp
	//
	// x-displayName: "User Modification Timestamp"
	// ModificationTimestamp is a timestamp representing time when the user
	// last modified the object.
	UserModificationTimestamp *types.Timestamp `protobuf:"bytes,25,opt,name=user_modification_timestamp,json=userModificationTimestamp,proto3" json:"user_modification_timestamp,omitempty"`
	// site_to_site_tunnel_ip
	//
	// x-displayName: "Site To Site Tunnel IP"
	// x-example: "10.1.1.1"
	// Optional, VIP in the site_to_site_network_type configured above used for terminating IPSec/SSL tunnels created with SiteMeshGroup.
	SiteToSiteTunnelIp string `protobuf:"bytes,29,opt,name=site_to_site_tunnel_ip,json=siteToSiteTunnelIp,proto3" json:"site_to_site_tunnel_ip,omitempty"` // Deprecated: Do not use.
	// Blocked Services on Site
	//
	// x-displayName: "Services to be blocked on site"
	// x-required
	// By default webui, ssh and dns are all blocked, you can choose other options to unblock.
	//
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*GlobalSpecType_DefaultBlockedServices
	//	*GlobalSpecType_BlockAllServices
	//	*GlobalSpecType_BlockedServices
	BlockedServicesChoice isGlobalSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	// Private Connectivity To Site
	//
	// x-displayName: "Private Connectivity To Site"
	// x-required
	// Select Private Connectivity To Site
	//
	// Types that are valid to be assigned to DirectConnectChoice:
	//	*GlobalSpecType_DirectConnectDisabled
	//	*GlobalSpecType_DirectConnectEnabled
	//	*GlobalSpecType_PrivateConnectivity
	DirectConnectChoice isGlobalSpecType_DirectConnectChoice `protobuf_oneof:"direct_connect_choice"`
	// Offline Survivability Mode
	//
	// x-displayName: "Offline Survivability Mode"
	// Enable/Disable offline survivability mode
	OfflineSurvivabilityMode *views.OfflineSurvivabilityModeType `protobuf:"bytes,39,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	// Advertise VIPs to Internet
	//
	// x-displayName: "Advertise VIPs to Internet on Site"
	// x-required
	// Manage Advertising VIP to Internet on Site
	//
	// Types that are valid to be assigned to InternetVipChoice:
	//	*GlobalSpecType_DisableInternetVip
	//	*GlobalSpecType_EnableInternetVip
	InternetVipChoice isGlobalSpecType_InternetVipChoice `protobuf_oneof:"internet_vip_choice"`
	// Cloud Egress Gateway Selection
	//
	// x-displayName: "Cloud Egress Gateway Selection"
	// x-required
	// Select the egress cloud gateway that will handle the node traffic to the internet. This configuration determines the path your data will take.
	//
	// Types that are valid to be assigned to EgressGatewayChoice:
	//	*GlobalSpecType_EgressGatewayDefault
	//	*GlobalSpecType_EgressNatGw
	//	*GlobalSpecType_EgressVirtualPrivateGateway
	EgressGatewayChoice isGlobalSpecType_EgressGatewayChoice `protobuf_oneof:"egress_gateway_choice"`
	// suggested_action
	//
	// x-displayName: "Suggested Action"
	// x-example: "value"
	// Suggested action for customer on error
	SuggestedAction string `protobuf:"bytes,49,opt,name=suggested_action,json=suggestedAction,proto3" json:"suggested_action,omitempty"`
	// error_description
	//
	// x-displayName: "Error Description"
	// x-example: "value"
	// Description of error on site
	ErrorDescription string `protobuf:"bytes,50,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	// Security Group
	//
	// x-displayName: "Security Group"
	// x-required
	// Select the security group for slo and sli interfaces.
	//
	// Types that are valid to be assigned to SecurityGroupChoice:
	//	*GlobalSpecType_F5XcSecurityGroup
	//	*GlobalSpecType_CustomSecurityGroup
	SecurityGroupChoice isGlobalSpecType_SecurityGroupChoice `protobuf_oneof:"security_group_choice"`
	// site_errors
	//
	// x-displayName: "Site Errors"
	// x-example: "Site Errors"
	// Errors on site including suggested action
	SiteErrors []*views.SiteError `protobuf:"bytes,55,rep,name=site_errors,json=siteErrors,proto3" json:"site_errors,omitempty"`
	// validation_state
	//
	// x-displayName: "Validation State"
	// x-example: "Validation State"
	// Validation State of the Site
	ValidationState views.ConfigValidationState `protobuf:"varint,56,opt,name=validation_state,json=validationState,proto3,enum=ves.io.schema.views.ConfigValidationState" json:"validation_state,omitempty"`
	// custom_dns
	//
	// x-displayName: "Custom DNS"
	// custom dns configure to the CE site
	CustomDns *views.CustomDNS `protobuf:"bytes,57,opt,name=custom_dns,json=customDns,proto3" json:"custom_dns,omitempty"`
	// Reference to terraform parameters
	//
	// x-displayName: "Terraform Parameters"
	// Reference to view internal object
	TfParams *views.ObjectRefType `protobuf:"bytes,999,opt,name=tf_params,json=tfParams,proto3" json:"tf_params,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// AWS VPC Site Info
	//
	// x-displayName: "AWS VPC Site Info"
	// AWS VPC Site information obtained after creating the site
	CloudSiteInfo *AWSVPCSiteInfoType `protobuf:"bytes,1001,opt,name=cloud_site_info,json=cloudSiteInfo,proto3" json:"cloud_site_info,omitempty"`
	// Direct Connect information
	//
	// x-displayName: "Direct Connect Information"
	// Direct Connect information obtained after creating the site and TGW
	DirectConnectInfo *views.DirectConnectInfo `protobuf:"bytes,1002,opt,name=direct_connect_info,json=directConnectInfo,proto3" json:"direct_connect_info,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea70a88e595e3c7c, []int{7}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_SiteType interface {
	isGlobalSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_Deployment interface {
	isGlobalSpecType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_WorkerNodes interface {
	isGlobalSpecType_WorkerNodes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_LogsReceiverChoice interface {
	isGlobalSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_BlockedServicesChoice interface {
	isGlobalSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_DirectConnectChoice interface {
	isGlobalSpecType_DirectConnectChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_InternetVipChoice interface {
	isGlobalSpecType_InternetVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_EgressGatewayChoice interface {
	isGlobalSpecType_EgressGatewayChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_SecurityGroupChoice interface {
	isGlobalSpecType_SecurityGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_IngressGw struct {
	IngressGw *AWSVPCIngressGwType `protobuf:"bytes,2,opt,name=ingress_gw,json=ingressGw,proto3,oneof" json:"ingress_gw,omitempty"`
}
type GlobalSpecType_IngressEgressGw struct {
	IngressEgressGw *AWSVPCIngressEgressGwType `protobuf:"bytes,3,opt,name=ingress_egress_gw,json=ingressEgressGw,proto3,oneof" json:"ingress_egress_gw,omitempty"`
}
type GlobalSpecType_VoltstackCluster struct {
	VoltstackCluster *AWSVPCVoltstackClusterType `protobuf:"bytes,16,opt,name=voltstack_cluster,json=voltstackCluster,proto3,oneof" json:"voltstack_cluster,omitempty"`
}
type GlobalSpecType_AwsCred struct {
	AwsCred *views.ObjectRefType `protobuf:"bytes,4,opt,name=aws_cred,json=awsCred,proto3,oneof" json:"aws_cred,omitempty"`
}
type GlobalSpecType_Assisted struct {
	Assisted *schema.Empty `protobuf:"bytes,5,opt,name=assisted,proto3,oneof" json:"assisted,omitempty"`
}
type GlobalSpecType_NodesPerAz struct {
	NodesPerAz uint32 `protobuf:"varint,14,opt,name=nodes_per_az,json=nodesPerAz,proto3,oneof" json:"nodes_per_az,omitempty"`
}
type GlobalSpecType_TotalNodes struct {
	TotalNodes uint32 `protobuf:"varint,27,opt,name=total_nodes,json=totalNodes,proto3,oneof" json:"total_nodes,omitempty"`
}
type GlobalSpecType_NoWorkerNodes struct {
	NoWorkerNodes *schema.Empty `protobuf:"bytes,28,opt,name=no_worker_nodes,json=noWorkerNodes,proto3,oneof" json:"no_worker_nodes,omitempty"`
}
type GlobalSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,20,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type GlobalSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,21,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type GlobalSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,32,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type GlobalSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,45,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type GlobalSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,38,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}
type GlobalSpecType_DirectConnectDisabled struct {
	DirectConnectDisabled *schema.Empty `protobuf:"bytes,35,opt,name=direct_connect_disabled,json=directConnectDisabled,proto3,oneof" json:"direct_connect_disabled,omitempty"`
}
type GlobalSpecType_DirectConnectEnabled struct {
	DirectConnectEnabled *views.DirectConnectConfigType `protobuf:"bytes,36,opt,name=direct_connect_enabled,json=directConnectEnabled,proto3,oneof" json:"direct_connect_enabled,omitempty"`
}
type GlobalSpecType_PrivateConnectivity struct {
	PrivateConnectivity *views.PrivateConnectConfigType `protobuf:"bytes,54,opt,name=private_connectivity,json=privateConnectivity,proto3,oneof" json:"private_connectivity,omitempty"`
}
type GlobalSpecType_DisableInternetVip struct {
	DisableInternetVip *schema.Empty `protobuf:"bytes,42,opt,name=disable_internet_vip,json=disableInternetVip,proto3,oneof" json:"disable_internet_vip,omitempty"`
}
type GlobalSpecType_EnableInternetVip struct {
	EnableInternetVip *schema.Empty `protobuf:"bytes,43,opt,name=enable_internet_vip,json=enableInternetVip,proto3,oneof" json:"enable_internet_vip,omitempty"`
}
type GlobalSpecType_EgressGatewayDefault struct {
	EgressGatewayDefault *schema.Empty `protobuf:"bytes,46,opt,name=egress_gateway_default,json=egressGatewayDefault,proto3,oneof" json:"egress_gateway_default,omitempty"`
}
type GlobalSpecType_EgressNatGw struct {
	EgressNatGw *views.AWSNATGatewaychoiceType `protobuf:"bytes,47,opt,name=egress_nat_gw,json=egressNatGw,proto3,oneof" json:"egress_nat_gw,omitempty"`
}
type GlobalSpecType_EgressVirtualPrivateGateway struct {
	EgressVirtualPrivateGateway *views.AWSVirtualPrivateGatewaychoiceType `protobuf:"bytes,48,opt,name=egress_virtual_private_gateway,json=egressVirtualPrivateGateway,proto3,oneof" json:"egress_virtual_private_gateway,omitempty"`
}
type GlobalSpecType_F5XcSecurityGroup struct {
	F5XcSecurityGroup *schema.Empty `protobuf:"bytes,52,opt,name=f5xc_security_group,json=f5xcSecurityGroup,proto3,oneof" json:"f5xc_security_group,omitempty"`
}
type GlobalSpecType_CustomSecurityGroup struct {
	CustomSecurityGroup *views.SecurityGroupType `protobuf:"bytes,53,opt,name=custom_security_group,json=customSecurityGroup,proto3,oneof" json:"custom_security_group,omitempty"`
}

func (*GlobalSpecType_IngressGw) isGlobalSpecType_SiteType()                              {}
func (*GlobalSpecType_IngressEgressGw) isGlobalSpecType_SiteType()                        {}
func (*GlobalSpecType_VoltstackCluster) isGlobalSpecType_SiteType()                       {}
func (*GlobalSpecType_AwsCred) isGlobalSpecType_Deployment()                              {}
func (*GlobalSpecType_Assisted) isGlobalSpecType_Deployment()                             {}
func (*GlobalSpecType_NodesPerAz) isGlobalSpecType_WorkerNodes()                          {}
func (*GlobalSpecType_TotalNodes) isGlobalSpecType_WorkerNodes()                          {}
func (*GlobalSpecType_NoWorkerNodes) isGlobalSpecType_WorkerNodes()                       {}
func (*GlobalSpecType_LogsStreamingDisabled) isGlobalSpecType_LogsReceiverChoice()        {}
func (*GlobalSpecType_LogReceiver) isGlobalSpecType_LogsReceiverChoice()                  {}
func (*GlobalSpecType_DefaultBlockedServices) isGlobalSpecType_BlockedServicesChoice()    {}
func (*GlobalSpecType_BlockAllServices) isGlobalSpecType_BlockedServicesChoice()          {}
func (*GlobalSpecType_BlockedServices) isGlobalSpecType_BlockedServicesChoice()           {}
func (*GlobalSpecType_DirectConnectDisabled) isGlobalSpecType_DirectConnectChoice()       {}
func (*GlobalSpecType_DirectConnectEnabled) isGlobalSpecType_DirectConnectChoice()        {}
func (*GlobalSpecType_PrivateConnectivity) isGlobalSpecType_DirectConnectChoice()         {}
func (*GlobalSpecType_DisableInternetVip) isGlobalSpecType_InternetVipChoice()            {}
func (*GlobalSpecType_EnableInternetVip) isGlobalSpecType_InternetVipChoice()             {}
func (*GlobalSpecType_EgressGatewayDefault) isGlobalSpecType_EgressGatewayChoice()        {}
func (*GlobalSpecType_EgressNatGw) isGlobalSpecType_EgressGatewayChoice()                 {}
func (*GlobalSpecType_EgressVirtualPrivateGateway) isGlobalSpecType_EgressGatewayChoice() {}
func (*GlobalSpecType_F5XcSecurityGroup) isGlobalSpecType_SecurityGroupChoice()           {}
func (*GlobalSpecType_CustomSecurityGroup) isGlobalSpecType_SecurityGroupChoice()         {}

func (m *GlobalSpecType) GetSiteType() isGlobalSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *GlobalSpecType) GetDeployment() isGlobalSpecType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}
func (m *GlobalSpecType) GetWorkerNodes() isGlobalSpecType_WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}
func (m *GlobalSpecType) GetLogsReceiverChoice() isGlobalSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GlobalSpecType) GetBlockedServicesChoice() isGlobalSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}
func (m *GlobalSpecType) GetDirectConnectChoice() isGlobalSpecType_DirectConnectChoice {
	if m != nil {
		return m.DirectConnectChoice
	}
	return nil
}
func (m *GlobalSpecType) GetInternetVipChoice() isGlobalSpecType_InternetVipChoice {
	if m != nil {
		return m.InternetVipChoice
	}
	return nil
}
func (m *GlobalSpecType) GetEgressGatewayChoice() isGlobalSpecType_EgressGatewayChoice {
	if m != nil {
		return m.EgressGatewayChoice
	}
	return nil
}
func (m *GlobalSpecType) GetSecurityGroupChoice() isGlobalSpecType_SecurityGroupChoice {
	if m != nil {
		return m.SecurityGroupChoice
	}
	return nil
}

func (m *GlobalSpecType) GetVpc() *views.AWSVPCchoiceType {
	if m != nil {
		return m.Vpc
	}
	return nil
}

func (m *GlobalSpecType) GetIngressGw() *AWSVPCIngressGwType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *GlobalSpecType) GetIngressEgressGw() *AWSVPCIngressEgressGwType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *GlobalSpecType) GetVoltstackCluster() *AWSVPCVoltstackClusterType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *GlobalSpecType) GetAwsCred() *views.ObjectRefType {
	if x, ok := m.GetDeployment().(*GlobalSpecType_AwsCred); ok {
		return x.AwsCred
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetAssisted() *schema.Empty {
	if x, ok := m.GetDeployment().(*GlobalSpecType_Assisted); ok {
		return x.Assisted
	}
	return nil
}

func (m *GlobalSpecType) GetInstanceType() string {
	if m != nil {
		return m.InstanceType
	}
	return ""
}

func (m *GlobalSpecType) GetNodesPerAz() uint32 {
	if x, ok := m.GetWorkerNodes().(*GlobalSpecType_NodesPerAz); ok {
		return x.NodesPerAz
	}
	return 0
}

func (m *GlobalSpecType) GetTotalNodes() uint32 {
	if x, ok := m.GetWorkerNodes().(*GlobalSpecType_TotalNodes); ok {
		return x.TotalNodes
	}
	return 0
}

func (m *GlobalSpecType) GetNoWorkerNodes() *schema.Empty {
	if x, ok := m.GetWorkerNodes().(*GlobalSpecType_NoWorkerNodes); ok {
		return x.NoWorkerNodes
	}
	return nil
}

func (m *GlobalSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GlobalSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GlobalSpecType) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

func (m *GlobalSpecType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *GlobalSpecType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *GlobalSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GlobalSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GlobalSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GlobalSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GlobalSpecType) GetSw() *views.VolterraSoftwareType {
	if m != nil {
		return m.Sw
	}
	return nil
}

func (m *GlobalSpecType) GetOs() *views.OperatingSystemType {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *GlobalSpecType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *GlobalSpecType) GetVipParamsPerAz() []*site.PublishVIPParamsPerAz {
	if m != nil {
		return m.VipParamsPerAz
	}
	return nil
}

func (m *GlobalSpecType) GetUserModificationTimestamp() *types.Timestamp {
	if m != nil {
		return m.UserModificationTimestamp
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetSiteToSiteTunnelIp() string {
	if m != nil {
		return m.SiteToSiteTunnelIp
	}
	return ""
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *GlobalSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *GlobalSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *GlobalSpecType) GetDirectConnectDisabled() *schema.Empty {
	if x, ok := m.GetDirectConnectChoice().(*GlobalSpecType_DirectConnectDisabled); ok {
		return x.DirectConnectDisabled
	}
	return nil
}

func (m *GlobalSpecType) GetDirectConnectEnabled() *views.DirectConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*GlobalSpecType_DirectConnectEnabled); ok {
		return x.DirectConnectEnabled
	}
	return nil
}

func (m *GlobalSpecType) GetPrivateConnectivity() *views.PrivateConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*GlobalSpecType_PrivateConnectivity); ok {
		return x.PrivateConnectivity
	}
	return nil
}

func (m *GlobalSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *GlobalSpecType) GetDisableInternetVip() *schema.Empty {
	if x, ok := m.GetInternetVipChoice().(*GlobalSpecType_DisableInternetVip); ok {
		return x.DisableInternetVip
	}
	return nil
}

func (m *GlobalSpecType) GetEnableInternetVip() *schema.Empty {
	if x, ok := m.GetInternetVipChoice().(*GlobalSpecType_EnableInternetVip); ok {
		return x.EnableInternetVip
	}
	return nil
}

func (m *GlobalSpecType) GetEgressGatewayDefault() *schema.Empty {
	if x, ok := m.GetEgressGatewayChoice().(*GlobalSpecType_EgressGatewayDefault); ok {
		return x.EgressGatewayDefault
	}
	return nil
}

func (m *GlobalSpecType) GetEgressNatGw() *views.AWSNATGatewaychoiceType {
	if x, ok := m.GetEgressGatewayChoice().(*GlobalSpecType_EgressNatGw); ok {
		return x.EgressNatGw
	}
	return nil
}

func (m *GlobalSpecType) GetEgressVirtualPrivateGateway() *views.AWSVirtualPrivateGatewaychoiceType {
	if x, ok := m.GetEgressGatewayChoice().(*GlobalSpecType_EgressVirtualPrivateGateway); ok {
		return x.EgressVirtualPrivateGateway
	}
	return nil
}

func (m *GlobalSpecType) GetSuggestedAction() string {
	if m != nil {
		return m.SuggestedAction
	}
	return ""
}

func (m *GlobalSpecType) GetErrorDescription() string {
	if m != nil {
		return m.ErrorDescription
	}
	return ""
}

func (m *GlobalSpecType) GetF5XcSecurityGroup() *schema.Empty {
	if x, ok := m.GetSecurityGroupChoice().(*GlobalSpecType_F5XcSecurityGroup); ok {
		return x.F5XcSecurityGroup
	}
	return nil
}

func (m *GlobalSpecType) GetCustomSecurityGroup() *views.SecurityGroupType {
	if x, ok := m.GetSecurityGroupChoice().(*GlobalSpecType_CustomSecurityGroup); ok {
		return x.CustomSecurityGroup
	}
	return nil
}

func (m *GlobalSpecType) GetSiteErrors() []*views.SiteError {
	if m != nil {
		return m.SiteErrors
	}
	return nil
}

func (m *GlobalSpecType) GetValidationState() views.ConfigValidationState {
	if m != nil {
		return m.ValidationState
	}
	return views.VALIDATION_STATE_NONE
}

func (m *GlobalSpecType) GetCustomDns() *views.CustomDNS {
	if m != nil {
		return m.CustomDns
	}
	return nil
}

func (m *GlobalSpecType) GetTfParams() *views.ObjectRefType {
	if m != nil {
		return m.TfParams
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetCloudSiteInfo() *AWSVPCSiteInfoType {
	if m != nil {
		return m.CloudSiteInfo
	}
	return nil
}

func (m *GlobalSpecType) GetDirectConnectInfo() *views.DirectConnectInfo {
	if m != nil {
		return m.DirectConnectInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_IngressGw)(nil),
		(*GlobalSpecType_IngressEgressGw)(nil),
		(*GlobalSpecType_VoltstackCluster)(nil),
		(*GlobalSpecType_AwsCred)(nil),
		(*GlobalSpecType_Assisted)(nil),
		(*GlobalSpecType_NodesPerAz)(nil),
		(*GlobalSpecType_TotalNodes)(nil),
		(*GlobalSpecType_NoWorkerNodes)(nil),
		(*GlobalSpecType_LogsStreamingDisabled)(nil),
		(*GlobalSpecType_LogReceiver)(nil),
		(*GlobalSpecType_DefaultBlockedServices)(nil),
		(*GlobalSpecType_BlockAllServices)(nil),
		(*GlobalSpecType_BlockedServices)(nil),
		(*GlobalSpecType_DirectConnectDisabled)(nil),
		(*GlobalSpecType_DirectConnectEnabled)(nil),
		(*GlobalSpecType_PrivateConnectivity)(nil),
		(*GlobalSpecType_DisableInternetVip)(nil),
		(*GlobalSpecType_EnableInternetVip)(nil),
		(*GlobalSpecType_EgressGatewayDefault)(nil),
		(*GlobalSpecType_EgressNatGw)(nil),
		(*GlobalSpecType_EgressVirtualPrivateGateway)(nil),
		(*GlobalSpecType_F5XcSecurityGroup)(nil),
		(*GlobalSpecType_CustomSecurityGroup)(nil),
	}
}

// CreateSpecType
//
// x-displayName: "Create AWS VPC site"
// Shape of the AWS VPC site specification
type CreateSpecType struct {
	Vpc *views.AWSVPCchoiceType `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
	// Types that are valid to be assigned to SiteType:
	//	*CreateSpecType_IngressGw
	//	*CreateSpecType_IngressEgressGw
	//	*CreateSpecType_VoltstackCluster
	SiteType isCreateSpecType_SiteType `protobuf_oneof:"site_type"`
	// Types that are valid to be assigned to Deployment:
	//	*CreateSpecType_AwsCred
	Deployment   isCreateSpecType_Deployment `protobuf_oneof:"deployment"`
	InstanceType string                      `protobuf:"bytes,6,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	DiskSize     uint32                      `protobuf:"varint,15,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	AwsRegion    string                      `protobuf:"bytes,12,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	SshKey       string                      `protobuf:"bytes,13,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	Address      string                      `protobuf:"bytes,17,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates  *site.Coordinates           `protobuf:"bytes,18,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*CreateSpecType_LogsStreamingDisabled
	//	*CreateSpecType_LogReceiver
	LogsReceiverChoice isCreateSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// F5XC Software
	//
	// x-displayName: "F5XC Software"
	// F5XC Software Details
	Sw *views.VolterraSoftwareType `protobuf:"bytes,22,opt,name=sw,proto3" json:"sw,omitempty"`
	// Operating System
	//
	// x-displayName: "Operating System"
	// Operating System Details
	Os   *views.OperatingSystemType `protobuf:"bytes,23,opt,name=os,proto3" json:"os,omitempty"`
	Tags map[string]string          `protobuf:"bytes,30,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are valid to be assigned to WorkerNodes:
	//	*CreateSpecType_NodesPerAz
	//	*CreateSpecType_TotalNodes
	//	*CreateSpecType_NoWorkerNodes
	WorkerNodes isCreateSpecType_WorkerNodes `protobuf_oneof:"worker_nodes"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*CreateSpecType_DefaultBlockedServices
	//	*CreateSpecType_BlockAllServices
	//	*CreateSpecType_BlockedServices
	BlockedServicesChoice isCreateSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	// Types that are valid to be assigned to DirectConnectChoice:
	//	*CreateSpecType_DirectConnectDisabled
	//	*CreateSpecType_DirectConnectEnabled
	//	*CreateSpecType_PrivateConnectivity
	DirectConnectChoice      isCreateSpecType_DirectConnectChoice `protobuf_oneof:"direct_connect_choice"`
	OfflineSurvivabilityMode *views.OfflineSurvivabilityModeType  `protobuf:"bytes,39,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	// Types that are valid to be assigned to InternetVipChoice:
	//	*CreateSpecType_DisableInternetVip
	//	*CreateSpecType_EnableInternetVip
	InternetVipChoice isCreateSpecType_InternetVipChoice `protobuf_oneof:"internet_vip_choice"`
	// Types that are valid to be assigned to EgressGatewayChoice:
	//	*CreateSpecType_EgressGatewayDefault
	//	*CreateSpecType_EgressNatGw
	//	*CreateSpecType_EgressVirtualPrivateGateway
	EgressGatewayChoice isCreateSpecType_EgressGatewayChoice `protobuf_oneof:"egress_gateway_choice"`
	// Types that are valid to be assigned to SecurityGroupChoice:
	//	*CreateSpecType_F5XcSecurityGroup
	//	*CreateSpecType_CustomSecurityGroup
	SecurityGroupChoice isCreateSpecType_SecurityGroupChoice `protobuf_oneof:"security_group_choice"`
	// custom_dns
	//
	// x-displayName: "Custom DNS"
	// custom dns configure to the CE site
	CustomDns *views.CustomDNS `protobuf:"bytes,57,opt,name=custom_dns,json=customDns,proto3" json:"custom_dns,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea70a88e595e3c7c, []int{8}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_SiteType interface {
	isCreateSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_Deployment interface {
	isCreateSpecType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_LogsReceiverChoice interface {
	isCreateSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_WorkerNodes interface {
	isCreateSpecType_WorkerNodes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_BlockedServicesChoice interface {
	isCreateSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_DirectConnectChoice interface {
	isCreateSpecType_DirectConnectChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_InternetVipChoice interface {
	isCreateSpecType_InternetVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_EgressGatewayChoice interface {
	isCreateSpecType_EgressGatewayChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_SecurityGroupChoice interface {
	isCreateSpecType_SecurityGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_IngressGw struct {
	IngressGw *AWSVPCIngressGwType `protobuf:"bytes,2,opt,name=ingress_gw,json=ingressGw,proto3,oneof" json:"ingress_gw,omitempty"`
}
type CreateSpecType_IngressEgressGw struct {
	IngressEgressGw *AWSVPCIngressEgressGwType `protobuf:"bytes,3,opt,name=ingress_egress_gw,json=ingressEgressGw,proto3,oneof" json:"ingress_egress_gw,omitempty"`
}
type CreateSpecType_VoltstackCluster struct {
	VoltstackCluster *AWSVPCVoltstackClusterType `protobuf:"bytes,16,opt,name=voltstack_cluster,json=voltstackCluster,proto3,oneof" json:"voltstack_cluster,omitempty"`
}
type CreateSpecType_AwsCred struct {
	AwsCred *views.ObjectRefType `protobuf:"bytes,4,opt,name=aws_cred,json=awsCred,proto3,oneof" json:"aws_cred,omitempty"`
}
type CreateSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,20,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type CreateSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,21,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type CreateSpecType_NodesPerAz struct {
	NodesPerAz uint32 `protobuf:"varint,14,opt,name=nodes_per_az,json=nodesPerAz,proto3,oneof" json:"nodes_per_az,omitempty"`
}
type CreateSpecType_TotalNodes struct {
	TotalNodes uint32 `protobuf:"varint,27,opt,name=total_nodes,json=totalNodes,proto3,oneof" json:"total_nodes,omitempty"`
}
type CreateSpecType_NoWorkerNodes struct {
	NoWorkerNodes *schema.Empty `protobuf:"bytes,28,opt,name=no_worker_nodes,json=noWorkerNodes,proto3,oneof" json:"no_worker_nodes,omitempty"`
}
type CreateSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,32,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type CreateSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,45,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type CreateSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,38,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}
type CreateSpecType_DirectConnectDisabled struct {
	DirectConnectDisabled *schema.Empty `protobuf:"bytes,35,opt,name=direct_connect_disabled,json=directConnectDisabled,proto3,oneof" json:"direct_connect_disabled,omitempty"`
}
type CreateSpecType_DirectConnectEnabled struct {
	DirectConnectEnabled *views.DirectConnectConfigType `protobuf:"bytes,36,opt,name=direct_connect_enabled,json=directConnectEnabled,proto3,oneof" json:"direct_connect_enabled,omitempty"`
}
type CreateSpecType_PrivateConnectivity struct {
	PrivateConnectivity *views.PrivateConnectConfigType `protobuf:"bytes,54,opt,name=private_connectivity,json=privateConnectivity,proto3,oneof" json:"private_connectivity,omitempty"`
}
type CreateSpecType_DisableInternetVip struct {
	DisableInternetVip *schema.Empty `protobuf:"bytes,42,opt,name=disable_internet_vip,json=disableInternetVip,proto3,oneof" json:"disable_internet_vip,omitempty"`
}
type CreateSpecType_EnableInternetVip struct {
	EnableInternetVip *schema.Empty `protobuf:"bytes,43,opt,name=enable_internet_vip,json=enableInternetVip,proto3,oneof" json:"enable_internet_vip,omitempty"`
}
type CreateSpecType_EgressGatewayDefault struct {
	EgressGatewayDefault *schema.Empty `protobuf:"bytes,46,opt,name=egress_gateway_default,json=egressGatewayDefault,proto3,oneof" json:"egress_gateway_default,omitempty"`
}
type CreateSpecType_EgressNatGw struct {
	EgressNatGw *views.AWSNATGatewaychoiceType `protobuf:"bytes,47,opt,name=egress_nat_gw,json=egressNatGw,proto3,oneof" json:"egress_nat_gw,omitempty"`
}
type CreateSpecType_EgressVirtualPrivateGateway struct {
	EgressVirtualPrivateGateway *views.AWSVirtualPrivateGatewaychoiceType `protobuf:"bytes,48,opt,name=egress_virtual_private_gateway,json=egressVirtualPrivateGateway,proto3,oneof" json:"egress_virtual_private_gateway,omitempty"`
}
type CreateSpecType_F5XcSecurityGroup struct {
	F5XcSecurityGroup *schema.Empty `protobuf:"bytes,52,opt,name=f5xc_security_group,json=f5xcSecurityGroup,proto3,oneof" json:"f5xc_security_group,omitempty"`
}
type CreateSpecType_CustomSecurityGroup struct {
	CustomSecurityGroup *views.SecurityGroupType `protobuf:"bytes,53,opt,name=custom_security_group,json=customSecurityGroup,proto3,oneof" json:"custom_security_group,omitempty"`
}

func (*CreateSpecType_IngressGw) isCreateSpecType_SiteType()                              {}
func (*CreateSpecType_IngressEgressGw) isCreateSpecType_SiteType()                        {}
func (*CreateSpecType_VoltstackCluster) isCreateSpecType_SiteType()                       {}
func (*CreateSpecType_AwsCred) isCreateSpecType_Deployment()                              {}
func (*CreateSpecType_LogsStreamingDisabled) isCreateSpecType_LogsReceiverChoice()        {}
func (*CreateSpecType_LogReceiver) isCreateSpecType_LogsReceiverChoice()                  {}
func (*CreateSpecType_NodesPerAz) isCreateSpecType_WorkerNodes()                          {}
func (*CreateSpecType_TotalNodes) isCreateSpecType_WorkerNodes()                          {}
func (*CreateSpecType_NoWorkerNodes) isCreateSpecType_WorkerNodes()                       {}
func (*CreateSpecType_DefaultBlockedServices) isCreateSpecType_BlockedServicesChoice()    {}
func (*CreateSpecType_BlockAllServices) isCreateSpecType_BlockedServicesChoice()          {}
func (*CreateSpecType_BlockedServices) isCreateSpecType_BlockedServicesChoice()           {}
func (*CreateSpecType_DirectConnectDisabled) isCreateSpecType_DirectConnectChoice()       {}
func (*CreateSpecType_DirectConnectEnabled) isCreateSpecType_DirectConnectChoice()        {}
func (*CreateSpecType_PrivateConnectivity) isCreateSpecType_DirectConnectChoice()         {}
func (*CreateSpecType_DisableInternetVip) isCreateSpecType_InternetVipChoice()            {}
func (*CreateSpecType_EnableInternetVip) isCreateSpecType_InternetVipChoice()             {}
func (*CreateSpecType_EgressGatewayDefault) isCreateSpecType_EgressGatewayChoice()        {}
func (*CreateSpecType_EgressNatGw) isCreateSpecType_EgressGatewayChoice()                 {}
func (*CreateSpecType_EgressVirtualPrivateGateway) isCreateSpecType_EgressGatewayChoice() {}
func (*CreateSpecType_F5XcSecurityGroup) isCreateSpecType_SecurityGroupChoice()           {}
func (*CreateSpecType_CustomSecurityGroup) isCreateSpecType_SecurityGroupChoice()         {}

func (m *CreateSpecType) GetSiteType() isCreateSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *CreateSpecType) GetDeployment() isCreateSpecType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}
func (m *CreateSpecType) GetLogsReceiverChoice() isCreateSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *CreateSpecType) GetWorkerNodes() isCreateSpecType_WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}
func (m *CreateSpecType) GetBlockedServicesChoice() isCreateSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}
func (m *CreateSpecType) GetDirectConnectChoice() isCreateSpecType_DirectConnectChoice {
	if m != nil {
		return m.DirectConnectChoice
	}
	return nil
}
func (m *CreateSpecType) GetInternetVipChoice() isCreateSpecType_InternetVipChoice {
	if m != nil {
		return m.InternetVipChoice
	}
	return nil
}
func (m *CreateSpecType) GetEgressGatewayChoice() isCreateSpecType_EgressGatewayChoice {
	if m != nil {
		return m.EgressGatewayChoice
	}
	return nil
}
func (m *CreateSpecType) GetSecurityGroupChoice() isCreateSpecType_SecurityGroupChoice {
	if m != nil {
		return m.SecurityGroupChoice
	}
	return nil
}

func (m *CreateSpecType) GetVpc() *views.AWSVPCchoiceType {
	if m != nil {
		return m.Vpc
	}
	return nil
}

func (m *CreateSpecType) GetIngressGw() *AWSVPCIngressGwType {
	if x, ok := m.GetSiteType().(*CreateSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *CreateSpecType) GetIngressEgressGw() *AWSVPCIngressEgressGwType {
	if x, ok := m.GetSiteType().(*CreateSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *CreateSpecType) GetVoltstackCluster() *AWSVPCVoltstackClusterType {
	if x, ok := m.GetSiteType().(*CreateSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *CreateSpecType) GetAwsCred() *views.ObjectRefType {
	if x, ok := m.GetDeployment().(*CreateSpecType_AwsCred); ok {
		return x.AwsCred
	}
	return nil
}

func (m *CreateSpecType) GetInstanceType() string {
	if m != nil {
		return m.InstanceType
	}
	return ""
}

func (m *CreateSpecType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *CreateSpecType) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

func (m *CreateSpecType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *CreateSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *CreateSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *CreateSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *CreateSpecType) GetSw() *views.VolterraSoftwareType {
	if m != nil {
		return m.Sw
	}
	return nil
}

func (m *CreateSpecType) GetOs() *views.OperatingSystemType {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *CreateSpecType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CreateSpecType) GetNodesPerAz() uint32 {
	if x, ok := m.GetWorkerNodes().(*CreateSpecType_NodesPerAz); ok {
		return x.NodesPerAz
	}
	return 0
}

func (m *CreateSpecType) GetTotalNodes() uint32 {
	if x, ok := m.GetWorkerNodes().(*CreateSpecType_TotalNodes); ok {
		return x.TotalNodes
	}
	return 0
}

func (m *CreateSpecType) GetNoWorkerNodes() *schema.Empty {
	if x, ok := m.GetWorkerNodes().(*CreateSpecType_NoWorkerNodes); ok {
		return x.NoWorkerNodes
	}
	return nil
}

func (m *CreateSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *CreateSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *CreateSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *CreateSpecType) GetDirectConnectDisabled() *schema.Empty {
	if x, ok := m.GetDirectConnectChoice().(*CreateSpecType_DirectConnectDisabled); ok {
		return x.DirectConnectDisabled
	}
	return nil
}

func (m *CreateSpecType) GetDirectConnectEnabled() *views.DirectConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*CreateSpecType_DirectConnectEnabled); ok {
		return x.DirectConnectEnabled
	}
	return nil
}

func (m *CreateSpecType) GetPrivateConnectivity() *views.PrivateConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*CreateSpecType_PrivateConnectivity); ok {
		return x.PrivateConnectivity
	}
	return nil
}

func (m *CreateSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *CreateSpecType) GetDisableInternetVip() *schema.Empty {
	if x, ok := m.GetInternetVipChoice().(*CreateSpecType_DisableInternetVip); ok {
		return x.DisableInternetVip
	}
	return nil
}

func (m *CreateSpecType) GetEnableInternetVip() *schema.Empty {
	if x, ok := m.GetInternetVipChoice().(*CreateSpecType_EnableInternetVip); ok {
		return x.EnableInternetVip
	}
	return nil
}

func (m *CreateSpecType) GetEgressGatewayDefault() *schema.Empty {
	if x, ok := m.GetEgressGatewayChoice().(*CreateSpecType_EgressGatewayDefault); ok {
		return x.EgressGatewayDefault
	}
	return nil
}

func (m *CreateSpecType) GetEgressNatGw() *views.AWSNATGatewaychoiceType {
	if x, ok := m.GetEgressGatewayChoice().(*CreateSpecType_EgressNatGw); ok {
		return x.EgressNatGw
	}
	return nil
}

func (m *CreateSpecType) GetEgressVirtualPrivateGateway() *views.AWSVirtualPrivateGatewaychoiceType {
	if x, ok := m.GetEgressGatewayChoice().(*CreateSpecType_EgressVirtualPrivateGateway); ok {
		return x.EgressVirtualPrivateGateway
	}
	return nil
}

func (m *CreateSpecType) GetF5XcSecurityGroup() *schema.Empty {
	if x, ok := m.GetSecurityGroupChoice().(*CreateSpecType_F5XcSecurityGroup); ok {
		return x.F5XcSecurityGroup
	}
	return nil
}

func (m *CreateSpecType) GetCustomSecurityGroup() *views.SecurityGroupType {
	if x, ok := m.GetSecurityGroupChoice().(*CreateSpecType_CustomSecurityGroup); ok {
		return x.CustomSecurityGroup
	}
	return nil
}

func (m *CreateSpecType) GetCustomDns() *views.CustomDNS {
	if m != nil {
		return m.CustomDns
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_IngressGw)(nil),
		(*CreateSpecType_IngressEgressGw)(nil),
		(*CreateSpecType_VoltstackCluster)(nil),
		(*CreateSpecType_AwsCred)(nil),
		(*CreateSpecType_LogsStreamingDisabled)(nil),
		(*CreateSpecType_LogReceiver)(nil),
		(*CreateSpecType_NodesPerAz)(nil),
		(*CreateSpecType_TotalNodes)(nil),
		(*CreateSpecType_NoWorkerNodes)(nil),
		(*CreateSpecType_DefaultBlockedServices)(nil),
		(*CreateSpecType_BlockAllServices)(nil),
		(*CreateSpecType_BlockedServices)(nil),
		(*CreateSpecType_DirectConnectDisabled)(nil),
		(*CreateSpecType_DirectConnectEnabled)(nil),
		(*CreateSpecType_PrivateConnectivity)(nil),
		(*CreateSpecType_DisableInternetVip)(nil),
		(*CreateSpecType_EnableInternetVip)(nil),
		(*CreateSpecType_EgressGatewayDefault)(nil),
		(*CreateSpecType_EgressNatGw)(nil),
		(*CreateSpecType_EgressVirtualPrivateGateway)(nil),
		(*CreateSpecType_F5XcSecurityGroup)(nil),
		(*CreateSpecType_CustomSecurityGroup)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace AWS VPC site"
// Shape of the AWS VPC site replace specification
type ReplaceSpecType struct {
	// Site Type
	//
	// x-displayName: "Edit Networking Config"
	// x-required
	// Site type ingress or ingress-egress gateway cannot be changed
	//
	// Types that are valid to be assigned to SiteType:
	//	*ReplaceSpecType_IngressGw
	//	*ReplaceSpecType_IngressEgressGw
	//	*ReplaceSpecType_VoltstackCluster
	SiteType isReplaceSpecType_SiteType `protobuf_oneof:"site_type"`
	// Types that are valid to be assigned to Deployment:
	//	*ReplaceSpecType_AwsCred
	Deployment  isReplaceSpecType_Deployment `protobuf_oneof:"deployment"`
	Address     string                       `protobuf:"bytes,17,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates *site.Coordinates            `protobuf:"bytes,18,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*ReplaceSpecType_LogsStreamingDisabled
	//	*ReplaceSpecType_LogReceiver
	LogsReceiverChoice isReplaceSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to WorkerNodes:
	//	*ReplaceSpecType_NodesPerAz
	//	*ReplaceSpecType_TotalNodes
	//	*ReplaceSpecType_NoWorkerNodes
	WorkerNodes isReplaceSpecType_WorkerNodes `protobuf_oneof:"worker_nodes"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*ReplaceSpecType_DefaultBlockedServices
	//	*ReplaceSpecType_BlockAllServices
	//	*ReplaceSpecType_BlockedServices
	BlockedServicesChoice isReplaceSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	// Types that are valid to be assigned to DirectConnectChoice:
	//	*ReplaceSpecType_DirectConnectDisabled
	//	*ReplaceSpecType_DirectConnectEnabled
	//	*ReplaceSpecType_PrivateConnectivity
	DirectConnectChoice      isReplaceSpecType_DirectConnectChoice `protobuf_oneof:"direct_connect_choice"`
	OfflineSurvivabilityMode *views.OfflineSurvivabilityModeType   `protobuf:"bytes,39,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	// Types that are valid to be assigned to InternetVipChoice:
	//	*ReplaceSpecType_DisableInternetVip
	//	*ReplaceSpecType_EnableInternetVip
	InternetVipChoice isReplaceSpecType_InternetVipChoice `protobuf_oneof:"internet_vip_choice"`
	// custom_dns
	//
	// x-displayName: "Custom DNS"
	// custom dns configure to the CE site
	CustomDns *views.CustomDNS `protobuf:"bytes,57,opt,name=custom_dns,json=customDns,proto3" json:"custom_dns,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea70a88e595e3c7c, []int{9}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_SiteType interface {
	isReplaceSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_Deployment interface {
	isReplaceSpecType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_LogsReceiverChoice interface {
	isReplaceSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_WorkerNodes interface {
	isReplaceSpecType_WorkerNodes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_BlockedServicesChoice interface {
	isReplaceSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_DirectConnectChoice interface {
	isReplaceSpecType_DirectConnectChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_InternetVipChoice interface {
	isReplaceSpecType_InternetVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_IngressGw struct {
	IngressGw *AWSVPCIngressGwReplaceType `protobuf:"bytes,2,opt,name=ingress_gw,json=ingressGw,proto3,oneof" json:"ingress_gw,omitempty"`
}
type ReplaceSpecType_IngressEgressGw struct {
	IngressEgressGw *AWSVPCIngressEgressGwReplaceType `protobuf:"bytes,3,opt,name=ingress_egress_gw,json=ingressEgressGw,proto3,oneof" json:"ingress_egress_gw,omitempty"`
}
type ReplaceSpecType_VoltstackCluster struct {
	VoltstackCluster *AWSVPCVoltstackClusterReplaceType `protobuf:"bytes,16,opt,name=voltstack_cluster,json=voltstackCluster,proto3,oneof" json:"voltstack_cluster,omitempty"`
}
type ReplaceSpecType_AwsCred struct {
	AwsCred *views.ObjectRefType `protobuf:"bytes,4,opt,name=aws_cred,json=awsCred,proto3,oneof" json:"aws_cred,omitempty"`
}
type ReplaceSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,20,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type ReplaceSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,21,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type ReplaceSpecType_NodesPerAz struct {
	NodesPerAz uint32 `protobuf:"varint,14,opt,name=nodes_per_az,json=nodesPerAz,proto3,oneof" json:"nodes_per_az,omitempty"`
}
type ReplaceSpecType_TotalNodes struct {
	TotalNodes uint32 `protobuf:"varint,27,opt,name=total_nodes,json=totalNodes,proto3,oneof" json:"total_nodes,omitempty"`
}
type ReplaceSpecType_NoWorkerNodes struct {
	NoWorkerNodes *schema.Empty `protobuf:"bytes,28,opt,name=no_worker_nodes,json=noWorkerNodes,proto3,oneof" json:"no_worker_nodes,omitempty"`
}
type ReplaceSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,32,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type ReplaceSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,45,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type ReplaceSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,38,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}
type ReplaceSpecType_DirectConnectDisabled struct {
	DirectConnectDisabled *schema.Empty `protobuf:"bytes,35,opt,name=direct_connect_disabled,json=directConnectDisabled,proto3,oneof" json:"direct_connect_disabled,omitempty"`
}
type ReplaceSpecType_DirectConnectEnabled struct {
	DirectConnectEnabled *views.DirectConnectConfigType `protobuf:"bytes,36,opt,name=direct_connect_enabled,json=directConnectEnabled,proto3,oneof" json:"direct_connect_enabled,omitempty"`
}
type ReplaceSpecType_PrivateConnectivity struct {
	PrivateConnectivity *views.PrivateConnectConfigType `protobuf:"bytes,54,opt,name=private_connectivity,json=privateConnectivity,proto3,oneof" json:"private_connectivity,omitempty"`
}
type ReplaceSpecType_DisableInternetVip struct {
	DisableInternetVip *schema.Empty `protobuf:"bytes,42,opt,name=disable_internet_vip,json=disableInternetVip,proto3,oneof" json:"disable_internet_vip,omitempty"`
}
type ReplaceSpecType_EnableInternetVip struct {
	EnableInternetVip *schema.Empty `protobuf:"bytes,43,opt,name=enable_internet_vip,json=enableInternetVip,proto3,oneof" json:"enable_internet_vip,omitempty"`
}

func (*ReplaceSpecType_IngressGw) isReplaceSpecType_SiteType()                           {}
func (*ReplaceSpecType_IngressEgressGw) isReplaceSpecType_SiteType()                     {}
func (*ReplaceSpecType_VoltstackCluster) isReplaceSpecType_SiteType()                    {}
func (*ReplaceSpecType_AwsCred) isReplaceSpecType_Deployment()                           {}
func (*ReplaceSpecType_LogsStreamingDisabled) isReplaceSpecType_LogsReceiverChoice()     {}
func (*ReplaceSpecType_LogReceiver) isReplaceSpecType_LogsReceiverChoice()               {}
func (*ReplaceSpecType_NodesPerAz) isReplaceSpecType_WorkerNodes()                       {}
func (*ReplaceSpecType_TotalNodes) isReplaceSpecType_WorkerNodes()                       {}
func (*ReplaceSpecType_NoWorkerNodes) isReplaceSpecType_WorkerNodes()                    {}
func (*ReplaceSpecType_DefaultBlockedServices) isReplaceSpecType_BlockedServicesChoice() {}
func (*ReplaceSpecType_BlockAllServices) isReplaceSpecType_BlockedServicesChoice()       {}
func (*ReplaceSpecType_BlockedServices) isReplaceSpecType_BlockedServicesChoice()        {}
func (*ReplaceSpecType_DirectConnectDisabled) isReplaceSpecType_DirectConnectChoice()    {}
func (*ReplaceSpecType_DirectConnectEnabled) isReplaceSpecType_DirectConnectChoice()     {}
func (*ReplaceSpecType_PrivateConnectivity) isReplaceSpecType_DirectConnectChoice()      {}
func (*ReplaceSpecType_DisableInternetVip) isReplaceSpecType_InternetVipChoice()         {}
func (*ReplaceSpecType_EnableInternetVip) isReplaceSpecType_InternetVipChoice()          {}

func (m *ReplaceSpecType) GetSiteType() isReplaceSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *ReplaceSpecType) GetDeployment() isReplaceSpecType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}
func (m *ReplaceSpecType) GetLogsReceiverChoice() isReplaceSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetWorkerNodes() isReplaceSpecType_WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}
func (m *ReplaceSpecType) GetBlockedServicesChoice() isReplaceSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetDirectConnectChoice() isReplaceSpecType_DirectConnectChoice {
	if m != nil {
		return m.DirectConnectChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetInternetVipChoice() isReplaceSpecType_InternetVipChoice {
	if m != nil {
		return m.InternetVipChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetIngressGw() *AWSVPCIngressGwReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *ReplaceSpecType) GetIngressEgressGw() *AWSVPCIngressEgressGwReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *ReplaceSpecType) GetVoltstackCluster() *AWSVPCVoltstackClusterReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *ReplaceSpecType) GetAwsCred() *views.ObjectRefType {
	if x, ok := m.GetDeployment().(*ReplaceSpecType_AwsCred); ok {
		return x.AwsCred
	}
	return nil
}

func (m *ReplaceSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReplaceSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *ReplaceSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *ReplaceSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *ReplaceSpecType) GetNodesPerAz() uint32 {
	if x, ok := m.GetWorkerNodes().(*ReplaceSpecType_NodesPerAz); ok {
		return x.NodesPerAz
	}
	return 0
}

func (m *ReplaceSpecType) GetTotalNodes() uint32 {
	if x, ok := m.GetWorkerNodes().(*ReplaceSpecType_TotalNodes); ok {
		return x.TotalNodes
	}
	return 0
}

func (m *ReplaceSpecType) GetNoWorkerNodes() *schema.Empty {
	if x, ok := m.GetWorkerNodes().(*ReplaceSpecType_NoWorkerNodes); ok {
		return x.NoWorkerNodes
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *ReplaceSpecType) GetDirectConnectDisabled() *schema.Empty {
	if x, ok := m.GetDirectConnectChoice().(*ReplaceSpecType_DirectConnectDisabled); ok {
		return x.DirectConnectDisabled
	}
	return nil
}

func (m *ReplaceSpecType) GetDirectConnectEnabled() *views.DirectConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*ReplaceSpecType_DirectConnectEnabled); ok {
		return x.DirectConnectEnabled
	}
	return nil
}

func (m *ReplaceSpecType) GetPrivateConnectivity() *views.PrivateConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*ReplaceSpecType_PrivateConnectivity); ok {
		return x.PrivateConnectivity
	}
	return nil
}

func (m *ReplaceSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableInternetVip() *schema.Empty {
	if x, ok := m.GetInternetVipChoice().(*ReplaceSpecType_DisableInternetVip); ok {
		return x.DisableInternetVip
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableInternetVip() *schema.Empty {
	if x, ok := m.GetInternetVipChoice().(*ReplaceSpecType_EnableInternetVip); ok {
		return x.EnableInternetVip
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomDns() *views.CustomDNS {
	if m != nil {
		return m.CustomDns
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_IngressGw)(nil),
		(*ReplaceSpecType_IngressEgressGw)(nil),
		(*ReplaceSpecType_VoltstackCluster)(nil),
		(*ReplaceSpecType_AwsCred)(nil),
		(*ReplaceSpecType_LogsStreamingDisabled)(nil),
		(*ReplaceSpecType_LogReceiver)(nil),
		(*ReplaceSpecType_NodesPerAz)(nil),
		(*ReplaceSpecType_TotalNodes)(nil),
		(*ReplaceSpecType_NoWorkerNodes)(nil),
		(*ReplaceSpecType_DefaultBlockedServices)(nil),
		(*ReplaceSpecType_BlockAllServices)(nil),
		(*ReplaceSpecType_BlockedServices)(nil),
		(*ReplaceSpecType_DirectConnectDisabled)(nil),
		(*ReplaceSpecType_DirectConnectEnabled)(nil),
		(*ReplaceSpecType_PrivateConnectivity)(nil),
		(*ReplaceSpecType_DisableInternetVip)(nil),
		(*ReplaceSpecType_EnableInternetVip)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get AWS VPC site"
// Shape of the AWS VPC site specification
type GetSpecType struct {
	Vpc *views.AWSVPCchoiceType `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
	// Types that are valid to be assigned to SiteType:
	//	*GetSpecType_IngressGw
	//	*GetSpecType_IngressEgressGw
	//	*GetSpecType_VoltstackCluster
	SiteType isGetSpecType_SiteType `protobuf_oneof:"site_type"`
	// Types that are valid to be assigned to Deployment:
	//	*GetSpecType_AwsCred
	//	*GetSpecType_Assisted
	Deployment              isGetSpecType_Deployment `protobuf_oneof:"deployment"`
	InstanceType            string                   `protobuf:"bytes,6,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	DiskSize                uint32                   `protobuf:"varint,15,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	VolterraSoftwareVersion string                   `protobuf:"bytes,8,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion  string                   `protobuf:"bytes,9,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	AwsRegion               string                   `protobuf:"bytes,12,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	SshKey                  string                   `protobuf:"bytes,13,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	Address                 string                   `protobuf:"bytes,17,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates             *site.Coordinates        `protobuf:"bytes,18,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GetSpecType_LogsStreamingDisabled
	//	*GetSpecType_LogReceiver
	LogsReceiverChoice isGetSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// site_state
	//
	// x-displayName: "Site State"
	// The operational phase of the site state machine.
	SiteState                 site.SiteState                `protobuf:"varint,22,opt,name=site_state,json=siteState,proto3,enum=ves.io.schema.site.SiteState" json:"site_state,omitempty"`
	VipParamsPerAz            []*site.PublishVIPParamsPerAz `protobuf:"bytes,24,rep,name=vip_params_per_az,json=vipParamsPerAz,proto3" json:"vip_params_per_az,omitempty"`
	UserModificationTimestamp *types.Timestamp              `protobuf:"bytes,25,opt,name=user_modification_timestamp,json=userModificationTimestamp,proto3" json:"user_modification_timestamp,omitempty"`
	Tags                      map[string]string             `protobuf:"bytes,30,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are valid to be assigned to WorkerNodes:
	//	*GetSpecType_NodesPerAz
	//	*GetSpecType_TotalNodes
	//	*GetSpecType_NoWorkerNodes
	WorkerNodes isGetSpecType_WorkerNodes `protobuf_oneof:"worker_nodes"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*GetSpecType_DefaultBlockedServices
	//	*GetSpecType_BlockAllServices
	//	*GetSpecType_BlockedServices
	BlockedServicesChoice isGetSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	// Types that are valid to be assigned to DirectConnectChoice:
	//	*GetSpecType_DirectConnectDisabled
	//	*GetSpecType_DirectConnectEnabled
	//	*GetSpecType_PrivateConnectivity
	DirectConnectChoice      isGetSpecType_DirectConnectChoice   `protobuf_oneof:"direct_connect_choice"`
	OfflineSurvivabilityMode *views.OfflineSurvivabilityModeType `protobuf:"bytes,39,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	// Types that are valid to be assigned to InternetVipChoice:
	//	*GetSpecType_DisableInternetVip
	//	*GetSpecType_EnableInternetVip
	InternetVipChoice isGetSpecType_InternetVipChoice `protobuf_oneof:"internet_vip_choice"`
	// Types that are valid to be assigned to EgressGatewayChoice:
	//	*GetSpecType_EgressGatewayDefault
	//	*GetSpecType_EgressNatGw
	//	*GetSpecType_EgressVirtualPrivateGateway
	EgressGatewayChoice isGetSpecType_EgressGatewayChoice `protobuf_oneof:"egress_gateway_choice"`
	SuggestedAction     string                            `protobuf:"bytes,49,opt,name=suggested_action,json=suggestedAction,proto3" json:"suggested_action,omitempty"`
	ErrorDescription    string                            `protobuf:"bytes,50,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	// Types that are valid to be assigned to SecurityGroupChoice:
	//	*GetSpecType_F5XcSecurityGroup
	//	*GetSpecType_CustomSecurityGroup
	SecurityGroupChoice isGetSpecType_SecurityGroupChoice `protobuf_oneof:"security_group_choice"`
	SiteErrors          []*views.SiteError                `protobuf:"bytes,55,rep,name=site_errors,json=siteErrors,proto3" json:"site_errors,omitempty"`
	ValidationState     views.ConfigValidationState       `protobuf:"varint,56,opt,name=validation_state,json=validationState,proto3,enum=ves.io.schema.views.ConfigValidationState" json:"validation_state,omitempty"`
	// custom_dns
	//
	// x-displayName: "Custom DNS"
	// custom dns configure to the CE site
	CustomDns         *views.CustomDNS         `protobuf:"bytes,57,opt,name=custom_dns,json=customDns,proto3" json:"custom_dns,omitempty"`
	CloudSiteInfo     *AWSVPCSiteInfoType      `protobuf:"bytes,1001,opt,name=cloud_site_info,json=cloudSiteInfo,proto3" json:"cloud_site_info,omitempty"`
	DirectConnectInfo *views.DirectConnectInfo `protobuf:"bytes,1002,opt,name=direct_connect_info,json=directConnectInfo,proto3" json:"direct_connect_info,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea70a88e595e3c7c, []int{10}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_SiteType interface {
	isGetSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_Deployment interface {
	isGetSpecType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_LogsReceiverChoice interface {
	isGetSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_WorkerNodes interface {
	isGetSpecType_WorkerNodes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_BlockedServicesChoice interface {
	isGetSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_DirectConnectChoice interface {
	isGetSpecType_DirectConnectChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_InternetVipChoice interface {
	isGetSpecType_InternetVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_EgressGatewayChoice interface {
	isGetSpecType_EgressGatewayChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_SecurityGroupChoice interface {
	isGetSpecType_SecurityGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_IngressGw struct {
	IngressGw *AWSVPCIngressGwType `protobuf:"bytes,2,opt,name=ingress_gw,json=ingressGw,proto3,oneof" json:"ingress_gw,omitempty"`
}
type GetSpecType_IngressEgressGw struct {
	IngressEgressGw *AWSVPCIngressEgressGwType `protobuf:"bytes,3,opt,name=ingress_egress_gw,json=ingressEgressGw,proto3,oneof" json:"ingress_egress_gw,omitempty"`
}
type GetSpecType_VoltstackCluster struct {
	VoltstackCluster *AWSVPCVoltstackClusterType `protobuf:"bytes,16,opt,name=voltstack_cluster,json=voltstackCluster,proto3,oneof" json:"voltstack_cluster,omitempty"`
}
type GetSpecType_AwsCred struct {
	AwsCred *views.ObjectRefType `protobuf:"bytes,4,opt,name=aws_cred,json=awsCred,proto3,oneof" json:"aws_cred,omitempty"`
}
type GetSpecType_Assisted struct {
	Assisted *schema.Empty `protobuf:"bytes,5,opt,name=assisted,proto3,oneof" json:"assisted,omitempty"`
}
type GetSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,20,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type GetSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,21,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type GetSpecType_NodesPerAz struct {
	NodesPerAz uint32 `protobuf:"varint,14,opt,name=nodes_per_az,json=nodesPerAz,proto3,oneof" json:"nodes_per_az,omitempty"`
}
type GetSpecType_TotalNodes struct {
	TotalNodes uint32 `protobuf:"varint,27,opt,name=total_nodes,json=totalNodes,proto3,oneof" json:"total_nodes,omitempty"`
}
type GetSpecType_NoWorkerNodes struct {
	NoWorkerNodes *schema.Empty `protobuf:"bytes,28,opt,name=no_worker_nodes,json=noWorkerNodes,proto3,oneof" json:"no_worker_nodes,omitempty"`
}
type GetSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,32,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type GetSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,45,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type GetSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,38,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}
type GetSpecType_DirectConnectDisabled struct {
	DirectConnectDisabled *schema.Empty `protobuf:"bytes,35,opt,name=direct_connect_disabled,json=directConnectDisabled,proto3,oneof" json:"direct_connect_disabled,omitempty"`
}
type GetSpecType_DirectConnectEnabled struct {
	DirectConnectEnabled *views.DirectConnectConfigType `protobuf:"bytes,36,opt,name=direct_connect_enabled,json=directConnectEnabled,proto3,oneof" json:"direct_connect_enabled,omitempty"`
}
type GetSpecType_PrivateConnectivity struct {
	PrivateConnectivity *views.PrivateConnectConfigType `protobuf:"bytes,54,opt,name=private_connectivity,json=privateConnectivity,proto3,oneof" json:"private_connectivity,omitempty"`
}
type GetSpecType_DisableInternetVip struct {
	DisableInternetVip *schema.Empty `protobuf:"bytes,42,opt,name=disable_internet_vip,json=disableInternetVip,proto3,oneof" json:"disable_internet_vip,omitempty"`
}
type GetSpecType_EnableInternetVip struct {
	EnableInternetVip *schema.Empty `protobuf:"bytes,43,opt,name=enable_internet_vip,json=enableInternetVip,proto3,oneof" json:"enable_internet_vip,omitempty"`
}
type GetSpecType_EgressGatewayDefault struct {
	EgressGatewayDefault *schema.Empty `protobuf:"bytes,46,opt,name=egress_gateway_default,json=egressGatewayDefault,proto3,oneof" json:"egress_gateway_default,omitempty"`
}
type GetSpecType_EgressNatGw struct {
	EgressNatGw *views.AWSNATGatewaychoiceType `protobuf:"bytes,47,opt,name=egress_nat_gw,json=egressNatGw,proto3,oneof" json:"egress_nat_gw,omitempty"`
}
type GetSpecType_EgressVirtualPrivateGateway struct {
	EgressVirtualPrivateGateway *views.AWSVirtualPrivateGatewaychoiceType `protobuf:"bytes,48,opt,name=egress_virtual_private_gateway,json=egressVirtualPrivateGateway,proto3,oneof" json:"egress_virtual_private_gateway,omitempty"`
}
type GetSpecType_F5XcSecurityGroup struct {
	F5XcSecurityGroup *schema.Empty `protobuf:"bytes,52,opt,name=f5xc_security_group,json=f5xcSecurityGroup,proto3,oneof" json:"f5xc_security_group,omitempty"`
}
type GetSpecType_CustomSecurityGroup struct {
	CustomSecurityGroup *views.SecurityGroupType `protobuf:"bytes,53,opt,name=custom_security_group,json=customSecurityGroup,proto3,oneof" json:"custom_security_group,omitempty"`
}

func (*GetSpecType_IngressGw) isGetSpecType_SiteType()                              {}
func (*GetSpecType_IngressEgressGw) isGetSpecType_SiteType()                        {}
func (*GetSpecType_VoltstackCluster) isGetSpecType_SiteType()                       {}
func (*GetSpecType_AwsCred) isGetSpecType_Deployment()                              {}
func (*GetSpecType_Assisted) isGetSpecType_Deployment()                             {}
func (*GetSpecType_LogsStreamingDisabled) isGetSpecType_LogsReceiverChoice()        {}
func (*GetSpecType_LogReceiver) isGetSpecType_LogsReceiverChoice()                  {}
func (*GetSpecType_NodesPerAz) isGetSpecType_WorkerNodes()                          {}
func (*GetSpecType_TotalNodes) isGetSpecType_WorkerNodes()                          {}
func (*GetSpecType_NoWorkerNodes) isGetSpecType_WorkerNodes()                       {}
func (*GetSpecType_DefaultBlockedServices) isGetSpecType_BlockedServicesChoice()    {}
func (*GetSpecType_BlockAllServices) isGetSpecType_BlockedServicesChoice()          {}
func (*GetSpecType_BlockedServices) isGetSpecType_BlockedServicesChoice()           {}
func (*GetSpecType_DirectConnectDisabled) isGetSpecType_DirectConnectChoice()       {}
func (*GetSpecType_DirectConnectEnabled) isGetSpecType_DirectConnectChoice()        {}
func (*GetSpecType_PrivateConnectivity) isGetSpecType_DirectConnectChoice()         {}
func (*GetSpecType_DisableInternetVip) isGetSpecType_InternetVipChoice()            {}
func (*GetSpecType_EnableInternetVip) isGetSpecType_InternetVipChoice()             {}
func (*GetSpecType_EgressGatewayDefault) isGetSpecType_EgressGatewayChoice()        {}
func (*GetSpecType_EgressNatGw) isGetSpecType_EgressGatewayChoice()                 {}
func (*GetSpecType_EgressVirtualPrivateGateway) isGetSpecType_EgressGatewayChoice() {}
func (*GetSpecType_F5XcSecurityGroup) isGetSpecType_SecurityGroupChoice()           {}
func (*GetSpecType_CustomSecurityGroup) isGetSpecType_SecurityGroupChoice()         {}

func (m *GetSpecType) GetSiteType() isGetSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *GetSpecType) GetDeployment() isGetSpecType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}
func (m *GetSpecType) GetLogsReceiverChoice() isGetSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GetSpecType) GetWorkerNodes() isGetSpecType_WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}
func (m *GetSpecType) GetBlockedServicesChoice() isGetSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}
func (m *GetSpecType) GetDirectConnectChoice() isGetSpecType_DirectConnectChoice {
	if m != nil {
		return m.DirectConnectChoice
	}
	return nil
}
func (m *GetSpecType) GetInternetVipChoice() isGetSpecType_InternetVipChoice {
	if m != nil {
		return m.InternetVipChoice
	}
	return nil
}
func (m *GetSpecType) GetEgressGatewayChoice() isGetSpecType_EgressGatewayChoice {
	if m != nil {
		return m.EgressGatewayChoice
	}
	return nil
}
func (m *GetSpecType) GetSecurityGroupChoice() isGetSpecType_SecurityGroupChoice {
	if m != nil {
		return m.SecurityGroupChoice
	}
	return nil
}

func (m *GetSpecType) GetVpc() *views.AWSVPCchoiceType {
	if m != nil {
		return m.Vpc
	}
	return nil
}

func (m *GetSpecType) GetIngressGw() *AWSVPCIngressGwType {
	if x, ok := m.GetSiteType().(*GetSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *GetSpecType) GetIngressEgressGw() *AWSVPCIngressEgressGwType {
	if x, ok := m.GetSiteType().(*GetSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *GetSpecType) GetVoltstackCluster() *AWSVPCVoltstackClusterType {
	if x, ok := m.GetSiteType().(*GetSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *GetSpecType) GetAwsCred() *views.ObjectRefType {
	if x, ok := m.GetDeployment().(*GetSpecType_AwsCred); ok {
		return x.AwsCred
	}
	return nil
}

func (m *GetSpecType) GetAssisted() *schema.Empty {
	if x, ok := m.GetDeployment().(*GetSpecType_Assisted); ok {
		return x.Assisted
	}
	return nil
}

func (m *GetSpecType) GetInstanceType() string {
	if m != nil {
		return m.InstanceType
	}
	return ""
}

func (m *GetSpecType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *GetSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GetSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GetSpecType) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

func (m *GetSpecType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *GetSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GetSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GetSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GetSpecType) GetSiteState() site.SiteState {
	if m != nil {
		return m.SiteState
	}
	return site.ONLINE
}

func (m *GetSpecType) GetVipParamsPerAz() []*site.PublishVIPParamsPerAz {
	if m != nil {
		return m.VipParamsPerAz
	}
	return nil
}

func (m *GetSpecType) GetUserModificationTimestamp() *types.Timestamp {
	if m != nil {
		return m.UserModificationTimestamp
	}
	return nil
}

func (m *GetSpecType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *GetSpecType) GetNodesPerAz() uint32 {
	if x, ok := m.GetWorkerNodes().(*GetSpecType_NodesPerAz); ok {
		return x.NodesPerAz
	}
	return 0
}

func (m *GetSpecType) GetTotalNodes() uint32 {
	if x, ok := m.GetWorkerNodes().(*GetSpecType_TotalNodes); ok {
		return x.TotalNodes
	}
	return 0
}

func (m *GetSpecType) GetNoWorkerNodes() *schema.Empty {
	if x, ok := m.GetWorkerNodes().(*GetSpecType_NoWorkerNodes); ok {
		return x.NoWorkerNodes
	}
	return nil
}

func (m *GetSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *GetSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *GetSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *GetSpecType) GetDirectConnectDisabled() *schema.Empty {
	if x, ok := m.GetDirectConnectChoice().(*GetSpecType_DirectConnectDisabled); ok {
		return x.DirectConnectDisabled
	}
	return nil
}

func (m *GetSpecType) GetDirectConnectEnabled() *views.DirectConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*GetSpecType_DirectConnectEnabled); ok {
		return x.DirectConnectEnabled
	}
	return nil
}

func (m *GetSpecType) GetPrivateConnectivity() *views.PrivateConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*GetSpecType_PrivateConnectivity); ok {
		return x.PrivateConnectivity
	}
	return nil
}

func (m *GetSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *GetSpecType) GetDisableInternetVip() *schema.Empty {
	if x, ok := m.GetInternetVipChoice().(*GetSpecType_DisableInternetVip); ok {
		return x.DisableInternetVip
	}
	return nil
}

func (m *GetSpecType) GetEnableInternetVip() *schema.Empty {
	if x, ok := m.GetInternetVipChoice().(*GetSpecType_EnableInternetVip); ok {
		return x.EnableInternetVip
	}
	return nil
}

func (m *GetSpecType) GetEgressGatewayDefault() *schema.Empty {
	if x, ok := m.GetEgressGatewayChoice().(*GetSpecType_EgressGatewayDefault); ok {
		return x.EgressGatewayDefault
	}
	return nil
}

func (m *GetSpecType) GetEgressNatGw() *views.AWSNATGatewaychoiceType {
	if x, ok := m.GetEgressGatewayChoice().(*GetSpecType_EgressNatGw); ok {
		return x.EgressNatGw
	}
	return nil
}

func (m *GetSpecType) GetEgressVirtualPrivateGateway() *views.AWSVirtualPrivateGatewaychoiceType {
	if x, ok := m.GetEgressGatewayChoice().(*GetSpecType_EgressVirtualPrivateGateway); ok {
		return x.EgressVirtualPrivateGateway
	}
	return nil
}

func (m *GetSpecType) GetSuggestedAction() string {
	if m != nil {
		return m.SuggestedAction
	}
	return ""
}

func (m *GetSpecType) GetErrorDescription() string {
	if m != nil {
		return m.ErrorDescription
	}
	return ""
}

func (m *GetSpecType) GetF5XcSecurityGroup() *schema.Empty {
	if x, ok := m.GetSecurityGroupChoice().(*GetSpecType_F5XcSecurityGroup); ok {
		return x.F5XcSecurityGroup
	}
	return nil
}

func (m *GetSpecType) GetCustomSecurityGroup() *views.SecurityGroupType {
	if x, ok := m.GetSecurityGroupChoice().(*GetSpecType_CustomSecurityGroup); ok {
		return x.CustomSecurityGroup
	}
	return nil
}

func (m *GetSpecType) GetSiteErrors() []*views.SiteError {
	if m != nil {
		return m.SiteErrors
	}
	return nil
}

func (m *GetSpecType) GetValidationState() views.ConfigValidationState {
	if m != nil {
		return m.ValidationState
	}
	return views.VALIDATION_STATE_NONE
}

func (m *GetSpecType) GetCustomDns() *views.CustomDNS {
	if m != nil {
		return m.CustomDns
	}
	return nil
}

func (m *GetSpecType) GetCloudSiteInfo() *AWSVPCSiteInfoType {
	if m != nil {
		return m.CloudSiteInfo
	}
	return nil
}

func (m *GetSpecType) GetDirectConnectInfo() *views.DirectConnectInfo {
	if m != nil {
		return m.DirectConnectInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_IngressGw)(nil),
		(*GetSpecType_IngressEgressGw)(nil),
		(*GetSpecType_VoltstackCluster)(nil),
		(*GetSpecType_AwsCred)(nil),
		(*GetSpecType_Assisted)(nil),
		(*GetSpecType_LogsStreamingDisabled)(nil),
		(*GetSpecType_LogReceiver)(nil),
		(*GetSpecType_NodesPerAz)(nil),
		(*GetSpecType_TotalNodes)(nil),
		(*GetSpecType_NoWorkerNodes)(nil),
		(*GetSpecType_DefaultBlockedServices)(nil),
		(*GetSpecType_BlockAllServices)(nil),
		(*GetSpecType_BlockedServices)(nil),
		(*GetSpecType_DirectConnectDisabled)(nil),
		(*GetSpecType_DirectConnectEnabled)(nil),
		(*GetSpecType_PrivateConnectivity)(nil),
		(*GetSpecType_DisableInternetVip)(nil),
		(*GetSpecType_EnableInternetVip)(nil),
		(*GetSpecType_EgressGatewayDefault)(nil),
		(*GetSpecType_EgressNatGw)(nil),
		(*GetSpecType_EgressVirtualPrivateGateway)(nil),
		(*GetSpecType_F5XcSecurityGroup)(nil),
		(*GetSpecType_CustomSecurityGroup)(nil),
	}
}

func init() {
	proto.RegisterType((*AWSVPCIngressGwType)(nil), "ves.io.schema.views.aws_vpc_site.AWSVPCIngressGwType")
	golang_proto.RegisterType((*AWSVPCIngressGwType)(nil), "ves.io.schema.views.aws_vpc_site.AWSVPCIngressGwType")
	proto.RegisterType((*AWSVPCIngressEgressGwType)(nil), "ves.io.schema.views.aws_vpc_site.AWSVPCIngressEgressGwType")
	golang_proto.RegisterType((*AWSVPCIngressEgressGwType)(nil), "ves.io.schema.views.aws_vpc_site.AWSVPCIngressEgressGwType")
	proto.RegisterType((*AWSVPCVoltstackClusterType)(nil), "ves.io.schema.views.aws_vpc_site.AWSVPCVoltstackClusterType")
	golang_proto.RegisterType((*AWSVPCVoltstackClusterType)(nil), "ves.io.schema.views.aws_vpc_site.AWSVPCVoltstackClusterType")
	proto.RegisterType((*AWSVPCIngressGwReplaceType)(nil), "ves.io.schema.views.aws_vpc_site.AWSVPCIngressGwReplaceType")
	golang_proto.RegisterType((*AWSVPCIngressGwReplaceType)(nil), "ves.io.schema.views.aws_vpc_site.AWSVPCIngressGwReplaceType")
	proto.RegisterType((*AWSVPCIngressEgressGwReplaceType)(nil), "ves.io.schema.views.aws_vpc_site.AWSVPCIngressEgressGwReplaceType")
	golang_proto.RegisterType((*AWSVPCIngressEgressGwReplaceType)(nil), "ves.io.schema.views.aws_vpc_site.AWSVPCIngressEgressGwReplaceType")
	proto.RegisterType((*AWSVPCVoltstackClusterReplaceType)(nil), "ves.io.schema.views.aws_vpc_site.AWSVPCVoltstackClusterReplaceType")
	golang_proto.RegisterType((*AWSVPCVoltstackClusterReplaceType)(nil), "ves.io.schema.views.aws_vpc_site.AWSVPCVoltstackClusterReplaceType")
	proto.RegisterType((*AWSVPCSiteInfoType)(nil), "ves.io.schema.views.aws_vpc_site.AWSVPCSiteInfoType")
	golang_proto.RegisterType((*AWSVPCSiteInfoType)(nil), "ves.io.schema.views.aws_vpc_site.AWSVPCSiteInfoType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.aws_vpc_site.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.aws_vpc_site.GlobalSpecType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_vpc_site.GlobalSpecType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_vpc_site.GlobalSpecType.TagsEntry")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.aws_vpc_site.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.aws_vpc_site.CreateSpecType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_vpc_site.CreateSpecType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_vpc_site.CreateSpecType.TagsEntry")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.aws_vpc_site.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.aws_vpc_site.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.aws_vpc_site.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.aws_vpc_site.GetSpecType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_vpc_site.GetSpecType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_vpc_site.GetSpecType.TagsEntry")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/aws_vpc_site/types.proto", fileDescriptor_ea70a88e595e3c7c)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/aws_vpc_site/types.proto", fileDescriptor_ea70a88e595e3c7c)
}

var fileDescriptor_ea70a88e595e3c7c = []byte{
	// 5084 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x4f, 0x6c, 0xdb, 0x58,
	0x7a, 0xf7, 0x93, 0x64, 0x5b, 0x7a, 0xfe, 0x47, 0xd3, 0xb2, 0xcd, 0xd8, 0x89, 0xac, 0x38, 0xc9,
	0xc4, 0x76, 0x68, 0xd9, 0x94, 0xe4, 0x3f, 0x49, 0x67, 0xb2, 0x31, 0x1d, 0x4f, 0x6c, 0xcd, 0x26,
	0x31, 0xe8, 0x8c, 0x67, 0x67, 0x77, 0x67, 0x58, 0x9a, 0x7a, 0x56, 0xd8, 0x48, 0xa4, 0x4a, 0x52,
	0x52, 0x9c, 0x6e, 0xba, 0x03, 0x17, 0x58, 0xb4, 0x7b, 0x68, 0x8b, 0xa0, 0xbd, 0xcc, 0xa9, 0x87,
	0xa2, 0x28, 0x72, 0xea, 0x79, 0x18, 0xa0, 0x46, 0x80, 0x05, 0x16, 0xd3, 0x1e, 0x0c, 0xf4, 0x32,
	0x18, 0x14, 0xe8, 0x8e, 0xe7, 0xd0, 0x99, 0xf6, 0x32, 0xc7, 0x81, 0x2f, 0x2d, 0xf8, 0x48, 0xd1,
	0xa4, 0x44, 0x29, 0x8e, 0xe3, 0xd9, 0xf9, 0xb3, 0xba, 0xcc, 0x58, 0xe4, 0xf7, 0xfd, 0xbe, 0x47,
	0xbe, 0x7f, 0xbf, 0xef, 0xf7, 0x3e, 0x22, 0x90, 0x2e, 0x23, 0x2d, 0x21, 0x29, 0x33, 0x9a, 0x78,
	0x1f, 0x15, 0x84, 0x99, 0xb2, 0x84, 0x2a, 0xda, 0x8c, 0x50, 0xd1, 0xf8, 0x72, 0x51, 0xe4, 0x35,
	0x49, 0x47, 0x33, 0xfa, 0x4e, 0x11, 0x69, 0x89, 0xa2, 0xaa, 0xe8, 0x0a, 0x19, 0xb7, 0xac, 0x13,
	0x96, 0x75, 0x02, 0x5b, 0x27, 0xdc, 0xd6, 0x23, 0xd3, 0x39, 0x49, 0xbf, 0x5f, 0xda, 0x4a, 0x88,
	0x4a, 0x61, 0x26, 0xa7, 0xe4, 0x94, 0x19, 0xec, 0xb8, 0x55, 0xda, 0xc6, 0xbf, 0xf0, 0x0f, 0xfc,
	0x97, 0x05, 0x38, 0x32, 0x96, 0x53, 0x94, 0x5c, 0x1e, 0x1d, 0x59, 0xe9, 0x52, 0x01, 0x69, 0xba,
	0x50, 0x28, 0x56, 0x0d, 0xbc, 0xed, 0xdb, 0xce, 0x23, 0xa4, 0xbb, 0x9b, 0x34, 0x32, 0xe5, 0x35,
	0x90, 0x91, 0x5e, 0x51, 0xd4, 0x07, 0xfc, 0xb6, 0xa4, 0xa2, 0x8a, 0x90, 0xcf, 0x7b, 0x6c, 0x47,
	0xbd, 0xb6, 0x4a, 0x51, 0x97, 0x14, 0xb9, 0x7a, 0x33, 0xe6, 0xbd, 0x59, 0xfb, 0xec, 0x23, 0x67,
	0xbc, 0xf7, 0xdd, 0xb7, 0xce, 0xd6, 0xbc, 0x44, 0x21, 0x2f, 0x65, 0x05, 0x1d, 0xd9, 0x77, 0xe3,
	0xf5, 0xaf, 0x98, 0xf7, 0x86, 0xbe, 0xe8, 0xd7, 0x09, 0x66, 0x03, 0x78, 0x77, 0x94, 0xcb, 0xbe,
	0x56, 0xba, 0xa2, 0x0a, 0x39, 0xaf, 0xe1, 0x98, 0x9f, 0xa1, 0xcb, 0x60, 0xfc, 0x3f, 0x83, 0x70,
	0x60, 0xe9, 0x9d, 0x8d, 0xcd, 0xf5, 0xe5, 0x35, 0x39, 0xa7, 0x22, 0x4d, 0xbb, 0x55, 0xb9, 0xb7,
	0x53, 0x44, 0xe4, 0xbb, 0x30, 0x2c, 0x3c, 0xe2, 0x65, 0x25, 0x8b, 0x34, 0x0a, 0xc4, 0x83, 0x13,
	0x5d, 0xc9, 0x99, 0x84, 0x5f, 0x8f, 0x5b, 0xbe, 0x77, 0x65, 0xb4, 0x26, 0xeb, 0x48, 0xdd, 0x16,
	0x44, 0x74, 0x47, 0xc9, 0x22, 0x13, 0x82, 0xed, 0xf9, 0xe8, 0xcb, 0xbd, 0x60, 0xf8, 0x09, 0x68,
	0x9f, 0x0a, 0x32, 0x74, 0x8a, 0xeb, 0x14, 0x1e, 0x99, 0xb7, 0x34, 0x92, 0x87, 0x84, 0x39, 0x4e,
	0x44, 0xa4, 0xea, 0xd2, 0xb6, 0x84, 0xb2, 0xfc, 0xfd, 0x0a, 0x15, 0x88, 0x83, 0x89, 0x08, 0x3b,
	0xf7, 0xa9, 0x01, 0xfa, 0x85, 0x8a, 0x36, 0xbd, 0xb5, 0xa3, 0xe4, 0xa7, 0xcb, 0x4a, 0x5e, 0x2f,
	0x20, 0xed, 0xfe, 0xd7, 0x06, 0x68, 0x33, 0xa1, 0x86, 0xd5, 0x41, 0xea, 0x06, 0x57, 0x7f, 0x9f,
	0xeb, 0x15, 0x2a, 0xda, 0x72, 0x15, 0x6d, 0xb5, 0x42, 0xde, 0x83, 0x84, 0x90, 0xcf, 0x2b, 0x15,
	0x94, 0xe5, 0xcb, 0x52, 0x91, 0x2f, 0x2a, 0xaa, 0x4e, 0x05, 0xe3, 0x60, 0xa2, 0x2b, 0x79, 0xd1,
	0xff, 0x19, 0x2c, 0xe3, 0xcd, 0xb5, 0xf5, 0x75, 0x45, 0xd5, 0x35, 0x36, 0xf4, 0x2f, 0xcf, 0x00,
	0xe0, 0x7a, 0x6d, 0x8c, 0x4d, 0xa9, 0x68, 0x5e, 0x26, 0x7f, 0x09, 0xcf, 0x16, 0x91, 0xba, 0xad,
	0xa8, 0x05, 0x41, 0x16, 0x11, 0x8f, 0xe4, 0xfb, 0xe6, 0xff, 0x0b, 0x48, 0xd6, 0xf9, 0x82, 0x92,
	0x45, 0xd4, 0x34, 0x8e, 0x90, 0xf2, 0x8d, 0xb0, 0x7e, 0xe4, 0xb8, 0x72, 0xe4, 0x77, 0xbb, 0xfa,
	0xa6, 0xc2, 0x7b, 0x06, 0x00, 0x5f, 0x19, 0x00, 0x70, 0x23, 0xc5, 0x86, 0x96, 0xd7, 0xe8, 0xe7,
	0x06, 0x98, 0x80, 0xbd, 0xb0, 0xdd, 0x7a, 0x8d, 0xed, 0x49, 0x9a, 0xa1, 0x53, 0x70, 0x08, 0x12,
	0x4b, 0xd9, 0xb2, 0x69, 0x98, 0x8d, 0xdf, 0xb5, 0x86, 0x12, 0x19, 0x48, 0xcf, 0x65, 0x42, 0xe1,
	0x10, 0xd1, 0x3e, 0x7e, 0x18, 0x85, 0x67, 0x3c, 0xdd, 0xbb, 0x72, 0xf2, 0x4e, 0xbe, 0x57, 0x51,
	0x8e, 0xdf, 0xc9, 0x2c, 0xec, 0x97, 0x15, 0xbe, 0x3a, 0x05, 0x8b, 0x4a, 0x5e, 0x12, 0x77, 0x70,
	0x2f, 0x77, 0x25, 0xa3, 0x35, 0x31, 0x56, 0x0a, 0x45, 0x7d, 0x67, 0xb5, 0x8d, 0xeb, 0x93, 0x95,
	0x3b, 0x96, 0xfd, 0x3a, 0x36, 0x27, 0x77, 0xe0, 0xb0, 0x20, 0xea, 0x52, 0x19, 0x79, 0x71, 0x24,
	0xa4, 0x51, 0x10, 0x23, 0x5d, 0xad, 0x41, 0xaa, 0x9d, 0xf1, 0x89, 0x25, 0xec, 0xee, 0x46, 0x95,
	0x90, 0x86, 0xdb, 0x8d, 0xfb, 0x78, 0xb5, 0x8d, 0x1b, 0x14, 0xfc, 0x4c, 0xc8, 0xbf, 0x07, 0xf0,
	0xbc, 0x1d, 0xdb, 0xee, 0xe8, 0xac, 0x83, 0x7a, 0xd4, 0x8a, 0x31, 0xdc, 0x0a, 0xf6, 0x78, 0xad,
	0xb0, 0xbb, 0x33, 0xfb, 0xa6, 0x7d, 0xd9, 0xb7, 0x39, 0x31, 0xa1, 0xa9, 0x2d, 0x79, 0x03, 0x12,
	0xb2, 0xc2, 0x6f, 0x2b, 0x6a, 0x45, 0x50, 0xb3, 0x7c, 0x51, 0x55, 0x1e, 0xee, 0x50, 0xa1, 0x26,
	0x6f, 0x15, 0x70, 0xbd, 0xb2, 0xf2, 0xa6, 0x65, 0xbe, 0x6e, 0x5a, 0x93, 0x7f, 0x01, 0xe0, 0x39,
	0xfb, 0xc9, 0x3c, 0x30, 0x47, 0x4f, 0x15, 0xc1, 0x78, 0xd7, 0x8f, 0xf7, 0x54, 0x6e, 0x6c, 0xf7,
	0x13, 0xad, 0x02, 0x6e, 0x44, 0x68, 0x68, 0x41, 0xde, 0x86, 0xc3, 0xde, 0xe8, 0x78, 0xb2, 0x99,
	0xff, 0xa5, 0xa2, 0x4d, 0x1f, 0x27, 0xba, 0xed, 0x82, 0xc3, 0x13, 0x77, 0x29, 0x9f, 0x27, 0x35,
	0x9f, 0x25, 0x25, 0x8c, 0x97, 0x94, 0xb5, 0x4f, 0x0d, 0x30, 0xea, 0x2c, 0x19, 0x85, 0x52, 0x5e,
	0x97, 0xa6, 0x65, 0x49, 0xac, 0x5b, 0x5c, 0xce, 0xab, 0x63, 0xd4, 0x0d, 0xae, 0x99, 0x65, 0xdd,
	0x32, 0x73, 0x1b, 0x0e, 0xcb, 0x0a, 0x2f, 0xc9, 0x9a, 0x94, 0x45, 0xbc, 0xa6, 0x0b, 0xba, 0x24,
	0xf2, 0xaa, 0x52, 0xd2, 0x91, 0x46, 0x75, 0x37, 0x79, 0x86, 0x00, 0x17, 0x95, 0x95, 0x35, 0xec,
	0xb5, 0x81, 0x9d, 0x38, 0xec, 0x43, 0x0a, 0x30, 0xea, 0x8b, 0xd5, 0x83, 0xb1, 0xa6, 0x7d, 0x27,
	0xe6, 0x86, 0xa4, 0x7b, 0x40, 0x7e, 0x2c, 0x69, 0x3a, 0x7e, 0xfb, 0x01, 0x8e, 0x94, 0xea, 0x43,
	0xbc, 0x0d, 0x29, 0x59, 0xe1, 0x95, 0x92, 0xee, 0x13, 0xa6, 0xaf, 0x71, 0x93, 0xd9, 0x90, 0xb9,
	0x3e, 0xad, 0x06, 0xb9, 0x41, 0x59, 0xb9, 0x6b, 0x39, 0x7b, 0x60, 0x25, 0x38, 0xe8, 0x8f, 0x49,
	0x9c, 0xa0, 0xe9, 0x4e, 0xb0, 0x01, 0xc5, 0x27, 0x94, 0xb5, 0xac, 0xe4, 0xf2, 0xca, 0x96, 0x90,
	0xaf, 0xae, 0x0a, 0x14, 0xd9, 0xe4, 0x6d, 0x87, 0xcc, 0x65, 0xe5, 0x16, 0xb6, 0xb7, 0xe7, 0x38,
	0xb9, 0x0d, 0x07, 0xbc, 0x00, 0x7c, 0x5e, 0xd2, 0x74, 0x6a, 0x00, 0xa3, 0xa4, 0x7d, 0x1b, 0xeb,
	0x01, 0x58, 0x56, 0x64, 0x19, 0x89, 0xe6, 0x4a, 0xeb, 0xbc, 0xee, 0x10, 0xd7, 0x9f, 0x73, 0x9b,
	0x98, 0x37, 0xc8, 0x15, 0x38, 0x20, 0x2b, 0x7c, 0x56, 0xe4, 0xc5, 0x7c, 0x49, 0xd3, 0x91, 0xca,
	0xe7, 0x54, 0xa5, 0x54, 0xa4, 0xa8, 0x26, 0xad, 0x6d, 0xe7, 0x08, 0x59, 0xb9, 0x29, 0x2e, 0x5b,
	0x0e, 0xb7, 0x4c, 0x7b, 0xb2, 0x02, 0x47, 0x6b, 0x31, 0x9c, 0x2e, 0x2c, 0xcb, 0xd4, 0x19, 0x0c,
	0x37, 0xee, 0xdb, 0xec, 0xbb, 0x5b, 0x7f, 0x82, 0x44, 0x9d, 0x43, 0xdb, 0xf8, 0xc5, 0x0e, 0x3c,
	0x7d, 0x4c, 0xd4, 0x22, 0xad, 0xb6, 0x73, 0xc3, 0x59, 0x4f, 0x3c, 0xbb, 0x83, 0x37, 0x65, 0xb2,
	0x04, 0x47, 0xea, 0x02, 0xdb, 0x23, 0xb4, 0x2c, 0x53, 0x23, 0xaf, 0x1a, 0x77, 0xc8, 0x1b, 0xd7,
	0x9a, 0x11, 0x9b, 0xb2, 0x39, 0xad, 0xb4, 0x02, 0x2f, 0x3a, 0x2f, 0x99, 0x2f, 0x96, 0xb6, 0xf2,
	0x92, 0xc8, 0x4b, 0x45, 0xea, 0x5c, 0x93, 0x57, 0xd7, 0xc1, 0x45, 0xb5, 0xc2, 0x51, 0xd7, 0xac,
	0x63, 0xa7, 0xb5, 0x22, 0x79, 0x0b, 0x46, 0x6b, 0xe0, 0xca, 0xba, 0x89, 0x15, 0x6b, 0x8a, 0xd5,
	0xef, 0xc1, 0x2a, 0xeb, 0x6b, 0x45, 0x5f, 0x56, 0x31, 0xf8, 0xca, 0xac, 0xe2, 0x67, 0x30, 0x5a,
	0x8b, 0xca, 0x6b, 0x79, 0x89, 0x1a, 0x7a, 0x69, 0xe4, 0x7e, 0x2f, 0xf2, 0x46, 0x5e, 0xfa, 0xf6,
	0x29, 0xcb, 0x7b, 0xcf, 0x0d, 0xf0, 0x2e, 0xec, 0xae, 0x52, 0x96, 0xe0, 0x22, 0xcd, 0xc0, 0xb3,
	0x70, 0xd0, 0x9c, 0xfb, 0x71, 0x7b, 0xaa, 0xc4, 0xab, 0x7b, 0x1c, 0x19, 0x9c, 0xa7, 0x17, 0xe0,
	0x15, 0x1f, 0x3a, 0x33, 0xcc, 0x2c, 0xd0, 0xc9, 0x45, 0x3a, 0x99, 0xa2, 0x19, 0x86, 0x66, 0xd2,
	0x74, 0x32, 0x49, 0x27, 0x19, 0x3a, 0x3d, 0xc7, 0xd2, 0x70, 0xd0, 0xcb, 0x30, 0x78, 0xf1, 0xbe,
	0x22, 0x89, 0x88, 0x1c, 0xd8, 0x33, 0x40, 0x60, 0xdf, 0x00, 0x1d, 0x07, 0x06, 0xe8, 0x4c, 0xd2,
	0x29, 0x86, 0x66, 0x66, 0xd9, 0x29, 0x18, 0xf5, 0xee, 0x39, 0xb6, 0x31, 0xb9, 0x67, 0x80, 0xd0,
	0xbe, 0x01, 0x3a, 0x0f, 0x0c, 0xd0, 0x91, 0xa6, 0x93, 0xb3, 0xf4, 0x55, 0x76, 0x06, 0x8e, 0xf8,
	0x2c, 0xc6, 0x55, 0x8f, 0xfe, 0x3d, 0x03, 0x74, 0xef, 0x1b, 0xa0, 0xeb, 0xc0, 0x00, 0xed, 0x4c,
	0x92, 0x66, 0x52, 0x6c, 0x1a, 0x8e, 0xfa, 0xad, 0x81, 0x55, 0x8f, 0xc1, 0x3d, 0x03, 0xf4, 0xfd,
	0xd6, 0x00, 0x60, 0xdf, 0x00, 0xbd, 0xd8, 0x6b, 0x8e, 0x66, 0xe6, 0xd9, 0x29, 0x38, 0x58, 0xb3,
	0x14, 0xb9, 0x22, 0x90, 0xfb, 0x06, 0xe8, 0xc7, 0xb6, 0x8b, 0x34, 0x63, 0x36, 0x69, 0xb8, 0x6e,
	0x3a, 0xda, 0xd6, 0xd1, 0x3d, 0x03, 0x50, 0xfb, 0x06, 0x18, 0x3e, 0x30, 0x40, 0x38, 0x99, 0xa6,
	0x93, 0x73, 0x74, 0x72, 0x9e, 0xbd, 0x02, 0x87, 0x70, 0xe2, 0x60, 0x6e, 0x5e, 0x5e, 0x7b, 0x13,
	0xfd, 0xdc, 0xbe, 0x01, 0xce, 0x9a, 0xe8, 0xc9, 0xab, 0x74, 0x6a, 0x36, 0x13, 0x0a, 0x07, 0x89,
	0x50, 0x26, 0x14, 0x6e, 0x27, 0x3a, 0x32, 0xa1, 0x70, 0x07, 0xd1, 0x99, 0x09, 0x85, 0x3b, 0x89,
	0x70, 0x26, 0x14, 0xee, 0x22, 0xba, 0x33, 0xa1, 0x70, 0x2f, 0xd1, 0x97, 0x09, 0x85, 0xfb, 0x09,
	0x32, 0x13, 0x0a, 0x0f, 0x13, 0x54, 0x26, 0x14, 0x3e, 0x4b, 0x9c, 0xcb, 0x84, 0xc2, 0xa3, 0xc4,
	0xd9, 0x4c, 0x28, 0x1c, 0x27, 0xce, 0x67, 0x42, 0xe1, 0xf3, 0xc4, 0x78, 0x26, 0x14, 0x1e, 0x27,
	0x2e, 0x64, 0x42, 0xe1, 0x0b, 0xc4, 0xc5, 0xf1, 0x5f, 0x0d, 0xc0, 0x11, 0x8b, 0x3a, 0x6e, 0x2a,
	0x79, 0x5d, 0xd3, 0x05, 0xf1, 0x81, 0x3d, 0xe3, 0x31, 0xfb, 0x2c, 0xf8, 0x6c, 0xda, 0x00, 0x6f,
	0xda, 0xcb, 0x9f, 0x1a, 0x80, 0xf2, 0xf0, 0x7c, 0xec, 0x3c, 0x2d, 0x2a, 0x85, 0x2d, 0xa5, 0xba,
	0x63, 0xc7, 0xd4, 0xb3, 0xd4, 0x0d, 0xae, 0xa1, 0x59, 0xdd, 0x76, 0xed, 0x26, 0xbb, 0x81, 0xd3,
	0xcd, 0x68, 0x7c, 0xc9, 0x6e, 0xe8, 0xe5, 0xc8, 0xae, 0xd6, 0x98, 0xec, 0xb6, 0xbf, 0x22, 0xd9,
	0x6d, 0x4c, 0x73, 0xff, 0xe6, 0x58, 0x34, 0xf7, 0xc2, 0x69, 0xd1, 0xdc, 0x13, 0x12, 0xdc, 0xce,
	0x53, 0x26, 0xb8, 0xe1, 0x6f, 0x97, 0xe0, 0xf6, 0x9d, 0x80, 0xe0, 0xde, 0x6d, 0xc2, 0xdc, 0x60,
	0x53, 0xb2, 0xd9, 0x80, 0xb3, 0x89, 0x8d, 0x38, 0x5b, 0xd7, 0xc9, 0xe8, 0xe6, 0xf1, 0xd9, 0x5a,
	0x4f, 0x93, 0xe6, 0x06, 0x8f, 0xcd, 0xd6, 0x7a, 0x5f, 0x81, 0xad, 0x05, 0x5f, 0x82, 0xad, 0x9d,
	0x6b, 0xca, 0x2d, 0xeb, 0xd9, 0x9a, 0x08, 0xeb, 0xb8, 0x8e, 0x4d, 0x35, 0x4e, 0x4c, 0x95, 0x42,
	0x5c, 0xaf, 0x97, 0x2a, 0x35, 0xa3, 0x48, 0xe7, 0x9b, 0xb2, 0xcb, 0x97, 0xa3, 0x48, 0xe3, 0x4d,
	0xb1, 0x7c, 0x28, 0xd2, 0x8f, 0x60, 0x5f, 0x16, 0x6d, 0x0b, 0xa5, 0xbc, 0xce, 0xdb, 0x62, 0x54,
	0xd3, 0x6c, 0xae, 0x83, 0xeb, 0xb5, 0xcd, 0x37, 0x2c, 0x6b, 0xf2, 0x5d, 0x48, 0x56, 0x55, 0x2c,
	0x31, 0x2f, 0x68, 0x9a, 0xd5, 0xd7, 0x16, 0xcb, 0x9a, 0xf4, 0x1f, 0x92, 0x96, 0xf9, 0xb2, 0x69,
	0xed, 0x74, 0x70, 0x07, 0x47, 0x68, 0x35, 0xd7, 0x7d, 0xe9, 0xdb, 0xd0, 0x2b, 0xd3, 0xb7, 0xd7,
	0x61, 0xaf, 0xac, 0xf0, 0x0f, 0x16, 0xb5, 0x6a, 0x9f, 0xd9, 0xbc, 0xd8, 0xff, 0x81, 0x3b, 0xb9,
	0x6e, 0x59, 0x79, 0x6b, 0x51, 0xb3, 0x3b, 0x93, 0x7c, 0x1b, 0x76, 0xb9, 0x5d, 0x47, 0x8f, 0x3d,
	0x4e, 0x7a, 0x9f, 0x3e, 0x76, 0x7b, 0xae, 0x76, 0x72, 0xf0, 0x81, 0x03, 0x7b, 0x4d, 0x7b, 0x6e,
	0x00, 0xc5, 0xc5, 0xba, 0x18, 0x3a, 0xd9, 0x84, 0x75, 0xa5, 0xe8, 0x79, 0x38, 0x0a, 0x07, 0xed,
	0x17, 0x19, 0x5f, 0x56, 0xe4, 0x6d, 0x29, 0x57, 0x52, 0x05, 0xb3, 0x5b, 0xc9, 0x00, 0x73, 0x15,
	0x5e, 0xf4, 0xa1, 0x64, 0x04, 0x93, 0xa4, 0x53, 0x49, 0x93, 0x95, 0x5d, 0xc5, 0x74, 0x6c, 0x8e,
	0xbd, 0xd2, 0x88, 0x8b, 0x55, 0xe9, 0x55, 0xd0, 0xa2, 0x57, 0xa9, 0x39, 0x7a, 0xae, 0x29, 0x15,
	0xeb, 0xb4, 0x79, 0x5b, 0xc7, 0x02, 0xcd, 0xcc, 0xd1, 0x8b, 0xec, 0x6c, 0x73, 0x66, 0x65, 0x72,
	0x19, 0xb8, 0x6f, 0x80, 0x08, 0x66, 0x4a, 0xb3, 0x34, 0xc3, 0x34, 0x67, 0x55, 0x3d, 0xfb, 0x06,
	0xe8, 0xc6, 0xb6, 0x29, 0x9a, 0x49, 0xb3, 0x74, 0x63, 0x56, 0x55, 0xcf, 0x92, 0x5e, 0x40, 0xa9,
	0xce, 0xef, 0x1b, 0x20, 0x6e, 0x1a, 0xa7, 0x52, 0x74, 0x2a, 0xcd, 0x4e, 0xc2, 0xa8, 0x77, 0x30,
	0xbb, 0x4c, 0xa3, 0xfb, 0x06, 0x18, 0xc0, 0xb8, 0xb3, 0x74, 0x92, 0x61, 0x2f, 0x43, 0xd2, 0xd5,
	0x9d, 0x6e, 0xc3, 0x91, 0x7d, 0x03, 0x9c, 0xc1, 0x86, 0xf3, 0x74, 0x72, 0xc1, 0xa1, 0x69, 0x16,
	0x41, 0x8b, 0x10, 0x30, 0x13, 0x0a, 0x77, 0x13, 0x3d, 0x0e, 0x1d, 0xb3, 0x88, 0xd8, 0x00, 0x11,
	0xcd, 0x84, 0xc2, 0x67, 0x88, 0x91, 0x4c, 0x28, 0x3c, 0x46, 0xc4, 0xc7, 0xff, 0x35, 0x50, 0x25,
	0x62, 0x8e, 0xc8, 0xcb, 0xa1, 0x62, 0x5e, 0x10, 0x31, 0xad, 0xf9, 0xa1, 0xea, 0xa5, 0xd7, 0x3f,
	0xbe, 0xee, 0x27, 0x6d, 0x3f, 0x37, 0xc0, 0x45, 0x08, 0xab, 0x93, 0x03, 0x34, 0x53, 0x50, 0x01,
	0x11, 0xb0, 0x75, 0xd4, 0xff, 0x88, 0xc2, 0xb8, 0xaf, 0x8e, 0xea, 0x7e, 0x8f, 0xa7, 0xa1, 0x79,
	0x6a, 0xdf, 0x9c, 0xe6, 0xf9, 0xaa, 0x34, 0x70, 0xec, 0x5b, 0xa6, 0x81, 0x2d, 0x9d, 0xf3, 0x7b,
	0x28, 0x39, 0xde, 0x3d, 0x99, 0xe4, 0xd8, 0x58, 0x6c, 0x14, 0x4f, 0x53, 0x6c, 0x6c, 0xc9, 0x8c,
	0x2d, 0x99, 0xb1, 0x25, 0x33, 0x7e, 0xef, 0x65, 0xc6, 0x07, 0x1f, 0x5f, 0x6f, 0x7c, 0xca, 0xf9,
	0xdc, 0x00, 0x6f, 0x9d, 0xa6, 0xe8, 0xb8, 0xd2, 0x88, 0xe8, 0xd2, 0x3e, 0xa2, 0xe3, 0xee, 0x21,
	0xf0, 0xb7, 0x66, 0xd9, 0x06, 0x14, 0x78, 0xaa, 0x5e, 0x8d, 0xdc, 0x3d, 0x04, 0xbe, 0xb6, 0xec,
	0xed, 0xa6, 0x2a, 0xe5, 0x4c, 0x9d, 0x4a, 0xb9, 0x7b, 0x08, 0x9a, 0x38, 0xb0, 0x77, 0x9b, 0x33,
	0xed, 0xd9, 0x3d, 0x03, 0xf4, 0x79, 0xf4, 0xcb, 0xdd, 0x43, 0xd0, 0xcc, 0x83, 0x5d, 0x6e, 0x44,
	0xc4, 0xa7, 0xea, 0xe4, 0x4d, 0xf3, 0x45, 0xf9, 0xda, 0xb2, 0x99, 0xc6, 0x0c, 0x7d, 0xc6, 0x4f,
	0xf7, 0xdc, 0x3d, 0x04, 0x8d, 0x1c, 0xd8, 0x95, 0x86, 0xfc, 0xfd, 0x4a, 0x1d, 0xd9, 0xdf, 0x3d,
	0x04, 0x0d, 0x8c, 0x1d, 0x66, 0xe8, 0x96, 0x4c, 0xc3, 0x44, 0xe4, 0x65, 0x85, 0xd3, 0xf1, 0x7f,
	0xeb, 0x83, 0xe7, 0xfd, 0x05, 0xd2, 0x17, 0xd2, 0xca, 0x96, 0xba, 0xd8, 0x52, 0x17, 0x5b, 0xea,
	0x62, 0x4b, 0x5d, 0xfc, 0x03, 0x52, 0x17, 0xbf, 0x11, 0x05, 0xef, 0xda, 0xd6, 0xc7, 0xd7, 0x9b,
	0x1c, 0x52, 0x3d, 0x37, 0xc0, 0xd2, 0x0b, 0xb4, 0xb3, 0xf3, 0x3e, 0xe4, 0xa1, 0xc7, 0x23, 0x8f,
	0xb1, 0x37, 0x1b, 0x51, 0x86, 0x2b, 0xf5, 0xda, 0xd8, 0xc9, 0x18, 0x43, 0x8d, 0x68, 0xd6, 0x90,
	0x31, 0x1c, 0x63, 0x8b, 0xf7, 0x8a, 0x69, 0xaf, 0xb4, 0xc5, 0x7b, 0xb5, 0xb6, 0xc6, 0x5b, 0xfc,
	0xad, 0xc6, 0x5b, 0x3c, 0xed, 0xb7, 0x2f, 0x9f, 0x70, 0x7f, 0xf7, 0xea, 0x73, 0xc7, 0xd8, 0xdf,
	0x03, 0x44, 0xf0, 0x98, 0x8a, 0xdb, 0x18, 0x11, 0x1f, 0xff, 0xaf, 0x00, 0x24, 0xad, 0x91, 0x64,
	0x8e, 0x96, 0x35, 0x79, 0x5b, 0xc1, 0xdb, 0xf7, 0x9b, 0x10, 0x3a, 0x13, 0xc8, 0x2a, 0xb3, 0x8b,
	0xb0, 0x97, 0x3f, 0xfa, 0x72, 0x2f, 0x18, 0x79, 0x02, 0x3a, 0xc6, 0x43, 0x6a, 0xa0, 0x08, 0xcc,
	0x5f, 0xf0, 0x09, 0xe8, 0x9c, 0x6a, 0x9f, 0xa5, 0x19, 0x3a, 0x65, 0xfe, 0x6c, 0x7f, 0x02, 0x02,
	0x14, 0xe0, 0x22, 0x45, 0x7b, 0x1a, 0x69, 0xe4, 0x2a, 0xec, 0x2a, 0xaa, 0x52, 0x59, 0xd0, 0x11,
	0x06, 0x0a, 0xbc, 0x1c, 0x10, 0xb4, 0x7d, 0x4d, 0xa4, 0xb7, 0x21, 0xd4, 0x4a, 0x5b, 0x32, 0xd2,
	0x79, 0x29, 0xab, 0x51, 0x41, 0x7c, 0x16, 0x7a, 0xa9, 0xd1, 0x59, 0xe8, 0x06, 0xb6, 0x5c, 0xcb,
	0x5a, 0x75, 0x6a, 0x7d, 0x35, 0x11, 0xb8, 0x88, 0x56, 0xbd, 0x4f, 0xae, 0xc0, 0x8e, 0x72, 0x51,
	0xe4, 0xa5, 0x2c, 0x26, 0x27, 0x11, 0x36, 0x61, 0xda, 0x4e, 0xaa, 0x97, 0x93, 0x97, 0xde, 0x9f,
	0x28, 0x17, 0xc5, 0xe9, 0xc9, 0x89, 0x9f, 0x09, 0xd3, 0x8f, 0x66, 0xa7, 0xaf, 0xbe, 0xf7, 0x67,
	0x8b, 0x8f, 0x7f, 0xe1, 0xfc, 0xcd, 0x2c, 0x3c, 0x9e, 0xbc, 0xf8, 0x8b, 0xf7, 0x2f, 0x72, 0xed,
	0xe5, 0xa2, 0xb8, 0x96, 0x25, 0xcf, 0xc0, 0xb0, 0x09, 0x23, 0x0b, 0x05, 0x84, 0xb9, 0x49, 0x84,
	0xeb, 0x2c, 0x17, 0xc5, 0x3b, 0x42, 0x01, 0x8d, 0xff, 0xfb, 0x25, 0xd8, 0x6b, 0x2d, 0xbf, 0x1b,
	0x45, 0x24, 0xe2, 0xb7, 0xfb, 0x06, 0x0c, 0x96, 0x8b, 0x22, 0x3e, 0x37, 0x6e, 0xf2, 0x10, 0x9b,
	0xeb, 0xcb, 0x56, 0xd7, 0x1e, 0x15, 0xdb, 0x71, 0xa6, 0x1f, 0xf9, 0x73, 0x08, 0x25, 0x2b, 0x65,
	0xe0, 0x73, 0x15, 0x5b, 0xab, 0x9b, 0x4b, 0xbc, 0xa8, 0xb4, 0x39, 0xe1, 0x23, 0x2b, 0xb2, 0xe6,
	0x3c, 0x06, 0xab, 0x6d, 0x5c, 0x44, 0xaa, 0x5e, 0x26, 0x15, 0xd8, 0x5f, 0x45, 0x47, 0x4e, 0x10,
	0x4b, 0x59, 0xfd, 0xa3, 0x97, 0x0c, 0xb2, 0xe2, 0x17, 0xaa, 0x4f, 0xf2, 0xde, 0x24, 0xff, 0x14,
	0xf6, 0x3b, 0xc7, 0xe0, 0xce, 0xb1, 0x82, 0x25, 0x8c, 0xbc, 0x7e, 0xdc, 0x80, 0x7e, 0xcb, 0xa0,
	0x13, 0x91, 0x28, 0xd7, 0xdc, 0x25, 0x73, 0x30, 0x8c, 0x4f, 0xf1, 0x55, 0x94, 0xb5, 0x49, 0xe9,
	0x71, 0xb6, 0xa2, 0xd7, 0x9e, 0x3e, 0xee, 0x17, 0xf3, 0x4a, 0x29, 0x8b, 0x1d, 0x91, 0xac, 0x4b,
	0x42, 0x5e, 0xfb, 0xe8, 0x19, 0xe8, 0x0d, 0x83, 0x09, 0x30, 0x0b, 0xae, 0x75, 0x88, 0xf8, 0x18,
	0x62, 0x15, 0x70, 0x9d, 0x42, 0x45, 0x5b, 0x56, 0x51, 0x96, 0x7c, 0x03, 0x86, 0x05, 0x4d, 0x93,
	0x34, 0x1d, 0x65, 0x6d, 0xce, 0xea, 0x5f, 0xac, 0x16, 0xf9, 0xe4, 0x31, 0xf8, 0xc2, 0x00, 0x80,
	0x02, 0xab, 0x80, 0x73, 0x5c, 0xc8, 0xff, 0x05, 0xb0, 0x47, 0x92, 0x35, 0x1d, 0xa7, 0xa8, 0xfa,
	0x4e, 0x11, 0x51, 0x1d, 0x78, 0x94, 0xfe, 0x06, 0x7c, 0x6a, 0x80, 0x88, 0x9e, 0x4a, 0x3c, 0xcc,
	0x0b, 0x6a, 0x0e, 0x7d, 0x6d, 0x80, 0xb6, 0x27, 0xcf, 0xc0, 0x3f, 0x01, 0x98, 0x86, 0x47, 0x57,
	0xc9, 0xcb, 0x13, 0xe9, 0xf8, 0xc3, 0x78, 0x79, 0x79, 0xfd, 0x6d, 0x3a, 0xce, 0xcc, 0xdf, 0x62,
	0xe3, 0xdc, 0xd2, 0xed, 0xc9, 0x78, 0x01, 0x65, 0xa5, 0x52, 0x21, 0xee, 0xca, 0x4c, 0x61, 0x0a,
	0x42, 0x3d, 0x95, 0x48, 0xda, 0x6e, 0x97, 0x26, 0x16, 0x1d, 0xb7, 0x54, 0xb2, 0xea, 0x76, 0x5f,
	0xca, 0xdd, 0xf7, 0x38, 0x5d, 0x85, 0xb0, 0x30, 0x97, 0x48, 0xdb, 0x4e, 0x57, 0x26, 0x98, 0x79,
	0xc7, 0x6b, 0x3e, 0x5d, 0xf5, 0x2a, 0x23, 0x75, 0xa7, 0xce, 0xd5, 0x9c, 0x62, 0x21, 0x35, 0x40,
	0xdd, 0xe0, 0xba, 0xab, 0x0f, 0x87, 0xa7, 0xc5, 0x3c, 0xec, 0xc6, 0x95, 0x0e, 0x7c, 0x11, 0xa9,
	0xbc, 0xf0, 0x08, 0x13, 0x9a, 0x1e, 0x96, 0xfc, 0xd4, 0x00, 0x60, 0xb6, 0x5a, 0x40, 0x11, 0x9a,
	0x0a, 0x50, 0x83, 0xab, 0x01, 0x0e, 0x62, 0xcb, 0x75, 0xa4, 0x2e, 0x3d, 0x22, 0xe7, 0x60, 0x97,
	0xae, 0xe8, 0xe6, 0x0a, 0x8d, 0xeb, 0x24, 0x46, 0x1b, 0xb8, 0xbd, 0x61, 0xba, 0x61, 0x43, 0x4b,
	0x45, 0xbf, 0x0e, 0xfb, 0x64, 0x85, 0x37, 0x97, 0x74, 0xa4, 0xda, 0xae, 0x67, 0x9b, 0xf2, 0xc6,
	0x1e, 0x59, 0x79, 0x07, 0x5b, 0x5b, 0xfe, 0xeb, 0xf0, 0x8c, 0x39, 0xb0, 0x90, 0xaa, 0x0a, 0xbc,
	0xa6, 0x6c, 0xeb, 0x15, 0x41, 0x45, 0x7c, 0x19, 0xa9, 0x9a, 0xa4, 0xc8, 0x76, 0x21, 0x67, 0xd4,
	0xee, 0x56, 0xa7, 0x19, 0xf8, 0xa9, 0x87, 0xab, 0x6e, 0x1b, 0xb6, 0xd7, 0xa6, 0xe5, 0x44, 0xde,
	0x81, 0x94, 0x52, 0x44, 0xaa, 0xa0, 0x4b, 0x72, 0x8e, 0xd7, 0x76, 0x34, 0x1d, 0x15, 0x1c, 0xc0,
	0x48, 0x13, 0xc0, 0x21, 0xc7, 0x6b, 0x03, 0x3b, 0x55, 0xf1, 0x52, 0x10, 0x9a, 0xc3, 0x5c, 0x45,
	0x39, 0x13, 0xa1, 0xdb, 0x42, 0xc0, 0xae, 0xcf, 0x40, 0xb7, 0x7b, 0xc8, 0x72, 0x11, 0xa1, 0xa2,
	0x71, 0xd8, 0x8c, 0x4c, 0xc1, 0x48, 0x56, 0xd2, 0x1e, 0xf0, 0x9a, 0xf4, 0x08, 0x61, 0x62, 0xde,
	0xc3, 0x0e, 0xed, 0xd9, 0x21, 0xff, 0xf2, 0x19, 0xe8, 0xc7, 0xeb, 0xf3, 0x54, 0x90, 0xfa, 0x80,
	0xe0, 0xc2, 0xa6, 0xe1, 0x86, 0xf4, 0x08, 0x91, 0x97, 0x61, 0xa7, 0xa6, 0xdd, 0xe7, 0x1f, 0xa0,
	0x1d, 0x4c, 0x66, 0x23, 0x6c, 0xef, 0xd7, 0x06, 0x08, 0x62, 0x53, 0x35, 0x48, 0x7d, 0x70, 0x83,
	0xeb, 0xd0, 0xb4, 0xfb, 0x6f, 0xa1, 0x1d, 0x72, 0x02, 0x76, 0x0a, 0xd9, 0xac, 0x39, 0xf3, 0xa9,
	0x7e, 0xcb, 0xd0, 0xc4, 0x76, 0x0c, 0x03, 0x5c, 0xf5, 0x36, 0x79, 0x0b, 0x76, 0x89, 0x8a, 0xa2,
	0x66, 0x25, 0x59, 0x30, 0x49, 0xb8, 0x25, 0x64, 0x8e, 0xd5, 0x74, 0x0d, 0x5e, 0x02, 0x96, 0x8f,
	0xcc, 0xac, 0x42, 0x4c, 0xce, 0xed, 0x49, 0xde, 0x81, 0xc3, 0x79, 0x25, 0xa7, 0xf1, 0x9a, 0xae,
	0x22, 0xa1, 0x60, 0xbe, 0xda, 0xac, 0xa4, 0x09, 0x5b, 0x79, 0x94, 0x6d, 0x2a, 0x67, 0x07, 0xb9,
	0x41, 0xd3, 0x6d, 0xa3, 0xea, 0x75, 0xd3, 0x76, 0x22, 0x7f, 0x02, 0xbb, 0xf3, 0x4a, 0x8e, 0x57,
	0x91, 0x88, 0xa4, 0x32, 0x52, 0x6d, 0xa1, 0xeb, 0x38, 0x0b, 0x48, 0xdf, 0xd3, 0xc7, 0x1e, 0xd7,
	0xd5, 0x20, 0xd7, 0x95, 0x57, 0x72, 0x9c, 0xfd, 0x93, 0x5c, 0x86, 0x01, 0xad, 0x62, 0xd3, 0x43,
	0xff, 0x93, 0xe3, 0xcd, 0x9a, 0x91, 0x53, 0xa3, 0x37, 0x05, 0xb4, 0x0a, 0xc9, 0xc2, 0x80, 0xa2,
	0x51, 0xc3, 0x18, 0x64, 0xc2, 0xbf, 0x51, 0xde, 0xd1, 0x52, 0x8b, 0xa1, 0x68, 0xe4, 0xaf, 0x00,
	0x0c, 0xe9, 0x42, 0x4e, 0xa3, 0x62, 0x78, 0x9f, 0xbd, 0xf6, 0xe2, 0x65, 0xd8, 0xbb, 0xc3, 0x25,
	0xee, 0x09, 0x39, 0x6d, 0x45, 0xd6, 0xd5, 0x1d, 0x76, 0xbe, 0xda, 0xbf, 0x91, 0x0f, 0xad, 0x0d,
	0x9f, 0xfa, 0x25, 0xee, 0xed, 0x0f, 0x41, 0x80, 0x98, 0xc0, 0x1b, 0xf3, 0x87, 0xe6, 0xc6, 0xac,
	0x06, 0xa9, 0xff, 0x03, 0x07, 0xbf, 0xfb, 0x4d, 0xb0, 0xe3, 0xd7, 0xcf, 0x40, 0x20, 0xdc, 0xc6,
	0xe1, 0xf8, 0xe4, 0x43, 0xd8, 0x8f, 0x69, 0xb3, 0xa0, 0x0a, 0x05, 0x67, 0x5d, 0xa0, 0x70, 0xa3,
	0x26, 0xfd, 0x86, 0x02, 0x26, 0xf0, 0xda, 0x7d, 0x93, 0x3e, 0x63, 0x17, 0xbc, 0x40, 0xb0, 0xe3,
	0xf6, 0xac, 0x31, 0xc3, 0x75, 0x3f, 0x01, 0x91, 0xa9, 0x4e, 0x93, 0x07, 0x24, 0x3d, 0x5c, 0xa3,
	0xb7, 0x2c, 0x15, 0x5d, 0x3e, 0xe4, 0x1f, 0xc3, 0xd1, 0x92, 0x86, 0x54, 0xbe, 0xa0, 0x64, 0xa5,
	0x6d, 0x49, 0xc4, 0x27, 0xcb, 0xbc, 0xf3, 0x75, 0x8f, 0x2d, 0x2d, 0x8f, 0x24, 0xac, 0xef, 0x7f,
	0x12, 0xd5, 0xef, 0x7f, 0x12, 0xf7, 0xaa, 0x16, 0x6c, 0xc8, 0x8c, 0xc8, 0x9d, 0x31, 0x41, 0x6e,
	0xbb, 0x30, 0x1c, 0x03, 0xf2, 0x0d, 0x9b, 0xf7, 0xe9, 0x0a, 0x6f, 0xfd, 0xbf, 0x24, 0xcb, 0x28,
	0x5f, 0xd5, 0x72, 0x23, 0xae, 0x3d, 0x81, 0x23, 0x4d, 0x83, 0x7b, 0x8a, 0x49, 0xd1, 0xee, 0x61,
	0xab, 0xb5, 0x22, 0xf9, 0x13, 0x48, 0x55, 0xeb, 0x16, 0xb6, 0xf2, 0x8a, 0xf8, 0x00, 0x65, 0x79,
	0x0d, 0xa9, 0x65, 0x49, 0x44, 0x1a, 0x15, 0x6f, 0xb2, 0xd5, 0x74, 0xec, 0x59, 0xfb, 0x4c, 0x88,
	0x1b, 0xb2, 0xfd, 0x59, 0xcb, 0x7d, 0xc3, 0xf6, 0x26, 0x6f, 0x42, 0x12, 0x23, 0x9a, 0xa9, 0xf9,
	0x11, 0xe6, 0x74, 0xf3, 0xb4, 0x0f, 0x7b, 0x2c, 0xe5, 0xf3, 0x0e, 0xca, 0xbb, 0x90, 0xa8, 0x6b,
	0xd7, 0x6b, 0x18, 0x83, 0xae, 0xc1, 0xc0, 0x1f, 0x45, 0x25, 0x6a, 0x5a, 0xe1, 0x3a, 0x3f, 0xe8,
	0xdb, 0xaa, 0x69, 0xe0, 0x3d, 0x38, 0x9c, 0x95, 0x54, 0x24, 0xea, 0xd5, 0x0c, 0xed, 0x68, 0x46,
	0x5f, 0x78, 0x61, 0x45, 0x78, 0x3b, 0x37, 0x68, 0x39, 0xdb, 0xa9, 0x9a, 0x33, 0xaf, 0x65, 0x38,
	0x54, 0x83, 0x8a, 0x64, 0x0b, 0xf4, 0xa2, 0x6f, 0xb3, 0xad, 0x59, 0x70, 0xd3, 0x8d, 0x65, 0xd5,
	0x21, 0x1c, 0x4d, 0xa8, 0x7d, 0x2b, 0x60, 0xd4, 0x13, 0x70, 0xc5, 0x42, 0x25, 0xf3, 0x30, 0x5a,
	0xe5, 0xc6, 0xd5, 0x44, 0xb3, 0x2c, 0xe9, 0x3b, 0xd4, 0x7c, 0x13, 0xb9, 0x61, 0xdd, 0x72, 0x68,
	0x1e, 0x6e, 0xa0, 0xe8, 0xb1, 0xc2, 0xa8, 0xe4, 0x0e, 0x1c, 0x51, 0xb6, 0xb7, 0xf3, 0x92, 0x8c,
	0x78, 0xad, 0xa4, 0x96, 0xa5, 0xb2, 0xb0, 0x25, 0xe5, 0x25, 0x7d, 0xc7, 0x52, 0xbb, 0x2f, 0xe3,
	0x98, 0x8c, 0xff, 0x72, 0x61, 0xb9, 0x6d, 0xb8, 0xbd, 0x7c, 0xb4, 0x6e, 0x4a, 0x69, 0x60, 0x47,
	0xae, 0xc2, 0xa8, 0xdd, 0x3f, 0xbc, 0x24, 0xeb, 0x48, 0x35, 0x49, 0x7c, 0x59, 0x2a, 0x52, 0x53,
	0x4d, 0x8f, 0x19, 0x48, 0xdb, 0x67, 0xcd, 0x76, 0xd9, 0x94, 0x8a, 0xe4, 0x9b, 0x70, 0xc0, 0xea,
	0x13, 0x2f, 0xd0, 0x95, 0xe6, 0xe7, 0x15, 0x96, 0x8b, 0x1b, 0xe7, 0xc7, 0x70, 0xa8, 0xca, 0x6d,
	0x05, 0x1d, 0x55, 0x84, 0x1d, 0xde, 0x9e, 0x0a, 0x54, 0xa2, 0x69, 0x25, 0x4c, 0xd4, 0xf2, 0xba,
	0x65, 0x39, 0xdd, 0xb4, 0x7c, 0x48, 0x0e, 0xf6, 0xd8, 0x68, 0xb2, 0xa0, 0x9b, 0x6c, 0x79, 0xa6,
	0xc9, 0x78, 0x59, 0x7a, 0x67, 0xe3, 0xce, 0xd2, 0x3d, 0x1b, 0xe1, 0x88, 0xdf, 0xaf, 0x76, 0x72,
	0x5d, 0x16, 0xc8, 0x1d, 0x41, 0xbf, 0x55, 0x21, 0xff, 0x1c, 0xc6, 0x6c, 0xcc, 0xb2, 0xa4, 0xea,
	0x25, 0x21, 0xcf, 0x57, 0xc7, 0x8a, 0xdd, 0x62, 0x6a, 0x16, 0x07, 0x59, 0x68, 0x98, 0x3d, 0x58,
	0x6e, 0xf6, 0x80, 0xf1, 0x8b, 0x37, 0x6a, 0x05, 0xf0, 0x35, 0x24, 0x27, 0x21, 0xa1, 0x95, 0x72,
	0x39, 0x64, 0xd2, 0x50, 0x5e, 0xc0, 0x82, 0x06, 0xc5, 0xe0, 0xc4, 0xa6, 0xcf, 0xb9, 0xbe, 0x84,
	0x2f, 0x93, 0x57, 0x60, 0x3f, 0x52, 0x55, 0x45, 0xe5, 0xb3, 0x48, 0x13, 0x55, 0x09, 0xab, 0x09,
	0x54, 0x12, 0xdb, 0x12, 0xf8, 0xc6, 0xcd, 0xa3, 0xeb, 0x66, 0x0f, 0x6e, 0xcf, 0x3d, 0x14, 0x79,
	0x0d, 0x89, 0x25, 0xd5, 0x1c, 0x7e, 0x96, 0x1e, 0x94, 0x6e, 0xf2, 0xda, 0xc3, 0x5c, 0xbf, 0xe9,
	0xb2, 0x61, 0x7b, 0x58, 0x7a, 0xcf, 0xcf, 0xe1, 0xa0, 0x58, 0xd2, 0x74, 0xa5, 0x50, 0x8b, 0x34,
	0x87, 0x91, 0x5e, 0xf3, 0x17, 0xeb, 0xdc, 0x10, 0xf8, 0x2d, 0x84, 0xb9, 0x01, 0x0b, 0xc6, 0x8b,
	0xfe, 0x23, 0xd8, 0x85, 0x97, 0x64, 0xdc, 0x7c, 0x8d, 0x5a, 0xc0, 0x1b, 0x4e, 0xac, 0xa1, 0x00,
	0xb8, 0x62, 0x9a, 0x71, 0x50, 0xab, 0xfe, 0x69, 0x66, 0xab, 0x84, 0xfd, 0x15, 0xa5, 0xb9, 0x6d,
	0x68, 0xba, 0xa0, 0x23, 0x6a, 0x31, 0x0e, 0x26, 0x7a, 0x93, 0x53, 0xbe, 0x28, 0xd6, 0x4c, 0xde,
	0x74, 0x5c, 0x36, 0x4c, 0x0f, 0xae, 0xaf, 0xec, 0xbd, 0x40, 0x2e, 0x43, 0x68, 0x3f, 0x75, 0x56,
	0xd6, 0xa8, 0xab, 0xf8, 0x51, 0xfd, 0x9b, 0xb5, 0x8c, 0xcd, 0x6e, 0xde, 0xd9, 0xb0, 0x19, 0x51,
	0xc4, 0xf2, 0xbb, 0x29, 0x6b, 0xe4, 0x7b, 0x30, 0xa2, 0x6f, 0xdb, 0x5b, 0x2a, 0xf5, 0xdf, 0x9d,
	0xc7, 0x66, 0x2f, 0xa3, 0x4f, 0x1f, 0x47, 0x31, 0xf9, 0x30, 0x79, 0xbc, 0xe5, 0x8f, 0x74, 0xa4,
	0x6a, 0x78, 0x9f, 0x0b, 0xeb, 0xdb, 0xd6, 0xee, 0x49, 0xbe, 0x0f, 0x7b, 0xf0, 0x27, 0xa2, 0xd6,
	0x0c, 0x15, 0xf2, 0xd4, 0x17, 0xc7, 0x0f, 0x11, 0x7d, 0xfa, 0xd8, 0xeb, 0x8c, 0xb1, 0xbb, 0xcd,
	0x4b, 0x6b, 0xf6, 0x15, 0xf2, 0x3d, 0xd8, 0x67, 0x25, 0x61, 0xb8, 0x87, 0x24, 0x79, 0x5b, 0xa1,
	0xbe, 0xec, 0x6c, 0x22, 0x7d, 0xfa, 0x64, 0x8b, 0x6e, 0xa9, 0x83, 0xeb, 0xc1, 0x68, 0xd5, 0x4b,
	0xe4, 0x3b, 0x70, 0xa0, 0x66, 0x17, 0xc0, 0x21, 0xfe, 0xa7, 0xb3, 0xc9, 0xb8, 0xf2, 0xec, 0x01,
	0x26, 0x0a, 0xd7, 0x9f, 0xad, 0xbd, 0x34, 0xb2, 0x00, 0x23, 0x0e, 0x2b, 0x22, 0x09, 0x18, 0x34,
	0xb9, 0x32, 0xae, 0x1c, 0xe7, 0xcc, 0x3f, 0xc9, 0x28, 0x6c, 0x2f, 0x0b, 0xf9, 0x12, 0xb2, 0xbe,
	0x2a, 0xe5, 0xac, 0x1f, 0xd7, 0x02, 0x8b, 0xe0, 0xda, 0x5f, 0x83, 0xe7, 0x06, 0xf8, 0x2b, 0x00,
	0xa7, 0xe0, 0x00, 0x56, 0xf4, 0xcc, 0x56, 0xc7, 0x37, 0x50, 0xde, 0x92, 0x19, 0xc9, 0x01, 0x86,
	0xa1, 0x99, 0x24, 0xcd, 0xd0, 0xcc, 0x2c, 0x9d, 0x4e, 0xd3, 0x73, 0x0c, 0x9d, 0x66, 0xe0, 0x25,
	0x18, 0xb5, 0xd4, 0x3f, 0x25, 0x8b, 0xe2, 0xeb, 0x4e, 0x57, 0x91, 0x3d, 0xf3, 0x34, 0x93, 0xa2,
	0x99, 0x39, 0x9a, 0x59, 0xa0, 0x99, 0x45, 0x98, 0x86, 0x43, 0x8e, 0x0c, 0xe8, 0xad, 0xa1, 0x1b,
	0x61, 0xac, 0x1a, 0xb9, 0x14, 0x9d, 0x9a, 0xa5, 0x53, 0x0c, 0x9d, 0x9c, 0xa7, 0x53, 0x69, 0x3a,
	0x75, 0x95, 0x9e, 0x5b, 0x60, 0xe3, 0x30, 0xe2, 0x7c, 0xdc, 0xeb, 0x7c, 0xb5, 0x00, 0x0f, 0x0c,
	0x10, 0x4c, 0xd2, 0x29, 0xb3, 0xc7, 0xd8, 0x31, 0x08, 0xb3, 0xa8, 0x98, 0x57, 0x76, 0x0a, 0x48,
	0xd6, 0x71, 0x49, 0x58, 0xc8, 0x3e, 0xd3, 0x03, 0xe9, 0x7f, 0x78, 0x06, 0x00, 0x3b, 0x01, 0xbb,
	0xdd, 0x89, 0x17, 0x49, 0xed, 0x19, 0xe0, 0xac, 0xfd, 0xa9, 0xc1, 0xc8, 0x81, 0x01, 0xc2, 0x4c,
	0x9a, 0x4e, 0x2e, 0xd0, 0xc9, 0x45, 0x76, 0x12, 0x46, 0x31, 0x7b, 0xaf, 0x72, 0xe6, 0x26, 0x05,
	0x69, 0x34, 0x1c, 0xae, 0x65, 0x1c, 0x6e, 0xeb, 0xe9, 0x7d, 0x03, 0x8c, 0x99, 0xd6, 0xe9, 0x39,
	0x3a, 0xb5, 0xc8, 0x32, 0x70, 0xb0, 0xa6, 0xa3, 0x6d, 0x5b, 0xb3, 0x2d, 0x17, 0xec, 0xb6, 0x8c,
	0x9b, 0x6d, 0x49, 0xcd, 0xd1, 0x73, 0x69, 0x3a, 0x35, 0xcf, 0x4e, 0xc0, 0x01, 0xf7, 0xbe, 0xe3,
	0x06, 0x9f, 0xda, 0x37, 0xc0, 0x24, 0x06, 0x4f, 0xd2, 0xe9, 0x14, 0xfb, 0x3e, 0x1c, 0xac, 0xd9,
	0x60, 0x6c, 0xdb, 0x95, 0x3d, 0x03, 0x24, 0xf6, 0x0d, 0x40, 0x9b, 0xc0, 0xe9, 0x79, 0x3a, 0xbd,
	0x40, 0xa7, 0x17, 0x7f, 0xfd, 0x0c, 0x4c, 0x8f, 0x5c, 0x31, 0x07, 0xaa, 0x9e, 0xab, 0x58, 0x03,
	0x55, 0x2b, 0x22, 0x11, 0x0f, 0xdd, 0xa3, 0x79, 0x96, 0x30, 0x47, 0xb1, 0x35, 0x6d, 0xd9, 0x29,
	0x38, 0xe8, 0x5d, 0xf7, 0xdc, 0x6d, 0x49, 0xef, 0x1b, 0x20, 0x65, 0xb6, 0x65, 0x2e, 0x49, 0xcf,
	0xa5, 0x32, 0xa1, 0x30, 0x24, 0xba, 0x9c, 0xa3, 0xbd, 0x11, 0x62, 0xd4, 0x39, 0xec, 0xb3, 0x4a,
	0xee, 0xc6, 0x88, 0xb8, 0xf3, 0x1d, 0xc4, 0x25, 0xe2, 0x35, 0xe7, 0x6b, 0x88, 0x09, 0x62, 0x32,
	0x13, 0x0a, 0x4f, 0x12, 0x53, 0x99, 0x50, 0x98, 0x26, 0xa6, 0x33, 0xa1, 0x70, 0x8a, 0x48, 0x8f,
	0x7f, 0x3d, 0x0c, 0x7b, 0x97, 0x55, 0x24, 0xe8, 0xc8, 0x91, 0xb3, 0x16, 0x5e, 0x5e, 0xce, 0xb2,
	0x84, 0xac, 0xcd, 0x53, 0x13, 0xb2, 0xbc, 0x12, 0x96, 0xf4, 0xcd, 0x48, 0x58, 0x7e, 0xe2, 0xd5,
	0x83, 0x6f, 0x48, 0xbc, 0xf2, 0x95, 0xad, 0xde, 0x3e, 0x91, 0x6c, 0x15, 0xf5, 0x93, 0xad, 0xdc,
	0x22, 0xd5, 0x05, 0x5f, 0x91, 0xa9, 0x46, 0x9c, 0x19, 0xad, 0x93, 0x05, 0x5c, 0xe9, 0xff, 0xb9,
	0x7a, 0xa1, 0xc1, 0x2d, 0x29, 0x0c, 0xd7, 0xa8, 0x03, 0x8e, 0x1a, 0x40, 0xd5, 0xa8, 0x01, 0x47,
	0xd9, 0xff, 0xd2, 0x49, 0xb2, 0xff, 0x53, 0xc9, 0xfb, 0x03, 0xbf, 0x87, 0xbc, 0x3f, 0xe0, 0xcd,
	0xfb, 0x7f, 0x74, 0xb2, 0xbc, 0x3f, 0xe4, 0xe4, 0xfc, 0xd7, 0x4f, 0x94, 0xf3, 0x87, 0x9c, 0x7c,
	0xff, 0xce, 0xcb, 0xa6, 0xfb, 0xde, 0x15, 0xe0, 0x28, 0xdd, 0xb7, 0xd3, 0xf6, 0x71, 0x3f, 0x25,
	0x6f, 0x35, 0xe8, 0x51, 0xed, 0xce, 0xfb, 0xa8, 0x76, 0xa6, 0xc9, 0xc9, 0x15, 0xba, 0x60, 0xbd,
	0x42, 0x77, 0xa2, 0x14, 0xf9, 0xfb, 0x9c, 0x1a, 0xdf, 0x39, 0x51, 0x6a, 0xdc, 0x38, 0x29, 0xce,
	0x9e, 0x66, 0x52, 0xdc, 0x30, 0x15, 0xde, 0x3a, 0xc5, 0x54, 0xb8, 0x51, 0x02, 0xac, 0x7c, 0x23,
	0x09, 0x70, 0x2b, 0xed, 0xfd, 0x41, 0xa5, 0xbd, 0xdf, 0x8f, 0xf4, 0xf4, 0x34, 0xd2, 0xc0, 0x93,
	0xe7, 0x23, 0xfd, 0x1f, 0x5f, 0xaf, 0x39, 0xd0, 0x64, 0x47, 0xdc, 0x19, 0x41, 0xcf, 0xee, 0x21,
	0x38, 0xfa, 0xc9, 0x9e, 0xf5, 0xe4, 0x02, 0xbd, 0xbb, 0x87, 0xc0, 0xf5, 0x9b, 0x9d, 0x6d, 0x40,
	0xef, 0xa9, 0xdd, 0x43, 0xe0, 0x7b, 0x87, 0x8d, 0xd7, 0xa4, 0x0e, 0xc4, 0xee, 0x21, 0xf0, 0x5c,
	0x61, 0xe7, 0x1b, 0xe7, 0x01, 0xa3, 0xbb, 0x87, 0xa0, 0xd1, 0x4d, 0x36, 0xd9, 0x28, 0x23, 0x38,
	0xb3, 0x7b, 0x08, 0xfc, 0x6f, 0xb1, 0x09, 0xff, 0x94, 0x60, 0x78, 0xf7, 0x10, 0xf8, 0xdd, 0x30,
	0x63, 0xf8, 0x27, 0x06, 0x38, 0x86, 0xef, 0x2d, 0xd3, 0xc7, 0x9f, 0xec, 0x63, 0x1f, 0xdf, 0x5b,
	0x35, 0xa4, 0xdf, 0xaa, 0xf3, 0xb3, 0xea, 0x00, 0x2c, 0xd2, 0x7f, 0x8e, 0x88, 0xd5, 0x50, 0x7f,
	0x8b, 0xf4, 0x5b, 0x09, 0x80, 0x3f, 0xf5, 0xff, 0xa8, 0x1f, 0xf6, 0xd9, 0x35, 0x7e, 0x0e, 0xf7,
	0x17, 0x7d, 0x28, 0xfc, 0xeb, 0x2f, 0x4d, 0xe1, 0x5d, 0x95, 0x83, 0x7e, 0x47, 0xd2, 0xe5, 0xc6,
	0x7c, 0x9e, 0x3d, 0x21, 0x9f, 0xf7, 0x8b, 0x58, 0x47, 0xee, 0x1f, 0x36, 0x26, 0xf7, 0xcb, 0x27,
	0x25, 0xf7, 0x7e, 0x81, 0x7f, 0x6f, 0x4c, 0xbf, 0xc5, 0xb7, 0x31, 0xdf, 0x6e, 0xd1, 0xd3, 0x16,
	0x3d, 0x6d, 0xd1, 0xd3, 0xef, 0x1c, 0x3d, 0x3d, 0x0d, 0x5a, 0x73, 0x6d, 0x17, 0xd4, 0xd1, 0x93,
	0xe7, 0x06, 0x28, 0xc0, 0x31, 0x7f, 0xf5, 0x34, 0xcc, 0xcc, 0xd2, 0x69, 0x86, 0x66, 0x18, 0x18,
	0x6f, 0x20, 0x99, 0x86, 0xb1, 0x54, 0x4a, 0x27, 0xe7, 0xe1, 0x44, 0x43, 0xb5, 0xb4, 0x97, 0xb9,
	0x4a, 0xa7, 0x98, 0x23, 0x85, 0x74, 0xd2, 0xcd, 0x87, 0xce, 0xd6, 0x28, 0xa4, 0x2d, 0x7a, 0xd4,
	0x90, 0x1e, 0x39, 0x45, 0x8c, 0x56, 0xe1, 0x62, 0x0f, 0xd1, 0x9b, 0x09, 0x85, 0xfb, 0x08, 0xe2,
	0x04, 0x74, 0xa6, 0x86, 0xc8, 0x8c, 0xff, 0xe3, 0x39, 0xd8, 0x75, 0x0b, 0xe9, 0x2d, 0xd1, 0xf2,
	0x07, 0x22, 0x5a, 0x26, 0x8f, 0x57, 0x59, 0xe7, 0x29, 0xa7, 0x7b, 0x75, 0xa1, 0xf3, 0xda, 0x0b,
	0x6b, 0xbe, 0x1a, 0x57, 0x77, 0x2d, 0xbe, 0xa8, 0xba, 0xab, 0x61, 0x1d, 0x57, 0x4b, 0x5e, 0x7d,
	0x25, 0xba, 0xf7, 0x3a, 0xc4, 0x47, 0xb3, 0xf6, 0x31, 0xec, 0x10, 0x3e, 0x86, 0x3d, 0xe7, 0xf7,
	0xac, 0xd5, 0x8f, 0x39, 0x10, 0x87, 0x17, 0x68, 0xeb, 0xcc, 0xf5, 0xde, 0x69, 0x94, 0x20, 0xd5,
	0x95, 0x17, 0xfd, 0xf4, 0x15, 0xcb, 0x8b, 0x9a, 0x15, 0x16, 0xbd, 0xe5, 0x51, 0x73, 0x17, 0x8e,
	0x51, 0xbc, 0x75, 0xb4, 0x2e, 0xb6, 0xa4, 0xdc, 0x16, 0x57, 0x6e, 0x71, 0xe5, 0x96, 0x94, 0xdb,
	0xaa, 0x60, 0x6a, 0x55, 0x30, 0x7d, 0x87, 0x2b, 0x98, 0xfe, 0xc0, 0x4a, 0x80, 0xa2, 0x75, 0x39,
	0xed, 0x17, 0xd7, 0x41, 0x4b, 0x75, 0xff, 0x8e, 0xab, 0xee, 0xc7, 0x4c, 0x4d, 0xdd, 0x1a, 0x3b,
	0xfb, 0x77, 0x60, 0xff, 0xb3, 0x58, 0xdb, 0x27, 0x9f, 0xc5, 0xda, 0xbe, 0xfa, 0x2c, 0x06, 0x3e,
	0x38, 0x88, 0x81, 0x7f, 0x3e, 0x88, 0x81, 0xdf, 0x1e, 0xc4, 0xc0, 0xfe, 0x41, 0x0c, 0x7c, 0x72,
	0x10, 0x03, 0xbf, 0x3b, 0x88, 0x81, 0x2f, 0x0e, 0x62, 0x6d, 0x5f, 0x1d, 0xc4, 0xc0, 0xdf, 0x7e,
	0x1e, 0x6b, 0xdb, 0xfb, 0x3c, 0x06, 0xf6, 0x3f, 0x8f, 0xb5, 0x7d, 0xf2, 0x79, 0xac, 0xed, 0xa7,
	0x9b, 0x39, 0xa5, 0xf8, 0x20, 0x97, 0xa8, 0xa6, 0x20, 0x89, 0x92, 0x36, 0xe3, 0x94, 0xec, 0x4d,
	0x17, 0x55, 0xa5, 0x2c, 0x65, 0x91, 0x3a, 0x5d, 0xbd, 0x3d, 0x53, 0xdc, 0xca, 0x29, 0x33, 0xe8,
	0xa1, 0x5e, 0xfd, 0x37, 0x23, 0x1a, 0xfd, 0x23, 0x1a, 0x5b, 0x1d, 0x98, 0x81, 0xa6, 0xfe, 0x3f,
	0x00, 0x00, 0xff, 0xff, 0x99, 0xfb, 0x35, 0xed, 0x6f, 0x63, 0x00, 0x00,
}

func (this *AWSVPCIngressGwType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressGwType)
	if !ok {
		that2, ok := that.(AWSVPCIngressGwType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if this.AwsCertifiedHw != that1.AwsCertifiedHw {
		return false
	}
	if !this.AllowedVipPort.Equal(that1.AllowedVipPort) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if this.AwsCertifiedHw != that1.AwsCertifiedHw {
		return false
	}
	if that1.InsideStaticRouteChoice == nil {
		if this.InsideStaticRouteChoice != nil {
			return false
		}
	} else if this.InsideStaticRouteChoice == nil {
		return false
	} else if !this.InsideStaticRouteChoice.Equal(that1.InsideStaticRouteChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	if !this.AllowedVipPort.Equal(that1.AllowedVipPort) {
		return false
	}
	if !this.AllowedVipPortSli.Equal(that1.AllowedVipPortSli) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_NoInsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_NoInsideStaticRoutes)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_NoInsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoInsideStaticRoutes.Equal(that1.NoInsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_InsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_InsideStaticRoutes)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_InsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideStaticRoutes.Equal(that1.InsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupOutsideVn.Equal(that1.DcClusterGroupOutsideVn) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_DcClusterGroupInsideVn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_DcClusterGroupInsideVn)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_DcClusterGroupInsideVn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupInsideVn.Equal(that1.DcClusterGroupInsideVn) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwType_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwType_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwType_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AwsCertifiedHw != that1.AwsCertifiedHw {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	if that1.StorageClassChoice == nil {
		if this.StorageClassChoice != nil {
			return false
		}
	} else if this.StorageClassChoice == nil {
		return false
	} else if !this.StorageClassChoice.Equal(that1.StorageClassChoice) {
		return false
	}
	if !this.AllowedVipPort.Equal(that1.AllowedVipPort) {
		return false
	}
	if that1.K8SClusterChoice == nil {
		if this.K8SClusterChoice != nil {
			return false
		}
	} else if this.K8SClusterChoice == nil {
		return false
	} else if !this.K8SClusterChoice.Equal(that1.K8SClusterChoice) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_DcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_DcClusterGroup)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_DcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroup.Equal(that1.DcClusterGroup) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_DefaultStorage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_DefaultStorage)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_DefaultStorage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultStorage.Equal(that1.DefaultStorage) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_StorageClassList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_StorageClassList)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_StorageClassList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StorageClassList.Equal(that1.StorageClassList) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_NoK8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_NoK8SCluster)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_NoK8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoK8SCluster.Equal(that1.NoK8SCluster) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterType_K8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterType_K8SCluster)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterType_K8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SCluster.Equal(that1.K8SCluster) {
		return false
	}
	return true
}
func (this *AWSVPCIngressGwReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressGwReplaceType)
	if !ok {
		that2, ok := that.(AWSVPCIngressGwReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowedVipPort.Equal(that1.AllowedVipPort) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.InsideStaticRouteChoice == nil {
		if this.InsideStaticRouteChoice != nil {
			return false
		}
	} else if this.InsideStaticRouteChoice == nil {
		return false
	} else if !this.InsideStaticRouteChoice.Equal(that1.InsideStaticRouteChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	if !this.AllowedVipPort.Equal(that1.AllowedVipPort) {
		return false
	}
	if !this.AllowedVipPortSli.Equal(that1.AllowedVipPortSli) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoInsideStaticRoutes.Equal(that1.NoInsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideStaticRoutes.Equal(that1.InsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupOutsideVn.Equal(that1.DcClusterGroupOutsideVn) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupInsideVn.Equal(that1.DcClusterGroupInsideVn) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	if !this.AllowedVipPort.Equal(that1.AllowedVipPort) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType_DcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType_DcClusterGroup)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType_DcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroup.Equal(that1.DcClusterGroup) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *AWSVPCSiteInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCSiteInfoType)
	if !ok {
		that2, ok := that.(AWSVPCSiteInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PublicIps) != len(that1.PublicIps) {
		return false
	}
	for i := range this.PublicIps {
		if this.PublicIps[i] != that1.PublicIps[i] {
			return false
		}
	}
	if len(this.PrivateIps) != len(that1.PrivateIps) {
		return false
	}
	for i := range this.PrivateIps {
		if this.PrivateIps[i] != that1.PrivateIps[i] {
			return false
		}
	}
	if len(this.SubnetIds) != len(that1.SubnetIds) {
		return false
	}
	for i := range this.SubnetIds {
		if !this.SubnetIds[i].Equal(that1.SubnetIds[i]) {
			return false
		}
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if this.VpcName != that1.VpcName {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vpc.Equal(that1.Vpc) {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.InstanceType != that1.InstanceType {
		return false
	}
	if that1.WorkerNodes == nil {
		if this.WorkerNodes != nil {
			return false
		}
	} else if this.WorkerNodes == nil {
		return false
	} else if !this.WorkerNodes.Equal(that1.WorkerNodes) {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if this.AwsRegion != that1.AwsRegion {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if !this.Sw.Equal(that1.Sw) {
		return false
	}
	if !this.Os.Equal(that1.Os) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if len(this.VipParamsPerAz) != len(that1.VipParamsPerAz) {
		return false
	}
	for i := range this.VipParamsPerAz {
		if !this.VipParamsPerAz[i].Equal(that1.VipParamsPerAz[i]) {
			return false
		}
	}
	if !this.UserModificationTimestamp.Equal(that1.UserModificationTimestamp) {
		return false
	}
	if this.SiteToSiteTunnelIp != that1.SiteToSiteTunnelIp {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if that1.DirectConnectChoice == nil {
		if this.DirectConnectChoice != nil {
			return false
		}
	} else if this.DirectConnectChoice == nil {
		return false
	} else if !this.DirectConnectChoice.Equal(that1.DirectConnectChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if that1.InternetVipChoice == nil {
		if this.InternetVipChoice != nil {
			return false
		}
	} else if this.InternetVipChoice == nil {
		return false
	} else if !this.InternetVipChoice.Equal(that1.InternetVipChoice) {
		return false
	}
	if that1.EgressGatewayChoice == nil {
		if this.EgressGatewayChoice != nil {
			return false
		}
	} else if this.EgressGatewayChoice == nil {
		return false
	} else if !this.EgressGatewayChoice.Equal(that1.EgressGatewayChoice) {
		return false
	}
	if this.SuggestedAction != that1.SuggestedAction {
		return false
	}
	if this.ErrorDescription != that1.ErrorDescription {
		return false
	}
	if that1.SecurityGroupChoice == nil {
		if this.SecurityGroupChoice != nil {
			return false
		}
	} else if this.SecurityGroupChoice == nil {
		return false
	} else if !this.SecurityGroupChoice.Equal(that1.SecurityGroupChoice) {
		return false
	}
	if len(this.SiteErrors) != len(that1.SiteErrors) {
		return false
	}
	for i := range this.SiteErrors {
		if !this.SiteErrors[i].Equal(that1.SiteErrors[i]) {
			return false
		}
	}
	if this.ValidationState != that1.ValidationState {
		return false
	}
	if !this.CustomDns.Equal(that1.CustomDns) {
		return false
	}
	if !this.TfParams.Equal(that1.TfParams) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if !this.CloudSiteInfo.Equal(that1.CloudSiteInfo) {
		return false
	}
	if !this.DirectConnectInfo.Equal(that1.DirectConnectInfo) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IngressGw)
	if !ok {
		that2, ok := that.(GlobalSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(GlobalSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *GlobalSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(GlobalSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AwsCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AwsCred)
	if !ok {
		that2, ok := that.(GlobalSpecType_AwsCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsCred.Equal(that1.AwsCred) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Assisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Assisted)
	if !ok {
		that2, ok := that.(GlobalSpecType_Assisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assisted.Equal(that1.Assisted) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NodesPerAz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NodesPerAz)
	if !ok {
		that2, ok := that.(GlobalSpecType_NodesPerAz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	return true
}
func (this *GlobalSpecType_TotalNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TotalNodes)
	if !ok {
		that2, ok := that.(GlobalSpecType_TotalNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalNodes != that1.TotalNodes {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoWorkerNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoWorkerNodes)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoWorkerNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoWorkerNodes.Equal(that1.NoWorkerNodes) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DirectConnectDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DirectConnectDisabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_DirectConnectDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectDisabled.Equal(that1.DirectConnectDisabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DirectConnectEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DirectConnectEnabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_DirectConnectEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectEnabled.Equal(that1.DirectConnectEnabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_PrivateConnectivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PrivateConnectivity)
	if !ok {
		that2, ok := that.(GlobalSpecType_PrivateConnectivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateConnectivity.Equal(that1.PrivateConnectivity) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableInternetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableInternetVip)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableInternetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableInternetVip.Equal(that1.DisableInternetVip) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableInternetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableInternetVip)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableInternetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableInternetVip.Equal(that1.EnableInternetVip) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EgressGatewayDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EgressGatewayDefault)
	if !ok {
		that2, ok := that.(GlobalSpecType_EgressGatewayDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EgressGatewayDefault.Equal(that1.EgressGatewayDefault) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EgressNatGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EgressNatGw)
	if !ok {
		that2, ok := that.(GlobalSpecType_EgressNatGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EgressNatGw.Equal(that1.EgressNatGw) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EgressVirtualPrivateGateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EgressVirtualPrivateGateway)
	if !ok {
		that2, ok := that.(GlobalSpecType_EgressVirtualPrivateGateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EgressVirtualPrivateGateway.Equal(that1.EgressVirtualPrivateGateway) {
		return false
	}
	return true
}
func (this *GlobalSpecType_F5XcSecurityGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_F5XcSecurityGroup)
	if !ok {
		that2, ok := that.(GlobalSpecType_F5XcSecurityGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5XcSecurityGroup.Equal(that1.F5XcSecurityGroup) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CustomSecurityGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CustomSecurityGroup)
	if !ok {
		that2, ok := that.(GlobalSpecType_CustomSecurityGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomSecurityGroup.Equal(that1.CustomSecurityGroup) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vpc.Equal(that1.Vpc) {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.InstanceType != that1.InstanceType {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if this.AwsRegion != that1.AwsRegion {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if !this.Sw.Equal(that1.Sw) {
		return false
	}
	if !this.Os.Equal(that1.Os) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if that1.WorkerNodes == nil {
		if this.WorkerNodes != nil {
			return false
		}
	} else if this.WorkerNodes == nil {
		return false
	} else if !this.WorkerNodes.Equal(that1.WorkerNodes) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if that1.DirectConnectChoice == nil {
		if this.DirectConnectChoice != nil {
			return false
		}
	} else if this.DirectConnectChoice == nil {
		return false
	} else if !this.DirectConnectChoice.Equal(that1.DirectConnectChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if that1.InternetVipChoice == nil {
		if this.InternetVipChoice != nil {
			return false
		}
	} else if this.InternetVipChoice == nil {
		return false
	} else if !this.InternetVipChoice.Equal(that1.InternetVipChoice) {
		return false
	}
	if that1.EgressGatewayChoice == nil {
		if this.EgressGatewayChoice != nil {
			return false
		}
	} else if this.EgressGatewayChoice == nil {
		return false
	} else if !this.EgressGatewayChoice.Equal(that1.EgressGatewayChoice) {
		return false
	}
	if that1.SecurityGroupChoice == nil {
		if this.SecurityGroupChoice != nil {
			return false
		}
	} else if this.SecurityGroupChoice == nil {
		return false
	} else if !this.SecurityGroupChoice.Equal(that1.SecurityGroupChoice) {
		return false
	}
	if !this.CustomDns.Equal(that1.CustomDns) {
		return false
	}
	return true
}
func (this *CreateSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IngressGw)
	if !ok {
		that2, ok := that.(CreateSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *CreateSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(CreateSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *CreateSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(CreateSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *CreateSpecType_AwsCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AwsCred)
	if !ok {
		that2, ok := that.(CreateSpecType_AwsCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsCred.Equal(that1.AwsCred) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(CreateSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(CreateSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *CreateSpecType_NodesPerAz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NodesPerAz)
	if !ok {
		that2, ok := that.(CreateSpecType_NodesPerAz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	return true
}
func (this *CreateSpecType_TotalNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_TotalNodes)
	if !ok {
		that2, ok := that.(CreateSpecType_TotalNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalNodes != that1.TotalNodes {
		return false
	}
	return true
}
func (this *CreateSpecType_NoWorkerNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoWorkerNodes)
	if !ok {
		that2, ok := that.(CreateSpecType_NoWorkerNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoWorkerNodes.Equal(that1.NoWorkerNodes) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *CreateSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(CreateSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *CreateSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(CreateSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *CreateSpecType_DirectConnectDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DirectConnectDisabled)
	if !ok {
		that2, ok := that.(CreateSpecType_DirectConnectDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectDisabled.Equal(that1.DirectConnectDisabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_DirectConnectEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DirectConnectEnabled)
	if !ok {
		that2, ok := that.(CreateSpecType_DirectConnectEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectEnabled.Equal(that1.DirectConnectEnabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_PrivateConnectivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_PrivateConnectivity)
	if !ok {
		that2, ok := that.(CreateSpecType_PrivateConnectivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateConnectivity.Equal(that1.PrivateConnectivity) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableInternetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableInternetVip)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableInternetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableInternetVip.Equal(that1.DisableInternetVip) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableInternetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableInternetVip)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableInternetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableInternetVip.Equal(that1.EnableInternetVip) {
		return false
	}
	return true
}
func (this *CreateSpecType_EgressGatewayDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EgressGatewayDefault)
	if !ok {
		that2, ok := that.(CreateSpecType_EgressGatewayDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EgressGatewayDefault.Equal(that1.EgressGatewayDefault) {
		return false
	}
	return true
}
func (this *CreateSpecType_EgressNatGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EgressNatGw)
	if !ok {
		that2, ok := that.(CreateSpecType_EgressNatGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EgressNatGw.Equal(that1.EgressNatGw) {
		return false
	}
	return true
}
func (this *CreateSpecType_EgressVirtualPrivateGateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EgressVirtualPrivateGateway)
	if !ok {
		that2, ok := that.(CreateSpecType_EgressVirtualPrivateGateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EgressVirtualPrivateGateway.Equal(that1.EgressVirtualPrivateGateway) {
		return false
	}
	return true
}
func (this *CreateSpecType_F5XcSecurityGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_F5XcSecurityGroup)
	if !ok {
		that2, ok := that.(CreateSpecType_F5XcSecurityGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5XcSecurityGroup.Equal(that1.F5XcSecurityGroup) {
		return false
	}
	return true
}
func (this *CreateSpecType_CustomSecurityGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CustomSecurityGroup)
	if !ok {
		that2, ok := that.(CreateSpecType_CustomSecurityGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomSecurityGroup.Equal(that1.CustomSecurityGroup) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.WorkerNodes == nil {
		if this.WorkerNodes != nil {
			return false
		}
	} else if this.WorkerNodes == nil {
		return false
	} else if !this.WorkerNodes.Equal(that1.WorkerNodes) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if that1.DirectConnectChoice == nil {
		if this.DirectConnectChoice != nil {
			return false
		}
	} else if this.DirectConnectChoice == nil {
		return false
	} else if !this.DirectConnectChoice.Equal(that1.DirectConnectChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if that1.InternetVipChoice == nil {
		if this.InternetVipChoice != nil {
			return false
		}
	} else if this.InternetVipChoice == nil {
		return false
	} else if !this.InternetVipChoice.Equal(that1.InternetVipChoice) {
		return false
	}
	if !this.CustomDns.Equal(that1.CustomDns) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IngressGw)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(ReplaceSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AwsCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AwsCred)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AwsCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsCred.Equal(that1.AwsCred) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NodesPerAz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NodesPerAz)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NodesPerAz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	return true
}
func (this *ReplaceSpecType_TotalNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_TotalNodes)
	if !ok {
		that2, ok := that.(ReplaceSpecType_TotalNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalNodes != that1.TotalNodes {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoWorkerNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoWorkerNodes)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoWorkerNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoWorkerNodes.Equal(that1.NoWorkerNodes) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DirectConnectDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DirectConnectDisabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DirectConnectDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectDisabled.Equal(that1.DirectConnectDisabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DirectConnectEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DirectConnectEnabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DirectConnectEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectEnabled.Equal(that1.DirectConnectEnabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_PrivateConnectivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_PrivateConnectivity)
	if !ok {
		that2, ok := that.(ReplaceSpecType_PrivateConnectivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateConnectivity.Equal(that1.PrivateConnectivity) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableInternetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableInternetVip)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableInternetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableInternetVip.Equal(that1.DisableInternetVip) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableInternetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableInternetVip)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableInternetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableInternetVip.Equal(that1.EnableInternetVip) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vpc.Equal(that1.Vpc) {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.InstanceType != that1.InstanceType {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if this.AwsRegion != that1.AwsRegion {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if this.SiteState != that1.SiteState {
		return false
	}
	if len(this.VipParamsPerAz) != len(that1.VipParamsPerAz) {
		return false
	}
	for i := range this.VipParamsPerAz {
		if !this.VipParamsPerAz[i].Equal(that1.VipParamsPerAz[i]) {
			return false
		}
	}
	if !this.UserModificationTimestamp.Equal(that1.UserModificationTimestamp) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if that1.WorkerNodes == nil {
		if this.WorkerNodes != nil {
			return false
		}
	} else if this.WorkerNodes == nil {
		return false
	} else if !this.WorkerNodes.Equal(that1.WorkerNodes) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if that1.DirectConnectChoice == nil {
		if this.DirectConnectChoice != nil {
			return false
		}
	} else if this.DirectConnectChoice == nil {
		return false
	} else if !this.DirectConnectChoice.Equal(that1.DirectConnectChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if that1.InternetVipChoice == nil {
		if this.InternetVipChoice != nil {
			return false
		}
	} else if this.InternetVipChoice == nil {
		return false
	} else if !this.InternetVipChoice.Equal(that1.InternetVipChoice) {
		return false
	}
	if that1.EgressGatewayChoice == nil {
		if this.EgressGatewayChoice != nil {
			return false
		}
	} else if this.EgressGatewayChoice == nil {
		return false
	} else if !this.EgressGatewayChoice.Equal(that1.EgressGatewayChoice) {
		return false
	}
	if this.SuggestedAction != that1.SuggestedAction {
		return false
	}
	if this.ErrorDescription != that1.ErrorDescription {
		return false
	}
	if that1.SecurityGroupChoice == nil {
		if this.SecurityGroupChoice != nil {
			return false
		}
	} else if this.SecurityGroupChoice == nil {
		return false
	} else if !this.SecurityGroupChoice.Equal(that1.SecurityGroupChoice) {
		return false
	}
	if len(this.SiteErrors) != len(that1.SiteErrors) {
		return false
	}
	for i := range this.SiteErrors {
		if !this.SiteErrors[i].Equal(that1.SiteErrors[i]) {
			return false
		}
	}
	if this.ValidationState != that1.ValidationState {
		return false
	}
	if !this.CustomDns.Equal(that1.CustomDns) {
		return false
	}
	if !this.CloudSiteInfo.Equal(that1.CloudSiteInfo) {
		return false
	}
	if !this.DirectConnectInfo.Equal(that1.DirectConnectInfo) {
		return false
	}
	return true
}
func (this *GetSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IngressGw)
	if !ok {
		that2, ok := that.(GetSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *GetSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(GetSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *GetSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(GetSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *GetSpecType_AwsCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AwsCred)
	if !ok {
		that2, ok := that.(GetSpecType_AwsCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsCred.Equal(that1.AwsCred) {
		return false
	}
	return true
}
func (this *GetSpecType_Assisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Assisted)
	if !ok {
		that2, ok := that.(GetSpecType_Assisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assisted.Equal(that1.Assisted) {
		return false
	}
	return true
}
func (this *GetSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GetSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GetSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GetSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GetSpecType_NodesPerAz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NodesPerAz)
	if !ok {
		that2, ok := that.(GetSpecType_NodesPerAz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	return true
}
func (this *GetSpecType_TotalNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_TotalNodes)
	if !ok {
		that2, ok := that.(GetSpecType_TotalNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalNodes != that1.TotalNodes {
		return false
	}
	return true
}
func (this *GetSpecType_NoWorkerNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoWorkerNodes)
	if !ok {
		that2, ok := that.(GetSpecType_NoWorkerNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoWorkerNodes.Equal(that1.NoWorkerNodes) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *GetSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(GetSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *GetSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(GetSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *GetSpecType_DirectConnectDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DirectConnectDisabled)
	if !ok {
		that2, ok := that.(GetSpecType_DirectConnectDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectDisabled.Equal(that1.DirectConnectDisabled) {
		return false
	}
	return true
}
func (this *GetSpecType_DirectConnectEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DirectConnectEnabled)
	if !ok {
		that2, ok := that.(GetSpecType_DirectConnectEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectEnabled.Equal(that1.DirectConnectEnabled) {
		return false
	}
	return true
}
func (this *GetSpecType_PrivateConnectivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PrivateConnectivity)
	if !ok {
		that2, ok := that.(GetSpecType_PrivateConnectivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateConnectivity.Equal(that1.PrivateConnectivity) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableInternetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableInternetVip)
	if !ok {
		that2, ok := that.(GetSpecType_DisableInternetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableInternetVip.Equal(that1.DisableInternetVip) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableInternetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableInternetVip)
	if !ok {
		that2, ok := that.(GetSpecType_EnableInternetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableInternetVip.Equal(that1.EnableInternetVip) {
		return false
	}
	return true
}
func (this *GetSpecType_EgressGatewayDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EgressGatewayDefault)
	if !ok {
		that2, ok := that.(GetSpecType_EgressGatewayDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EgressGatewayDefault.Equal(that1.EgressGatewayDefault) {
		return false
	}
	return true
}
func (this *GetSpecType_EgressNatGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EgressNatGw)
	if !ok {
		that2, ok := that.(GetSpecType_EgressNatGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EgressNatGw.Equal(that1.EgressNatGw) {
		return false
	}
	return true
}
func (this *GetSpecType_EgressVirtualPrivateGateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EgressVirtualPrivateGateway)
	if !ok {
		that2, ok := that.(GetSpecType_EgressVirtualPrivateGateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EgressVirtualPrivateGateway.Equal(that1.EgressVirtualPrivateGateway) {
		return false
	}
	return true
}
func (this *GetSpecType_F5XcSecurityGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_F5XcSecurityGroup)
	if !ok {
		that2, ok := that.(GetSpecType_F5XcSecurityGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5XcSecurityGroup.Equal(that1.F5XcSecurityGroup) {
		return false
	}
	return true
}
func (this *GetSpecType_CustomSecurityGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CustomSecurityGroup)
	if !ok {
		that2, ok := that.(GetSpecType_CustomSecurityGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomSecurityGroup.Equal(that1.CustomSecurityGroup) {
		return false
	}
	return true
}
func (this *AWSVPCIngressGwType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&aws_vpc_site.AWSVPCIngressGwType{")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	s = append(s, "AwsCertifiedHw: "+fmt.Sprintf("%#v", this.AwsCertifiedHw)+",\n")
	if this.AllowedVipPort != nil {
		s = append(s, "AllowedVipPort: "+fmt.Sprintf("%#v", this.AllowedVipPort)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSVPCIngressEgressGwType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&aws_vpc_site.AWSVPCIngressEgressGwType{")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	s = append(s, "AwsCertifiedHw: "+fmt.Sprintf("%#v", this.AwsCertifiedHw)+",\n")
	if this.InsideStaticRouteChoice != nil {
		s = append(s, "InsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.InsideStaticRouteChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	if this.AllowedVipPort != nil {
		s = append(s, "AllowedVipPort: "+fmt.Sprintf("%#v", this.AllowedVipPort)+",\n")
	}
	if this.AllowedVipPortSli != nil {
		s = append(s, "AllowedVipPortSli: "+fmt.Sprintf("%#v", this.AllowedVipPortSli)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSVPCIngressEgressGwType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_NoInsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_NoInsideStaticRoutes{` +
		`NoInsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoInsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_InsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_InsideStaticRoutes{` +
		`InsideStaticRoutes:` + fmt.Sprintf("%#v", this.InsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn{` +
		`DcClusterGroupOutsideVn:` + fmt.Sprintf("%#v", this.DcClusterGroupOutsideVn) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_DcClusterGroupInsideVn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_DcClusterGroupInsideVn{` +
		`DcClusterGroupInsideVn:` + fmt.Sprintf("%#v", this.DcClusterGroupInsideVn) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwType_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwType_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&aws_vpc_site.AWSVPCVoltstackClusterType{")
	s = append(s, "AwsCertifiedHw: "+fmt.Sprintf("%#v", this.AwsCertifiedHw)+",\n")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	if this.StorageClassChoice != nil {
		s = append(s, "StorageClassChoice: "+fmt.Sprintf("%#v", this.StorageClassChoice)+",\n")
	}
	if this.AllowedVipPort != nil {
		s = append(s, "AllowedVipPort: "+fmt.Sprintf("%#v", this.AllowedVipPort)+",\n")
	}
	if this.K8SClusterChoice != nil {
		s = append(s, "K8SClusterChoice: "+fmt.Sprintf("%#v", this.K8SClusterChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSVPCVoltstackClusterType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_DcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_DcClusterGroup{` +
		`DcClusterGroup:` + fmt.Sprintf("%#v", this.DcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_DefaultStorage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_DefaultStorage{` +
		`DefaultStorage:` + fmt.Sprintf("%#v", this.DefaultStorage) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_StorageClassList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_StorageClassList{` +
		`StorageClassList:` + fmt.Sprintf("%#v", this.StorageClassList) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_NoK8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_NoK8SCluster{` +
		`NoK8SCluster:` + fmt.Sprintf("%#v", this.NoK8SCluster) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterType_K8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterType_K8SCluster{` +
		`K8SCluster:` + fmt.Sprintf("%#v", this.K8SCluster) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressGwReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aws_vpc_site.AWSVPCIngressGwReplaceType{")
	if this.AllowedVipPort != nil {
		s = append(s, "AllowedVipPort: "+fmt.Sprintf("%#v", this.AllowedVipPort)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSVPCIngressEgressGwReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 24)
	s = append(s, "&aws_vpc_site.AWSVPCIngressEgressGwReplaceType{")
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.InsideStaticRouteChoice != nil {
		s = append(s, "InsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.InsideStaticRouteChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	if this.AllowedVipPort != nil {
		s = append(s, "AllowedVipPort: "+fmt.Sprintf("%#v", this.AllowedVipPort)+",\n")
	}
	if this.AllowedVipPortSli != nil {
		s = append(s, "AllowedVipPortSli: "+fmt.Sprintf("%#v", this.AllowedVipPortSli)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes{` +
		`NoInsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoInsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes{` +
		`InsideStaticRoutes:` + fmt.Sprintf("%#v", this.InsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn{` +
		`DcClusterGroupOutsideVn:` + fmt.Sprintf("%#v", this.DcClusterGroupOutsideVn) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn{` +
		`DcClusterGroupInsideVn:` + fmt.Sprintf("%#v", this.DcClusterGroupInsideVn) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&aws_vpc_site.AWSVPCVoltstackClusterReplaceType{")
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	if this.AllowedVipPort != nil {
		s = append(s, "AllowedVipPort: "+fmt.Sprintf("%#v", this.AllowedVipPort)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterReplaceType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterReplaceType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_DcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterReplaceType_DcClusterGroup{` +
		`DcClusterGroup:` + fmt.Sprintf("%#v", this.DcClusterGroup) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *AWSVPCSiteInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&aws_vpc_site.AWSVPCSiteInfoType{")
	s = append(s, "PublicIps: "+fmt.Sprintf("%#v", this.PublicIps)+",\n")
	s = append(s, "PrivateIps: "+fmt.Sprintf("%#v", this.PrivateIps)+",\n")
	if this.SubnetIds != nil {
		s = append(s, "SubnetIds: "+fmt.Sprintf("%#v", this.SubnetIds)+",\n")
	}
	s = append(s, "VpcId: "+fmt.Sprintf("%#v", this.VpcId)+",\n")
	s = append(s, "VpcName: "+fmt.Sprintf("%#v", this.VpcName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 52)
	s = append(s, "&aws_vpc_site.GlobalSpecType{")
	if this.Vpc != nil {
		s = append(s, "Vpc: "+fmt.Sprintf("%#v", this.Vpc)+",\n")
	}
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "InstanceType: "+fmt.Sprintf("%#v", this.InstanceType)+",\n")
	if this.WorkerNodes != nil {
		s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	}
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	s = append(s, "AwsRegion: "+fmt.Sprintf("%#v", this.AwsRegion)+",\n")
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.Sw != nil {
		s = append(s, "Sw: "+fmt.Sprintf("%#v", this.Sw)+",\n")
	}
	if this.Os != nil {
		s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	if this.VipParamsPerAz != nil {
		s = append(s, "VipParamsPerAz: "+fmt.Sprintf("%#v", this.VipParamsPerAz)+",\n")
	}
	if this.UserModificationTimestamp != nil {
		s = append(s, "UserModificationTimestamp: "+fmt.Sprintf("%#v", this.UserModificationTimestamp)+",\n")
	}
	s = append(s, "SiteToSiteTunnelIp: "+fmt.Sprintf("%#v", this.SiteToSiteTunnelIp)+",\n")
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.DirectConnectChoice != nil {
		s = append(s, "DirectConnectChoice: "+fmt.Sprintf("%#v", this.DirectConnectChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.InternetVipChoice != nil {
		s = append(s, "InternetVipChoice: "+fmt.Sprintf("%#v", this.InternetVipChoice)+",\n")
	}
	if this.EgressGatewayChoice != nil {
		s = append(s, "EgressGatewayChoice: "+fmt.Sprintf("%#v", this.EgressGatewayChoice)+",\n")
	}
	s = append(s, "SuggestedAction: "+fmt.Sprintf("%#v", this.SuggestedAction)+",\n")
	s = append(s, "ErrorDescription: "+fmt.Sprintf("%#v", this.ErrorDescription)+",\n")
	if this.SecurityGroupChoice != nil {
		s = append(s, "SecurityGroupChoice: "+fmt.Sprintf("%#v", this.SecurityGroupChoice)+",\n")
	}
	if this.SiteErrors != nil {
		s = append(s, "SiteErrors: "+fmt.Sprintf("%#v", this.SiteErrors)+",\n")
	}
	s = append(s, "ValidationState: "+fmt.Sprintf("%#v", this.ValidationState)+",\n")
	if this.CustomDns != nil {
		s = append(s, "CustomDns: "+fmt.Sprintf("%#v", this.CustomDns)+",\n")
	}
	if this.TfParams != nil {
		s = append(s, "TfParams: "+fmt.Sprintf("%#v", this.TfParams)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	if this.CloudSiteInfo != nil {
		s = append(s, "CloudSiteInfo: "+fmt.Sprintf("%#v", this.CloudSiteInfo)+",\n")
	}
	if this.DirectConnectInfo != nil {
		s = append(s, "DirectConnectInfo: "+fmt.Sprintf("%#v", this.DirectConnectInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AwsCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_AwsCred{` +
		`AwsCred:` + fmt.Sprintf("%#v", this.AwsCred) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Assisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_Assisted{` +
		`Assisted:` + fmt.Sprintf("%#v", this.Assisted) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NodesPerAz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_NodesPerAz{` +
		`NodesPerAz:` + fmt.Sprintf("%#v", this.NodesPerAz) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_TotalNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_TotalNodes{` +
		`TotalNodes:` + fmt.Sprintf("%#v", this.TotalNodes) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoWorkerNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_NoWorkerNodes{` +
		`NoWorkerNodes:` + fmt.Sprintf("%#v", this.NoWorkerNodes) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DirectConnectDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_DirectConnectDisabled{` +
		`DirectConnectDisabled:` + fmt.Sprintf("%#v", this.DirectConnectDisabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DirectConnectEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_DirectConnectEnabled{` +
		`DirectConnectEnabled:` + fmt.Sprintf("%#v", this.DirectConnectEnabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PrivateConnectivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_PrivateConnectivity{` +
		`PrivateConnectivity:` + fmt.Sprintf("%#v", this.PrivateConnectivity) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableInternetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_DisableInternetVip{` +
		`DisableInternetVip:` + fmt.Sprintf("%#v", this.DisableInternetVip) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableInternetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_EnableInternetVip{` +
		`EnableInternetVip:` + fmt.Sprintf("%#v", this.EnableInternetVip) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EgressGatewayDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_EgressGatewayDefault{` +
		`EgressGatewayDefault:` + fmt.Sprintf("%#v", this.EgressGatewayDefault) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EgressNatGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_EgressNatGw{` +
		`EgressNatGw:` + fmt.Sprintf("%#v", this.EgressNatGw) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EgressVirtualPrivateGateway) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_EgressVirtualPrivateGateway{` +
		`EgressVirtualPrivateGateway:` + fmt.Sprintf("%#v", this.EgressVirtualPrivateGateway) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_F5XcSecurityGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_F5XcSecurityGroup{` +
		`F5XcSecurityGroup:` + fmt.Sprintf("%#v", this.F5XcSecurityGroup) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CustomSecurityGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GlobalSpecType_CustomSecurityGroup{` +
		`CustomSecurityGroup:` + fmt.Sprintf("%#v", this.CustomSecurityGroup) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 38)
	s = append(s, "&aws_vpc_site.CreateSpecType{")
	if this.Vpc != nil {
		s = append(s, "Vpc: "+fmt.Sprintf("%#v", this.Vpc)+",\n")
	}
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "InstanceType: "+fmt.Sprintf("%#v", this.InstanceType)+",\n")
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	s = append(s, "AwsRegion: "+fmt.Sprintf("%#v", this.AwsRegion)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.Sw != nil {
		s = append(s, "Sw: "+fmt.Sprintf("%#v", this.Sw)+",\n")
	}
	if this.Os != nil {
		s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	if this.WorkerNodes != nil {
		s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.DirectConnectChoice != nil {
		s = append(s, "DirectConnectChoice: "+fmt.Sprintf("%#v", this.DirectConnectChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.InternetVipChoice != nil {
		s = append(s, "InternetVipChoice: "+fmt.Sprintf("%#v", this.InternetVipChoice)+",\n")
	}
	if this.EgressGatewayChoice != nil {
		s = append(s, "EgressGatewayChoice: "+fmt.Sprintf("%#v", this.EgressGatewayChoice)+",\n")
	}
	if this.SecurityGroupChoice != nil {
		s = append(s, "SecurityGroupChoice: "+fmt.Sprintf("%#v", this.SecurityGroupChoice)+",\n")
	}
	if this.CustomDns != nil {
		s = append(s, "CustomDns: "+fmt.Sprintf("%#v", this.CustomDns)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AwsCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_AwsCred{` +
		`AwsCred:` + fmt.Sprintf("%#v", this.AwsCred) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NodesPerAz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_NodesPerAz{` +
		`NodesPerAz:` + fmt.Sprintf("%#v", this.NodesPerAz) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_TotalNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_TotalNodes{` +
		`TotalNodes:` + fmt.Sprintf("%#v", this.TotalNodes) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoWorkerNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_NoWorkerNodes{` +
		`NoWorkerNodes:` + fmt.Sprintf("%#v", this.NoWorkerNodes) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DirectConnectDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_DirectConnectDisabled{` +
		`DirectConnectDisabled:` + fmt.Sprintf("%#v", this.DirectConnectDisabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DirectConnectEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_DirectConnectEnabled{` +
		`DirectConnectEnabled:` + fmt.Sprintf("%#v", this.DirectConnectEnabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_PrivateConnectivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_PrivateConnectivity{` +
		`PrivateConnectivity:` + fmt.Sprintf("%#v", this.PrivateConnectivity) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableInternetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_DisableInternetVip{` +
		`DisableInternetVip:` + fmt.Sprintf("%#v", this.DisableInternetVip) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableInternetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_EnableInternetVip{` +
		`EnableInternetVip:` + fmt.Sprintf("%#v", this.EnableInternetVip) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EgressGatewayDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_EgressGatewayDefault{` +
		`EgressGatewayDefault:` + fmt.Sprintf("%#v", this.EgressGatewayDefault) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EgressNatGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_EgressNatGw{` +
		`EgressNatGw:` + fmt.Sprintf("%#v", this.EgressNatGw) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EgressVirtualPrivateGateway) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_EgressVirtualPrivateGateway{` +
		`EgressVirtualPrivateGateway:` + fmt.Sprintf("%#v", this.EgressVirtualPrivateGateway) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_F5XcSecurityGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_F5XcSecurityGroup{` +
		`F5XcSecurityGroup:` + fmt.Sprintf("%#v", this.F5XcSecurityGroup) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CustomSecurityGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.CreateSpecType_CustomSecurityGroup{` +
		`CustomSecurityGroup:` + fmt.Sprintf("%#v", this.CustomSecurityGroup) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&aws_vpc_site.ReplaceSpecType{")
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.WorkerNodes != nil {
		s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.DirectConnectChoice != nil {
		s = append(s, "DirectConnectChoice: "+fmt.Sprintf("%#v", this.DirectConnectChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.InternetVipChoice != nil {
		s = append(s, "InternetVipChoice: "+fmt.Sprintf("%#v", this.InternetVipChoice)+",\n")
	}
	if this.CustomDns != nil {
		s = append(s, "CustomDns: "+fmt.Sprintf("%#v", this.CustomDns)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AwsCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_AwsCred{` +
		`AwsCred:` + fmt.Sprintf("%#v", this.AwsCred) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NodesPerAz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_NodesPerAz{` +
		`NodesPerAz:` + fmt.Sprintf("%#v", this.NodesPerAz) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_TotalNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_TotalNodes{` +
		`TotalNodes:` + fmt.Sprintf("%#v", this.TotalNodes) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoWorkerNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_NoWorkerNodes{` +
		`NoWorkerNodes:` + fmt.Sprintf("%#v", this.NoWorkerNodes) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DirectConnectDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_DirectConnectDisabled{` +
		`DirectConnectDisabled:` + fmt.Sprintf("%#v", this.DirectConnectDisabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DirectConnectEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_DirectConnectEnabled{` +
		`DirectConnectEnabled:` + fmt.Sprintf("%#v", this.DirectConnectEnabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_PrivateConnectivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_PrivateConnectivity{` +
		`PrivateConnectivity:` + fmt.Sprintf("%#v", this.PrivateConnectivity) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableInternetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_DisableInternetVip{` +
		`DisableInternetVip:` + fmt.Sprintf("%#v", this.DisableInternetVip) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableInternetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.ReplaceSpecType_EnableInternetVip{` +
		`EnableInternetVip:` + fmt.Sprintf("%#v", this.EnableInternetVip) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 48)
	s = append(s, "&aws_vpc_site.GetSpecType{")
	if this.Vpc != nil {
		s = append(s, "Vpc: "+fmt.Sprintf("%#v", this.Vpc)+",\n")
	}
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "InstanceType: "+fmt.Sprintf("%#v", this.InstanceType)+",\n")
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	s = append(s, "AwsRegion: "+fmt.Sprintf("%#v", this.AwsRegion)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	s = append(s, "SiteState: "+fmt.Sprintf("%#v", this.SiteState)+",\n")
	if this.VipParamsPerAz != nil {
		s = append(s, "VipParamsPerAz: "+fmt.Sprintf("%#v", this.VipParamsPerAz)+",\n")
	}
	if this.UserModificationTimestamp != nil {
		s = append(s, "UserModificationTimestamp: "+fmt.Sprintf("%#v", this.UserModificationTimestamp)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	if this.WorkerNodes != nil {
		s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.DirectConnectChoice != nil {
		s = append(s, "DirectConnectChoice: "+fmt.Sprintf("%#v", this.DirectConnectChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.InternetVipChoice != nil {
		s = append(s, "InternetVipChoice: "+fmt.Sprintf("%#v", this.InternetVipChoice)+",\n")
	}
	if this.EgressGatewayChoice != nil {
		s = append(s, "EgressGatewayChoice: "+fmt.Sprintf("%#v", this.EgressGatewayChoice)+",\n")
	}
	s = append(s, "SuggestedAction: "+fmt.Sprintf("%#v", this.SuggestedAction)+",\n")
	s = append(s, "ErrorDescription: "+fmt.Sprintf("%#v", this.ErrorDescription)+",\n")
	if this.SecurityGroupChoice != nil {
		s = append(s, "SecurityGroupChoice: "+fmt.Sprintf("%#v", this.SecurityGroupChoice)+",\n")
	}
	if this.SiteErrors != nil {
		s = append(s, "SiteErrors: "+fmt.Sprintf("%#v", this.SiteErrors)+",\n")
	}
	s = append(s, "ValidationState: "+fmt.Sprintf("%#v", this.ValidationState)+",\n")
	if this.CustomDns != nil {
		s = append(s, "CustomDns: "+fmt.Sprintf("%#v", this.CustomDns)+",\n")
	}
	if this.CloudSiteInfo != nil {
		s = append(s, "CloudSiteInfo: "+fmt.Sprintf("%#v", this.CloudSiteInfo)+",\n")
	}
	if this.DirectConnectInfo != nil {
		s = append(s, "DirectConnectInfo: "+fmt.Sprintf("%#v", this.DirectConnectInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *GetSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AwsCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_AwsCred{` +
		`AwsCred:` + fmt.Sprintf("%#v", this.AwsCred) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Assisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_Assisted{` +
		`Assisted:` + fmt.Sprintf("%#v", this.Assisted) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NodesPerAz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_NodesPerAz{` +
		`NodesPerAz:` + fmt.Sprintf("%#v", this.NodesPerAz) + `}`}, ", ")
	return s
}
func (this *GetSpecType_TotalNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_TotalNodes{` +
		`TotalNodes:` + fmt.Sprintf("%#v", this.TotalNodes) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoWorkerNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_NoWorkerNodes{` +
		`NoWorkerNodes:` + fmt.Sprintf("%#v", this.NoWorkerNodes) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DirectConnectDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_DirectConnectDisabled{` +
		`DirectConnectDisabled:` + fmt.Sprintf("%#v", this.DirectConnectDisabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DirectConnectEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_DirectConnectEnabled{` +
		`DirectConnectEnabled:` + fmt.Sprintf("%#v", this.DirectConnectEnabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_PrivateConnectivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_PrivateConnectivity{` +
		`PrivateConnectivity:` + fmt.Sprintf("%#v", this.PrivateConnectivity) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableInternetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_DisableInternetVip{` +
		`DisableInternetVip:` + fmt.Sprintf("%#v", this.DisableInternetVip) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableInternetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_EnableInternetVip{` +
		`EnableInternetVip:` + fmt.Sprintf("%#v", this.EnableInternetVip) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EgressGatewayDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_EgressGatewayDefault{` +
		`EgressGatewayDefault:` + fmt.Sprintf("%#v", this.EgressGatewayDefault) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EgressNatGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_EgressNatGw{` +
		`EgressNatGw:` + fmt.Sprintf("%#v", this.EgressNatGw) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EgressVirtualPrivateGateway) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_EgressVirtualPrivateGateway{` +
		`EgressVirtualPrivateGateway:` + fmt.Sprintf("%#v", this.EgressVirtualPrivateGateway) + `}`}, ", ")
	return s
}
func (this *GetSpecType_F5XcSecurityGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_F5XcSecurityGroup{` +
		`F5XcSecurityGroup:` + fmt.Sprintf("%#v", this.F5XcSecurityGroup) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CustomSecurityGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_vpc_site.GetSpecType_CustomSecurityGroup{` +
		`CustomSecurityGroup:` + fmt.Sprintf("%#v", this.CustomSecurityGroup) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AWSVPCIngressGwType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSVPCIngressGwType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressGwType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.AllowedVipPort != nil {
		{
			size, err := m.AllowedVipPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AwsCertifiedHw) > 0 {
		i -= len(m.AwsCertifiedHw)
		copy(dAtA[i:], m.AwsCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsCertifiedHw)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AzNodes) > 0 {
		for iNdEx := len(m.AzNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AzNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AWSVPCIngressEgressGwType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSVPCIngressEgressGwType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AllowedVipPortSli != nil {
		{
			size, err := m.AllowedVipPortSli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.AllowedVipPort != nil {
		{
			size, err := m.AllowedVipPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OutsideStaticRouteChoice != nil {
		{
			size := m.OutsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InsideStaticRouteChoice != nil {
		{
			size := m.InsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.InsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AwsCertifiedHw) > 0 {
		i -= len(m.AwsCertifiedHw)
		copy(dAtA[i:], m.AwsCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsCertifiedHw)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AzNodes) > 0 {
		for iNdEx := len(m.AzNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AzNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AWSVPCIngressEgressGwType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_NoInsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_NoInsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoInsideStaticRoutes != nil {
		{
			size, err := m.NoInsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_InsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_InsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InsideStaticRoutes != nil {
		{
			size, err := m.InsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_NoOutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoOutsideStaticRoutes != nil {
		{
			size, err := m.NoOutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_OutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideStaticRoutes != nil {
		{
			size, err := m.OutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupOutsideVn != nil {
		{
			size, err := m.DcClusterGroupOutsideVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_DcClusterGroupInsideVn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_DcClusterGroupInsideVn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupInsideVn != nil {
		{
			size, err := m.DcClusterGroupInsideVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSVPCVoltstackClusterType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.K8SClusterChoice != nil {
		{
			size := m.K8SClusterChoice.Size()
			i -= size
			if _, err := m.K8SClusterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AllowedVipPort != nil {
		{
			size, err := m.AllowedVipPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.StorageClassChoice != nil {
		{
			size := m.StorageClassChoice.Size()
			i -= size
			if _, err := m.StorageClassChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OutsideStaticRouteChoice != nil {
		{
			size := m.OutsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AzNodes) > 0 {
		for iNdEx := len(m.AzNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AzNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AwsCertifiedHw) > 0 {
		i -= len(m.AwsCertifiedHw)
		copy(dAtA[i:], m.AwsCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsCertifiedHw)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AWSVPCVoltstackClusterType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_NoOutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoOutsideStaticRoutes != nil {
		{
			size, err := m.NoOutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_OutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideStaticRoutes != nil {
		{
			size, err := m.OutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_DefaultStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_DefaultStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultStorage != nil {
		{
			size, err := m.DefaultStorage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_StorageClassList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_StorageClassList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StorageClassList != nil {
		{
			size, err := m.StorageClassList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_NoK8SCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_NoK8SCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoK8SCluster != nil {
		{
			size, err := m.NoK8SCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_K8SCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_K8SCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.K8SCluster != nil {
		{
			size, err := m.K8SCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_DcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_DcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroup != nil {
		{
			size, err := m.DcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressGwReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSVPCIngressGwReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressGwReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.AllowedVipPort != nil {
		{
			size, err := m.AllowedVipPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *AWSVPCIngressEgressGwReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSVPCIngressEgressGwReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AllowedVipPortSli != nil {
		{
			size, err := m.AllowedVipPortSli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.AllowedVipPort != nil {
		{
			size, err := m.AllowedVipPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OutsideStaticRouteChoice != nil {
		{
			size := m.OutsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InsideStaticRouteChoice != nil {
		{
			size := m.InsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.InsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoInsideStaticRoutes != nil {
		{
			size, err := m.NoInsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InsideStaticRoutes != nil {
		{
			size, err := m.InsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoOutsideStaticRoutes != nil {
		{
			size, err := m.NoOutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideStaticRoutes != nil {
		{
			size, err := m.OutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupOutsideVn != nil {
		{
			size, err := m.DcClusterGroupOutsideVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupInsideVn != nil {
		{
			size, err := m.DcClusterGroupInsideVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSVPCVoltstackClusterReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AllowedVipPort != nil {
		{
			size, err := m.AllowedVipPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OutsideStaticRouteChoice != nil {
		{
			size := m.OutsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterReplaceType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoOutsideStaticRoutes != nil {
		{
			size, err := m.NoOutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideStaticRoutes != nil {
		{
			size, err := m.OutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterReplaceType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterReplaceType_DcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType_DcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroup != nil {
		{
			size, err := m.DcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPCSiteInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSVPCSiteInfoType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPCSiteInfoType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VpcName) > 0 {
		i -= len(m.VpcName)
		copy(dAtA[i:], m.VpcName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VpcName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VpcId) > 0 {
		i -= len(m.VpcId)
		copy(dAtA[i:], m.VpcId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VpcId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubnetIds) > 0 {
		for iNdEx := len(m.SubnetIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubnetIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PrivateIps) > 0 {
		for iNdEx := len(m.PrivateIps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrivateIps[iNdEx])
			copy(dAtA[i:], m.PrivateIps[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.PrivateIps[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PublicIps) > 0 {
		for iNdEx := len(m.PublicIps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PublicIps[iNdEx])
			copy(dAtA[i:], m.PublicIps[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicIps[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DirectConnectInfo != nil {
		{
			size, err := m.DirectConnectInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd2
	}
	if m.CloudSiteInfo != nil {
		{
			size, err := m.CloudSiteInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.TfParams != nil {
		{
			size, err := m.TfParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xba
	}
	if m.CustomDns != nil {
		{
			size, err := m.CustomDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.ValidationState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidationState))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if len(m.SiteErrors) > 0 {
		for iNdEx := len(m.SiteErrors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SiteErrors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xba
		}
	}
	if m.DirectConnectChoice != nil {
		{
			size := m.DirectConnectChoice.Size()
			i -= size
			if _, err := m.DirectConnectChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SecurityGroupChoice != nil {
		{
			size := m.SecurityGroupChoice.Size()
			i -= size
			if _, err := m.SecurityGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ErrorDescription) > 0 {
		i -= len(m.ErrorDescription)
		copy(dAtA[i:], m.ErrorDescription)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ErrorDescription)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.SuggestedAction) > 0 {
		i -= len(m.SuggestedAction)
		copy(dAtA[i:], m.SuggestedAction)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SuggestedAction)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	if m.EgressGatewayChoice != nil {
		{
			size := m.EgressGatewayChoice.Size()
			i -= size
			if _, err := m.EgressGatewayChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InternetVipChoice != nil {
		{
			size := m.InternetVipChoice.Size()
			i -= size
			if _, err := m.InternetVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.SiteToSiteTunnelIp) > 0 {
		i -= len(m.SiteToSiteTunnelIp)
		copy(dAtA[i:], m.SiteToSiteTunnelIp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SiteToSiteTunnelIp)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.WorkerNodes != nil {
		{
			size := m.WorkerNodes.Size()
			i -= size
			if _, err := m.WorkerNodes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UserModificationTimestamp != nil {
		{
			size, err := m.UserModificationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.VipParamsPerAz) > 0 {
		for iNdEx := len(m.VipParamsPerAz) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VipParamsPerAz[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.Os != nil {
		{
			size, err := m.Os.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.Sw != nil {
		{
			size, err := m.Sw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.SiteType != nil {
		{
			size := m.SiteType.Size()
			i -= size
			if _, err := m.SiteType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DiskSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
		i--
		dAtA[i] = 0x78
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AwsRegion) > 0 {
		i -= len(m.AwsRegion)
		copy(dAtA[i:], m.AwsRegion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsRegion)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.OperatingSystemVersion) > 0 {
		i -= len(m.OperatingSystemVersion)
		copy(dAtA[i:], m.OperatingSystemVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		i -= len(m.VolterraSoftwareVersion)
		copy(dAtA[i:], m.VolterraSoftwareVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.InstanceType) > 0 {
		i -= len(m.InstanceType)
		copy(dAtA[i:], m.InstanceType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InstanceType)))
		i--
		dAtA[i] = 0x32
	}
	if m.Deployment != nil {
		{
			size := m.Deployment.Size()
			i -= size
			if _, err := m.Deployment.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Vpc != nil {
		{
			size, err := m.Vpc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_IngressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressGw != nil {
		{
			size, err := m.IngressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_IngressEgressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressEgressGw != nil {
		{
			size, err := m.IngressEgressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AwsCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AwsCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AwsCred != nil {
		{
			size, err := m.AwsCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Assisted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Assisted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Assisted != nil {
		{
			size, err := m.Assisted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NodesPerAz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NodesPerAz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	i--
	dAtA[i] = 0x70
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_VoltstackCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VoltstackCluster != nil {
		{
			size, err := m.VoltstackCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_TotalNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_TotalNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.TotalNodes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoWorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoWorkerNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoWorkerNodes != nil {
		{
			size, err := m.NoWorkerNodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DirectConnectDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DirectConnectDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectDisabled != nil {
		{
			size, err := m.DirectConnectDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DirectConnectEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DirectConnectEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectEnabled != nil {
		{
			size, err := m.DirectConnectEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableInternetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableInternetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableInternetVip != nil {
		{
			size, err := m.DisableInternetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableInternetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableInternetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableInternetVip != nil {
		{
			size, err := m.EnableInternetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EgressGatewayDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EgressGatewayDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EgressGatewayDefault != nil {
		{
			size, err := m.EgressGatewayDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EgressNatGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EgressNatGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EgressNatGw != nil {
		{
			size, err := m.EgressNatGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EgressVirtualPrivateGateway) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EgressVirtualPrivateGateway) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EgressVirtualPrivateGateway != nil {
		{
			size, err := m.EgressVirtualPrivateGateway.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_F5XcSecurityGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_F5XcSecurityGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5XcSecurityGroup != nil {
		{
			size, err := m.F5XcSecurityGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_CustomSecurityGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_CustomSecurityGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomSecurityGroup != nil {
		{
			size, err := m.CustomSecurityGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_PrivateConnectivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_PrivateConnectivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateConnectivity != nil {
		{
			size, err := m.PrivateConnectivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CustomDns != nil {
		{
			size, err := m.CustomDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.DirectConnectChoice != nil {
		{
			size := m.DirectConnectChoice.Size()
			i -= size
			if _, err := m.DirectConnectChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SecurityGroupChoice != nil {
		{
			size := m.SecurityGroupChoice.Size()
			i -= size
			if _, err := m.SecurityGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EgressGatewayChoice != nil {
		{
			size := m.EgressGatewayChoice.Size()
			i -= size
			if _, err := m.EgressGatewayChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InternetVipChoice != nil {
		{
			size := m.InternetVipChoice.Size()
			i -= size
			if _, err := m.InternetVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.WorkerNodes != nil {
		{
			size := m.WorkerNodes.Size()
			i -= size
			if _, err := m.WorkerNodes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Os != nil {
		{
			size, err := m.Os.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.Sw != nil {
		{
			size, err := m.Sw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.SiteType != nil {
		{
			size := m.SiteType.Size()
			i -= size
			if _, err := m.SiteType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DiskSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
		i--
		dAtA[i] = 0x78
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AwsRegion) > 0 {
		i -= len(m.AwsRegion)
		copy(dAtA[i:], m.AwsRegion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsRegion)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.InstanceType) > 0 {
		i -= len(m.InstanceType)
		copy(dAtA[i:], m.InstanceType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InstanceType)))
		i--
		dAtA[i] = 0x32
	}
	if m.Deployment != nil {
		{
			size := m.Deployment.Size()
			i -= size
			if _, err := m.Deployment.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Vpc != nil {
		{
			size, err := m.Vpc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_IngressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressGw != nil {
		{
			size, err := m.IngressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_IngressEgressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressEgressGw != nil {
		{
			size, err := m.IngressEgressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AwsCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AwsCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AwsCred != nil {
		{
			size, err := m.AwsCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NodesPerAz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NodesPerAz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	i--
	dAtA[i] = 0x70
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_VoltstackCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VoltstackCluster != nil {
		{
			size, err := m.VoltstackCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_TotalNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_TotalNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.TotalNodes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoWorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoWorkerNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoWorkerNodes != nil {
		{
			size, err := m.NoWorkerNodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DirectConnectDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DirectConnectDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectDisabled != nil {
		{
			size, err := m.DirectConnectDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DirectConnectEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DirectConnectEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectEnabled != nil {
		{
			size, err := m.DirectConnectEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableInternetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableInternetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableInternetVip != nil {
		{
			size, err := m.DisableInternetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableInternetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableInternetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableInternetVip != nil {
		{
			size, err := m.EnableInternetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EgressGatewayDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EgressGatewayDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EgressGatewayDefault != nil {
		{
			size, err := m.EgressGatewayDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EgressNatGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EgressNatGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EgressNatGw != nil {
		{
			size, err := m.EgressNatGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EgressVirtualPrivateGateway) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EgressVirtualPrivateGateway) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EgressVirtualPrivateGateway != nil {
		{
			size, err := m.EgressVirtualPrivateGateway.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_F5XcSecurityGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_F5XcSecurityGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5XcSecurityGroup != nil {
		{
			size, err := m.F5XcSecurityGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_CustomSecurityGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_CustomSecurityGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomSecurityGroup != nil {
		{
			size, err := m.CustomSecurityGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_PrivateConnectivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_PrivateConnectivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateConnectivity != nil {
		{
			size, err := m.PrivateConnectivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CustomDns != nil {
		{
			size, err := m.CustomDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.DirectConnectChoice != nil {
		{
			size := m.DirectConnectChoice.Size()
			i -= size
			if _, err := m.DirectConnectChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InternetVipChoice != nil {
		{
			size := m.InternetVipChoice.Size()
			i -= size
			if _, err := m.InternetVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if m.WorkerNodes != nil {
		{
			size := m.WorkerNodes.Size()
			i -= size
			if _, err := m.WorkerNodes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.SiteType != nil {
		{
			size := m.SiteType.Size()
			i -= size
			if _, err := m.SiteType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Deployment != nil {
		{
			size := m.Deployment.Size()
			i -= size
			if _, err := m.Deployment.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_IngressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressGw != nil {
		{
			size, err := m.IngressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_IngressEgressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressEgressGw != nil {
		{
			size, err := m.IngressEgressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AwsCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AwsCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AwsCred != nil {
		{
			size, err := m.AwsCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NodesPerAz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NodesPerAz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	i--
	dAtA[i] = 0x70
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_VoltstackCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VoltstackCluster != nil {
		{
			size, err := m.VoltstackCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_TotalNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_TotalNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.TotalNodes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoWorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoWorkerNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoWorkerNodes != nil {
		{
			size, err := m.NoWorkerNodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DirectConnectDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DirectConnectDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectDisabled != nil {
		{
			size, err := m.DirectConnectDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DirectConnectEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DirectConnectEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectEnabled != nil {
		{
			size, err := m.DirectConnectEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableInternetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableInternetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableInternetVip != nil {
		{
			size, err := m.DisableInternetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableInternetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableInternetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableInternetVip != nil {
		{
			size, err := m.EnableInternetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_PrivateConnectivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_PrivateConnectivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateConnectivity != nil {
		{
			size, err := m.PrivateConnectivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DirectConnectInfo != nil {
		{
			size, err := m.DirectConnectInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd2
	}
	if m.CloudSiteInfo != nil {
		{
			size, err := m.CloudSiteInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.CustomDns != nil {
		{
			size, err := m.CustomDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.ValidationState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidationState))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if len(m.SiteErrors) > 0 {
		for iNdEx := len(m.SiteErrors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SiteErrors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xba
		}
	}
	if m.DirectConnectChoice != nil {
		{
			size := m.DirectConnectChoice.Size()
			i -= size
			if _, err := m.DirectConnectChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SecurityGroupChoice != nil {
		{
			size := m.SecurityGroupChoice.Size()
			i -= size
			if _, err := m.SecurityGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ErrorDescription) > 0 {
		i -= len(m.ErrorDescription)
		copy(dAtA[i:], m.ErrorDescription)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ErrorDescription)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.SuggestedAction) > 0 {
		i -= len(m.SuggestedAction)
		copy(dAtA[i:], m.SuggestedAction)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SuggestedAction)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	if m.EgressGatewayChoice != nil {
		{
			size := m.EgressGatewayChoice.Size()
			i -= size
			if _, err := m.EgressGatewayChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InternetVipChoice != nil {
		{
			size := m.InternetVipChoice.Size()
			i -= size
			if _, err := m.InternetVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.WorkerNodes != nil {
		{
			size := m.WorkerNodes.Size()
			i -= size
			if _, err := m.WorkerNodes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UserModificationTimestamp != nil {
		{
			size, err := m.UserModificationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.VipParamsPerAz) > 0 {
		for iNdEx := len(m.VipParamsPerAz) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VipParamsPerAz[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.SiteState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteState))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.SiteType != nil {
		{
			size := m.SiteType.Size()
			i -= size
			if _, err := m.SiteType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DiskSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
		i--
		dAtA[i] = 0x78
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AwsRegion) > 0 {
		i -= len(m.AwsRegion)
		copy(dAtA[i:], m.AwsRegion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsRegion)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.OperatingSystemVersion) > 0 {
		i -= len(m.OperatingSystemVersion)
		copy(dAtA[i:], m.OperatingSystemVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		i -= len(m.VolterraSoftwareVersion)
		copy(dAtA[i:], m.VolterraSoftwareVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.InstanceType) > 0 {
		i -= len(m.InstanceType)
		copy(dAtA[i:], m.InstanceType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InstanceType)))
		i--
		dAtA[i] = 0x32
	}
	if m.Deployment != nil {
		{
			size := m.Deployment.Size()
			i -= size
			if _, err := m.Deployment.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Vpc != nil {
		{
			size, err := m.Vpc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_IngressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressGw != nil {
		{
			size, err := m.IngressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_IngressEgressGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressEgressGw != nil {
		{
			size, err := m.IngressEgressGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AwsCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AwsCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AwsCred != nil {
		{
			size, err := m.AwsCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Assisted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Assisted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Assisted != nil {
		{
			size, err := m.Assisted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NodesPerAz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NodesPerAz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	i--
	dAtA[i] = 0x70
	return len(dAtA) - i, nil
}
func (m *GetSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_VoltstackCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VoltstackCluster != nil {
		{
			size, err := m.VoltstackCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_TotalNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_TotalNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.TotalNodes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoWorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoWorkerNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoWorkerNodes != nil {
		{
			size, err := m.NoWorkerNodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DirectConnectDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DirectConnectDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectDisabled != nil {
		{
			size, err := m.DirectConnectDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DirectConnectEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DirectConnectEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectEnabled != nil {
		{
			size, err := m.DirectConnectEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableInternetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableInternetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableInternetVip != nil {
		{
			size, err := m.DisableInternetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableInternetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableInternetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableInternetVip != nil {
		{
			size, err := m.EnableInternetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EgressGatewayDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EgressGatewayDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EgressGatewayDefault != nil {
		{
			size, err := m.EgressGatewayDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EgressNatGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EgressNatGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EgressNatGw != nil {
		{
			size, err := m.EgressNatGw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EgressVirtualPrivateGateway) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EgressVirtualPrivateGateway) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EgressVirtualPrivateGateway != nil {
		{
			size, err := m.EgressVirtualPrivateGateway.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_F5XcSecurityGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_F5XcSecurityGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5XcSecurityGroup != nil {
		{
			size, err := m.F5XcSecurityGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_CustomSecurityGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_CustomSecurityGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomSecurityGroup != nil {
		{
			size, err := m.CustomSecurityGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_PrivateConnectivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_PrivateConnectivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateConnectivity != nil {
		{
			size, err := m.PrivateConnectivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AWSVPCIngressGwType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.AwsCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AllowedVipPort != nil {
		l = m.AllowedVipPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AWSVPCIngressEgressGwType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	l = len(m.AwsCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.InsideStaticRouteChoice != nil {
		n += m.InsideStaticRouteChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.AllowedVipPort != nil {
		l = m.AllowedVipPort.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AllowedVipPortSli != nil {
		l = m.AllowedVipPortSli.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AWSVPCIngressEgressGwType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_NoInsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoInsideStaticRoutes != nil {
		l = m.NoInsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_InsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideStaticRoutes != nil {
		l = m.InsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_NoOutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_OutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupOutsideVn != nil {
		l = m.DcClusterGroupOutsideVn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_DcClusterGroupInsideVn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupInsideVn != nil {
		l = m.DcClusterGroupInsideVn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AwsCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.StorageClassChoice != nil {
		n += m.StorageClassChoice.Size()
	}
	if m.AllowedVipPort != nil {
		l = m.AllowedVipPort.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.K8SClusterChoice != nil {
		n += m.K8SClusterChoice.Size()
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	return n
}

func (m *AWSVPCVoltstackClusterType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_NoOutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_OutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_DefaultStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultStorage != nil {
		l = m.DefaultStorage.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_StorageClassList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageClassList != nil {
		l = m.StorageClassList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_NoK8SCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoK8SCluster != nil {
		l = m.NoK8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_K8SCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SCluster != nil {
		l = m.K8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_DcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroup != nil {
		l = m.DcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressGwReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedVipPort != nil {
		l = m.AllowedVipPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AWSVPCIngressEgressGwReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.InsideStaticRouteChoice != nil {
		n += m.InsideStaticRouteChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.AllowedVipPort != nil {
		l = m.AllowedVipPort.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AllowedVipPortSli != nil {
		l = m.AllowedVipPortSli.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoInsideStaticRoutes != nil {
		l = m.NoInsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideStaticRoutes != nil {
		l = m.InsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupOutsideVn != nil {
		l = m.DcClusterGroupOutsideVn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupInsideVn != nil {
		l = m.DcClusterGroupInsideVn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.AllowedVipPort != nil {
		l = m.AllowedVipPort.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	return n
}

func (m *AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterReplaceType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterReplaceType_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterReplaceType_DcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroup != nil {
		l = m.DcClusterGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPCSiteInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PublicIps) > 0 {
		for _, s := range m.PublicIps {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.PrivateIps) > 0 {
		for _, s := range m.PrivateIps {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.SubnetIds) > 0 {
		for _, e := range m.SubnetIds {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VpcName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vpc != nil {
		l = m.Vpc.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	l = len(m.InstanceType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AwsRegion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WorkerNodes != nil {
		n += m.WorkerNodes.Size()
	}
	if m.DiskSize != 0 {
		n += 1 + sovTypes(uint64(m.DiskSize))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.Sw != nil {
		l = m.Sw.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Os != nil {
		l = m.Os.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.VipParamsPerAz) > 0 {
		for _, e := range m.VipParamsPerAz {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.UserModificationTimestamp != nil {
		l = m.UserModificationTimestamp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.SiteToSiteTunnelIp)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.DirectConnectChoice != nil {
		n += m.DirectConnectChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.InternetVipChoice != nil {
		n += m.InternetVipChoice.Size()
	}
	if m.EgressGatewayChoice != nil {
		n += m.EgressGatewayChoice.Size()
	}
	l = len(m.SuggestedAction)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.ErrorDescription)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.SecurityGroupChoice != nil {
		n += m.SecurityGroupChoice.Size()
	}
	if len(m.SiteErrors) > 0 {
		for _, e := range m.SiteErrors {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ValidationState != 0 {
		n += 2 + sovTypes(uint64(m.ValidationState))
	}
	if m.CustomDns != nil {
		l = m.CustomDns.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TfParams != nil {
		l = m.TfParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CloudSiteInfo != nil {
		l = m.CloudSiteInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DirectConnectInfo != nil {
		l = m.DirectConnectInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_IngressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_IngressEgressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AwsCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsCred != nil {
		l = m.AwsCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Assisted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Assisted != nil {
		l = m.Assisted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NodesPerAz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.NodesPerAz))
	return n
}
func (m *GlobalSpecType_VoltstackCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_TotalNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.TotalNodes))
	return n
}
func (m *GlobalSpecType_NoWorkerNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWorkerNodes != nil {
		l = m.NoWorkerNodes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DirectConnectDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectDisabled != nil {
		l = m.DirectConnectDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DirectConnectEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectEnabled != nil {
		l = m.DirectConnectEnabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableInternetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableInternetVip != nil {
		l = m.DisableInternetVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableInternetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableInternetVip != nil {
		l = m.EnableInternetVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EgressGatewayDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EgressGatewayDefault != nil {
		l = m.EgressGatewayDefault.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EgressNatGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EgressNatGw != nil {
		l = m.EgressNatGw.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EgressVirtualPrivateGateway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EgressVirtualPrivateGateway != nil {
		l = m.EgressVirtualPrivateGateway.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_F5XcSecurityGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5XcSecurityGroup != nil {
		l = m.F5XcSecurityGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CustomSecurityGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomSecurityGroup != nil {
		l = m.CustomSecurityGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_PrivateConnectivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateConnectivity != nil {
		l = m.PrivateConnectivity.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vpc != nil {
		l = m.Vpc.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	l = len(m.InstanceType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AwsRegion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WorkerNodes != nil {
		n += m.WorkerNodes.Size()
	}
	if m.DiskSize != 0 {
		n += 1 + sovTypes(uint64(m.DiskSize))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.Sw != nil {
		l = m.Sw.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Os != nil {
		l = m.Os.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.DirectConnectChoice != nil {
		n += m.DirectConnectChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.InternetVipChoice != nil {
		n += m.InternetVipChoice.Size()
	}
	if m.EgressGatewayChoice != nil {
		n += m.EgressGatewayChoice.Size()
	}
	if m.SecurityGroupChoice != nil {
		n += m.SecurityGroupChoice.Size()
	}
	if m.CustomDns != nil {
		l = m.CustomDns.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_IngressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_IngressEgressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AwsCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsCred != nil {
		l = m.AwsCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NodesPerAz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.NodesPerAz))
	return n
}
func (m *CreateSpecType_VoltstackCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_TotalNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.TotalNodes))
	return n
}
func (m *CreateSpecType_NoWorkerNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWorkerNodes != nil {
		l = m.NoWorkerNodes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DirectConnectDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectDisabled != nil {
		l = m.DirectConnectDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DirectConnectEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectEnabled != nil {
		l = m.DirectConnectEnabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableInternetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableInternetVip != nil {
		l = m.DisableInternetVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableInternetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableInternetVip != nil {
		l = m.EnableInternetVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EgressGatewayDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EgressGatewayDefault != nil {
		l = m.EgressGatewayDefault.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EgressNatGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EgressNatGw != nil {
		l = m.EgressNatGw.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EgressVirtualPrivateGateway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EgressVirtualPrivateGateway != nil {
		l = m.EgressVirtualPrivateGateway.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_F5XcSecurityGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5XcSecurityGroup != nil {
		l = m.F5XcSecurityGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CustomSecurityGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomSecurityGroup != nil {
		l = m.CustomSecurityGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_PrivateConnectivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateConnectivity != nil {
		l = m.PrivateConnectivity.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	if m.WorkerNodes != nil {
		n += m.WorkerNodes.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.DirectConnectChoice != nil {
		n += m.DirectConnectChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.InternetVipChoice != nil {
		n += m.InternetVipChoice.Size()
	}
	if m.CustomDns != nil {
		l = m.CustomDns.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_IngressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IngressEgressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AwsCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsCred != nil {
		l = m.AwsCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NodesPerAz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.NodesPerAz))
	return n
}
func (m *ReplaceSpecType_VoltstackCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_TotalNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.TotalNodes))
	return n
}
func (m *ReplaceSpecType_NoWorkerNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWorkerNodes != nil {
		l = m.NoWorkerNodes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DirectConnectDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectDisabled != nil {
		l = m.DirectConnectDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DirectConnectEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectEnabled != nil {
		l = m.DirectConnectEnabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableInternetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableInternetVip != nil {
		l = m.DisableInternetVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableInternetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableInternetVip != nil {
		l = m.EnableInternetVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_PrivateConnectivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateConnectivity != nil {
		l = m.PrivateConnectivity.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vpc != nil {
		l = m.Vpc.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	l = len(m.InstanceType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AwsRegion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WorkerNodes != nil {
		n += m.WorkerNodes.Size()
	}
	if m.DiskSize != 0 {
		n += 1 + sovTypes(uint64(m.DiskSize))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.SiteState != 0 {
		n += 2 + sovTypes(uint64(m.SiteState))
	}
	if len(m.VipParamsPerAz) > 0 {
		for _, e := range m.VipParamsPerAz {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.UserModificationTimestamp != nil {
		l = m.UserModificationTimestamp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.DirectConnectChoice != nil {
		n += m.DirectConnectChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.InternetVipChoice != nil {
		n += m.InternetVipChoice.Size()
	}
	if m.EgressGatewayChoice != nil {
		n += m.EgressGatewayChoice.Size()
	}
	l = len(m.SuggestedAction)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.ErrorDescription)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.SecurityGroupChoice != nil {
		n += m.SecurityGroupChoice.Size()
	}
	if len(m.SiteErrors) > 0 {
		for _, e := range m.SiteErrors {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ValidationState != 0 {
		n += 2 + sovTypes(uint64(m.ValidationState))
	}
	if m.CustomDns != nil {
		l = m.CustomDns.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CloudSiteInfo != nil {
		l = m.CloudSiteInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DirectConnectInfo != nil {
		l = m.DirectConnectInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_IngressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_IngressEgressGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AwsCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsCred != nil {
		l = m.AwsCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Assisted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Assisted != nil {
		l = m.Assisted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NodesPerAz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.NodesPerAz))
	return n
}
func (m *GetSpecType_VoltstackCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_TotalNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.TotalNodes))
	return n
}
func (m *GetSpecType_NoWorkerNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWorkerNodes != nil {
		l = m.NoWorkerNodes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DirectConnectDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectDisabled != nil {
		l = m.DirectConnectDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DirectConnectEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectEnabled != nil {
		l = m.DirectConnectEnabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableInternetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableInternetVip != nil {
		l = m.DisableInternetVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableInternetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableInternetVip != nil {
		l = m.EnableInternetVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EgressGatewayDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EgressGatewayDefault != nil {
		l = m.EgressGatewayDefault.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EgressNatGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EgressNatGw != nil {
		l = m.EgressNatGw.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EgressVirtualPrivateGateway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EgressVirtualPrivateGateway != nil {
		l = m.EgressVirtualPrivateGateway.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_F5XcSecurityGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5XcSecurityGroup != nil {
		l = m.F5XcSecurityGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CustomSecurityGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomSecurityGroup != nil {
		l = m.CustomSecurityGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_PrivateConnectivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateConnectivity != nil {
		l = m.PrivateConnectivity.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AWSVPCIngressGwType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAzNodes := "[]*AWSVPCOneInterfaceNodeType{"
	for _, f := range this.AzNodes {
		repeatedStringForAzNodes += strings.Replace(fmt.Sprintf("%v", f), "AWSVPCOneInterfaceNodeType", "views.AWSVPCOneInterfaceNodeType", 1) + ","
	}
	repeatedStringForAzNodes += "}"
	s := strings.Join([]string{`&AWSVPCIngressGwType{`,
		`AzNodes:` + repeatedStringForAzNodes + `,`,
		`AwsCertifiedHw:` + fmt.Sprintf("%v", this.AwsCertifiedHw) + `,`,
		`AllowedVipPort:` + strings.Replace(fmt.Sprintf("%v", this.AllowedVipPort), "AllowedVIPPorts", "views.AllowedVIPPorts", 1) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAzNodes := "[]*AWSVPCTwoInterfaceNodeType{"
	for _, f := range this.AzNodes {
		repeatedStringForAzNodes += strings.Replace(fmt.Sprintf("%v", f), "AWSVPCTwoInterfaceNodeType", "views.AWSVPCTwoInterfaceNodeType", 1) + ","
	}
	repeatedStringForAzNodes += "}"
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType{`,
		`AzNodes:` + repeatedStringForAzNodes + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`AwsCertifiedHw:` + fmt.Sprintf("%v", this.AwsCertifiedHw) + `,`,
		`InsideStaticRouteChoice:` + fmt.Sprintf("%v", this.InsideStaticRouteChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`AllowedVipPort:` + strings.Replace(fmt.Sprintf("%v", this.AllowedVipPort), "AllowedVIPPorts", "views.AllowedVIPPorts", 1) + `,`,
		`AllowedVipPortSli:` + strings.Replace(fmt.Sprintf("%v", this.AllowedVipPortSli), "AllowedVIPPorts", "views.AllowedVIPPorts", 1) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_NoInsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_NoInsideStaticRoutes{`,
		`NoInsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoInsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_InsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_InsideStaticRoutes{`,
		`InsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.InsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn{`,
		`DcClusterGroupOutsideVn:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupOutsideVn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_DcClusterGroupInsideVn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_DcClusterGroupInsideVn{`,
		`DcClusterGroupInsideVn:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupInsideVn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAzNodes := "[]*AWSVPCOneInterfaceNodeType{"
	for _, f := range this.AzNodes {
		repeatedStringForAzNodes += strings.Replace(fmt.Sprintf("%v", f), "AWSVPCOneInterfaceNodeType", "views.AWSVPCOneInterfaceNodeType", 1) + ","
	}
	repeatedStringForAzNodes += "}"
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType{`,
		`AwsCertifiedHw:` + fmt.Sprintf("%v", this.AwsCertifiedHw) + `,`,
		`AzNodes:` + repeatedStringForAzNodes + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`StorageClassChoice:` + fmt.Sprintf("%v", this.StorageClassChoice) + `,`,
		`AllowedVipPort:` + strings.Replace(fmt.Sprintf("%v", this.AllowedVipPort), "AllowedVIPPorts", "views.AllowedVIPPorts", 1) + `,`,
		`K8SClusterChoice:` + fmt.Sprintf("%v", this.K8SClusterChoice) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_DefaultStorage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_DefaultStorage{`,
		`DefaultStorage:` + strings.Replace(fmt.Sprintf("%v", this.DefaultStorage), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_StorageClassList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_StorageClassList{`,
		`StorageClassList:` + strings.Replace(fmt.Sprintf("%v", this.StorageClassList), "StorageClassListType", "views.StorageClassListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_NoK8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_NoK8SCluster{`,
		`NoK8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.NoK8SCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_K8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_K8SCluster{`,
		`K8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.K8SCluster), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_DcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_DcClusterGroup{`,
		`DcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroup), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressGwReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressGwReplaceType{`,
		`AllowedVipPort:` + strings.Replace(fmt.Sprintf("%v", this.AllowedVipPort), "AllowedVIPPorts", "views.AllowedVIPPorts", 1) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType{`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`InsideStaticRouteChoice:` + fmt.Sprintf("%v", this.InsideStaticRouteChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`AllowedVipPort:` + strings.Replace(fmt.Sprintf("%v", this.AllowedVipPort), "AllowedVIPPorts", "views.AllowedVIPPorts", 1) + `,`,
		`AllowedVipPortSli:` + strings.Replace(fmt.Sprintf("%v", this.AllowedVipPortSli), "AllowedVIPPorts", "views.AllowedVIPPorts", 1) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes{`,
		`NoInsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoInsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes{`,
		`InsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.InsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn{`,
		`DcClusterGroupOutsideVn:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupOutsideVn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn{`,
		`DcClusterGroupInsideVn:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupInsideVn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType{`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`AllowedVipPort:` + strings.Replace(fmt.Sprintf("%v", this.AllowedVipPort), "AllowedVIPPorts", "views.AllowedVIPPorts", 1) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_DcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType_DcClusterGroup{`,
		`DcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroup), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCSiteInfoType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubnetIds := "[]*AWSSubnetIdsType{"
	for _, f := range this.SubnetIds {
		repeatedStringForSubnetIds += strings.Replace(fmt.Sprintf("%v", f), "AWSSubnetIdsType", "views.AWSSubnetIdsType", 1) + ","
	}
	repeatedStringForSubnetIds += "}"
	s := strings.Join([]string{`&AWSVPCSiteInfoType{`,
		`PublicIps:` + fmt.Sprintf("%v", this.PublicIps) + `,`,
		`PrivateIps:` + fmt.Sprintf("%v", this.PrivateIps) + `,`,
		`SubnetIds:` + repeatedStringForSubnetIds + `,`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`VpcName:` + fmt.Sprintf("%v", this.VpcName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVipParamsPerAz := "[]*PublishVIPParamsPerAz{"
	for _, f := range this.VipParamsPerAz {
		repeatedStringForVipParamsPerAz += strings.Replace(fmt.Sprintf("%v", f), "PublishVIPParamsPerAz", "site.PublishVIPParamsPerAz", 1) + ","
	}
	repeatedStringForVipParamsPerAz += "}"
	repeatedStringForSiteErrors := "[]*SiteError{"
	for _, f := range this.SiteErrors {
		repeatedStringForSiteErrors += strings.Replace(fmt.Sprintf("%v", f), "SiteError", "views.SiteError", 1) + ","
	}
	repeatedStringForSiteErrors += "}"
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Vpc:` + strings.Replace(fmt.Sprintf("%v", this.Vpc), "AWSVPCchoiceType", "views.AWSVPCchoiceType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`InstanceType:` + fmt.Sprintf("%v", this.InstanceType) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`AwsRegion:` + fmt.Sprintf("%v", this.AwsRegion) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`Sw:` + strings.Replace(fmt.Sprintf("%v", this.Sw), "VolterraSoftwareType", "views.VolterraSoftwareType", 1) + `,`,
		`Os:` + strings.Replace(fmt.Sprintf("%v", this.Os), "OperatingSystemType", "views.OperatingSystemType", 1) + `,`,
		`VipParamsPerAz:` + repeatedStringForVipParamsPerAz + `,`,
		`UserModificationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.UserModificationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`SiteToSiteTunnelIp:` + fmt.Sprintf("%v", this.SiteToSiteTunnelIp) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`DirectConnectChoice:` + fmt.Sprintf("%v", this.DirectConnectChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`InternetVipChoice:` + fmt.Sprintf("%v", this.InternetVipChoice) + `,`,
		`EgressGatewayChoice:` + fmt.Sprintf("%v", this.EgressGatewayChoice) + `,`,
		`SuggestedAction:` + fmt.Sprintf("%v", this.SuggestedAction) + `,`,
		`ErrorDescription:` + fmt.Sprintf("%v", this.ErrorDescription) + `,`,
		`SecurityGroupChoice:` + fmt.Sprintf("%v", this.SecurityGroupChoice) + `,`,
		`SiteErrors:` + repeatedStringForSiteErrors + `,`,
		`ValidationState:` + fmt.Sprintf("%v", this.ValidationState) + `,`,
		`CustomDns:` + strings.Replace(fmt.Sprintf("%v", this.CustomDns), "CustomDNS", "views.CustomDNS", 1) + `,`,
		`TfParams:` + strings.Replace(fmt.Sprintf("%v", this.TfParams), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`CloudSiteInfo:` + strings.Replace(this.CloudSiteInfo.String(), "AWSVPCSiteInfoType", "AWSVPCSiteInfoType", 1) + `,`,
		`DirectConnectInfo:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectInfo), "DirectConnectInfo", "views.DirectConnectInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AWSVPCIngressGwType", "AWSVPCIngressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AWSVPCIngressEgressGwType", "AWSVPCIngressEgressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AwsCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AwsCred{`,
		`AwsCred:` + strings.Replace(fmt.Sprintf("%v", this.AwsCred), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Assisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Assisted{`,
		`Assisted:` + strings.Replace(fmt.Sprintf("%v", this.Assisted), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NodesPerAz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NodesPerAz{`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AWSVPCVoltstackClusterType", "AWSVPCVoltstackClusterType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TotalNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TotalNodes{`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoWorkerNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoWorkerNodes{`,
		`NoWorkerNodes:` + strings.Replace(fmt.Sprintf("%v", this.NoWorkerNodes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DirectConnectDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DirectConnectDisabled{`,
		`DirectConnectDisabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DirectConnectEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DirectConnectEnabled{`,
		`DirectConnectEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectEnabled), "DirectConnectConfigType", "views.DirectConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableInternetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableInternetVip{`,
		`DisableInternetVip:` + strings.Replace(fmt.Sprintf("%v", this.DisableInternetVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableInternetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableInternetVip{`,
		`EnableInternetVip:` + strings.Replace(fmt.Sprintf("%v", this.EnableInternetVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EgressGatewayDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EgressGatewayDefault{`,
		`EgressGatewayDefault:` + strings.Replace(fmt.Sprintf("%v", this.EgressGatewayDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EgressNatGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EgressNatGw{`,
		`EgressNatGw:` + strings.Replace(fmt.Sprintf("%v", this.EgressNatGw), "AWSNATGatewaychoiceType", "views.AWSNATGatewaychoiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EgressVirtualPrivateGateway) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EgressVirtualPrivateGateway{`,
		`EgressVirtualPrivateGateway:` + strings.Replace(fmt.Sprintf("%v", this.EgressVirtualPrivateGateway), "AWSVirtualPrivateGatewaychoiceType", "views.AWSVirtualPrivateGatewaychoiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_F5XcSecurityGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_F5XcSecurityGroup{`,
		`F5XcSecurityGroup:` + strings.Replace(fmt.Sprintf("%v", this.F5XcSecurityGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CustomSecurityGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CustomSecurityGroup{`,
		`CustomSecurityGroup:` + strings.Replace(fmt.Sprintf("%v", this.CustomSecurityGroup), "SecurityGroupType", "views.SecurityGroupType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PrivateConnectivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PrivateConnectivity{`,
		`PrivateConnectivity:` + strings.Replace(fmt.Sprintf("%v", this.PrivateConnectivity), "PrivateConnectConfigType", "views.PrivateConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Vpc:` + strings.Replace(fmt.Sprintf("%v", this.Vpc), "AWSVPCchoiceType", "views.AWSVPCchoiceType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`InstanceType:` + fmt.Sprintf("%v", this.InstanceType) + `,`,
		`AwsRegion:` + fmt.Sprintf("%v", this.AwsRegion) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`Sw:` + strings.Replace(fmt.Sprintf("%v", this.Sw), "VolterraSoftwareType", "views.VolterraSoftwareType", 1) + `,`,
		`Os:` + strings.Replace(fmt.Sprintf("%v", this.Os), "OperatingSystemType", "views.OperatingSystemType", 1) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`DirectConnectChoice:` + fmt.Sprintf("%v", this.DirectConnectChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`InternetVipChoice:` + fmt.Sprintf("%v", this.InternetVipChoice) + `,`,
		`EgressGatewayChoice:` + fmt.Sprintf("%v", this.EgressGatewayChoice) + `,`,
		`SecurityGroupChoice:` + fmt.Sprintf("%v", this.SecurityGroupChoice) + `,`,
		`CustomDns:` + strings.Replace(fmt.Sprintf("%v", this.CustomDns), "CustomDNS", "views.CustomDNS", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AWSVPCIngressGwType", "AWSVPCIngressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AWSVPCIngressEgressGwType", "AWSVPCIngressEgressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AwsCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AwsCred{`,
		`AwsCred:` + strings.Replace(fmt.Sprintf("%v", this.AwsCred), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NodesPerAz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NodesPerAz{`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AWSVPCVoltstackClusterType", "AWSVPCVoltstackClusterType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_TotalNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_TotalNodes{`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoWorkerNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoWorkerNodes{`,
		`NoWorkerNodes:` + strings.Replace(fmt.Sprintf("%v", this.NoWorkerNodes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DirectConnectDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DirectConnectDisabled{`,
		`DirectConnectDisabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DirectConnectEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DirectConnectEnabled{`,
		`DirectConnectEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectEnabled), "DirectConnectConfigType", "views.DirectConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableInternetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableInternetVip{`,
		`DisableInternetVip:` + strings.Replace(fmt.Sprintf("%v", this.DisableInternetVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableInternetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableInternetVip{`,
		`EnableInternetVip:` + strings.Replace(fmt.Sprintf("%v", this.EnableInternetVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EgressGatewayDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EgressGatewayDefault{`,
		`EgressGatewayDefault:` + strings.Replace(fmt.Sprintf("%v", this.EgressGatewayDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EgressNatGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EgressNatGw{`,
		`EgressNatGw:` + strings.Replace(fmt.Sprintf("%v", this.EgressNatGw), "AWSNATGatewaychoiceType", "views.AWSNATGatewaychoiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EgressVirtualPrivateGateway) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EgressVirtualPrivateGateway{`,
		`EgressVirtualPrivateGateway:` + strings.Replace(fmt.Sprintf("%v", this.EgressVirtualPrivateGateway), "AWSVirtualPrivateGatewaychoiceType", "views.AWSVirtualPrivateGatewaychoiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_F5XcSecurityGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_F5XcSecurityGroup{`,
		`F5XcSecurityGroup:` + strings.Replace(fmt.Sprintf("%v", this.F5XcSecurityGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CustomSecurityGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CustomSecurityGroup{`,
		`CustomSecurityGroup:` + strings.Replace(fmt.Sprintf("%v", this.CustomSecurityGroup), "SecurityGroupType", "views.SecurityGroupType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_PrivateConnectivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_PrivateConnectivity{`,
		`PrivateConnectivity:` + strings.Replace(fmt.Sprintf("%v", this.PrivateConnectivity), "PrivateConnectConfigType", "views.PrivateConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`DirectConnectChoice:` + fmt.Sprintf("%v", this.DirectConnectChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`InternetVipChoice:` + fmt.Sprintf("%v", this.InternetVipChoice) + `,`,
		`CustomDns:` + strings.Replace(fmt.Sprintf("%v", this.CustomDns), "CustomDNS", "views.CustomDNS", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AWSVPCIngressGwReplaceType", "AWSVPCIngressGwReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AWSVPCIngressEgressGwReplaceType", "AWSVPCIngressEgressGwReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AwsCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AwsCred{`,
		`AwsCred:` + strings.Replace(fmt.Sprintf("%v", this.AwsCred), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NodesPerAz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NodesPerAz{`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AWSVPCVoltstackClusterReplaceType", "AWSVPCVoltstackClusterReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_TotalNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_TotalNodes{`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoWorkerNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoWorkerNodes{`,
		`NoWorkerNodes:` + strings.Replace(fmt.Sprintf("%v", this.NoWorkerNodes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DirectConnectDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DirectConnectDisabled{`,
		`DirectConnectDisabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DirectConnectEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DirectConnectEnabled{`,
		`DirectConnectEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectEnabled), "DirectConnectConfigType", "views.DirectConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableInternetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableInternetVip{`,
		`DisableInternetVip:` + strings.Replace(fmt.Sprintf("%v", this.DisableInternetVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableInternetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableInternetVip{`,
		`EnableInternetVip:` + strings.Replace(fmt.Sprintf("%v", this.EnableInternetVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_PrivateConnectivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_PrivateConnectivity{`,
		`PrivateConnectivity:` + strings.Replace(fmt.Sprintf("%v", this.PrivateConnectivity), "PrivateConnectConfigType", "views.PrivateConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVipParamsPerAz := "[]*PublishVIPParamsPerAz{"
	for _, f := range this.VipParamsPerAz {
		repeatedStringForVipParamsPerAz += strings.Replace(fmt.Sprintf("%v", f), "PublishVIPParamsPerAz", "site.PublishVIPParamsPerAz", 1) + ","
	}
	repeatedStringForVipParamsPerAz += "}"
	repeatedStringForSiteErrors := "[]*SiteError{"
	for _, f := range this.SiteErrors {
		repeatedStringForSiteErrors += strings.Replace(fmt.Sprintf("%v", f), "SiteError", "views.SiteError", 1) + ","
	}
	repeatedStringForSiteErrors += "}"
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Vpc:` + strings.Replace(fmt.Sprintf("%v", this.Vpc), "AWSVPCchoiceType", "views.AWSVPCchoiceType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`InstanceType:` + fmt.Sprintf("%v", this.InstanceType) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`AwsRegion:` + fmt.Sprintf("%v", this.AwsRegion) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`SiteState:` + fmt.Sprintf("%v", this.SiteState) + `,`,
		`VipParamsPerAz:` + repeatedStringForVipParamsPerAz + `,`,
		`UserModificationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.UserModificationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`DirectConnectChoice:` + fmt.Sprintf("%v", this.DirectConnectChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`InternetVipChoice:` + fmt.Sprintf("%v", this.InternetVipChoice) + `,`,
		`EgressGatewayChoice:` + fmt.Sprintf("%v", this.EgressGatewayChoice) + `,`,
		`SuggestedAction:` + fmt.Sprintf("%v", this.SuggestedAction) + `,`,
		`ErrorDescription:` + fmt.Sprintf("%v", this.ErrorDescription) + `,`,
		`SecurityGroupChoice:` + fmt.Sprintf("%v", this.SecurityGroupChoice) + `,`,
		`SiteErrors:` + repeatedStringForSiteErrors + `,`,
		`ValidationState:` + fmt.Sprintf("%v", this.ValidationState) + `,`,
		`CustomDns:` + strings.Replace(fmt.Sprintf("%v", this.CustomDns), "CustomDNS", "views.CustomDNS", 1) + `,`,
		`CloudSiteInfo:` + strings.Replace(this.CloudSiteInfo.String(), "AWSVPCSiteInfoType", "AWSVPCSiteInfoType", 1) + `,`,
		`DirectConnectInfo:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectInfo), "DirectConnectInfo", "views.DirectConnectInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AWSVPCIngressGwType", "AWSVPCIngressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AWSVPCIngressEgressGwType", "AWSVPCIngressEgressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AwsCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AwsCred{`,
		`AwsCred:` + strings.Replace(fmt.Sprintf("%v", this.AwsCred), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Assisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Assisted{`,
		`Assisted:` + strings.Replace(fmt.Sprintf("%v", this.Assisted), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NodesPerAz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NodesPerAz{`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AWSVPCVoltstackClusterType", "AWSVPCVoltstackClusterType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_TotalNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_TotalNodes{`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoWorkerNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoWorkerNodes{`,
		`NoWorkerNodes:` + strings.Replace(fmt.Sprintf("%v", this.NoWorkerNodes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DirectConnectDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DirectConnectDisabled{`,
		`DirectConnectDisabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DirectConnectEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DirectConnectEnabled{`,
		`DirectConnectEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectEnabled), "DirectConnectConfigType", "views.DirectConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableInternetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableInternetVip{`,
		`DisableInternetVip:` + strings.Replace(fmt.Sprintf("%v", this.DisableInternetVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableInternetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableInternetVip{`,
		`EnableInternetVip:` + strings.Replace(fmt.Sprintf("%v", this.EnableInternetVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EgressGatewayDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EgressGatewayDefault{`,
		`EgressGatewayDefault:` + strings.Replace(fmt.Sprintf("%v", this.EgressGatewayDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EgressNatGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EgressNatGw{`,
		`EgressNatGw:` + strings.Replace(fmt.Sprintf("%v", this.EgressNatGw), "AWSNATGatewaychoiceType", "views.AWSNATGatewaychoiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EgressVirtualPrivateGateway) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EgressVirtualPrivateGateway{`,
		`EgressVirtualPrivateGateway:` + strings.Replace(fmt.Sprintf("%v", this.EgressVirtualPrivateGateway), "AWSVirtualPrivateGatewaychoiceType", "views.AWSVirtualPrivateGatewaychoiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_F5XcSecurityGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_F5XcSecurityGroup{`,
		`F5XcSecurityGroup:` + strings.Replace(fmt.Sprintf("%v", this.F5XcSecurityGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CustomSecurityGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CustomSecurityGroup{`,
		`CustomSecurityGroup:` + strings.Replace(fmt.Sprintf("%v", this.CustomSecurityGroup), "SecurityGroupType", "views.SecurityGroupType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PrivateConnectivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PrivateConnectivity{`,
		`PrivateConnectivity:` + strings.Replace(fmt.Sprintf("%v", this.PrivateConnectivity), "PrivateConnectConfigType", "views.PrivateConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AWSVPCIngressGwType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSVPCIngressGwType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSVPCIngressGwType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &views.AWSVPCOneInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedVipPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowedVipPort == nil {
				m.AllowedVipPort = &views.AllowedVIPPorts{}
			}
			if err := m.AllowedVipPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSVPCIngressEgressGwType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSVPCIngressEgressGwType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSVPCIngressEgressGwType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &views.AWSVPCTwoInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AWSVPCIngressEgressGwType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AWSVPCIngressEgressGwType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AWSVPCIngressEgressGwType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AWSVPCIngressEgressGwType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoInsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AWSVPCIngressEgressGwType_NoInsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AWSVPCIngressEgressGwType_InsideStaticRoutes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AWSVPCIngressEgressGwType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AWSVPCIngressEgressGwType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AWSVPCIngressEgressGwType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AWSVPCIngressEgressGwType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AWSVPCIngressEgressGwType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedVipPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowedVipPort == nil {
				m.AllowedVipPort = &views.AllowedVIPPorts{}
			}
			if err := m.AllowedVipPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedVipPortSli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowedVipPortSli == nil {
				m.AllowedVipPortSli = &views.AllowedVIPPorts{}
			}
			if err := m.AllowedVipPortSli.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AWSVPCIngressEgressGwType_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupOutsideVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AWSVPCIngressEgressGwType_DcClusterGroupOutsideVn{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupInsideVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AWSVPCIngressEgressGwType_DcClusterGroupInsideVn{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AWSVPCIngressEgressGwType_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AWSVPCIngressEgressGwType_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AWSVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSVPCVoltstackClusterType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSVPCVoltstackClusterType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSVPCVoltstackClusterType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &views.AWSVPCOneInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AWSVPCVoltstackClusterType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AWSVPCVoltstackClusterType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AWSVPCVoltstackClusterType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AWSVPCVoltstackClusterType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AWSVPCVoltstackClusterType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AWSVPCVoltstackClusterType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AWSVPCVoltstackClusterType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AWSVPCVoltstackClusterType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AWSVPCVoltstackClusterType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageClassChoice = &AWSVPCVoltstackClusterType_DefaultStorage{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageClassList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.StorageClassListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageClassChoice = &AWSVPCVoltstackClusterType_StorageClassList{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedVipPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowedVipPort == nil {
				m.AllowedVipPort = &views.AllowedVIPPorts{}
			}
			if err := m.AllowedVipPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoK8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &AWSVPCVoltstackClusterType_NoK8SCluster{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &AWSVPCVoltstackClusterType_K8SCluster{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AWSVPCVoltstackClusterType_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AWSVPCVoltstackClusterType_DcClusterGroup{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AWSVPCVoltstackClusterType_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AWSVPCVoltstackClusterType_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AWSVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSVPCIngressGwReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSVPCIngressGwReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSVPCIngressGwReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedVipPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowedVipPort == nil {
				m.AllowedVipPort = &views.AllowedVIPPorts{}
			}
			if err := m.AllowedVipPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSVPCIngressEgressGwReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSVPCIngressEgressGwReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSVPCIngressEgressGwReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AWSVPCIngressEgressGwReplaceType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AWSVPCIngressEgressGwReplaceType_NoForwardProxy{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AWSVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AWSVPCIngressEgressGwReplaceType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoInsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AWSVPCIngressEgressGwReplaceType_NoInsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AWSVPCIngressEgressGwReplaceType_InsideStaticRoutes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AWSVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AWSVPCIngressEgressGwReplaceType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AWSVPCIngressEgressGwReplaceType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AWSVPCIngressEgressGwReplaceType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AWSVPCIngressEgressGwReplaceType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedVipPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowedVipPort == nil {
				m.AllowedVipPort = &views.AllowedVIPPorts{}
			}
			if err := m.AllowedVipPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedVipPortSli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowedVipPortSli == nil {
				m.AllowedVipPortSli = &views.AllowedVIPPorts{}
			}
			if err := m.AllowedVipPortSli.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AWSVPCIngressEgressGwReplaceType_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupOutsideVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AWSVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupInsideVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AWSVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AWSVPCIngressEgressGwReplaceType_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AWSVPCIngressEgressGwReplaceType_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AWSVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSVPCVoltstackClusterReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSVPCVoltstackClusterReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSVPCVoltstackClusterReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AWSVPCVoltstackClusterReplaceType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AWSVPCVoltstackClusterReplaceType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AWSVPCVoltstackClusterReplaceType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AWSVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AWSVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AWSVPCVoltstackClusterReplaceType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AWSVPCVoltstackClusterReplaceType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AWSVPCVoltstackClusterReplaceType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AWSVPCVoltstackClusterReplaceType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedVipPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowedVipPort == nil {
				m.AllowedVipPort = &views.AllowedVIPPorts{}
			}
			if err := m.AllowedVipPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AWSVPCVoltstackClusterReplaceType_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &AWSVPCVoltstackClusterReplaceType_DcClusterGroup{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AWSVPCVoltstackClusterReplaceType_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &AWSVPCVoltstackClusterReplaceType_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AWSVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSVPCSiteInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSVPCSiteInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSVPCSiteInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIps = append(m.PublicIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIps = append(m.PrivateIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetIds = append(m.SubnetIds, &views.AWSSubnetIdsType{})
			if err := m.SubnetIds[len(m.SubnetIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vpc == nil {
				m.Vpc = &views.AWSVPCchoiceType{}
			}
			if err := m.Vpc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSVPCIngressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_IngressGw{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSVPCIngressEgressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GlobalSpecType_AwsCred{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GlobalSpecType_Assisted{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &GlobalSpecType_NodesPerAz{v}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSVPCVoltstackClusterType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sw == nil {
				m.Sw = &views.VolterraSoftwareType{}
			}
			if err := m.Sw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Os == nil {
				m.Os = &views.OperatingSystemType{}
			}
			if err := m.Os.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipParamsPerAz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipParamsPerAz = append(m.VipParamsPerAz, &site.PublishVIPParamsPerAz{})
			if err := m.VipParamsPerAz[len(m.VipParamsPerAz)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserModificationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserModificationTimestamp == nil {
				m.UserModificationTimestamp = &types.Timestamp{}
			}
			if err := m.UserModificationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &GlobalSpecType_TotalNodes{v}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WorkerNodes = &GlobalSpecType_NoWorkerNodes{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteToSiteTunnelIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteToSiteTunnelIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &GlobalSpecType_DirectConnectDisabled{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DirectConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &GlobalSpecType_DirectConnectEnabled{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableInternetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetVipChoice = &GlobalSpecType_DisableInternetVip{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableInternetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetVipChoice = &GlobalSpecType_EnableInternetVip{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressGatewayDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EgressGatewayChoice = &GlobalSpecType_EgressGatewayDefault{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressNatGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AWSNATGatewaychoiceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EgressGatewayChoice = &GlobalSpecType_EgressNatGw{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressVirtualPrivateGateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AWSVirtualPrivateGatewaychoiceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EgressGatewayChoice = &GlobalSpecType_EgressVirtualPrivateGateway{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestedAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5XcSecurityGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SecurityGroupChoice = &GlobalSpecType_F5XcSecurityGroup{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSecurityGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SecurityGroupType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SecurityGroupChoice = &GlobalSpecType_CustomSecurityGroup{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateConnectivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrivateConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &GlobalSpecType_PrivateConnectivity{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteErrors = append(m.SiteErrors, &views.SiteError{})
			if err := m.SiteErrors[len(m.SiteErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationState", wireType)
			}
			m.ValidationState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationState |= views.ConfigValidationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomDns == nil {
				m.CustomDns = &views.CustomDNS{}
			}
			if err := m.CustomDns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 999:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TfParams == nil {
				m.TfParams = &views.ObjectRefType{}
			}
			if err := m.TfParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudSiteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudSiteInfo == nil {
				m.CloudSiteInfo = &AWSVPCSiteInfoType{}
			}
			if err := m.CloudSiteInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DirectConnectInfo == nil {
				m.DirectConnectInfo = &views.DirectConnectInfo{}
			}
			if err := m.DirectConnectInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vpc == nil {
				m.Vpc = &views.AWSVPCchoiceType{}
			}
			if err := m.Vpc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSVPCIngressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_IngressGw{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSVPCIngressEgressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &CreateSpecType_AwsCred{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &CreateSpecType_NodesPerAz{v}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSVPCVoltstackClusterType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sw == nil {
				m.Sw = &views.VolterraSoftwareType{}
			}
			if err := m.Sw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Os == nil {
				m.Os = &views.OperatingSystemType{}
			}
			if err := m.Os.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &CreateSpecType_TotalNodes{v}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WorkerNodes = &CreateSpecType_NoWorkerNodes{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &CreateSpecType_DirectConnectDisabled{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DirectConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &CreateSpecType_DirectConnectEnabled{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableInternetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetVipChoice = &CreateSpecType_DisableInternetVip{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableInternetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetVipChoice = &CreateSpecType_EnableInternetVip{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressGatewayDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EgressGatewayChoice = &CreateSpecType_EgressGatewayDefault{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressNatGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AWSNATGatewaychoiceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EgressGatewayChoice = &CreateSpecType_EgressNatGw{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressVirtualPrivateGateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AWSVirtualPrivateGatewaychoiceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EgressGatewayChoice = &CreateSpecType_EgressVirtualPrivateGateway{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5XcSecurityGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SecurityGroupChoice = &CreateSpecType_F5XcSecurityGroup{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSecurityGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SecurityGroupType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SecurityGroupChoice = &CreateSpecType_CustomSecurityGroup{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateConnectivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrivateConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &CreateSpecType_PrivateConnectivity{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomDns == nil {
				m.CustomDns = &views.CustomDNS{}
			}
			if err := m.CustomDns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSVPCIngressGwReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_IngressGw{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSVPCIngressEgressGwReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &ReplaceSpecType_AwsCred{v}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &ReplaceSpecType_NodesPerAz{v}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSVPCVoltstackClusterReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &ReplaceSpecType_TotalNodes{v}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WorkerNodes = &ReplaceSpecType_NoWorkerNodes{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &ReplaceSpecType_DirectConnectDisabled{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DirectConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &ReplaceSpecType_DirectConnectEnabled{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableInternetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetVipChoice = &ReplaceSpecType_DisableInternetVip{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableInternetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetVipChoice = &ReplaceSpecType_EnableInternetVip{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateConnectivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrivateConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &ReplaceSpecType_PrivateConnectivity{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomDns == nil {
				m.CustomDns = &views.CustomDNS{}
			}
			if err := m.CustomDns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vpc == nil {
				m.Vpc = &views.AWSVPCchoiceType{}
			}
			if err := m.Vpc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSVPCIngressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_IngressGw{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSVPCIngressEgressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GetSpecType_AwsCred{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GetSpecType_Assisted{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &GetSpecType_NodesPerAz{v}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSVPCVoltstackClusterType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteState", wireType)
			}
			m.SiteState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteState |= site.SiteState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipParamsPerAz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipParamsPerAz = append(m.VipParamsPerAz, &site.PublishVIPParamsPerAz{})
			if err := m.VipParamsPerAz[len(m.VipParamsPerAz)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserModificationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserModificationTimestamp == nil {
				m.UserModificationTimestamp = &types.Timestamp{}
			}
			if err := m.UserModificationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &GetSpecType_TotalNodes{v}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WorkerNodes = &GetSpecType_NoWorkerNodes{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &GetSpecType_DirectConnectDisabled{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DirectConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &GetSpecType_DirectConnectEnabled{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableInternetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetVipChoice = &GetSpecType_DisableInternetVip{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableInternetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetVipChoice = &GetSpecType_EnableInternetVip{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressGatewayDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EgressGatewayChoice = &GetSpecType_EgressGatewayDefault{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressNatGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AWSNATGatewaychoiceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EgressGatewayChoice = &GetSpecType_EgressNatGw{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressVirtualPrivateGateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AWSVirtualPrivateGatewaychoiceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EgressGatewayChoice = &GetSpecType_EgressVirtualPrivateGateway{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestedAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5XcSecurityGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SecurityGroupChoice = &GetSpecType_F5XcSecurityGroup{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSecurityGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SecurityGroupType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SecurityGroupChoice = &GetSpecType_CustomSecurityGroup{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateConnectivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrivateConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &GetSpecType_PrivateConnectivity{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteErrors = append(m.SiteErrors, &views.SiteError{})
			if err := m.SiteErrors[len(m.SiteErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationState", wireType)
			}
			m.ValidationState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationState |= views.ConfigValidationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomDns == nil {
				m.CustomDns = &views.CustomDNS{}
			}
			if err := m.CustomDns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudSiteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudSiteInfo == nil {
				m.CloudSiteInfo = &AWSVPCSiteInfoType{}
			}
			if err := m.CloudSiteInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DirectConnectInfo == nil {
				m.DirectConnectInfo = &views.DirectConnectInfo{}
			}
			if err := m.DirectConnectInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

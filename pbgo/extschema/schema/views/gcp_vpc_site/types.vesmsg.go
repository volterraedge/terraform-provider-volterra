// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package gcp_vpc_site

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_fleet "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet"
	ves_io_schema_network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
	ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.voltstack_cluster")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDeploymentDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPrivateConnectivityChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPrivateConnectivityChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *CreateSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDeployment().(type) {
	case *CreateSpecType_CloudCredentials:

		vref := m.GetCloudCredentials()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		dri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "cloud_credentials",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *CreateSpecType_CloudCredentials:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetCloudCredentials()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

func (m *CreateSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:

		return nil, nil

	case *CreateSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:

	case *CreateSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetPrivateConnectivityChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPrivateConnectivityChoice() == nil {
		return nil, nil
	}
	switch m.GetPrivateConnectivityChoice().(type) {
	case *CreateSpecType_PrivateConnectDisabled:

		return nil, nil

	case *CreateSpecType_PrivateConnectivity:

		drInfos, err := m.GetPrivateConnectivity().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPrivateConnectivity().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "private_connectivity." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteType() == nil {
		return nil, nil
	}
	switch m.GetSiteType().(type) {
	case *CreateSpecType_IngressGw:

		return nil, nil

	case *CreateSpecType_IngressEgressGw:

		drInfos, err := m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGw().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_VoltstackCluster:

		drInfos, err := m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackCluster().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) PrivateConnectivityChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for private_connectivity_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) GcpRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for gcp_region")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) InstanceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for instance_type")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) NodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) GcpLabelsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for gcp_labels")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for gcp_labels")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for gcp_labels")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map gcp_labels")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items gcp_labels")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *CreateSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*CreateSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*CreateSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BlockAllServices:
		if fv, exists := v.FldValidators["blocked_services_choice.block_all_services"]; exists {
			val := m.GetBlockedServicesChoice().(*CreateSpecType_BlockAllServices).BlockAllServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("block_all_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *CreateSpecType_CloudCredentials:
		if fv, exists := v.FldValidators["deployment.cloud_credentials"]; exists {
			val := m.GetDeployment().(*CreateSpecType_CloudCredentials).CloudCredentials
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("cloud_credentials"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_labels"]; exists {
		vOpts := append(opts, db.WithValidateField("gcp_labels"))
		if err := fv(ctx, m.GetGcpLabels(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_region"]; exists {

		vOpts := append(opts, db.WithValidateField("gcp_region"))
		if err := fv(ctx, m.GetGcpRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["instance_type"]; exists {

		vOpts := append(opts, db.WithValidateField("instance_type"))
		if err := fv(ctx, m.GetInstanceType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["kubernetes_upgrade_drain"]; exists {

		vOpts := append(opts, db.WithValidateField("kubernetes_upgrade_drain"))
		if err := fv(ctx, m.GetKubernetesUpgradeDrain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["nodes_per_az"]; exists {

		vOpts := append(opts, db.WithValidateField("nodes_per_az"))
		if err := fv(ctx, m.GetNodesPerAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["os"]; exists {

		vOpts := append(opts, db.WithValidateField("os"))
		if err := fv(ctx, m.GetOs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["private_connectivity_choice"]; exists {
		val := m.GetPrivateConnectivityChoice()
		vOpts := append(opts,
			db.WithValidateField("private_connectivity_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPrivateConnectivityChoice().(type) {
	case *CreateSpecType_PrivateConnectDisabled:
		if fv, exists := v.FldValidators["private_connectivity_choice.private_connect_disabled"]; exists {
			val := m.GetPrivateConnectivityChoice().(*CreateSpecType_PrivateConnectDisabled).PrivateConnectDisabled
			vOpts := append(opts,
				db.WithValidateField("private_connectivity_choice"),
				db.WithValidateField("private_connect_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_PrivateConnectivity:
		if fv, exists := v.FldValidators["private_connectivity_choice.private_connectivity"]; exists {
			val := m.GetPrivateConnectivityChoice().(*CreateSpecType_PrivateConnectivity).PrivateConnectivity
			vOpts := append(opts,
				db.WithValidateField("private_connectivity_choice"),
				db.WithValidateField("private_connectivity"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *CreateSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*CreateSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*CreateSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*CreateSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sw"]; exists {

		vOpts := append(opts, db.WithValidateField("sw"))
		if err := fv(ctx, m.GetSw(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhPrivateConnectivityChoice := v.PrivateConnectivityChoiceValidationRuleHandler
	rulesPrivateConnectivityChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPrivateConnectivityChoice(rulesPrivateConnectivityChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.private_connectivity_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["private_connectivity_choice"] = vFn

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhGcpRegion := v.GcpRegionValidationRuleHandler
	rulesGcpRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhGcpRegion(rulesGcpRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.gcp_region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_region"] = vFn

	vrhInstanceType := v.InstanceTypeValidationRuleHandler
	rulesInstanceType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhInstanceType(rulesInstanceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.instance_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["instance_type"] = vFn

	vrhNodesPerAz := v.NodesPerAzValidationRuleHandler
	rulesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFn, err = vrhNodesPerAz(rulesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.nodes_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["nodes_per_az"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "64000",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "8192",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhGcpLabels := v.GcpLabelsValidationRuleHandler
	rulesGcpLabels := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "127",
		"ves.io.schema.rules.map.max_pairs":             "40",
		"ves.io.schema.rules.map.values.string.max_len": "255",
	}
	vFn, err = vrhGcpLabels(rulesGcpLabels)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.gcp_labels: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_labels"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["deployment.cloud_credentials"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["private_connectivity_choice.private_connectivity"] = ves_io_schema_views.PrivateConnectConfigTypeValidator().Validate

	v.FldValidators["site_type.ingress_gw"] = GCPVPCIngressGwTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw"] = GCPVPCIngressEgressGwTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = GCPVPCVoltstackClusterTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["sw"] = ves_io_schema_views.VolterraSoftwareTypeValidator().Validate

	v.FldValidators["os"] = ves_io_schema_views.OperatingSystemTypeValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	v.FldValidators["kubernetes_upgrade_drain"] = ves_io_schema_views.KubernetesUpgradeDrainValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPVPCIngressEgressGwReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPVPCIngressEgressGwReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GCPVPCIngressEgressGwReplaceType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GCPVPCIngressEgressGwReplaceType.global_network_list")
	}

	return nil
}

func (m *GCPVPCIngressEgressGwReplaceType) DeepCopy() *GCPVPCIngressEgressGwReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPVPCIngressEgressGwReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPVPCIngressEgressGwReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPVPCIngressEgressGwReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPVPCIngressEgressGwReplaceTypeValidator().Validate(ctx, m, opts...)
}

func (m *GCPVPCIngressEgressGwReplaceType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetInsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetInsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GCPVPCIngressEgressGwReplaceType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *GCPVPCIngressEgressGwReplaceType_NoDcClusterGroup:

		return nil, nil

	case *GCPVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn:

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_outside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GCPVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn:

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_inside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GCPVPCIngressEgressGwReplaceType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *GCPVPCIngressEgressGwReplaceType_NoDcClusterGroup:

	case *GCPVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GCPVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GCPVPCIngressEgressGwReplaceType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *GCPVPCIngressEgressGwReplaceType_NoForwardProxy:

		return nil, nil

	case *GCPVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *GCPVPCIngressEgressGwReplaceType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GCPVPCIngressEgressGwReplaceType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *GCPVPCIngressEgressGwReplaceType_NoGlobalNetwork:

		return nil, nil

	case *GCPVPCIngressEgressGwReplaceType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GCPVPCIngressEgressGwReplaceType) GetInsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetInsideStaticRouteChoice().(type) {
	case *GCPVPCIngressEgressGwReplaceType_NoInsideStaticRoutes:

		return nil, nil

	case *GCPVPCIngressEgressGwReplaceType_InsideStaticRoutes:

		drInfos, err := m.GetInsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "inside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GCPVPCIngressEgressGwReplaceType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *GCPVPCIngressEgressGwReplaceType_NoNetworkPolicy:

		return nil, nil

	case *GCPVPCIngressEgressGwReplaceType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *GCPVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GCPVPCIngressEgressGwReplaceType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *GCPVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes:

		return nil, nil

	case *GCPVPCIngressEgressGwReplaceType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGCPVPCIngressEgressGwReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPVPCIngressEgressGwReplaceType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwReplaceType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwReplaceType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwReplaceType) InsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for inside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwReplaceType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwReplaceType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwReplaceType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwReplaceType) NodeNumberValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for node_number")
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwReplaceType) GcpZoneNamesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for gcp_zone_names")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for gcp_zone_names")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated gcp_zone_names")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items gcp_zone_names")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPVPCIngressEgressGwReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPVPCIngressEgressGwReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *GCPVPCIngressEgressGwReplaceType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*GCPVPCIngressEgressGwReplaceType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*GCPVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn).DcClusterGroupOutsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_outside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*GCPVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn).DcClusterGroupInsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_inside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *GCPVPCIngressEgressGwReplaceType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*GCPVPCIngressEgressGwReplaceType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*GCPVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwReplaceType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*GCPVPCIngressEgressGwReplaceType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["gcp_zone_names"]; exists {
		vOpts := append(opts, db.WithValidateField("gcp_zone_names"))
		if err := fv(ctx, m.GetGcpZoneNames(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *GCPVPCIngressEgressGwReplaceType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*GCPVPCIngressEgressGwReplaceType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwReplaceType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*GCPVPCIngressEgressGwReplaceType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["inside_network"]; exists {

		vOpts := append(opts, db.WithValidateField("inside_network"))
		if err := fv(ctx, m.GetInsideNetwork(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["inside_static_route_choice"]; exists {
		val := m.GetInsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("inside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsideStaticRouteChoice().(type) {
	case *GCPVPCIngressEgressGwReplaceType_NoInsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.no_inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*GCPVPCIngressEgressGwReplaceType_NoInsideStaticRoutes).NoInsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("no_inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwReplaceType_InsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*GCPVPCIngressEgressGwReplaceType_InsideStaticRoutes).InsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["inside_subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("inside_subnet"))
		if err := fv(ctx, m.GetInsideSubnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *GCPVPCIngressEgressGwReplaceType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*GCPVPCIngressEgressGwReplaceType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwReplaceType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*GCPVPCIngressEgressGwReplaceType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*GCPVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["node_number"]; exists {

		vOpts := append(opts, db.WithValidateField("node_number"))
		if err := fv(ctx, m.GetNodeNumber(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["outside_network"]; exists {

		vOpts := append(opts, db.WithValidateField("outside_network"))
		if err := fv(ctx, m.GetOutsideNetwork(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *GCPVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*GCPVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwReplaceType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*GCPVPCIngressEgressGwReplaceType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("outside_subnet"))
		if err := fv(ctx, m.GetOutsideSubnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *GCPVPCIngressEgressGwReplaceType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*GCPVPCIngressEgressGwReplaceType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwReplaceType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*GCPVPCIngressEgressGwReplaceType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPVPCIngressEgressGwReplaceTypeValidator = func() *ValidateGCPVPCIngressEgressGwReplaceType {
	v := &ValidateGCPVPCIngressEgressGwReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwReplaceType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwReplaceType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwReplaceType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhInsideStaticRouteChoice := v.InsideStaticRouteChoiceValidationRuleHandler
	rulesInsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsideStaticRouteChoice(rulesInsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwReplaceType.inside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["inside_static_route_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwReplaceType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwReplaceType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwReplaceType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	vrhNodeNumber := v.NodeNumberValidationRuleHandler
	rulesNodeNumber := map[string]string{
		"ves.io.schema.rules.uint32.in": "[1,3]",
	}
	vFn, err = vrhNodeNumber(rulesNodeNumber)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwReplaceType.node_number: %s", err)
		panic(errMsg)
	}
	v.FldValidators["node_number"] = vFn

	vrhGcpZoneNames := v.GcpZoneNamesValidationRuleHandler
	rulesGcpZoneNames := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
		"ves.io.schema.rules.repeated.unique":    "true",
		"ves.io.schema.rules.string.max_len":     "64",
	}
	vFn, err = vrhGcpZoneNames(rulesGcpZoneNames)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwReplaceType.gcp_zone_names: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_zone_names"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["inside_static_route_choice.inside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["inside_network"] = ves_io_schema_views.GCPVPCNetworkChoiceTypeValidator().Validate

	v.FldValidators["outside_network"] = ves_io_schema_views.GCPVPCNetworkChoiceTypeValidator().Validate

	v.FldValidators["inside_subnet"] = ves_io_schema_views.GCPVPCSubnetChoiceTypeValidator().Validate

	v.FldValidators["outside_subnet"] = ves_io_schema_views.GCPVPCSubnetChoiceTypeValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	return v
}()

func GCPVPCIngressEgressGwReplaceTypeValidator() db.Validator {
	return DefaultGCPVPCIngressEgressGwReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPVPCIngressEgressGwType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPVPCIngressEgressGwType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GCPVPCIngressEgressGwType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GCPVPCIngressEgressGwType.global_network_list")
	}

	return nil
}

func (m *GCPVPCIngressEgressGwType) DeepCopy() *GCPVPCIngressEgressGwType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPVPCIngressEgressGwType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPVPCIngressEgressGwType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPVPCIngressEgressGwType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPVPCIngressEgressGwTypeValidator().Validate(ctx, m, opts...)
}

func (m *GCPVPCIngressEgressGwType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetInsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetInsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GCPVPCIngressEgressGwType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *GCPVPCIngressEgressGwType_NoDcClusterGroup:

		return nil, nil

	case *GCPVPCIngressEgressGwType_DcClusterGroupOutsideVn:

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_outside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GCPVPCIngressEgressGwType_DcClusterGroupInsideVn:

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_inside_vn",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GCPVPCIngressEgressGwType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *GCPVPCIngressEgressGwType_NoDcClusterGroup:

	case *GCPVPCIngressEgressGwType_DcClusterGroupOutsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupOutsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GCPVPCIngressEgressGwType_DcClusterGroupInsideVn:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroupInsideVn()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GCPVPCIngressEgressGwType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *GCPVPCIngressEgressGwType_NoForwardProxy:

		return nil, nil

	case *GCPVPCIngressEgressGwType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *GCPVPCIngressEgressGwType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GCPVPCIngressEgressGwType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *GCPVPCIngressEgressGwType_NoGlobalNetwork:

		return nil, nil

	case *GCPVPCIngressEgressGwType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GCPVPCIngressEgressGwType) GetInsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetInsideStaticRouteChoice().(type) {
	case *GCPVPCIngressEgressGwType_NoInsideStaticRoutes:

		return nil, nil

	case *GCPVPCIngressEgressGwType_InsideStaticRoutes:

		drInfos, err := m.GetInsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "inside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GCPVPCIngressEgressGwType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *GCPVPCIngressEgressGwType_NoNetworkPolicy:

		return nil, nil

	case *GCPVPCIngressEgressGwType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *GCPVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GCPVPCIngressEgressGwType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *GCPVPCIngressEgressGwType_NoOutsideStaticRoutes:

		return nil, nil

	case *GCPVPCIngressEgressGwType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGCPVPCIngressEgressGwType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPVPCIngressEgressGwType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwType) InsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for inside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwType) GcpCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for gcp_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwType) NodeNumberValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for node_number")
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwType) GcpZoneNamesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for gcp_zone_names")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for gcp_zone_names")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated gcp_zone_names")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items gcp_zone_names")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressEgressGwType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPVPCIngressEgressGwType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPVPCIngressEgressGwType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *GCPVPCIngressEgressGwType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*GCPVPCIngressEgressGwType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwType_DcClusterGroupOutsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*GCPVPCIngressEgressGwType_DcClusterGroupOutsideVn).DcClusterGroupOutsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_outside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwType_DcClusterGroupInsideVn:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"]; exists {
			val := m.GetDcClusterGroupChoice().(*GCPVPCIngressEgressGwType_DcClusterGroupInsideVn).DcClusterGroupInsideVn
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group_inside_vn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *GCPVPCIngressEgressGwType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*GCPVPCIngressEgressGwType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*GCPVPCIngressEgressGwType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*GCPVPCIngressEgressGwType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["gcp_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("gcp_certified_hw"))
		if err := fv(ctx, m.GetGcpCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_zone_names"]; exists {
		vOpts := append(opts, db.WithValidateField("gcp_zone_names"))
		if err := fv(ctx, m.GetGcpZoneNames(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *GCPVPCIngressEgressGwType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*GCPVPCIngressEgressGwType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*GCPVPCIngressEgressGwType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["inside_network"]; exists {

		vOpts := append(opts, db.WithValidateField("inside_network"))
		if err := fv(ctx, m.GetInsideNetwork(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["inside_static_route_choice"]; exists {
		val := m.GetInsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("inside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsideStaticRouteChoice().(type) {
	case *GCPVPCIngressEgressGwType_NoInsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.no_inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*GCPVPCIngressEgressGwType_NoInsideStaticRoutes).NoInsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("no_inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwType_InsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*GCPVPCIngressEgressGwType_InsideStaticRoutes).InsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["inside_subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("inside_subnet"))
		if err := fv(ctx, m.GetInsideSubnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *GCPVPCIngressEgressGwType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*GCPVPCIngressEgressGwType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*GCPVPCIngressEgressGwType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*GCPVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["node_number"]; exists {

		vOpts := append(opts, db.WithValidateField("node_number"))
		if err := fv(ctx, m.GetNodeNumber(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["outside_network"]; exists {

		vOpts := append(opts, db.WithValidateField("outside_network"))
		if err := fv(ctx, m.GetOutsideNetwork(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *GCPVPCIngressEgressGwType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*GCPVPCIngressEgressGwType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*GCPVPCIngressEgressGwType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("outside_subnet"))
		if err := fv(ctx, m.GetOutsideSubnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *GCPVPCIngressEgressGwType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*GCPVPCIngressEgressGwType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCIngressEgressGwType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*GCPVPCIngressEgressGwType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPVPCIngressEgressGwTypeValidator = func() *ValidateGCPVPCIngressEgressGwType {
	v := &ValidateGCPVPCIngressEgressGwType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhInsideStaticRouteChoice := v.InsideStaticRouteChoiceValidationRuleHandler
	rulesInsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsideStaticRouteChoice(rulesInsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwType.inside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["inside_static_route_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	vrhGcpCertifiedHw := v.GcpCertifiedHwValidationRuleHandler
	rulesGcpCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"gcp-byol-multi-nic-voltmesh\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhGcpCertifiedHw(rulesGcpCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwType.gcp_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_certified_hw"] = vFn

	vrhNodeNumber := v.NodeNumberValidationRuleHandler
	rulesNodeNumber := map[string]string{
		"ves.io.schema.rules.uint32.in": "[1,3]",
	}
	vFn, err = vrhNodeNumber(rulesNodeNumber)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwType.node_number: %s", err)
		panic(errMsg)
	}
	v.FldValidators["node_number"] = vFn

	vrhGcpZoneNames := v.GcpZoneNamesValidationRuleHandler
	rulesGcpZoneNames := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
		"ves.io.schema.rules.repeated.unique":    "true",
		"ves.io.schema.rules.string.max_len":     "64",
	}
	vFn, err = vrhGcpZoneNames(rulesGcpZoneNames)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressEgressGwType.gcp_zone_names: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_zone_names"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_outside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["dc_cluster_group_choice.dc_cluster_group_inside_vn"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["inside_static_route_choice.inside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["inside_network"] = ves_io_schema_views.GCPVPCNetworkChoiceTypeValidator().Validate

	v.FldValidators["outside_network"] = ves_io_schema_views.GCPVPCNetworkChoiceTypeValidator().Validate

	v.FldValidators["inside_subnet"] = ves_io_schema_views.GCPVPCSubnetChoiceTypeValidator().Validate

	v.FldValidators["outside_subnet"] = ves_io_schema_views.GCPVPCSubnetChoiceTypeValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	return v
}()

func GCPVPCIngressEgressGwTypeValidator() db.Validator {
	return DefaultGCPVPCIngressEgressGwTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPVPCIngressGwReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPVPCIngressGwReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPVPCIngressGwReplaceType) DeepCopy() *GCPVPCIngressGwReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPVPCIngressGwReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPVPCIngressGwReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPVPCIngressGwReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPVPCIngressGwReplaceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGCPVPCIngressGwReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPVPCIngressGwReplaceType) GcpZoneNamesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for gcp_zone_names")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for gcp_zone_names")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated gcp_zone_names")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items gcp_zone_names")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressGwReplaceType) NodeNumberValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for node_number")
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressGwReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPVPCIngressGwReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPVPCIngressGwReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["gcp_zone_names"]; exists {
		vOpts := append(opts, db.WithValidateField("gcp_zone_names"))
		if err := fv(ctx, m.GetGcpZoneNames(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["local_network"]; exists {

		vOpts := append(opts, db.WithValidateField("local_network"))
		if err := fv(ctx, m.GetLocalNetwork(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["local_subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("local_subnet"))
		if err := fv(ctx, m.GetLocalSubnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["node_number"]; exists {

		vOpts := append(opts, db.WithValidateField("node_number"))
		if err := fv(ctx, m.GetNodeNumber(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPVPCIngressGwReplaceTypeValidator = func() *ValidateGCPVPCIngressGwReplaceType {
	v := &ValidateGCPVPCIngressGwReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhGcpZoneNames := v.GcpZoneNamesValidationRuleHandler
	rulesGcpZoneNames := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
		"ves.io.schema.rules.repeated.unique":    "true",
		"ves.io.schema.rules.string.max_len":     "64",
	}
	vFn, err = vrhGcpZoneNames(rulesGcpZoneNames)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressGwReplaceType.gcp_zone_names: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_zone_names"] = vFn

	vrhNodeNumber := v.NodeNumberValidationRuleHandler
	rulesNodeNumber := map[string]string{
		"ves.io.schema.rules.uint32.in": "[1,3]",
	}
	vFn, err = vrhNodeNumber(rulesNodeNumber)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressGwReplaceType.node_number: %s", err)
		panic(errMsg)
	}
	v.FldValidators["node_number"] = vFn

	v.FldValidators["local_network"] = ves_io_schema_views.GCPVPCNetworkChoiceTypeValidator().Validate

	v.FldValidators["local_subnet"] = ves_io_schema_views.GCPVPCSubnetChoiceTypeValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	return v
}()

func GCPVPCIngressGwReplaceTypeValidator() db.Validator {
	return DefaultGCPVPCIngressGwReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPVPCIngressGwType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPVPCIngressGwType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPVPCIngressGwType) DeepCopy() *GCPVPCIngressGwType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPVPCIngressGwType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPVPCIngressGwType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPVPCIngressGwType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPVPCIngressGwTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGCPVPCIngressGwType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPVPCIngressGwType) GcpCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for gcp_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressGwType) GcpZoneNamesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for gcp_zone_names")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for gcp_zone_names")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated gcp_zone_names")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items gcp_zone_names")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressGwType) NodeNumberValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for node_number")
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCIngressGwType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPVPCIngressGwType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPVPCIngressGwType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["gcp_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("gcp_certified_hw"))
		if err := fv(ctx, m.GetGcpCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_zone_names"]; exists {
		vOpts := append(opts, db.WithValidateField("gcp_zone_names"))
		if err := fv(ctx, m.GetGcpZoneNames(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["local_network"]; exists {

		vOpts := append(opts, db.WithValidateField("local_network"))
		if err := fv(ctx, m.GetLocalNetwork(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["local_subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("local_subnet"))
		if err := fv(ctx, m.GetLocalSubnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["node_number"]; exists {

		vOpts := append(opts, db.WithValidateField("node_number"))
		if err := fv(ctx, m.GetNodeNumber(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPVPCIngressGwTypeValidator = func() *ValidateGCPVPCIngressGwType {
	v := &ValidateGCPVPCIngressGwType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhGcpCertifiedHw := v.GcpCertifiedHwValidationRuleHandler
	rulesGcpCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"gcp-byol-voltmesh\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhGcpCertifiedHw(rulesGcpCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressGwType.gcp_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_certified_hw"] = vFn

	vrhGcpZoneNames := v.GcpZoneNamesValidationRuleHandler
	rulesGcpZoneNames := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
		"ves.io.schema.rules.repeated.unique":    "true",
		"ves.io.schema.rules.string.max_len":     "64",
	}
	vFn, err = vrhGcpZoneNames(rulesGcpZoneNames)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressGwType.gcp_zone_names: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_zone_names"] = vFn

	vrhNodeNumber := v.NodeNumberValidationRuleHandler
	rulesNodeNumber := map[string]string{
		"ves.io.schema.rules.uint32.in": "[1,3]",
	}
	vFn, err = vrhNodeNumber(rulesNodeNumber)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCIngressGwType.node_number: %s", err)
		panic(errMsg)
	}
	v.FldValidators["node_number"] = vFn

	v.FldValidators["local_network"] = ves_io_schema_views.GCPVPCNetworkChoiceTypeValidator().Validate

	v.FldValidators["local_subnet"] = ves_io_schema_views.GCPVPCSubnetChoiceTypeValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	return v
}()

func GCPVPCIngressGwTypeValidator() db.Validator {
	return DefaultGCPVPCIngressGwTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPVPCSiteInfoType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPVPCSiteInfoType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPVPCSiteInfoType) DeepCopy() *GCPVPCSiteInfoType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPVPCSiteInfoType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPVPCSiteInfoType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPVPCSiteInfoType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPVPCSiteInfoTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGCPVPCSiteInfoType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPVPCSiteInfoType) PublicIpsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for public_ips")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for public_ips")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated public_ips")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items public_ips")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCSiteInfoType) PrivateIpsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for private_ips")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for private_ips")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated private_ips")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items private_ips")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCSiteInfoType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPVPCSiteInfoType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPVPCSiteInfoType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["private_ips"]; exists {
		vOpts := append(opts, db.WithValidateField("private_ips"))
		if err := fv(ctx, m.GetPrivateIps(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["public_ips"]; exists {
		vOpts := append(opts, db.WithValidateField("public_ips"))
		if err := fv(ctx, m.GetPublicIps(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPVPCSiteInfoTypeValidator = func() *ValidateGCPVPCSiteInfoType {
	v := &ValidateGCPVPCSiteInfoType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPublicIps := v.PublicIpsValidationRuleHandler
	rulesPublicIps := map[string]string{
		"ves.io.schema.rules.message.required":         "true",
		"ves.io.schema.rules.repeated.items.string.ip": "true",
		"ves.io.schema.rules.repeated.num_items":       "0,1,3",
		"ves.io.schema.rules.repeated.unique":          "true",
	}
	vFn, err = vrhPublicIps(rulesPublicIps)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCSiteInfoType.public_ips: %s", err)
		panic(errMsg)
	}
	v.FldValidators["public_ips"] = vFn

	vrhPrivateIps := v.PrivateIpsValidationRuleHandler
	rulesPrivateIps := map[string]string{
		"ves.io.schema.rules.message.required":         "true",
		"ves.io.schema.rules.repeated.items.string.ip": "true",
		"ves.io.schema.rules.repeated.num_items":       "0,1,3",
		"ves.io.schema.rules.repeated.unique":          "true",
	}
	vFn, err = vrhPrivateIps(rulesPrivateIps)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCSiteInfoType.private_ips: %s", err)
		panic(errMsg)
	}
	v.FldValidators["private_ips"] = vFn

	return v
}()

func GCPVPCSiteInfoTypeValidator() db.Validator {
	return DefaultGCPVPCSiteInfoTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPVPCVoltstackClusterReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPVPCVoltstackClusterReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GCPVPCVoltstackClusterReplaceType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GCPVPCVoltstackClusterReplaceType.global_network_list")
	}

	return nil
}

func (m *GCPVPCVoltstackClusterReplaceType) DeepCopy() *GCPVPCVoltstackClusterReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPVPCVoltstackClusterReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPVPCVoltstackClusterReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPVPCVoltstackClusterReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPVPCVoltstackClusterReplaceTypeValidator().Validate(ctx, m, opts...)
}

func (m *GCPVPCVoltstackClusterReplaceType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GCPVPCVoltstackClusterReplaceType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *GCPVPCVoltstackClusterReplaceType_NoDcClusterGroup:

		return nil, nil

	case *GCPVPCVoltstackClusterReplaceType_DcClusterGroup:

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GCPVPCVoltstackClusterReplaceType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *GCPVPCVoltstackClusterReplaceType_NoDcClusterGroup:

	case *GCPVPCVoltstackClusterReplaceType_DcClusterGroup:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GCPVPCVoltstackClusterReplaceType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *GCPVPCVoltstackClusterReplaceType_NoForwardProxy:

		return nil, nil

	case *GCPVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *GCPVPCVoltstackClusterReplaceType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GCPVPCVoltstackClusterReplaceType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *GCPVPCVoltstackClusterReplaceType_NoGlobalNetwork:

		return nil, nil

	case *GCPVPCVoltstackClusterReplaceType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GCPVPCVoltstackClusterReplaceType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *GCPVPCVoltstackClusterReplaceType_NoNetworkPolicy:

		return nil, nil

	case *GCPVPCVoltstackClusterReplaceType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *GCPVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GCPVPCVoltstackClusterReplaceType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *GCPVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes:

		return nil, nil

	case *GCPVPCVoltstackClusterReplaceType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGCPVPCVoltstackClusterReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPVPCVoltstackClusterReplaceType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterReplaceType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterReplaceType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterReplaceType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterReplaceType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterReplaceType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterReplaceType) NodeNumberValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for node_number")
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterReplaceType) GcpZoneNamesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for gcp_zone_names")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for gcp_zone_names")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated gcp_zone_names")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items gcp_zone_names")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPVPCVoltstackClusterReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPVPCVoltstackClusterReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *GCPVPCVoltstackClusterReplaceType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*GCPVPCVoltstackClusterReplaceType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterReplaceType_DcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*GCPVPCVoltstackClusterReplaceType_DcClusterGroup).DcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *GCPVPCVoltstackClusterReplaceType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*GCPVPCVoltstackClusterReplaceType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*GCPVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterReplaceType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*GCPVPCVoltstackClusterReplaceType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["gcp_zone_names"]; exists {
		vOpts := append(opts, db.WithValidateField("gcp_zone_names"))
		if err := fv(ctx, m.GetGcpZoneNames(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *GCPVPCVoltstackClusterReplaceType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*GCPVPCVoltstackClusterReplaceType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterReplaceType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*GCPVPCVoltstackClusterReplaceType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *GCPVPCVoltstackClusterReplaceType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*GCPVPCVoltstackClusterReplaceType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterReplaceType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*GCPVPCVoltstackClusterReplaceType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*GCPVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["node_number"]; exists {

		vOpts := append(opts, db.WithValidateField("node_number"))
		if err := fv(ctx, m.GetNodeNumber(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *GCPVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*GCPVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterReplaceType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*GCPVPCVoltstackClusterReplaceType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_local_network"]; exists {

		vOpts := append(opts, db.WithValidateField("site_local_network"))
		if err := fv(ctx, m.GetSiteLocalNetwork(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_local_subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("site_local_subnet"))
		if err := fv(ctx, m.GetSiteLocalSubnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *GCPVPCVoltstackClusterReplaceType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*GCPVPCVoltstackClusterReplaceType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterReplaceType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*GCPVPCVoltstackClusterReplaceType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPVPCVoltstackClusterReplaceTypeValidator = func() *ValidateGCPVPCVoltstackClusterReplaceType {
	v := &ValidateGCPVPCVoltstackClusterReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterReplaceType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterReplaceType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterReplaceType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterReplaceType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterReplaceType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterReplaceType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	vrhNodeNumber := v.NodeNumberValidationRuleHandler
	rulesNodeNumber := map[string]string{
		"ves.io.schema.rules.uint32.in": "[1,3]",
	}
	vFn, err = vrhNodeNumber(rulesNodeNumber)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterReplaceType.node_number: %s", err)
		panic(errMsg)
	}
	v.FldValidators["node_number"] = vFn

	vrhGcpZoneNames := v.GcpZoneNamesValidationRuleHandler
	rulesGcpZoneNames := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
		"ves.io.schema.rules.repeated.unique":    "true",
		"ves.io.schema.rules.string.max_len":     "64",
	}
	vFn, err = vrhGcpZoneNames(rulesGcpZoneNames)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterReplaceType.gcp_zone_names: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_zone_names"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["site_local_network"] = ves_io_schema_views.GCPVPCNetworkChoiceTypeValidator().Validate

	v.FldValidators["site_local_subnet"] = ves_io_schema_views.GCPVPCSubnetChoiceTypeValidator().Validate

	return v
}()

func GCPVPCVoltstackClusterReplaceTypeValidator() db.Validator {
	return DefaultGCPVPCVoltstackClusterReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPVPCVoltstackClusterType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPVPCVoltstackClusterType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GCPVPCVoltstackClusterType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GCPVPCVoltstackClusterType.global_network_list")
	}

	return nil
}

func (m *GCPVPCVoltstackClusterType) DeepCopy() *GCPVPCVoltstackClusterType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPVPCVoltstackClusterType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPVPCVoltstackClusterType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPVPCVoltstackClusterType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPVPCVoltstackClusterTypeValidator().Validate(ctx, m, opts...)
}

func (m *GCPVPCVoltstackClusterType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetK8SClusterChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetK8SClusterChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GCPVPCVoltstackClusterType) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *GCPVPCVoltstackClusterType_NoDcClusterGroup:

		return nil, nil

	case *GCPVPCVoltstackClusterType_DcClusterGroup:

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GCPVPCVoltstackClusterType) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *GCPVPCVoltstackClusterType_NoDcClusterGroup:

	case *GCPVPCVoltstackClusterType_DcClusterGroup:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GCPVPCVoltstackClusterType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *GCPVPCVoltstackClusterType_NoForwardProxy:

		return nil, nil

	case *GCPVPCVoltstackClusterType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *GCPVPCVoltstackClusterType_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GCPVPCVoltstackClusterType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *GCPVPCVoltstackClusterType_NoGlobalNetwork:

		return nil, nil

	case *GCPVPCVoltstackClusterType_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GCPVPCVoltstackClusterType) GetK8SClusterChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetK8SClusterChoice().(type) {
	case *GCPVPCVoltstackClusterType_NoK8SCluster:

		return nil, nil

	case *GCPVPCVoltstackClusterType_K8SCluster:

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("k8s_cluster.Object")
		dri := db.DRefInfo{
			RefdType:   "k8s_cluster.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "k8s_cluster",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetK8SClusterChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GCPVPCVoltstackClusterType) GetK8SClusterChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetK8SClusterChoice().(type) {
	case *GCPVPCVoltstackClusterType_NoK8SCluster:

	case *GCPVPCVoltstackClusterType_K8SCluster:
		refdType, err := d.TypeForEntryKind("", "", "k8s_cluster.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: k8s_cluster")
		}

		vref := m.GetK8SCluster()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "k8s_cluster.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GCPVPCVoltstackClusterType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *GCPVPCVoltstackClusterType_NoNetworkPolicy:

		return nil, nil

	case *GCPVPCVoltstackClusterType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *GCPVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GCPVPCVoltstackClusterType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOutsideStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetOutsideStaticRouteChoice().(type) {
	case *GCPVPCVoltstackClusterType_NoOutsideStaticRoutes:

		return nil, nil

	case *GCPVPCVoltstackClusterType_OutsideStaticRoutes:

		drInfos, err := m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOutsideStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "outside_static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGCPVPCVoltstackClusterType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPVPCVoltstackClusterType) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterType) K8SClusterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for k8s_cluster_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterType) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterType) StorageClassChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for storage_class_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterType) GcpCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for gcp_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterType) NodeNumberValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for node_number")
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterType) GcpZoneNamesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for gcp_zone_names")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for gcp_zone_names")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated gcp_zone_names")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items gcp_zone_names")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGCPVPCVoltstackClusterType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPVPCVoltstackClusterType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPVPCVoltstackClusterType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *GCPVPCVoltstackClusterType_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*GCPVPCVoltstackClusterType_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterType_DcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*GCPVPCVoltstackClusterType_DcClusterGroup).DcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *GCPVPCVoltstackClusterType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*GCPVPCVoltstackClusterType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*GCPVPCVoltstackClusterType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*GCPVPCVoltstackClusterType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["gcp_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("gcp_certified_hw"))
		if err := fv(ctx, m.GetGcpCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_zone_names"]; exists {
		vOpts := append(opts, db.WithValidateField("gcp_zone_names"))
		if err := fv(ctx, m.GetGcpZoneNames(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *GCPVPCVoltstackClusterType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*GCPVPCVoltstackClusterType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*GCPVPCVoltstackClusterType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["k8s_cluster_choice"]; exists {
		val := m.GetK8SClusterChoice()
		vOpts := append(opts,
			db.WithValidateField("k8s_cluster_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetK8SClusterChoice().(type) {
	case *GCPVPCVoltstackClusterType_NoK8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.no_k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*GCPVPCVoltstackClusterType_NoK8SCluster).NoK8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("no_k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterType_K8SCluster:
		if fv, exists := v.FldValidators["k8s_cluster_choice.k8s_cluster"]; exists {
			val := m.GetK8SClusterChoice().(*GCPVPCVoltstackClusterType_K8SCluster).K8SCluster
			vOpts := append(opts,
				db.WithValidateField("k8s_cluster_choice"),
				db.WithValidateField("k8s_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *GCPVPCVoltstackClusterType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*GCPVPCVoltstackClusterType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*GCPVPCVoltstackClusterType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*GCPVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["node_number"]; exists {

		vOpts := append(opts, db.WithValidateField("node_number"))
		if err := fv(ctx, m.GetNodeNumber(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *GCPVPCVoltstackClusterType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*GCPVPCVoltstackClusterType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*GCPVPCVoltstackClusterType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_local_network"]; exists {

		vOpts := append(opts, db.WithValidateField("site_local_network"))
		if err := fv(ctx, m.GetSiteLocalNetwork(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_local_subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("site_local_subnet"))
		if err := fv(ctx, m.GetSiteLocalSubnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *GCPVPCVoltstackClusterType_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*GCPVPCVoltstackClusterType_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterType_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*GCPVPCVoltstackClusterType_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["storage_class_choice"]; exists {
		val := m.GetStorageClassChoice()
		vOpts := append(opts,
			db.WithValidateField("storage_class_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStorageClassChoice().(type) {
	case *GCPVPCVoltstackClusterType_DefaultStorage:
		if fv, exists := v.FldValidators["storage_class_choice.default_storage"]; exists {
			val := m.GetStorageClassChoice().(*GCPVPCVoltstackClusterType_DefaultStorage).DefaultStorage
			vOpts := append(opts,
				db.WithValidateField("storage_class_choice"),
				db.WithValidateField("default_storage"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPVPCVoltstackClusterType_StorageClassList:
		if fv, exists := v.FldValidators["storage_class_choice.storage_class_list"]; exists {
			val := m.GetStorageClassChoice().(*GCPVPCVoltstackClusterType_StorageClassList).StorageClassList
			vOpts := append(opts,
				db.WithValidateField("storage_class_choice"),
				db.WithValidateField("storage_class_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPVPCVoltstackClusterTypeValidator = func() *ValidateGCPVPCVoltstackClusterType {
	v := &ValidateGCPVPCVoltstackClusterType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterType.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhK8SClusterChoice := v.K8SClusterChoiceValidationRuleHandler
	rulesK8SClusterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhK8SClusterChoice(rulesK8SClusterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterType.k8s_cluster_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["k8s_cluster_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterType.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	vrhStorageClassChoice := v.StorageClassChoiceValidationRuleHandler
	rulesStorageClassChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStorageClassChoice(rulesStorageClassChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterType.storage_class_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_class_choice"] = vFn

	vrhGcpCertifiedHw := v.GcpCertifiedHwValidationRuleHandler
	rulesGcpCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"gcp-byol-voltstack-combo\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhGcpCertifiedHw(rulesGcpCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterType.gcp_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_certified_hw"] = vFn

	vrhNodeNumber := v.NodeNumberValidationRuleHandler
	rulesNodeNumber := map[string]string{
		"ves.io.schema.rules.uint32.in": "[1,3]",
	}
	vFn, err = vrhNodeNumber(rulesNodeNumber)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterType.node_number: %s", err)
		panic(errMsg)
	}
	v.FldValidators["node_number"] = vFn

	vrhGcpZoneNames := v.GcpZoneNamesValidationRuleHandler
	rulesGcpZoneNames := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
		"ves.io.schema.rules.repeated.unique":    "true",
		"ves.io.schema.rules.string.max_len":     "64",
	}
	vFn, err = vrhGcpZoneNames(rulesGcpZoneNames)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPVPCVoltstackClusterType.gcp_zone_names: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_zone_names"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["k8s_cluster_choice.k8s_cluster"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["storage_class_choice.storage_class_list"] = ves_io_schema_views.StorageClassListTypeValidator().Validate

	v.FldValidators["site_local_network"] = ves_io_schema_views.GCPVPCNetworkChoiceTypeValidator().Validate

	v.FldValidators["site_local_subnet"] = ves_io_schema_views.GCPVPCSubnetChoiceTypeValidator().Validate

	return v
}()

func GCPVPCVoltstackClusterTypeValidator() db.Validator {
	return DefaultGCPVPCVoltstackClusterTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.voltstack_cluster")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDeploymentDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPrivateConnectivityChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPrivateConnectivityChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GetSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDeployment().(type) {
	case *GetSpecType_CloudCredentials:

		vref := m.GetCloudCredentials()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		dri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "cloud_credentials",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GetSpecType_Assisted:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *GetSpecType_CloudCredentials:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetCloudCredentials()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GetSpecType_Assisted:

	}

	return entries, nil
}

func (m *GetSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:

		return nil, nil

	case *GetSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:

	case *GetSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetPrivateConnectivityChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPrivateConnectivityChoice() == nil {
		return nil, nil
	}
	switch m.GetPrivateConnectivityChoice().(type) {
	case *GetSpecType_PrivateConnectDisabled:

		return nil, nil

	case *GetSpecType_PrivateConnectivity:

		drInfos, err := m.GetPrivateConnectivity().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPrivateConnectivity().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "private_connectivity." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteType() == nil {
		return nil, nil
	}
	switch m.GetSiteType().(type) {
	case *GetSpecType_IngressGw:

		return nil, nil

	case *GetSpecType_IngressEgressGw:

		drInfos, err := m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGw().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_VoltstackCluster:

		drInfos, err := m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackCluster().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) PrivateConnectivityChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for private_connectivity_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) GcpRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for gcp_region")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) InstanceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for instance_type")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) NodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) VolterraSoftwareVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_software_version")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) OperatingSystemVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for operating_system_version")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) GcpLabelsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for gcp_labels")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for gcp_labels")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for gcp_labels")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map gcp_labels")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items gcp_labels")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *GetSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GetSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GetSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BlockAllServices:
		if fv, exists := v.FldValidators["blocked_services_choice.block_all_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GetSpecType_BlockAllServices).BlockAllServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("block_all_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cloud_site_info"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_site_info"))
		if err := fv(ctx, m.GetCloudSiteInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *GetSpecType_CloudCredentials:
		if fv, exists := v.FldValidators["deployment.cloud_credentials"]; exists {
			val := m.GetDeployment().(*GetSpecType_CloudCredentials).CloudCredentials
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("cloud_credentials"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Assisted:
		if fv, exists := v.FldValidators["deployment.assisted"]; exists {
			val := m.GetDeployment().(*GetSpecType_Assisted).Assisted
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("assisted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["error_description"]; exists {

		vOpts := append(opts, db.WithValidateField("error_description"))
		if err := fv(ctx, m.GetErrorDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_labels"]; exists {
		vOpts := append(opts, db.WithValidateField("gcp_labels"))
		if err := fv(ctx, m.GetGcpLabels(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_region"]; exists {

		vOpts := append(opts, db.WithValidateField("gcp_region"))
		if err := fv(ctx, m.GetGcpRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["instance_type"]; exists {

		vOpts := append(opts, db.WithValidateField("instance_type"))
		if err := fv(ctx, m.GetInstanceType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["kubernetes_upgrade_drain"]; exists {

		vOpts := append(opts, db.WithValidateField("kubernetes_upgrade_drain"))
		if err := fv(ctx, m.GetKubernetesUpgradeDrain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["nodes_per_az"]; exists {

		vOpts := append(opts, db.WithValidateField("nodes_per_az"))
		if err := fv(ctx, m.GetNodesPerAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["operating_system_version"]; exists {

		vOpts := append(opts, db.WithValidateField("operating_system_version"))
		if err := fv(ctx, m.GetOperatingSystemVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["private_connectivity_choice"]; exists {
		val := m.GetPrivateConnectivityChoice()
		vOpts := append(opts,
			db.WithValidateField("private_connectivity_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPrivateConnectivityChoice().(type) {
	case *GetSpecType_PrivateConnectDisabled:
		if fv, exists := v.FldValidators["private_connectivity_choice.private_connect_disabled"]; exists {
			val := m.GetPrivateConnectivityChoice().(*GetSpecType_PrivateConnectDisabled).PrivateConnectDisabled
			vOpts := append(opts,
				db.WithValidateField("private_connectivity_choice"),
				db.WithValidateField("private_connect_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_PrivateConnectivity:
		if fv, exists := v.FldValidators["private_connectivity_choice.private_connectivity"]; exists {
			val := m.GetPrivateConnectivityChoice().(*GetSpecType_PrivateConnectivity).PrivateConnectivity
			vOpts := append(opts,
				db.WithValidateField("private_connectivity_choice"),
				db.WithValidateField("private_connectivity"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_errors"]; exists {

		vOpts := append(opts, db.WithValidateField("site_errors"))
		for idx, item := range m.GetSiteErrors() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_state"]; exists {

		vOpts := append(opts, db.WithValidateField("site_state"))
		if err := fv(ctx, m.GetSiteState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *GetSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*GetSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*GetSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*GetSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["suggested_action"]; exists {

		vOpts := append(opts, db.WithValidateField("suggested_action"))
		if err := fv(ctx, m.GetSuggestedAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_modification_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("user_modification_timestamp"))
		if err := fv(ctx, m.GetUserModificationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["validation_state"]; exists {

		vOpts := append(opts, db.WithValidateField("validation_state"))
		if err := fv(ctx, m.GetValidationState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_software_version"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_software_version"))
		if err := fv(ctx, m.GetVolterraSoftwareVersion(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhPrivateConnectivityChoice := v.PrivateConnectivityChoiceValidationRuleHandler
	rulesPrivateConnectivityChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPrivateConnectivityChoice(rulesPrivateConnectivityChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.private_connectivity_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["private_connectivity_choice"] = vFn

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhGcpRegion := v.GcpRegionValidationRuleHandler
	rulesGcpRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhGcpRegion(rulesGcpRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.gcp_region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_region"] = vFn

	vrhInstanceType := v.InstanceTypeValidationRuleHandler
	rulesInstanceType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhInstanceType(rulesInstanceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.instance_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["instance_type"] = vFn

	vrhNodesPerAz := v.NodesPerAzValidationRuleHandler
	rulesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFn, err = vrhNodesPerAz(rulesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.nodes_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["nodes_per_az"] = vFn

	vrhVolterraSoftwareVersion := v.VolterraSoftwareVersionValidationRuleHandler
	rulesVolterraSoftwareVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhVolterraSoftwareVersion(rulesVolterraSoftwareVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.volterra_software_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_software_version"] = vFn

	vrhOperatingSystemVersion := v.OperatingSystemVersionValidationRuleHandler
	rulesOperatingSystemVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhOperatingSystemVersion(rulesOperatingSystemVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.operating_system_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["operating_system_version"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "64000",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "8192",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhGcpLabels := v.GcpLabelsValidationRuleHandler
	rulesGcpLabels := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "127",
		"ves.io.schema.rules.map.max_pairs":             "40",
		"ves.io.schema.rules.map.values.string.max_len": "255",
	}
	vFn, err = vrhGcpLabels(rulesGcpLabels)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.gcp_labels: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_labels"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["deployment.cloud_credentials"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["private_connectivity_choice.private_connectivity"] = ves_io_schema_views.PrivateConnectConfigTypeValidator().Validate

	v.FldValidators["site_type.ingress_gw"] = GCPVPCIngressGwTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw"] = GCPVPCIngressEgressGwTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = GCPVPCVoltstackClusterTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	v.FldValidators["kubernetes_upgrade_drain"] = ves_io_schema_views.KubernetesUpgradeDrainValidator().Validate

	v.FldValidators["cloud_site_info"] = GCPVPCSiteInfoTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.voltstack_cluster")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDeploymentDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPrivateConnectivityChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPrivateConnectivityChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetTfParamsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetTfParamsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDeployment().(type) {
	case *GlobalSpecType_CloudCredentials:

		vref := m.GetCloudCredentials()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		dri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "cloud_credentials",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GlobalSpecType_Assisted:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *GlobalSpecType_CloudCredentials:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetCloudCredentials()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GlobalSpecType_Assisted:

	}

	return entries, nil
}

func (m *GlobalSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:

		return nil, nil

	case *GlobalSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:

	case *GlobalSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetPrivateConnectivityChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPrivateConnectivityChoice() == nil {
		return nil, nil
	}
	switch m.GetPrivateConnectivityChoice().(type) {
	case *GlobalSpecType_PrivateConnectDisabled:

		return nil, nil

	case *GlobalSpecType_PrivateConnectivity:

		drInfos, err := m.GetPrivateConnectivity().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPrivateConnectivity().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "private_connectivity." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteType() == nil {
		return nil, nil
	}
	switch m.GetSiteType().(type) {
	case *GlobalSpecType_IngressGw:

		return nil, nil

	case *GlobalSpecType_IngressEgressGw:

		drInfos, err := m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGw().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_VoltstackCluster:

		drInfos, err := m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackCluster().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetTfParamsDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetTfParams()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("terraform_parameters.Object")
	dri := db.DRefInfo{
		RefdType:   "terraform_parameters.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "tf_params",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetTfParamsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetTfParamsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "terraform_parameters.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: terraform_parameters")
	}

	vref := m.GetTfParams()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "terraform_parameters.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) PrivateConnectivityChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for private_connectivity_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) GcpRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for gcp_region")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) InstanceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for instance_type")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) NodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VolterraSoftwareVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_software_version")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) OperatingSystemVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for operating_system_version")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) GcpLabelsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for gcp_labels")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for gcp_labels")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for gcp_labels")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map gcp_labels")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items gcp_labels")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *GlobalSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GlobalSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BlockAllServices:
		if fv, exists := v.FldValidators["blocked_services_choice.block_all_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockAllServices).BlockAllServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("block_all_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cloud_site_info"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_site_info"))
		if err := fv(ctx, m.GetCloudSiteInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *GlobalSpecType_CloudCredentials:
		if fv, exists := v.FldValidators["deployment.cloud_credentials"]; exists {
			val := m.GetDeployment().(*GlobalSpecType_CloudCredentials).CloudCredentials
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("cloud_credentials"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Assisted:
		if fv, exists := v.FldValidators["deployment.assisted"]; exists {
			val := m.GetDeployment().(*GlobalSpecType_Assisted).Assisted
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("assisted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["error_description"]; exists {

		vOpts := append(opts, db.WithValidateField("error_description"))
		if err := fv(ctx, m.GetErrorDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_labels"]; exists {
		vOpts := append(opts, db.WithValidateField("gcp_labels"))
		if err := fv(ctx, m.GetGcpLabels(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_region"]; exists {

		vOpts := append(opts, db.WithValidateField("gcp_region"))
		if err := fv(ctx, m.GetGcpRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["instance_type"]; exists {

		vOpts := append(opts, db.WithValidateField("instance_type"))
		if err := fv(ctx, m.GetInstanceType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["kubernetes_upgrade_drain"]; exists {

		vOpts := append(opts, db.WithValidateField("kubernetes_upgrade_drain"))
		if err := fv(ctx, m.GetKubernetesUpgradeDrain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["nodes_per_az"]; exists {

		vOpts := append(opts, db.WithValidateField("nodes_per_az"))
		if err := fv(ctx, m.GetNodesPerAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["operating_system_version"]; exists {

		vOpts := append(opts, db.WithValidateField("operating_system_version"))
		if err := fv(ctx, m.GetOperatingSystemVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["os"]; exists {

		vOpts := append(opts, db.WithValidateField("os"))
		if err := fv(ctx, m.GetOs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["private_connectivity_choice"]; exists {
		val := m.GetPrivateConnectivityChoice()
		vOpts := append(opts,
			db.WithValidateField("private_connectivity_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPrivateConnectivityChoice().(type) {
	case *GlobalSpecType_PrivateConnectDisabled:
		if fv, exists := v.FldValidators["private_connectivity_choice.private_connect_disabled"]; exists {
			val := m.GetPrivateConnectivityChoice().(*GlobalSpecType_PrivateConnectDisabled).PrivateConnectDisabled
			vOpts := append(opts,
				db.WithValidateField("private_connectivity_choice"),
				db.WithValidateField("private_connect_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_PrivateConnectivity:
		if fv, exists := v.FldValidators["private_connectivity_choice.private_connectivity"]; exists {
			val := m.GetPrivateConnectivityChoice().(*GlobalSpecType_PrivateConnectivity).PrivateConnectivity
			vOpts := append(opts,
				db.WithValidateField("private_connectivity_choice"),
				db.WithValidateField("private_connectivity"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_errors"]; exists {

		vOpts := append(opts, db.WithValidateField("site_errors"))
		for idx, item := range m.GetSiteErrors() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_to_site_tunnel_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("site_to_site_tunnel_ip"))
		if err := fv(ctx, m.GetSiteToSiteTunnelIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *GlobalSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["suggested_action"]; exists {

		vOpts := append(opts, db.WithValidateField("suggested_action"))
		if err := fv(ctx, m.GetSuggestedAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sw"]; exists {

		vOpts := append(opts, db.WithValidateField("sw"))
		if err := fv(ctx, m.GetSw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tf_params"]; exists {

		vOpts := append(opts, db.WithValidateField("tf_params"))
		if err := fv(ctx, m.GetTfParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_modification_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("user_modification_timestamp"))
		if err := fv(ctx, m.GetUserModificationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["validation_state"]; exists {

		vOpts := append(opts, db.WithValidateField("validation_state"))
		if err := fv(ctx, m.GetValidationState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_software_version"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_software_version"))
		if err := fv(ctx, m.GetVolterraSoftwareVersion(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhPrivateConnectivityChoice := v.PrivateConnectivityChoiceValidationRuleHandler
	rulesPrivateConnectivityChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPrivateConnectivityChoice(rulesPrivateConnectivityChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.private_connectivity_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["private_connectivity_choice"] = vFn

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhGcpRegion := v.GcpRegionValidationRuleHandler
	rulesGcpRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhGcpRegion(rulesGcpRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.gcp_region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_region"] = vFn

	vrhInstanceType := v.InstanceTypeValidationRuleHandler
	rulesInstanceType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhInstanceType(rulesInstanceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.instance_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["instance_type"] = vFn

	vrhNodesPerAz := v.NodesPerAzValidationRuleHandler
	rulesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFn, err = vrhNodesPerAz(rulesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.nodes_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["nodes_per_az"] = vFn

	vrhVolterraSoftwareVersion := v.VolterraSoftwareVersionValidationRuleHandler
	rulesVolterraSoftwareVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhVolterraSoftwareVersion(rulesVolterraSoftwareVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.volterra_software_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_software_version"] = vFn

	vrhOperatingSystemVersion := v.OperatingSystemVersionValidationRuleHandler
	rulesOperatingSystemVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhOperatingSystemVersion(rulesOperatingSystemVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.operating_system_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["operating_system_version"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "64000",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "8192",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhGcpLabels := v.GcpLabelsValidationRuleHandler
	rulesGcpLabels := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "127",
		"ves.io.schema.rules.map.max_pairs":             "40",
		"ves.io.schema.rules.map.values.string.max_len": "255",
	}
	vFn, err = vrhGcpLabels(rulesGcpLabels)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.gcp_labels: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_labels"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["deployment.cloud_credentials"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["private_connectivity_choice.private_connectivity"] = ves_io_schema_views.PrivateConnectConfigTypeValidator().Validate

	v.FldValidators["site_type.ingress_gw"] = GCPVPCIngressGwTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw"] = GCPVPCIngressEgressGwTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = GCPVPCVoltstackClusterTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["sw"] = ves_io_schema_views.VolterraSoftwareTypeValidator().Validate

	v.FldValidators["os"] = ves_io_schema_views.OperatingSystemTypeValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	v.FldValidators["kubernetes_upgrade_drain"] = ves_io_schema_views.KubernetesUpgradeDrainValidator().Validate

	v.FldValidators["tf_params"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cloud_site_info"] = GCPVPCSiteInfoTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.voltstack_cluster")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDeploymentDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPrivateConnectivityChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPrivateConnectivityChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *ReplaceSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDeployment().(type) {
	case *ReplaceSpecType_CloudCredentials:

		vref := m.GetCloudCredentials()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		dri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "cloud_credentials",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *ReplaceSpecType_CloudCredentials:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetCloudCredentials()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

func (m *ReplaceSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:

		return nil, nil

	case *ReplaceSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:

	case *ReplaceSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetPrivateConnectivityChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPrivateConnectivityChoice() == nil {
		return nil, nil
	}
	switch m.GetPrivateConnectivityChoice().(type) {
	case *ReplaceSpecType_PrivateConnectDisabled:

		return nil, nil

	case *ReplaceSpecType_PrivateConnectivity:

		drInfos, err := m.GetPrivateConnectivity().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPrivateConnectivity().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "private_connectivity." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteType() == nil {
		return nil, nil
	}
	switch m.GetSiteType().(type) {
	case *ReplaceSpecType_IngressGw:

		return nil, nil

	case *ReplaceSpecType_IngressEgressGw:

		drInfos, err := m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressEgressGw().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ingress_egress_gw." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_VoltstackCluster:

		drInfos, err := m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVoltstackCluster().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "voltstack_cluster." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) PrivateConnectivityChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for private_connectivity_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) GcpRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for gcp_region")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) InstanceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for instance_type")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) NodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *ReplaceSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*ReplaceSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BlockAllServices:
		if fv, exists := v.FldValidators["blocked_services_choice.block_all_services"]; exists {
			val := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockAllServices).BlockAllServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("block_all_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_dns"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_dns"))
		if err := fv(ctx, m.GetCustomDns(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *ReplaceSpecType_CloudCredentials:
		if fv, exists := v.FldValidators["deployment.cloud_credentials"]; exists {
			val := m.GetDeployment().(*ReplaceSpecType_CloudCredentials).CloudCredentials
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("cloud_credentials"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_region"]; exists {

		vOpts := append(opts, db.WithValidateField("gcp_region"))
		if err := fv(ctx, m.GetGcpRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["instance_type"]; exists {

		vOpts := append(opts, db.WithValidateField("instance_type"))
		if err := fv(ctx, m.GetInstanceType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["kubernetes_upgrade_drain"]; exists {

		vOpts := append(opts, db.WithValidateField("kubernetes_upgrade_drain"))
		if err := fv(ctx, m.GetKubernetesUpgradeDrain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["nodes_per_az"]; exists {

		vOpts := append(opts, db.WithValidateField("nodes_per_az"))
		if err := fv(ctx, m.GetNodesPerAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["private_connectivity_choice"]; exists {
		val := m.GetPrivateConnectivityChoice()
		vOpts := append(opts,
			db.WithValidateField("private_connectivity_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPrivateConnectivityChoice().(type) {
	case *ReplaceSpecType_PrivateConnectDisabled:
		if fv, exists := v.FldValidators["private_connectivity_choice.private_connect_disabled"]; exists {
			val := m.GetPrivateConnectivityChoice().(*ReplaceSpecType_PrivateConnectDisabled).PrivateConnectDisabled
			vOpts := append(opts,
				db.WithValidateField("private_connectivity_choice"),
				db.WithValidateField("private_connect_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_PrivateConnectivity:
		if fv, exists := v.FldValidators["private_connectivity_choice.private_connectivity"]; exists {
			val := m.GetPrivateConnectivityChoice().(*ReplaceSpecType_PrivateConnectivity).PrivateConnectivity
			vOpts := append(opts,
				db.WithValidateField("private_connectivity_choice"),
				db.WithValidateField("private_connectivity"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *ReplaceSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhPrivateConnectivityChoice := v.PrivateConnectivityChoiceValidationRuleHandler
	rulesPrivateConnectivityChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPrivateConnectivityChoice(rulesPrivateConnectivityChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.private_connectivity_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["private_connectivity_choice"] = vFn

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhGcpRegion := v.GcpRegionValidationRuleHandler
	rulesGcpRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhGcpRegion(rulesGcpRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.gcp_region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_region"] = vFn

	vrhInstanceType := v.InstanceTypeValidationRuleHandler
	rulesInstanceType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhInstanceType(rulesInstanceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.instance_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["instance_type"] = vFn

	vrhNodesPerAz := v.NodesPerAzValidationRuleHandler
	rulesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFn, err = vrhNodesPerAz(rulesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.nodes_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["nodes_per_az"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "64000",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "8192",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["deployment.cloud_credentials"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["private_connectivity_choice.private_connectivity"] = ves_io_schema_views.PrivateConnectConfigTypeValidator().Validate

	v.FldValidators["site_type.ingress_gw"] = GCPVPCIngressGwReplaceTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw"] = GCPVPCIngressEgressGwReplaceTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = GCPVPCVoltstackClusterReplaceTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["custom_dns"] = ves_io_schema_views.CustomDNSValidator().Validate

	v.FldValidators["kubernetes_upgrade_drain"] = ves_io_schema_views.KubernetesUpgradeDrainValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *CreateSpecType_BlockAllServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *CreateSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *CreateSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockAllServices:
		r.BlockedServicesChoice = &CreateSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &CreateSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &CreateSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetDeploymentToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Deployment.(type) {
	case nil:
		o.Deployment = nil

	case *CreateSpecType_CloudCredentials:
		o.Deployment = &GlobalSpecType_CloudCredentials{CloudCredentials: of.CloudCredentials}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetDeploymentFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Deployment.(type) {
	case nil:
		r.Deployment = nil

	case *GlobalSpecType_CloudCredentials:
		r.Deployment = &CreateSpecType_CloudCredentials{CloudCredentials: of.CloudCredentials}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *CreateSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *CreateSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &CreateSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetPrivateConnectivityChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.PrivateConnectivityChoice.(type) {
	case nil:
		o.PrivateConnectivityChoice = nil

	case *CreateSpecType_PrivateConnectDisabled:
		o.PrivateConnectivityChoice = &GlobalSpecType_PrivateConnectDisabled{PrivateConnectDisabled: of.PrivateConnectDisabled}

	case *CreateSpecType_PrivateConnectivity:
		o.PrivateConnectivityChoice = &GlobalSpecType_PrivateConnectivity{PrivateConnectivity: of.PrivateConnectivity}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetPrivateConnectivityChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.PrivateConnectivityChoice.(type) {
	case nil:
		r.PrivateConnectivityChoice = nil

	case *GlobalSpecType_PrivateConnectDisabled:
		r.PrivateConnectivityChoice = &CreateSpecType_PrivateConnectDisabled{PrivateConnectDisabled: of.PrivateConnectDisabled}

	case *GlobalSpecType_PrivateConnectivity:
		r.PrivateConnectivityChoice = &CreateSpecType_PrivateConnectivity{PrivateConnectivity: of.PrivateConnectivity}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetSiteTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteType.(type) {
	case nil:
		o.SiteType = nil

	case *CreateSpecType_IngressEgressGw:
		o.SiteType = &GlobalSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *CreateSpecType_IngressGw:
		o.SiteType = &GlobalSpecType_IngressGw{IngressGw: of.IngressGw}

	case *CreateSpecType_VoltstackCluster:
		o.SiteType = &GlobalSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetSiteTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteType.(type) {
	case nil:
		r.SiteType = nil

	case *GlobalSpecType_IngressEgressGw:
		r.SiteType = &CreateSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *GlobalSpecType_IngressGw:
		r.SiteType = &CreateSpecType_IngressGw{IngressGw: of.IngressGw}

	case *GlobalSpecType_VoltstackCluster:
		r.SiteType = &CreateSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.Coordinates = f.GetCoordinates()
	m.CustomDns = f.GetCustomDns()
	m.GetDeploymentFromGlobalSpecType(f)
	m.DiskSize = f.GetDiskSize()
	m.GcpLabels = f.GetGcpLabels()
	m.GcpRegion = f.GetGcpRegion()
	m.InstanceType = f.GetInstanceType()
	m.KubernetesUpgradeDrain = f.GetKubernetesUpgradeDrain()
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.NodesPerAz = f.GetNodesPerAz()
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.Os = f.GetOs()
	m.GetPrivateConnectivityChoiceFromGlobalSpecType(f)
	m.GetSiteTypeFromGlobalSpecType(f)
	m.SshKey = f.GetSshKey()
	m.Sw = f.GetSw()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	f.Coordinates = m1.Coordinates
	f.CustomDns = m1.CustomDns
	m1.SetDeploymentToGlobalSpecType(f)
	f.DiskSize = m1.DiskSize
	f.GcpLabels = m1.GcpLabels
	f.GcpRegion = m1.GcpRegion
	f.InstanceType = m1.InstanceType
	f.KubernetesUpgradeDrain = m1.KubernetesUpgradeDrain
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.NodesPerAz = m1.NodesPerAz
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	f.Os = m1.Os
	m1.SetPrivateConnectivityChoiceToGlobalSpecType(f)
	m1.SetSiteTypeToGlobalSpecType(f)
	f.SshKey = m1.SshKey
	f.Sw = m1.Sw
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GCPVPCIngressEgressGwReplaceType from GCPVPCIngressEgressGwType for oneof fields
func (r *GCPVPCIngressEgressGwReplaceType) SetDcClusterGroupChoiceToGCPVPCIngressEgressGwType(o *GCPVPCIngressEgressGwType) error {
	switch of := r.DcClusterGroupChoice.(type) {
	case nil:
		o.DcClusterGroupChoice = nil

	case *GCPVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn:
		o.DcClusterGroupChoice = &GCPVPCIngressEgressGwType_DcClusterGroupInsideVn{DcClusterGroupInsideVn: of.DcClusterGroupInsideVn}

	case *GCPVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn:
		o.DcClusterGroupChoice = &GCPVPCIngressEgressGwType_DcClusterGroupOutsideVn{DcClusterGroupOutsideVn: of.DcClusterGroupOutsideVn}

	case *GCPVPCIngressEgressGwReplaceType_NoDcClusterGroup:
		o.DcClusterGroupChoice = &GCPVPCIngressEgressGwType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GCPVPCIngressEgressGwReplaceType) GetDcClusterGroupChoiceFromGCPVPCIngressEgressGwType(o *GCPVPCIngressEgressGwType) error {
	switch of := o.DcClusterGroupChoice.(type) {
	case nil:
		r.DcClusterGroupChoice = nil

	case *GCPVPCIngressEgressGwType_DcClusterGroupInsideVn:
		r.DcClusterGroupChoice = &GCPVPCIngressEgressGwReplaceType_DcClusterGroupInsideVn{DcClusterGroupInsideVn: of.DcClusterGroupInsideVn}

	case *GCPVPCIngressEgressGwType_DcClusterGroupOutsideVn:
		r.DcClusterGroupChoice = &GCPVPCIngressEgressGwReplaceType_DcClusterGroupOutsideVn{DcClusterGroupOutsideVn: of.DcClusterGroupOutsideVn}

	case *GCPVPCIngressEgressGwType_NoDcClusterGroup:
		r.DcClusterGroupChoice = &GCPVPCIngressEgressGwReplaceType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GCPVPCIngressEgressGwReplaceType from GCPVPCIngressEgressGwType for oneof fields
func (r *GCPVPCIngressEgressGwReplaceType) SetForwardProxyChoiceToGCPVPCIngressEgressGwType(o *GCPVPCIngressEgressGwType) error {
	switch of := r.ForwardProxyChoice.(type) {
	case nil:
		o.ForwardProxyChoice = nil

	case *GCPVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies:
		o.ForwardProxyChoice = &GCPVPCIngressEgressGwType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *GCPVPCIngressEgressGwReplaceType_ForwardProxyAllowAll:
		o.ForwardProxyChoice = &GCPVPCIngressEgressGwType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *GCPVPCIngressEgressGwReplaceType_NoForwardProxy:
		o.ForwardProxyChoice = &GCPVPCIngressEgressGwType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GCPVPCIngressEgressGwReplaceType) GetForwardProxyChoiceFromGCPVPCIngressEgressGwType(o *GCPVPCIngressEgressGwType) error {
	switch of := o.ForwardProxyChoice.(type) {
	case nil:
		r.ForwardProxyChoice = nil

	case *GCPVPCIngressEgressGwType_ActiveForwardProxyPolicies:
		r.ForwardProxyChoice = &GCPVPCIngressEgressGwReplaceType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *GCPVPCIngressEgressGwType_ForwardProxyAllowAll:
		r.ForwardProxyChoice = &GCPVPCIngressEgressGwReplaceType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *GCPVPCIngressEgressGwType_NoForwardProxy:
		r.ForwardProxyChoice = &GCPVPCIngressEgressGwReplaceType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GCPVPCIngressEgressGwReplaceType from GCPVPCIngressEgressGwType for oneof fields
func (r *GCPVPCIngressEgressGwReplaceType) SetGlobalNetworkChoiceToGCPVPCIngressEgressGwType(o *GCPVPCIngressEgressGwType) error {
	switch of := r.GlobalNetworkChoice.(type) {
	case nil:
		o.GlobalNetworkChoice = nil

	case *GCPVPCIngressEgressGwReplaceType_GlobalNetworkList:
		o.GlobalNetworkChoice = &GCPVPCIngressEgressGwType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *GCPVPCIngressEgressGwReplaceType_NoGlobalNetwork:
		o.GlobalNetworkChoice = &GCPVPCIngressEgressGwType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GCPVPCIngressEgressGwReplaceType) GetGlobalNetworkChoiceFromGCPVPCIngressEgressGwType(o *GCPVPCIngressEgressGwType) error {
	switch of := o.GlobalNetworkChoice.(type) {
	case nil:
		r.GlobalNetworkChoice = nil

	case *GCPVPCIngressEgressGwType_GlobalNetworkList:
		r.GlobalNetworkChoice = &GCPVPCIngressEgressGwReplaceType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *GCPVPCIngressEgressGwType_NoGlobalNetwork:
		r.GlobalNetworkChoice = &GCPVPCIngressEgressGwReplaceType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GCPVPCIngressEgressGwReplaceType from GCPVPCIngressEgressGwType for oneof fields
func (r *GCPVPCIngressEgressGwReplaceType) SetInsideStaticRouteChoiceToGCPVPCIngressEgressGwType(o *GCPVPCIngressEgressGwType) error {
	switch of := r.InsideStaticRouteChoice.(type) {
	case nil:
		o.InsideStaticRouteChoice = nil

	case *GCPVPCIngressEgressGwReplaceType_InsideStaticRoutes:
		o.InsideStaticRouteChoice = &GCPVPCIngressEgressGwType_InsideStaticRoutes{InsideStaticRoutes: of.InsideStaticRoutes}

	case *GCPVPCIngressEgressGwReplaceType_NoInsideStaticRoutes:
		o.InsideStaticRouteChoice = &GCPVPCIngressEgressGwType_NoInsideStaticRoutes{NoInsideStaticRoutes: of.NoInsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GCPVPCIngressEgressGwReplaceType) GetInsideStaticRouteChoiceFromGCPVPCIngressEgressGwType(o *GCPVPCIngressEgressGwType) error {
	switch of := o.InsideStaticRouteChoice.(type) {
	case nil:
		r.InsideStaticRouteChoice = nil

	case *GCPVPCIngressEgressGwType_InsideStaticRoutes:
		r.InsideStaticRouteChoice = &GCPVPCIngressEgressGwReplaceType_InsideStaticRoutes{InsideStaticRoutes: of.InsideStaticRoutes}

	case *GCPVPCIngressEgressGwType_NoInsideStaticRoutes:
		r.InsideStaticRouteChoice = &GCPVPCIngressEgressGwReplaceType_NoInsideStaticRoutes{NoInsideStaticRoutes: of.NoInsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GCPVPCIngressEgressGwReplaceType from GCPVPCIngressEgressGwType for oneof fields
func (r *GCPVPCIngressEgressGwReplaceType) SetNetworkPolicyChoiceToGCPVPCIngressEgressGwType(o *GCPVPCIngressEgressGwType) error {
	switch of := r.NetworkPolicyChoice.(type) {
	case nil:
		o.NetworkPolicyChoice = nil

	case *GCPVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies:
		o.NetworkPolicyChoice = &GCPVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *GCPVPCIngressEgressGwReplaceType_ActiveNetworkPolicies:
		o.NetworkPolicyChoice = &GCPVPCIngressEgressGwType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *GCPVPCIngressEgressGwReplaceType_NoNetworkPolicy:
		o.NetworkPolicyChoice = &GCPVPCIngressEgressGwType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GCPVPCIngressEgressGwReplaceType) GetNetworkPolicyChoiceFromGCPVPCIngressEgressGwType(o *GCPVPCIngressEgressGwType) error {
	switch of := o.NetworkPolicyChoice.(type) {
	case nil:
		r.NetworkPolicyChoice = nil

	case *GCPVPCIngressEgressGwType_ActiveEnhancedFirewallPolicies:
		r.NetworkPolicyChoice = &GCPVPCIngressEgressGwReplaceType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *GCPVPCIngressEgressGwType_ActiveNetworkPolicies:
		r.NetworkPolicyChoice = &GCPVPCIngressEgressGwReplaceType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *GCPVPCIngressEgressGwType_NoNetworkPolicy:
		r.NetworkPolicyChoice = &GCPVPCIngressEgressGwReplaceType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GCPVPCIngressEgressGwReplaceType from GCPVPCIngressEgressGwType for oneof fields
func (r *GCPVPCIngressEgressGwReplaceType) SetOutsideStaticRouteChoiceToGCPVPCIngressEgressGwType(o *GCPVPCIngressEgressGwType) error {
	switch of := r.OutsideStaticRouteChoice.(type) {
	case nil:
		o.OutsideStaticRouteChoice = nil

	case *GCPVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &GCPVPCIngressEgressGwType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *GCPVPCIngressEgressGwReplaceType_OutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &GCPVPCIngressEgressGwType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GCPVPCIngressEgressGwReplaceType) GetOutsideStaticRouteChoiceFromGCPVPCIngressEgressGwType(o *GCPVPCIngressEgressGwType) error {
	switch of := o.OutsideStaticRouteChoice.(type) {
	case nil:
		r.OutsideStaticRouteChoice = nil

	case *GCPVPCIngressEgressGwType_NoOutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &GCPVPCIngressEgressGwReplaceType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *GCPVPCIngressEgressGwType_OutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &GCPVPCIngressEgressGwReplaceType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GCPVPCIngressEgressGwReplaceType from GCPVPCIngressEgressGwType for oneof fields
func (r *GCPVPCIngressEgressGwReplaceType) SetSiteMeshGroupChoiceToGCPVPCIngressEgressGwType(o *GCPVPCIngressEgressGwType) error {
	switch of := r.SiteMeshGroupChoice.(type) {
	case nil:
		o.SiteMeshGroupChoice = nil

	case *GCPVPCIngressEgressGwReplaceType_SmConnectionPublicIp:
		o.SiteMeshGroupChoice = &GCPVPCIngressEgressGwType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *GCPVPCIngressEgressGwReplaceType_SmConnectionPvtIp:
		o.SiteMeshGroupChoice = &GCPVPCIngressEgressGwType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GCPVPCIngressEgressGwReplaceType) GetSiteMeshGroupChoiceFromGCPVPCIngressEgressGwType(o *GCPVPCIngressEgressGwType) error {
	switch of := o.SiteMeshGroupChoice.(type) {
	case nil:
		r.SiteMeshGroupChoice = nil

	case *GCPVPCIngressEgressGwType_SmConnectionPublicIp:
		r.SiteMeshGroupChoice = &GCPVPCIngressEgressGwReplaceType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *GCPVPCIngressEgressGwType_SmConnectionPvtIp:
		r.SiteMeshGroupChoice = &GCPVPCIngressEgressGwReplaceType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GCPVPCIngressEgressGwReplaceType) fromGCPVPCIngressEgressGwType(f *GCPVPCIngressEgressGwType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetDcClusterGroupChoiceFromGCPVPCIngressEgressGwType(f)
	m.GetForwardProxyChoiceFromGCPVPCIngressEgressGwType(f)
	m.GcpZoneNames = f.GetGcpZoneNames()
	m.GetGlobalNetworkChoiceFromGCPVPCIngressEgressGwType(f)
	m.InsideNetwork = f.GetInsideNetwork()
	m.GetInsideStaticRouteChoiceFromGCPVPCIngressEgressGwType(f)
	m.InsideSubnet = f.GetInsideSubnet()
	m.GetNetworkPolicyChoiceFromGCPVPCIngressEgressGwType(f)
	m.NodeNumber = f.GetNodeNumber()
	m.OutsideNetwork = f.GetOutsideNetwork()
	m.GetOutsideStaticRouteChoiceFromGCPVPCIngressEgressGwType(f)
	m.OutsideSubnet = f.GetOutsideSubnet()
	m.PerformanceEnhancementMode = f.GetPerformanceEnhancementMode()
	m.GetSiteMeshGroupChoiceFromGCPVPCIngressEgressGwType(f)
}

func (m *GCPVPCIngressEgressGwReplaceType) FromGCPVPCIngressEgressGwType(f *GCPVPCIngressEgressGwType) {
	m.fromGCPVPCIngressEgressGwType(f, true)
}

func (m *GCPVPCIngressEgressGwReplaceType) FromGCPVPCIngressEgressGwTypeWithoutDeepCopy(f *GCPVPCIngressEgressGwType) {
	m.fromGCPVPCIngressEgressGwType(f, false)
}

func (m *GCPVPCIngressEgressGwReplaceType) toGCPVPCIngressEgressGwType(f *GCPVPCIngressEgressGwType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetDcClusterGroupChoiceToGCPVPCIngressEgressGwType(f)
	m1.SetForwardProxyChoiceToGCPVPCIngressEgressGwType(f)
	f.GcpZoneNames = m1.GcpZoneNames
	m1.SetGlobalNetworkChoiceToGCPVPCIngressEgressGwType(f)
	f.InsideNetwork = m1.InsideNetwork
	m1.SetInsideStaticRouteChoiceToGCPVPCIngressEgressGwType(f)
	f.InsideSubnet = m1.InsideSubnet
	m1.SetNetworkPolicyChoiceToGCPVPCIngressEgressGwType(f)
	f.NodeNumber = m1.NodeNumber
	f.OutsideNetwork = m1.OutsideNetwork
	m1.SetOutsideStaticRouteChoiceToGCPVPCIngressEgressGwType(f)
	f.OutsideSubnet = m1.OutsideSubnet
	f.PerformanceEnhancementMode = m1.PerformanceEnhancementMode
	m1.SetSiteMeshGroupChoiceToGCPVPCIngressEgressGwType(f)
}

func (m *GCPVPCIngressEgressGwReplaceType) ToGCPVPCIngressEgressGwType(f *GCPVPCIngressEgressGwType) {
	m.toGCPVPCIngressEgressGwType(f, true)
}

func (m *GCPVPCIngressEgressGwReplaceType) ToGCPVPCIngressEgressGwTypeWithoutDeepCopy(f *GCPVPCIngressEgressGwType) {
	m.toGCPVPCIngressEgressGwType(f, false)
}

func (m *GCPVPCIngressGwReplaceType) fromGCPVPCIngressGwType(f *GCPVPCIngressGwType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GcpZoneNames = f.GetGcpZoneNames()
	m.LocalNetwork = f.GetLocalNetwork()
	m.LocalSubnet = f.GetLocalSubnet()
	m.NodeNumber = f.GetNodeNumber()
	m.PerformanceEnhancementMode = f.GetPerformanceEnhancementMode()
}

func (m *GCPVPCIngressGwReplaceType) FromGCPVPCIngressGwType(f *GCPVPCIngressGwType) {
	m.fromGCPVPCIngressGwType(f, true)
}

func (m *GCPVPCIngressGwReplaceType) FromGCPVPCIngressGwTypeWithoutDeepCopy(f *GCPVPCIngressGwType) {
	m.fromGCPVPCIngressGwType(f, false)
}

func (m *GCPVPCIngressGwReplaceType) toGCPVPCIngressGwType(f *GCPVPCIngressGwType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.GcpZoneNames = m1.GcpZoneNames
	f.LocalNetwork = m1.LocalNetwork
	f.LocalSubnet = m1.LocalSubnet
	f.NodeNumber = m1.NodeNumber
	f.PerformanceEnhancementMode = m1.PerformanceEnhancementMode
}

func (m *GCPVPCIngressGwReplaceType) ToGCPVPCIngressGwType(f *GCPVPCIngressGwType) {
	m.toGCPVPCIngressGwType(f, true)
}

func (m *GCPVPCIngressGwReplaceType) ToGCPVPCIngressGwTypeWithoutDeepCopy(f *GCPVPCIngressGwType) {
	m.toGCPVPCIngressGwType(f, false)
}

// create setters in GCPVPCVoltstackClusterReplaceType from GCPVPCVoltstackClusterType for oneof fields
func (r *GCPVPCVoltstackClusterReplaceType) SetDcClusterGroupChoiceToGCPVPCVoltstackClusterType(o *GCPVPCVoltstackClusterType) error {
	switch of := r.DcClusterGroupChoice.(type) {
	case nil:
		o.DcClusterGroupChoice = nil

	case *GCPVPCVoltstackClusterReplaceType_DcClusterGroup:
		o.DcClusterGroupChoice = &GCPVPCVoltstackClusterType_DcClusterGroup{DcClusterGroup: of.DcClusterGroup}

	case *GCPVPCVoltstackClusterReplaceType_NoDcClusterGroup:
		o.DcClusterGroupChoice = &GCPVPCVoltstackClusterType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GCPVPCVoltstackClusterReplaceType) GetDcClusterGroupChoiceFromGCPVPCVoltstackClusterType(o *GCPVPCVoltstackClusterType) error {
	switch of := o.DcClusterGroupChoice.(type) {
	case nil:
		r.DcClusterGroupChoice = nil

	case *GCPVPCVoltstackClusterType_DcClusterGroup:
		r.DcClusterGroupChoice = &GCPVPCVoltstackClusterReplaceType_DcClusterGroup{DcClusterGroup: of.DcClusterGroup}

	case *GCPVPCVoltstackClusterType_NoDcClusterGroup:
		r.DcClusterGroupChoice = &GCPVPCVoltstackClusterReplaceType_NoDcClusterGroup{NoDcClusterGroup: of.NoDcClusterGroup}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GCPVPCVoltstackClusterReplaceType from GCPVPCVoltstackClusterType for oneof fields
func (r *GCPVPCVoltstackClusterReplaceType) SetForwardProxyChoiceToGCPVPCVoltstackClusterType(o *GCPVPCVoltstackClusterType) error {
	switch of := r.ForwardProxyChoice.(type) {
	case nil:
		o.ForwardProxyChoice = nil

	case *GCPVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies:
		o.ForwardProxyChoice = &GCPVPCVoltstackClusterType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *GCPVPCVoltstackClusterReplaceType_ForwardProxyAllowAll:
		o.ForwardProxyChoice = &GCPVPCVoltstackClusterType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *GCPVPCVoltstackClusterReplaceType_NoForwardProxy:
		o.ForwardProxyChoice = &GCPVPCVoltstackClusterType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GCPVPCVoltstackClusterReplaceType) GetForwardProxyChoiceFromGCPVPCVoltstackClusterType(o *GCPVPCVoltstackClusterType) error {
	switch of := o.ForwardProxyChoice.(type) {
	case nil:
		r.ForwardProxyChoice = nil

	case *GCPVPCVoltstackClusterType_ActiveForwardProxyPolicies:
		r.ForwardProxyChoice = &GCPVPCVoltstackClusterReplaceType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *GCPVPCVoltstackClusterType_ForwardProxyAllowAll:
		r.ForwardProxyChoice = &GCPVPCVoltstackClusterReplaceType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *GCPVPCVoltstackClusterType_NoForwardProxy:
		r.ForwardProxyChoice = &GCPVPCVoltstackClusterReplaceType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GCPVPCVoltstackClusterReplaceType from GCPVPCVoltstackClusterType for oneof fields
func (r *GCPVPCVoltstackClusterReplaceType) SetGlobalNetworkChoiceToGCPVPCVoltstackClusterType(o *GCPVPCVoltstackClusterType) error {
	switch of := r.GlobalNetworkChoice.(type) {
	case nil:
		o.GlobalNetworkChoice = nil

	case *GCPVPCVoltstackClusterReplaceType_GlobalNetworkList:
		o.GlobalNetworkChoice = &GCPVPCVoltstackClusterType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *GCPVPCVoltstackClusterReplaceType_NoGlobalNetwork:
		o.GlobalNetworkChoice = &GCPVPCVoltstackClusterType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GCPVPCVoltstackClusterReplaceType) GetGlobalNetworkChoiceFromGCPVPCVoltstackClusterType(o *GCPVPCVoltstackClusterType) error {
	switch of := o.GlobalNetworkChoice.(type) {
	case nil:
		r.GlobalNetworkChoice = nil

	case *GCPVPCVoltstackClusterType_GlobalNetworkList:
		r.GlobalNetworkChoice = &GCPVPCVoltstackClusterReplaceType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *GCPVPCVoltstackClusterType_NoGlobalNetwork:
		r.GlobalNetworkChoice = &GCPVPCVoltstackClusterReplaceType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GCPVPCVoltstackClusterReplaceType from GCPVPCVoltstackClusterType for oneof fields
func (r *GCPVPCVoltstackClusterReplaceType) SetNetworkPolicyChoiceToGCPVPCVoltstackClusterType(o *GCPVPCVoltstackClusterType) error {
	switch of := r.NetworkPolicyChoice.(type) {
	case nil:
		o.NetworkPolicyChoice = nil

	case *GCPVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies:
		o.NetworkPolicyChoice = &GCPVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *GCPVPCVoltstackClusterReplaceType_ActiveNetworkPolicies:
		o.NetworkPolicyChoice = &GCPVPCVoltstackClusterType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *GCPVPCVoltstackClusterReplaceType_NoNetworkPolicy:
		o.NetworkPolicyChoice = &GCPVPCVoltstackClusterType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GCPVPCVoltstackClusterReplaceType) GetNetworkPolicyChoiceFromGCPVPCVoltstackClusterType(o *GCPVPCVoltstackClusterType) error {
	switch of := o.NetworkPolicyChoice.(type) {
	case nil:
		r.NetworkPolicyChoice = nil

	case *GCPVPCVoltstackClusterType_ActiveEnhancedFirewallPolicies:
		r.NetworkPolicyChoice = &GCPVPCVoltstackClusterReplaceType_ActiveEnhancedFirewallPolicies{ActiveEnhancedFirewallPolicies: of.ActiveEnhancedFirewallPolicies}

	case *GCPVPCVoltstackClusterType_ActiveNetworkPolicies:
		r.NetworkPolicyChoice = &GCPVPCVoltstackClusterReplaceType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *GCPVPCVoltstackClusterType_NoNetworkPolicy:
		r.NetworkPolicyChoice = &GCPVPCVoltstackClusterReplaceType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GCPVPCVoltstackClusterReplaceType from GCPVPCVoltstackClusterType for oneof fields
func (r *GCPVPCVoltstackClusterReplaceType) SetOutsideStaticRouteChoiceToGCPVPCVoltstackClusterType(o *GCPVPCVoltstackClusterType) error {
	switch of := r.OutsideStaticRouteChoice.(type) {
	case nil:
		o.OutsideStaticRouteChoice = nil

	case *GCPVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &GCPVPCVoltstackClusterType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *GCPVPCVoltstackClusterReplaceType_OutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &GCPVPCVoltstackClusterType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GCPVPCVoltstackClusterReplaceType) GetOutsideStaticRouteChoiceFromGCPVPCVoltstackClusterType(o *GCPVPCVoltstackClusterType) error {
	switch of := o.OutsideStaticRouteChoice.(type) {
	case nil:
		r.OutsideStaticRouteChoice = nil

	case *GCPVPCVoltstackClusterType_NoOutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &GCPVPCVoltstackClusterReplaceType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *GCPVPCVoltstackClusterType_OutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &GCPVPCVoltstackClusterReplaceType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GCPVPCVoltstackClusterReplaceType from GCPVPCVoltstackClusterType for oneof fields
func (r *GCPVPCVoltstackClusterReplaceType) SetSiteMeshGroupChoiceToGCPVPCVoltstackClusterType(o *GCPVPCVoltstackClusterType) error {
	switch of := r.SiteMeshGroupChoice.(type) {
	case nil:
		o.SiteMeshGroupChoice = nil

	case *GCPVPCVoltstackClusterReplaceType_SmConnectionPublicIp:
		o.SiteMeshGroupChoice = &GCPVPCVoltstackClusterType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *GCPVPCVoltstackClusterReplaceType_SmConnectionPvtIp:
		o.SiteMeshGroupChoice = &GCPVPCVoltstackClusterType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GCPVPCVoltstackClusterReplaceType) GetSiteMeshGroupChoiceFromGCPVPCVoltstackClusterType(o *GCPVPCVoltstackClusterType) error {
	switch of := o.SiteMeshGroupChoice.(type) {
	case nil:
		r.SiteMeshGroupChoice = nil

	case *GCPVPCVoltstackClusterType_SmConnectionPublicIp:
		r.SiteMeshGroupChoice = &GCPVPCVoltstackClusterReplaceType_SmConnectionPublicIp{SmConnectionPublicIp: of.SmConnectionPublicIp}

	case *GCPVPCVoltstackClusterType_SmConnectionPvtIp:
		r.SiteMeshGroupChoice = &GCPVPCVoltstackClusterReplaceType_SmConnectionPvtIp{SmConnectionPvtIp: of.SmConnectionPvtIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GCPVPCVoltstackClusterReplaceType) fromGCPVPCVoltstackClusterType(f *GCPVPCVoltstackClusterType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetDcClusterGroupChoiceFromGCPVPCVoltstackClusterType(f)
	m.GetForwardProxyChoiceFromGCPVPCVoltstackClusterType(f)
	m.GcpZoneNames = f.GetGcpZoneNames()
	m.GetGlobalNetworkChoiceFromGCPVPCVoltstackClusterType(f)
	m.GetNetworkPolicyChoiceFromGCPVPCVoltstackClusterType(f)
	m.NodeNumber = f.GetNodeNumber()
	m.GetOutsideStaticRouteChoiceFromGCPVPCVoltstackClusterType(f)
	m.SiteLocalNetwork = f.GetSiteLocalNetwork()
	m.SiteLocalSubnet = f.GetSiteLocalSubnet()
	m.GetSiteMeshGroupChoiceFromGCPVPCVoltstackClusterType(f)
}

func (m *GCPVPCVoltstackClusterReplaceType) FromGCPVPCVoltstackClusterType(f *GCPVPCVoltstackClusterType) {
	m.fromGCPVPCVoltstackClusterType(f, true)
}

func (m *GCPVPCVoltstackClusterReplaceType) FromGCPVPCVoltstackClusterTypeWithoutDeepCopy(f *GCPVPCVoltstackClusterType) {
	m.fromGCPVPCVoltstackClusterType(f, false)
}

func (m *GCPVPCVoltstackClusterReplaceType) toGCPVPCVoltstackClusterType(f *GCPVPCVoltstackClusterType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetDcClusterGroupChoiceToGCPVPCVoltstackClusterType(f)
	m1.SetForwardProxyChoiceToGCPVPCVoltstackClusterType(f)
	f.GcpZoneNames = m1.GcpZoneNames
	m1.SetGlobalNetworkChoiceToGCPVPCVoltstackClusterType(f)
	m1.SetNetworkPolicyChoiceToGCPVPCVoltstackClusterType(f)
	f.NodeNumber = m1.NodeNumber
	m1.SetOutsideStaticRouteChoiceToGCPVPCVoltstackClusterType(f)
	f.SiteLocalNetwork = m1.SiteLocalNetwork
	f.SiteLocalSubnet = m1.SiteLocalSubnet
	m1.SetSiteMeshGroupChoiceToGCPVPCVoltstackClusterType(f)
}

func (m *GCPVPCVoltstackClusterReplaceType) ToGCPVPCVoltstackClusterType(f *GCPVPCVoltstackClusterType) {
	m.toGCPVPCVoltstackClusterType(f, true)
}

func (m *GCPVPCVoltstackClusterReplaceType) ToGCPVPCVoltstackClusterTypeWithoutDeepCopy(f *GCPVPCVoltstackClusterType) {
	m.toGCPVPCVoltstackClusterType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *GetSpecType_BlockAllServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *GetSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GetSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockAllServices:
		r.BlockedServicesChoice = &GetSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &GetSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &GetSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetDeploymentToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Deployment.(type) {
	case nil:
		o.Deployment = nil

	case *GetSpecType_Assisted:
		o.Deployment = &GlobalSpecType_Assisted{Assisted: of.Assisted}

	case *GetSpecType_CloudCredentials:
		o.Deployment = &GlobalSpecType_CloudCredentials{CloudCredentials: of.CloudCredentials}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetDeploymentFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Deployment.(type) {
	case nil:
		r.Deployment = nil

	case *GlobalSpecType_Assisted:
		r.Deployment = &GetSpecType_Assisted{Assisted: of.Assisted}

	case *GlobalSpecType_CloudCredentials:
		r.Deployment = &GetSpecType_CloudCredentials{CloudCredentials: of.CloudCredentials}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *GetSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GetSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &GetSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetPrivateConnectivityChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.PrivateConnectivityChoice.(type) {
	case nil:
		o.PrivateConnectivityChoice = nil

	case *GetSpecType_PrivateConnectDisabled:
		o.PrivateConnectivityChoice = &GlobalSpecType_PrivateConnectDisabled{PrivateConnectDisabled: of.PrivateConnectDisabled}

	case *GetSpecType_PrivateConnectivity:
		o.PrivateConnectivityChoice = &GlobalSpecType_PrivateConnectivity{PrivateConnectivity: of.PrivateConnectivity}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetPrivateConnectivityChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.PrivateConnectivityChoice.(type) {
	case nil:
		r.PrivateConnectivityChoice = nil

	case *GlobalSpecType_PrivateConnectDisabled:
		r.PrivateConnectivityChoice = &GetSpecType_PrivateConnectDisabled{PrivateConnectDisabled: of.PrivateConnectDisabled}

	case *GlobalSpecType_PrivateConnectivity:
		r.PrivateConnectivityChoice = &GetSpecType_PrivateConnectivity{PrivateConnectivity: of.PrivateConnectivity}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetSiteTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteType.(type) {
	case nil:
		o.SiteType = nil

	case *GetSpecType_IngressEgressGw:
		o.SiteType = &GlobalSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *GetSpecType_IngressGw:
		o.SiteType = &GlobalSpecType_IngressGw{IngressGw: of.IngressGw}

	case *GetSpecType_VoltstackCluster:
		o.SiteType = &GlobalSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetSiteTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteType.(type) {
	case nil:
		r.SiteType = nil

	case *GlobalSpecType_IngressEgressGw:
		r.SiteType = &GetSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *GlobalSpecType_IngressGw:
		r.SiteType = &GetSpecType_IngressGw{IngressGw: of.IngressGw}

	case *GlobalSpecType_VoltstackCluster:
		r.SiteType = &GetSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.CloudSiteInfo = f.GetCloudSiteInfo()
	m.Coordinates = f.GetCoordinates()
	m.CustomDns = f.GetCustomDns()
	m.GetDeploymentFromGlobalSpecType(f)
	m.DiskSize = f.GetDiskSize()
	m.ErrorDescription = f.GetErrorDescription()
	m.GcpLabels = f.GetGcpLabels()
	m.GcpRegion = f.GetGcpRegion()
	m.InstanceType = f.GetInstanceType()
	m.KubernetesUpgradeDrain = f.GetKubernetesUpgradeDrain()
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.NodesPerAz = f.GetNodesPerAz()
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.OperatingSystemVersion = f.GetOperatingSystemVersion()
	m.GetPrivateConnectivityChoiceFromGlobalSpecType(f)
	m.SiteErrors = f.GetSiteErrors()

	m.GetSiteTypeFromGlobalSpecType(f)
	m.SshKey = f.GetSshKey()
	m.SuggestedAction = f.GetSuggestedAction()
	m.UserModificationTimestamp = f.GetUserModificationTimestamp()
	m.ValidationState = f.GetValidationState()
	m.VolterraSoftwareVersion = f.GetVolterraSoftwareVersion()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	f.CloudSiteInfo = m1.CloudSiteInfo
	f.Coordinates = m1.Coordinates
	f.CustomDns = m1.CustomDns
	m1.SetDeploymentToGlobalSpecType(f)
	f.DiskSize = m1.DiskSize
	f.ErrorDescription = m1.ErrorDescription
	f.GcpLabels = m1.GcpLabels
	f.GcpRegion = m1.GcpRegion
	f.InstanceType = m1.InstanceType
	f.KubernetesUpgradeDrain = m1.KubernetesUpgradeDrain
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.NodesPerAz = m1.NodesPerAz
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	f.OperatingSystemVersion = m1.OperatingSystemVersion
	m1.SetPrivateConnectivityChoiceToGlobalSpecType(f)
	f.SiteErrors = m1.SiteErrors

	m1.SetSiteTypeToGlobalSpecType(f)
	f.SshKey = m1.SshKey
	f.SuggestedAction = m1.SuggestedAction
	f.UserModificationTimestamp = m1.UserModificationTimestamp
	f.ValidationState = m1.ValidationState
	f.VolterraSoftwareVersion = m1.VolterraSoftwareVersion
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *ReplaceSpecType_BlockAllServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *ReplaceSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *ReplaceSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockAllServices:
		r.BlockedServicesChoice = &ReplaceSpecType_BlockAllServices{BlockAllServices: of.BlockAllServices}

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &ReplaceSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &ReplaceSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetDeploymentToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Deployment.(type) {
	case nil:
		o.Deployment = nil

	case *ReplaceSpecType_CloudCredentials:
		o.Deployment = &GlobalSpecType_CloudCredentials{CloudCredentials: of.CloudCredentials}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetDeploymentFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Deployment.(type) {
	case nil:
		r.Deployment = nil

	case *GlobalSpecType_CloudCredentials:
		r.Deployment = &ReplaceSpecType_CloudCredentials{CloudCredentials: of.CloudCredentials}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *ReplaceSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *ReplaceSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetPrivateConnectivityChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.PrivateConnectivityChoice.(type) {
	case nil:
		o.PrivateConnectivityChoice = nil

	case *ReplaceSpecType_PrivateConnectDisabled:
		o.PrivateConnectivityChoice = &GlobalSpecType_PrivateConnectDisabled{PrivateConnectDisabled: of.PrivateConnectDisabled}

	case *ReplaceSpecType_PrivateConnectivity:
		o.PrivateConnectivityChoice = &GlobalSpecType_PrivateConnectivity{PrivateConnectivity: of.PrivateConnectivity}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetPrivateConnectivityChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.PrivateConnectivityChoice.(type) {
	case nil:
		r.PrivateConnectivityChoice = nil

	case *GlobalSpecType_PrivateConnectDisabled:
		r.PrivateConnectivityChoice = &ReplaceSpecType_PrivateConnectDisabled{PrivateConnectDisabled: of.PrivateConnectDisabled}

	case *GlobalSpecType_PrivateConnectivity:
		r.PrivateConnectivityChoice = &ReplaceSpecType_PrivateConnectivity{PrivateConnectivity: of.PrivateConnectivity}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetSiteTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteType.(type) {
	case nil:
		o.SiteType = nil

	case *ReplaceSpecType_IngressEgressGw:

		f1 := o.GetIngressEgressGw()
		if f1 == nil {
			f1 = &GCPVPCIngressEgressGwType{}
		}
		of.IngressEgressGw.ToGCPVPCIngressEgressGwTypeWithoutDeepCopy(f1)
		o.SiteType = &GlobalSpecType_IngressEgressGw{IngressEgressGw: f1}

	case *ReplaceSpecType_IngressGw:

		f1 := o.GetIngressGw()
		if f1 == nil {
			f1 = &GCPVPCIngressGwType{}
		}
		of.IngressGw.ToGCPVPCIngressGwTypeWithoutDeepCopy(f1)
		o.SiteType = &GlobalSpecType_IngressGw{IngressGw: f1}

	case *ReplaceSpecType_VoltstackCluster:

		f1 := o.GetVoltstackCluster()
		if f1 == nil {
			f1 = &GCPVPCVoltstackClusterType{}
		}
		of.VoltstackCluster.ToGCPVPCVoltstackClusterTypeWithoutDeepCopy(f1)
		o.SiteType = &GlobalSpecType_VoltstackCluster{VoltstackCluster: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetSiteTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteType.(type) {
	case nil:
		r.SiteType = nil

	case *GlobalSpecType_IngressEgressGw:

		f1 := &GCPVPCIngressEgressGwReplaceType{}
		f1.FromGCPVPCIngressEgressGwTypeWithoutDeepCopy(of.IngressEgressGw)
		r.SiteType = &ReplaceSpecType_IngressEgressGw{IngressEgressGw: f1}

	case *GlobalSpecType_IngressGw:

		f1 := &GCPVPCIngressGwReplaceType{}
		f1.FromGCPVPCIngressGwTypeWithoutDeepCopy(of.IngressGw)
		r.SiteType = &ReplaceSpecType_IngressGw{IngressGw: f1}

	case *GlobalSpecType_VoltstackCluster:

		f1 := &GCPVPCVoltstackClusterReplaceType{}
		f1.FromGCPVPCVoltstackClusterTypeWithoutDeepCopy(of.VoltstackCluster)
		r.SiteType = &ReplaceSpecType_VoltstackCluster{VoltstackCluster: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.Coordinates = f.GetCoordinates()
	m.CustomDns = f.GetCustomDns()
	m.GetDeploymentFromGlobalSpecType(f)
	m.DiskSize = f.GetDiskSize()
	m.GcpRegion = f.GetGcpRegion()
	m.InstanceType = f.GetInstanceType()
	m.KubernetesUpgradeDrain = f.GetKubernetesUpgradeDrain()
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.NodesPerAz = f.GetNodesPerAz()
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.GetPrivateConnectivityChoiceFromGlobalSpecType(f)
	m.GetSiteTypeFromGlobalSpecType(f)
	m.SshKey = f.GetSshKey()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	f.Coordinates = m1.Coordinates
	f.CustomDns = m1.CustomDns
	m1.SetDeploymentToGlobalSpecType(f)
	f.DiskSize = m1.DiskSize
	f.GcpRegion = m1.GcpRegion
	f.InstanceType = m1.InstanceType
	f.KubernetesUpgradeDrain = m1.KubernetesUpgradeDrain
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.NodesPerAz = m1.NodesPerAz
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	m1.SetPrivateConnectivityChoiceToGlobalSpecType(f)
	m1.SetSiteTypeToGlobalSpecType(f)
	f.SshKey = m1.SshKey
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

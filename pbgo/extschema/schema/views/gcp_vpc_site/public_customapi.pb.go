// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/gcp_vpc_site/public_customapi.proto

// GCP VPC Site
//
// x-displayName: "Configure GCP VPC Site"
// GCP VPC Site view defines a required parameters that can be used in CRUD, to create and manage a volterra site in GCP VPC.
// It can be used to either automatically create or Manually assisted site creation in GCP VPC.
//
// View will create following child objects.
//
// * Site
//

package gcp_vpc_site

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Request to configure Cloud Site Information
//
// x-displayName: "Request to configure Cloud Site Information"
// Request to configure Cloud Site Information
type SetCloudSiteInfoRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "default"
	// Namespace for the object to be configured
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "gcp-vpc-site-1"
	// Name of the object to be configured
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// GCP VPC Site Info Config
	//
	// x-displayName: "GCP VPC Site Info Config"
	// GCP VPC Site Info Config
	AwsVpcInfo *GCPVPCSiteInfoType `protobuf:"bytes,3,opt,name=aws_vpc_info,json=awsVpcInfo,proto3" json:"aws_vpc_info,omitempty"`
}

func (m *SetCloudSiteInfoRequest) Reset()      { *m = SetCloudSiteInfoRequest{} }
func (*SetCloudSiteInfoRequest) ProtoMessage() {}
func (*SetCloudSiteInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7881f50a1a77c55, []int{0}
}
func (m *SetCloudSiteInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetCloudSiteInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetCloudSiteInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetCloudSiteInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetCloudSiteInfoRequest.Merge(m, src)
}
func (m *SetCloudSiteInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetCloudSiteInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetCloudSiteInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetCloudSiteInfoRequest proto.InternalMessageInfo

func (m *SetCloudSiteInfoRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetCloudSiteInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetCloudSiteInfoRequest) GetAwsVpcInfo() *GCPVPCSiteInfoType {
	if m != nil {
		return m.AwsVpcInfo
	}
	return nil
}

// Response to configure Cloud Site Information
//
// x-displayName: "Response to configure Cloud Site Information"
// Response to configure configure Cloud Site Information
type SetCloudSiteInfoResponse struct {
}

func (m *SetCloudSiteInfoResponse) Reset()      { *m = SetCloudSiteInfoResponse{} }
func (*SetCloudSiteInfoResponse) ProtoMessage() {}
func (*SetCloudSiteInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7881f50a1a77c55, []int{1}
}
func (m *SetCloudSiteInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetCloudSiteInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetCloudSiteInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetCloudSiteInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetCloudSiteInfoResponse.Merge(m, src)
}
func (m *SetCloudSiteInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetCloudSiteInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetCloudSiteInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetCloudSiteInfoResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SetCloudSiteInfoRequest)(nil), "ves.io.schema.views.gcp_vpc_site.SetCloudSiteInfoRequest")
	golang_proto.RegisterType((*SetCloudSiteInfoRequest)(nil), "ves.io.schema.views.gcp_vpc_site.SetCloudSiteInfoRequest")
	proto.RegisterType((*SetCloudSiteInfoResponse)(nil), "ves.io.schema.views.gcp_vpc_site.SetCloudSiteInfoResponse")
	golang_proto.RegisterType((*SetCloudSiteInfoResponse)(nil), "ves.io.schema.views.gcp_vpc_site.SetCloudSiteInfoResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/gcp_vpc_site/public_customapi.proto", fileDescriptor_c7881f50a1a77c55)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/gcp_vpc_site/public_customapi.proto", fileDescriptor_c7881f50a1a77c55)
}

var fileDescriptor_c7881f50a1a77c55 = []byte{
	// 635 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6b, 0x13, 0x4f,
	0x14, 0xce, 0xa4, 0xe5, 0x07, 0xdd, 0x9f, 0x48, 0xd9, 0x8b, 0x21, 0x96, 0x21, 0x04, 0xc1, 0x52,
	0xbb, 0x3b, 0x50, 0x2d, 0x62, 0xf1, 0x62, 0x03, 0x96, 0xe2, 0xc1, 0xd2, 0x4a, 0x0e, 0x5e, 0x96,
	0xd9, 0xe9, 0xdb, 0xed, 0x68, 0x76, 0x67, 0xdc, 0x99, 0xdd, 0xb4, 0x48, 0x41, 0x7a, 0x17, 0x2a,
	0x9e, 0x3d, 0x79, 0xf1, 0x7f, 0xe8, 0xa5, 0x37, 0x3d, 0x49, 0xd1, 0x4b, 0x4f, 0x62, 0x36, 0x1e,
	0x3c, 0xf6, 0xea, 0x4d, 0x32, 0x49, 0x6a, 0x92, 0xb6, 0x44, 0x8a, 0xb7, 0xf7, 0xe6, 0xfb, 0xde,
	0xec, 0xf7, 0xbd, 0x79, 0x6f, 0xad, 0xbb, 0x19, 0x28, 0x97, 0x0b, 0xa2, 0xd8, 0x16, 0x44, 0x94,
	0x64, 0x1c, 0x9a, 0x8a, 0x84, 0x4c, 0x7a, 0x99, 0x64, 0x9e, 0xe2, 0x1a, 0x88, 0x4c, 0xfd, 0x06,
	0x67, 0x1e, 0x4b, 0x95, 0x16, 0x11, 0x95, 0xdc, 0x95, 0x89, 0xd0, 0xc2, 0xae, 0x74, 0x0b, 0xdd,
	0x6e, 0xa1, 0x6b, 0x0a, 0xdd, 0xc1, 0xc2, 0xb2, 0x13, 0x72, 0xbd, 0x95, 0xfa, 0x2e, 0x13, 0x11,
	0x09, 0x45, 0x28, 0x88, 0x29, 0xf4, 0xd3, 0xc0, 0x64, 0x26, 0x31, 0x51, 0xf7, 0xc2, 0xf2, 0x4c,
	0x28, 0x44, 0xd8, 0x00, 0x42, 0x25, 0x27, 0x34, 0x8e, 0x85, 0xa6, 0x9a, 0x8b, 0x58, 0xf5, 0xd0,
	0xeb, 0xc3, 0x3a, 0x85, 0x1c, 0x04, 0xf1, 0x30, 0x68, 0x64, 0xeb, 0x1d, 0x09, 0x7d, 0x7c, 0x66,
	0xc4, 0x24, 0x6d, 0xf0, 0x4d, 0xaa, 0xa1, 0x87, 0x56, 0x47, 0x50, 0x50, 0x10, 0x67, 0x23, 0x5f,
	0xa8, 0x9c, 0x6d, 0x93, 0x37, 0xcc, 0x70, 0xc6, 0x36, 0x52, 0xf8, 0xcf, 0x80, 0xe9, 0x1e, 0x7d,
	0x7e, 0x2c, 0x7d, 0xd0, 0xc0, 0x8d, 0xf3, 0xd8, 0x1d, 0x96, 0x37, 0xc0, 0xaa, 0xbe, 0x47, 0xd6,
	0xb5, 0x0d, 0xd0, 0xb5, 0x86, 0x48, 0x37, 0x37, 0xb8, 0x86, 0xd5, 0x38, 0x10, 0xeb, 0xf0, 0x22,
	0x05, 0xa5, 0xed, 0x19, 0x6b, 0x2a, 0xa6, 0x11, 0x28, 0x49, 0x19, 0x94, 0x50, 0x05, 0xcd, 0x4e,
	0xad, 0xff, 0x39, 0xb0, 0x6d, 0x6b, 0xb2, 0x93, 0x94, 0x8a, 0x06, 0x30, 0xb1, 0x5d, 0xb7, 0xae,
	0xd0, 0xa6, 0x32, 0x7a, 0x78, 0x1c, 0x88, 0xd2, 0x44, 0x05, 0xcd, 0xfe, 0xbf, 0x70, 0xc7, 0x1d,
	0xf7, 0xee, 0xee, 0x4a, 0x6d, 0xad, 0xbe, 0x56, 0xeb, 0x0b, 0x78, 0xb2, 0x23, 0x61, 0xdd, 0xa2,
	0x4d, 0x55, 0x97, 0xac, 0x93, 0x57, 0xcb, 0x56, 0xe9, 0xac, 0x48, 0x25, 0x45, 0xac, 0x60, 0xe1,
	0xdb, 0xa4, 0x35, 0x55, 0x33, 0x83, 0xf6, 0x60, 0x6d, 0xd5, 0x7e, 0x57, 0xb4, 0xa6, 0x47, 0xa9,
	0xf6, 0xbd, 0xf1, 0x02, 0x2e, 0xe8, 0x41, 0x79, 0xe9, 0x32, 0xa5, 0x5d, 0x65, 0xd5, 0x37, 0x28,
	0xff, 0x58, 0xba, 0x9f, 0x81, 0x72, 0xb8, 0x70, 0x78, 0x1c, 0x24, 0x54, 0xe9, 0x24, 0x65, 0x3a,
	0x4d, 0xc0, 0x69, 0x26, 0x5c, 0xc3, 0x7c, 0x25, 0x58, 0xdc, 0x66, 0x4e, 0xe7, 0x16, 0x27, 0xa2,
	0x31, 0x0d, 0x21, 0x82, 0x58, 0x3b, 0x3e, 0x55, 0x9c, 0x39, 0xa9, 0x82, 0x64, 0xef, 0xeb, 0x8f,
	0xb7, 0xc5, 0x47, 0xd5, 0x87, 0xbd, 0x85, 0x22, 0xa7, 0xdd, 0x57, 0xe4, 0xe5, 0x69, 0xbc, 0x3b,
	0x3c, 0x03, 0x06, 0xd8, 0x25, 0x0a, 0xb4, 0xc7, 0x3a, 0xb2, 0xcc, 0xa9, 0x79, 0x8e, 0x25, 0x34,
	0x67, 0xff, 0x42, 0xd6, 0xd5, 0x7a, 0x6f, 0x96, 0x6b, 0x22, 0x0e, 0x78, 0x68, 0xcf, 0x9d, 0x6b,
	0x71, 0x98, 0xd4, 0x6f, 0xc7, 0xad, 0xbf, 0xe2, 0xf6, 0xfc, 0xbf, 0xfe, 0x37, 0xfe, 0x57, 0xaa,
	0xcb, 0x97, 0xf0, 0xdf, 0x5f, 0x58, 0x8f, 0x19, 0x51, 0x4b, 0x68, 0xae, 0xbc, 0x78, 0x78, 0x80,
	0x26, 0xbe, 0x1c, 0xa0, 0x9b, 0x63, 0x9f, 0xf4, 0xb1, 0x59, 0xbb, 0xbd, 0xcf, 0xa5, 0xe2, 0x34,
	0x5a, 0xde, 0x47, 0x47, 0x2d, 0x5c, 0x38, 0x6e, 0xe1, 0xc2, 0x49, 0x0b, 0xa3, 0x57, 0x39, 0x46,
	0x1f, 0x72, 0x8c, 0x3e, 0xe5, 0x18, 0x1d, 0xe5, 0x18, 0x7d, 0xcf, 0x31, 0xfa, 0x99, 0xe3, 0xc2,
	0x49, 0x8e, 0xd1, 0x7e, 0x1b, 0x17, 0x0e, 0xdb, 0x18, 0x1d, 0xb5, 0x71, 0xe1, 0xb8, 0x8d, 0x0b,
	0x4f, 0xeb, 0xa1, 0x90, 0xcf, 0x43, 0x37, 0x13, 0x0d, 0x0d, 0x49, 0x42, 0xdd, 0x54, 0x11, 0x13,
	0x04, 0x22, 0x89, 0x1c, 0x99, 0x88, 0x8c, 0x6f, 0x42, 0xe2, 0xf4, 0x61, 0x22, 0xfd, 0x50, 0x10,
	0xd8, 0xd6, 0xfd, 0x7f, 0xd2, 0x45, 0x7b, 0xee, 0xff, 0x67, 0x96, 0xf7, 0xf6, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x8b, 0x4c, 0x02, 0x34, 0x8a, 0x05, 0x00, 0x00,
}

func (this *SetCloudSiteInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetCloudSiteInfoRequest)
	if !ok {
		that2, ok := that.(SetCloudSiteInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.AwsVpcInfo.Equal(that1.AwsVpcInfo) {
		return false
	}
	return true
}
func (this *SetCloudSiteInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetCloudSiteInfoResponse)
	if !ok {
		that2, ok := that.(SetCloudSiteInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetCloudSiteInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gcp_vpc_site.SetCloudSiteInfoRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.AwsVpcInfo != nil {
		s = append(s, "AwsVpcInfo: "+fmt.Sprintf("%#v", this.AwsVpcInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetCloudSiteInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&gcp_vpc_site.SetCloudSiteInfoResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Configure GCP VPC Site Information
	//
	// x-displayName: "Configure GCP VPC Site Information"
	// Configure GCP VPC Site Information like public, private ips, subnet ids and others
	SetCloudSiteInfo(ctx context.Context, in *SetCloudSiteInfoRequest, opts ...grpc.CallOption) (*SetCloudSiteInfoResponse, error)
	// Validate GCP VPC Site Config
	//
	// x-displayName: "Validate GCP VPC Site Config"
	// Validate GCP VPC Site Config
	ValidateConfig(ctx context.Context, in *views.ValidateConfigRequest, opts ...grpc.CallOption) (*views.ValidateConfigResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) SetCloudSiteInfo(ctx context.Context, in *SetCloudSiteInfoRequest, opts ...grpc.CallOption) (*SetCloudSiteInfoResponse, error) {
	out := new(SetCloudSiteInfoResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.gcp_vpc_site.CustomAPI/SetCloudSiteInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ValidateConfig(ctx context.Context, in *views.ValidateConfigRequest, opts ...grpc.CallOption) (*views.ValidateConfigResponse, error) {
	out := new(views.ValidateConfigResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.gcp_vpc_site.CustomAPI/ValidateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Configure GCP VPC Site Information
	//
	// x-displayName: "Configure GCP VPC Site Information"
	// Configure GCP VPC Site Information like public, private ips, subnet ids and others
	SetCloudSiteInfo(context.Context, *SetCloudSiteInfoRequest) (*SetCloudSiteInfoResponse, error)
	// Validate GCP VPC Site Config
	//
	// x-displayName: "Validate GCP VPC Site Config"
	// Validate GCP VPC Site Config
	ValidateConfig(context.Context, *views.ValidateConfigRequest) (*views.ValidateConfigResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) SetCloudSiteInfo(ctx context.Context, req *SetCloudSiteInfoRequest) (*SetCloudSiteInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCloudSiteInfo not implemented")
}
func (*UnimplementedCustomAPIServer) ValidateConfig(ctx context.Context, req *views.ValidateConfigRequest) (*views.ValidateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConfig not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_SetCloudSiteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCloudSiteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).SetCloudSiteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.gcp_vpc_site.CustomAPI/SetCloudSiteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).SetCloudSiteInfo(ctx, req.(*SetCloudSiteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ValidateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(views.ValidateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ValidateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.gcp_vpc_site.CustomAPI/ValidateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ValidateConfig(ctx, req.(*views.ValidateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.gcp_vpc_site.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetCloudSiteInfo",
			Handler:    _CustomAPI_SetCloudSiteInfo_Handler,
		},
		{
			MethodName: "ValidateConfig",
			Handler:    _CustomAPI_ValidateConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/gcp_vpc_site/public_customapi.proto",
}

func (m *SetCloudSiteInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetCloudSiteInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetCloudSiteInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AwsVpcInfo != nil {
		{
			size, err := m.AwsVpcInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetCloudSiteInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetCloudSiteInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetCloudSiteInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetCloudSiteInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.AwsVpcInfo != nil {
		l = m.AwsVpcInfo.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *SetCloudSiteInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SetCloudSiteInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetCloudSiteInfoRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`AwsVpcInfo:` + strings.Replace(fmt.Sprintf("%v", this.AwsVpcInfo), "GCPVPCSiteInfoType", "GCPVPCSiteInfoType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetCloudSiteInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetCloudSiteInfoResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SetCloudSiteInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCloudSiteInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCloudSiteInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsVpcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsVpcInfo == nil {
				m.AwsVpcInfo = &GCPVPCSiteInfoType{}
			}
			if err := m.AwsVpcInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetCloudSiteInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCloudSiteInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCloudSiteInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

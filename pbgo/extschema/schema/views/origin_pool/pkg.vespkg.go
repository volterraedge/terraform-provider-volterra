// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package origin_pool

import (
	"reflect"

	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/store"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.views.origin_pool.SpecType"] = SpecTypeValidator()

	vr["ves.io.schema.views.origin_pool.Object"] = ObjectValidator()

	vr["ves.io.schema.views.origin_pool.CreateRequest"] = CreateRequestValidator()
	vr["ves.io.schema.views.origin_pool.CreateResponse"] = CreateResponseValidator()
	vr["ves.io.schema.views.origin_pool.DeleteRequest"] = DeleteRequestValidator()
	vr["ves.io.schema.views.origin_pool.GetRequest"] = GetRequestValidator()
	vr["ves.io.schema.views.origin_pool.GetResponse"] = GetResponseValidator()
	vr["ves.io.schema.views.origin_pool.ListRequest"] = ListRequestValidator()
	vr["ves.io.schema.views.origin_pool.ListResponse"] = ListResponseValidator()
	vr["ves.io.schema.views.origin_pool.ListResponseItem"] = ListResponseItemValidator()
	vr["ves.io.schema.views.origin_pool.ReplaceRequest"] = ReplaceRequestValidator()
	vr["ves.io.schema.views.origin_pool.ReplaceResponse"] = ReplaceResponseValidator()

	vr["ves.io.schema.views.origin_pool.CreateSpecType"] = CreateSpecTypeValidator()
	vr["ves.io.schema.views.origin_pool.GetSpecType"] = GetSpecTypeValidator()
	vr["ves.io.schema.views.origin_pool.GlobalSpecType"] = GlobalSpecTypeValidator()
	vr["ves.io.schema.views.origin_pool.OriginPoolAdvancedOptions"] = OriginPoolAdvancedOptionsValidator()
	vr["ves.io.schema.views.origin_pool.OriginPoolDefaultSubset"] = OriginPoolDefaultSubsetValidator()
	vr["ves.io.schema.views.origin_pool.OriginPoolSubsets"] = OriginPoolSubsetsValidator()
	vr["ves.io.schema.views.origin_pool.OriginServerConsulService"] = OriginServerConsulServiceValidator()
	vr["ves.io.schema.views.origin_pool.OriginServerCustomEndpoint"] = OriginServerCustomEndpointValidator()
	vr["ves.io.schema.views.origin_pool.OriginServerK8SService"] = OriginServerK8SServiceValidator()
	vr["ves.io.schema.views.origin_pool.OriginServerPrivateIP"] = OriginServerPrivateIPValidator()
	vr["ves.io.schema.views.origin_pool.OriginServerPrivateName"] = OriginServerPrivateNameValidator()
	vr["ves.io.schema.views.origin_pool.OriginServerPublicIP"] = OriginServerPublicIPValidator()
	vr["ves.io.schema.views.origin_pool.OriginServerPublicName"] = OriginServerPublicNameValidator()
	vr["ves.io.schema.views.origin_pool.OriginServerSegmentIP"] = OriginServerSegmentIPValidator()
	vr["ves.io.schema.views.origin_pool.OriginServerSegmentName"] = OriginServerSegmentNameValidator()
	vr["ves.io.schema.views.origin_pool.OriginServerType"] = OriginServerTypeValidator()
	vr["ves.io.schema.views.origin_pool.OriginServerVirtualNetworkIP"] = OriginServerVirtualNetworkIPValidator()
	vr["ves.io.schema.views.origin_pool.OriginServerVirtualNetworkName"] = OriginServerVirtualNetworkNameValidator()
	vr["ves.io.schema.views.origin_pool.ReplaceSpecType"] = ReplaceSpecTypeValidator()
	vr["ves.io.schema.views.origin_pool.TlsCertificatesType"] = TlsCertificatesTypeValidator()
	vr["ves.io.schema.views.origin_pool.UpstreamTlsParameters"] = UpstreamTlsParametersValidator()
	vr["ves.io.schema.views.origin_pool.UpstreamTlsValidationContext"] = UpstreamTlsValidationContextValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {
	mdr.EntryFactory["ves.io.schema.views.origin_pool.Object"] = NewEntryObject
	mdr.EntryStoreMap["ves.io.schema.views.origin_pool.Object"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.views.origin_pool.Object"] = reflect.TypeOf(&DBObject{})
	mdr.EntryIndexers["ves.io.schema.views.origin_pool.Object"] = GetObjectIndexers

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

	mdr.RPCHiddenInternalFieldsRegistry["ves.io.schema.views.origin_pool.API.Create"] = []string{
		"spec.advanced_options.disable_lb_source_ip_persistance",
		"spec.advanced_options.enable_lb_source_ip_persistance",
		"spec.origin_servers.#.k8s_service.service_selector",
		"spec.use_tls.use_mtls.tls_certificates.#.private_key.blindfold_secret_info_internal",
		"spec.use_tls.use_mtls.tls_certificates.#.private_key.secret_encoding_type",
		"spec.use_tls.use_mtls.tls_certificates.#.private_key.vault_secret_info",
		"spec.use_tls.use_mtls.tls_certificates.#.private_key.wingman_secret_info",
	}

	mdr.RPCAvailableInReqFieldRegistry["ves.io.schema.views.origin_pool.API.Create"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "spec.origin_servers.#.private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_servers.#.segment_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_servers.#.vn_private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "spec.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
	}

	mdr.RPCAvailableInResFieldRegistry["ves.io.schema.views.origin_pool.API.Create"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "spec.origin_servers.#.private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_servers.#.segment_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_servers.#.vn_private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "spec.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
	}

	mdr.RPCConfidentialRequestRegistry["ves.io.schema.views.origin_pool.API.Create"] = "ves.io.schema.views.origin_pool.CreateRequest"

	mdr.RPCDeprecatedResponseFieldsRegistry["ves.io.schema.views.origin_pool.API.Get"] = []string{
		"object",
	}

	mdr.RPCAvailableInResFieldRegistry["ves.io.schema.views.origin_pool.API.Get"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "create_form.spec.origin_servers.#.private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "create_form.spec.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "create_form.spec.origin_servers.#.segment_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "create_form.spec.origin_servers.#.vn_private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "create_form.spec.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "create_form.spec.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "object.spec.gc_spec.origin_servers.#.private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "object.spec.gc_spec.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "object.spec.gc_spec.origin_servers.#.segment_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "object.spec.gc_spec.origin_servers.#.vn_private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "object.spec.gc_spec.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "object.spec.gc_spec.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "replace_form.spec.origin_servers.#.private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "replace_form.spec.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "replace_form.spec.origin_servers.#.segment_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "replace_form.spec.origin_servers.#.vn_private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "replace_form.spec.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "replace_form.spec.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "spec.origin_servers.#.private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_servers.#.segment_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_servers.#.vn_private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "spec.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
	}

	mdr.RPCAvailableInResFieldRegistry["ves.io.schema.views.origin_pool.API.List"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "items.#.get_spec.origin_servers.#.private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "items.#.get_spec.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "items.#.get_spec.origin_servers.#.segment_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "items.#.get_spec.origin_servers.#.vn_private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "items.#.get_spec.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "items.#.get_spec.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "items.#.object.spec.gc_spec.origin_servers.#.private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "items.#.object.spec.gc_spec.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "items.#.object.spec.gc_spec.origin_servers.#.segment_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "items.#.object.spec.gc_spec.origin_servers.#.vn_private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "items.#.object.spec.gc_spec.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "items.#.object.spec.gc_spec.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
	}

	mdr.RPCHiddenInternalFieldsRegistry["ves.io.schema.views.origin_pool.API.Replace"] = []string{
		"spec.advanced_options.disable_lb_source_ip_persistance",
		"spec.advanced_options.enable_lb_source_ip_persistance",
		"spec.origin_servers.#.k8s_service.service_selector",
		"spec.use_tls.use_mtls.tls_certificates.#.private_key.blindfold_secret_info_internal",
		"spec.use_tls.use_mtls.tls_certificates.#.private_key.secret_encoding_type",
		"spec.use_tls.use_mtls.tls_certificates.#.private_key.vault_secret_info",
		"spec.use_tls.use_mtls.tls_certificates.#.private_key.wingman_secret_info",
	}

	mdr.RPCAvailableInReqFieldRegistry["ves.io.schema.views.origin_pool.API.Replace"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "spec.origin_servers.#.private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_servers.#.public_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_servers.#.segment_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.origin_servers.#.vn_private_ip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.use_tls.use_mtls_obj",
			AllowedEnvironments: []string{"test"},
		},
		{
			FieldPath:           "spec.use_tls.use_server_verification.trusted_ca",
			AllowedEnvironments: []string{"test"},
		},
	}

	mdr.RPCConfidentialRequestRegistry["ves.io.schema.views.origin_pool.API.Replace"] = "ves.io.schema.views.origin_pool.ReplaceRequest"

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {
	sm["ves.io.schema.views.origin_pool.API"] = "config"

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

	sm["config"] = svcfw.P0PolicyInfo{
		Name:            "ves-io-allow-config",
		ServiceSelector: "akar\\.gc.*\\",
	}

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

	csr = mdr.PubCRUDServiceRegistry

	func() {
		// set swagger jsons for our and external schemas
		csr.CRUDSwaggerRegistry["ves.io.schema.views.origin_pool.Object"] = APISwaggerJSON
		csr.CRUDGrpcClientRegistry["ves.io.schema.views.origin_pool.Object"] = NewCRUDAPIGrpcClient
		csr.CRUDRestClientRegistry["ves.io.schema.views.origin_pool.Object"] = NewCRUDAPIRestClient
		csr.CRUDInprocClientRegistry["ves.io.schema.views.origin_pool.Object"] = NewCRUDAPIInprocClient
		if isExternal {
			return
		}
		// registration of api handlers if our own schema
		mdr.SvcRegisterHandlers["ves.io.schema.views.origin_pool.API"] = RegisterAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.views.origin_pool.API"] = RegisterGwAPIHandler
		csr.CRUDServerRegistry["ves.io.schema.views.origin_pool.Object"] = NewCRUDAPIServer

	}()

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}

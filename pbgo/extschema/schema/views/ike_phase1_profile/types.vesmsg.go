// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package ike_phase1_profile

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) IkeKeyLifetimeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ike_key_lifetime")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) IkeReauthTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ike_reauth_timeout")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) EncryptionAlgosValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.EncryptionAlgorithm)
		return int32(i)
	}
	// ves_io_schema.EncryptionAlgorithm_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.EncryptionAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for encryption_algos")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.EncryptionAlgorithm, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for encryption_algos")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.EncryptionAlgorithm)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.EncryptionAlgorithm, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated encryption_algos")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items encryption_algos")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) AuthenticationAlgosValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.AuthenticationAlgorithm)
		return int32(i)
	}
	// ves_io_schema.AuthenticationAlgorithm_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.AuthenticationAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for authentication_algos")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.AuthenticationAlgorithm, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for authentication_algos")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.AuthenticationAlgorithm)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.AuthenticationAlgorithm, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated authentication_algos")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items authentication_algos")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) PrfValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.PseudoRandomFunction)
		return int32(i)
	}
	// ves_io_schema.PseudoRandomFunction_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.PseudoRandomFunction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for prf")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.PseudoRandomFunction, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for prf")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.PseudoRandomFunction)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.PseudoRandomFunction, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated prf")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items prf")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DhGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.DHGroup)
		return int32(i)
	}
	// ves_io_schema.DHGroup_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.DHGroup_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dh_group")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.DHGroup, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for dh_group")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.DHGroup)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.DHGroup, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated dh_group")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items dh_group")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["authentication_algos"]; exists {
		vOpts := append(opts, db.WithValidateField("authentication_algos"))
		if err := fv(ctx, m.GetAuthenticationAlgos(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dh_group"]; exists {
		vOpts := append(opts, db.WithValidateField("dh_group"))
		if err := fv(ctx, m.GetDhGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["encryption_algos"]; exists {
		vOpts := append(opts, db.WithValidateField("encryption_algos"))
		if err := fv(ctx, m.GetEncryptionAlgos(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ike_key_lifetime"]; exists {
		val := m.GetIkeKeyLifetime()
		vOpts := append(opts,
			db.WithValidateField("ike_key_lifetime"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIkeKeyLifetime().(type) {
	case *CreateSpecType_UseDefaultKeylifetime:
		if fv, exists := v.FldValidators["ike_key_lifetime.use_default_keylifetime"]; exists {
			val := m.GetIkeKeyLifetime().(*CreateSpecType_UseDefaultKeylifetime).UseDefaultKeylifetime
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("use_default_keylifetime"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IkeKeylifetimeMinutes:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"]; exists {
			val := m.GetIkeKeyLifetime().(*CreateSpecType_IkeKeylifetimeMinutes).IkeKeylifetimeMinutes
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_minutes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IkeKeylifetimeHours:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"]; exists {
			val := m.GetIkeKeyLifetime().(*CreateSpecType_IkeKeylifetimeHours).IkeKeylifetimeHours
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_hours"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ike_reauth_timeout"]; exists {
		val := m.GetIkeReauthTimeout()
		vOpts := append(opts,
			db.WithValidateField("ike_reauth_timeout"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIkeReauthTimeout().(type) {
	case *CreateSpecType_ReauthTimeoutHours:
		if fv, exists := v.FldValidators["ike_reauth_timeout.reauth_timeout_hours"]; exists {
			val := m.GetIkeReauthTimeout().(*CreateSpecType_ReauthTimeoutHours).ReauthTimeoutHours
			vOpts := append(opts,
				db.WithValidateField("ike_reauth_timeout"),
				db.WithValidateField("reauth_timeout_hours"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ReauthTimeoutDays:
		if fv, exists := v.FldValidators["ike_reauth_timeout.reauth_timeout_days"]; exists {
			val := m.GetIkeReauthTimeout().(*CreateSpecType_ReauthTimeoutDays).ReauthTimeoutDays
			vOpts := append(opts,
				db.WithValidateField("ike_reauth_timeout"),
				db.WithValidateField("reauth_timeout_days"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ReauthDisabled:
		if fv, exists := v.FldValidators["ike_reauth_timeout.reauth_disabled"]; exists {
			val := m.GetIkeReauthTimeout().(*CreateSpecType_ReauthDisabled).ReauthDisabled
			vOpts := append(opts,
				db.WithValidateField("ike_reauth_timeout"),
				db.WithValidateField("reauth_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["prf"]; exists {
		vOpts := append(opts, db.WithValidateField("prf"))
		if err := fv(ctx, m.GetPrf(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIkeKeyLifetime := v.IkeKeyLifetimeValidationRuleHandler
	rulesIkeKeyLifetime := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIkeKeyLifetime(rulesIkeKeyLifetime)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ike_key_lifetime: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_key_lifetime"] = vFn

	vrhIkeReauthTimeout := v.IkeReauthTimeoutValidationRuleHandler
	rulesIkeReauthTimeout := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIkeReauthTimeout(rulesIkeReauthTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ike_reauth_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_reauth_timeout"] = vFn

	vrhEncryptionAlgos := v.EncryptionAlgosValidationRuleHandler
	rulesEncryptionAlgos := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhEncryptionAlgos(rulesEncryptionAlgos)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.encryption_algos: %s", err)
		panic(errMsg)
	}
	v.FldValidators["encryption_algos"] = vFn

	vrhAuthenticationAlgos := v.AuthenticationAlgosValidationRuleHandler
	rulesAuthenticationAlgos := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAuthenticationAlgos(rulesAuthenticationAlgos)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.authentication_algos: %s", err)
		panic(errMsg)
	}
	v.FldValidators["authentication_algos"] = vFn

	vrhPrf := v.PrfValidationRuleHandler
	rulesPrf := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPrf(rulesPrf)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.prf: %s", err)
		panic(errMsg)
	}
	v.FldValidators["prf"] = vFn

	vrhDhGroup := v.DhGroupValidationRuleHandler
	rulesDhGroup := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDhGroup(rulesDhGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.dh_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dh_group"] = vFn

	v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"] = InputMinutesValidator().Validate
	v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"] = InputHoursValidator().Validate

	v.FldValidators["ike_reauth_timeout.reauth_timeout_hours"] = InputHoursValidator().Validate
	v.FldValidators["ike_reauth_timeout.reauth_timeout_days"] = InputDaysValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) IkeKeyLifetimeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ike_key_lifetime")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) IkeReauthTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ike_reauth_timeout")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) EncryptionAlgosValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.EncryptionAlgorithm)
		return int32(i)
	}
	// ves_io_schema.EncryptionAlgorithm_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.EncryptionAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for encryption_algos")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.EncryptionAlgorithm, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for encryption_algos")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.EncryptionAlgorithm)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.EncryptionAlgorithm, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated encryption_algos")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items encryption_algos")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) AuthenticationAlgosValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.AuthenticationAlgorithm)
		return int32(i)
	}
	// ves_io_schema.AuthenticationAlgorithm_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.AuthenticationAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for authentication_algos")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.AuthenticationAlgorithm, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for authentication_algos")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.AuthenticationAlgorithm)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.AuthenticationAlgorithm, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated authentication_algos")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items authentication_algos")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) PrfValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.PseudoRandomFunction)
		return int32(i)
	}
	// ves_io_schema.PseudoRandomFunction_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.PseudoRandomFunction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for prf")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.PseudoRandomFunction, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for prf")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.PseudoRandomFunction)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.PseudoRandomFunction, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated prf")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items prf")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DhGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.DHGroup)
		return int32(i)
	}
	// ves_io_schema.DHGroup_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.DHGroup_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dh_group")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.DHGroup, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for dh_group")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.DHGroup)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.DHGroup, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated dh_group")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items dh_group")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["authentication_algos"]; exists {
		vOpts := append(opts, db.WithValidateField("authentication_algos"))
		if err := fv(ctx, m.GetAuthenticationAlgos(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dh_group"]; exists {
		vOpts := append(opts, db.WithValidateField("dh_group"))
		if err := fv(ctx, m.GetDhGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["encryption_algos"]; exists {
		vOpts := append(opts, db.WithValidateField("encryption_algos"))
		if err := fv(ctx, m.GetEncryptionAlgos(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ike_key_lifetime"]; exists {
		val := m.GetIkeKeyLifetime()
		vOpts := append(opts,
			db.WithValidateField("ike_key_lifetime"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIkeKeyLifetime().(type) {
	case *GetSpecType_UseDefaultKeylifetime:
		if fv, exists := v.FldValidators["ike_key_lifetime.use_default_keylifetime"]; exists {
			val := m.GetIkeKeyLifetime().(*GetSpecType_UseDefaultKeylifetime).UseDefaultKeylifetime
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("use_default_keylifetime"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IkeKeylifetimeMinutes:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"]; exists {
			val := m.GetIkeKeyLifetime().(*GetSpecType_IkeKeylifetimeMinutes).IkeKeylifetimeMinutes
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_minutes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IkeKeylifetimeHours:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"]; exists {
			val := m.GetIkeKeyLifetime().(*GetSpecType_IkeKeylifetimeHours).IkeKeylifetimeHours
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_hours"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ike_reauth_timeout"]; exists {
		val := m.GetIkeReauthTimeout()
		vOpts := append(opts,
			db.WithValidateField("ike_reauth_timeout"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIkeReauthTimeout().(type) {
	case *GetSpecType_ReauthTimeoutHours:
		if fv, exists := v.FldValidators["ike_reauth_timeout.reauth_timeout_hours"]; exists {
			val := m.GetIkeReauthTimeout().(*GetSpecType_ReauthTimeoutHours).ReauthTimeoutHours
			vOpts := append(opts,
				db.WithValidateField("ike_reauth_timeout"),
				db.WithValidateField("reauth_timeout_hours"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ReauthTimeoutDays:
		if fv, exists := v.FldValidators["ike_reauth_timeout.reauth_timeout_days"]; exists {
			val := m.GetIkeReauthTimeout().(*GetSpecType_ReauthTimeoutDays).ReauthTimeoutDays
			vOpts := append(opts,
				db.WithValidateField("ike_reauth_timeout"),
				db.WithValidateField("reauth_timeout_days"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ReauthDisabled:
		if fv, exists := v.FldValidators["ike_reauth_timeout.reauth_disabled"]; exists {
			val := m.GetIkeReauthTimeout().(*GetSpecType_ReauthDisabled).ReauthDisabled
			vOpts := append(opts,
				db.WithValidateField("ike_reauth_timeout"),
				db.WithValidateField("reauth_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["prf"]; exists {
		vOpts := append(opts, db.WithValidateField("prf"))
		if err := fv(ctx, m.GetPrf(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIkeKeyLifetime := v.IkeKeyLifetimeValidationRuleHandler
	rulesIkeKeyLifetime := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIkeKeyLifetime(rulesIkeKeyLifetime)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ike_key_lifetime: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_key_lifetime"] = vFn

	vrhIkeReauthTimeout := v.IkeReauthTimeoutValidationRuleHandler
	rulesIkeReauthTimeout := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIkeReauthTimeout(rulesIkeReauthTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ike_reauth_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_reauth_timeout"] = vFn

	vrhEncryptionAlgos := v.EncryptionAlgosValidationRuleHandler
	rulesEncryptionAlgos := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhEncryptionAlgos(rulesEncryptionAlgos)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.encryption_algos: %s", err)
		panic(errMsg)
	}
	v.FldValidators["encryption_algos"] = vFn

	vrhAuthenticationAlgos := v.AuthenticationAlgosValidationRuleHandler
	rulesAuthenticationAlgos := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAuthenticationAlgos(rulesAuthenticationAlgos)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.authentication_algos: %s", err)
		panic(errMsg)
	}
	v.FldValidators["authentication_algos"] = vFn

	vrhPrf := v.PrfValidationRuleHandler
	rulesPrf := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPrf(rulesPrf)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.prf: %s", err)
		panic(errMsg)
	}
	v.FldValidators["prf"] = vFn

	vrhDhGroup := v.DhGroupValidationRuleHandler
	rulesDhGroup := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDhGroup(rulesDhGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.dh_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dh_group"] = vFn

	v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"] = InputMinutesValidator().Validate
	v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"] = InputHoursValidator().Validate

	v.FldValidators["ike_reauth_timeout.reauth_timeout_hours"] = InputHoursValidator().Validate
	v.FldValidators["ike_reauth_timeout.reauth_timeout_days"] = InputDaysValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetViewInternalDRefInfo()

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) IkeKeyLifetimeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ike_key_lifetime")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) IkeReauthTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ike_reauth_timeout")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) EncryptionAlgosValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.EncryptionAlgorithm)
		return int32(i)
	}
	// ves_io_schema.EncryptionAlgorithm_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.EncryptionAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for encryption_algos")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.EncryptionAlgorithm, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for encryption_algos")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.EncryptionAlgorithm)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.EncryptionAlgorithm, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated encryption_algos")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items encryption_algos")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) AuthenticationAlgosValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.AuthenticationAlgorithm)
		return int32(i)
	}
	// ves_io_schema.AuthenticationAlgorithm_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.AuthenticationAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for authentication_algos")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.AuthenticationAlgorithm, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for authentication_algos")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.AuthenticationAlgorithm)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.AuthenticationAlgorithm, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated authentication_algos")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items authentication_algos")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) PrfValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.PseudoRandomFunction)
		return int32(i)
	}
	// ves_io_schema.PseudoRandomFunction_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.PseudoRandomFunction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for prf")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.PseudoRandomFunction, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for prf")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.PseudoRandomFunction)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.PseudoRandomFunction, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated prf")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items prf")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DhGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.DHGroup)
		return int32(i)
	}
	// ves_io_schema.DHGroup_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.DHGroup_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dh_group")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.DHGroup, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for dh_group")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.DHGroup)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.DHGroup, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated dh_group")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items dh_group")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["authentication_algos"]; exists {
		vOpts := append(opts, db.WithValidateField("authentication_algos"))
		if err := fv(ctx, m.GetAuthenticationAlgos(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dh_group"]; exists {
		vOpts := append(opts, db.WithValidateField("dh_group"))
		if err := fv(ctx, m.GetDhGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["encryption_algos"]; exists {
		vOpts := append(opts, db.WithValidateField("encryption_algos"))
		if err := fv(ctx, m.GetEncryptionAlgos(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ike_key_lifetime"]; exists {
		val := m.GetIkeKeyLifetime()
		vOpts := append(opts,
			db.WithValidateField("ike_key_lifetime"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIkeKeyLifetime().(type) {
	case *GlobalSpecType_UseDefaultKeylifetime:
		if fv, exists := v.FldValidators["ike_key_lifetime.use_default_keylifetime"]; exists {
			val := m.GetIkeKeyLifetime().(*GlobalSpecType_UseDefaultKeylifetime).UseDefaultKeylifetime
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("use_default_keylifetime"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IkeKeylifetimeMinutes:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"]; exists {
			val := m.GetIkeKeyLifetime().(*GlobalSpecType_IkeKeylifetimeMinutes).IkeKeylifetimeMinutes
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_minutes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IkeKeylifetimeHours:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"]; exists {
			val := m.GetIkeKeyLifetime().(*GlobalSpecType_IkeKeylifetimeHours).IkeKeylifetimeHours
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_hours"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ike_reauth_timeout"]; exists {
		val := m.GetIkeReauthTimeout()
		vOpts := append(opts,
			db.WithValidateField("ike_reauth_timeout"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIkeReauthTimeout().(type) {
	case *GlobalSpecType_ReauthTimeoutHours:
		if fv, exists := v.FldValidators["ike_reauth_timeout.reauth_timeout_hours"]; exists {
			val := m.GetIkeReauthTimeout().(*GlobalSpecType_ReauthTimeoutHours).ReauthTimeoutHours
			vOpts := append(opts,
				db.WithValidateField("ike_reauth_timeout"),
				db.WithValidateField("reauth_timeout_hours"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ReauthTimeoutDays:
		if fv, exists := v.FldValidators["ike_reauth_timeout.reauth_timeout_days"]; exists {
			val := m.GetIkeReauthTimeout().(*GlobalSpecType_ReauthTimeoutDays).ReauthTimeoutDays
			vOpts := append(opts,
				db.WithValidateField("ike_reauth_timeout"),
				db.WithValidateField("reauth_timeout_days"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ReauthDisabled:
		if fv, exists := v.FldValidators["ike_reauth_timeout.reauth_disabled"]; exists {
			val := m.GetIkeReauthTimeout().(*GlobalSpecType_ReauthDisabled).ReauthDisabled
			vOpts := append(opts,
				db.WithValidateField("ike_reauth_timeout"),
				db.WithValidateField("reauth_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["prf"]; exists {
		vOpts := append(opts, db.WithValidateField("prf"))
		if err := fv(ctx, m.GetPrf(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIkeKeyLifetime := v.IkeKeyLifetimeValidationRuleHandler
	rulesIkeKeyLifetime := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIkeKeyLifetime(rulesIkeKeyLifetime)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ike_key_lifetime: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_key_lifetime"] = vFn

	vrhIkeReauthTimeout := v.IkeReauthTimeoutValidationRuleHandler
	rulesIkeReauthTimeout := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIkeReauthTimeout(rulesIkeReauthTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ike_reauth_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_reauth_timeout"] = vFn

	vrhEncryptionAlgos := v.EncryptionAlgosValidationRuleHandler
	rulesEncryptionAlgos := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhEncryptionAlgos(rulesEncryptionAlgos)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.encryption_algos: %s", err)
		panic(errMsg)
	}
	v.FldValidators["encryption_algos"] = vFn

	vrhAuthenticationAlgos := v.AuthenticationAlgosValidationRuleHandler
	rulesAuthenticationAlgos := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAuthenticationAlgos(rulesAuthenticationAlgos)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.authentication_algos: %s", err)
		panic(errMsg)
	}
	v.FldValidators["authentication_algos"] = vFn

	vrhPrf := v.PrfValidationRuleHandler
	rulesPrf := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPrf(rulesPrf)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.prf: %s", err)
		panic(errMsg)
	}
	v.FldValidators["prf"] = vFn

	vrhDhGroup := v.DhGroupValidationRuleHandler
	rulesDhGroup := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDhGroup(rulesDhGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.dh_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dh_group"] = vFn

	v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"] = InputMinutesValidator().Validate
	v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"] = InputHoursValidator().Validate

	v.FldValidators["ike_reauth_timeout.reauth_timeout_hours"] = InputHoursValidator().Validate
	v.FldValidators["ike_reauth_timeout.reauth_timeout_days"] = InputDaysValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *InputDays) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *InputDays) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *InputDays) DeepCopy() *InputDays {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &InputDays{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *InputDays) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *InputDays) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return InputDaysValidator().Validate(ctx, m, opts...)
}

type ValidateInputDays struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateInputDays) DurationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for duration")
	}

	return validatorFn, nil
}

func (v *ValidateInputDays) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*InputDays)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *InputDays got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["duration"]; exists {

		vOpts := append(opts, db.WithValidateField("duration"))
		if err := fv(ctx, m.GetDuration(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultInputDaysValidator = func() *ValidateInputDays {
	v := &ValidateInputDays{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDuration := v.DurationValidationRuleHandler
	rulesDuration := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1",
		"ves.io.schema.rules.uint32.lte": "30",
	}
	vFn, err = vrhDuration(rulesDuration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InputDays.duration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["duration"] = vFn

	return v
}()

func InputDaysValidator() db.Validator {
	return DefaultInputDaysValidator
}

// augmented methods on protoc/std generated struct

func (m *InputHours) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *InputHours) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *InputHours) DeepCopy() *InputHours {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &InputHours{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *InputHours) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *InputHours) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return InputHoursValidator().Validate(ctx, m, opts...)
}

type ValidateInputHours struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateInputHours) DurationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for duration")
	}

	return validatorFn, nil
}

func (v *ValidateInputHours) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*InputHours)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *InputHours got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["duration"]; exists {

		vOpts := append(opts, db.WithValidateField("duration"))
		if err := fv(ctx, m.GetDuration(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultInputHoursValidator = func() *ValidateInputHours {
	v := &ValidateInputHours{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDuration := v.DurationValidationRuleHandler
	rulesDuration := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1",
		"ves.io.schema.rules.uint32.lte": "5",
	}
	vFn, err = vrhDuration(rulesDuration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InputHours.duration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["duration"] = vFn

	return v
}()

func InputHoursValidator() db.Validator {
	return DefaultInputHoursValidator
}

// augmented methods on protoc/std generated struct

func (m *InputMinutes) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *InputMinutes) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *InputMinutes) DeepCopy() *InputMinutes {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &InputMinutes{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *InputMinutes) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *InputMinutes) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return InputMinutesValidator().Validate(ctx, m, opts...)
}

type ValidateInputMinutes struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateInputMinutes) DurationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for duration")
	}

	return validatorFn, nil
}

func (v *ValidateInputMinutes) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*InputMinutes)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *InputMinutes got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["duration"]; exists {

		vOpts := append(opts, db.WithValidateField("duration"))
		if err := fv(ctx, m.GetDuration(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultInputMinutesValidator = func() *ValidateInputMinutes {
	v := &ValidateInputMinutes{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDuration := v.DurationValidationRuleHandler
	rulesDuration := map[string]string{
		"ves.io.schema.rules.uint32.gte": "10",
		"ves.io.schema.rules.uint32.lte": "300",
	}
	vFn, err = vrhDuration(rulesDuration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InputMinutes.duration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["duration"] = vFn

	return v
}()

func InputMinutesValidator() db.Validator {
	return DefaultInputMinutesValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) IkeKeyLifetimeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ike_key_lifetime")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) IkeReauthTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ike_reauth_timeout")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) EncryptionAlgosValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.EncryptionAlgorithm)
		return int32(i)
	}
	// ves_io_schema.EncryptionAlgorithm_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.EncryptionAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for encryption_algos")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.EncryptionAlgorithm, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for encryption_algos")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.EncryptionAlgorithm)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.EncryptionAlgorithm, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated encryption_algos")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items encryption_algos")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) AuthenticationAlgosValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.AuthenticationAlgorithm)
		return int32(i)
	}
	// ves_io_schema.AuthenticationAlgorithm_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.AuthenticationAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for authentication_algos")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.AuthenticationAlgorithm, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for authentication_algos")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.AuthenticationAlgorithm)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.AuthenticationAlgorithm, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated authentication_algos")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items authentication_algos")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) PrfValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.PseudoRandomFunction)
		return int32(i)
	}
	// ves_io_schema.PseudoRandomFunction_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.PseudoRandomFunction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for prf")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.PseudoRandomFunction, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for prf")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.PseudoRandomFunction)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.PseudoRandomFunction, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated prf")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items prf")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DhGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.DHGroup)
		return int32(i)
	}
	// ves_io_schema.DHGroup_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.DHGroup_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dh_group")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.DHGroup, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for dh_group")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.DHGroup)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.DHGroup, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated dh_group")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items dh_group")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["authentication_algos"]; exists {
		vOpts := append(opts, db.WithValidateField("authentication_algos"))
		if err := fv(ctx, m.GetAuthenticationAlgos(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dh_group"]; exists {
		vOpts := append(opts, db.WithValidateField("dh_group"))
		if err := fv(ctx, m.GetDhGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["encryption_algos"]; exists {
		vOpts := append(opts, db.WithValidateField("encryption_algos"))
		if err := fv(ctx, m.GetEncryptionAlgos(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ike_key_lifetime"]; exists {
		val := m.GetIkeKeyLifetime()
		vOpts := append(opts,
			db.WithValidateField("ike_key_lifetime"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIkeKeyLifetime().(type) {
	case *ReplaceSpecType_UseDefaultKeylifetime:
		if fv, exists := v.FldValidators["ike_key_lifetime.use_default_keylifetime"]; exists {
			val := m.GetIkeKeyLifetime().(*ReplaceSpecType_UseDefaultKeylifetime).UseDefaultKeylifetime
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("use_default_keylifetime"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IkeKeylifetimeMinutes:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"]; exists {
			val := m.GetIkeKeyLifetime().(*ReplaceSpecType_IkeKeylifetimeMinutes).IkeKeylifetimeMinutes
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_minutes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IkeKeylifetimeHours:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"]; exists {
			val := m.GetIkeKeyLifetime().(*ReplaceSpecType_IkeKeylifetimeHours).IkeKeylifetimeHours
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_hours"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ike_reauth_timeout"]; exists {
		val := m.GetIkeReauthTimeout()
		vOpts := append(opts,
			db.WithValidateField("ike_reauth_timeout"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIkeReauthTimeout().(type) {
	case *ReplaceSpecType_ReauthTimeoutHours:
		if fv, exists := v.FldValidators["ike_reauth_timeout.reauth_timeout_hours"]; exists {
			val := m.GetIkeReauthTimeout().(*ReplaceSpecType_ReauthTimeoutHours).ReauthTimeoutHours
			vOpts := append(opts,
				db.WithValidateField("ike_reauth_timeout"),
				db.WithValidateField("reauth_timeout_hours"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ReauthTimeoutDays:
		if fv, exists := v.FldValidators["ike_reauth_timeout.reauth_timeout_days"]; exists {
			val := m.GetIkeReauthTimeout().(*ReplaceSpecType_ReauthTimeoutDays).ReauthTimeoutDays
			vOpts := append(opts,
				db.WithValidateField("ike_reauth_timeout"),
				db.WithValidateField("reauth_timeout_days"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ReauthDisabled:
		if fv, exists := v.FldValidators["ike_reauth_timeout.reauth_disabled"]; exists {
			val := m.GetIkeReauthTimeout().(*ReplaceSpecType_ReauthDisabled).ReauthDisabled
			vOpts := append(opts,
				db.WithValidateField("ike_reauth_timeout"),
				db.WithValidateField("reauth_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["prf"]; exists {
		vOpts := append(opts, db.WithValidateField("prf"))
		if err := fv(ctx, m.GetPrf(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIkeKeyLifetime := v.IkeKeyLifetimeValidationRuleHandler
	rulesIkeKeyLifetime := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIkeKeyLifetime(rulesIkeKeyLifetime)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.ike_key_lifetime: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_key_lifetime"] = vFn

	vrhIkeReauthTimeout := v.IkeReauthTimeoutValidationRuleHandler
	rulesIkeReauthTimeout := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIkeReauthTimeout(rulesIkeReauthTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.ike_reauth_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_reauth_timeout"] = vFn

	vrhEncryptionAlgos := v.EncryptionAlgosValidationRuleHandler
	rulesEncryptionAlgos := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhEncryptionAlgos(rulesEncryptionAlgos)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.encryption_algos: %s", err)
		panic(errMsg)
	}
	v.FldValidators["encryption_algos"] = vFn

	vrhAuthenticationAlgos := v.AuthenticationAlgosValidationRuleHandler
	rulesAuthenticationAlgos := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAuthenticationAlgos(rulesAuthenticationAlgos)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.authentication_algos: %s", err)
		panic(errMsg)
	}
	v.FldValidators["authentication_algos"] = vFn

	vrhPrf := v.PrfValidationRuleHandler
	rulesPrf := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPrf(rulesPrf)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.prf: %s", err)
		panic(errMsg)
	}
	v.FldValidators["prf"] = vFn

	vrhDhGroup := v.DhGroupValidationRuleHandler
	rulesDhGroup := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDhGroup(rulesDhGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.dh_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dh_group"] = vFn

	v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"] = InputMinutesValidator().Validate
	v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"] = InputHoursValidator().Validate

	v.FldValidators["ike_reauth_timeout.reauth_timeout_hours"] = InputHoursValidator().Validate
	v.FldValidators["ike_reauth_timeout.reauth_timeout_days"] = InputDaysValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetIkeKeyLifetimeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IkeKeyLifetime.(type) {
	case nil:
		o.IkeKeyLifetime = nil

	case *CreateSpecType_IkeKeylifetimeHours:
		o.IkeKeyLifetime = &GlobalSpecType_IkeKeylifetimeHours{IkeKeylifetimeHours: of.IkeKeylifetimeHours}

	case *CreateSpecType_IkeKeylifetimeMinutes:
		o.IkeKeyLifetime = &GlobalSpecType_IkeKeylifetimeMinutes{IkeKeylifetimeMinutes: of.IkeKeylifetimeMinutes}

	case *CreateSpecType_UseDefaultKeylifetime:
		o.IkeKeyLifetime = &GlobalSpecType_UseDefaultKeylifetime{UseDefaultKeylifetime: of.UseDefaultKeylifetime}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetIkeKeyLifetimeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IkeKeyLifetime.(type) {
	case nil:
		r.IkeKeyLifetime = nil

	case *GlobalSpecType_IkeKeylifetimeHours:
		r.IkeKeyLifetime = &CreateSpecType_IkeKeylifetimeHours{IkeKeylifetimeHours: of.IkeKeylifetimeHours}

	case *GlobalSpecType_IkeKeylifetimeMinutes:
		r.IkeKeyLifetime = &CreateSpecType_IkeKeylifetimeMinutes{IkeKeylifetimeMinutes: of.IkeKeylifetimeMinutes}

	case *GlobalSpecType_UseDefaultKeylifetime:
		r.IkeKeyLifetime = &CreateSpecType_UseDefaultKeylifetime{UseDefaultKeylifetime: of.UseDefaultKeylifetime}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetIkeReauthTimeoutToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IkeReauthTimeout.(type) {
	case nil:
		o.IkeReauthTimeout = nil

	case *CreateSpecType_ReauthDisabled:
		o.IkeReauthTimeout = &GlobalSpecType_ReauthDisabled{ReauthDisabled: of.ReauthDisabled}

	case *CreateSpecType_ReauthTimeoutDays:
		o.IkeReauthTimeout = &GlobalSpecType_ReauthTimeoutDays{ReauthTimeoutDays: of.ReauthTimeoutDays}

	case *CreateSpecType_ReauthTimeoutHours:
		o.IkeReauthTimeout = &GlobalSpecType_ReauthTimeoutHours{ReauthTimeoutHours: of.ReauthTimeoutHours}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetIkeReauthTimeoutFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IkeReauthTimeout.(type) {
	case nil:
		r.IkeReauthTimeout = nil

	case *GlobalSpecType_ReauthDisabled:
		r.IkeReauthTimeout = &CreateSpecType_ReauthDisabled{ReauthDisabled: of.ReauthDisabled}

	case *GlobalSpecType_ReauthTimeoutDays:
		r.IkeReauthTimeout = &CreateSpecType_ReauthTimeoutDays{ReauthTimeoutDays: of.ReauthTimeoutDays}

	case *GlobalSpecType_ReauthTimeoutHours:
		r.IkeReauthTimeout = &CreateSpecType_ReauthTimeoutHours{ReauthTimeoutHours: of.ReauthTimeoutHours}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AuthenticationAlgos = f.GetAuthenticationAlgos()
	m.DhGroup = f.GetDhGroup()
	m.EncryptionAlgos = f.GetEncryptionAlgos()
	m.GetIkeKeyLifetimeFromGlobalSpecType(f)
	m.GetIkeReauthTimeoutFromGlobalSpecType(f)
	m.Prf = f.GetPrf()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AuthenticationAlgos = m1.AuthenticationAlgos
	f.DhGroup = m1.DhGroup
	f.EncryptionAlgos = m1.EncryptionAlgos
	m1.SetIkeKeyLifetimeToGlobalSpecType(f)
	m1.SetIkeReauthTimeoutToGlobalSpecType(f)
	f.Prf = m1.Prf
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetIkeKeyLifetimeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IkeKeyLifetime.(type) {
	case nil:
		o.IkeKeyLifetime = nil

	case *GetSpecType_IkeKeylifetimeHours:
		o.IkeKeyLifetime = &GlobalSpecType_IkeKeylifetimeHours{IkeKeylifetimeHours: of.IkeKeylifetimeHours}

	case *GetSpecType_IkeKeylifetimeMinutes:
		o.IkeKeyLifetime = &GlobalSpecType_IkeKeylifetimeMinutes{IkeKeylifetimeMinutes: of.IkeKeylifetimeMinutes}

	case *GetSpecType_UseDefaultKeylifetime:
		o.IkeKeyLifetime = &GlobalSpecType_UseDefaultKeylifetime{UseDefaultKeylifetime: of.UseDefaultKeylifetime}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetIkeKeyLifetimeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IkeKeyLifetime.(type) {
	case nil:
		r.IkeKeyLifetime = nil

	case *GlobalSpecType_IkeKeylifetimeHours:
		r.IkeKeyLifetime = &GetSpecType_IkeKeylifetimeHours{IkeKeylifetimeHours: of.IkeKeylifetimeHours}

	case *GlobalSpecType_IkeKeylifetimeMinutes:
		r.IkeKeyLifetime = &GetSpecType_IkeKeylifetimeMinutes{IkeKeylifetimeMinutes: of.IkeKeylifetimeMinutes}

	case *GlobalSpecType_UseDefaultKeylifetime:
		r.IkeKeyLifetime = &GetSpecType_UseDefaultKeylifetime{UseDefaultKeylifetime: of.UseDefaultKeylifetime}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetIkeReauthTimeoutToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IkeReauthTimeout.(type) {
	case nil:
		o.IkeReauthTimeout = nil

	case *GetSpecType_ReauthDisabled:
		o.IkeReauthTimeout = &GlobalSpecType_ReauthDisabled{ReauthDisabled: of.ReauthDisabled}

	case *GetSpecType_ReauthTimeoutDays:
		o.IkeReauthTimeout = &GlobalSpecType_ReauthTimeoutDays{ReauthTimeoutDays: of.ReauthTimeoutDays}

	case *GetSpecType_ReauthTimeoutHours:
		o.IkeReauthTimeout = &GlobalSpecType_ReauthTimeoutHours{ReauthTimeoutHours: of.ReauthTimeoutHours}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetIkeReauthTimeoutFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IkeReauthTimeout.(type) {
	case nil:
		r.IkeReauthTimeout = nil

	case *GlobalSpecType_ReauthDisabled:
		r.IkeReauthTimeout = &GetSpecType_ReauthDisabled{ReauthDisabled: of.ReauthDisabled}

	case *GlobalSpecType_ReauthTimeoutDays:
		r.IkeReauthTimeout = &GetSpecType_ReauthTimeoutDays{ReauthTimeoutDays: of.ReauthTimeoutDays}

	case *GlobalSpecType_ReauthTimeoutHours:
		r.IkeReauthTimeout = &GetSpecType_ReauthTimeoutHours{ReauthTimeoutHours: of.ReauthTimeoutHours}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AuthenticationAlgos = f.GetAuthenticationAlgos()
	m.DhGroup = f.GetDhGroup()
	m.EncryptionAlgos = f.GetEncryptionAlgos()
	m.GetIkeKeyLifetimeFromGlobalSpecType(f)
	m.GetIkeReauthTimeoutFromGlobalSpecType(f)
	m.Prf = f.GetPrf()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AuthenticationAlgos = m1.AuthenticationAlgos
	f.DhGroup = m1.DhGroup
	f.EncryptionAlgos = m1.EncryptionAlgos
	m1.SetIkeKeyLifetimeToGlobalSpecType(f)
	m1.SetIkeReauthTimeoutToGlobalSpecType(f)
	f.Prf = m1.Prf
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetIkeKeyLifetimeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IkeKeyLifetime.(type) {
	case nil:
		o.IkeKeyLifetime = nil

	case *ReplaceSpecType_IkeKeylifetimeHours:
		o.IkeKeyLifetime = &GlobalSpecType_IkeKeylifetimeHours{IkeKeylifetimeHours: of.IkeKeylifetimeHours}

	case *ReplaceSpecType_IkeKeylifetimeMinutes:
		o.IkeKeyLifetime = &GlobalSpecType_IkeKeylifetimeMinutes{IkeKeylifetimeMinutes: of.IkeKeylifetimeMinutes}

	case *ReplaceSpecType_UseDefaultKeylifetime:
		o.IkeKeyLifetime = &GlobalSpecType_UseDefaultKeylifetime{UseDefaultKeylifetime: of.UseDefaultKeylifetime}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetIkeKeyLifetimeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IkeKeyLifetime.(type) {
	case nil:
		r.IkeKeyLifetime = nil

	case *GlobalSpecType_IkeKeylifetimeHours:
		r.IkeKeyLifetime = &ReplaceSpecType_IkeKeylifetimeHours{IkeKeylifetimeHours: of.IkeKeylifetimeHours}

	case *GlobalSpecType_IkeKeylifetimeMinutes:
		r.IkeKeyLifetime = &ReplaceSpecType_IkeKeylifetimeMinutes{IkeKeylifetimeMinutes: of.IkeKeylifetimeMinutes}

	case *GlobalSpecType_UseDefaultKeylifetime:
		r.IkeKeyLifetime = &ReplaceSpecType_UseDefaultKeylifetime{UseDefaultKeylifetime: of.UseDefaultKeylifetime}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetIkeReauthTimeoutToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IkeReauthTimeout.(type) {
	case nil:
		o.IkeReauthTimeout = nil

	case *ReplaceSpecType_ReauthDisabled:
		o.IkeReauthTimeout = &GlobalSpecType_ReauthDisabled{ReauthDisabled: of.ReauthDisabled}

	case *ReplaceSpecType_ReauthTimeoutDays:
		o.IkeReauthTimeout = &GlobalSpecType_ReauthTimeoutDays{ReauthTimeoutDays: of.ReauthTimeoutDays}

	case *ReplaceSpecType_ReauthTimeoutHours:
		o.IkeReauthTimeout = &GlobalSpecType_ReauthTimeoutHours{ReauthTimeoutHours: of.ReauthTimeoutHours}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetIkeReauthTimeoutFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IkeReauthTimeout.(type) {
	case nil:
		r.IkeReauthTimeout = nil

	case *GlobalSpecType_ReauthDisabled:
		r.IkeReauthTimeout = &ReplaceSpecType_ReauthDisabled{ReauthDisabled: of.ReauthDisabled}

	case *GlobalSpecType_ReauthTimeoutDays:
		r.IkeReauthTimeout = &ReplaceSpecType_ReauthTimeoutDays{ReauthTimeoutDays: of.ReauthTimeoutDays}

	case *GlobalSpecType_ReauthTimeoutHours:
		r.IkeReauthTimeout = &ReplaceSpecType_ReauthTimeoutHours{ReauthTimeoutHours: of.ReauthTimeoutHours}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AuthenticationAlgos = f.GetAuthenticationAlgos()
	m.DhGroup = f.GetDhGroup()
	m.EncryptionAlgos = f.GetEncryptionAlgos()
	m.GetIkeKeyLifetimeFromGlobalSpecType(f)
	m.GetIkeReauthTimeoutFromGlobalSpecType(f)
	m.Prf = f.GetPrf()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AuthenticationAlgos = m1.AuthenticationAlgos
	f.DhGroup = m1.DhGroup
	f.EncryptionAlgos = m1.EncryptionAlgos
	m1.SetIkeKeyLifetimeToGlobalSpecType(f)
	m1.SetIkeReauthTimeoutToGlobalSpecType(f)
	f.Prf = m1.Prf
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

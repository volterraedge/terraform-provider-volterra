// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package external_connector

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ConnectionTypeDirect) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ConnectionTypeDirect) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ConnectionTypeDirect) DeepCopy() *ConnectionTypeDirect {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ConnectionTypeDirect{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ConnectionTypeDirect) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ConnectionTypeDirect) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ConnectionTypeDirectValidator().Validate(ctx, m, opts...)
}

type ValidateConnectionTypeDirect struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateConnectionTypeDirect) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ConnectionTypeDirect)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ConnectionTypeDirect got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultConnectionTypeDirectValidator = func() *ValidateConnectionTypeDirect {
	v := &ValidateConnectionTypeDirect{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ConnectionTypeDirectValidator() db.Validator {
	return DefaultConnectionTypeDirectValidator
}

// augmented methods on protoc/std generated struct

func (m *ConnectionTypeGRE) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ConnectionTypeGRE) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ConnectionTypeGRE) DeepCopy() *ConnectionTypeGRE {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ConnectionTypeGRE{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ConnectionTypeGRE) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ConnectionTypeGRE) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ConnectionTypeGREValidator().Validate(ctx, m, opts...)
}

func (m *ConnectionTypeGRE) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetGreParametersDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ConnectionTypeGRE) GetGreParametersDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGreParameters() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGreParameters().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGreParameters().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "gre_parameters." + dri.DRField
	}
	return drInfos, err

}

type ValidateConnectionTypeGRE struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateConnectionTypeGRE) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ConnectionTypeGRE)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ConnectionTypeGRE got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["gre_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("gre_parameters"))
		if err := fv(ctx, m.GetGreParameters(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultConnectionTypeGREValidator = func() *ValidateConnectionTypeGRE {
	v := &ValidateConnectionTypeGRE{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["gre_parameters"] = GRETunnelParametersValidator().Validate

	return v
}()

func ConnectionTypeGREValidator() db.Validator {
	return DefaultConnectionTypeGREValidator
}

// augmented methods on protoc/std generated struct

func (m *ConnectionTypeIPSec) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ConnectionTypeIPSec) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ConnectionTypeIPSec) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIpsecTunnelParameters().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ConnectionTypeIPSec.ipsec_tunnel_parameters")
	}

	return nil
}

func (m *ConnectionTypeIPSec) DeepCopy() *ConnectionTypeIPSec {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ConnectionTypeIPSec{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ConnectionTypeIPSec) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ConnectionTypeIPSec) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ConnectionTypeIPSecValidator().Validate(ctx, m, opts...)
}

func (m *ConnectionTypeIPSec) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetIkeParametersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIkeParametersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIpsecTunnelParametersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIpsecTunnelParametersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ConnectionTypeIPSec) GetIkeParametersDRefInfo() ([]db.DRefInfo, error) {
	if m.GetIkeParameters() == nil {
		return nil, nil
	}

	drInfos, err := m.GetIkeParameters().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetIkeParameters().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "ike_parameters." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ConnectionTypeIPSec) GetIpsecTunnelParametersDRefInfo() ([]db.DRefInfo, error) {
	if m.GetIpsecTunnelParameters() == nil {
		return nil, nil
	}

	drInfos, err := m.GetIpsecTunnelParameters().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetIpsecTunnelParameters().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "ipsec_tunnel_parameters." + dri.DRField
	}
	return drInfos, err

}

type ValidateConnectionTypeIPSec struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateConnectionTypeIPSec) IkeParametersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for ike_parameters")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := IkeParametersValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateConnectionTypeIPSec) IpsecTunnelParametersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for ipsec_tunnel_parameters")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := TunnelParametersValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateConnectionTypeIPSec) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ConnectionTypeIPSec)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ConnectionTypeIPSec got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ike_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("ike_parameters"))
		if err := fv(ctx, m.GetIkeParameters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ipsec_tunnel_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("ipsec_tunnel_parameters"))
		if err := fv(ctx, m.GetIpsecTunnelParameters(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultConnectionTypeIPSecValidator = func() *ValidateConnectionTypeIPSec {
	v := &ValidateConnectionTypeIPSec{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIkeParameters := v.IkeParametersValidationRuleHandler
	rulesIkeParameters := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhIkeParameters(rulesIkeParameters)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ConnectionTypeIPSec.ike_parameters: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_parameters"] = vFn

	vrhIpsecTunnelParameters := v.IpsecTunnelParametersValidationRuleHandler
	rulesIpsecTunnelParameters := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhIpsecTunnelParameters(rulesIpsecTunnelParameters)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ConnectionTypeIPSec.ipsec_tunnel_parameters: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ipsec_tunnel_parameters"] = vFn

	return v
}()

func ConnectionTypeIPSecValidator() db.Validator {
	return DefaultConnectionTypeIPSecValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIpsec().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.ipsec")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCeSiteReferenceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCeSiteReferenceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetConnectionTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetConnectionTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *CreateSpecType) GetCeSiteReferenceDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCeSiteReference()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("site.Object")
	dri := db.DRefInfo{
		RefdType:   "site.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "ce_site_reference",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCeSiteReferenceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetCeSiteReferenceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site")
	}

	vref := m.GetCeSiteReference()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "site.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetConnectionTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetConnectionType() == nil {
		return nil, nil
	}
	switch m.GetConnectionType().(type) {
	case *CreateSpecType_Ipsec:

		drInfos, err := m.GetIpsec().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIpsec().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ipsec." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_Gre:

		drInfos, err := m.GetGre().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGre().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "gre." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_DirectConnection:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ConnectionTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connection_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) CeSiteReferenceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for ce_site_reference")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ce_site_reference"]; exists {

		vOpts := append(opts, db.WithValidateField("ce_site_reference"))
		if err := fv(ctx, m.GetCeSiteReference(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_type"]; exists {
		val := m.GetConnectionType()
		vOpts := append(opts,
			db.WithValidateField("connection_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetConnectionType().(type) {
	case *CreateSpecType_Ipsec:
		if fv, exists := v.FldValidators["connection_type.ipsec"]; exists {
			val := m.GetConnectionType().(*CreateSpecType_Ipsec).Ipsec
			vOpts := append(opts,
				db.WithValidateField("connection_type"),
				db.WithValidateField("ipsec"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Gre:
		if fv, exists := v.FldValidators["connection_type.gre"]; exists {
			val := m.GetConnectionType().(*CreateSpecType_Gre).Gre
			vOpts := append(opts,
				db.WithValidateField("connection_type"),
				db.WithValidateField("gre"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DirectConnection:
		if fv, exists := v.FldValidators["connection_type.direct_connection"]; exists {
			val := m.GetConnectionType().(*CreateSpecType_DirectConnection).DirectConnection
			vOpts := append(opts,
				db.WithValidateField("connection_type"),
				db.WithValidateField("direct_connection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConnectionType := v.ConnectionTypeValidationRuleHandler
	rulesConnectionType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhConnectionType(rulesConnectionType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.connection_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connection_type"] = vFn

	vrhCeSiteReference := v.CeSiteReferenceValidationRuleHandler
	rulesCeSiteReference := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCeSiteReference(rulesCeSiteReference)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ce_site_reference: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ce_site_reference"] = vFn

	v.FldValidators["connection_type.ipsec"] = ConnectionTypeIPSecValidator().Validate
	v.FldValidators["connection_type.gre"] = ConnectionTypeGREValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DpdKeepAliveTimer) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DpdKeepAliveTimer) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DpdKeepAliveTimer) DeepCopy() *DpdKeepAliveTimer {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DpdKeepAliveTimer{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DpdKeepAliveTimer) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DpdKeepAliveTimer) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DpdKeepAliveTimerValidator().Validate(ctx, m, opts...)
}

type ValidateDpdKeepAliveTimer struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDpdKeepAliveTimer) TimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for timeout")
	}

	return validatorFn, nil
}

func (v *ValidateDpdKeepAliveTimer) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DpdKeepAliveTimer)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DpdKeepAliveTimer got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("timeout"))
		if err := fv(ctx, m.GetTimeout(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDpdKeepAliveTimerValidator = func() *ValidateDpdKeepAliveTimer {
	v := &ValidateDpdKeepAliveTimer{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTimeout := v.TimeoutValidationRuleHandler
	rulesTimeout := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1",
		"ves.io.schema.rules.uint32.lte": "5",
	}
	vFn, err = vrhTimeout(rulesTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DpdKeepAliveTimer.timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["timeout"] = vFn

	return v
}()

func DpdKeepAliveTimerValidator() db.Validator {
	return DefaultDpdKeepAliveTimerValidator
}

// augmented methods on protoc/std generated struct

func (m *GRETunnelParameters) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GRETunnelParameters) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GRETunnelParameters) DeepCopy() *GRETunnelParameters {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GRETunnelParameters{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GRETunnelParameters) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GRETunnelParameters) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GRETunnelParametersValidator().Validate(ctx, m, opts...)
}

func (m *GRETunnelParameters) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetTunnelSourceVnDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GRETunnelParameters) GetTunnelSourceVnDRefInfo() ([]db.DRefInfo, error) {
	if m.GetTunnelSourceVn() == nil {
		return nil, nil
	}
	switch m.GetTunnelSourceVn().(type) {
	case *GRETunnelParameters_SiteLocalNetwork:

		return nil, nil

	case *GRETunnelParameters_SiteLocalInsideNetwork:

		return nil, nil

	case *GRETunnelParameters_Segment:

		drInfos, err := m.GetSegment().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSegment().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "segment." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGRETunnelParameters struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGRETunnelParameters) TunnelEpsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for tunnel_eps")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*TunnelEndpoint, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := TunnelEndpointValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for tunnel_eps")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*TunnelEndpoint)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*TunnelEndpoint, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated tunnel_eps")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tunnel_eps")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGRETunnelParameters) TunnelMtuValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tunnel_mtu")
	}

	return validatorFn, nil
}

func (v *ValidateGRETunnelParameters) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GRETunnelParameters)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GRETunnelParameters got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["peer_ip_address"]; exists {

		vOpts := append(opts, db.WithValidateField("peer_ip_address"))
		if err := fv(ctx, m.GetPeerIpAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tunnel_eps"]; exists {
		vOpts := append(opts, db.WithValidateField("tunnel_eps"))
		if err := fv(ctx, m.GetTunnelEps(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tunnel_mtu"]; exists {

		vOpts := append(opts, db.WithValidateField("tunnel_mtu"))
		if err := fv(ctx, m.GetTunnelMtu(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetTunnelSourceVn().(type) {
	case *GRETunnelParameters_SiteLocalNetwork:
		if fv, exists := v.FldValidators["tunnel_source_vn.site_local_network"]; exists {
			val := m.GetTunnelSourceVn().(*GRETunnelParameters_SiteLocalNetwork).SiteLocalNetwork
			vOpts := append(opts,
				db.WithValidateField("tunnel_source_vn"),
				db.WithValidateField("site_local_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GRETunnelParameters_SiteLocalInsideNetwork:
		if fv, exists := v.FldValidators["tunnel_source_vn.site_local_inside_network"]; exists {
			val := m.GetTunnelSourceVn().(*GRETunnelParameters_SiteLocalInsideNetwork).SiteLocalInsideNetwork
			vOpts := append(opts,
				db.WithValidateField("tunnel_source_vn"),
				db.WithValidateField("site_local_inside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GRETunnelParameters_Segment:
		if fv, exists := v.FldValidators["tunnel_source_vn.segment"]; exists {
			val := m.GetTunnelSourceVn().(*GRETunnelParameters_Segment).Segment
			vOpts := append(opts,
				db.WithValidateField("tunnel_source_vn"),
				db.WithValidateField("segment"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGRETunnelParametersValidator = func() *ValidateGRETunnelParameters {
	v := &ValidateGRETunnelParameters{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTunnelEps := v.TunnelEpsValidationRuleHandler
	rulesTunnelEps := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhTunnelEps(rulesTunnelEps)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GRETunnelParameters.tunnel_eps: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tunnel_eps"] = vFn

	vrhTunnelMtu := v.TunnelMtuValidationRuleHandler
	rulesTunnelMtu := map[string]string{
		"ves.io.schema.rules.uint32.gte": "512",
		"ves.io.schema.rules.uint32.lte": "1370",
	}
	vFn, err = vrhTunnelMtu(rulesTunnelMtu)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GRETunnelParameters.tunnel_mtu: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tunnel_mtu"] = vFn

	v.FldValidators["tunnel_source_vn.segment"] = ves_io_schema.SegmentRefTypeValidator().Validate

	v.FldValidators["peer_ip_address"] = ves_io_schema.Ipv4AddressTypeValidator().Validate

	return v
}()

func GRETunnelParametersValidator() db.Validator {
	return DefaultGRETunnelParametersValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIpsec().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.ipsec")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCeSiteReferenceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCeSiteReferenceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetConnectionTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetConnectionTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GetSpecType) GetCeSiteReferenceDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCeSiteReference()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("site.Object")
	dri := db.DRefInfo{
		RefdType:   "site.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "ce_site_reference",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCeSiteReferenceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetCeSiteReferenceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site")
	}

	vref := m.GetCeSiteReference()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "site.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetConnectionTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetConnectionType() == nil {
		return nil, nil
	}
	switch m.GetConnectionType().(type) {
	case *GetSpecType_Ipsec:

		drInfos, err := m.GetIpsec().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIpsec().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ipsec." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_Gre:

		drInfos, err := m.GetGre().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGre().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "gre." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_DirectConnection:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ConnectionTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connection_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) CeSiteReferenceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for ce_site_reference")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ce_site_reference"]; exists {

		vOpts := append(opts, db.WithValidateField("ce_site_reference"))
		if err := fv(ctx, m.GetCeSiteReference(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_type"]; exists {
		val := m.GetConnectionType()
		vOpts := append(opts,
			db.WithValidateField("connection_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetConnectionType().(type) {
	case *GetSpecType_Ipsec:
		if fv, exists := v.FldValidators["connection_type.ipsec"]; exists {
			val := m.GetConnectionType().(*GetSpecType_Ipsec).Ipsec
			vOpts := append(opts,
				db.WithValidateField("connection_type"),
				db.WithValidateField("ipsec"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Gre:
		if fv, exists := v.FldValidators["connection_type.gre"]; exists {
			val := m.GetConnectionType().(*GetSpecType_Gre).Gre
			vOpts := append(opts,
				db.WithValidateField("connection_type"),
				db.WithValidateField("gre"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DirectConnection:
		if fv, exists := v.FldValidators["connection_type.direct_connection"]; exists {
			val := m.GetConnectionType().(*GetSpecType_DirectConnection).DirectConnection
			vOpts := append(opts,
				db.WithValidateField("connection_type"),
				db.WithValidateField("direct_connection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConnectionType := v.ConnectionTypeValidationRuleHandler
	rulesConnectionType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhConnectionType(rulesConnectionType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.connection_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connection_type"] = vFn

	vrhCeSiteReference := v.CeSiteReferenceValidationRuleHandler
	rulesCeSiteReference := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCeSiteReference(rulesCeSiteReference)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ce_site_reference: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ce_site_reference"] = vFn

	v.FldValidators["connection_type.ipsec"] = ConnectionTypeIPSecValidator().Validate
	v.FldValidators["connection_type.gre"] = ConnectionTypeGREValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIpsec().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.ipsec")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCeSiteReferenceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCeSiteReferenceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetConnectionTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetConnectionTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetCeSiteReferenceDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCeSiteReference()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("site.Object")
	dri := db.DRefInfo{
		RefdType:   "site.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "ce_site_reference",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCeSiteReferenceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetCeSiteReferenceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site")
	}

	vref := m.GetCeSiteReference()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "site.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetConnectionTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetConnectionType() == nil {
		return nil, nil
	}
	switch m.GetConnectionType().(type) {
	case *GlobalSpecType_Ipsec:

		drInfos, err := m.GetIpsec().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIpsec().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ipsec." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_Gre:

		drInfos, err := m.GetGre().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGre().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "gre." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_DirectConnection:

		return nil, nil

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ConnectionTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connection_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) CeSiteReferenceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for ce_site_reference")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ce_site_reference"]; exists {

		vOpts := append(opts, db.WithValidateField("ce_site_reference"))
		if err := fv(ctx, m.GetCeSiteReference(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_type"]; exists {
		val := m.GetConnectionType()
		vOpts := append(opts,
			db.WithValidateField("connection_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetConnectionType().(type) {
	case *GlobalSpecType_Ipsec:
		if fv, exists := v.FldValidators["connection_type.ipsec"]; exists {
			val := m.GetConnectionType().(*GlobalSpecType_Ipsec).Ipsec
			vOpts := append(opts,
				db.WithValidateField("connection_type"),
				db.WithValidateField("ipsec"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Gre:
		if fv, exists := v.FldValidators["connection_type.gre"]; exists {
			val := m.GetConnectionType().(*GlobalSpecType_Gre).Gre
			vOpts := append(opts,
				db.WithValidateField("connection_type"),
				db.WithValidateField("gre"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DirectConnection:
		if fv, exists := v.FldValidators["connection_type.direct_connection"]; exists {
			val := m.GetConnectionType().(*GlobalSpecType_DirectConnection).DirectConnection
			vOpts := append(opts,
				db.WithValidateField("connection_type"),
				db.WithValidateField("direct_connection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConnectionType := v.ConnectionTypeValidationRuleHandler
	rulesConnectionType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhConnectionType(rulesConnectionType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.connection_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connection_type"] = vFn

	vrhCeSiteReference := v.CeSiteReferenceValidationRuleHandler
	rulesCeSiteReference := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCeSiteReference(rulesCeSiteReference)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ce_site_reference: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ce_site_reference"] = vFn

	v.FldValidators["connection_type.ipsec"] = ConnectionTypeIPSecValidator().Validate
	v.FldValidators["connection_type.gre"] = ConnectionTypeGREValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *IkeParameters) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *IkeParameters) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *IkeParameters) DeepCopy() *IkeParameters {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &IkeParameters{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *IkeParameters) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *IkeParameters) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return IkeParametersValidator().Validate(ctx, m, opts...)
}

func (m *IkeParameters) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetIkePhase1ProfileDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIkePhase1ProfileDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIkePhase2ProfileDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIkePhase2ProfileDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *IkeParameters) GetIkePhase1ProfileDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetIkePhase1Profile()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("ike_phase1_profile.Object")
	dri := db.DRefInfo{
		RefdType:   "ike_phase1_profile.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "ike_phase1_profile",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetIkePhase1ProfileDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *IkeParameters) GetIkePhase1ProfileDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "ike_phase1_profile.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: ike_phase1_profile")
	}

	vref := m.GetIkePhase1Profile()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "ike_phase1_profile.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *IkeParameters) GetIkePhase2ProfileDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetIkePhase2Profile()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("ike_phase2_profile.Object")
	dri := db.DRefInfo{
		RefdType:   "ike_phase2_profile.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "ike_phase2_profile",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetIkePhase2ProfileDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *IkeParameters) GetIkePhase2ProfileDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "ike_phase2_profile.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: ike_phase2_profile")
	}

	vref := m.GetIkePhase2Profile()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "ike_phase2_profile.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateIkeParameters struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateIkeParameters) ModeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mode_choice")
	}
	return validatorFn, nil
}

func (v *ValidateIkeParameters) IkePhase1ProfileValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for ike_phase1_profile")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateIkeParameters) IkePhase2ProfileValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for ike_phase2_profile")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateIkeParameters) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*IkeParameters)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *IkeParameters got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetDpdChoice().(type) {
	case *IkeParameters_DpdKeepAliveTimer:
		if fv, exists := v.FldValidators["dpd_choice.dpd_keep_alive_timer"]; exists {
			val := m.GetDpdChoice().(*IkeParameters_DpdKeepAliveTimer).DpdKeepAliveTimer
			vOpts := append(opts,
				db.WithValidateField("dpd_choice"),
				db.WithValidateField("dpd_keep_alive_timer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *IkeParameters_DpdDisabled:
		if fv, exists := v.FldValidators["dpd_choice.dpd_disabled"]; exists {
			val := m.GetDpdChoice().(*IkeParameters_DpdDisabled).DpdDisabled
			vOpts := append(opts,
				db.WithValidateField("dpd_choice"),
				db.WithValidateField("dpd_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ike_phase1_profile"]; exists {

		vOpts := append(opts, db.WithValidateField("ike_phase1_profile"))
		if err := fv(ctx, m.GetIkePhase1Profile(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ike_phase2_profile"]; exists {

		vOpts := append(opts, db.WithValidateField("ike_phase2_profile"))
		if err := fv(ctx, m.GetIkePhase2Profile(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetLocalIkeId().(type) {
	case *IkeParameters_UseDefaultLocalIkeId:
		if fv, exists := v.FldValidators["local_ike_id.use_default_local_ike_id"]; exists {
			val := m.GetLocalIkeId().(*IkeParameters_UseDefaultLocalIkeId).UseDefaultLocalIkeId
			vOpts := append(opts,
				db.WithValidateField("local_ike_id"),
				db.WithValidateField("use_default_local_ike_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *IkeParameters_LcIpAddress:
		if fv, exists := v.FldValidators["local_ike_id.lc_ip_address"]; exists {
			val := m.GetLocalIkeId().(*IkeParameters_LcIpAddress).LcIpAddress
			vOpts := append(opts,
				db.WithValidateField("local_ike_id"),
				db.WithValidateField("lc_ip_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *IkeParameters_LcHostname:
		if fv, exists := v.FldValidators["local_ike_id.lc_hostname"]; exists {
			val := m.GetLocalIkeId().(*IkeParameters_LcHostname).LcHostname
			vOpts := append(opts,
				db.WithValidateField("local_ike_id"),
				db.WithValidateField("lc_hostname"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mode_choice"]; exists {
		val := m.GetModeChoice()
		vOpts := append(opts,
			db.WithValidateField("mode_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetModeChoice().(type) {
	case *IkeParameters_Initiator:
		if fv, exists := v.FldValidators["mode_choice.initiator"]; exists {
			val := m.GetModeChoice().(*IkeParameters_Initiator).Initiator
			vOpts := append(opts,
				db.WithValidateField("mode_choice"),
				db.WithValidateField("initiator"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *IkeParameters_Responder:
		if fv, exists := v.FldValidators["mode_choice.responder"]; exists {
			val := m.GetModeChoice().(*IkeParameters_Responder).Responder
			vOpts := append(opts,
				db.WithValidateField("mode_choice"),
				db.WithValidateField("responder"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetRemoteIkeId().(type) {
	case *IkeParameters_UseDefaultRemoteIkeId:
		if fv, exists := v.FldValidators["remote_ike_id.use_default_remote_ike_id"]; exists {
			val := m.GetRemoteIkeId().(*IkeParameters_UseDefaultRemoteIkeId).UseDefaultRemoteIkeId
			vOpts := append(opts,
				db.WithValidateField("remote_ike_id"),
				db.WithValidateField("use_default_remote_ike_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *IkeParameters_RmIpAddress:
		if fv, exists := v.FldValidators["remote_ike_id.rm_ip_address"]; exists {
			val := m.GetRemoteIkeId().(*IkeParameters_RmIpAddress).RmIpAddress
			vOpts := append(opts,
				db.WithValidateField("remote_ike_id"),
				db.WithValidateField("rm_ip_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *IkeParameters_RmHostname:
		if fv, exists := v.FldValidators["remote_ike_id.rm_hostname"]; exists {
			val := m.GetRemoteIkeId().(*IkeParameters_RmHostname).RmHostname
			vOpts := append(opts,
				db.WithValidateField("remote_ike_id"),
				db.WithValidateField("rm_hostname"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultIkeParametersValidator = func() *ValidateIkeParameters {
	v := &ValidateIkeParameters{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhModeChoice := v.ModeChoiceValidationRuleHandler
	rulesModeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhModeChoice(rulesModeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for IkeParameters.mode_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mode_choice"] = vFn

	vrhIkePhase1Profile := v.IkePhase1ProfileValidationRuleHandler
	rulesIkePhase1Profile := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhIkePhase1Profile(rulesIkePhase1Profile)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for IkeParameters.ike_phase1_profile: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_phase1_profile"] = vFn

	vrhIkePhase2Profile := v.IkePhase2ProfileValidationRuleHandler
	rulesIkePhase2Profile := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhIkePhase2Profile(rulesIkePhase2Profile)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for IkeParameters.ike_phase2_profile: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_phase2_profile"] = vFn

	v.FldValidators["dpd_choice.dpd_keep_alive_timer"] = DpdKeepAliveTimerValidator().Validate

	v.FldValidators["local_ike_id.lc_ip_address"] = ves_io_schema.IpAddressTypeValidator().Validate

	v.FldValidators["remote_ike_id.rm_ip_address"] = ves_io_schema.IpAddressTypeValidator().Validate

	return v
}()

func IkeParametersValidator() db.Validator {
	return DefaultIkeParametersValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIpsec().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.ipsec")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCeSiteReferenceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCeSiteReferenceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetConnectionTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetConnectionTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *ReplaceSpecType) GetCeSiteReferenceDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCeSiteReference()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("site.Object")
	dri := db.DRefInfo{
		RefdType:   "site.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "ce_site_reference",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCeSiteReferenceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetCeSiteReferenceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site")
	}

	vref := m.GetCeSiteReference()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "site.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetConnectionTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetConnectionType() == nil {
		return nil, nil
	}
	switch m.GetConnectionType().(type) {
	case *ReplaceSpecType_Ipsec:

		drInfos, err := m.GetIpsec().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIpsec().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ipsec." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_Gre:

		drInfos, err := m.GetGre().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGre().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "gre." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_DirectConnection:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ConnectionTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connection_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) CeSiteReferenceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for ce_site_reference")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ce_site_reference"]; exists {

		vOpts := append(opts, db.WithValidateField("ce_site_reference"))
		if err := fv(ctx, m.GetCeSiteReference(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_type"]; exists {
		val := m.GetConnectionType()
		vOpts := append(opts,
			db.WithValidateField("connection_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetConnectionType().(type) {
	case *ReplaceSpecType_Ipsec:
		if fv, exists := v.FldValidators["connection_type.ipsec"]; exists {
			val := m.GetConnectionType().(*ReplaceSpecType_Ipsec).Ipsec
			vOpts := append(opts,
				db.WithValidateField("connection_type"),
				db.WithValidateField("ipsec"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Gre:
		if fv, exists := v.FldValidators["connection_type.gre"]; exists {
			val := m.GetConnectionType().(*ReplaceSpecType_Gre).Gre
			vOpts := append(opts,
				db.WithValidateField("connection_type"),
				db.WithValidateField("gre"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DirectConnection:
		if fv, exists := v.FldValidators["connection_type.direct_connection"]; exists {
			val := m.GetConnectionType().(*ReplaceSpecType_DirectConnection).DirectConnection
			vOpts := append(opts,
				db.WithValidateField("connection_type"),
				db.WithValidateField("direct_connection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConnectionType := v.ConnectionTypeValidationRuleHandler
	rulesConnectionType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhConnectionType(rulesConnectionType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.connection_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connection_type"] = vFn

	vrhCeSiteReference := v.CeSiteReferenceValidationRuleHandler
	rulesCeSiteReference := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCeSiteReference(rulesCeSiteReference)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.ce_site_reference: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ce_site_reference"] = vFn

	v.FldValidators["connection_type.ipsec"] = ConnectionTypeIPSecValidator().Validate
	v.FldValidators["connection_type.gre"] = ConnectionTypeGREValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *TunnelEndpoint) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TunnelEndpoint) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *TunnelEndpoint) DeepCopy() *TunnelEndpoint {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TunnelEndpoint{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TunnelEndpoint) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TunnelEndpoint) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TunnelEndpointValidator().Validate(ctx, m, opts...)
}

type ValidateTunnelEndpoint struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTunnelEndpoint) NodeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for node")
	}

	return validatorFn, nil
}

func (v *ValidateTunnelEndpoint) InterfaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for interface")
	}

	return validatorFn, nil
}

func (v *ValidateTunnelEndpoint) LocalTunnelIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for local_tunnel_ip")
	}

	return validatorFn, nil
}

func (v *ValidateTunnelEndpoint) RemoteTunnelIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for remote_tunnel_ip")
	}

	return validatorFn, nil
}

func (v *ValidateTunnelEndpoint) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TunnelEndpoint)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TunnelEndpoint got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["interface"]; exists {

		vOpts := append(opts, db.WithValidateField("interface"))
		if err := fv(ctx, m.GetInterface(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["local_tunnel_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("local_tunnel_ip"))
		if err := fv(ctx, m.GetLocalTunnelIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["node"]; exists {

		vOpts := append(opts, db.WithValidateField("node"))
		if err := fv(ctx, m.GetNode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["remote_tunnel_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("remote_tunnel_ip"))
		if err := fv(ctx, m.GetRemoteTunnelIp(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTunnelEndpointValidator = func() *ValidateTunnelEndpoint {
	v := &ValidateTunnelEndpoint{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNode := v.NodeValidationRuleHandler
	rulesNode := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNode(rulesNode)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TunnelEndpoint.node: %s", err)
		panic(errMsg)
	}
	v.FldValidators["node"] = vFn

	vrhInterface := v.InterfaceValidationRuleHandler
	rulesInterface := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhInterface(rulesInterface)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TunnelEndpoint.interface: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interface"] = vFn

	vrhLocalTunnelIp := v.LocalTunnelIpValidationRuleHandler
	rulesLocalTunnelIp := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.string.ipv4_prefix": "true",
	}
	vFn, err = vrhLocalTunnelIp(rulesLocalTunnelIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TunnelEndpoint.local_tunnel_ip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["local_tunnel_ip"] = vFn

	vrhRemoteTunnelIp := v.RemoteTunnelIpValidationRuleHandler
	rulesRemoteTunnelIp := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.string.ipv4_prefix": "true",
	}
	vFn, err = vrhRemoteTunnelIp(rulesRemoteTunnelIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TunnelEndpoint.remote_tunnel_ip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["remote_tunnel_ip"] = vFn

	return v
}()

func TunnelEndpointValidator() db.Validator {
	return DefaultTunnelEndpointValidator
}

// augmented methods on protoc/std generated struct

func (m *TunnelParameters) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TunnelParameters) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *TunnelParameters) String() string {
	if m == nil {
		return ""
	}
	copy := m.DeepCopy()
	copy.Redact(context.Background())
	return copy.string()
}

func (m *TunnelParameters) GoString() string {
	copy := m.DeepCopy()
	copy.Redact(context.Background())
	return copy.goString()
}

// Redact squashes sensitive info in m (in-place)
func (m *TunnelParameters) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	m.Psk = "Redacted"

	return nil
}

func (m *TunnelParameters) DeepCopy() *TunnelParameters {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TunnelParameters{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TunnelParameters) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TunnelParameters) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TunnelParametersValidator().Validate(ctx, m, opts...)
}

func (m *TunnelParameters) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetTunnelSourceVnDRefInfo()

}

// GetDRefInfo for the field's type
func (m *TunnelParameters) GetTunnelSourceVnDRefInfo() ([]db.DRefInfo, error) {
	if m.GetTunnelSourceVn() == nil {
		return nil, nil
	}
	switch m.GetTunnelSourceVn().(type) {
	case *TunnelParameters_SiteLocalNetwork:

		return nil, nil

	case *TunnelParameters_SiteLocalInsideNetwork:

		return nil, nil

	case *TunnelParameters_Segment:

		drInfos, err := m.GetSegment().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSegment().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "segment." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateTunnelParameters struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTunnelParameters) TunnelSourceVnValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tunnel_source_vn")
	}
	return validatorFn, nil
}

func (v *ValidateTunnelParameters) PeerIpAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for peer_ip_address")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.Ipv4AddressTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateTunnelParameters) TunnelEpsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for tunnel_eps")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*TunnelEndpoint, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := TunnelEndpointValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for tunnel_eps")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*TunnelEndpoint)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*TunnelEndpoint, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated tunnel_eps")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tunnel_eps")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateTunnelParameters) PskValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for psk")
	}

	return validatorFn, nil
}

func (v *ValidateTunnelParameters) TunnelMtuValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tunnel_mtu")
	}

	return validatorFn, nil
}

func (v *ValidateTunnelParameters) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TunnelParameters)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TunnelParameters got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["peer_ip_address"]; exists {

		vOpts := append(opts, db.WithValidateField("peer_ip_address"))
		if err := fv(ctx, m.GetPeerIpAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["psk"]; exists {

		vOpts := append(opts, db.WithValidateField("psk"))
		if err := fv(ctx, m.GetPsk(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tunnel_eps"]; exists {
		vOpts := append(opts, db.WithValidateField("tunnel_eps"))
		if err := fv(ctx, m.GetTunnelEps(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tunnel_mtu"]; exists {

		vOpts := append(opts, db.WithValidateField("tunnel_mtu"))
		if err := fv(ctx, m.GetTunnelMtu(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tunnel_source_vn"]; exists {
		val := m.GetTunnelSourceVn()
		vOpts := append(opts,
			db.WithValidateField("tunnel_source_vn"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTunnelSourceVn().(type) {
	case *TunnelParameters_SiteLocalNetwork:
		if fv, exists := v.FldValidators["tunnel_source_vn.site_local_network"]; exists {
			val := m.GetTunnelSourceVn().(*TunnelParameters_SiteLocalNetwork).SiteLocalNetwork
			vOpts := append(opts,
				db.WithValidateField("tunnel_source_vn"),
				db.WithValidateField("site_local_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TunnelParameters_SiteLocalInsideNetwork:
		if fv, exists := v.FldValidators["tunnel_source_vn.site_local_inside_network"]; exists {
			val := m.GetTunnelSourceVn().(*TunnelParameters_SiteLocalInsideNetwork).SiteLocalInsideNetwork
			vOpts := append(opts,
				db.WithValidateField("tunnel_source_vn"),
				db.WithValidateField("site_local_inside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TunnelParameters_Segment:
		if fv, exists := v.FldValidators["tunnel_source_vn.segment"]; exists {
			val := m.GetTunnelSourceVn().(*TunnelParameters_Segment).Segment
			vOpts := append(opts,
				db.WithValidateField("tunnel_source_vn"),
				db.WithValidateField("segment"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTunnelParametersValidator = func() *ValidateTunnelParameters {
	v := &ValidateTunnelParameters{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTunnelSourceVn := v.TunnelSourceVnValidationRuleHandler
	rulesTunnelSourceVn := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTunnelSourceVn(rulesTunnelSourceVn)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TunnelParameters.tunnel_source_vn: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tunnel_source_vn"] = vFn

	vrhPeerIpAddress := v.PeerIpAddressValidationRuleHandler
	rulesPeerIpAddress := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPeerIpAddress(rulesPeerIpAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TunnelParameters.peer_ip_address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["peer_ip_address"] = vFn

	vrhTunnelEps := v.TunnelEpsValidationRuleHandler
	rulesTunnelEps := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhTunnelEps(rulesTunnelEps)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TunnelParameters.tunnel_eps: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tunnel_eps"] = vFn

	vrhPsk := v.PskValidationRuleHandler
	rulesPsk := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPsk(rulesPsk)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TunnelParameters.psk: %s", err)
		panic(errMsg)
	}
	v.FldValidators["psk"] = vFn

	vrhTunnelMtu := v.TunnelMtuValidationRuleHandler
	rulesTunnelMtu := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "512",
		"ves.io.schema.rules.uint32.lte":       "1370",
	}
	vFn, err = vrhTunnelMtu(rulesTunnelMtu)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TunnelParameters.tunnel_mtu: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tunnel_mtu"] = vFn

	v.FldValidators["tunnel_source_vn.segment"] = ves_io_schema.SegmentRefTypeValidator().Validate

	return v
}()

func TunnelParametersValidator() db.Validator {
	return DefaultTunnelParametersValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetConnectionTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ConnectionType.(type) {
	case nil:
		o.ConnectionType = nil

	case *CreateSpecType_DirectConnection:
		o.ConnectionType = &GlobalSpecType_DirectConnection{DirectConnection: of.DirectConnection}

	case *CreateSpecType_Gre:
		o.ConnectionType = &GlobalSpecType_Gre{Gre: of.Gre}

	case *CreateSpecType_Ipsec:
		o.ConnectionType = &GlobalSpecType_Ipsec{Ipsec: of.Ipsec}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetConnectionTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ConnectionType.(type) {
	case nil:
		r.ConnectionType = nil

	case *GlobalSpecType_DirectConnection:
		r.ConnectionType = &CreateSpecType_DirectConnection{DirectConnection: of.DirectConnection}

	case *GlobalSpecType_Gre:
		r.ConnectionType = &CreateSpecType_Gre{Gre: of.Gre}

	case *GlobalSpecType_Ipsec:
		r.ConnectionType = &CreateSpecType_Ipsec{Ipsec: of.Ipsec}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.CeSiteReference = f.GetCeSiteReference()
	m.GetConnectionTypeFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.CeSiteReference = m1.CeSiteReference
	m1.SetConnectionTypeToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetConnectionTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ConnectionType.(type) {
	case nil:
		o.ConnectionType = nil

	case *GetSpecType_DirectConnection:
		o.ConnectionType = &GlobalSpecType_DirectConnection{DirectConnection: of.DirectConnection}

	case *GetSpecType_Gre:
		o.ConnectionType = &GlobalSpecType_Gre{Gre: of.Gre}

	case *GetSpecType_Ipsec:
		o.ConnectionType = &GlobalSpecType_Ipsec{Ipsec: of.Ipsec}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetConnectionTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ConnectionType.(type) {
	case nil:
		r.ConnectionType = nil

	case *GlobalSpecType_DirectConnection:
		r.ConnectionType = &GetSpecType_DirectConnection{DirectConnection: of.DirectConnection}

	case *GlobalSpecType_Gre:
		r.ConnectionType = &GetSpecType_Gre{Gre: of.Gre}

	case *GlobalSpecType_Ipsec:
		r.ConnectionType = &GetSpecType_Ipsec{Ipsec: of.Ipsec}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.CeSiteReference = f.GetCeSiteReference()
	m.GetConnectionTypeFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.CeSiteReference = m1.CeSiteReference
	m1.SetConnectionTypeToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetConnectionTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ConnectionType.(type) {
	case nil:
		o.ConnectionType = nil

	case *ReplaceSpecType_DirectConnection:
		o.ConnectionType = &GlobalSpecType_DirectConnection{DirectConnection: of.DirectConnection}

	case *ReplaceSpecType_Gre:
		o.ConnectionType = &GlobalSpecType_Gre{Gre: of.Gre}

	case *ReplaceSpecType_Ipsec:
		o.ConnectionType = &GlobalSpecType_Ipsec{Ipsec: of.Ipsec}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetConnectionTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ConnectionType.(type) {
	case nil:
		r.ConnectionType = nil

	case *GlobalSpecType_DirectConnection:
		r.ConnectionType = &ReplaceSpecType_DirectConnection{DirectConnection: of.DirectConnection}

	case *GlobalSpecType_Gre:
		r.ConnectionType = &ReplaceSpecType_Gre{Gre: of.Gre}

	case *GlobalSpecType_Ipsec:
		r.ConnectionType = &ReplaceSpecType_Ipsec{Ipsec: of.Ipsec}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.CeSiteReference = f.GetCeSiteReference()
	m.GetConnectionTypeFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.CeSiteReference = m1.CeSiteReference
	m1.SetConnectionTypeToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

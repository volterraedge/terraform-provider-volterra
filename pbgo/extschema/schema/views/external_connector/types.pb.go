// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/external_connector/types.proto

package external_connector

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the External connector configuration specification
type GlobalSpecType struct {
	// CE Site
	//
	// x-displayName: "CE Site Reference"
	// x-inlineHint: "Choose a CE site that will terminate the tunnel"
	// x-required
	// Choose a CE site that will terminate the tunnel
	CeSiteReference *views.ObjectRefType `protobuf:"bytes,1,opt,name=ce_site_reference,json=ceSiteReference,proto3" json:"ce_site_reference,omitempty"`
	// Connection Type
	//
	// x-displayName: "Connection Type"
	// x-required
	// You will need to choose the type of tunnel be it IPSec, GRE or no tunnel.
	//
	// Types that are valid to be assigned to ConnectionType:
	//	*GlobalSpecType_Ipsec
	//	*GlobalSpecType_Gre
	//	*GlobalSpecType_DirectConnection
	ConnectionType isGlobalSpecType_ConnectionType `protobuf_oneof:"connection_type"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_763e4a27fb3eeb69, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_ConnectionType interface {
	isGlobalSpecType_ConnectionType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Ipsec struct {
	Ipsec *ConnectionTypeIPSec `protobuf:"bytes,3,opt,name=ipsec,proto3,oneof" json:"ipsec,omitempty"`
}
type GlobalSpecType_Gre struct {
	Gre *ConnectionTypeGRE `protobuf:"bytes,4,opt,name=gre,proto3,oneof" json:"gre,omitempty"`
}
type GlobalSpecType_DirectConnection struct {
	DirectConnection *ConnectionTypeDirect `protobuf:"bytes,5,opt,name=direct_connection,json=directConnection,proto3,oneof" json:"direct_connection,omitempty"`
}

func (*GlobalSpecType_Ipsec) isGlobalSpecType_ConnectionType()            {}
func (*GlobalSpecType_Gre) isGlobalSpecType_ConnectionType()              {}
func (*GlobalSpecType_DirectConnection) isGlobalSpecType_ConnectionType() {}

func (m *GlobalSpecType) GetConnectionType() isGlobalSpecType_ConnectionType {
	if m != nil {
		return m.ConnectionType
	}
	return nil
}

func (m *GlobalSpecType) GetCeSiteReference() *views.ObjectRefType {
	if m != nil {
		return m.CeSiteReference
	}
	return nil
}

func (m *GlobalSpecType) GetIpsec() *ConnectionTypeIPSec {
	if x, ok := m.GetConnectionType().(*GlobalSpecType_Ipsec); ok {
		return x.Ipsec
	}
	return nil
}

func (m *GlobalSpecType) GetGre() *ConnectionTypeGRE {
	if x, ok := m.GetConnectionType().(*GlobalSpecType_Gre); ok {
		return x.Gre
	}
	return nil
}

func (m *GlobalSpecType) GetDirectConnection() *ConnectionTypeDirect {
	if x, ok := m.GetConnectionType().(*GlobalSpecType_DirectConnection); ok {
		return x.DirectConnection
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Ipsec)(nil),
		(*GlobalSpecType_Gre)(nil),
		(*GlobalSpecType_DirectConnection)(nil),
	}
}

// IPSec
//
// x-displayName: "IPSec"
// External Connector with IPSec tunnel
type ConnectionTypeIPSec struct {
	// IKE Parameters
	//
	// x-displayName: "IKE Parameters"
	// x-inlineHint: "IKE Protocol Version 2"
	// x-required
	// This section involves choosing the IKE parameters including the Phase 1 & Phase 2 Policies as well as other parameters.
	IkeParameters *IkeParameters `protobuf:"bytes,1,opt,name=ike_parameters,json=ikeParameters,proto3" json:"ike_parameters,omitempty"`
	// Tunnel Parameters
	//
	// x-displayName: "Tunnel Parameters"
	// x-required
	// In this section, we will configure the tunnel parameters, source, destination, IP addresses,  and segment.
	IpsecTunnelParameters *TunnelParameters `protobuf:"bytes,2,opt,name=ipsec_tunnel_parameters,json=ipsecTunnelParameters,proto3" json:"ipsec_tunnel_parameters,omitempty"`
}

func (m *ConnectionTypeIPSec) Reset()      { *m = ConnectionTypeIPSec{} }
func (*ConnectionTypeIPSec) ProtoMessage() {}
func (*ConnectionTypeIPSec) Descriptor() ([]byte, []int) {
	return fileDescriptor_763e4a27fb3eeb69, []int{1}
}
func (m *ConnectionTypeIPSec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionTypeIPSec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConnectionTypeIPSec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionTypeIPSec.Merge(m, src)
}
func (m *ConnectionTypeIPSec) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionTypeIPSec) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionTypeIPSec.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionTypeIPSec proto.InternalMessageInfo

func (m *ConnectionTypeIPSec) GetIkeParameters() *IkeParameters {
	if m != nil {
		return m.IkeParameters
	}
	return nil
}

func (m *ConnectionTypeIPSec) GetIpsecTunnelParameters() *TunnelParameters {
	if m != nil {
		return m.IpsecTunnelParameters
	}
	return nil
}

// GRE
//
// x-displayName: "GRE"
// External Connector with GRE tunnel
type ConnectionTypeGRE struct {
	// GRE Parameters
	//
	// x-displayName: "GRE Tunnel Parameters"
	// GRE configuration parameters required for GRE Connection type
	GreParameters *GRETunnelParameters `protobuf:"bytes,1,opt,name=gre_parameters,json=greParameters,proto3" json:"gre_parameters,omitempty"`
}

func (m *ConnectionTypeGRE) Reset()      { *m = ConnectionTypeGRE{} }
func (*ConnectionTypeGRE) ProtoMessage() {}
func (*ConnectionTypeGRE) Descriptor() ([]byte, []int) {
	return fileDescriptor_763e4a27fb3eeb69, []int{2}
}
func (m *ConnectionTypeGRE) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionTypeGRE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConnectionTypeGRE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionTypeGRE.Merge(m, src)
}
func (m *ConnectionTypeGRE) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionTypeGRE) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionTypeGRE.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionTypeGRE proto.InternalMessageInfo

func (m *ConnectionTypeGRE) GetGreParameters() *GRETunnelParameters {
	if m != nil {
		return m.GreParameters
	}
	return nil
}

// Direct Connection Type
//
// x-displayName: "Direct Connection Type"
// External Connector with direct connection
type ConnectionTypeDirect struct {
}

func (m *ConnectionTypeDirect) Reset()      { *m = ConnectionTypeDirect{} }
func (*ConnectionTypeDirect) ProtoMessage() {}
func (*ConnectionTypeDirect) Descriptor() ([]byte, []int) {
	return fileDescriptor_763e4a27fb3eeb69, []int{3}
}
func (m *ConnectionTypeDirect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionTypeDirect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConnectionTypeDirect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionTypeDirect.Merge(m, src)
}
func (m *ConnectionTypeDirect) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionTypeDirect) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionTypeDirect.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionTypeDirect proto.InternalMessageInfo

// IKE Parameters
//
// x-displayName: "IKE Parameters"
// IKE configuration parameters required for IPSec Connection type
type IkeParameters struct {
	//IKE Phase 1 Profile
	//
	// x-displayName: "IKE Phase 1 Profile"
	// x-inlineHint: "Choose one of the existing IKE Phase 1 profiles or add a new one"
	// x-required
	// IKE Phase 1 profile defines mainly the encryption and authentication algorithms to be used for IKE SA
	IkePhase1Profile *views.ObjectRefType `protobuf:"bytes,1,opt,name=ike_phase1_profile,json=ikePhase1Profile,proto3" json:"ike_phase1_profile,omitempty"`
	//IKE Phase 2 Profile
	//
	// x-displayName: "IKE Phase 2 Profile"
	// x-inlineHint: "Choose one of the existing IKE Phase 2 profiles or add a new one"
	// x-required
	// IKE Phase 2 profile defines mainly the encryption and authentication algorithms to be used for ESP SA
	IkePhase2Profile *views.ObjectRefType `protobuf:"bytes,2,opt,name=ike_phase2_profile,json=ikePhase2Profile,proto3" json:"ike_phase2_profile,omitempty"`
	//  Mode
	//
	// x-required
	// x-displayName: "Mode"
	// Initiator means the CE site will actively try to bring up the tunnel to the remote end whereas responder means that the CE site will only reply to connection attempts from the remote gateway.
	//
	// Types that are valid to be assigned to ModeChoice:
	//	*IkeParameters_Initiator
	//	*IkeParameters_Responder
	ModeChoice isIkeParameters_ModeChoice `protobuf_oneof:"mode_choice"`
	// Dead Peer Detection (DPD)
	//
	// x-displayName: "Dead Peer Detection(DPD)"
	// Dead Peer Detection is a method used to determine whether an IPsec peer is still active and responsive. The keep alive timer specifies the frequency of the keep alive messages being sent.
	//
	// Types that are valid to be assigned to DpdChoice:
	//	*IkeParameters_DpdDisabled
	//	*IkeParameters_DpdKeepAliveTimer
	DpdChoice isIkeParameters_DpdChoice `protobuf_oneof:"dpd_choice"`
	// Local IKE ID
	//
	// x-displayName: "Local IKE ID"
	// There are cases where you will need to set the local and/or remote IKE IDs.
	//
	// Types that are valid to be assigned to LocalIkeId:
	//	*IkeParameters_UseDefaultLocalIkeId
	//	*IkeParameters_LcIpAddress
	//	*IkeParameters_LcHostname
	LocalIkeId isIkeParameters_LocalIkeId `protobuf_oneof:"local_ike_id"`
	// Remote IKE ID
	//
	// x-displayName: "Remote IKE ID"
	// There are cases where you will need to set the local and/or remote IKE IDs.
	//
	// Types that are valid to be assigned to RemoteIkeId:
	//	*IkeParameters_UseDefaultRemoteIkeId
	//	*IkeParameters_RmIpAddress
	//	*IkeParameters_RmHostname
	RemoteIkeId isIkeParameters_RemoteIkeId `protobuf_oneof:"remote_ike_id"`
}

func (m *IkeParameters) Reset()      { *m = IkeParameters{} }
func (*IkeParameters) ProtoMessage() {}
func (*IkeParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_763e4a27fb3eeb69, []int{4}
}
func (m *IkeParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IkeParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IkeParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IkeParameters.Merge(m, src)
}
func (m *IkeParameters) XXX_Size() int {
	return m.Size()
}
func (m *IkeParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_IkeParameters.DiscardUnknown(m)
}

var xxx_messageInfo_IkeParameters proto.InternalMessageInfo

type isIkeParameters_ModeChoice interface {
	isIkeParameters_ModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isIkeParameters_DpdChoice interface {
	isIkeParameters_DpdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isIkeParameters_LocalIkeId interface {
	isIkeParameters_LocalIkeId()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isIkeParameters_RemoteIkeId interface {
	isIkeParameters_RemoteIkeId()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type IkeParameters_Initiator struct {
	Initiator *schema.Empty `protobuf:"bytes,11,opt,name=initiator,proto3,oneof" json:"initiator,omitempty"`
}
type IkeParameters_Responder struct {
	Responder *schema.Empty `protobuf:"bytes,12,opt,name=responder,proto3,oneof" json:"responder,omitempty"`
}
type IkeParameters_DpdDisabled struct {
	DpdDisabled *schema.Empty `protobuf:"bytes,22,opt,name=dpd_disabled,json=dpdDisabled,proto3,oneof" json:"dpd_disabled,omitempty"`
}
type IkeParameters_DpdKeepAliveTimer struct {
	DpdKeepAliveTimer *DpdKeepAliveTimer `protobuf:"bytes,21,opt,name=dpd_keep_alive_timer,json=dpdKeepAliveTimer,proto3,oneof" json:"dpd_keep_alive_timer,omitempty"`
}
type IkeParameters_UseDefaultLocalIkeId struct {
	UseDefaultLocalIkeId *schema.Empty `protobuf:"bytes,41,opt,name=use_default_local_ike_id,json=useDefaultLocalIkeId,proto3,oneof" json:"use_default_local_ike_id,omitempty"`
}
type IkeParameters_LcIpAddress struct {
	LcIpAddress *schema.IpAddressType `protobuf:"bytes,42,opt,name=lc_ip_address,json=lcIpAddress,proto3,oneof" json:"lc_ip_address,omitempty"`
}
type IkeParameters_LcHostname struct {
	LcHostname string `protobuf:"bytes,43,opt,name=lc_hostname,json=lcHostname,proto3,oneof" json:"lc_hostname,omitempty"`
}
type IkeParameters_UseDefaultRemoteIkeId struct {
	UseDefaultRemoteIkeId *schema.Empty `protobuf:"bytes,51,opt,name=use_default_remote_ike_id,json=useDefaultRemoteIkeId,proto3,oneof" json:"use_default_remote_ike_id,omitempty"`
}
type IkeParameters_RmIpAddress struct {
	RmIpAddress *schema.IpAddressType `protobuf:"bytes,52,opt,name=rm_ip_address,json=rmIpAddress,proto3,oneof" json:"rm_ip_address,omitempty"`
}
type IkeParameters_RmHostname struct {
	RmHostname string `protobuf:"bytes,53,opt,name=rm_hostname,json=rmHostname,proto3,oneof" json:"rm_hostname,omitempty"`
}

func (*IkeParameters_Initiator) isIkeParameters_ModeChoice()              {}
func (*IkeParameters_Responder) isIkeParameters_ModeChoice()              {}
func (*IkeParameters_DpdDisabled) isIkeParameters_DpdChoice()             {}
func (*IkeParameters_DpdKeepAliveTimer) isIkeParameters_DpdChoice()       {}
func (*IkeParameters_UseDefaultLocalIkeId) isIkeParameters_LocalIkeId()   {}
func (*IkeParameters_LcIpAddress) isIkeParameters_LocalIkeId()            {}
func (*IkeParameters_LcHostname) isIkeParameters_LocalIkeId()             {}
func (*IkeParameters_UseDefaultRemoteIkeId) isIkeParameters_RemoteIkeId() {}
func (*IkeParameters_RmIpAddress) isIkeParameters_RemoteIkeId()           {}
func (*IkeParameters_RmHostname) isIkeParameters_RemoteIkeId()            {}

func (m *IkeParameters) GetModeChoice() isIkeParameters_ModeChoice {
	if m != nil {
		return m.ModeChoice
	}
	return nil
}
func (m *IkeParameters) GetDpdChoice() isIkeParameters_DpdChoice {
	if m != nil {
		return m.DpdChoice
	}
	return nil
}
func (m *IkeParameters) GetLocalIkeId() isIkeParameters_LocalIkeId {
	if m != nil {
		return m.LocalIkeId
	}
	return nil
}
func (m *IkeParameters) GetRemoteIkeId() isIkeParameters_RemoteIkeId {
	if m != nil {
		return m.RemoteIkeId
	}
	return nil
}

func (m *IkeParameters) GetIkePhase1Profile() *views.ObjectRefType {
	if m != nil {
		return m.IkePhase1Profile
	}
	return nil
}

func (m *IkeParameters) GetIkePhase2Profile() *views.ObjectRefType {
	if m != nil {
		return m.IkePhase2Profile
	}
	return nil
}

func (m *IkeParameters) GetInitiator() *schema.Empty {
	if x, ok := m.GetModeChoice().(*IkeParameters_Initiator); ok {
		return x.Initiator
	}
	return nil
}

func (m *IkeParameters) GetResponder() *schema.Empty {
	if x, ok := m.GetModeChoice().(*IkeParameters_Responder); ok {
		return x.Responder
	}
	return nil
}

func (m *IkeParameters) GetDpdDisabled() *schema.Empty {
	if x, ok := m.GetDpdChoice().(*IkeParameters_DpdDisabled); ok {
		return x.DpdDisabled
	}
	return nil
}

func (m *IkeParameters) GetDpdKeepAliveTimer() *DpdKeepAliveTimer {
	if x, ok := m.GetDpdChoice().(*IkeParameters_DpdKeepAliveTimer); ok {
		return x.DpdKeepAliveTimer
	}
	return nil
}

func (m *IkeParameters) GetUseDefaultLocalIkeId() *schema.Empty {
	if x, ok := m.GetLocalIkeId().(*IkeParameters_UseDefaultLocalIkeId); ok {
		return x.UseDefaultLocalIkeId
	}
	return nil
}

func (m *IkeParameters) GetLcIpAddress() *schema.IpAddressType {
	if x, ok := m.GetLocalIkeId().(*IkeParameters_LcIpAddress); ok {
		return x.LcIpAddress
	}
	return nil
}

func (m *IkeParameters) GetLcHostname() string {
	if x, ok := m.GetLocalIkeId().(*IkeParameters_LcHostname); ok {
		return x.LcHostname
	}
	return ""
}

func (m *IkeParameters) GetUseDefaultRemoteIkeId() *schema.Empty {
	if x, ok := m.GetRemoteIkeId().(*IkeParameters_UseDefaultRemoteIkeId); ok {
		return x.UseDefaultRemoteIkeId
	}
	return nil
}

func (m *IkeParameters) GetRmIpAddress() *schema.IpAddressType {
	if x, ok := m.GetRemoteIkeId().(*IkeParameters_RmIpAddress); ok {
		return x.RmIpAddress
	}
	return nil
}

func (m *IkeParameters) GetRmHostname() string {
	if x, ok := m.GetRemoteIkeId().(*IkeParameters_RmHostname); ok {
		return x.RmHostname
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IkeParameters) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IkeParameters_Initiator)(nil),
		(*IkeParameters_Responder)(nil),
		(*IkeParameters_DpdDisabled)(nil),
		(*IkeParameters_DpdKeepAliveTimer)(nil),
		(*IkeParameters_UseDefaultLocalIkeId)(nil),
		(*IkeParameters_LcIpAddress)(nil),
		(*IkeParameters_LcHostname)(nil),
		(*IkeParameters_UseDefaultRemoteIkeId)(nil),
		(*IkeParameters_RmIpAddress)(nil),
		(*IkeParameters_RmHostname)(nil),
	}
}

// Keepalive Timer
//
// x-displayName: "Keepalive Timer"
type DpdKeepAliveTimer struct {
	// Keepalive Timer
	//
	// x-displayName: "Keepalive Timer"
	// x-inlineHint: "The range is between 1 and 5 seconds."
	Timeout uint32 `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (m *DpdKeepAliveTimer) Reset()      { *m = DpdKeepAliveTimer{} }
func (*DpdKeepAliveTimer) ProtoMessage() {}
func (*DpdKeepAliveTimer) Descriptor() ([]byte, []int) {
	return fileDescriptor_763e4a27fb3eeb69, []int{5}
}
func (m *DpdKeepAliveTimer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DpdKeepAliveTimer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DpdKeepAliveTimer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DpdKeepAliveTimer.Merge(m, src)
}
func (m *DpdKeepAliveTimer) XXX_Size() int {
	return m.Size()
}
func (m *DpdKeepAliveTimer) XXX_DiscardUnknown() {
	xxx_messageInfo_DpdKeepAliveTimer.DiscardUnknown(m)
}

var xxx_messageInfo_DpdKeepAliveTimer proto.InternalMessageInfo

func (m *DpdKeepAliveTimer) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// Tunnel Endpoint
//
// x-displayName: "Tunnel Endpoint"
// Configure tunnel endpoints, local and remote IP addresses
type TunnelEndpoint struct {
	// Node
	//
	// x-displayName: "Node"
	// x-required
	// A CE site is composed of multiple nodes. Choose a node that will be part of this external connection.
	Node string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	// Interface
	//
	// x-displayName: "Interface"
	// x-required
	// For the chosen node, specify the interface that will be the tunnel source.
	Interface string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	//Local Tunnel IP Address
	//
	// x-displayName: "Local Tunnel IP Address/Prefix Length"
	// x-example: "10.10.15.1/24"
	// x-inlineHint: "For each node specify the tunnel IP Address/Prefix Length. Preference is to use /30 prefix and same subnet as remote_tunnel_ip"
	// x-required
	// For a particular tunnel on a node, specify the local tunnel IP Address i.e. the IP address of the tunnel on the CE node itself and a subnet prefix length
	LocalTunnelIp string `protobuf:"bytes,5,opt,name=local_tunnel_ip,json=localTunnelIp,proto3" json:"local_tunnel_ip,omitempty"`
	// Remote Tunnel IP Address
	//
	// x-displayName: "Remote Tunnel IP Address/Prefix Length"
	// x-example: "10.10.15.2/24"
	// x-inlineHint: "Specify the IP Address/Prefix Length of the tunnel on the remote gateway. Recommended to use same subnet as local_tunnel_ip"
	// x-required
	// For a particular tunnel on a node, specify the remote tunnel IP Address i.e. the IP address of the tunnel on the remote gateway and a subnet prefix length
	RemoteTunnelIp string `protobuf:"bytes,6,opt,name=remote_tunnel_ip,json=remoteTunnelIp,proto3" json:"remote_tunnel_ip,omitempty"`
}

func (m *TunnelEndpoint) Reset()      { *m = TunnelEndpoint{} }
func (*TunnelEndpoint) ProtoMessage() {}
func (*TunnelEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_763e4a27fb3eeb69, []int{6}
}
func (m *TunnelEndpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TunnelEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TunnelEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelEndpoint.Merge(m, src)
}
func (m *TunnelEndpoint) XXX_Size() int {
	return m.Size()
}
func (m *TunnelEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelEndpoint proto.InternalMessageInfo

func (m *TunnelEndpoint) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *TunnelEndpoint) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *TunnelEndpoint) GetLocalTunnelIp() string {
	if m != nil {
		return m.LocalTunnelIp
	}
	return ""
}

func (m *TunnelEndpoint) GetRemoteTunnelIp() string {
	if m != nil {
		return m.RemoteTunnelIp
	}
	return ""
}

// TunnelParameters
//
// x-displayName: "Configure IPSec Tunnel Parameters"
// In this section, we will configure the tunnel parameters, source, destination, IP addresses,  and segment.
type TunnelParameters struct {
	// Remote Gateway IP Address
	//
	// x-displayName: "Remote Gateway IP Address"
	// x-required
	// This is the reachable address for the remote gateway. For instance if the remote gateway is reachable over the public internet with a public address, then the remote Gateway IP Address would be this public address.
	PeerIpAddress *schema.Ipv4AddressType `protobuf:"bytes,1,opt,name=peer_ip_address,json=peerIpAddress,proto3" json:"peer_ip_address,omitempty"`
	// Tunnel Endpoint
	//
	// x-displayName: "Tunnel Endpoint"
	// x-required
	// Configure tunnel parameters, local and remote IP addresses
	TunnelEps []*TunnelEndpoint `protobuf:"bytes,2,rep,name=tunnel_eps,json=tunnelEps,proto3" json:"tunnel_eps,omitempty"`
	// Pre-Shared Key
	//
	// x-displayName: "Pre-Shared Key"
	// x-required
	// The IKE pre-shared key (PSK) is required to ensure the IKE peers can authenticate one another within IKE phase 1 negotiation.
	Psk string `protobuf:"bytes,5,opt,name=psk,proto3" json:"psk,omitempty"`
	// MTU
	//
	// x-displayName: "MTU"
	// x-inlineHint: "MTU range is between 512 and 1370 bytes"
	// x-required
	// The tunnel MTU defines the maximum size of the packet that can be sent through the tunnel without needing to be fragmented
	TunnelMtu uint32 `protobuf:"varint,6,opt,name=tunnel_mtu,json=tunnelMtu,proto3" json:"tunnel_mtu,omitempty"`
	// Payload Segment/Network
	//
	// x-displayName: "Segment/Network"
	// x-required
	//  Place the tunnel interface in one of the existing local virtual networks or the segments within the site. You can also create a new segment for this external connection.
	//
	// Types that are valid to be assigned to TunnelSourceVn:
	//	*TunnelParameters_SiteLocalNetwork
	//	*TunnelParameters_SiteLocalInsideNetwork
	//	*TunnelParameters_Segment
	TunnelSourceVn isTunnelParameters_TunnelSourceVn `protobuf_oneof:"tunnel_source_vn"`
}

func (m *TunnelParameters) Reset()      { *m = TunnelParameters{} }
func (*TunnelParameters) ProtoMessage() {}
func (*TunnelParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_763e4a27fb3eeb69, []int{7}
}
func (m *TunnelParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TunnelParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TunnelParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelParameters.Merge(m, src)
}
func (m *TunnelParameters) XXX_Size() int {
	return m.Size()
}
func (m *TunnelParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelParameters.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelParameters proto.InternalMessageInfo

type isTunnelParameters_TunnelSourceVn interface {
	isTunnelParameters_TunnelSourceVn()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TunnelParameters_SiteLocalNetwork struct {
	SiteLocalNetwork *schema.Empty `protobuf:"bytes,9,opt,name=site_local_network,json=siteLocalNetwork,proto3,oneof" json:"site_local_network,omitempty"`
}
type TunnelParameters_SiteLocalInsideNetwork struct {
	SiteLocalInsideNetwork *schema.Empty `protobuf:"bytes,10,opt,name=site_local_inside_network,json=siteLocalInsideNetwork,proto3,oneof" json:"site_local_inside_network,omitempty"`
}
type TunnelParameters_Segment struct {
	Segment *schema.SegmentRefType `protobuf:"bytes,12,opt,name=segment,proto3,oneof" json:"segment,omitempty"`
}

func (*TunnelParameters_SiteLocalNetwork) isTunnelParameters_TunnelSourceVn()       {}
func (*TunnelParameters_SiteLocalInsideNetwork) isTunnelParameters_TunnelSourceVn() {}
func (*TunnelParameters_Segment) isTunnelParameters_TunnelSourceVn()                {}

func (m *TunnelParameters) GetTunnelSourceVn() isTunnelParameters_TunnelSourceVn {
	if m != nil {
		return m.TunnelSourceVn
	}
	return nil
}

func (m *TunnelParameters) GetPeerIpAddress() *schema.Ipv4AddressType {
	if m != nil {
		return m.PeerIpAddress
	}
	return nil
}

func (m *TunnelParameters) GetTunnelEps() []*TunnelEndpoint {
	if m != nil {
		return m.TunnelEps
	}
	return nil
}

func (m *TunnelParameters) GetPsk() string {
	if m != nil {
		return m.Psk
	}
	return ""
}

func (m *TunnelParameters) GetTunnelMtu() uint32 {
	if m != nil {
		return m.TunnelMtu
	}
	return 0
}

func (m *TunnelParameters) GetSiteLocalNetwork() *schema.Empty {
	if x, ok := m.GetTunnelSourceVn().(*TunnelParameters_SiteLocalNetwork); ok {
		return x.SiteLocalNetwork
	}
	return nil
}

func (m *TunnelParameters) GetSiteLocalInsideNetwork() *schema.Empty {
	if x, ok := m.GetTunnelSourceVn().(*TunnelParameters_SiteLocalInsideNetwork); ok {
		return x.SiteLocalInsideNetwork
	}
	return nil
}

func (m *TunnelParameters) GetSegment() *schema.SegmentRefType {
	if x, ok := m.GetTunnelSourceVn().(*TunnelParameters_Segment); ok {
		return x.Segment
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TunnelParameters) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TunnelParameters_SiteLocalNetwork)(nil),
		(*TunnelParameters_SiteLocalInsideNetwork)(nil),
		(*TunnelParameters_Segment)(nil),
	}
}

// GRE Tunnel Parameters
//
// x-displayName: "GRE Tunnel Parameters"
// GRE configuration parameters required for GRE Connection type
type GRETunnelParameters struct {
	// Tunnel Peer IP address
	//
	// x-displayName: "Peer IP Address"
	// Configure tunnel remote endpoint's IP address
	PeerIpAddress *schema.Ipv4AddressType `protobuf:"bytes,2,opt,name=peer_ip_address,json=peerIpAddress,proto3" json:"peer_ip_address,omitempty"`
	// Tunnel Endpoint
	//
	// x-displayName: "Tunnel Endpoint"
	// x-required
	// Configure tunnel parameters, source, destination, IP addresses.
	TunnelEps []*TunnelEndpoint `protobuf:"bytes,1,rep,name=tunnel_eps,json=tunnelEps,proto3" json:"tunnel_eps,omitempty"`
	// Tunnel MTU
	//
	// x-displayName: "Tunnel MTU"
	// Configure MTU for the GRE tunnel interface.
	TunnelMtu uint32 `protobuf:"varint,5,opt,name=tunnel_mtu,json=tunnelMtu,proto3" json:"tunnel_mtu,omitempty"`
	// Tunnel Source Segment
	//
	// x-displayName: "Tunnel Source Segment(VN)"
	// Configure Virtual Network to which the tunnel payload belongs.
	//
	// Types that are valid to be assigned to TunnelSourceVn:
	//	*GRETunnelParameters_SiteLocalNetwork
	//	*GRETunnelParameters_SiteLocalInsideNetwork
	//	*GRETunnelParameters_Segment
	TunnelSourceVn isGRETunnelParameters_TunnelSourceVn `protobuf_oneof:"tunnel_source_vn"`
}

func (m *GRETunnelParameters) Reset()      { *m = GRETunnelParameters{} }
func (*GRETunnelParameters) ProtoMessage() {}
func (*GRETunnelParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_763e4a27fb3eeb69, []int{8}
}
func (m *GRETunnelParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GRETunnelParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GRETunnelParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRETunnelParameters.Merge(m, src)
}
func (m *GRETunnelParameters) XXX_Size() int {
	return m.Size()
}
func (m *GRETunnelParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_GRETunnelParameters.DiscardUnknown(m)
}

var xxx_messageInfo_GRETunnelParameters proto.InternalMessageInfo

type isGRETunnelParameters_TunnelSourceVn interface {
	isGRETunnelParameters_TunnelSourceVn()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GRETunnelParameters_SiteLocalNetwork struct {
	SiteLocalNetwork *schema.Empty `protobuf:"bytes,9,opt,name=site_local_network,json=siteLocalNetwork,proto3,oneof" json:"site_local_network,omitempty"`
}
type GRETunnelParameters_SiteLocalInsideNetwork struct {
	SiteLocalInsideNetwork *schema.Empty `protobuf:"bytes,10,opt,name=site_local_inside_network,json=siteLocalInsideNetwork,proto3,oneof" json:"site_local_inside_network,omitempty"`
}
type GRETunnelParameters_Segment struct {
	Segment *schema.SegmentRefType `protobuf:"bytes,12,opt,name=segment,proto3,oneof" json:"segment,omitempty"`
}

func (*GRETunnelParameters_SiteLocalNetwork) isGRETunnelParameters_TunnelSourceVn()       {}
func (*GRETunnelParameters_SiteLocalInsideNetwork) isGRETunnelParameters_TunnelSourceVn() {}
func (*GRETunnelParameters_Segment) isGRETunnelParameters_TunnelSourceVn()                {}

func (m *GRETunnelParameters) GetTunnelSourceVn() isGRETunnelParameters_TunnelSourceVn {
	if m != nil {
		return m.TunnelSourceVn
	}
	return nil
}

func (m *GRETunnelParameters) GetPeerIpAddress() *schema.Ipv4AddressType {
	if m != nil {
		return m.PeerIpAddress
	}
	return nil
}

func (m *GRETunnelParameters) GetTunnelEps() []*TunnelEndpoint {
	if m != nil {
		return m.TunnelEps
	}
	return nil
}

func (m *GRETunnelParameters) GetTunnelMtu() uint32 {
	if m != nil {
		return m.TunnelMtu
	}
	return 0
}

func (m *GRETunnelParameters) GetSiteLocalNetwork() *schema.Empty {
	if x, ok := m.GetTunnelSourceVn().(*GRETunnelParameters_SiteLocalNetwork); ok {
		return x.SiteLocalNetwork
	}
	return nil
}

func (m *GRETunnelParameters) GetSiteLocalInsideNetwork() *schema.Empty {
	if x, ok := m.GetTunnelSourceVn().(*GRETunnelParameters_SiteLocalInsideNetwork); ok {
		return x.SiteLocalInsideNetwork
	}
	return nil
}

func (m *GRETunnelParameters) GetSegment() *schema.SegmentRefType {
	if x, ok := m.GetTunnelSourceVn().(*GRETunnelParameters_Segment); ok {
		return x.Segment
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GRETunnelParameters) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GRETunnelParameters_SiteLocalNetwork)(nil),
		(*GRETunnelParameters_SiteLocalInsideNetwork)(nil),
		(*GRETunnelParameters_Segment)(nil),
	}
}

// CreateSpecType
//
// x-displayName: "Create external_connector configuration"
// Shape of the external_connector configuration specification
type CreateSpecType struct {
	CeSiteReference *views.ObjectRefType `protobuf:"bytes,1,opt,name=ce_site_reference,json=ceSiteReference,proto3" json:"ce_site_reference,omitempty"`
	// Types that are valid to be assigned to ConnectionType:
	//	*CreateSpecType_Ipsec
	//	*CreateSpecType_Gre
	//	*CreateSpecType_DirectConnection
	ConnectionType isCreateSpecType_ConnectionType `protobuf_oneof:"connection_type"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_763e4a27fb3eeb69, []int{9}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_ConnectionType interface {
	isCreateSpecType_ConnectionType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Ipsec struct {
	Ipsec *ConnectionTypeIPSec `protobuf:"bytes,3,opt,name=ipsec,proto3,oneof" json:"ipsec,omitempty"`
}
type CreateSpecType_Gre struct {
	Gre *ConnectionTypeGRE `protobuf:"bytes,4,opt,name=gre,proto3,oneof" json:"gre,omitempty"`
}
type CreateSpecType_DirectConnection struct {
	DirectConnection *ConnectionTypeDirect `protobuf:"bytes,5,opt,name=direct_connection,json=directConnection,proto3,oneof" json:"direct_connection,omitempty"`
}

func (*CreateSpecType_Ipsec) isCreateSpecType_ConnectionType()            {}
func (*CreateSpecType_Gre) isCreateSpecType_ConnectionType()              {}
func (*CreateSpecType_DirectConnection) isCreateSpecType_ConnectionType() {}

func (m *CreateSpecType) GetConnectionType() isCreateSpecType_ConnectionType {
	if m != nil {
		return m.ConnectionType
	}
	return nil
}

func (m *CreateSpecType) GetCeSiteReference() *views.ObjectRefType {
	if m != nil {
		return m.CeSiteReference
	}
	return nil
}

func (m *CreateSpecType) GetIpsec() *ConnectionTypeIPSec {
	if x, ok := m.GetConnectionType().(*CreateSpecType_Ipsec); ok {
		return x.Ipsec
	}
	return nil
}

func (m *CreateSpecType) GetGre() *ConnectionTypeGRE {
	if x, ok := m.GetConnectionType().(*CreateSpecType_Gre); ok {
		return x.Gre
	}
	return nil
}

func (m *CreateSpecType) GetDirectConnection() *ConnectionTypeDirect {
	if x, ok := m.GetConnectionType().(*CreateSpecType_DirectConnection); ok {
		return x.DirectConnection
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Ipsec)(nil),
		(*CreateSpecType_Gre)(nil),
		(*CreateSpecType_DirectConnection)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace external_connector configuration"
// Shape of the external_connector configuration specification
type ReplaceSpecType struct {
	CeSiteReference *views.ObjectRefType `protobuf:"bytes,1,opt,name=ce_site_reference,json=ceSiteReference,proto3" json:"ce_site_reference,omitempty"`
	// Types that are valid to be assigned to ConnectionType:
	//	*ReplaceSpecType_Ipsec
	//	*ReplaceSpecType_Gre
	//	*ReplaceSpecType_DirectConnection
	ConnectionType isReplaceSpecType_ConnectionType `protobuf_oneof:"connection_type"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_763e4a27fb3eeb69, []int{10}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_ConnectionType interface {
	isReplaceSpecType_ConnectionType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Ipsec struct {
	Ipsec *ConnectionTypeIPSec `protobuf:"bytes,3,opt,name=ipsec,proto3,oneof" json:"ipsec,omitempty"`
}
type ReplaceSpecType_Gre struct {
	Gre *ConnectionTypeGRE `protobuf:"bytes,4,opt,name=gre,proto3,oneof" json:"gre,omitempty"`
}
type ReplaceSpecType_DirectConnection struct {
	DirectConnection *ConnectionTypeDirect `protobuf:"bytes,5,opt,name=direct_connection,json=directConnection,proto3,oneof" json:"direct_connection,omitempty"`
}

func (*ReplaceSpecType_Ipsec) isReplaceSpecType_ConnectionType()            {}
func (*ReplaceSpecType_Gre) isReplaceSpecType_ConnectionType()              {}
func (*ReplaceSpecType_DirectConnection) isReplaceSpecType_ConnectionType() {}

func (m *ReplaceSpecType) GetConnectionType() isReplaceSpecType_ConnectionType {
	if m != nil {
		return m.ConnectionType
	}
	return nil
}

func (m *ReplaceSpecType) GetCeSiteReference() *views.ObjectRefType {
	if m != nil {
		return m.CeSiteReference
	}
	return nil
}

func (m *ReplaceSpecType) GetIpsec() *ConnectionTypeIPSec {
	if x, ok := m.GetConnectionType().(*ReplaceSpecType_Ipsec); ok {
		return x.Ipsec
	}
	return nil
}

func (m *ReplaceSpecType) GetGre() *ConnectionTypeGRE {
	if x, ok := m.GetConnectionType().(*ReplaceSpecType_Gre); ok {
		return x.Gre
	}
	return nil
}

func (m *ReplaceSpecType) GetDirectConnection() *ConnectionTypeDirect {
	if x, ok := m.GetConnectionType().(*ReplaceSpecType_DirectConnection); ok {
		return x.DirectConnection
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Ipsec)(nil),
		(*ReplaceSpecType_Gre)(nil),
		(*ReplaceSpecType_DirectConnection)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get external_connector configuration"
// Shape of the external_connector configuration specification
type GetSpecType struct {
	CeSiteReference *views.ObjectRefType `protobuf:"bytes,1,opt,name=ce_site_reference,json=ceSiteReference,proto3" json:"ce_site_reference,omitempty"`
	// Types that are valid to be assigned to ConnectionType:
	//	*GetSpecType_Ipsec
	//	*GetSpecType_Gre
	//	*GetSpecType_DirectConnection
	ConnectionType isGetSpecType_ConnectionType `protobuf_oneof:"connection_type"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_763e4a27fb3eeb69, []int{11}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_ConnectionType interface {
	isGetSpecType_ConnectionType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Ipsec struct {
	Ipsec *ConnectionTypeIPSec `protobuf:"bytes,3,opt,name=ipsec,proto3,oneof" json:"ipsec,omitempty"`
}
type GetSpecType_Gre struct {
	Gre *ConnectionTypeGRE `protobuf:"bytes,4,opt,name=gre,proto3,oneof" json:"gre,omitempty"`
}
type GetSpecType_DirectConnection struct {
	DirectConnection *ConnectionTypeDirect `protobuf:"bytes,5,opt,name=direct_connection,json=directConnection,proto3,oneof" json:"direct_connection,omitempty"`
}

func (*GetSpecType_Ipsec) isGetSpecType_ConnectionType()            {}
func (*GetSpecType_Gre) isGetSpecType_ConnectionType()              {}
func (*GetSpecType_DirectConnection) isGetSpecType_ConnectionType() {}

func (m *GetSpecType) GetConnectionType() isGetSpecType_ConnectionType {
	if m != nil {
		return m.ConnectionType
	}
	return nil
}

func (m *GetSpecType) GetCeSiteReference() *views.ObjectRefType {
	if m != nil {
		return m.CeSiteReference
	}
	return nil
}

func (m *GetSpecType) GetIpsec() *ConnectionTypeIPSec {
	if x, ok := m.GetConnectionType().(*GetSpecType_Ipsec); ok {
		return x.Ipsec
	}
	return nil
}

func (m *GetSpecType) GetGre() *ConnectionTypeGRE {
	if x, ok := m.GetConnectionType().(*GetSpecType_Gre); ok {
		return x.Gre
	}
	return nil
}

func (m *GetSpecType) GetDirectConnection() *ConnectionTypeDirect {
	if x, ok := m.GetConnectionType().(*GetSpecType_DirectConnection); ok {
		return x.DirectConnection
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Ipsec)(nil),
		(*GetSpecType_Gre)(nil),
		(*GetSpecType_DirectConnection)(nil),
	}
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.external_connector.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.external_connector.GlobalSpecType")
	proto.RegisterType((*ConnectionTypeIPSec)(nil), "ves.io.schema.views.external_connector.ConnectionTypeIPSec")
	golang_proto.RegisterType((*ConnectionTypeIPSec)(nil), "ves.io.schema.views.external_connector.ConnectionTypeIPSec")
	proto.RegisterType((*ConnectionTypeGRE)(nil), "ves.io.schema.views.external_connector.ConnectionTypeGRE")
	golang_proto.RegisterType((*ConnectionTypeGRE)(nil), "ves.io.schema.views.external_connector.ConnectionTypeGRE")
	proto.RegisterType((*ConnectionTypeDirect)(nil), "ves.io.schema.views.external_connector.ConnectionTypeDirect")
	golang_proto.RegisterType((*ConnectionTypeDirect)(nil), "ves.io.schema.views.external_connector.ConnectionTypeDirect")
	proto.RegisterType((*IkeParameters)(nil), "ves.io.schema.views.external_connector.IkeParameters")
	golang_proto.RegisterType((*IkeParameters)(nil), "ves.io.schema.views.external_connector.IkeParameters")
	proto.RegisterType((*DpdKeepAliveTimer)(nil), "ves.io.schema.views.external_connector.DpdKeepAliveTimer")
	golang_proto.RegisterType((*DpdKeepAliveTimer)(nil), "ves.io.schema.views.external_connector.DpdKeepAliveTimer")
	proto.RegisterType((*TunnelEndpoint)(nil), "ves.io.schema.views.external_connector.TunnelEndpoint")
	golang_proto.RegisterType((*TunnelEndpoint)(nil), "ves.io.schema.views.external_connector.TunnelEndpoint")
	proto.RegisterType((*TunnelParameters)(nil), "ves.io.schema.views.external_connector.TunnelParameters")
	golang_proto.RegisterType((*TunnelParameters)(nil), "ves.io.schema.views.external_connector.TunnelParameters")
	proto.RegisterType((*GRETunnelParameters)(nil), "ves.io.schema.views.external_connector.GRETunnelParameters")
	golang_proto.RegisterType((*GRETunnelParameters)(nil), "ves.io.schema.views.external_connector.GRETunnelParameters")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.external_connector.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.external_connector.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.external_connector.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.external_connector.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.external_connector.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.external_connector.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/external_connector/types.proto", fileDescriptor_763e4a27fb3eeb69)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/external_connector/types.proto", fileDescriptor_763e4a27fb3eeb69)
}

var fileDescriptor_763e4a27fb3eeb69 = []byte{
	// 1694 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4f, 0x6c, 0xdb, 0xd6,
	0x19, 0xd7, 0x13, 0x69, 0x9b, 0xfe, 0x64, 0xc9, 0x14, 0xfd, 0x8f, 0xf1, 0x3a, 0x45, 0x13, 0xb6,
	0xce, 0xf1, 0x14, 0x29, 0xa2, 0xed, 0xa0, 0xc9, 0x86, 0x00, 0x55, 0xec, 0xc5, 0x52, 0xd7, 0xcc,
	0xa3, 0x03, 0x0c, 0xe8, 0x0a, 0x10, 0x34, 0xf9, 0x59, 0xe6, 0x4c, 0x91, 0x1c, 0x49, 0x39, 0xcd,
	0xc1, 0x40, 0xb0, 0x53, 0xb0, 0xd3, 0x90, 0xcb, 0x80, 0x9d, 0x76, 0x1c, 0x72, 0xdf, 0xa5, 0x34,
	0x06, 0xaf, 0x40, 0x81, 0xa2, 0x27, 0x1d, 0x83, 0x9d, 0x1a, 0x19, 0x03, 0xd2, 0x5b, 0x91, 0x53,
	0xb1, 0xd3, 0xc0, 0x47, 0xfd, 0x97, 0xe6, 0x3a, 0xe9, 0x56, 0x20, 0x40, 0x6e, 0xe4, 0x7b, 0xdf,
	0xef, 0xf7, 0xfd, 0xfb, 0xe9, 0x3d, 0x7d, 0x04, 0xe9, 0x08, 0xbd, 0x82, 0x61, 0x17, 0x3d, 0xed,
	0x00, 0xeb, 0x6a, 0xf1, 0xc8, 0xc0, 0xfb, 0x5e, 0x11, 0x3f, 0xf2, 0xd1, 0xb5, 0x54, 0x53, 0xd1,
	0x6c, 0xcb, 0x42, 0xcd, 0xb7, 0xdd, 0xa2, 0xff, 0xc0, 0x41, 0xaf, 0xe0, 0xb8, 0xb6, 0x6f, 0x0b,
	0x6f, 0x47, 0x98, 0x42, 0x84, 0x29, 0x50, 0x4c, 0x61, 0x14, 0xb3, 0x7c, 0xb5, 0x66, 0xf8, 0x07,
	0x8d, 0xbd, 0x82, 0x66, 0xd7, 0x8b, 0x35, 0xbb, 0x66, 0x17, 0x29, 0x7c, 0xaf, 0xb1, 0x4f, 0xdf,
	0xe8, 0x0b, 0x7d, 0x8a, 0x68, 0x97, 0x97, 0x06, 0x43, 0xb1, 0xd0, 0x6f, 0x6f, 0x7c, 0x6f, 0x70,
	0xc3, 0x76, 0x7c, 0xc3, 0xb6, 0xda, 0xc1, 0x2c, 0x5f, 0x1a, 0xdc, 0xec, 0x8b, 0x73, 0xf9, 0xad,
	0xa1, 0xdc, 0x54, 0xd3, 0xd0, 0x55, 0x1f, 0xdb, 0xbb, 0xd9, 0xd1, 0xcc, 0x95, 0x41, 0xea, 0xcb,
	0xe3, 0x6a, 0xd3, 0xe7, 0x20, 0xf7, 0x29, 0x0b, 0xa9, 0x3b, 0xa6, 0xbd, 0xa7, 0x9a, 0xbb, 0x0e,
	0x6a, 0xf7, 0x1e, 0x38, 0x28, 0xfc, 0x06, 0xd2, 0x1a, 0x2a, 0x9e, 0xe1, 0xa3, 0xe2, 0xe2, 0x3e,
	0xba, 0x68, 0x69, 0x28, 0x92, 0x2c, 0x59, 0x49, 0x48, 0xb9, 0xc2, 0xb8, 0xba, 0xfd, 0x72, 0xef,
	0xb7, 0xa8, 0xf9, 0x32, 0xee, 0x87, 0xf0, 0x72, 0xe2, 0xc9, 0x31, 0x1b, 0x82, 0x1f, 0x9e, 0x10,
	0x22, 0xcf, 0x6a, 0xb8, 0x6b, 0xf8, 0x28, 0x77, 0x78, 0x84, 0x5d, 0x98, 0x30, 0x1c, 0x0f, 0x35,
	0x91, 0xa1, 0x84, 0x3f, 0x2d, 0x5c, 0xac, 0x11, 0x85, 0xdb, 0xd1, 0x93, 0x61, 0x5b, 0xa1, 0x93,
	0xca, 0xce, 0x2e, 0x6a, 0xdb, 0x31, 0x39, 0xe2, 0x12, 0x76, 0x81, 0xa9, 0xb9, 0x28, 0xb2, 0x94,
	0xf2, 0xc6, 0xab, 0x51, 0xde, 0x91, 0xb7, 0xca, 0xec, 0xf3, 0x80, 0x90, 0xed, 0x98, 0x1c, 0xb2,
	0x09, 0xbf, 0x83, 0xb4, 0x6e, 0xb8, 0xa8, 0xf9, 0x1d, 0x88, 0x61, 0x5b, 0xe2, 0x04, 0x75, 0xf1,
	0xb3, 0x57, 0x73, 0xb1, 0x49, 0xe9, 0xba, 0x5e, 0xf8, 0x88, 0xbe, 0x67, 0x23, 0x7c, 0x00, 0x49,
	0xda, 0x43, 0xc3, 0x8a, 0x98, 0xc4, 0xe7, 0x53, 0x17, 0x2e, 0x3b, 0xff, 0xe4, 0x78, 0x10, 0x2c,
	0xcf, 0x84, 0xaf, 0x95, 0xf6, 0xdb, 0xcd, 0x8d, 0x4f, 0x02, 0x52, 0x82, 0x45, 0x48, 0xdf, 0xde,
	0xca, 0x86, 0x2d, 0xc9, 0xf6, 0x7a, 0x42, 0x4a, 0xb0, 0x04, 0x42, 0x2f, 0x8e, 0xec, 0x26, 0xfa,
	0xaa, 0x61, 0x7a, 0x02, 0x91, 0xca, 0x59, 0x98, 0xed, 0xa5, 0xaf, 0x84, 0xca, 0x11, 0x92, 0xa7,
	0x01, 0x61, 0x9a, 0x01, 0x89, 0xb7, 0x02, 0x42, 0xd6, 0xaa, 0x2c, 0x17, 0xe7, 0x99, 0xdc, 0xbf,
	0x08, 0xcc, 0x8d, 0xe9, 0x91, 0xf0, 0x21, 0xa4, 0x8c, 0x43, 0x54, 0x1c, 0xd5, 0x55, 0xeb, 0xe8,
	0xa3, 0xeb, 0xb5, 0x95, 0xb4, 0x71, 0xd1, 0x12, 0x56, 0x0e, 0x71, 0xa7, 0x0b, 0x96, 0x93, 0x46,
	0xff, 0xab, 0xe0, 0xc0, 0x12, 0x55, 0x80, 0xe2, 0x37, 0x2c, 0x0b, 0xcd, 0x7e, 0x37, 0x71, 0xea,
	0xe6, 0x9d, 0x8b, 0xba, 0xb9, 0x47, 0x09, 0xfa, 0x3c, 0x2d, 0x50, 0xe2, 0xe1, 0xe5, 0xdc, 0x7d,
	0x48, 0x8f, 0xe8, 0x46, 0xd8, 0x83, 0x54, 0xcd, 0x1d, 0x93, 0xe4, 0x85, 0xd5, 0x7d, 0x47, 0xde,
	0x1a, 0x09, 0x20, 0x59, 0x73, 0xfb, 0x52, 0xcd, 0x2d, 0xc2, 0xfc, 0x38, 0x35, 0xe5, 0xfe, 0xc2,
	0x41, 0x72, 0xa0, 0x46, 0x42, 0x0d, 0x04, 0x5a, 0xf2, 0x03, 0xd5, 0xc3, 0x92, 0xe2, 0xb8, 0xf6,
	0xbe, 0x61, 0xbe, 0xcc, 0x0f, 0x78, 0xe1, 0xc9, 0xf1, 0x18, 0x02, 0x99, 0x0f, 0x4b, 0x4f, 0x97,
	0x76, 0xa2, 0x95, 0x01, 0x47, 0x52, 0xd7, 0x51, 0xfc, 0xd5, 0x1c, 0x49, 0xa3, 0x8e, 0xa4, 0x8e,
	0xa3, 0x75, 0x98, 0x36, 0x2c, 0xc3, 0x37, 0x54, 0xdf, 0x76, 0xc5, 0x04, 0xe5, 0x9f, 0x1f, 0xe2,
	0xdf, 0xaa, 0x3b, 0xfe, 0x83, 0xed, 0x98, 0xdc, 0x33, 0x0c, 0x51, 0x2e, 0x7a, 0x8e, 0x6d, 0xe9,
	0xe8, 0x8a, 0x33, 0xe7, 0xa3, 0xba, 0x86, 0xc2, 0x0d, 0x98, 0xd1, 0x1d, 0x5d, 0xd1, 0x0d, 0x4f,
	0xdd, 0x33, 0x51, 0x17, 0x17, 0xcf, 0x01, 0x12, 0x39, 0xa1, 0x3b, 0xfa, 0x66, 0xdb, 0x54, 0x30,
	0x61, 0x3e, 0x84, 0x1e, 0x22, 0x3a, 0x8a, 0x6a, 0x1a, 0x47, 0xa8, 0xf8, 0x46, 0x1d, 0x5d, 0x71,
	0xe1, 0xe5, 0xce, 0xa5, 0x4d, 0x47, 0x7f, 0x0f, 0xd1, 0x79, 0x37, 0x64, 0xb8, 0x17, 0x12, 0x6c,
	0x13, 0x39, 0xad, 0x0f, 0x2f, 0x0a, 0x77, 0x41, 0x6c, 0x78, 0xa8, 0xe8, 0xb8, 0xaf, 0x36, 0x4c,
	0x5f, 0x31, 0x6d, 0x4d, 0x35, 0x95, 0xb0, 0x9c, 0x86, 0x2e, 0x5e, 0x39, 0x27, 0xe8, 0xb8, 0x3c,
	0xdf, 0xf0, 0x70, 0x33, 0x82, 0xfd, 0x22, 0x44, 0x55, 0x0e, 0xb1, 0xa2, 0x0b, 0xef, 0x41, 0xd2,
	0xd4, 0x14, 0xc3, 0x51, 0x54, 0x5d, 0x77, 0xd1, 0xf3, 0xc4, 0x55, 0x4a, 0xf2, 0xd6, 0x10, 0x49,
	0xc5, 0x79, 0x37, 0xda, 0xa7, 0x2d, 0x9c, 0x7a, 0x7a, 0x4c, 0xe8, 0x71, 0x16, 0x97, 0x13, 0xa6,
	0xd6, 0xdd, 0x13, 0x56, 0x21, 0x61, 0x6a, 0xca, 0x81, 0xed, 0xf9, 0x96, 0x5a, 0x47, 0xf1, 0x27,
	0x59, 0xb2, 0x32, 0xdd, 0x6f, 0x0c, 0xa6, 0xb6, 0xdd, 0xde, 0x14, 0x76, 0xe0, 0x52, 0x7f, 0x22,
	0x2e, 0xd6, 0x6d, 0x1f, 0x3b, 0x99, 0xac, 0x9d, 0x93, 0x09, 0x23, 0x2f, 0xf4, 0x32, 0x91, 0x29,
	0x2c, 0x4a, 0xa5, 0x0c, 0x49, 0xb7, 0xde, 0x9f, 0xca, 0xfa, 0x37, 0xa7, 0xb2, 0xcd, 0xc8, 0x09,
	0xb7, 0xde, 0xcb, 0xe0, 0x07, 0x90, 0x70, 0xeb, 0xbd, 0x0c, 0x36, 0xc2, 0x0c, 0xb6, 0x19, 0x19,
	0xdc, 0x7a, 0x27, 0xf0, 0x72, 0x16, 0x12, 0x75, 0x5b, 0x47, 0x45, 0x3b, 0xb0, 0x0d, 0x0d, 0x85,
	0xf4, 0x69, 0x40, 0x12, 0xcd, 0x80, 0x40, 0x2b, 0x20, 0x13, 0xa5, 0x52, 0xbe, 0x24, 0x95, 0x2f,
	0x03, 0x84, 0x8a, 0xe8, 0x33, 0x58, 0x68, 0x06, 0x64, 0x3e, 0x34, 0x90, 0xa4, 0xbc, 0x54, 0x2a,
	0xff, 0x10, 0x66, 0xfa, 0x1b, 0x27, 0xcc, 0x9f, 0x06, 0xe4, 0x4a, 0x33, 0x20, 0x2b, 0xad, 0x80,
	0x70, 0xeb, 0xa5, 0xfc, 0xba, 0x94, 0x5f, 0x5f, 0x2b, 0xff, 0x08, 0x92, 0x03, 0x55, 0xa1, 0x66,
	0x6b, 0xcd, 0x80, 0x48, 0xa1, 0xd9, 0x46, 0x29, 0xbf, 0x21, 0xe5, 0x37, 0xc2, 0x93, 0x18, 0xf8,
	0x44, 0x95, 0xe5, 0xe6, 0xf9, 0x85, 0x2a, 0xcb, 0xad, 0xf0, 0x57, 0xaa, 0x2c, 0x27, 0xf1, 0x6b,
	0xb9, 0x32, 0xa4, 0x47, 0x34, 0x25, 0x5c, 0x85, 0xa9, 0x50, 0x9d, 0x76, 0xc3, 0xa7, 0x47, 0x43,
	0xb2, 0x3c, 0xf7, 0x75, 0x40, 0x62, 0x8f, 0x4e, 0x08, 0xf9, 0xf8, 0xcb, 0x53, 0x66, 0x72, 0x95,
	0x15, 0x27, 0x56, 0x88, 0xdc, 0xb1, 0xc9, 0xfd, 0x81, 0x81, 0x54, 0x74, 0x44, 0x6d, 0x59, 0xba,
	0x63, 0x1b, 0x96, 0x2f, 0xac, 0x02, 0x6b, 0xd9, 0x7a, 0x74, 0xb2, 0x4c, 0x97, 0x17, 0x43, 0xf8,
	0xc7, 0x27, 0x24, 0xc5, 0xc5, 0x57, 0xc8, 0x35, 0x72, 0x73, 0x52, 0xb3, 0xad, 0x7d, 0xa3, 0x26,
	0x53, 0x9b, 0xe8, 0x17, 0xec, 0xa3, 0xbb, 0xaf, 0x6a, 0xd1, 0x09, 0xf1, 0xdf, 0x01, 0x3d, 0x43,
	0xe1, 0x3a, 0xcc, 0x46, 0xd5, 0x69, 0x1f, 0xef, 0x86, 0x43, 0x2f, 0xe0, 0xe9, 0x72, 0x8a, 0x62,
	0xbf, 0x3c, 0x65, 0x26, 0x5c, 0xe6, 0x6b, 0x42, 0xe4, 0x24, 0x35, 0x8b, 0xe2, 0xab, 0x38, 0xc2,
	0x3b, 0xc0, 0xb7, 0xeb, 0xd5, 0x03, 0x4e, 0x8e, 0x05, 0xa6, 0x22, 0xbb, 0x0e, 0xf2, 0xe6, 0x9f,
	0xc8, 0x8b, 0x5b, 0x53, 0xa5, 0xbc, 0x94, 0xdf, 0xc8, 0x5f, 0xff, 0x3c, 0x20, 0x8f, 0x08, 0xa4,
	0x80, 0xbd, 0x6b, 0xeb, 0xb8, 0x3c, 0x19, 0x65, 0x0b, 0x22, 0x4c, 0x57, 0x3a, 0x01, 0x2e, 0x27,
	0xfa, 0xd2, 0x82, 0x3c, 0x2c, 0xd1, 0x9f, 0x53, 0x36, 0x72, 0x9a, 0xad, 0xec, 0x64, 0xdb, 0x62,
	0x5a, 0x4e, 0x8f, 0x24, 0x02, 0x05, 0x10, 0x23, 0xc9, 0x8e, 0x31, 0x17, 0x46, 0xe3, 0xaf, 0xb2,
	0x1c, 0xc3, 0xb3, 0x55, 0x96, 0x63, 0xf9, 0x89, 0xdc, 0xdf, 0x58, 0xe0, 0x87, 0xef, 0x0b, 0xe1,
	0xe7, 0x30, 0xeb, 0x20, 0xba, 0xfd, 0xb2, 0x8f, 0xce, 0xfc, 0xcc, 0x88, 0xec, 0x8f, 0xd6, 0xfb,
	0x84, 0x2f, 0x27, 0x43, 0x58, 0x4f, 0xf8, 0x47, 0x00, 0x6d, 0xaf, 0xe8, 0x84, 0xd7, 0x28, 0xb3,
	0x92, 0x90, 0xae, 0xbf, 0xdc, 0x35, 0xda, 0x91, 0x48, 0xf9, 0x32, 0x2d, 0xf5, 0x63, 0x12, 0xe7,
	0xd9, 0xce, 0x13, 0x47, 0x5a, 0x5f, 0x7c, 0xca, 0x4c, 0x3e, 0x3e, 0x21, 0x71, 0x2e, 0x26, 0x4f,
	0x47, 0xae, 0xb6, 0x1c, 0x4f, 0xc8, 0x02, 0xe3, 0x78, 0x87, 0x9d, 0x06, 0x7f, 0x76, 0x4c, 0x5e,
	0x1c, 0x73, 0x32, 0xea, 0xaa, 0xe6, 0xa3, 0x2e, 0x87, 0x5b, 0xc2, 0xb5, 0x6e, 0x64, 0x75, 0xbf,
	0x41, 0x1b, 0x9a, 0x2c, 0xa7, 0x1f, 0x9d, 0x10, 0x08, 0xb9, 0xb9, 0xd5, 0x49, 0xf1, 0x9f, 0xb0,
	0xf2, 0x90, 0xed, 0x70, 0xbe, 0xef, 0x37, 0x84, 0x4d, 0x10, 0xe8, 0xff, 0xd8, 0xa8, 0xf8, 0x16,
	0xfa, 0xf7, 0x6d, 0xf7, 0x50, 0x9c, 0x3e, 0xf7, 0x2e, 0xe0, 0x43, 0x04, 0x6d, 0xe4, 0xdd, 0xc8,
	0x5e, 0xf8, 0x15, 0x5c, 0xea, 0x63, 0x31, 0x2c, 0xcf, 0xd0, 0xb1, 0x4b, 0x06, 0xe7, 0x92, 0x2d,
	0x76, 0xc9, 0x2a, 0x14, 0xd6, 0xa1, 0xbc, 0x01, 0x53, 0x1e, 0xd6, 0xea, 0x68, 0xf9, 0xed, 0x9b,
	0xe9, 0xfb, 0x43, 0x04, 0xbb, 0xd1, 0x6e, 0xfb, 0xaa, 0xdc, 0x8e, 0xc9, 0x1d, 0xfb, 0xf2, 0x8f,
	0x81, 0x6f, 0x57, 0xc1, 0xb3, 0x1b, 0xae, 0x86, 0xca, 0x91, 0x25, 0xcc, 0x9d, 0x06, 0x04, 0x9a,
	0x01, 0xe1, 0x5a, 0x01, 0x99, 0xba, 0x91, 0x2f, 0x5d, 0xcb, 0x97, 0xa4, 0x2a, 0xcb, 0x4d, 0xf1,
	0x5c, 0x95, 0xe5, 0x38, 0x7e, 0xba, 0xca, 0x72, 0x09, 0x7e, 0x26, 0xf7, 0x98, 0x85, 0xb9, 0x31,
	0x7f, 0x35, 0xc6, 0x49, 0x27, 0xfe, 0xed, 0xa5, 0x43, 0xbe, 0x33, 0xe9, 0xe4, 0x07, 0x84, 0x31,
	0x41, 0x85, 0x91, 0x7c, 0x23, 0x8a, 0x8b, 0x89, 0xe2, 0x1f, 0x0c, 0xa4, 0x6e, 0xbb, 0xa8, 0xfa,
	0xd8, 0x9d, 0x00, 0x7f, 0xfd, 0xed, 0x26, 0xc0, 0xa9, 0xf6, 0x04, 0xf8, 0x1d, 0x4d, 0x7f, 0xef,
	0xff, 0x6f, 0xa6, 0xbf, 0xce, 0xdc, 0x77, 0xf8, 0x7f, 0x9a, 0xfb, 0xc6, 0x4d, 0x7c, 0x37, 0x97,
	0x3e, 0xbf, 0x35, 0x34, 0x7e, 0xbf, 0xb8, 0xc5, 0x94, 0xf2, 0x52, 0xf9, 0xed, 0xd1, 0xb9, 0x6b,
	0xee, 0xf7, 0xff, 0x26, 0xc3, 0x8b, 0xed, 0xe9, 0xeb, 0x13, 0x06, 0x66, 0x65, 0x74, 0x4c, 0x55,
	0x7b, 0xd3, 0xc4, 0xd7, 0xb6, 0x89, 0x7f, 0x67, 0x20, 0x71, 0x07, 0xfd, 0x37, 0x0d, 0x7c, 0x4d,
	0x1b, 0x58, 0xfe, 0x33, 0x69, 0x3e, 0xcb, 0xc4, 0x9e, 0x3e, 0xcb, 0xc4, 0xbe, 0x7a, 0x96, 0x21,
	0x0f, 0x5b, 0x19, 0xf2, 0xd7, 0x56, 0x86, 0x7c, 0xd6, 0xca, 0x90, 0x66, 0x2b, 0x43, 0x9e, 0xb6,
	0x32, 0xe4, 0x8b, 0x56, 0x86, 0x3c, 0x6f, 0x65, 0x62, 0x5f, 0xb5, 0x32, 0xe4, 0x8f, 0x67, 0x99,
	0xd8, 0xe9, 0x59, 0x86, 0x34, 0xcf, 0x32, 0xb1, 0xa7, 0x67, 0x99, 0xd8, 0x07, 0x1f, 0xd6, 0x6c,
	0xe7, 0xb0, 0x56, 0x38, 0xb2, 0x4d, 0x1f, 0x5d, 0x57, 0x2d, 0x34, 0xbc, 0x22, 0x7d, 0xd8, 0xb7,
	0xdd, 0xfa, 0x55, 0xc7, 0xb5, 0x8f, 0x0c, 0x1d, 0xdd, 0xab, 0x9d, 0xed, 0xa2, 0xb3, 0x57, 0xb3,
	0x8b, 0xf8, 0x91, 0xdf, 0xfe, 0xb4, 0xf7, 0x0d, 0x5f, 0x3f, 0xf7, 0x26, 0xe9, 0xf7, 0xbe, 0xb5,
	0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x7d, 0xf2, 0x71, 0x2e, 0x15, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CeSiteReference.Equal(that1.CeSiteReference) {
		return false
	}
	if that1.ConnectionType == nil {
		if this.ConnectionType != nil {
			return false
		}
	} else if this.ConnectionType == nil {
		return false
	} else if !this.ConnectionType.Equal(that1.ConnectionType) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Ipsec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Ipsec)
	if !ok {
		that2, ok := that.(GlobalSpecType_Ipsec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipsec.Equal(that1.Ipsec) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Gre) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Gre)
	if !ok {
		that2, ok := that.(GlobalSpecType_Gre)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gre.Equal(that1.Gre) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DirectConnection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DirectConnection)
	if !ok {
		that2, ok := that.(GlobalSpecType_DirectConnection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnection.Equal(that1.DirectConnection) {
		return false
	}
	return true
}
func (this *ConnectionTypeIPSec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectionTypeIPSec)
	if !ok {
		that2, ok := that.(ConnectionTypeIPSec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IkeParameters.Equal(that1.IkeParameters) {
		return false
	}
	if !this.IpsecTunnelParameters.Equal(that1.IpsecTunnelParameters) {
		return false
	}
	return true
}
func (this *ConnectionTypeGRE) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectionTypeGRE)
	if !ok {
		that2, ok := that.(ConnectionTypeGRE)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GreParameters.Equal(that1.GreParameters) {
		return false
	}
	return true
}
func (this *ConnectionTypeDirect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectionTypeDirect)
	if !ok {
		that2, ok := that.(ConnectionTypeDirect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *IkeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IkeParameters)
	if !ok {
		that2, ok := that.(IkeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IkePhase1Profile.Equal(that1.IkePhase1Profile) {
		return false
	}
	if !this.IkePhase2Profile.Equal(that1.IkePhase2Profile) {
		return false
	}
	if that1.ModeChoice == nil {
		if this.ModeChoice != nil {
			return false
		}
	} else if this.ModeChoice == nil {
		return false
	} else if !this.ModeChoice.Equal(that1.ModeChoice) {
		return false
	}
	if that1.DpdChoice == nil {
		if this.DpdChoice != nil {
			return false
		}
	} else if this.DpdChoice == nil {
		return false
	} else if !this.DpdChoice.Equal(that1.DpdChoice) {
		return false
	}
	if that1.LocalIkeId == nil {
		if this.LocalIkeId != nil {
			return false
		}
	} else if this.LocalIkeId == nil {
		return false
	} else if !this.LocalIkeId.Equal(that1.LocalIkeId) {
		return false
	}
	if that1.RemoteIkeId == nil {
		if this.RemoteIkeId != nil {
			return false
		}
	} else if this.RemoteIkeId == nil {
		return false
	} else if !this.RemoteIkeId.Equal(that1.RemoteIkeId) {
		return false
	}
	return true
}
func (this *IkeParameters_Initiator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IkeParameters_Initiator)
	if !ok {
		that2, ok := that.(IkeParameters_Initiator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Initiator.Equal(that1.Initiator) {
		return false
	}
	return true
}
func (this *IkeParameters_Responder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IkeParameters_Responder)
	if !ok {
		that2, ok := that.(IkeParameters_Responder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Responder.Equal(that1.Responder) {
		return false
	}
	return true
}
func (this *IkeParameters_DpdDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IkeParameters_DpdDisabled)
	if !ok {
		that2, ok := that.(IkeParameters_DpdDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DpdDisabled.Equal(that1.DpdDisabled) {
		return false
	}
	return true
}
func (this *IkeParameters_DpdKeepAliveTimer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IkeParameters_DpdKeepAliveTimer)
	if !ok {
		that2, ok := that.(IkeParameters_DpdKeepAliveTimer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DpdKeepAliveTimer.Equal(that1.DpdKeepAliveTimer) {
		return false
	}
	return true
}
func (this *IkeParameters_UseDefaultLocalIkeId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IkeParameters_UseDefaultLocalIkeId)
	if !ok {
		that2, ok := that.(IkeParameters_UseDefaultLocalIkeId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultLocalIkeId.Equal(that1.UseDefaultLocalIkeId) {
		return false
	}
	return true
}
func (this *IkeParameters_LcIpAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IkeParameters_LcIpAddress)
	if !ok {
		that2, ok := that.(IkeParameters_LcIpAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LcIpAddress.Equal(that1.LcIpAddress) {
		return false
	}
	return true
}
func (this *IkeParameters_LcHostname) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IkeParameters_LcHostname)
	if !ok {
		that2, ok := that.(IkeParameters_LcHostname)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LcHostname != that1.LcHostname {
		return false
	}
	return true
}
func (this *IkeParameters_UseDefaultRemoteIkeId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IkeParameters_UseDefaultRemoteIkeId)
	if !ok {
		that2, ok := that.(IkeParameters_UseDefaultRemoteIkeId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultRemoteIkeId.Equal(that1.UseDefaultRemoteIkeId) {
		return false
	}
	return true
}
func (this *IkeParameters_RmIpAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IkeParameters_RmIpAddress)
	if !ok {
		that2, ok := that.(IkeParameters_RmIpAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RmIpAddress.Equal(that1.RmIpAddress) {
		return false
	}
	return true
}
func (this *IkeParameters_RmHostname) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IkeParameters_RmHostname)
	if !ok {
		that2, ok := that.(IkeParameters_RmHostname)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RmHostname != that1.RmHostname {
		return false
	}
	return true
}
func (this *DpdKeepAliveTimer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DpdKeepAliveTimer)
	if !ok {
		that2, ok := that.(DpdKeepAliveTimer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	return true
}
func (this *TunnelEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TunnelEndpoint)
	if !ok {
		that2, ok := that.(TunnelEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Node != that1.Node {
		return false
	}
	if this.Interface != that1.Interface {
		return false
	}
	if this.LocalTunnelIp != that1.LocalTunnelIp {
		return false
	}
	if this.RemoteTunnelIp != that1.RemoteTunnelIp {
		return false
	}
	return true
}
func (this *TunnelParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TunnelParameters)
	if !ok {
		that2, ok := that.(TunnelParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PeerIpAddress.Equal(that1.PeerIpAddress) {
		return false
	}
	if len(this.TunnelEps) != len(that1.TunnelEps) {
		return false
	}
	for i := range this.TunnelEps {
		if !this.TunnelEps[i].Equal(that1.TunnelEps[i]) {
			return false
		}
	}
	if this.Psk != that1.Psk {
		return false
	}
	if this.TunnelMtu != that1.TunnelMtu {
		return false
	}
	if that1.TunnelSourceVn == nil {
		if this.TunnelSourceVn != nil {
			return false
		}
	} else if this.TunnelSourceVn == nil {
		return false
	} else if !this.TunnelSourceVn.Equal(that1.TunnelSourceVn) {
		return false
	}
	return true
}
func (this *TunnelParameters_SiteLocalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TunnelParameters_SiteLocalNetwork)
	if !ok {
		that2, ok := that.(TunnelParameters_SiteLocalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalNetwork.Equal(that1.SiteLocalNetwork) {
		return false
	}
	return true
}
func (this *TunnelParameters_SiteLocalInsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TunnelParameters_SiteLocalInsideNetwork)
	if !ok {
		that2, ok := that.(TunnelParameters_SiteLocalInsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalInsideNetwork.Equal(that1.SiteLocalInsideNetwork) {
		return false
	}
	return true
}
func (this *TunnelParameters_Segment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TunnelParameters_Segment)
	if !ok {
		that2, ok := that.(TunnelParameters_Segment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Segment.Equal(that1.Segment) {
		return false
	}
	return true
}
func (this *GRETunnelParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GRETunnelParameters)
	if !ok {
		that2, ok := that.(GRETunnelParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PeerIpAddress.Equal(that1.PeerIpAddress) {
		return false
	}
	if len(this.TunnelEps) != len(that1.TunnelEps) {
		return false
	}
	for i := range this.TunnelEps {
		if !this.TunnelEps[i].Equal(that1.TunnelEps[i]) {
			return false
		}
	}
	if this.TunnelMtu != that1.TunnelMtu {
		return false
	}
	if that1.TunnelSourceVn == nil {
		if this.TunnelSourceVn != nil {
			return false
		}
	} else if this.TunnelSourceVn == nil {
		return false
	} else if !this.TunnelSourceVn.Equal(that1.TunnelSourceVn) {
		return false
	}
	return true
}
func (this *GRETunnelParameters_SiteLocalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GRETunnelParameters_SiteLocalNetwork)
	if !ok {
		that2, ok := that.(GRETunnelParameters_SiteLocalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalNetwork.Equal(that1.SiteLocalNetwork) {
		return false
	}
	return true
}
func (this *GRETunnelParameters_SiteLocalInsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GRETunnelParameters_SiteLocalInsideNetwork)
	if !ok {
		that2, ok := that.(GRETunnelParameters_SiteLocalInsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalInsideNetwork.Equal(that1.SiteLocalInsideNetwork) {
		return false
	}
	return true
}
func (this *GRETunnelParameters_Segment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GRETunnelParameters_Segment)
	if !ok {
		that2, ok := that.(GRETunnelParameters_Segment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Segment.Equal(that1.Segment) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CeSiteReference.Equal(that1.CeSiteReference) {
		return false
	}
	if that1.ConnectionType == nil {
		if this.ConnectionType != nil {
			return false
		}
	} else if this.ConnectionType == nil {
		return false
	} else if !this.ConnectionType.Equal(that1.ConnectionType) {
		return false
	}
	return true
}
func (this *CreateSpecType_Ipsec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Ipsec)
	if !ok {
		that2, ok := that.(CreateSpecType_Ipsec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipsec.Equal(that1.Ipsec) {
		return false
	}
	return true
}
func (this *CreateSpecType_Gre) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Gre)
	if !ok {
		that2, ok := that.(CreateSpecType_Gre)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gre.Equal(that1.Gre) {
		return false
	}
	return true
}
func (this *CreateSpecType_DirectConnection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DirectConnection)
	if !ok {
		that2, ok := that.(CreateSpecType_DirectConnection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnection.Equal(that1.DirectConnection) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CeSiteReference.Equal(that1.CeSiteReference) {
		return false
	}
	if that1.ConnectionType == nil {
		if this.ConnectionType != nil {
			return false
		}
	} else if this.ConnectionType == nil {
		return false
	} else if !this.ConnectionType.Equal(that1.ConnectionType) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Ipsec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Ipsec)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Ipsec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipsec.Equal(that1.Ipsec) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Gre) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Gre)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Gre)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gre.Equal(that1.Gre) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DirectConnection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DirectConnection)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DirectConnection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnection.Equal(that1.DirectConnection) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CeSiteReference.Equal(that1.CeSiteReference) {
		return false
	}
	if that1.ConnectionType == nil {
		if this.ConnectionType != nil {
			return false
		}
	} else if this.ConnectionType == nil {
		return false
	} else if !this.ConnectionType.Equal(that1.ConnectionType) {
		return false
	}
	return true
}
func (this *GetSpecType_Ipsec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Ipsec)
	if !ok {
		that2, ok := that.(GetSpecType_Ipsec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipsec.Equal(that1.Ipsec) {
		return false
	}
	return true
}
func (this *GetSpecType_Gre) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Gre)
	if !ok {
		that2, ok := that.(GetSpecType_Gre)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gre.Equal(that1.Gre) {
		return false
	}
	return true
}
func (this *GetSpecType_DirectConnection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DirectConnection)
	if !ok {
		that2, ok := that.(GetSpecType_DirectConnection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnection.Equal(that1.DirectConnection) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&external_connector.GlobalSpecType{")
	if this.CeSiteReference != nil {
		s = append(s, "CeSiteReference: "+fmt.Sprintf("%#v", this.CeSiteReference)+",\n")
	}
	if this.ConnectionType != nil {
		s = append(s, "ConnectionType: "+fmt.Sprintf("%#v", this.ConnectionType)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Ipsec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.GlobalSpecType_Ipsec{` +
		`Ipsec:` + fmt.Sprintf("%#v", this.Ipsec) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Gre) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.GlobalSpecType_Gre{` +
		`Gre:` + fmt.Sprintf("%#v", this.Gre) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DirectConnection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.GlobalSpecType_DirectConnection{` +
		`DirectConnection:` + fmt.Sprintf("%#v", this.DirectConnection) + `}`}, ", ")
	return s
}
func (this *ConnectionTypeIPSec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&external_connector.ConnectionTypeIPSec{")
	if this.IkeParameters != nil {
		s = append(s, "IkeParameters: "+fmt.Sprintf("%#v", this.IkeParameters)+",\n")
	}
	if this.IpsecTunnelParameters != nil {
		s = append(s, "IpsecTunnelParameters: "+fmt.Sprintf("%#v", this.IpsecTunnelParameters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConnectionTypeGRE) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&external_connector.ConnectionTypeGRE{")
	if this.GreParameters != nil {
		s = append(s, "GreParameters: "+fmt.Sprintf("%#v", this.GreParameters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConnectionTypeDirect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&external_connector.ConnectionTypeDirect{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IkeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&external_connector.IkeParameters{")
	if this.IkePhase1Profile != nil {
		s = append(s, "IkePhase1Profile: "+fmt.Sprintf("%#v", this.IkePhase1Profile)+",\n")
	}
	if this.IkePhase2Profile != nil {
		s = append(s, "IkePhase2Profile: "+fmt.Sprintf("%#v", this.IkePhase2Profile)+",\n")
	}
	if this.ModeChoice != nil {
		s = append(s, "ModeChoice: "+fmt.Sprintf("%#v", this.ModeChoice)+",\n")
	}
	if this.DpdChoice != nil {
		s = append(s, "DpdChoice: "+fmt.Sprintf("%#v", this.DpdChoice)+",\n")
	}
	if this.LocalIkeId != nil {
		s = append(s, "LocalIkeId: "+fmt.Sprintf("%#v", this.LocalIkeId)+",\n")
	}
	if this.RemoteIkeId != nil {
		s = append(s, "RemoteIkeId: "+fmt.Sprintf("%#v", this.RemoteIkeId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IkeParameters_Initiator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.IkeParameters_Initiator{` +
		`Initiator:` + fmt.Sprintf("%#v", this.Initiator) + `}`}, ", ")
	return s
}
func (this *IkeParameters_Responder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.IkeParameters_Responder{` +
		`Responder:` + fmt.Sprintf("%#v", this.Responder) + `}`}, ", ")
	return s
}
func (this *IkeParameters_DpdDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.IkeParameters_DpdDisabled{` +
		`DpdDisabled:` + fmt.Sprintf("%#v", this.DpdDisabled) + `}`}, ", ")
	return s
}
func (this *IkeParameters_DpdKeepAliveTimer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.IkeParameters_DpdKeepAliveTimer{` +
		`DpdKeepAliveTimer:` + fmt.Sprintf("%#v", this.DpdKeepAliveTimer) + `}`}, ", ")
	return s
}
func (this *IkeParameters_UseDefaultLocalIkeId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.IkeParameters_UseDefaultLocalIkeId{` +
		`UseDefaultLocalIkeId:` + fmt.Sprintf("%#v", this.UseDefaultLocalIkeId) + `}`}, ", ")
	return s
}
func (this *IkeParameters_LcIpAddress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.IkeParameters_LcIpAddress{` +
		`LcIpAddress:` + fmt.Sprintf("%#v", this.LcIpAddress) + `}`}, ", ")
	return s
}
func (this *IkeParameters_LcHostname) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.IkeParameters_LcHostname{` +
		`LcHostname:` + fmt.Sprintf("%#v", this.LcHostname) + `}`}, ", ")
	return s
}
func (this *IkeParameters_UseDefaultRemoteIkeId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.IkeParameters_UseDefaultRemoteIkeId{` +
		`UseDefaultRemoteIkeId:` + fmt.Sprintf("%#v", this.UseDefaultRemoteIkeId) + `}`}, ", ")
	return s
}
func (this *IkeParameters_RmIpAddress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.IkeParameters_RmIpAddress{` +
		`RmIpAddress:` + fmt.Sprintf("%#v", this.RmIpAddress) + `}`}, ", ")
	return s
}
func (this *IkeParameters_RmHostname) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.IkeParameters_RmHostname{` +
		`RmHostname:` + fmt.Sprintf("%#v", this.RmHostname) + `}`}, ", ")
	return s
}
func (this *DpdKeepAliveTimer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&external_connector.DpdKeepAliveTimer{")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TunnelEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&external_connector.TunnelEndpoint{")
	s = append(s, "Node: "+fmt.Sprintf("%#v", this.Node)+",\n")
	s = append(s, "Interface: "+fmt.Sprintf("%#v", this.Interface)+",\n")
	s = append(s, "LocalTunnelIp: "+fmt.Sprintf("%#v", this.LocalTunnelIp)+",\n")
	s = append(s, "RemoteTunnelIp: "+fmt.Sprintf("%#v", this.RemoteTunnelIp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TunnelParameters) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&external_connector.TunnelParameters{")
	if this.PeerIpAddress != nil {
		s = append(s, "PeerIpAddress: "+fmt.Sprintf("%#v", this.PeerIpAddress)+",\n")
	}
	if this.TunnelEps != nil {
		s = append(s, "TunnelEps: "+fmt.Sprintf("%#v", this.TunnelEps)+",\n")
	}
	s = append(s, "Psk: "+fmt.Sprintf("%#v", this.Psk)+",\n")
	s = append(s, "TunnelMtu: "+fmt.Sprintf("%#v", this.TunnelMtu)+",\n")
	if this.TunnelSourceVn != nil {
		s = append(s, "TunnelSourceVn: "+fmt.Sprintf("%#v", this.TunnelSourceVn)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TunnelParameters_SiteLocalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.TunnelParameters_SiteLocalNetwork{` +
		`SiteLocalNetwork:` + fmt.Sprintf("%#v", this.SiteLocalNetwork) + `}`}, ", ")
	return s
}
func (this *TunnelParameters_SiteLocalInsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.TunnelParameters_SiteLocalInsideNetwork{` +
		`SiteLocalInsideNetwork:` + fmt.Sprintf("%#v", this.SiteLocalInsideNetwork) + `}`}, ", ")
	return s
}
func (this *TunnelParameters_Segment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.TunnelParameters_Segment{` +
		`Segment:` + fmt.Sprintf("%#v", this.Segment) + `}`}, ", ")
	return s
}
func (this *GRETunnelParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&external_connector.GRETunnelParameters{")
	if this.PeerIpAddress != nil {
		s = append(s, "PeerIpAddress: "+fmt.Sprintf("%#v", this.PeerIpAddress)+",\n")
	}
	if this.TunnelEps != nil {
		s = append(s, "TunnelEps: "+fmt.Sprintf("%#v", this.TunnelEps)+",\n")
	}
	s = append(s, "TunnelMtu: "+fmt.Sprintf("%#v", this.TunnelMtu)+",\n")
	if this.TunnelSourceVn != nil {
		s = append(s, "TunnelSourceVn: "+fmt.Sprintf("%#v", this.TunnelSourceVn)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GRETunnelParameters_SiteLocalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.GRETunnelParameters_SiteLocalNetwork{` +
		`SiteLocalNetwork:` + fmt.Sprintf("%#v", this.SiteLocalNetwork) + `}`}, ", ")
	return s
}
func (this *GRETunnelParameters_SiteLocalInsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.GRETunnelParameters_SiteLocalInsideNetwork{` +
		`SiteLocalInsideNetwork:` + fmt.Sprintf("%#v", this.SiteLocalInsideNetwork) + `}`}, ", ")
	return s
}
func (this *GRETunnelParameters_Segment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.GRETunnelParameters_Segment{` +
		`Segment:` + fmt.Sprintf("%#v", this.Segment) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&external_connector.CreateSpecType{")
	if this.CeSiteReference != nil {
		s = append(s, "CeSiteReference: "+fmt.Sprintf("%#v", this.CeSiteReference)+",\n")
	}
	if this.ConnectionType != nil {
		s = append(s, "ConnectionType: "+fmt.Sprintf("%#v", this.ConnectionType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Ipsec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.CreateSpecType_Ipsec{` +
		`Ipsec:` + fmt.Sprintf("%#v", this.Ipsec) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Gre) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.CreateSpecType_Gre{` +
		`Gre:` + fmt.Sprintf("%#v", this.Gre) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DirectConnection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.CreateSpecType_DirectConnection{` +
		`DirectConnection:` + fmt.Sprintf("%#v", this.DirectConnection) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&external_connector.ReplaceSpecType{")
	if this.CeSiteReference != nil {
		s = append(s, "CeSiteReference: "+fmt.Sprintf("%#v", this.CeSiteReference)+",\n")
	}
	if this.ConnectionType != nil {
		s = append(s, "ConnectionType: "+fmt.Sprintf("%#v", this.ConnectionType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Ipsec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.ReplaceSpecType_Ipsec{` +
		`Ipsec:` + fmt.Sprintf("%#v", this.Ipsec) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Gre) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.ReplaceSpecType_Gre{` +
		`Gre:` + fmt.Sprintf("%#v", this.Gre) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DirectConnection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.ReplaceSpecType_DirectConnection{` +
		`DirectConnection:` + fmt.Sprintf("%#v", this.DirectConnection) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&external_connector.GetSpecType{")
	if this.CeSiteReference != nil {
		s = append(s, "CeSiteReference: "+fmt.Sprintf("%#v", this.CeSiteReference)+",\n")
	}
	if this.ConnectionType != nil {
		s = append(s, "ConnectionType: "+fmt.Sprintf("%#v", this.ConnectionType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Ipsec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.GetSpecType_Ipsec{` +
		`Ipsec:` + fmt.Sprintf("%#v", this.Ipsec) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Gre) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.GetSpecType_Gre{` +
		`Gre:` + fmt.Sprintf("%#v", this.Gre) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DirectConnection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&external_connector.GetSpecType_DirectConnection{` +
		`DirectConnection:` + fmt.Sprintf("%#v", this.DirectConnection) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.ConnectionType != nil {
		{
			size := m.ConnectionType.Size()
			i -= size
			if _, err := m.ConnectionType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CeSiteReference != nil {
		{
			size, err := m.CeSiteReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Ipsec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Ipsec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipsec != nil {
		{
			size, err := m.Ipsec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Gre) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Gre) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Gre != nil {
		{
			size, err := m.Gre.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DirectConnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DirectConnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnection != nil {
		{
			size, err := m.DirectConnection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ConnectionTypeIPSec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionTypeIPSec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionTypeIPSec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IpsecTunnelParameters != nil {
		{
			size, err := m.IpsecTunnelParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IkeParameters != nil {
		{
			size, err := m.IkeParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionTypeGRE) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionTypeGRE) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionTypeGRE) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GreParameters != nil {
		{
			size, err := m.GreParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionTypeDirect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionTypeDirect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionTypeDirect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *IkeParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IkeParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IkeParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemoteIkeId != nil {
		{
			size := m.RemoteIkeId.Size()
			i -= size
			if _, err := m.RemoteIkeId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LocalIkeId != nil {
		{
			size := m.LocalIkeId.Size()
			i -= size
			if _, err := m.LocalIkeId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DpdChoice != nil {
		{
			size := m.DpdChoice.Size()
			i -= size
			if _, err := m.DpdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ModeChoice != nil {
		{
			size := m.ModeChoice.Size()
			i -= size
			if _, err := m.ModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IkePhase2Profile != nil {
		{
			size, err := m.IkePhase2Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IkePhase1Profile != nil {
		{
			size, err := m.IkePhase1Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IkeParameters_Initiator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IkeParameters_Initiator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Initiator != nil {
		{
			size, err := m.Initiator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *IkeParameters_Responder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IkeParameters_Responder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Responder != nil {
		{
			size, err := m.Responder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *IkeParameters_DpdKeepAliveTimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IkeParameters_DpdKeepAliveTimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DpdKeepAliveTimer != nil {
		{
			size, err := m.DpdKeepAliveTimer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *IkeParameters_DpdDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IkeParameters_DpdDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DpdDisabled != nil {
		{
			size, err := m.DpdDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *IkeParameters_UseDefaultLocalIkeId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IkeParameters_UseDefaultLocalIkeId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDefaultLocalIkeId != nil {
		{
			size, err := m.UseDefaultLocalIkeId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *IkeParameters_LcIpAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IkeParameters_LcIpAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LcIpAddress != nil {
		{
			size, err := m.LcIpAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *IkeParameters_LcHostname) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IkeParameters_LcHostname) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.LcHostname)
	copy(dAtA[i:], m.LcHostname)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.LcHostname)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xda
	return len(dAtA) - i, nil
}
func (m *IkeParameters_UseDefaultRemoteIkeId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IkeParameters_UseDefaultRemoteIkeId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDefaultRemoteIkeId != nil {
		{
			size, err := m.UseDefaultRemoteIkeId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *IkeParameters_RmIpAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IkeParameters_RmIpAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RmIpAddress != nil {
		{
			size, err := m.RmIpAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *IkeParameters_RmHostname) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IkeParameters_RmHostname) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RmHostname)
	copy(dAtA[i:], m.RmHostname)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.RmHostname)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xaa
	return len(dAtA) - i, nil
}
func (m *DpdKeepAliveTimer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DpdKeepAliveTimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DpdKeepAliveTimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TunnelEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TunnelEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TunnelEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteTunnelIp) > 0 {
		i -= len(m.RemoteTunnelIp)
		copy(dAtA[i:], m.RemoteTunnelIp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RemoteTunnelIp)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LocalTunnelIp) > 0 {
		i -= len(m.LocalTunnelIp)
		copy(dAtA[i:], m.LocalTunnelIp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LocalTunnelIp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Interface) > 0 {
		i -= len(m.Interface)
		copy(dAtA[i:], m.Interface)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Interface)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TunnelParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TunnelParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TunnelParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TunnelSourceVn != nil {
		{
			size := m.TunnelSourceVn.Size()
			i -= size
			if _, err := m.TunnelSourceVn.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TunnelMtu != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelMtu))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Psk) > 0 {
		i -= len(m.Psk)
		copy(dAtA[i:], m.Psk)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Psk)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TunnelEps) > 0 {
		for iNdEx := len(m.TunnelEps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TunnelEps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PeerIpAddress != nil {
		{
			size, err := m.PeerIpAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TunnelParameters_SiteLocalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TunnelParameters_SiteLocalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalNetwork != nil {
		{
			size, err := m.SiteLocalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *TunnelParameters_SiteLocalInsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TunnelParameters_SiteLocalInsideNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalInsideNetwork != nil {
		{
			size, err := m.SiteLocalInsideNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *TunnelParameters_Segment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TunnelParameters_Segment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Segment != nil {
		{
			size, err := m.Segment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GRETunnelParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GRETunnelParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GRETunnelParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TunnelSourceVn != nil {
		{
			size := m.TunnelSourceVn.Size()
			i -= size
			if _, err := m.TunnelSourceVn.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TunnelMtu != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelMtu))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerIpAddress != nil {
		{
			size, err := m.PeerIpAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TunnelEps) > 0 {
		for iNdEx := len(m.TunnelEps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TunnelEps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GRETunnelParameters_SiteLocalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GRETunnelParameters_SiteLocalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalNetwork != nil {
		{
			size, err := m.SiteLocalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GRETunnelParameters_SiteLocalInsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GRETunnelParameters_SiteLocalInsideNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalInsideNetwork != nil {
		{
			size, err := m.SiteLocalInsideNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GRETunnelParameters_Segment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GRETunnelParameters_Segment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Segment != nil {
		{
			size, err := m.Segment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionType != nil {
		{
			size := m.ConnectionType.Size()
			i -= size
			if _, err := m.ConnectionType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CeSiteReference != nil {
		{
			size, err := m.CeSiteReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Ipsec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Ipsec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipsec != nil {
		{
			size, err := m.Ipsec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Gre) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Gre) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Gre != nil {
		{
			size, err := m.Gre.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DirectConnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DirectConnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnection != nil {
		{
			size, err := m.DirectConnection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionType != nil {
		{
			size := m.ConnectionType.Size()
			i -= size
			if _, err := m.ConnectionType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CeSiteReference != nil {
		{
			size, err := m.CeSiteReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Ipsec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Ipsec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipsec != nil {
		{
			size, err := m.Ipsec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Gre) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Gre) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Gre != nil {
		{
			size, err := m.Gre.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DirectConnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DirectConnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnection != nil {
		{
			size, err := m.DirectConnection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionType != nil {
		{
			size := m.ConnectionType.Size()
			i -= size
			if _, err := m.ConnectionType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CeSiteReference != nil {
		{
			size, err := m.CeSiteReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Ipsec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Ipsec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipsec != nil {
		{
			size, err := m.Ipsec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Gre) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Gre) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Gre != nil {
		{
			size, err := m.Gre.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DirectConnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DirectConnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnection != nil {
		{
			size, err := m.DirectConnection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CeSiteReference != nil {
		l = m.CeSiteReference.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConnectionType != nil {
		n += m.ConnectionType.Size()
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_Ipsec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipsec != nil {
		l = m.Ipsec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Gre) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gre != nil {
		l = m.Gre.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DirectConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnection != nil {
		l = m.DirectConnection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ConnectionTypeIPSec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IkeParameters != nil {
		l = m.IkeParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.IpsecTunnelParameters != nil {
		l = m.IpsecTunnelParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ConnectionTypeGRE) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GreParameters != nil {
		l = m.GreParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ConnectionTypeDirect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *IkeParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IkePhase1Profile != nil {
		l = m.IkePhase1Profile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.IkePhase2Profile != nil {
		l = m.IkePhase2Profile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ModeChoice != nil {
		n += m.ModeChoice.Size()
	}
	if m.DpdChoice != nil {
		n += m.DpdChoice.Size()
	}
	if m.LocalIkeId != nil {
		n += m.LocalIkeId.Size()
	}
	if m.RemoteIkeId != nil {
		n += m.RemoteIkeId.Size()
	}
	return n
}

func (m *IkeParameters_Initiator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Initiator != nil {
		l = m.Initiator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *IkeParameters_Responder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Responder != nil {
		l = m.Responder.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *IkeParameters_DpdKeepAliveTimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DpdKeepAliveTimer != nil {
		l = m.DpdKeepAliveTimer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *IkeParameters_DpdDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DpdDisabled != nil {
		l = m.DpdDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *IkeParameters_UseDefaultLocalIkeId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDefaultLocalIkeId != nil {
		l = m.UseDefaultLocalIkeId.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *IkeParameters_LcIpAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LcIpAddress != nil {
		l = m.LcIpAddress.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *IkeParameters_LcHostname) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LcHostname)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *IkeParameters_UseDefaultRemoteIkeId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDefaultRemoteIkeId != nil {
		l = m.UseDefaultRemoteIkeId.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *IkeParameters_RmIpAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RmIpAddress != nil {
		l = m.RmIpAddress.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *IkeParameters_RmHostname) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RmHostname)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *DpdKeepAliveTimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	return n
}

func (m *TunnelEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Interface)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LocalTunnelIp)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RemoteTunnelIp)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TunnelParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerIpAddress != nil {
		l = m.PeerIpAddress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TunnelEps) > 0 {
		for _, e := range m.TunnelEps {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.Psk)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TunnelMtu != 0 {
		n += 1 + sovTypes(uint64(m.TunnelMtu))
	}
	if m.TunnelSourceVn != nil {
		n += m.TunnelSourceVn.Size()
	}
	return n
}

func (m *TunnelParameters_SiteLocalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalNetwork != nil {
		l = m.SiteLocalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TunnelParameters_SiteLocalInsideNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalInsideNetwork != nil {
		l = m.SiteLocalInsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TunnelParameters_Segment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Segment != nil {
		l = m.Segment.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GRETunnelParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TunnelEps) > 0 {
		for _, e := range m.TunnelEps {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.PeerIpAddress != nil {
		l = m.PeerIpAddress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TunnelMtu != 0 {
		n += 1 + sovTypes(uint64(m.TunnelMtu))
	}
	if m.TunnelSourceVn != nil {
		n += m.TunnelSourceVn.Size()
	}
	return n
}

func (m *GRETunnelParameters_SiteLocalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalNetwork != nil {
		l = m.SiteLocalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GRETunnelParameters_SiteLocalInsideNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalInsideNetwork != nil {
		l = m.SiteLocalInsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GRETunnelParameters_Segment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Segment != nil {
		l = m.Segment.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CeSiteReference != nil {
		l = m.CeSiteReference.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConnectionType != nil {
		n += m.ConnectionType.Size()
	}
	return n
}

func (m *CreateSpecType_Ipsec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipsec != nil {
		l = m.Ipsec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Gre) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gre != nil {
		l = m.Gre.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DirectConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnection != nil {
		l = m.DirectConnection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CeSiteReference != nil {
		l = m.CeSiteReference.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConnectionType != nil {
		n += m.ConnectionType.Size()
	}
	return n
}

func (m *ReplaceSpecType_Ipsec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipsec != nil {
		l = m.Ipsec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Gre) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gre != nil {
		l = m.Gre.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DirectConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnection != nil {
		l = m.DirectConnection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CeSiteReference != nil {
		l = m.CeSiteReference.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConnectionType != nil {
		n += m.ConnectionType.Size()
	}
	return n
}

func (m *GetSpecType_Ipsec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipsec != nil {
		l = m.Ipsec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Gre) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gre != nil {
		l = m.Gre.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DirectConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnection != nil {
		l = m.DirectConnection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`CeSiteReference:` + strings.Replace(fmt.Sprintf("%v", this.CeSiteReference), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ConnectionType:` + fmt.Sprintf("%v", this.ConnectionType) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Ipsec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Ipsec{`,
		`Ipsec:` + strings.Replace(fmt.Sprintf("%v", this.Ipsec), "ConnectionTypeIPSec", "ConnectionTypeIPSec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Gre) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Gre{`,
		`Gre:` + strings.Replace(fmt.Sprintf("%v", this.Gre), "ConnectionTypeGRE", "ConnectionTypeGRE", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DirectConnection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DirectConnection{`,
		`DirectConnection:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnection), "ConnectionTypeDirect", "ConnectionTypeDirect", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConnectionTypeIPSec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectionTypeIPSec{`,
		`IkeParameters:` + strings.Replace(this.IkeParameters.String(), "IkeParameters", "IkeParameters", 1) + `,`,
		`IpsecTunnelParameters:` + strings.Replace(this.IpsecTunnelParameters.String(), "TunnelParameters", "TunnelParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConnectionTypeGRE) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectionTypeGRE{`,
		`GreParameters:` + strings.Replace(this.GreParameters.String(), "GRETunnelParameters", "GRETunnelParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConnectionTypeDirect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectionTypeDirect{`,
		`}`,
	}, "")
	return s
}
func (this *IkeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IkeParameters{`,
		`IkePhase1Profile:` + strings.Replace(fmt.Sprintf("%v", this.IkePhase1Profile), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`IkePhase2Profile:` + strings.Replace(fmt.Sprintf("%v", this.IkePhase2Profile), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ModeChoice:` + fmt.Sprintf("%v", this.ModeChoice) + `,`,
		`DpdChoice:` + fmt.Sprintf("%v", this.DpdChoice) + `,`,
		`LocalIkeId:` + fmt.Sprintf("%v", this.LocalIkeId) + `,`,
		`RemoteIkeId:` + fmt.Sprintf("%v", this.RemoteIkeId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IkeParameters_Initiator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IkeParameters_Initiator{`,
		`Initiator:` + strings.Replace(fmt.Sprintf("%v", this.Initiator), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IkeParameters_Responder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IkeParameters_Responder{`,
		`Responder:` + strings.Replace(fmt.Sprintf("%v", this.Responder), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IkeParameters_DpdKeepAliveTimer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IkeParameters_DpdKeepAliveTimer{`,
		`DpdKeepAliveTimer:` + strings.Replace(fmt.Sprintf("%v", this.DpdKeepAliveTimer), "DpdKeepAliveTimer", "DpdKeepAliveTimer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IkeParameters_DpdDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IkeParameters_DpdDisabled{`,
		`DpdDisabled:` + strings.Replace(fmt.Sprintf("%v", this.DpdDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IkeParameters_UseDefaultLocalIkeId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IkeParameters_UseDefaultLocalIkeId{`,
		`UseDefaultLocalIkeId:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultLocalIkeId), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IkeParameters_LcIpAddress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IkeParameters_LcIpAddress{`,
		`LcIpAddress:` + strings.Replace(fmt.Sprintf("%v", this.LcIpAddress), "IpAddressType", "schema.IpAddressType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IkeParameters_LcHostname) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IkeParameters_LcHostname{`,
		`LcHostname:` + fmt.Sprintf("%v", this.LcHostname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IkeParameters_UseDefaultRemoteIkeId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IkeParameters_UseDefaultRemoteIkeId{`,
		`UseDefaultRemoteIkeId:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultRemoteIkeId), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IkeParameters_RmIpAddress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IkeParameters_RmIpAddress{`,
		`RmIpAddress:` + strings.Replace(fmt.Sprintf("%v", this.RmIpAddress), "IpAddressType", "schema.IpAddressType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IkeParameters_RmHostname) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IkeParameters_RmHostname{`,
		`RmHostname:` + fmt.Sprintf("%v", this.RmHostname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DpdKeepAliveTimer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DpdKeepAliveTimer{`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TunnelEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TunnelEndpoint{`,
		`Node:` + fmt.Sprintf("%v", this.Node) + `,`,
		`Interface:` + fmt.Sprintf("%v", this.Interface) + `,`,
		`LocalTunnelIp:` + fmt.Sprintf("%v", this.LocalTunnelIp) + `,`,
		`RemoteTunnelIp:` + fmt.Sprintf("%v", this.RemoteTunnelIp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TunnelParameters) string() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTunnelEps := "[]*TunnelEndpoint{"
	for _, f := range this.TunnelEps {
		repeatedStringForTunnelEps += strings.Replace(f.String(), "TunnelEndpoint", "TunnelEndpoint", 1) + ","
	}
	repeatedStringForTunnelEps += "}"
	s := strings.Join([]string{`&TunnelParameters{`,
		`PeerIpAddress:` + strings.Replace(fmt.Sprintf("%v", this.PeerIpAddress), "Ipv4AddressType", "schema.Ipv4AddressType", 1) + `,`,
		`TunnelEps:` + repeatedStringForTunnelEps + `,`,
		`Psk:` + fmt.Sprintf("%v", this.Psk) + `,`,
		`TunnelMtu:` + fmt.Sprintf("%v", this.TunnelMtu) + `,`,
		`TunnelSourceVn:` + fmt.Sprintf("%v", this.TunnelSourceVn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TunnelParameters_SiteLocalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TunnelParameters_SiteLocalNetwork{`,
		`SiteLocalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TunnelParameters_SiteLocalInsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TunnelParameters_SiteLocalInsideNetwork{`,
		`SiteLocalInsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalInsideNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TunnelParameters_Segment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TunnelParameters_Segment{`,
		`Segment:` + strings.Replace(fmt.Sprintf("%v", this.Segment), "SegmentRefType", "schema.SegmentRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GRETunnelParameters) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTunnelEps := "[]*TunnelEndpoint{"
	for _, f := range this.TunnelEps {
		repeatedStringForTunnelEps += strings.Replace(f.String(), "TunnelEndpoint", "TunnelEndpoint", 1) + ","
	}
	repeatedStringForTunnelEps += "}"
	s := strings.Join([]string{`&GRETunnelParameters{`,
		`TunnelEps:` + repeatedStringForTunnelEps + `,`,
		`PeerIpAddress:` + strings.Replace(fmt.Sprintf("%v", this.PeerIpAddress), "Ipv4AddressType", "schema.Ipv4AddressType", 1) + `,`,
		`TunnelMtu:` + fmt.Sprintf("%v", this.TunnelMtu) + `,`,
		`TunnelSourceVn:` + fmt.Sprintf("%v", this.TunnelSourceVn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GRETunnelParameters_SiteLocalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GRETunnelParameters_SiteLocalNetwork{`,
		`SiteLocalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GRETunnelParameters_SiteLocalInsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GRETunnelParameters_SiteLocalInsideNetwork{`,
		`SiteLocalInsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalInsideNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GRETunnelParameters_Segment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GRETunnelParameters_Segment{`,
		`Segment:` + strings.Replace(fmt.Sprintf("%v", this.Segment), "SegmentRefType", "schema.SegmentRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`CeSiteReference:` + strings.Replace(fmt.Sprintf("%v", this.CeSiteReference), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ConnectionType:` + fmt.Sprintf("%v", this.ConnectionType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Ipsec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Ipsec{`,
		`Ipsec:` + strings.Replace(fmt.Sprintf("%v", this.Ipsec), "ConnectionTypeIPSec", "ConnectionTypeIPSec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Gre) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Gre{`,
		`Gre:` + strings.Replace(fmt.Sprintf("%v", this.Gre), "ConnectionTypeGRE", "ConnectionTypeGRE", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DirectConnection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DirectConnection{`,
		`DirectConnection:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnection), "ConnectionTypeDirect", "ConnectionTypeDirect", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`CeSiteReference:` + strings.Replace(fmt.Sprintf("%v", this.CeSiteReference), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ConnectionType:` + fmt.Sprintf("%v", this.ConnectionType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Ipsec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Ipsec{`,
		`Ipsec:` + strings.Replace(fmt.Sprintf("%v", this.Ipsec), "ConnectionTypeIPSec", "ConnectionTypeIPSec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Gre) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Gre{`,
		`Gre:` + strings.Replace(fmt.Sprintf("%v", this.Gre), "ConnectionTypeGRE", "ConnectionTypeGRE", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DirectConnection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DirectConnection{`,
		`DirectConnection:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnection), "ConnectionTypeDirect", "ConnectionTypeDirect", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`CeSiteReference:` + strings.Replace(fmt.Sprintf("%v", this.CeSiteReference), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ConnectionType:` + fmt.Sprintf("%v", this.ConnectionType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Ipsec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Ipsec{`,
		`Ipsec:` + strings.Replace(fmt.Sprintf("%v", this.Ipsec), "ConnectionTypeIPSec", "ConnectionTypeIPSec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Gre) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Gre{`,
		`Gre:` + strings.Replace(fmt.Sprintf("%v", this.Gre), "ConnectionTypeGRE", "ConnectionTypeGRE", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DirectConnection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DirectConnection{`,
		`DirectConnection:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnection), "ConnectionTypeDirect", "ConnectionTypeDirect", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CeSiteReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CeSiteReference == nil {
				m.CeSiteReference = &views.ObjectRefType{}
			}
			if err := m.CeSiteReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipsec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnectionTypeIPSec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionType = &GlobalSpecType_Ipsec{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gre", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnectionTypeGRE{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionType = &GlobalSpecType_Gre{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnectionTypeDirect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionType = &GlobalSpecType_DirectConnection{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionTypeIPSec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionTypeIPSec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionTypeIPSec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IkeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IkeParameters == nil {
				m.IkeParameters = &IkeParameters{}
			}
			if err := m.IkeParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpsecTunnelParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpsecTunnelParameters == nil {
				m.IpsecTunnelParameters = &TunnelParameters{}
			}
			if err := m.IpsecTunnelParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionTypeGRE) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionTypeGRE: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionTypeGRE: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GreParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GreParameters == nil {
				m.GreParameters = &GRETunnelParameters{}
			}
			if err := m.GreParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionTypeDirect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionTypeDirect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionTypeDirect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IkeParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IkeParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IkeParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IkePhase1Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IkePhase1Profile == nil {
				m.IkePhase1Profile = &views.ObjectRefType{}
			}
			if err := m.IkePhase1Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IkePhase2Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IkePhase2Profile == nil {
				m.IkePhase2Profile = &views.ObjectRefType{}
			}
			if err := m.IkePhase2Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModeChoice = &IkeParameters_Initiator{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModeChoice = &IkeParameters_Responder{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DpdKeepAliveTimer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DpdKeepAliveTimer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DpdChoice = &IkeParameters_DpdKeepAliveTimer{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DpdDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DpdChoice = &IkeParameters_DpdDisabled{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultLocalIkeId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LocalIkeId = &IkeParameters_UseDefaultLocalIkeId{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcIpAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.IpAddressType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LocalIkeId = &IkeParameters_LcIpAddress{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalIkeId = &IkeParameters_LcHostname{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultRemoteIkeId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RemoteIkeId = &IkeParameters_UseDefaultRemoteIkeId{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RmIpAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.IpAddressType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RemoteIkeId = &IkeParameters_RmIpAddress{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RmHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteIkeId = &IkeParameters_RmHostname{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DpdKeepAliveTimer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DpdKeepAliveTimer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DpdKeepAliveTimer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TunnelEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TunnelEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TunnelEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalTunnelIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalTunnelIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteTunnelIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteTunnelIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TunnelParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TunnelParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TunnelParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIpAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerIpAddress == nil {
				m.PeerIpAddress = &schema.Ipv4AddressType{}
			}
			if err := m.PeerIpAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelEps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TunnelEps = append(m.TunnelEps, &TunnelEndpoint{})
			if err := m.TunnelEps[len(m.TunnelEps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Psk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Psk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelMtu", wireType)
			}
			m.TunnelMtu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelMtu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TunnelSourceVn = &TunnelParameters_SiteLocalNetwork{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalInsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TunnelSourceVn = &TunnelParameters_SiteLocalInsideNetwork{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.SegmentRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TunnelSourceVn = &TunnelParameters_Segment{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GRETunnelParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GRETunnelParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GRETunnelParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelEps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TunnelEps = append(m.TunnelEps, &TunnelEndpoint{})
			if err := m.TunnelEps[len(m.TunnelEps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIpAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerIpAddress == nil {
				m.PeerIpAddress = &schema.Ipv4AddressType{}
			}
			if err := m.PeerIpAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelMtu", wireType)
			}
			m.TunnelMtu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelMtu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TunnelSourceVn = &GRETunnelParameters_SiteLocalNetwork{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalInsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TunnelSourceVn = &GRETunnelParameters_SiteLocalInsideNetwork{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.SegmentRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TunnelSourceVn = &GRETunnelParameters_Segment{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CeSiteReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CeSiteReference == nil {
				m.CeSiteReference = &views.ObjectRefType{}
			}
			if err := m.CeSiteReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipsec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnectionTypeIPSec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionType = &CreateSpecType_Ipsec{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gre", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnectionTypeGRE{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionType = &CreateSpecType_Gre{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnectionTypeDirect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionType = &CreateSpecType_DirectConnection{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CeSiteReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CeSiteReference == nil {
				m.CeSiteReference = &views.ObjectRefType{}
			}
			if err := m.CeSiteReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipsec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnectionTypeIPSec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionType = &ReplaceSpecType_Ipsec{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gre", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnectionTypeGRE{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionType = &ReplaceSpecType_Gre{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnectionTypeDirect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionType = &ReplaceSpecType_DirectConnection{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CeSiteReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CeSiteReference == nil {
				m.CeSiteReference = &views.ObjectRefType{}
			}
			if err := m.CeSiteReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipsec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnectionTypeIPSec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionType = &GetSpecType_Ipsec{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gre", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnectionTypeGRE{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionType = &GetSpecType_Gre{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnectionTypeDirect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionType = &GetSpecType_DirectConnection{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

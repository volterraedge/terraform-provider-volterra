// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package data_type

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*DetectionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := DetectionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DetectionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DetectionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) CompliancesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(Compliance)
		return int32(i)
	}
	// Compliance_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, Compliance_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for compliances")
	}
	itemsValidatorFn := func(ctx context.Context, elems []Compliance, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for compliances")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]Compliance)
		if !ok {
			return fmt.Errorf("Repeated validation expected []Compliance, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated compliances")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items compliances")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["compliances"]; exists {
		vOpts := append(opts, db.WithValidateField("compliances"))
		if err := fv(ctx, m.GetCompliances(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["is_pii"]; exists {

		vOpts := append(opts, db.WithValidateField("is_pii"))
		if err := fv(ctx, m.GetIsPii(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["is_sensitive_data"]; exists {

		vOpts := append(opts, db.WithValidateField("is_sensitive_data"))
		if err := fv(ctx, m.GetIsSensitiveData(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	vrhCompliances := v.CompliancesValidationRuleHandler
	rulesCompliances := map[string]string{
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.not_in":       "[0]",
		"ves.io.schema.rules.repeated.max_items":               "17",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhCompliances(rulesCompliances)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.compliances: %s", err)
		panic(errMsg)
	}
	v.FldValidators["compliances"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DetectionMethod) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DetectionMethod) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DetectionMethod) DeepCopy() *DetectionMethod {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DetectionMethod{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DetectionMethod) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DetectionMethod) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DetectionMethodValidator().Validate(ctx, m, opts...)
}

type ValidateDetectionMethod struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDetectionMethod) MethodChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for method_choice")
	}
	return validatorFn, nil
}

func (v *ValidateDetectionMethod) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DetectionMethod)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DetectionMethod got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["method_choice"]; exists {
		val := m.GetMethodChoice()
		vOpts := append(opts,
			db.WithValidateField("method_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMethodChoice().(type) {
	case *DetectionMethod_Pattern:
		if fv, exists := v.FldValidators["method_choice.pattern"]; exists {
			val := m.GetMethodChoice().(*DetectionMethod_Pattern).Pattern
			vOpts := append(opts,
				db.WithValidateField("method_choice"),
				db.WithValidateField("pattern"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DetectionMethod_Custom:
		if fv, exists := v.FldValidators["method_choice.custom"]; exists {
			val := m.GetMethodChoice().(*DetectionMethod_Custom).Custom
			vOpts := append(opts,
				db.WithValidateField("method_choice"),
				db.WithValidateField("custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDetectionMethodValidator = func() *ValidateDetectionMethod {
	v := &ValidateDetectionMethod{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMethodChoice := v.MethodChoiceValidationRuleHandler
	rulesMethodChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMethodChoice(rulesMethodChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DetectionMethod.method_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["method_choice"] = vFn

	return v
}()

func DetectionMethodValidator() db.Validator {
	return DefaultDetectionMethodValidator
}

// augmented methods on protoc/std generated struct

func (m *DetectionRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DetectionRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DetectionRule) DeepCopy() *DetectionRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DetectionRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DetectionRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DetectionRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DetectionRuleValidator().Validate(ctx, m, opts...)
}

type ValidateDetectionRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDetectionRule) PatternChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for pattern_choice")
	}
	return validatorFn, nil
}

func (v *ValidateDetectionRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DetectionRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DetectionRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["pattern_choice"]; exists {
		val := m.GetPatternChoice()
		vOpts := append(opts,
			db.WithValidateField("pattern_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPatternChoice().(type) {
	case *DetectionRule_KeyPattern:
		if fv, exists := v.FldValidators["pattern_choice.key_pattern"]; exists {
			val := m.GetPatternChoice().(*DetectionRule_KeyPattern).KeyPattern
			vOpts := append(opts,
				db.WithValidateField("pattern_choice"),
				db.WithValidateField("key_pattern"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DetectionRule_ValuePattern:
		if fv, exists := v.FldValidators["pattern_choice.value_pattern"]; exists {
			val := m.GetPatternChoice().(*DetectionRule_ValuePattern).ValuePattern
			vOpts := append(opts,
				db.WithValidateField("pattern_choice"),
				db.WithValidateField("value_pattern"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DetectionRule_KeyValuePattern:
		if fv, exists := v.FldValidators["pattern_choice.key_value_pattern"]; exists {
			val := m.GetPatternChoice().(*DetectionRule_KeyValuePattern).KeyValuePattern
			vOpts := append(opts,
				db.WithValidateField("pattern_choice"),
				db.WithValidateField("key_value_pattern"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDetectionRuleValidator = func() *ValidateDetectionRule {
	v := &ValidateDetectionRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPatternChoice := v.PatternChoiceValidationRuleHandler
	rulesPatternChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPatternChoice(rulesPatternChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DetectionRule.pattern_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["pattern_choice"] = vFn

	v.FldValidators["pattern_choice.key_pattern"] = RulePatternTypeValidator().Validate
	v.FldValidators["pattern_choice.value_pattern"] = RulePatternTypeValidator().Validate
	v.FldValidators["pattern_choice.key_value_pattern"] = KeyValuePatternValidator().Validate

	return v
}()

func DetectionRuleValidator() db.Validator {
	return DefaultDetectionRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *ExactValues) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ExactValues) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ExactValues) DeepCopy() *ExactValues {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ExactValues{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ExactValues) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ExactValues) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ExactValuesValidator().Validate(ctx, m, opts...)
}

type ValidateExactValues struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateExactValues) ExactValuesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for exact_values")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for exact_values")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated exact_values")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items exact_values")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateExactValues) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ExactValues)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ExactValues got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["exact_values"]; exists {
		vOpts := append(opts, db.WithValidateField("exact_values"))
		if err := fv(ctx, m.GetExactValues(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultExactValuesValidator = func() *ValidateExactValues {
	v := &ValidateExactValues{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExactValues := v.ExactValuesValidationRuleHandler
	rulesExactValues := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_bytes": "1024",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhExactValues(rulesExactValues)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ExactValues.exact_values: %s", err)
		panic(errMsg)
	}
	v.FldValidators["exact_values"] = vFn

	return v
}()

func ExactValuesValidator() db.Validator {
	return DefaultExactValuesValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*DetectionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := DetectionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DetectionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DetectionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) CompliancesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(Compliance)
		return int32(i)
	}
	// Compliance_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, Compliance_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for compliances")
	}
	itemsValidatorFn := func(ctx context.Context, elems []Compliance, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for compliances")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]Compliance)
		if !ok {
			return fmt.Errorf("Repeated validation expected []Compliance, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated compliances")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items compliances")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["compliances"]; exists {
		vOpts := append(opts, db.WithValidateField("compliances"))
		if err := fv(ctx, m.GetCompliances(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["is_pii"]; exists {

		vOpts := append(opts, db.WithValidateField("is_pii"))
		if err := fv(ctx, m.GetIsPii(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["is_sensitive_data"]; exists {

		vOpts := append(opts, db.WithValidateField("is_sensitive_data"))
		if err := fv(ctx, m.GetIsSensitiveData(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	vrhCompliances := v.CompliancesValidationRuleHandler
	rulesCompliances := map[string]string{
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.not_in":       "[0]",
		"ves.io.schema.rules.repeated.max_items":               "17",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhCompliances(rulesCompliances)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.compliances: %s", err)
		panic(errMsg)
	}
	v.FldValidators["compliances"] = vFn

	v.FldValidators["type"] = OriginTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*DetectionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := DetectionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DetectionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DetectionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) CompliancesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(Compliance)
		return int32(i)
	}
	// Compliance_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, Compliance_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for compliances")
	}
	itemsValidatorFn := func(ctx context.Context, elems []Compliance, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for compliances")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]Compliance)
		if !ok {
			return fmt.Errorf("Repeated validation expected []Compliance, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated compliances")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items compliances")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["compliances"]; exists {
		vOpts := append(opts, db.WithValidateField("compliances"))
		if err := fv(ctx, m.GetCompliances(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["is_pii"]; exists {

		vOpts := append(opts, db.WithValidateField("is_pii"))
		if err := fv(ctx, m.GetIsPii(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["is_sensitive_data"]; exists {

		vOpts := append(opts, db.WithValidateField("is_sensitive_data"))
		if err := fv(ctx, m.GetIsSensitiveData(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	vrhCompliances := v.CompliancesValidationRuleHandler
	rulesCompliances := map[string]string{
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.not_in":       "[0]",
		"ves.io.schema.rules.repeated.max_items":               "17",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhCompliances(rulesCompliances)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.compliances: %s", err)
		panic(errMsg)
	}
	v.FldValidators["compliances"] = vFn

	v.FldValidators["method"] = DetectionMethodValidator().Validate

	v.FldValidators["type"] = OriginTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *KeyValuePattern) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *KeyValuePattern) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *KeyValuePattern) DeepCopy() *KeyValuePattern {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &KeyValuePattern{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *KeyValuePattern) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *KeyValuePattern) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return KeyValuePatternValidator().Validate(ctx, m, opts...)
}

type ValidateKeyValuePattern struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateKeyValuePattern) KeyPatternValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for key_pattern")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := RulePatternTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateKeyValuePattern) ValuePatternValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for value_pattern")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := RulePatternTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateKeyValuePattern) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*KeyValuePattern)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *KeyValuePattern got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["key_pattern"]; exists {

		vOpts := append(opts, db.WithValidateField("key_pattern"))
		if err := fv(ctx, m.GetKeyPattern(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value_pattern"]; exists {

		vOpts := append(opts, db.WithValidateField("value_pattern"))
		if err := fv(ctx, m.GetValuePattern(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultKeyValuePatternValidator = func() *ValidateKeyValuePattern {
	v := &ValidateKeyValuePattern{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhKeyPattern := v.KeyPatternValidationRuleHandler
	rulesKeyPattern := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhKeyPattern(rulesKeyPattern)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for KeyValuePattern.key_pattern: %s", err)
		panic(errMsg)
	}
	v.FldValidators["key_pattern"] = vFn

	vrhValuePattern := v.ValuePatternValidationRuleHandler
	rulesValuePattern := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhValuePattern(rulesValuePattern)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for KeyValuePattern.value_pattern: %s", err)
		panic(errMsg)
	}
	v.FldValidators["value_pattern"] = vFn

	return v
}()

func KeyValuePatternValidator() db.Validator {
	return DefaultKeyValuePatternValidator
}

// augmented methods on protoc/std generated struct

func (m *OriginType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OriginType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OriginType) DeepCopy() *OriginType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OriginType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OriginType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OriginType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OriginTypeValidator().Validate(ctx, m, opts...)
}

type ValidateOriginType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOriginType) TypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateOriginType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OriginType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OriginType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["type_choice"]; exists {
		val := m.GetTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTypeChoice().(type) {
	case *OriginType_Custom:
		if fv, exists := v.FldValidators["type_choice.custom"]; exists {
			val := m.GetTypeChoice().(*OriginType_Custom).Custom
			vOpts := append(opts,
				db.WithValidateField("type_choice"),
				db.WithValidateField("custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OriginType_Predefined:
		if fv, exists := v.FldValidators["type_choice.predefined"]; exists {
			val := m.GetTypeChoice().(*OriginType_Predefined).Predefined
			vOpts := append(opts,
				db.WithValidateField("type_choice"),
				db.WithValidateField("predefined"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOriginTypeValidator = func() *ValidateOriginType {
	v := &ValidateOriginType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTypeChoice := v.TypeChoiceValidationRuleHandler
	rulesTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTypeChoice(rulesTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OriginType.type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type_choice"] = vFn

	return v
}()

func OriginTypeValidator() db.Validator {
	return DefaultOriginTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*DetectionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := DetectionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DetectionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DetectionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) CompliancesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(Compliance)
		return int32(i)
	}
	// Compliance_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, Compliance_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for compliances")
	}
	itemsValidatorFn := func(ctx context.Context, elems []Compliance, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for compliances")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]Compliance)
		if !ok {
			return fmt.Errorf("Repeated validation expected []Compliance, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated compliances")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items compliances")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["compliances"]; exists {
		vOpts := append(opts, db.WithValidateField("compliances"))
		if err := fv(ctx, m.GetCompliances(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["is_pii"]; exists {

		vOpts := append(opts, db.WithValidateField("is_pii"))
		if err := fv(ctx, m.GetIsPii(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["is_sensitive_data"]; exists {

		vOpts := append(opts, db.WithValidateField("is_sensitive_data"))
		if err := fv(ctx, m.GetIsSensitiveData(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	vrhCompliances := v.CompliancesValidationRuleHandler
	rulesCompliances := map[string]string{
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.not_in":       "[0]",
		"ves.io.schema.rules.repeated.max_items":               "17",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhCompliances(rulesCompliances)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.compliances: %s", err)
		panic(errMsg)
	}
	v.FldValidators["compliances"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RulePatternType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RulePatternType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RulePatternType) DeepCopy() *RulePatternType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RulePatternType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RulePatternType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RulePatternType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RulePatternTypeValidator().Validate(ctx, m, opts...)
}

type ValidateRulePatternType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRulePatternType) TypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRulePatternType) TypeChoiceRegexValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_RegexValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for regex_value")
	}
	return oValidatorFn_RegexValue, nil
}
func (v *ValidateRulePatternType) TypeChoiceSubstringValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SubstringValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for substring_value")
	}
	return oValidatorFn_SubstringValue, nil
}

func (v *ValidateRulePatternType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RulePatternType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RulePatternType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["type_choice"]; exists {
		val := m.GetTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTypeChoice().(type) {
	case *RulePatternType_RegexValue:
		if fv, exists := v.FldValidators["type_choice.regex_value"]; exists {
			val := m.GetTypeChoice().(*RulePatternType_RegexValue).RegexValue
			vOpts := append(opts,
				db.WithValidateField("type_choice"),
				db.WithValidateField("regex_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RulePatternType_ExactValues:
		if fv, exists := v.FldValidators["type_choice.exact_values"]; exists {
			val := m.GetTypeChoice().(*RulePatternType_ExactValues).ExactValues
			vOpts := append(opts,
				db.WithValidateField("type_choice"),
				db.WithValidateField("exact_values"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RulePatternType_SubstringValue:
		if fv, exists := v.FldValidators["type_choice.substring_value"]; exists {
			val := m.GetTypeChoice().(*RulePatternType_SubstringValue).SubstringValue
			vOpts := append(opts,
				db.WithValidateField("type_choice"),
				db.WithValidateField("substring_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRulePatternTypeValidator = func() *ValidateRulePatternType {
	v := &ValidateRulePatternType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTypeChoice := v.TypeChoiceValidationRuleHandler
	rulesTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTypeChoice(rulesTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RulePatternType.type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type_choice"] = vFn

	vrhTypeChoiceRegexValue := v.TypeChoiceRegexValueValidationRuleHandler
	rulesTypeChoiceRegexValue := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "1024",
		"ves.io.schema.rules.string.regex":     "true",
	}
	vFnMap["type_choice.regex_value"], err = vrhTypeChoiceRegexValue(rulesTypeChoiceRegexValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field RulePatternType.type_choice_regex_value: %s", err)
		panic(errMsg)
	}
	vrhTypeChoiceSubstringValue := v.TypeChoiceSubstringValueValidationRuleHandler
	rulesTypeChoiceSubstringValue := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "1024",
	}
	vFnMap["type_choice.substring_value"], err = vrhTypeChoiceSubstringValue(rulesTypeChoiceSubstringValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field RulePatternType.type_choice_substring_value: %s", err)
		panic(errMsg)
	}

	v.FldValidators["type_choice.regex_value"] = vFnMap["type_choice.regex_value"]
	v.FldValidators["type_choice.substring_value"] = vFnMap["type_choice.substring_value"]

	v.FldValidators["type_choice.exact_values"] = ExactValuesValidator().Validate

	return v
}()

func RulePatternTypeValidator() db.Validator {
	return DefaultRulePatternTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Compliances = f.GetCompliances()
	m.IsPii = f.GetIsPii()
	m.IsSensitiveData = f.GetIsSensitiveData()
	m.Rules = f.GetRules()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Compliances = m1.Compliances
	f.IsPii = m1.IsPii
	f.IsSensitiveData = m1.IsSensitiveData
	f.Rules = m1.Rules
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Compliances = f.GetCompliances()
	m.IsPii = f.GetIsPii()
	m.IsSensitiveData = f.GetIsSensitiveData()
	m.Rules = f.GetRules()
	m.Type = f.GetType()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Compliances = m1.Compliances
	f.IsPii = m1.IsPii
	f.IsSensitiveData = m1.IsSensitiveData
	f.Rules = m1.Rules
	f.Type = m1.Type
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Compliances = f.GetCompliances()
	m.IsPii = f.GetIsPii()
	m.IsSensitiveData = f.GetIsSensitiveData()
	m.Rules = f.GetRules()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Compliances = m1.Compliances
	f.IsPii = m1.IsPii
	f.IsSensitiveData = m1.IsSensitiveData
	f.Rules = m1.Rules
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/data_type/types.proto

package data_type

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Compliance
//
// x-displayName: "Compliance"
// Supported compliances frameworks
type Compliance int32

const (
	// x-displayName: "Unspecified"
	UNSPECIFIED Compliance = 0
	// x-displayName: "GDPR"
	GDPR Compliance = 1
	// x-displayName: "CCPA"
	CCPA Compliance = 2
	// x-displayName: "PIPEDA"
	PIPEDA Compliance = 3
	// x-displayName: "LGPD"
	LGPD Compliance = 4
	// x-displayName: "DPA(UK)"
	DPA_UK Compliance = 5
	// x-displayName: "PDPA (SG)"
	PDPA_SG Compliance = 6
	// x-displayName: "APPI"
	APPI Compliance = 7
	// x-displayName: "HIPPA"
	HIPAA Compliance = 8
	// x-displayName: "CPRA 2023"
	CPRA_2023 Compliance = 9
	// x-displayName: "CPA (CO)"
	CPA_CO Compliance = 10
	// x-displayName: "SOC2"
	SOC2 Compliance = 11
	// x-displayName: "PCI-DSS"
	PCI_DSS Compliance = 12
	// x-displayName: "ISO/IEC 27001"
	ISO_IEC_27001 Compliance = 13
	// x-displayName: "ISO/IEC 27701"
	ISO_IEC_27701 Compliance = 14
	// x-displayName: "ePrivacy Directive"
	EPRIVACY_DIRECTIVE Compliance = 15
	// x-displayName: "GLBA"
	GLBA Compliance = 16
	// x-displayName: "SOX"
	SOX Compliance = 17
)

var Compliance_name = map[int32]string{
	0:  "UNSPECIFIED",
	1:  "GDPR",
	2:  "CCPA",
	3:  "PIPEDA",
	4:  "LGPD",
	5:  "DPA_UK",
	6:  "PDPA_SG",
	7:  "APPI",
	8:  "HIPAA",
	9:  "CPRA_2023",
	10: "CPA_CO",
	11: "SOC2",
	12: "PCI_DSS",
	13: "ISO_IEC_27001",
	14: "ISO_IEC_27701",
	15: "EPRIVACY_DIRECTIVE",
	16: "GLBA",
	17: "SOX",
}

var Compliance_value = map[string]int32{
	"UNSPECIFIED":        0,
	"GDPR":               1,
	"CCPA":               2,
	"PIPEDA":             3,
	"LGPD":               4,
	"DPA_UK":             5,
	"PDPA_SG":            6,
	"APPI":               7,
	"HIPAA":              8,
	"CPRA_2023":          9,
	"CPA_CO":             10,
	"SOC2":               11,
	"PCI_DSS":            12,
	"ISO_IEC_27001":      13,
	"ISO_IEC_27701":      14,
	"EPRIVACY_DIRECTIVE": 15,
	"GLBA":               16,
	"SOX":                17,
}

func (Compliance) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_136de77f19e642aa, []int{0}
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of data_type in the storage backend.
type GlobalSpecType struct {
	// Data Type Rules
	//
	// x-displayName: "Data Type Rules"
	// x-example: "Value or Regex"
	// Configure key/value or regex match rules to enable the platform to detect this custom data type in the API request or response
	Rules []*DetectionRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	// is_sensitive_data
	//
	// x-displayName: "Mark as Sensitive Data"
	// Select this option to classify the custom data type as sensitive, enabling detection of API vulnerabilities related to this data type.
	IsSensitiveData bool `protobuf:"varint,2,opt,name=is_sensitive_data,json=isSensitiveData,proto3" json:"is_sensitive_data,omitempty"`
	// is_pii
	//
	// x-displayName: "Mark as PII"
	// Select this option to classify the custom data type as personally identifiable information (PII)
	IsPii bool `protobuf:"varint,3,opt,name=is_pii,json=isPii,proto3" json:"is_pii,omitempty"`
	// compliances
	//
	// x-displayName: "Relevant Compliances"
	// Choose applicable compliance frameworks such as GDPR, PCI/DSS, or CCPA to ensure the platform identifies whether vulnerabilities in API endpoints handling this data type may cause a compliance breach
	Compliances []Compliance `protobuf:"varint,4,rep,packed,name=compliances,proto3,enum=ves.io.schema.data_type.Compliance" json:"compliances,omitempty"`
	// is_custom_detection
	//
	// x-displayName: "Custom detection function"
	// If enabled detection will be by custom function.
	Method *DetectionMethod `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`
	// type
	//
	// x-displayName: "Type"
	// Is custom or predefined
	Type *OriginType `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_136de77f19e642aa, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetRules() []*DetectionRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *GlobalSpecType) GetIsSensitiveData() bool {
	if m != nil {
		return m.IsSensitiveData
	}
	return false
}

func (m *GlobalSpecType) GetIsPii() bool {
	if m != nil {
		return m.IsPii
	}
	return false
}

func (m *GlobalSpecType) GetCompliances() []Compliance {
	if m != nil {
		return m.Compliances
	}
	return nil
}

func (m *GlobalSpecType) GetMethod() *DetectionMethod {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *GlobalSpecType) GetType() *OriginType {
	if m != nil {
		return m.Type
	}
	return nil
}

type OriginType struct {
	// OriginType
	//
	// x-displayName: "Type"
	// x-required
	// Where should the pattern be searched
	//
	// Types that are valid to be assigned to TypeChoice:
	//	*OriginType_Custom
	//	*OriginType_Predefined
	TypeChoice isOriginType_TypeChoice `protobuf_oneof:"type_choice"`
}

func (m *OriginType) Reset()      { *m = OriginType{} }
func (*OriginType) ProtoMessage() {}
func (*OriginType) Descriptor() ([]byte, []int) {
	return fileDescriptor_136de77f19e642aa, []int{1}
}
func (m *OriginType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OriginType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OriginType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginType.Merge(m, src)
}
func (m *OriginType) XXX_Size() int {
	return m.Size()
}
func (m *OriginType) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginType.DiscardUnknown(m)
}

var xxx_messageInfo_OriginType proto.InternalMessageInfo

type isOriginType_TypeChoice interface {
	isOriginType_TypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OriginType_Custom struct {
	Custom *schema.Empty `protobuf:"bytes,2,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}
type OriginType_Predefined struct {
	Predefined *schema.Empty `protobuf:"bytes,3,opt,name=predefined,proto3,oneof" json:"predefined,omitempty"`
}

func (*OriginType_Custom) isOriginType_TypeChoice()     {}
func (*OriginType_Predefined) isOriginType_TypeChoice() {}

func (m *OriginType) GetTypeChoice() isOriginType_TypeChoice {
	if m != nil {
		return m.TypeChoice
	}
	return nil
}

func (m *OriginType) GetCustom() *schema.Empty {
	if x, ok := m.GetTypeChoice().(*OriginType_Custom); ok {
		return x.Custom
	}
	return nil
}

func (m *OriginType) GetPredefined() *schema.Empty {
	if x, ok := m.GetTypeChoice().(*OriginType_Predefined); ok {
		return x.Predefined
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OriginType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OriginType_Custom)(nil),
		(*OriginType_Predefined)(nil),
	}
}

type DetectionMethod struct {
	// Detection Method
	//
	// x-displayName: "Detection Method"
	// x-required
	// Where should the pattern be searched
	//
	// Types that are valid to be assigned to MethodChoice:
	//	*DetectionMethod_Pattern
	//	*DetectionMethod_Custom
	MethodChoice isDetectionMethod_MethodChoice `protobuf_oneof:"method_choice"`
}

func (m *DetectionMethod) Reset()      { *m = DetectionMethod{} }
func (*DetectionMethod) ProtoMessage() {}
func (*DetectionMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_136de77f19e642aa, []int{2}
}
func (m *DetectionMethod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetectionMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DetectionMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectionMethod.Merge(m, src)
}
func (m *DetectionMethod) XXX_Size() int {
	return m.Size()
}
func (m *DetectionMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectionMethod.DiscardUnknown(m)
}

var xxx_messageInfo_DetectionMethod proto.InternalMessageInfo

type isDetectionMethod_MethodChoice interface {
	isDetectionMethod_MethodChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DetectionMethod_Pattern struct {
	Pattern *schema.Empty `protobuf:"bytes,2,opt,name=pattern,proto3,oneof" json:"pattern,omitempty"`
}
type DetectionMethod_Custom struct {
	Custom *schema.Empty `protobuf:"bytes,3,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}

func (*DetectionMethod_Pattern) isDetectionMethod_MethodChoice() {}
func (*DetectionMethod_Custom) isDetectionMethod_MethodChoice()  {}

func (m *DetectionMethod) GetMethodChoice() isDetectionMethod_MethodChoice {
	if m != nil {
		return m.MethodChoice
	}
	return nil
}

func (m *DetectionMethod) GetPattern() *schema.Empty {
	if x, ok := m.GetMethodChoice().(*DetectionMethod_Pattern); ok {
		return x.Pattern
	}
	return nil
}

func (m *DetectionMethod) GetCustom() *schema.Empty {
	if x, ok := m.GetMethodChoice().(*DetectionMethod_Custom); ok {
		return x.Custom
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DetectionMethod) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DetectionMethod_Pattern)(nil),
		(*DetectionMethod_Custom)(nil),
	}
}

// Rule Pattern Type
//
// x-displayName: "Rule Pattern Type"
// test
type RulePatternType struct {
	// type_choice
	//
	// x-displayName: "Pattern"
	// x-required
	// How to detect the current rule. by regex/exact value or substring
	//
	// Types that are valid to be assigned to TypeChoice:
	//	*RulePatternType_RegexValue
	//	*RulePatternType_ExactValues
	//	*RulePatternType_SubstringValue
	TypeChoice isRulePatternType_TypeChoice `protobuf_oneof:"type_choice"`
}

func (m *RulePatternType) Reset()      { *m = RulePatternType{} }
func (*RulePatternType) ProtoMessage() {}
func (*RulePatternType) Descriptor() ([]byte, []int) {
	return fileDescriptor_136de77f19e642aa, []int{3}
}
func (m *RulePatternType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RulePatternType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RulePatternType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RulePatternType.Merge(m, src)
}
func (m *RulePatternType) XXX_Size() int {
	return m.Size()
}
func (m *RulePatternType) XXX_DiscardUnknown() {
	xxx_messageInfo_RulePatternType.DiscardUnknown(m)
}

var xxx_messageInfo_RulePatternType proto.InternalMessageInfo

type isRulePatternType_TypeChoice interface {
	isRulePatternType_TypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RulePatternType_RegexValue struct {
	RegexValue string `protobuf:"bytes,2,opt,name=regex_value,json=regexValue,proto3,oneof" json:"regex_value,omitempty"`
}
type RulePatternType_ExactValues struct {
	ExactValues *ExactValues `protobuf:"bytes,3,opt,name=exact_values,json=exactValues,proto3,oneof" json:"exact_values,omitempty"`
}
type RulePatternType_SubstringValue struct {
	SubstringValue string `protobuf:"bytes,4,opt,name=substring_value,json=substringValue,proto3,oneof" json:"substring_value,omitempty"`
}

func (*RulePatternType_RegexValue) isRulePatternType_TypeChoice()     {}
func (*RulePatternType_ExactValues) isRulePatternType_TypeChoice()    {}
func (*RulePatternType_SubstringValue) isRulePatternType_TypeChoice() {}

func (m *RulePatternType) GetTypeChoice() isRulePatternType_TypeChoice {
	if m != nil {
		return m.TypeChoice
	}
	return nil
}

func (m *RulePatternType) GetRegexValue() string {
	if x, ok := m.GetTypeChoice().(*RulePatternType_RegexValue); ok {
		return x.RegexValue
	}
	return ""
}

func (m *RulePatternType) GetExactValues() *ExactValues {
	if x, ok := m.GetTypeChoice().(*RulePatternType_ExactValues); ok {
		return x.ExactValues
	}
	return nil
}

func (m *RulePatternType) GetSubstringValue() string {
	if x, ok := m.GetTypeChoice().(*RulePatternType_SubstringValue); ok {
		return x.SubstringValue
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RulePatternType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RulePatternType_RegexValue)(nil),
		(*RulePatternType_ExactValues)(nil),
		(*RulePatternType_SubstringValue)(nil),
	}
}

// ExactValues
//
// x-displayName: "Exact Values"
// List of exact values to match.
type ExactValues struct {
	// exact_values
	//
	// x-displayName: "Exact Values"
	// x-required
	// x-example: "email, Email, EMAIL"
	// List of exact values to match.
	ExactValues []string `protobuf:"bytes,1,rep,name=exact_values,json=exactValues,proto3" json:"exact_values,omitempty"`
}

func (m *ExactValues) Reset()      { *m = ExactValues{} }
func (*ExactValues) ProtoMessage() {}
func (*ExactValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_136de77f19e642aa, []int{4}
}
func (m *ExactValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExactValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExactValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExactValues.Merge(m, src)
}
func (m *ExactValues) XXX_Size() int {
	return m.Size()
}
func (m *ExactValues) XXX_DiscardUnknown() {
	xxx_messageInfo_ExactValues.DiscardUnknown(m)
}

var xxx_messageInfo_ExactValues proto.InternalMessageInfo

func (m *ExactValues) GetExactValues() []string {
	if m != nil {
		return m.ExactValues
	}
	return nil
}

// Key-Value Pattern
//
// x-displayName: "Key & Value Pattern"
// Search for specific key & value patterns in the specified sections.
type KeyValuePattern struct {
	// key_pattern
	//
	// x-displayName: "Key Pattern"
	// x-required
	// Pattern for key/field.
	KeyPattern *RulePatternType `protobuf:"bytes,1,opt,name=key_pattern,json=keyPattern,proto3" json:"key_pattern,omitempty"`
	// value_pattern
	//
	// x-displayName: "Value Pattern"
	// x-required
	// Pattern for value.
	ValuePattern *RulePatternType `protobuf:"bytes,2,opt,name=value_pattern,json=valuePattern,proto3" json:"value_pattern,omitempty"`
}

func (m *KeyValuePattern) Reset()      { *m = KeyValuePattern{} }
func (*KeyValuePattern) ProtoMessage() {}
func (*KeyValuePattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_136de77f19e642aa, []int{5}
}
func (m *KeyValuePattern) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValuePattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KeyValuePattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValuePattern.Merge(m, src)
}
func (m *KeyValuePattern) XXX_Size() int {
	return m.Size()
}
func (m *KeyValuePattern) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValuePattern.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValuePattern proto.InternalMessageInfo

func (m *KeyValuePattern) GetKeyPattern() *RulePatternType {
	if m != nil {
		return m.KeyPattern
	}
	return nil
}

func (m *KeyValuePattern) GetValuePattern() *RulePatternType {
	if m != nil {
		return m.ValuePattern
	}
	return nil
}

// DetectionRule
//
// x-displayName: "Detection Rule"
// The detection rule specifies patterns and values to detect data type by.
type DetectionRule struct {
	// pattern choice
	//
	// x-displayName: "Pattern Choice"
	// x-required
	//Search the data type in the key, value or both
	//
	// Types that are valid to be assigned to PatternChoice:
	//	*DetectionRule_KeyPattern
	//	*DetectionRule_ValuePattern
	//	*DetectionRule_KeyValuePattern
	PatternChoice isDetectionRule_PatternChoice `protobuf_oneof:"pattern_choice"`
}

func (m *DetectionRule) Reset()      { *m = DetectionRule{} }
func (*DetectionRule) ProtoMessage() {}
func (*DetectionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_136de77f19e642aa, []int{6}
}
func (m *DetectionRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetectionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DetectionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectionRule.Merge(m, src)
}
func (m *DetectionRule) XXX_Size() int {
	return m.Size()
}
func (m *DetectionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectionRule.DiscardUnknown(m)
}

var xxx_messageInfo_DetectionRule proto.InternalMessageInfo

type isDetectionRule_PatternChoice interface {
	isDetectionRule_PatternChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DetectionRule_KeyPattern struct {
	KeyPattern *RulePatternType `protobuf:"bytes,2,opt,name=key_pattern,json=keyPattern,proto3,oneof" json:"key_pattern,omitempty"`
}
type DetectionRule_ValuePattern struct {
	ValuePattern *RulePatternType `protobuf:"bytes,3,opt,name=value_pattern,json=valuePattern,proto3,oneof" json:"value_pattern,omitempty"`
}
type DetectionRule_KeyValuePattern struct {
	KeyValuePattern *KeyValuePattern `protobuf:"bytes,4,opt,name=key_value_pattern,json=keyValuePattern,proto3,oneof" json:"key_value_pattern,omitempty"`
}

func (*DetectionRule_KeyPattern) isDetectionRule_PatternChoice()      {}
func (*DetectionRule_ValuePattern) isDetectionRule_PatternChoice()    {}
func (*DetectionRule_KeyValuePattern) isDetectionRule_PatternChoice() {}

func (m *DetectionRule) GetPatternChoice() isDetectionRule_PatternChoice {
	if m != nil {
		return m.PatternChoice
	}
	return nil
}

func (m *DetectionRule) GetKeyPattern() *RulePatternType {
	if x, ok := m.GetPatternChoice().(*DetectionRule_KeyPattern); ok {
		return x.KeyPattern
	}
	return nil
}

func (m *DetectionRule) GetValuePattern() *RulePatternType {
	if x, ok := m.GetPatternChoice().(*DetectionRule_ValuePattern); ok {
		return x.ValuePattern
	}
	return nil
}

func (m *DetectionRule) GetKeyValuePattern() *KeyValuePattern {
	if x, ok := m.GetPatternChoice().(*DetectionRule_KeyValuePattern); ok {
		return x.KeyValuePattern
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DetectionRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DetectionRule_KeyPattern)(nil),
		(*DetectionRule_ValuePattern)(nil),
		(*DetectionRule_KeyValuePattern)(nil),
	}
}

// Create data type
//
// x-displayName: "Create Data Type"
// Create data_type creates a new object in the storage backend for metadata.namespace.
type CreateSpecType struct {
	Rules           []*DetectionRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	IsSensitiveData bool             `protobuf:"varint,2,opt,name=is_sensitive_data,json=isSensitiveData,proto3" json:"is_sensitive_data,omitempty"`
	IsPii           bool             `protobuf:"varint,3,opt,name=is_pii,json=isPii,proto3" json:"is_pii,omitempty"`
	Compliances     []Compliance     `protobuf:"varint,4,rep,packed,name=compliances,proto3,enum=ves.io.schema.data_type.Compliance" json:"compliances,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_136de77f19e642aa, []int{7}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetRules() []*DetectionRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *CreateSpecType) GetIsSensitiveData() bool {
	if m != nil {
		return m.IsSensitiveData
	}
	return false
}

func (m *CreateSpecType) GetIsPii() bool {
	if m != nil {
		return m.IsPii
	}
	return false
}

func (m *CreateSpecType) GetCompliances() []Compliance {
	if m != nil {
		return m.Compliances
	}
	return nil
}

// Replace Data Types
//
// x-displayName: "Replace Data Type"
// Replace data_type replaces an existing object in the storage backend for metadata.namespace.
type ReplaceSpecType struct {
	Rules           []*DetectionRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	IsSensitiveData bool             `protobuf:"varint,2,opt,name=is_sensitive_data,json=isSensitiveData,proto3" json:"is_sensitive_data,omitempty"`
	IsPii           bool             `protobuf:"varint,3,opt,name=is_pii,json=isPii,proto3" json:"is_pii,omitempty"`
	Compliances     []Compliance     `protobuf:"varint,4,rep,packed,name=compliances,proto3,enum=ves.io.schema.data_type.Compliance" json:"compliances,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_136de77f19e642aa, []int{8}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetRules() []*DetectionRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *ReplaceSpecType) GetIsSensitiveData() bool {
	if m != nil {
		return m.IsSensitiveData
	}
	return false
}

func (m *ReplaceSpecType) GetIsPii() bool {
	if m != nil {
		return m.IsPii
	}
	return false
}

func (m *ReplaceSpecType) GetCompliances() []Compliance {
	if m != nil {
		return m.Compliances
	}
	return nil
}

// Get Data Types
//
// x-displayName: "Get Data Type"
// Get data_type reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	Rules           []*DetectionRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	IsSensitiveData bool             `protobuf:"varint,2,opt,name=is_sensitive_data,json=isSensitiveData,proto3" json:"is_sensitive_data,omitempty"`
	IsPii           bool             `protobuf:"varint,3,opt,name=is_pii,json=isPii,proto3" json:"is_pii,omitempty"`
	Compliances     []Compliance     `protobuf:"varint,4,rep,packed,name=compliances,proto3,enum=ves.io.schema.data_type.Compliance" json:"compliances,omitempty"`
	Type            *OriginType      `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_136de77f19e642aa, []int{9}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetRules() []*DetectionRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *GetSpecType) GetIsSensitiveData() bool {
	if m != nil {
		return m.IsSensitiveData
	}
	return false
}

func (m *GetSpecType) GetIsPii() bool {
	if m != nil {
		return m.IsPii
	}
	return false
}

func (m *GetSpecType) GetCompliances() []Compliance {
	if m != nil {
		return m.Compliances
	}
	return nil
}

func (m *GetSpecType) GetType() *OriginType {
	if m != nil {
		return m.Type
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.data_type.Compliance", Compliance_name, Compliance_value)
	golang_proto.RegisterEnum("ves.io.schema.data_type.Compliance", Compliance_name, Compliance_value)
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.data_type.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.data_type.GlobalSpecType")
	proto.RegisterType((*OriginType)(nil), "ves.io.schema.data_type.OriginType")
	golang_proto.RegisterType((*OriginType)(nil), "ves.io.schema.data_type.OriginType")
	proto.RegisterType((*DetectionMethod)(nil), "ves.io.schema.data_type.DetectionMethod")
	golang_proto.RegisterType((*DetectionMethod)(nil), "ves.io.schema.data_type.DetectionMethod")
	proto.RegisterType((*RulePatternType)(nil), "ves.io.schema.data_type.RulePatternType")
	golang_proto.RegisterType((*RulePatternType)(nil), "ves.io.schema.data_type.RulePatternType")
	proto.RegisterType((*ExactValues)(nil), "ves.io.schema.data_type.ExactValues")
	golang_proto.RegisterType((*ExactValues)(nil), "ves.io.schema.data_type.ExactValues")
	proto.RegisterType((*KeyValuePattern)(nil), "ves.io.schema.data_type.KeyValuePattern")
	golang_proto.RegisterType((*KeyValuePattern)(nil), "ves.io.schema.data_type.KeyValuePattern")
	proto.RegisterType((*DetectionRule)(nil), "ves.io.schema.data_type.DetectionRule")
	golang_proto.RegisterType((*DetectionRule)(nil), "ves.io.schema.data_type.DetectionRule")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.data_type.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.data_type.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.data_type.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.data_type.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.data_type.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.data_type.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/data_type/types.proto", fileDescriptor_136de77f19e642aa)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/data_type/types.proto", fileDescriptor_136de77f19e642aa)
}

var fileDescriptor_136de77f19e642aa = []byte{
	// 1404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0xcb, 0x6f, 0x1b, 0x55,
	0x17, 0xf7, 0x8d, 0x1f, 0x71, 0xce, 0xd4, 0xf1, 0xe4, 0xb6, 0xfd, 0x9a, 0x4e, 0xbf, 0x6f, 0x3e,
	0xcb, 0x6d, 0xc1, 0x4d, 0x13, 0x3b, 0x75, 0x4a, 0x23, 0x42, 0xa9, 0xe4, 0x57, 0x93, 0x21, 0x2d,
	0x19, 0xc6, 0x6d, 0x78, 0x48, 0xd5, 0x68, 0x32, 0xbe, 0x75, 0x46, 0xb1, 0x3d, 0xc3, 0xcc, 0xd8,
	0xd4, 0x62, 0x53, 0xd8, 0xb2, 0xa9, 0x22, 0xb1, 0x81, 0x15, 0x1b, 0x84, 0xc4, 0x7f, 0x80, 0x59,
	0x64, 0x83, 0x84, 0xba, 0x40, 0x59, 0x56, 0xac, 0x1a, 0x67, 0x53, 0x04, 0x42, 0x45, 0x42, 0x2c,
	0x11, 0x9a, 0xf1, 0xd8, 0x9e, 0x71, 0x70, 0x9d, 0x64, 0x09, 0x1b, 0xeb, 0x3e, 0x7e, 0xe7, 0x77,
	0x7e, 0xe7, 0x9c, 0x7b, 0xaf, 0xcf, 0xc0, 0xf9, 0x06, 0x31, 0x92, 0x8a, 0x9a, 0x32, 0xe4, 0x4d,
	0x52, 0x95, 0x52, 0x25, 0xc9, 0x94, 0x44, 0xb3, 0xa9, 0x91, 0x94, 0xf5, 0x63, 0x24, 0x35, 0x5d,
	0x35, 0x55, 0x7c, 0xa6, 0x03, 0x4a, 0x76, 0x40, 0xc9, 0x1e, 0x88, 0x99, 0x2b, 0x2b, 0xe6, 0x66,
	0x7d, 0x23, 0x29, 0xab, 0xd5, 0x54, 0x59, 0x2d, 0xab, 0x29, 0x1b, 0xbf, 0x51, 0xbf, 0x6f, 0xcf,
	0xec, 0x89, 0x3d, 0xea, 0xf0, 0x30, 0xe7, 0xbc, 0xce, 0x54, 0xcd, 0x54, 0xd4, 0x9a, 0xe3, 0x84,
	0x39, 0xeb, 0xdd, 0x74, 0xf9, 0x67, 0xfe, 0xeb, 0xdd, 0x6a, 0x48, 0x15, 0xa5, 0x24, 0x99, 0xc4,
	0xd9, 0x8d, 0x0d, 0xec, 0x2a, 0xe4, 0x03, 0xd1, 0x43, 0x1d, 0xff, 0x21, 0x00, 0x93, 0xcb, 0x15,
	0x75, 0x43, 0xaa, 0x14, 0x35, 0x22, 0xdf, 0x69, 0x6a, 0x04, 0xdf, 0x83, 0xa0, 0x5e, 0xaf, 0x10,
	0x63, 0x1a, 0xc5, 0xfc, 0x09, 0x2a, 0xfd, 0x52, 0x72, 0x48, 0x88, 0xc9, 0x3c, 0x31, 0x89, 0x6c,
	0x91, 0x09, 0xf5, 0x0a, 0xc9, 0xfe, 0xff, 0x9b, 0x9f, 0x76, 0xfc, 0xc1, 0x6d, 0x34, 0x46, 0x97,
	0xba, 0xa3, 0x69, 0xd4, 0x7e, 0xfa, 0x9d, 0x3f, 0xb4, 0xfd, 0x2d, 0x1a, 0xa3, 0x91, 0xd0, 0x61,
	0xc5, 0x57, 0x61, 0x4a, 0x31, 0x44, 0x83, 0xd4, 0x0c, 0xc5, 0x54, 0x1a, 0x44, 0xb4, 0xf8, 0xa6,
	0xc7, 0x62, 0x28, 0x11, 0xce, 0x86, 0x7f, 0x6c, 0xa1, 0x80, 0xa9, 0xd7, 0x89, 0x10, 0x55, 0x8c,
	0x62, 0x17, 0x91, 0x97, 0x4c, 0x09, 0x9f, 0x83, 0x90, 0x62, 0x88, 0x9a, 0xa2, 0x4c, 0xfb, 0x6d,
	0x68, 0xe0, 0x59, 0x0b, 0x21, 0x21, 0xa8, 0x18, 0xbc, 0xa2, 0xe0, 0xf7, 0x81, 0x92, 0xd5, 0xaa,
	0x56, 0x51, 0xa4, 0x9a, 0x4c, 0x8c, 0xe9, 0x40, 0xcc, 0x9f, 0x98, 0x4c, 0x9f, 0x1f, 0xaa, 0x3b,
	0xd7, 0xc3, 0x66, 0x67, 0x2c, 0x1a, 0x4b, 0x6e, 0x64, 0x1b, 0x41, 0x3c, 0xfc, 0x31, 0x0a, 0xd2,
	0x28, 0x8e, 0x7c, 0xbd, 0x50, 0xa6, 0xfa, 0xa1, 0x08, 0x6e, 0x1f, 0xf8, 0x26, 0x84, 0xaa, 0xc4,
	0xdc, 0x54, 0x4b, 0xd3, 0xc1, 0x18, 0x4a, 0x50, 0xe9, 0xc4, 0xe8, 0x2c, 0xdd, 0xb6, 0xf1, 0x8e,
	0x72, 0xc7, 0x1a, 0x2f, 0x42, 0xc0, 0x42, 0x4d, 0x87, 0x6c, 0x96, 0xe1, 0x9a, 0xd7, 0x74, 0xa5,
	0xac, 0xd4, 0xac, 0xfa, 0x08, 0xb6, 0xc1, 0xd2, 0xa7, 0xe8, 0x71, 0x0b, 0x3d, 0x42, 0xc0, 0x40,
	0xb4, 0xe7, 0x21, 0x66, 0x15, 0xc2, 0x60, 0xc6, 0x9d, 0x02, 0xc2, 0x0c, 0x9c, 0xec, 0x65, 0x31,
	0x66, 0xa5, 0x31, 0x66, 0x11, 0x30, 0x27, 0xff, 0xa6, 0x02, 0x10, 0x05, 0x3f, 0xcf, 0x71, 0x4c,
	0xb8, 0x9b, 0x67, 0xb8, 0x08, 0xa7, 0x04, 0x52, 0x21, 0x0d, 0xa9, 0x66, 0xc6, 0xfa, 0x19, 0x33,
	0x98, 0x88, 0x27, 0xd9, 0x30, 0x09, 0x01, 0x9b, 0x34, 0xd4, 0x09, 0x24, 0xfe, 0x19, 0x02, 0xe8,
	0x8b, 0xc5, 0x49, 0x08, 0xc9, 0x75, 0xc3, 0x54, 0xab, 0x76, 0x89, 0xa9, 0xf4, 0xa9, 0x81, 0x08,
	0x0b, 0x55, 0xcd, 0x6c, 0xae, 0xf8, 0x04, 0x07, 0x85, 0xaf, 0x01, 0x68, 0x3a, 0x29, 0x91, 0xfb,
	0x4a, 0x8d, 0x94, 0xec, 0x5a, 0x0f, 0xb7, 0x71, 0x21, 0xb3, 0x2c, 0x50, 0x96, 0x7b, 0x51, 0xde,
	0x54, 0x15, 0x99, 0xe0, 0xe8, 0x4e, 0x0b, 0x8d, 0xed, 0xb6, 0x10, 0x6a, 0xb7, 0x90, 0x3f, 0x3d,
	0xbb, 0xf0, 0x46, 0x20, 0x8c, 0xe8, 0xb1, 0xf8, 0xe7, 0xc8, 0x95, 0xad, 0x4e, 0x3d, 0xf0, 0x3c,
	0x8c, 0x6b, 0x92, 0x69, 0x12, 0xbd, 0x36, 0x42, 0x62, 0x17, 0xe6, 0x8a, 0xc9, 0x7f, 0x98, 0x98,
	0xb2, 0x31, 0x88, 0x74, 0xaa, 0x3d, 0x42, 0xdd, 0xef, 0x08, 0xa2, 0x56, 0x05, 0xf9, 0x8e, 0x1f,
	0x3b, 0x7f, 0x8b, 0x40, 0xe9, 0xa4, 0x4c, 0x1e, 0x88, 0x0d, 0xa9, 0x52, 0x27, 0xb6, 0xc2, 0x89,
	0xec, 0x29, 0xfb, 0x54, 0xea, 0xfe, 0xc4, 0xc3, 0xb0, 0x33, 0xda, 0x41, 0xc8, 0x4a, 0x88, 0x0d,
	0x5d, 0xb7, 0x90, 0x98, 0x83, 0x13, 0xe4, 0x81, 0x24, 0x9b, 0x1d, 0x43, 0xc3, 0x91, 0x7a, 0x61,
	0xe8, 0x01, 0x2b, 0x58, 0x60, 0xdb, 0xd4, 0x58, 0xf1, 0x09, 0x14, 0xe9, 0x4f, 0xf1, 0x2b, 0x10,
	0x35, 0xea, 0x1b, 0x86, 0xa9, 0x2b, 0xb5, 0xb2, 0xa3, 0x23, 0x60, 0xeb, 0x80, 0xbe, 0x8e, 0x15,
	0x9f, 0x30, 0xd9, 0x03, 0xd9, 0x76, 0xd9, 0x98, 0xb7, 0x24, 0x53, 0xae, 0xa0, 0x83, 0xe9, 0xd9,
	0x85, 0xd9, 0xab, 0x4e, 0xd8, 0xab, 0x40, 0xb9, 0x9c, 0xe3, 0xeb, 0x03, 0xc2, 0xad, 0x57, 0x68,
	0x22, 0x7b, 0xd6, 0x72, 0x05, 0xdb, 0x68, 0x3c, 0xee, 0x8a, 0xdb, 0xb9, 0x97, 0x2e, 0xad, 0xf1,
	0xaf, 0x11, 0x44, 0x57, 0x49, 0xd3, 0x9e, 0x39, 0x79, 0xc4, 0x1c, 0x50, 0x5b, 0xa4, 0x29, 0x76,
	0xab, 0x8c, 0x46, 0x5c, 0xd8, 0x81, 0x12, 0x08, 0xb0, 0x45, 0x9a, 0x5d, 0xaa, 0xdb, 0x10, 0xb1,
	0x65, 0x89, 0xde, 0x23, 0x73, 0x78, 0xb2, 0x13, 0x0d, 0x97, 0xb2, 0xf8, 0x97, 0x13, 0x10, 0xf1,
	0xbc, 0xa2, 0xf8, 0x2d, 0xaf, 0xd6, 0x23, 0xd2, 0x67, 0x03, 0xcf, 0x5b, 0x9d, 0x93, 0xe0, 0xd2,
	0xbc, 0x36, 0xa8, 0xd9, 0x7f, 0x34, 0xd2, 0x15, 0x9f, 0x57, 0x35, 0x5e, 0x87, 0x29, 0x4b, 0xa3,
	0x97, 0x34, 0x30, 0x82, 0x74, 0xa0, 0x28, 0x2b, 0x3e, 0x21, 0xba, 0xe5, 0x5d, 0x5a, 0xfa, 0x23,
	0xf4, 0xb8, 0x85, 0x7e, 0x0b, 0xc1, 0xaf, 0x21, 0x08, 0x3b, 0x6b, 0x86, 0xb0, 0x17, 0x82, 0xb7,
	0xf1, 0x45, 0x57, 0x4e, 0x92, 0xee, 0xd3, 0xe1, 0x99, 0x30, 0xfe, 0x55, 0xd2, 0x9c, 0xb9, 0x04,
	0x87, 0x43, 0xd3, 0x32, 0x5c, 0xc0, 0x67, 0xdc, 0x50, 0xd7, 0x45, 0x63, 0x26, 0x56, 0x49, 0x33,
	0x26, 0x58, 0x0b, 0x30, 0x8b, 0xcf, 0xb9, 0x51, 0x03, 0x57, 0x81, 0x89, 0x58, 0xc8, 0x62, 0x77,
	0x11, 0xee, 0xe1, 0x97, 0x3d, 0x89, 0x79, 0x81, 0xdc, 0xa0, 0x1d, 0xfd, 0xcc, 0x65, 0x38, 0xac,
	0x05, 0x2d, 0x43, 0x02, 0x9f, 0xf5, 0x82, 0xdd, 0xa2, 0x29, 0x9b, 0xd0, 0x91, 0x3d, 0x8f, 0xff,
	0xe7, 0x45, 0x0e, 0x0a, 0x8f, 0x76, 0xd0, 0x7d, 0xe9, 0x1f, 0xe2, 0xc5, 0x03, 0x75, 0x4d, 0x1e,
	0x21, 0xf3, 0xaf, 0xc1, 0x71, 0xed, 0x69, 0x19, 0x3e, 0x42, 0xf8, 0xd5, 0x83, 0xd6, 0x47, 0x4c,
	0xe5, 0xeb, 0x70, 0x7c, 0x0e, 0x5a, 0x86, 0x6b, 0xf8, 0xd2, 0x8b, 0x03, 0x18, 0x72, 0x42, 0x96,
	0xf0, 0xe5, 0x51, 0x6e, 0x87, 0x96, 0xe9, 0x06, 0x9e, 0x7b, 0xb1, 0xcf, 0x11, 0xe7, 0x2d, 0x8b,
	0x53, 0xa3, 0x7c, 0x8f, 0x2a, 0x7c, 0x96, 0x81, 0x49, 0x07, 0xdb, 0x7d, 0xac, 0xc3, 0xdd, 0xc7,
	0xda, 0x79, 0xa3, 0x7f, 0x46, 0x30, 0x99, 0xd3, 0x89, 0x64, 0x92, 0x5e, 0x9b, 0x78, 0xfd, 0x58,
	0x6d, 0x62, 0xb7, 0x0b, 0x9c, 0x19, 0xda, 0x05, 0x1e, 0xec, 0xfd, 0x4e, 0x7b, 0x7b, 0xbf, 0x6e,
	0xd7, 0x57, 0x38, 0x6e, 0xd7, 0xe7, 0xe9, 0xe4, 0x96, 0xa6, 0x1e, 0xdf, 0x18, 0xe8, 0x80, 0xe3,
	0xbf, 0x58, 0x7f, 0xc4, 0x44, 0xab, 0x48, 0xf2, 0xbf, 0x22, 0xdc, 0x2f, 0xc6, 0x80, 0x5a, 0x26,
	0xe6, 0x3f, 0x2d, 0xd4, 0x5e, 0x6f, 0x1d, 0x3c, 0x6a, 0x6f, 0x7d, 0x30, 0x47, 0x33, 0x7f, 0x22,
	0x80, 0xbe, 0x1f, 0x7c, 0x1a, 0xa8, 0xbb, 0x6f, 0x16, 0xf9, 0x42, 0x8e, 0xbb, 0xc9, 0x15, 0xf2,
	0xb4, 0x8f, 0x09, 0xec, 0xb4, 0x10, 0xc2, 0x61, 0x08, 0x2c, 0xe7, 0x79, 0x81, 0xb6, 0x47, 0xb9,
	0x1c, 0x9f, 0xa1, 0xc7, 0x30, 0x40, 0x88, 0xe7, 0xf8, 0x42, 0x3e, 0x43, 0xfb, 0xad, 0xd5, 0x5b,
	0xcb, 0x7c, 0x9e, 0x0e, 0x58, 0xab, 0x79, 0x3e, 0x23, 0xde, 0x5d, 0xa5, 0x83, 0x98, 0x82, 0x71,
	0xde, 0x9a, 0x14, 0x97, 0xe9, 0x90, 0x05, 0xc9, 0xf0, 0x3c, 0x47, 0x8f, 0xe3, 0x09, 0x08, 0xae,
	0x70, 0x7c, 0x26, 0x43, 0x87, 0x71, 0x04, 0x26, 0x72, 0xbc, 0x90, 0x11, 0xd3, 0xf3, 0xe9, 0x05,
	0x7a, 0xc2, 0x32, 0xce, 0xf1, 0x19, 0x31, 0xb7, 0x46, 0x83, 0x85, 0x2f, 0xae, 0xe5, 0xd2, 0x34,
	0x65, 0xd3, 0xe4, 0x38, 0x31, 0x5f, 0x2c, 0xd2, 0x27, 0xf0, 0x14, 0x44, 0xb8, 0xe2, 0x9a, 0xc8,
	0x15, 0x72, 0x62, 0x7a, 0x71, 0x7e, 0xfe, 0x0a, 0x1d, 0xf1, 0x2e, 0x2d, 0xce, 0x5f, 0xa1, 0x27,
	0xf1, 0x7f, 0x00, 0x17, 0x78, 0x81, 0x5b, 0xcf, 0xe4, 0xde, 0x15, 0xf3, 0x9c, 0x50, 0xc8, 0xdd,
	0xe1, 0xd6, 0x0b, 0x74, 0xd4, 0x8e, 0xe3, 0x56, 0x36, 0x43, 0xd3, 0x78, 0x1c, 0xfc, 0xc5, 0xb5,
	0x77, 0xe8, 0xa9, 0xec, 0x27, 0x68, 0x77, 0x8f, 0xf5, 0x3d, 0xd9, 0x63, 0x7d, 0xcf, 0xf7, 0x58,
	0xf4, 0xb0, 0xcd, 0xa2, 0xaf, 0xda, 0x2c, 0xfa, 0xbe, 0xcd, 0xa2, 0xdd, 0x36, 0x8b, 0x9e, 0xb4,
	0x59, 0xf4, 0xb4, 0xcd, 0xa2, 0x67, 0x6d, 0xd6, 0xf7, 0xbc, 0xcd, 0xa2, 0x47, 0xfb, 0xac, 0x6f,
	0x67, 0x9f, 0x45, 0xbb, 0xfb, 0xac, 0xef, 0xc9, 0x3e, 0xeb, 0x7b, 0xef, 0x76, 0x59, 0xd5, 0xb6,
	0xca, 0xc9, 0x86, 0x5a, 0x31, 0x89, 0xae, 0x4b, 0xc9, 0xba, 0x91, 0xb2, 0x07, 0xf7, 0x55, 0xbd,
	0x3a, 0xa7, 0xe9, 0x6a, 0x43, 0x29, 0x11, 0x7d, 0xae, 0xbb, 0x9d, 0xd2, 0x36, 0xca, 0x6a, 0x8a,
	0x3c, 0x30, 0x9d, 0x0f, 0xd7, 0xc1, 0x4f, 0xf0, 0x8d, 0x90, 0xfd, 0xf5, 0xba, 0xf0, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xce, 0x51, 0x49, 0xf0, 0xa4, 0x0f, 0x00, 0x00,
}

func (x Compliance) String() string {
	s, ok := Compliance_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	if this.IsSensitiveData != that1.IsSensitiveData {
		return false
	}
	if this.IsPii != that1.IsPii {
		return false
	}
	if len(this.Compliances) != len(that1.Compliances) {
		return false
	}
	for i := range this.Compliances {
		if this.Compliances[i] != that1.Compliances[i] {
			return false
		}
	}
	if !this.Method.Equal(that1.Method) {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *OriginType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginType)
	if !ok {
		that2, ok := that.(OriginType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TypeChoice == nil {
		if this.TypeChoice != nil {
			return false
		}
	} else if this.TypeChoice == nil {
		return false
	} else if !this.TypeChoice.Equal(that1.TypeChoice) {
		return false
	}
	return true
}
func (this *OriginType_Custom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginType_Custom)
	if !ok {
		that2, ok := that.(OriginType_Custom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Custom.Equal(that1.Custom) {
		return false
	}
	return true
}
func (this *OriginType_Predefined) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginType_Predefined)
	if !ok {
		that2, ok := that.(OriginType_Predefined)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Predefined.Equal(that1.Predefined) {
		return false
	}
	return true
}
func (this *DetectionMethod) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionMethod)
	if !ok {
		that2, ok := that.(DetectionMethod)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.MethodChoice == nil {
		if this.MethodChoice != nil {
			return false
		}
	} else if this.MethodChoice == nil {
		return false
	} else if !this.MethodChoice.Equal(that1.MethodChoice) {
		return false
	}
	return true
}
func (this *DetectionMethod_Pattern) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionMethod_Pattern)
	if !ok {
		that2, ok := that.(DetectionMethod_Pattern)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pattern.Equal(that1.Pattern) {
		return false
	}
	return true
}
func (this *DetectionMethod_Custom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionMethod_Custom)
	if !ok {
		that2, ok := that.(DetectionMethod_Custom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Custom.Equal(that1.Custom) {
		return false
	}
	return true
}
func (this *RulePatternType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RulePatternType)
	if !ok {
		that2, ok := that.(RulePatternType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TypeChoice == nil {
		if this.TypeChoice != nil {
			return false
		}
	} else if this.TypeChoice == nil {
		return false
	} else if !this.TypeChoice.Equal(that1.TypeChoice) {
		return false
	}
	return true
}
func (this *RulePatternType_RegexValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RulePatternType_RegexValue)
	if !ok {
		that2, ok := that.(RulePatternType_RegexValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegexValue != that1.RegexValue {
		return false
	}
	return true
}
func (this *RulePatternType_ExactValues) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RulePatternType_ExactValues)
	if !ok {
		that2, ok := that.(RulePatternType_ExactValues)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExactValues.Equal(that1.ExactValues) {
		return false
	}
	return true
}
func (this *RulePatternType_SubstringValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RulePatternType_SubstringValue)
	if !ok {
		that2, ok := that.(RulePatternType_SubstringValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SubstringValue != that1.SubstringValue {
		return false
	}
	return true
}
func (this *ExactValues) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExactValues)
	if !ok {
		that2, ok := that.(ExactValues)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ExactValues) != len(that1.ExactValues) {
		return false
	}
	for i := range this.ExactValues {
		if this.ExactValues[i] != that1.ExactValues[i] {
			return false
		}
	}
	return true
}
func (this *KeyValuePattern) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KeyValuePattern)
	if !ok {
		that2, ok := that.(KeyValuePattern)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KeyPattern.Equal(that1.KeyPattern) {
		return false
	}
	if !this.ValuePattern.Equal(that1.ValuePattern) {
		return false
	}
	return true
}
func (this *DetectionRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionRule)
	if !ok {
		that2, ok := that.(DetectionRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PatternChoice == nil {
		if this.PatternChoice != nil {
			return false
		}
	} else if this.PatternChoice == nil {
		return false
	} else if !this.PatternChoice.Equal(that1.PatternChoice) {
		return false
	}
	return true
}
func (this *DetectionRule_KeyPattern) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionRule_KeyPattern)
	if !ok {
		that2, ok := that.(DetectionRule_KeyPattern)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KeyPattern.Equal(that1.KeyPattern) {
		return false
	}
	return true
}
func (this *DetectionRule_ValuePattern) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionRule_ValuePattern)
	if !ok {
		that2, ok := that.(DetectionRule_ValuePattern)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ValuePattern.Equal(that1.ValuePattern) {
		return false
	}
	return true
}
func (this *DetectionRule_KeyValuePattern) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionRule_KeyValuePattern)
	if !ok {
		that2, ok := that.(DetectionRule_KeyValuePattern)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KeyValuePattern.Equal(that1.KeyValuePattern) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	if this.IsSensitiveData != that1.IsSensitiveData {
		return false
	}
	if this.IsPii != that1.IsPii {
		return false
	}
	if len(this.Compliances) != len(that1.Compliances) {
		return false
	}
	for i := range this.Compliances {
		if this.Compliances[i] != that1.Compliances[i] {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	if this.IsSensitiveData != that1.IsSensitiveData {
		return false
	}
	if this.IsPii != that1.IsPii {
		return false
	}
	if len(this.Compliances) != len(that1.Compliances) {
		return false
	}
	for i := range this.Compliances {
		if this.Compliances[i] != that1.Compliances[i] {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	if this.IsSensitiveData != that1.IsSensitiveData {
		return false
	}
	if this.IsPii != that1.IsPii {
		return false
	}
	if len(this.Compliances) != len(that1.Compliances) {
		return false
	}
	for i := range this.Compliances {
		if this.Compliances[i] != that1.Compliances[i] {
			return false
		}
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&data_type.GlobalSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "IsSensitiveData: "+fmt.Sprintf("%#v", this.IsSensitiveData)+",\n")
	s = append(s, "IsPii: "+fmt.Sprintf("%#v", this.IsPii)+",\n")
	s = append(s, "Compliances: "+fmt.Sprintf("%#v", this.Compliances)+",\n")
	if this.Method != nil {
		s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	}
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&data_type.OriginType{")
	if this.TypeChoice != nil {
		s = append(s, "TypeChoice: "+fmt.Sprintf("%#v", this.TypeChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginType_Custom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&data_type.OriginType_Custom{` +
		`Custom:` + fmt.Sprintf("%#v", this.Custom) + `}`}, ", ")
	return s
}
func (this *OriginType_Predefined) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&data_type.OriginType_Predefined{` +
		`Predefined:` + fmt.Sprintf("%#v", this.Predefined) + `}`}, ", ")
	return s
}
func (this *DetectionMethod) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&data_type.DetectionMethod{")
	if this.MethodChoice != nil {
		s = append(s, "MethodChoice: "+fmt.Sprintf("%#v", this.MethodChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DetectionMethod_Pattern) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&data_type.DetectionMethod_Pattern{` +
		`Pattern:` + fmt.Sprintf("%#v", this.Pattern) + `}`}, ", ")
	return s
}
func (this *DetectionMethod_Custom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&data_type.DetectionMethod_Custom{` +
		`Custom:` + fmt.Sprintf("%#v", this.Custom) + `}`}, ", ")
	return s
}
func (this *RulePatternType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&data_type.RulePatternType{")
	if this.TypeChoice != nil {
		s = append(s, "TypeChoice: "+fmt.Sprintf("%#v", this.TypeChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RulePatternType_RegexValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&data_type.RulePatternType_RegexValue{` +
		`RegexValue:` + fmt.Sprintf("%#v", this.RegexValue) + `}`}, ", ")
	return s
}
func (this *RulePatternType_ExactValues) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&data_type.RulePatternType_ExactValues{` +
		`ExactValues:` + fmt.Sprintf("%#v", this.ExactValues) + `}`}, ", ")
	return s
}
func (this *RulePatternType_SubstringValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&data_type.RulePatternType_SubstringValue{` +
		`SubstringValue:` + fmt.Sprintf("%#v", this.SubstringValue) + `}`}, ", ")
	return s
}
func (this *ExactValues) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&data_type.ExactValues{")
	s = append(s, "ExactValues: "+fmt.Sprintf("%#v", this.ExactValues)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KeyValuePattern) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&data_type.KeyValuePattern{")
	if this.KeyPattern != nil {
		s = append(s, "KeyPattern: "+fmt.Sprintf("%#v", this.KeyPattern)+",\n")
	}
	if this.ValuePattern != nil {
		s = append(s, "ValuePattern: "+fmt.Sprintf("%#v", this.ValuePattern)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DetectionRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&data_type.DetectionRule{")
	if this.PatternChoice != nil {
		s = append(s, "PatternChoice: "+fmt.Sprintf("%#v", this.PatternChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DetectionRule_KeyPattern) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&data_type.DetectionRule_KeyPattern{` +
		`KeyPattern:` + fmt.Sprintf("%#v", this.KeyPattern) + `}`}, ", ")
	return s
}
func (this *DetectionRule_ValuePattern) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&data_type.DetectionRule_ValuePattern{` +
		`ValuePattern:` + fmt.Sprintf("%#v", this.ValuePattern) + `}`}, ", ")
	return s
}
func (this *DetectionRule_KeyValuePattern) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&data_type.DetectionRule_KeyValuePattern{` +
		`KeyValuePattern:` + fmt.Sprintf("%#v", this.KeyValuePattern) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&data_type.CreateSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "IsSensitiveData: "+fmt.Sprintf("%#v", this.IsSensitiveData)+",\n")
	s = append(s, "IsPii: "+fmt.Sprintf("%#v", this.IsPii)+",\n")
	s = append(s, "Compliances: "+fmt.Sprintf("%#v", this.Compliances)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&data_type.ReplaceSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "IsSensitiveData: "+fmt.Sprintf("%#v", this.IsSensitiveData)+",\n")
	s = append(s, "IsPii: "+fmt.Sprintf("%#v", this.IsPii)+",\n")
	s = append(s, "Compliances: "+fmt.Sprintf("%#v", this.Compliances)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&data_type.GetSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "IsSensitiveData: "+fmt.Sprintf("%#v", this.IsSensitiveData)+",\n")
	s = append(s, "IsPii: "+fmt.Sprintf("%#v", this.IsPii)+",\n")
	s = append(s, "Compliances: "+fmt.Sprintf("%#v", this.Compliances)+",\n")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Method != nil {
		{
			size, err := m.Method.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Compliances) > 0 {
		dAtA4 := make([]byte, len(m.Compliances)*10)
		var j3 int
		for _, num := range m.Compliances {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTypes(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if m.IsPii {
		i--
		if m.IsPii {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsSensitiveData {
		i--
		if m.IsSensitiveData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OriginType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeChoice != nil {
		{
			size := m.TypeChoice.Size()
			i -= size
			if _, err := m.TypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OriginType_Custom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginType_Custom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Custom != nil {
		{
			size, err := m.Custom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *OriginType_Predefined) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginType_Predefined) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Predefined != nil {
		{
			size, err := m.Predefined.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DetectionMethod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetectionMethod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionMethod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MethodChoice != nil {
		{
			size := m.MethodChoice.Size()
			i -= size
			if _, err := m.MethodChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DetectionMethod_Pattern) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionMethod_Pattern) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pattern != nil {
		{
			size, err := m.Pattern.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DetectionMethod_Custom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionMethod_Custom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Custom != nil {
		{
			size, err := m.Custom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RulePatternType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RulePatternType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RulePatternType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeChoice != nil {
		{
			size := m.TypeChoice.Size()
			i -= size
			if _, err := m.TypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RulePatternType_RegexValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RulePatternType_RegexValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RegexValue)
	copy(dAtA[i:], m.RegexValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.RegexValue)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *RulePatternType_ExactValues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RulePatternType_ExactValues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExactValues != nil {
		{
			size, err := m.ExactValues.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RulePatternType_SubstringValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RulePatternType_SubstringValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SubstringValue)
	copy(dAtA[i:], m.SubstringValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SubstringValue)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *ExactValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExactValues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExactValues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExactValues) > 0 {
		for iNdEx := len(m.ExactValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExactValues[iNdEx])
			copy(dAtA[i:], m.ExactValues[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactValues[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *KeyValuePattern) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValuePattern) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValuePattern) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValuePattern != nil {
		{
			size, err := m.ValuePattern.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.KeyPattern != nil {
		{
			size, err := m.KeyPattern.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DetectionRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetectionRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PatternChoice != nil {
		{
			size := m.PatternChoice.Size()
			i -= size
			if _, err := m.PatternChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DetectionRule_KeyPattern) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionRule_KeyPattern) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KeyPattern != nil {
		{
			size, err := m.KeyPattern.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DetectionRule_ValuePattern) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionRule_ValuePattern) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValuePattern != nil {
		{
			size, err := m.ValuePattern.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DetectionRule_KeyValuePattern) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionRule_KeyValuePattern) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KeyValuePattern != nil {
		{
			size, err := m.KeyValuePattern.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Compliances) > 0 {
		dAtA16 := make([]byte, len(m.Compliances)*10)
		var j15 int
		for _, num := range m.Compliances {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintTypes(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x22
	}
	if m.IsPii {
		i--
		if m.IsPii {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsSensitiveData {
		i--
		if m.IsSensitiveData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Compliances) > 0 {
		dAtA18 := make([]byte, len(m.Compliances)*10)
		var j17 int
		for _, num := range m.Compliances {
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintTypes(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x22
	}
	if m.IsPii {
		i--
		if m.IsPii {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsSensitiveData {
		i--
		if m.IsSensitiveData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Compliances) > 0 {
		dAtA21 := make([]byte, len(m.Compliances)*10)
		var j20 int
		for _, num := range m.Compliances {
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		i -= j20
		copy(dAtA[i:], dAtA21[:j20])
		i = encodeVarintTypes(dAtA, i, uint64(j20))
		i--
		dAtA[i] = 0x22
	}
	if m.IsPii {
		i--
		if m.IsPii {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsSensitiveData {
		i--
		if m.IsSensitiveData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.IsSensitiveData {
		n += 2
	}
	if m.IsPii {
		n += 2
	}
	if len(m.Compliances) > 0 {
		l = 0
		for _, e := range m.Compliances {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.Method != nil {
		l = m.Method.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OriginType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeChoice != nil {
		n += m.TypeChoice.Size()
	}
	return n
}

func (m *OriginType_Custom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Custom != nil {
		l = m.Custom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginType_Predefined) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Predefined != nil {
		l = m.Predefined.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionMethod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MethodChoice != nil {
		n += m.MethodChoice.Size()
	}
	return n
}

func (m *DetectionMethod_Pattern) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pattern != nil {
		l = m.Pattern.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionMethod_Custom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Custom != nil {
		l = m.Custom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RulePatternType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeChoice != nil {
		n += m.TypeChoice.Size()
	}
	return n
}

func (m *RulePatternType_RegexValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegexValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *RulePatternType_ExactValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExactValues != nil {
		l = m.ExactValues.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RulePatternType_SubstringValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubstringValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ExactValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExactValues) > 0 {
		for _, s := range m.ExactValues {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *KeyValuePattern) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyPattern != nil {
		l = m.KeyPattern.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ValuePattern != nil {
		l = m.ValuePattern.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DetectionRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PatternChoice != nil {
		n += m.PatternChoice.Size()
	}
	return n
}

func (m *DetectionRule_KeyPattern) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyPattern != nil {
		l = m.KeyPattern.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionRule_ValuePattern) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValuePattern != nil {
		l = m.ValuePattern.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionRule_KeyValuePattern) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyValuePattern != nil {
		l = m.KeyValuePattern.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.IsSensitiveData {
		n += 2
	}
	if m.IsPii {
		n += 2
	}
	if len(m.Compliances) > 0 {
		l = 0
		for _, e := range m.Compliances {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.IsSensitiveData {
		n += 2
	}
	if m.IsPii {
		n += 2
	}
	if len(m.Compliances) > 0 {
		l = 0
		for _, e := range m.Compliances {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.IsSensitiveData {
		n += 2
	}
	if m.IsPii {
		n += 2
	}
	if len(m.Compliances) > 0 {
		l = 0
		for _, e := range m.Compliances {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*DetectionRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "DetectionRule", "DetectionRule", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`IsSensitiveData:` + fmt.Sprintf("%v", this.IsSensitiveData) + `,`,
		`IsPii:` + fmt.Sprintf("%v", this.IsPii) + `,`,
		`Compliances:` + fmt.Sprintf("%v", this.Compliances) + `,`,
		`Method:` + strings.Replace(this.Method.String(), "DetectionMethod", "DetectionMethod", 1) + `,`,
		`Type:` + strings.Replace(this.Type.String(), "OriginType", "OriginType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginType{`,
		`TypeChoice:` + fmt.Sprintf("%v", this.TypeChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginType_Custom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginType_Custom{`,
		`Custom:` + strings.Replace(fmt.Sprintf("%v", this.Custom), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginType_Predefined) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginType_Predefined{`,
		`Predefined:` + strings.Replace(fmt.Sprintf("%v", this.Predefined), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionMethod) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionMethod{`,
		`MethodChoice:` + fmt.Sprintf("%v", this.MethodChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionMethod_Pattern) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionMethod_Pattern{`,
		`Pattern:` + strings.Replace(fmt.Sprintf("%v", this.Pattern), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionMethod_Custom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionMethod_Custom{`,
		`Custom:` + strings.Replace(fmt.Sprintf("%v", this.Custom), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RulePatternType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RulePatternType{`,
		`TypeChoice:` + fmt.Sprintf("%v", this.TypeChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RulePatternType_RegexValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RulePatternType_RegexValue{`,
		`RegexValue:` + fmt.Sprintf("%v", this.RegexValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RulePatternType_ExactValues) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RulePatternType_ExactValues{`,
		`ExactValues:` + strings.Replace(fmt.Sprintf("%v", this.ExactValues), "ExactValues", "ExactValues", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RulePatternType_SubstringValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RulePatternType_SubstringValue{`,
		`SubstringValue:` + fmt.Sprintf("%v", this.SubstringValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExactValues) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExactValues{`,
		`ExactValues:` + fmt.Sprintf("%v", this.ExactValues) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeyValuePattern) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyValuePattern{`,
		`KeyPattern:` + strings.Replace(this.KeyPattern.String(), "RulePatternType", "RulePatternType", 1) + `,`,
		`ValuePattern:` + strings.Replace(this.ValuePattern.String(), "RulePatternType", "RulePatternType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionRule{`,
		`PatternChoice:` + fmt.Sprintf("%v", this.PatternChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionRule_KeyPattern) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionRule_KeyPattern{`,
		`KeyPattern:` + strings.Replace(fmt.Sprintf("%v", this.KeyPattern), "RulePatternType", "RulePatternType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionRule_ValuePattern) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionRule_ValuePattern{`,
		`ValuePattern:` + strings.Replace(fmt.Sprintf("%v", this.ValuePattern), "RulePatternType", "RulePatternType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionRule_KeyValuePattern) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionRule_KeyValuePattern{`,
		`KeyValuePattern:` + strings.Replace(fmt.Sprintf("%v", this.KeyValuePattern), "KeyValuePattern", "KeyValuePattern", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*DetectionRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "DetectionRule", "DetectionRule", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`IsSensitiveData:` + fmt.Sprintf("%v", this.IsSensitiveData) + `,`,
		`IsPii:` + fmt.Sprintf("%v", this.IsPii) + `,`,
		`Compliances:` + fmt.Sprintf("%v", this.Compliances) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*DetectionRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "DetectionRule", "DetectionRule", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`IsSensitiveData:` + fmt.Sprintf("%v", this.IsSensitiveData) + `,`,
		`IsPii:` + fmt.Sprintf("%v", this.IsPii) + `,`,
		`Compliances:` + fmt.Sprintf("%v", this.Compliances) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*DetectionRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "DetectionRule", "DetectionRule", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`IsSensitiveData:` + fmt.Sprintf("%v", this.IsSensitiveData) + `,`,
		`IsPii:` + fmt.Sprintf("%v", this.IsPii) + `,`,
		`Compliances:` + fmt.Sprintf("%v", this.Compliances) + `,`,
		`Type:` + strings.Replace(this.Type.String(), "OriginType", "OriginType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &DetectionRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSensitiveData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSensitiveData = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPii", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPii = bool(v != 0)
		case 4:
			if wireType == 0 {
				var v Compliance
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Compliance(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Compliances = append(m.Compliances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Compliances) == 0 {
					m.Compliances = make([]Compliance, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Compliance
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Compliance(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Compliances = append(m.Compliances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliances", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Method == nil {
				m.Method = &DetectionMethod{}
			}
			if err := m.Method.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &OriginType{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeChoice = &OriginType_Custom{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predefined", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeChoice = &OriginType_Predefined{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetectionMethod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetectionMethod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetectionMethod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MethodChoice = &DetectionMethod_Pattern{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MethodChoice = &DetectionMethod_Custom{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RulePatternType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RulePatternType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RulePatternType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegexValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeChoice = &RulePatternType_RegexValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExactValues{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeChoice = &RulePatternType_ExactValues{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubstringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeChoice = &RulePatternType_SubstringValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExactValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExactValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExactValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExactValues = append(m.ExactValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValuePattern) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValuePattern: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValuePattern: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPattern", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyPattern == nil {
				m.KeyPattern = &RulePatternType{}
			}
			if err := m.KeyPattern.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuePattern", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValuePattern == nil {
				m.ValuePattern = &RulePatternType{}
			}
			if err := m.ValuePattern.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetectionRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetectionRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetectionRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPattern", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RulePatternType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PatternChoice = &DetectionRule_KeyPattern{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuePattern", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RulePatternType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PatternChoice = &DetectionRule_ValuePattern{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValuePattern", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KeyValuePattern{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PatternChoice = &DetectionRule_KeyValuePattern{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &DetectionRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSensitiveData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSensitiveData = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPii", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPii = bool(v != 0)
		case 4:
			if wireType == 0 {
				var v Compliance
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Compliance(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Compliances = append(m.Compliances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Compliances) == 0 {
					m.Compliances = make([]Compliance, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Compliance
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Compliance(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Compliances = append(m.Compliances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliances", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &DetectionRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSensitiveData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSensitiveData = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPii", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPii = bool(v != 0)
		case 4:
			if wireType == 0 {
				var v Compliance
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Compliance(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Compliances = append(m.Compliances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Compliances) == 0 {
					m.Compliances = make([]Compliance, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Compliance
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Compliance(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Compliances = append(m.Compliances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliances", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &DetectionRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSensitiveData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSensitiveData = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPii", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPii = bool(v != 0)
		case 4:
			if wireType == 0 {
				var v Compliance
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Compliance(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Compliances = append(m.Compliances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Compliances) == 0 {
					m.Compliances = make([]Compliance, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Compliance
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Compliance(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Compliances = append(m.Compliances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliances", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &OriginType{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

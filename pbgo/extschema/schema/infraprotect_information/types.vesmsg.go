// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package infraprotect_information

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetDefaultTunnelBgpSecret().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.default_tunnel_bgp_secret")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) AsPathChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for as_path_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) DefaultTunnelBgpSecretChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for default_tunnel_bgp_secret_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) RouteAdvertisementManagementChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for route_advertisement_management_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) TunnelF5IpUsageChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tunnel_f5_ip_usage_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["arbor_cid"]; exists {

		vOpts := append(opts, db.WithValidateField("arbor_cid"))
		if err := fv(ctx, m.GetArborCid(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["as_path_choice"]; exists {
		val := m.GetAsPathChoice()
		vOpts := append(opts,
			db.WithValidateField("as_path_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAsPathChoice().(type) {
	case *GetSpecType_AsPathChoiceFull:
		if fv, exists := v.FldValidators["as_path_choice.as_path_choice_full"]; exists {
			val := m.GetAsPathChoice().(*GetSpecType_AsPathChoiceFull).AsPathChoiceFull
			vOpts := append(opts,
				db.WithValidateField("as_path_choice"),
				db.WithValidateField("as_path_choice_full"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AsPathChoiceOrigin:
		if fv, exists := v.FldValidators["as_path_choice.as_path_choice_origin"]; exists {
			val := m.GetAsPathChoice().(*GetSpecType_AsPathChoiceOrigin).AsPathChoiceOrigin
			vOpts := append(opts,
				db.WithValidateField("as_path_choice"),
				db.WithValidateField("as_path_choice_origin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AsPathChoiceNone:
		if fv, exists := v.FldValidators["as_path_choice.as_path_choice_none"]; exists {
			val := m.GetAsPathChoice().(*GetSpecType_AsPathChoiceNone).AsPathChoiceNone
			vOpts := append(opts,
				db.WithValidateField("as_path_choice"),
				db.WithValidateField("as_path_choice_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["asn"]; exists {

		vOpts := append(opts, db.WithValidateField("asn"))
		if err := fv(ctx, m.GetAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_tunnel_bgp_secret_choice"]; exists {
		val := m.GetDefaultTunnelBgpSecretChoice()
		vOpts := append(opts,
			db.WithValidateField("default_tunnel_bgp_secret_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDefaultTunnelBgpSecretChoice().(type) {
	case *GetSpecType_DefaultTunnelBgpSecretNone:
		if fv, exists := v.FldValidators["default_tunnel_bgp_secret_choice.default_tunnel_bgp_secret_none"]; exists {
			val := m.GetDefaultTunnelBgpSecretChoice().(*GetSpecType_DefaultTunnelBgpSecretNone).DefaultTunnelBgpSecretNone
			vOpts := append(opts,
				db.WithValidateField("default_tunnel_bgp_secret_choice"),
				db.WithValidateField("default_tunnel_bgp_secret_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DefaultTunnelBgpSecret:
		if fv, exists := v.FldValidators["default_tunnel_bgp_secret_choice.default_tunnel_bgp_secret"]; exists {
			val := m.GetDefaultTunnelBgpSecretChoice().(*GetSpecType_DefaultTunnelBgpSecret).DefaultTunnelBgpSecret
			vOpts := append(opts,
				db.WithValidateField("default_tunnel_bgp_secret_choice"),
				db.WithValidateField("default_tunnel_bgp_secret"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["policer"]; exists {

		vOpts := append(opts, db.WithValidateField("policer"))
		if err := fv(ctx, m.GetPolicer(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["prefixes"]; exists {

		vOpts := append(opts, db.WithValidateField("prefixes"))
		for idx, item := range m.GetPrefixes() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["primary_network_name"]; exists {

		vOpts := append(opts, db.WithValidateField("primary_network_name"))
		if err := fv(ctx, m.GetPrimaryNetworkName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["route_advertisement_management_choice"]; exists {
		val := m.GetRouteAdvertisementManagementChoice()
		vOpts := append(opts,
			db.WithValidateField("route_advertisement_management_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRouteAdvertisementManagementChoice().(type) {
	case *GetSpecType_RouteAdvertisementMgmtNotSpecified:
		if fv, exists := v.FldValidators["route_advertisement_management_choice.route_advertisement_mgmt_not_specified"]; exists {
			val := m.GetRouteAdvertisementManagementChoice().(*GetSpecType_RouteAdvertisementMgmtNotSpecified).RouteAdvertisementMgmtNotSpecified
			vOpts := append(opts,
				db.WithValidateField("route_advertisement_management_choice"),
				db.WithValidateField("route_advertisement_mgmt_not_specified"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_RouteAdvertisementMgmtUsingF5Xc:
		if fv, exists := v.FldValidators["route_advertisement_management_choice.route_advertisement_mgmt_using_f5xc"]; exists {
			val := m.GetRouteAdvertisementManagementChoice().(*GetSpecType_RouteAdvertisementMgmtUsingF5Xc).RouteAdvertisementMgmtUsingF5Xc
			vOpts := append(opts,
				db.WithValidateField("route_advertisement_management_choice"),
				db.WithValidateField("route_advertisement_mgmt_using_f5xc"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc:
		if fv, exists := v.FldValidators["route_advertisement_management_choice.route_advertisement_mgmt_not_using_f5xc"]; exists {
			val := m.GetRouteAdvertisementManagementChoice().(*GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc).RouteAdvertisementMgmtNotUsingF5Xc
			vOpts := append(opts,
				db.WithValidateField("route_advertisement_management_choice"),
				db.WithValidateField("route_advertisement_mgmt_not_using_f5xc"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tunnel_f5_ip_usage_choice"]; exists {
		val := m.GetTunnelF5IpUsageChoice()
		vOpts := append(opts,
			db.WithValidateField("tunnel_f5_ip_usage_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTunnelF5IpUsageChoice().(type) {
	case *GetSpecType_ReuseIps:
		if fv, exists := v.FldValidators["tunnel_f5_ip_usage_choice.reuse_ips"]; exists {
			val := m.GetTunnelF5IpUsageChoice().(*GetSpecType_ReuseIps).ReuseIps
			vOpts := append(opts,
				db.WithValidateField("tunnel_f5_ip_usage_choice"),
				db.WithValidateField("reuse_ips"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_UseDedicatedIps:
		if fv, exists := v.FldValidators["tunnel_f5_ip_usage_choice.use_dedicated_ips"]; exists {
			val := m.GetTunnelF5IpUsageChoice().(*GetSpecType_UseDedicatedIps).UseDedicatedIps
			vOpts := append(opts,
				db.WithValidateField("tunnel_f5_ip_usage_choice"),
				db.WithValidateField("use_dedicated_ips"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["uuid"]; exists {

		vOpts := append(opts, db.WithValidateField("uuid"))
		if err := fv(ctx, m.GetUuid(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAsPathChoice := v.AsPathChoiceValidationRuleHandler
	rulesAsPathChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAsPathChoice(rulesAsPathChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.as_path_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["as_path_choice"] = vFn

	vrhDefaultTunnelBgpSecretChoice := v.DefaultTunnelBgpSecretChoiceValidationRuleHandler
	rulesDefaultTunnelBgpSecretChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDefaultTunnelBgpSecretChoice(rulesDefaultTunnelBgpSecretChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.default_tunnel_bgp_secret_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_tunnel_bgp_secret_choice"] = vFn

	vrhRouteAdvertisementManagementChoice := v.RouteAdvertisementManagementChoiceValidationRuleHandler
	rulesRouteAdvertisementManagementChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRouteAdvertisementManagementChoice(rulesRouteAdvertisementManagementChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.route_advertisement_management_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["route_advertisement_management_choice"] = vFn

	vrhTunnelF5IpUsageChoice := v.TunnelF5IpUsageChoiceValidationRuleHandler
	rulesTunnelF5IpUsageChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTunnelF5IpUsageChoice(rulesTunnelF5IpUsageChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.tunnel_f5_ip_usage_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tunnel_f5_ip_usage_choice"] = vFn

	v.FldValidators["default_tunnel_bgp_secret_choice.default_tunnel_bgp_secret"] = ves_io_schema.SecretTypeValidator().Validate

	v.FldValidators["policer"] = PolicerValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetDefaultTunnelBgpSecret().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.default_tunnel_bgp_secret")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) AsPathChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for as_path_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DefaultTunnelBgpSecretChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for default_tunnel_bgp_secret_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RouteAdvertisementManagementChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for route_advertisement_management_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TunnelF5IpUsageChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tunnel_f5_ip_usage_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["arbor_cid"]; exists {

		vOpts := append(opts, db.WithValidateField("arbor_cid"))
		if err := fv(ctx, m.GetArborCid(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["as_path_choice"]; exists {
		val := m.GetAsPathChoice()
		vOpts := append(opts,
			db.WithValidateField("as_path_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAsPathChoice().(type) {
	case *GlobalSpecType_AsPathChoiceFull:
		if fv, exists := v.FldValidators["as_path_choice.as_path_choice_full"]; exists {
			val := m.GetAsPathChoice().(*GlobalSpecType_AsPathChoiceFull).AsPathChoiceFull
			vOpts := append(opts,
				db.WithValidateField("as_path_choice"),
				db.WithValidateField("as_path_choice_full"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AsPathChoiceOrigin:
		if fv, exists := v.FldValidators["as_path_choice.as_path_choice_origin"]; exists {
			val := m.GetAsPathChoice().(*GlobalSpecType_AsPathChoiceOrigin).AsPathChoiceOrigin
			vOpts := append(opts,
				db.WithValidateField("as_path_choice"),
				db.WithValidateField("as_path_choice_origin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AsPathChoiceNone:
		if fv, exists := v.FldValidators["as_path_choice.as_path_choice_none"]; exists {
			val := m.GetAsPathChoice().(*GlobalSpecType_AsPathChoiceNone).AsPathChoiceNone
			vOpts := append(opts,
				db.WithValidateField("as_path_choice"),
				db.WithValidateField("as_path_choice_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["asn"]; exists {

		vOpts := append(opts, db.WithValidateField("asn"))
		if err := fv(ctx, m.GetAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_tunnel_bgp_secret_choice"]; exists {
		val := m.GetDefaultTunnelBgpSecretChoice()
		vOpts := append(opts,
			db.WithValidateField("default_tunnel_bgp_secret_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDefaultTunnelBgpSecretChoice().(type) {
	case *GlobalSpecType_DefaultTunnelBgpSecretNone:
		if fv, exists := v.FldValidators["default_tunnel_bgp_secret_choice.default_tunnel_bgp_secret_none"]; exists {
			val := m.GetDefaultTunnelBgpSecretChoice().(*GlobalSpecType_DefaultTunnelBgpSecretNone).DefaultTunnelBgpSecretNone
			vOpts := append(opts,
				db.WithValidateField("default_tunnel_bgp_secret_choice"),
				db.WithValidateField("default_tunnel_bgp_secret_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DefaultTunnelBgpSecret:
		if fv, exists := v.FldValidators["default_tunnel_bgp_secret_choice.default_tunnel_bgp_secret"]; exists {
			val := m.GetDefaultTunnelBgpSecretChoice().(*GlobalSpecType_DefaultTunnelBgpSecret).DefaultTunnelBgpSecret
			vOpts := append(opts,
				db.WithValidateField("default_tunnel_bgp_secret_choice"),
				db.WithValidateField("default_tunnel_bgp_secret"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["policer"]; exists {

		vOpts := append(opts, db.WithValidateField("policer"))
		if err := fv(ctx, m.GetPolicer(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["prefixes"]; exists {

		vOpts := append(opts, db.WithValidateField("prefixes"))
		for idx, item := range m.GetPrefixes() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["primary_network_name"]; exists {

		vOpts := append(opts, db.WithValidateField("primary_network_name"))
		if err := fv(ctx, m.GetPrimaryNetworkName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["route_advertisement_management_choice"]; exists {
		val := m.GetRouteAdvertisementManagementChoice()
		vOpts := append(opts,
			db.WithValidateField("route_advertisement_management_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRouteAdvertisementManagementChoice().(type) {
	case *GlobalSpecType_RouteAdvertisementMgmtNotSpecified:
		if fv, exists := v.FldValidators["route_advertisement_management_choice.route_advertisement_mgmt_not_specified"]; exists {
			val := m.GetRouteAdvertisementManagementChoice().(*GlobalSpecType_RouteAdvertisementMgmtNotSpecified).RouteAdvertisementMgmtNotSpecified
			vOpts := append(opts,
				db.WithValidateField("route_advertisement_management_choice"),
				db.WithValidateField("route_advertisement_mgmt_not_specified"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc:
		if fv, exists := v.FldValidators["route_advertisement_management_choice.route_advertisement_mgmt_using_f5xc"]; exists {
			val := m.GetRouteAdvertisementManagementChoice().(*GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc).RouteAdvertisementMgmtUsingF5Xc
			vOpts := append(opts,
				db.WithValidateField("route_advertisement_management_choice"),
				db.WithValidateField("route_advertisement_mgmt_using_f5xc"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc:
		if fv, exists := v.FldValidators["route_advertisement_management_choice.route_advertisement_mgmt_not_using_f5xc"]; exists {
			val := m.GetRouteAdvertisementManagementChoice().(*GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc).RouteAdvertisementMgmtNotUsingF5Xc
			vOpts := append(opts,
				db.WithValidateField("route_advertisement_management_choice"),
				db.WithValidateField("route_advertisement_mgmt_not_using_f5xc"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tunnel_f5_ip_usage_choice"]; exists {
		val := m.GetTunnelF5IpUsageChoice()
		vOpts := append(opts,
			db.WithValidateField("tunnel_f5_ip_usage_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTunnelF5IpUsageChoice().(type) {
	case *GlobalSpecType_ReuseIps:
		if fv, exists := v.FldValidators["tunnel_f5_ip_usage_choice.reuse_ips"]; exists {
			val := m.GetTunnelF5IpUsageChoice().(*GlobalSpecType_ReuseIps).ReuseIps
			vOpts := append(opts,
				db.WithValidateField("tunnel_f5_ip_usage_choice"),
				db.WithValidateField("reuse_ips"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_UseDedicatedIps:
		if fv, exists := v.FldValidators["tunnel_f5_ip_usage_choice.use_dedicated_ips"]; exists {
			val := m.GetTunnelF5IpUsageChoice().(*GlobalSpecType_UseDedicatedIps).UseDedicatedIps
			vOpts := append(opts,
				db.WithValidateField("tunnel_f5_ip_usage_choice"),
				db.WithValidateField("use_dedicated_ips"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["uuid"]; exists {

		vOpts := append(opts, db.WithValidateField("uuid"))
		if err := fv(ctx, m.GetUuid(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAsPathChoice := v.AsPathChoiceValidationRuleHandler
	rulesAsPathChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAsPathChoice(rulesAsPathChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.as_path_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["as_path_choice"] = vFn

	vrhDefaultTunnelBgpSecretChoice := v.DefaultTunnelBgpSecretChoiceValidationRuleHandler
	rulesDefaultTunnelBgpSecretChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDefaultTunnelBgpSecretChoice(rulesDefaultTunnelBgpSecretChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.default_tunnel_bgp_secret_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_tunnel_bgp_secret_choice"] = vFn

	vrhRouteAdvertisementManagementChoice := v.RouteAdvertisementManagementChoiceValidationRuleHandler
	rulesRouteAdvertisementManagementChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRouteAdvertisementManagementChoice(rulesRouteAdvertisementManagementChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.route_advertisement_management_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["route_advertisement_management_choice"] = vFn

	vrhTunnelF5IpUsageChoice := v.TunnelF5IpUsageChoiceValidationRuleHandler
	rulesTunnelF5IpUsageChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTunnelF5IpUsageChoice(rulesTunnelF5IpUsageChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.tunnel_f5_ip_usage_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tunnel_f5_ip_usage_choice"] = vFn

	v.FldValidators["default_tunnel_bgp_secret_choice.default_tunnel_bgp_secret"] = ves_io_schema.SecretTypeValidator().Validate

	v.FldValidators["policer"] = PolicerValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Policer) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Policer) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Policer) DeepCopy() *Policer {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Policer{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Policer) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Policer) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PolicerValidator().Validate(ctx, m, opts...)
}

type ValidatePolicer struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePolicer) BandwidthMaxMbValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bandwidth_max_mb")
	}

	return validatorFn, nil
}

func (v *ValidatePolicer) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Policer)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Policer got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bandwidth_max_mb"]; exists {

		vOpts := append(opts, db.WithValidateField("bandwidth_max_mb"))
		if err := fv(ctx, m.GetBandwidthMaxMb(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPolicerValidator = func() *ValidatePolicer {
	v := &ValidatePolicer{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBandwidthMaxMb := v.BandwidthMaxMbValidationRuleHandler
	rulesBandwidthMaxMb := map[string]string{
		"ves.io.schema.rules.uint32.lte": "9999",
	}
	vFn, err = vrhBandwidthMaxMb(rulesBandwidthMaxMb)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Policer.bandwidth_max_mb: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bandwidth_max_mb"] = vFn

	return v
}()

func PolicerValidator() db.Validator {
	return DefaultPolicerValidator
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetAsPathChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AsPathChoice.(type) {
	case nil:
		o.AsPathChoice = nil

	case *GetSpecType_AsPathChoiceFull:
		o.AsPathChoice = &GlobalSpecType_AsPathChoiceFull{AsPathChoiceFull: of.AsPathChoiceFull}

	case *GetSpecType_AsPathChoiceNone:
		o.AsPathChoice = &GlobalSpecType_AsPathChoiceNone{AsPathChoiceNone: of.AsPathChoiceNone}

	case *GetSpecType_AsPathChoiceOrigin:
		o.AsPathChoice = &GlobalSpecType_AsPathChoiceOrigin{AsPathChoiceOrigin: of.AsPathChoiceOrigin}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetAsPathChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AsPathChoice.(type) {
	case nil:
		r.AsPathChoice = nil

	case *GlobalSpecType_AsPathChoiceFull:
		r.AsPathChoice = &GetSpecType_AsPathChoiceFull{AsPathChoiceFull: of.AsPathChoiceFull}

	case *GlobalSpecType_AsPathChoiceNone:
		r.AsPathChoice = &GetSpecType_AsPathChoiceNone{AsPathChoiceNone: of.AsPathChoiceNone}

	case *GlobalSpecType_AsPathChoiceOrigin:
		r.AsPathChoice = &GetSpecType_AsPathChoiceOrigin{AsPathChoiceOrigin: of.AsPathChoiceOrigin}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetDefaultTunnelBgpSecretChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DefaultTunnelBgpSecretChoice.(type) {
	case nil:
		o.DefaultTunnelBgpSecretChoice = nil

	case *GetSpecType_DefaultTunnelBgpSecret:
		o.DefaultTunnelBgpSecretChoice = &GlobalSpecType_DefaultTunnelBgpSecret{DefaultTunnelBgpSecret: of.DefaultTunnelBgpSecret}

	case *GetSpecType_DefaultTunnelBgpSecretNone:
		o.DefaultTunnelBgpSecretChoice = &GlobalSpecType_DefaultTunnelBgpSecretNone{DefaultTunnelBgpSecretNone: of.DefaultTunnelBgpSecretNone}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetDefaultTunnelBgpSecretChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DefaultTunnelBgpSecretChoice.(type) {
	case nil:
		r.DefaultTunnelBgpSecretChoice = nil

	case *GlobalSpecType_DefaultTunnelBgpSecret:
		r.DefaultTunnelBgpSecretChoice = &GetSpecType_DefaultTunnelBgpSecret{DefaultTunnelBgpSecret: of.DefaultTunnelBgpSecret}

	case *GlobalSpecType_DefaultTunnelBgpSecretNone:
		r.DefaultTunnelBgpSecretChoice = &GetSpecType_DefaultTunnelBgpSecretNone{DefaultTunnelBgpSecretNone: of.DefaultTunnelBgpSecretNone}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetRouteAdvertisementManagementChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RouteAdvertisementManagementChoice.(type) {
	case nil:
		o.RouteAdvertisementManagementChoice = nil

	case *GetSpecType_RouteAdvertisementMgmtNotSpecified:
		o.RouteAdvertisementManagementChoice = &GlobalSpecType_RouteAdvertisementMgmtNotSpecified{RouteAdvertisementMgmtNotSpecified: of.RouteAdvertisementMgmtNotSpecified}

	case *GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc:
		o.RouteAdvertisementManagementChoice = &GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc{RouteAdvertisementMgmtNotUsingF5Xc: of.RouteAdvertisementMgmtNotUsingF5Xc}

	case *GetSpecType_RouteAdvertisementMgmtUsingF5Xc:
		o.RouteAdvertisementManagementChoice = &GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc{RouteAdvertisementMgmtUsingF5Xc: of.RouteAdvertisementMgmtUsingF5Xc}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetRouteAdvertisementManagementChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RouteAdvertisementManagementChoice.(type) {
	case nil:
		r.RouteAdvertisementManagementChoice = nil

	case *GlobalSpecType_RouteAdvertisementMgmtNotSpecified:
		r.RouteAdvertisementManagementChoice = &GetSpecType_RouteAdvertisementMgmtNotSpecified{RouteAdvertisementMgmtNotSpecified: of.RouteAdvertisementMgmtNotSpecified}

	case *GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc:
		r.RouteAdvertisementManagementChoice = &GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc{RouteAdvertisementMgmtNotUsingF5Xc: of.RouteAdvertisementMgmtNotUsingF5Xc}

	case *GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc:
		r.RouteAdvertisementManagementChoice = &GetSpecType_RouteAdvertisementMgmtUsingF5Xc{RouteAdvertisementMgmtUsingF5Xc: of.RouteAdvertisementMgmtUsingF5Xc}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetTunnelF5IpUsageChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.TunnelF5IpUsageChoice.(type) {
	case nil:
		o.TunnelF5IpUsageChoice = nil

	case *GetSpecType_ReuseIps:
		o.TunnelF5IpUsageChoice = &GlobalSpecType_ReuseIps{ReuseIps: of.ReuseIps}

	case *GetSpecType_UseDedicatedIps:
		o.TunnelF5IpUsageChoice = &GlobalSpecType_UseDedicatedIps{UseDedicatedIps: of.UseDedicatedIps}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetTunnelF5IpUsageChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.TunnelF5IpUsageChoice.(type) {
	case nil:
		r.TunnelF5IpUsageChoice = nil

	case *GlobalSpecType_ReuseIps:
		r.TunnelF5IpUsageChoice = &GetSpecType_ReuseIps{ReuseIps: of.ReuseIps}

	case *GlobalSpecType_UseDedicatedIps:
		r.TunnelF5IpUsageChoice = &GetSpecType_UseDedicatedIps{UseDedicatedIps: of.UseDedicatedIps}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ArborCid = f.GetArborCid()
	m.GetAsPathChoiceFromGlobalSpecType(f)
	m.Asn = f.GetAsn()
	m.GetDefaultTunnelBgpSecretChoiceFromGlobalSpecType(f)
	m.Policer = f.GetPolicer()
	m.Prefixes = f.GetPrefixes()
	m.PrimaryNetworkName = f.GetPrimaryNetworkName()
	m.GetRouteAdvertisementManagementChoiceFromGlobalSpecType(f)
	m.GetTunnelF5IpUsageChoiceFromGlobalSpecType(f)
	m.Uuid = f.GetUuid()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ArborCid = m1.ArborCid
	m1.SetAsPathChoiceToGlobalSpecType(f)
	f.Asn = m1.Asn
	m1.SetDefaultTunnelBgpSecretChoiceToGlobalSpecType(f)
	f.Policer = m1.Policer
	f.Prefixes = m1.Prefixes
	f.PrimaryNetworkName = m1.PrimaryNetworkName
	m1.SetRouteAdvertisementManagementChoiceToGlobalSpecType(f)
	m1.SetTunnelF5IpUsageChoiceToGlobalSpecType(f)
	f.Uuid = m1.Uuid
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

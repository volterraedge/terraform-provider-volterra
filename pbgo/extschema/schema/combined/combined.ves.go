//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package combined

import (
	"context"
	"fmt"
	"reflect"

	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/metastatus"
	"gopkg.volterra.us/stdlib/sets"
	"gopkg.volterra.us/stdlib/store"
	"gopkg.volterra.us/stdlib/svcfw"

	// all schemas used by service
	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_address_allocator "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/address_allocator"
	ves_io_schema_address_allocator_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/address_allocator/crudapi"
	ves_io_schema_advertise_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/advertise_policy"
	ves_io_schema_advertise_policy_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/advertise_policy/crudapi"
	ves_io_schema_alert_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_policy"
	ves_io_schema_alert_policy_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_policy/crudapi"
	ves_io_schema_alert_receiver "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_receiver"
	ves_io_schema_alert_receiver_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_receiver/crudapi"
	ves_io_schema_api_credential "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_credential"
	ves_io_schema_api_credential_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_credential/crudapi"
	ves_io_schema_app_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall"
	ves_io_schema_app_firewall_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall/crudapi"
	ves_io_schema_app_setting "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_setting"
	ves_io_schema_app_setting_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_setting/crudapi"
	ves_io_schema_app_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type"
	ves_io_schema_app_type_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type/crudapi"
	ves_io_schema_authentication "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/authentication"
	ves_io_schema_authentication_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/authentication/crudapi"
	ves_io_schema_bgp "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp"
	ves_io_schema_bgp_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp/crudapi"
	ves_io_schema_bgp_asn_set "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp_asn_set"
	ves_io_schema_bgp_asn_set_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp_asn_set/crudapi"
	ves_io_schema_certified_hardware "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/certified_hardware"
	ves_io_schema_certified_hardware_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/certified_hardware/crudapi"
	ves_io_schema_cloud_credentials "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_credentials"
	ves_io_schema_cloud_credentials_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_credentials/crudapi"
	ves_io_schema_cluster "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cluster"
	ves_io_schema_cluster_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cluster/crudapi"
	ves_io_schema_container_registry "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/container_registry"
	ves_io_schema_container_registry_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/container_registry/crudapi"
	ves_io_schema_dc_cluster_group "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dc_cluster_group"
	ves_io_schema_dc_cluster_group_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dc_cluster_group/crudapi"
	ves_io_schema_discovery "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/discovery"
	ves_io_schema_discovery_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/discovery/crudapi"
	ves_io_schema_dns_domain "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_domain"
	ves_io_schema_dns_domain_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_domain/crudapi"
	ves_io_schema_endpoint "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/endpoint"
	ves_io_schema_endpoint_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/endpoint/crudapi"
	ves_io_schema_fast_acl "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fast_acl"
	ves_io_schema_fast_acl_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fast_acl/crudapi"
	ves_io_schema_fast_acl_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fast_acl_rule"
	ves_io_schema_fast_acl_rule_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fast_acl_rule/crudapi"
	ves_io_schema_fleet "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet"
	ves_io_schema_fleet_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet/crudapi"
	ves_io_schema_flow_exporter "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/flow_exporter"
	ves_io_schema_flow_exporter_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/flow_exporter/crudapi"
	ves_io_schema_healthcheck "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/healthcheck"
	ves_io_schema_healthcheck_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/healthcheck/crudapi"
	ves_io_schema_ip_prefix_set "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ip_prefix_set"
	ves_io_schema_ip_prefix_set_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ip_prefix_set/crudapi"
	ves_io_schema_k8s_cluster "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster"
	ves_io_schema_k8s_cluster_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster/crudapi"
	ves_io_schema_k8s_cluster_role "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster_role"
	ves_io_schema_k8s_cluster_role_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster_role/crudapi"
	ves_io_schema_k8s_cluster_role_binding "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster_role_binding"
	ves_io_schema_k8s_cluster_role_binding_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster_role_binding/crudapi"
	ves_io_schema_k8s_pod_security_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_pod_security_policy"
	ves_io_schema_k8s_pod_security_policy_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_pod_security_policy/crudapi"
	ves_io_schema_log "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log"
	ves_io_schema_log_access_log "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/access_log"
	ves_io_schema_log_audit_log "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/audit_log"
	ves_io_schema_log_firewall_log "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/firewall_log"
	ves_io_schema_log_k8s_audit_log "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/k8s_audit_log"
	ves_io_schema_log_k8s_events "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/k8s_events"
	ves_io_schema_log_vk8s_audit_log "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/vk8s_audit_log"
	ves_io_schema_log_vk8s_events "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/vk8s_events"
	ves_io_schema_log_receiver "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log_receiver"
	ves_io_schema_log_receiver_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log_receiver/crudapi"
	ves_io_schema_malicious_user_mitigation "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/malicious_user_mitigation"
	ves_io_schema_malicious_user_mitigation_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/malicious_user_mitigation/crudapi"
	ves_io_schema_namespace "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/namespace"
	ves_io_schema_namespace_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/namespace/crudapi"
	ves_io_schema_network_connector "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_connector"
	ves_io_schema_network_connector_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_connector/crudapi"
	ves_io_schema_network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
	ves_io_schema_network_firewall_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall/crudapi"
	ves_io_schema_network_interface "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface"
	ves_io_schema_network_interface_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface/crudapi"
	ves_io_schema_network_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy"
	ves_io_schema_network_policy_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy/crudapi"
	ves_io_schema_network_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy_rule"
	ves_io_schema_network_policy_rule_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy_rule/crudapi"
	ves_io_schema_policer "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policer"
	ves_io_schema_policer_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policer/crudapi"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_protocol_policer "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/protocol_policer"
	ves_io_schema_protocol_policer_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/protocol_policer/crudapi"
	ves_io_schema_public_ip "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/public_ip"
	ves_io_schema_public_ip_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/public_ip/crudapi"
	ves_io_schema_rate_limiter "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter"
	ves_io_schema_rate_limiter_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter/crudapi"
	ves_io_schema_registration "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/registration"
	ves_io_schema_registration_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/registration/crudapi"
	ves_io_schema_role "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/role"
	ves_io_schema_role_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/role/crudapi"
	ves_io_schema_route "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route"
	ves_io_schema_route_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route/crudapi"
	ves_io_schema_secret_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/secret_policy"
	ves_io_schema_secret_policy_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/secret_policy/crudapi"
	ves_io_schema_secret_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/secret_policy_rule"
	ves_io_schema_secret_policy_rule_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/secret_policy_rule/crudapi"
	ves_io_schema_service_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy"
	ves_io_schema_service_policy_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy/crudapi"
	ves_io_schema_service_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	ves_io_schema_service_policy_rule_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule/crudapi"
	ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	ves_io_schema_site_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site/crudapi"
	ves_io_schema_site_mesh_group "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site_mesh_group"
	ves_io_schema_site_mesh_group_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site_mesh_group/crudapi"
	ves_io_schema_token "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/token"
	ves_io_schema_token_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/token/crudapi"
	ves_io_schema_tunnel "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/tunnel"
	ves_io_schema_tunnel_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/tunnel/crudapi"
	ves_io_schema_usb_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/usb_policy"
	ves_io_schema_usb_policy_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/usb_policy/crudapi"
	ves_io_schema_user "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user"
	ves_io_schema_user_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user/crudapi"
	ves_io_schema_user_identification "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user_identification"
	ves_io_schema_user_identification_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user_identification/crudapi"
	ves_io_schema_vesenv "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_views_aws_tgw_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/aws_tgw_site"
	ves_io_schema_views_aws_tgw_site_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/aws_tgw_site/crudapi"
	ves_io_schema_views_aws_vpc_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/aws_vpc_site"
	ves_io_schema_views_aws_vpc_site_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/aws_vpc_site/crudapi"
	ves_io_schema_views_azure_vnet_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/azure_vnet_site"
	ves_io_schema_views_azure_vnet_site_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/azure_vnet_site/crudapi"
	ves_io_schema_views_forward_proxy_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/forward_proxy_policy"
	ves_io_schema_views_forward_proxy_policy_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/forward_proxy_policy/crudapi"
	ves_io_schema_views_gcp_vpc_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/gcp_vpc_site"
	ves_io_schema_views_gcp_vpc_site_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/gcp_vpc_site/crudapi"
	ves_io_schema_views_http_loadbalancer "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/http_loadbalancer"
	ves_io_schema_views_http_loadbalancer_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/http_loadbalancer/crudapi"
	ves_io_schema_views_network_policy_view "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/network_policy_view"
	ves_io_schema_views_network_policy_view_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/network_policy_view/crudapi"
	ves_io_schema_views_origin_pool "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/origin_pool"
	ves_io_schema_views_origin_pool_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/origin_pool/crudapi"
	ves_io_schema_views_rate_limiter_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy"
	ves_io_schema_views_rate_limiter_policy_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy/crudapi"
	ves_io_schema_views_tcp_loadbalancer "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/tcp_loadbalancer"
	ves_io_schema_views_tcp_loadbalancer_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/tcp_loadbalancer/crudapi"
	ves_io_schema_views_terraform_parameters "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/terraform_parameters"
	ves_io_schema_views_terraform_parameters_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/terraform_parameters/crudapi"
	ves_io_schema_views_voltstack_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/voltstack_site"
	ves_io_schema_views_voltstack_site_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/voltstack_site/crudapi"
	ves_io_schema_views_workload "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/workload"
	ves_io_schema_views_workload_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/workload/crudapi"
	ves_io_schema_virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	ves_io_schema_virtual_host_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host/crudapi"
	ves_io_schema_virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
	ves_io_schema_virtual_host_dns_info_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info/crudapi"
	ves_io_schema_virtual_k8s "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_k8s"
	ves_io_schema_virtual_k8s_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_k8s/crudapi"
	ves_io_schema_virtual_network "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_network"
	ves_io_schema_virtual_network_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_network/crudapi"
	ves_io_schema_virtual_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_site"
	ves_io_schema_virtual_site_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_site/crudapi"
	ves_io_schema_waf "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf"
	ves_io_schema_waf_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf/crudapi"
	ves_io_schema_waf_rule_list "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf_rule_list"
	ves_io_schema_waf_rule_list_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf_rule_list/crudapi"
	ves_io_schema_waf_rules "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf_rules"
	ves_io_schema_waf_rules_crudapi "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf_rules/crudapi"
)

var (
	// Metadata of passed in proto files in terms of
	// Volterra schema
	MDR *svcfw.MDRegistry
)

// isStructField uses reflection to determine if an interface is either a struct or a pointer to a struct
// and has the defined member field, if error is nil, the given fieldName exists and is accessible with reflect.
func isStructField(iface interface{}, fieldName string) error {
	valueIface := reflect.ValueOf(iface)

	// Check if the passed interface is a pointer
	if valueIface.Type().Kind() != reflect.Ptr {
		// Create a new type of Iface's Type, so we have a pointer to work with
		valueIface = reflect.New(reflect.TypeOf(iface))
	}

	// 'dereference' with Elem() and get the field by name
	field := valueIface.Elem().FieldByName(fieldName)
	if !field.IsValid() {
		return fmt.Errorf("Interface \"%s\" does not have the field \"%s\"", valueIface.Type(), fieldName)
	}
	return nil
}

func init() {
	MDR = svcfw.NewMDRegistry()
	var csr *svcfw.CRUDServiceRegistry
	var customCSR *svcfw.CustomServiceRegistry
	_ = csr
	_ = customCSR

	MDR.ValidatorRegistry["ves.io.schema.ErrorType"] = ves_io_schema.ErrorTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.IpAddressType"] = ves_io_schema.IpAddressTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.IpSubnetType"] = ves_io_schema.IpSubnetTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.Ipv4AddressType"] = ves_io_schema.Ipv4AddressTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.Ipv4SubnetType"] = ves_io_schema.Ipv4SubnetTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.Ipv6AddressType"] = ves_io_schema.Ipv6AddressTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.Ipv6SubnetType"] = ves_io_schema.Ipv6SubnetTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.MacAddressType"] = ves_io_schema.MacAddressTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.PrefixListType"] = ves_io_schema.PrefixListTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.Dependencies"] = ves_io_schema.DependenciesValidator()
	MDR.ValidatorRegistry["ves.io.schema.Key"] = ves_io_schema.KeyValidator()
	MDR.ValidatorRegistry["ves.io.schema.Keys"] = ves_io_schema.KeysValidator()
	MDR.ValidatorRegistry["ves.io.schema.MetricDef"] = ves_io_schema.MetricDefValidator()
	MDR.ValidatorRegistry["ves.io.schema.On"] = ves_io_schema.OnValidator()
	MDR.ValidatorRegistry["ves.io.schema.Via"] = ves_io_schema.ViaValidator()

	MDR.ValidatorRegistry["ves.io.schema.DaemonEnvironmentType"] = ves_io_schema.DaemonEnvironmentTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.DaemonTLSParamsType"] = ves_io_schema.DaemonTLSParamsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.DaemonTlsCertificateType"] = ves_io_schema.DaemonTlsCertificateTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.DaemonTlsParametersType"] = ves_io_schema.DaemonTlsParametersTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.OperMetaType"] = ves_io_schema.OperMetaTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.ServiceParameters"] = ves_io_schema.ServiceParametersValidator()
	MDR.ValidatorRegistry["ves.io.schema.SyncServerParamsType"] = ves_io_schema.SyncServerParamsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.UseragentType"] = ves_io_schema.UseragentTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.AppFirewallRefType"] = ves_io_schema.AppFirewallRefTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.AppRoleAuthInfoType"] = ves_io_schema.AppRoleAuthInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.AuthnTypeBasicAuth"] = ves_io_schema.AuthnTypeBasicAuthValidator()
	MDR.ValidatorRegistry["ves.io.schema.AuthnTypeHeaders"] = ves_io_schema.AuthnTypeHeadersValidator()
	MDR.ValidatorRegistry["ves.io.schema.AuthnTypeQueryParams"] = ves_io_schema.AuthnTypeQueryParamsValidator()
	MDR.ValidatorRegistry["ves.io.schema.BlindfoldSecretInfoType"] = ves_io_schema.BlindfoldSecretInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.BufferConfigType"] = ves_io_schema.BufferConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.ClearSecretInfoType"] = ves_io_schema.ClearSecretInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.ConditionType"] = ves_io_schema.ConditionTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.CorsPolicy"] = ves_io_schema.CorsPolicyValidator()
	MDR.ValidatorRegistry["ves.io.schema.DomainType"] = ves_io_schema.DomainTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.DownstreamTlsParamsType"] = ves_io_schema.DownstreamTlsParamsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.Empty"] = ves_io_schema.EmptyValidator()
	MDR.ValidatorRegistry["ves.io.schema.ForwardProxyConfigType"] = ves_io_schema.ForwardProxyConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.FractionalPercent"] = ves_io_schema.FractionalPercentValidator()
	MDR.ValidatorRegistry["ves.io.schema.HeaderManipulationOptionType"] = ves_io_schema.HeaderManipulationOptionTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.HeaderMatcherType"] = ves_io_schema.HeaderMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.HostAccessInfoType"] = ves_io_schema.HostAccessInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.HostIdentifier"] = ves_io_schema.HostIdentifierValidator()
	MDR.ValidatorRegistry["ves.io.schema.InitializerType"] = ves_io_schema.InitializerTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.InitializersType"] = ves_io_schema.InitializersTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.InterfaceIdentifier"] = ves_io_schema.InterfaceIdentifierValidator()
	MDR.ValidatorRegistry["ves.io.schema.InterfaceOrNetwork"] = ves_io_schema.InterfaceOrNetworkValidator()
	MDR.ValidatorRegistry["ves.io.schema.IpPrefixSetRefType"] = ves_io_schema.IpPrefixSetRefTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.KubeRefType"] = ves_io_schema.KubeRefTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.L4DestType"] = ves_io_schema.L4DestTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.LabelMatcherType"] = ves_io_schema.LabelMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.LabelSelectorType"] = ves_io_schema.LabelSelectorTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.ListMetaType"] = ves_io_schema.ListMetaTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.MessageMetaType"] = ves_io_schema.MessageMetaTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.MetricValue"] = ves_io_schema.MetricValueValidator()
	MDR.ValidatorRegistry["ves.io.schema.NetworkRefType"] = ves_io_schema.NetworkRefTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.NetworkSiteRefSelector"] = ves_io_schema.NetworkSiteRefSelectorValidator()
	MDR.ValidatorRegistry["ves.io.schema.NextHopType"] = ves_io_schema.NextHopTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.ObjectCreateMetaType"] = ves_io_schema.ObjectCreateMetaTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.ObjectGetMetaType"] = ves_io_schema.ObjectGetMetaTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.ObjectMetaType"] = ves_io_schema.ObjectMetaTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.ObjectRefType"] = ves_io_schema.ObjectRefTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.ObjectReplaceMetaType"] = ves_io_schema.ObjectReplaceMetaTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.PathMatcherType"] = ves_io_schema.PathMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.PolicerRefType"] = ves_io_schema.PolicerRefTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.PortValueType"] = ves_io_schema.PortValueTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.ProtocolPolicerRefType"] = ves_io_schema.ProtocolPolicerRefTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.QueryParameterMatcherType"] = ves_io_schema.QueryParameterMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.RestAuthInfoType"] = ves_io_schema.RestAuthInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.RetryBackOff"] = ves_io_schema.RetryBackOffValidator()
	MDR.ValidatorRegistry["ves.io.schema.RetryPolicyType"] = ves_io_schema.RetryPolicyTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.RouteMatch"] = ves_io_schema.RouteMatchValidator()
	MDR.ValidatorRegistry["ves.io.schema.RouteTarget"] = ves_io_schema.RouteTargetValidator()
	MDR.ValidatorRegistry["ves.io.schema.RouteTarget2ByteAsn"] = ves_io_schema.RouteTarget2ByteAsnValidator()
	MDR.ValidatorRegistry["ves.io.schema.RouteTarget4ByteAsn"] = ves_io_schema.RouteTarget4ByteAsnValidator()
	MDR.ValidatorRegistry["ves.io.schema.RouteTargetIPv4Addr"] = ves_io_schema.RouteTargetIPv4AddrValidator()
	MDR.ValidatorRegistry["ves.io.schema.SecretType"] = ves_io_schema.SecretTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.SiteRefType"] = ves_io_schema.SiteRefTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.SiteVirtualSiteRefSelector"] = ves_io_schema.SiteVirtualSiteRefSelectorValidator()
	MDR.ValidatorRegistry["ves.io.schema.StaticRouteType"] = ves_io_schema.StaticRouteTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.StatusMetaType"] = ves_io_schema.StatusMetaTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.StatusType"] = ves_io_schema.StatusTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.SystemObjectGetMetaType"] = ves_io_schema.SystemObjectGetMetaTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.SystemObjectMetaType"] = ves_io_schema.SystemObjectMetaTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.TlsCertificateType"] = ves_io_schema.TlsCertificateTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.TlsInterceptionPolicy"] = ves_io_schema.TlsInterceptionPolicyValidator()
	MDR.ValidatorRegistry["ves.io.schema.TlsInterceptionRule"] = ves_io_schema.TlsInterceptionRuleValidator()
	MDR.ValidatorRegistry["ves.io.schema.TlsInterceptionType"] = ves_io_schema.TlsInterceptionTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.TlsParamsType"] = ves_io_schema.TlsParamsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.TlsValidationParamsType"] = ves_io_schema.TlsValidationParamsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.UpstreamTlsParamsType"] = ves_io_schema.UpstreamTlsParamsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.VSiteRefType"] = ves_io_schema.VSiteRefTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.VaultAccessInfoType"] = ves_io_schema.VaultAccessInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.VaultAuthInfoType"] = ves_io_schema.VaultAuthInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.VaultSecretInfoType"] = ves_io_schema.VaultSecretInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.VaultSecretType"] = ves_io_schema.VaultSecretTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.ViewRefType"] = ves_io_schema.ViewRefTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.VirtualNetworkReferenceType"] = ves_io_schema.VirtualNetworkReferenceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.VirtualNetworkSelectorType"] = ves_io_schema.VirtualNetworkSelectorTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.VolterraSecretType"] = ves_io_schema.VolterraSecretTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.WafRefType"] = ves_io_schema.WafRefTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.WafRulesRefType"] = ves_io_schema.WafRulesRefTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.WafType"] = ves_io_schema.WafTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.WingmanSecretInfoType"] = ves_io_schema.WingmanSecretInfoTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.AnyRules"] = ves_io_schema.AnyRulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.BoolRules"] = ves_io_schema.BoolRulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.BytesRules"] = ves_io_schema.BytesRulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.DoubleRules"] = ves_io_schema.DoubleRulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.DurationRules"] = ves_io_schema.DurationRulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.EnumRules"] = ves_io_schema.EnumRulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.FieldRules"] = ves_io_schema.FieldRulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.Fixed32Rules"] = ves_io_schema.Fixed32RulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.Fixed64Rules"] = ves_io_schema.Fixed64RulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.FloatRules"] = ves_io_schema.FloatRulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.Int32Rules"] = ves_io_schema.Int32RulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.Int64Rules"] = ves_io_schema.Int64RulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.MapRules"] = ves_io_schema.MapRulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.MessageRules"] = ves_io_schema.MessageRulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.RepeatedRules"] = ves_io_schema.RepeatedRulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.SFixed32Rules"] = ves_io_schema.SFixed32RulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.SFixed64Rules"] = ves_io_schema.SFixed64RulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.SInt32Rules"] = ves_io_schema.SInt32RulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.SInt64Rules"] = ves_io_schema.SInt64RulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.StringRules"] = ves_io_schema.StringRulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.TimestampRules"] = ves_io_schema.TimestampRulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.UInt32Rules"] = ves_io_schema.UInt32RulesValidator()
	MDR.ValidatorRegistry["ves.io.schema.UInt64Rules"] = ves_io_schema.UInt64RulesValidator()

	MDR.ValidatorRegistry["ves.io.schema.ChoiceItem"] = ves_io_schema.ChoiceItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.ChoiceItemList"] = ves_io_schema.ChoiceItemListValidator()
	MDR.ValidatorRegistry["ves.io.schema.Choices"] = ves_io_schema.ChoicesValidator()
	MDR.ValidatorRegistry["ves.io.schema.FieldViewOptions"] = ves_io_schema.FieldViewOptionsValidator()
	MDR.ValidatorRegistry["ves.io.schema.HiddenConditions"] = ves_io_schema.HiddenConditionsValidator()
	MDR.ValidatorRegistry["ves.io.schema.LabelKeyClassList"] = ves_io_schema.LabelKeyClassListValidator()
	MDR.ValidatorRegistry["ves.io.schema.MapOptions"] = ves_io_schema.MapOptionsValidator()
	MDR.ValidatorRegistry["ves.io.schema.RepeatedOptions"] = ves_io_schema.RepeatedOptionsValidator()
	MDR.ValidatorRegistry["ves.io.schema.Tile"] = ves_io_schema.TileValidator()
	MDR.ValidatorRegistry["ves.io.schema.Tiles"] = ves_io_schema.TilesValidator()

	MDR.ValidatorRegistry["ves.io.schema.address_allocator.SpecType"] = ves_io_schema_address_allocator.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.address_allocator.CreateRequest"] = ves_io_schema_address_allocator.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.CreateResponse"] = ves_io_schema_address_allocator.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.DeleteRequest"] = ves_io_schema_address_allocator.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.GetRequest"] = ves_io_schema_address_allocator.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.GetResponse"] = ves_io_schema_address_allocator.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.ListRequest"] = ves_io_schema_address_allocator.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.ListResponse"] = ves_io_schema_address_allocator.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.ListResponseItem"] = ves_io_schema_address_allocator.ListResponseItemValidator()

	MDR.ValidatorRegistry["ves.io.schema.address_allocator.AllocationScheme"] = ves_io_schema_address_allocator.AllocationSchemeValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.CreateSpecType"] = ves_io_schema_address_allocator.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.GetSpecType"] = ves_io_schema_address_allocator.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.GlobalSpecType"] = ves_io_schema_address_allocator.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.NodePrefixMapType"] = ves_io_schema_address_allocator.NodePrefixMapTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.NodePrefixType"] = ves_io_schema_address_allocator.NodePrefixTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.address_allocator.crudapi.ObjectCreateReq"] = ves_io_schema_address_allocator_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.crudapi.ObjectCreateRsp"] = ves_io_schema_address_allocator_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.crudapi.ObjectDeleteReq"] = ves_io_schema_address_allocator_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.crudapi.ObjectDeleteRsp"] = ves_io_schema_address_allocator_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.crudapi.ObjectGetReq"] = ves_io_schema_address_allocator_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.crudapi.ObjectGetRsp"] = ves_io_schema_address_allocator_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.crudapi.ObjectListReq"] = ves_io_schema_address_allocator_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.crudapi.ObjectListRsp"] = ves_io_schema_address_allocator_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.crudapi.ObjectListRspItem"] = ves_io_schema_address_allocator_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.crudapi.ObjectReplaceReq"] = ves_io_schema_address_allocator_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.crudapi.ObjectReplaceRsp"] = ves_io_schema_address_allocator_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.SpecType"] = ves_io_schema_advertise_policy.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.CreateRequest"] = ves_io_schema_advertise_policy.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.CreateResponse"] = ves_io_schema_advertise_policy.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.DeleteRequest"] = ves_io_schema_advertise_policy.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.GetRequest"] = ves_io_schema_advertise_policy.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.GetResponse"] = ves_io_schema_advertise_policy.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.ListRequest"] = ves_io_schema_advertise_policy.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.ListResponse"] = ves_io_schema_advertise_policy.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.ListResponseItem"] = ves_io_schema_advertise_policy.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.ReplaceRequest"] = ves_io_schema_advertise_policy.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.ReplaceResponse"] = ves_io_schema_advertise_policy.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.CreateSpecType"] = ves_io_schema_advertise_policy.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.GetSpecType"] = ves_io_schema_advertise_policy.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.GlobalSpecType"] = ves_io_schema_advertise_policy.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.ReplaceSpecType"] = ves_io_schema_advertise_policy.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.crudapi.ObjectCreateReq"] = ves_io_schema_advertise_policy_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.crudapi.ObjectCreateRsp"] = ves_io_schema_advertise_policy_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.crudapi.ObjectDeleteReq"] = ves_io_schema_advertise_policy_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.crudapi.ObjectDeleteRsp"] = ves_io_schema_advertise_policy_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.crudapi.ObjectGetReq"] = ves_io_schema_advertise_policy_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.crudapi.ObjectGetRsp"] = ves_io_schema_advertise_policy_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.crudapi.ObjectListReq"] = ves_io_schema_advertise_policy_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.crudapi.ObjectListRsp"] = ves_io_schema_advertise_policy_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.crudapi.ObjectListRspItem"] = ves_io_schema_advertise_policy_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.crudapi.ObjectReplaceReq"] = ves_io_schema_advertise_policy_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.crudapi.ObjectReplaceRsp"] = ves_io_schema_advertise_policy_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.alert_policy.SpecType"] = ves_io_schema_alert_policy.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.alert_policy.CreateRequest"] = ves_io_schema_alert_policy.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.CreateResponse"] = ves_io_schema_alert_policy.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.DeleteRequest"] = ves_io_schema_alert_policy.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.GetRequest"] = ves_io_schema_alert_policy.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.GetResponse"] = ves_io_schema_alert_policy.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.ListRequest"] = ves_io_schema_alert_policy.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.ListResponse"] = ves_io_schema_alert_policy.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.ListResponseItem"] = ves_io_schema_alert_policy.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.ReplaceRequest"] = ves_io_schema_alert_policy.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.ReplaceResponse"] = ves_io_schema_alert_policy.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.alert_policy.CreateSpecType"] = ves_io_schema_alert_policy.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.CustomGroupBy"] = ves_io_schema_alert_policy.CustomGroupByValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.CustomMatcher"] = ves_io_schema_alert_policy.CustomMatcherValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.GetSpecType"] = ves_io_schema_alert_policy.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.GlobalSpecType"] = ves_io_schema_alert_policy.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.GroupMatcher"] = ves_io_schema_alert_policy.GroupMatcherValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.LabelMatcher"] = ves_io_schema_alert_policy.LabelMatcherValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.NotificationParameters"] = ves_io_schema_alert_policy.NotificationParametersValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.ReplaceSpecType"] = ves_io_schema_alert_policy.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.Route"] = ves_io_schema_alert_policy.RouteValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.SeverityMatcher"] = ves_io_schema_alert_policy.SeverityMatcherValidator()

	MDR.ValidatorRegistry["ves.io.schema.alert_policy.crudapi.ObjectCreateReq"] = ves_io_schema_alert_policy_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.crudapi.ObjectCreateRsp"] = ves_io_schema_alert_policy_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.crudapi.ObjectDeleteReq"] = ves_io_schema_alert_policy_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.crudapi.ObjectDeleteRsp"] = ves_io_schema_alert_policy_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.crudapi.ObjectGetReq"] = ves_io_schema_alert_policy_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.crudapi.ObjectGetRsp"] = ves_io_schema_alert_policy_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.crudapi.ObjectListReq"] = ves_io_schema_alert_policy_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.crudapi.ObjectListRsp"] = ves_io_schema_alert_policy_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.crudapi.ObjectListRspItem"] = ves_io_schema_alert_policy_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.crudapi.ObjectReplaceReq"] = ves_io_schema_alert_policy_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.crudapi.ObjectReplaceRsp"] = ves_io_schema_alert_policy_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.SpecType"] = ves_io_schema_alert_receiver.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.CreateRequest"] = ves_io_schema_alert_receiver.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.CreateResponse"] = ves_io_schema_alert_receiver.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.DeleteRequest"] = ves_io_schema_alert_receiver.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.GetRequest"] = ves_io_schema_alert_receiver.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.GetResponse"] = ves_io_schema_alert_receiver.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.ListRequest"] = ves_io_schema_alert_receiver.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.ListResponse"] = ves_io_schema_alert_receiver.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.ListResponseItem"] = ves_io_schema_alert_receiver.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.ReplaceRequest"] = ves_io_schema_alert_receiver.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.ReplaceResponse"] = ves_io_schema_alert_receiver.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.ConfirmAlertReceiverRequest"] = ves_io_schema_alert_receiver.ConfirmAlertReceiverRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.ConfirmAlertReceiverResponse"] = ves_io_schema_alert_receiver.ConfirmAlertReceiverResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.TestAlertReceiverRequest"] = ves_io_schema_alert_receiver.TestAlertReceiverRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.TestAlertReceiverResponse"] = ves_io_schema_alert_receiver.TestAlertReceiverResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.VerifyAlertReceiverRequest"] = ves_io_schema_alert_receiver.VerifyAlertReceiverRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.VerifyAlertReceiverResponse"] = ves_io_schema_alert_receiver.VerifyAlertReceiverResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.CreateSpecType"] = ves_io_schema_alert_receiver.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.EmailConfig"] = ves_io_schema_alert_receiver.EmailConfigValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.GetSpecType"] = ves_io_schema_alert_receiver.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.GlobalSpecType"] = ves_io_schema_alert_receiver.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.OpsGenieConfig"] = ves_io_schema_alert_receiver.OpsGenieConfigValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.PagerDutyConfig"] = ves_io_schema_alert_receiver.PagerDutyConfigValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.ReplaceSpecType"] = ves_io_schema_alert_receiver.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.SMSConfig"] = ves_io_schema_alert_receiver.SMSConfigValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.SlackConfig"] = ves_io_schema_alert_receiver.SlackConfigValidator()

	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.crudapi.ObjectCreateReq"] = ves_io_schema_alert_receiver_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.crudapi.ObjectCreateRsp"] = ves_io_schema_alert_receiver_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.crudapi.ObjectDeleteReq"] = ves_io_schema_alert_receiver_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.crudapi.ObjectDeleteRsp"] = ves_io_schema_alert_receiver_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.crudapi.ObjectGetReq"] = ves_io_schema_alert_receiver_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.crudapi.ObjectGetRsp"] = ves_io_schema_alert_receiver_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.crudapi.ObjectListReq"] = ves_io_schema_alert_receiver_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.crudapi.ObjectListRsp"] = ves_io_schema_alert_receiver_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.crudapi.ObjectListRspItem"] = ves_io_schema_alert_receiver_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.crudapi.ObjectReplaceReq"] = ves_io_schema_alert_receiver_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.crudapi.ObjectReplaceRsp"] = ves_io_schema_alert_receiver_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.api_credential.SpecType"] = ves_io_schema_api_credential.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.api_credential.ValidateTokenRequest"] = ves_io_schema_api_credential.ValidateTokenRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.ValidateTokenResponse"] = ves_io_schema_api_credential.ValidateTokenResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.api_credential.CreateRequest"] = ves_io_schema_api_credential.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.CreateResponse"] = ves_io_schema_api_credential.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.CreateServiceCredentialsRequest"] = ves_io_schema_api_credential.CreateServiceCredentialsRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.CustomCreateSpecType"] = ves_io_schema_api_credential.CustomCreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.DeleteRequest"] = ves_io_schema_api_credential.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.GetRequest"] = ves_io_schema_api_credential.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.GetResponse"] = ves_io_schema_api_credential.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.ListRequest"] = ves_io_schema_api_credential.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.ListResponse"] = ves_io_schema_api_credential.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.ListResponseItem"] = ves_io_schema_api_credential.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.RenewRequest"] = ves_io_schema_api_credential.RenewRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.StatusResponse"] = ves_io_schema_api_credential.StatusResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.api_credential.GlobalSpecType"] = ves_io_schema_api_credential.GlobalSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.api_credential.crudapi.ObjectCreateReq"] = ves_io_schema_api_credential_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.crudapi.ObjectCreateRsp"] = ves_io_schema_api_credential_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.crudapi.ObjectDeleteReq"] = ves_io_schema_api_credential_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.crudapi.ObjectDeleteRsp"] = ves_io_schema_api_credential_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.crudapi.ObjectGetReq"] = ves_io_schema_api_credential_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.crudapi.ObjectGetRsp"] = ves_io_schema_api_credential_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.crudapi.ObjectListReq"] = ves_io_schema_api_credential_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.crudapi.ObjectListRsp"] = ves_io_schema_api_credential_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.crudapi.ObjectListRspItem"] = ves_io_schema_api_credential_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.crudapi.ObjectReplaceReq"] = ves_io_schema_api_credential_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.api_credential.crudapi.ObjectReplaceRsp"] = ves_io_schema_api_credential_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.app_firewall.SpecType"] = ves_io_schema_app_firewall.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.app_firewall.CreateRequest"] = ves_io_schema_app_firewall.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.CreateResponse"] = ves_io_schema_app_firewall.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.DeleteRequest"] = ves_io_schema_app_firewall.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.GetRequest"] = ves_io_schema_app_firewall.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.GetResponse"] = ves_io_schema_app_firewall.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.ListRequest"] = ves_io_schema_app_firewall.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.ListResponse"] = ves_io_schema_app_firewall.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.ListResponseItem"] = ves_io_schema_app_firewall.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.ReplaceRequest"] = ves_io_schema_app_firewall.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.ReplaceResponse"] = ves_io_schema_app_firewall.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.app_firewall.BotProtectionSetting"] = ves_io_schema_app_firewall.BotProtectionSettingValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.CreateSpecType"] = ves_io_schema_app_firewall.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.DetectionSetting"] = ves_io_schema_app_firewall.DetectionSettingValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.EnabledAttackTypes"] = ves_io_schema_app_firewall.EnabledAttackTypesValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.GetSpecType"] = ves_io_schema_app_firewall.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.GlobalSpecType"] = ves_io_schema_app_firewall.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.ReplaceSpecType"] = ves_io_schema_app_firewall.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.SignatureSelectionSetting"] = ves_io_schema_app_firewall.SignatureSelectionSettingValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.ViolationSetting"] = ves_io_schema_app_firewall.ViolationSettingValidator()

	MDR.ValidatorRegistry["ves.io.schema.app_firewall.crudapi.ObjectCreateReq"] = ves_io_schema_app_firewall_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.crudapi.ObjectCreateRsp"] = ves_io_schema_app_firewall_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.crudapi.ObjectDeleteReq"] = ves_io_schema_app_firewall_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.crudapi.ObjectDeleteRsp"] = ves_io_schema_app_firewall_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.crudapi.ObjectGetReq"] = ves_io_schema_app_firewall_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.crudapi.ObjectGetRsp"] = ves_io_schema_app_firewall_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.crudapi.ObjectListReq"] = ves_io_schema_app_firewall_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.crudapi.ObjectListRsp"] = ves_io_schema_app_firewall_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.crudapi.ObjectListRspItem"] = ves_io_schema_app_firewall_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.crudapi.ObjectReplaceReq"] = ves_io_schema_app_firewall_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.crudapi.ObjectReplaceRsp"] = ves_io_schema_app_firewall_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.app_setting.SpecType"] = ves_io_schema_app_setting.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.app_setting.CreateRequest"] = ves_io_schema_app_setting.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.CreateResponse"] = ves_io_schema_app_setting.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.DeleteRequest"] = ves_io_schema_app_setting.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.GetRequest"] = ves_io_schema_app_setting.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.GetResponse"] = ves_io_schema_app_setting.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.ListRequest"] = ves_io_schema_app_setting.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.ListResponse"] = ves_io_schema_app_setting.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.ListResponseItem"] = ves_io_schema_app_setting.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.ReplaceRequest"] = ves_io_schema_app_setting.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.ReplaceResponse"] = ves_io_schema_app_setting.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.app_setting.SuspiciousUser"] = ves_io_schema_app_setting.SuspiciousUserValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.SuspiciousUserStatusReq"] = ves_io_schema_app_setting.SuspiciousUserStatusReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.SuspiciousUserStatusRsp"] = ves_io_schema_app_setting.SuspiciousUserStatusRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.app_setting.AppTypeSettings"] = ves_io_schema_app_setting.AppTypeSettingsValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.BusinessLogicMarkupSetting"] = ves_io_schema_app_setting.BusinessLogicMarkupSettingValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.CreateSpecType"] = ves_io_schema_app_setting.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.FailedLoginActivitySetting"] = ves_io_schema_app_setting.FailedLoginActivitySettingValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.ForbiddenActivitySetting"] = ves_io_schema_app_setting.ForbiddenActivitySettingValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.GetSpecType"] = ves_io_schema_app_setting.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.GlobalSpecType"] = ves_io_schema_app_setting.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.MaliciousUserDetectionSetting"] = ves_io_schema_app_setting.MaliciousUserDetectionSettingValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.MetricSelector"] = ves_io_schema_app_setting.MetricSelectorValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.ReplaceSpecType"] = ves_io_schema_app_setting.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.TimeseriesAnalysesSetting"] = ves_io_schema_app_setting.TimeseriesAnalysesSettingValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.UserBehaviorAnalysisSetting"] = ves_io_schema_app_setting.UserBehaviorAnalysisSettingValidator()

	MDR.ValidatorRegistry["ves.io.schema.app_setting.crudapi.ObjectCreateReq"] = ves_io_schema_app_setting_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.crudapi.ObjectCreateRsp"] = ves_io_schema_app_setting_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.crudapi.ObjectDeleteReq"] = ves_io_schema_app_setting_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.crudapi.ObjectDeleteRsp"] = ves_io_schema_app_setting_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.crudapi.ObjectGetReq"] = ves_io_schema_app_setting_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.crudapi.ObjectGetRsp"] = ves_io_schema_app_setting_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.crudapi.ObjectListReq"] = ves_io_schema_app_setting_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.crudapi.ObjectListRsp"] = ves_io_schema_app_setting_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.crudapi.ObjectListRspItem"] = ves_io_schema_app_setting_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.crudapi.ObjectReplaceReq"] = ves_io_schema_app_setting_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_setting.crudapi.ObjectReplaceRsp"] = ves_io_schema_app_setting_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.app_type.APIEndpointLearntSchemaReq"] = ves_io_schema_app_type.APIEndpointLearntSchemaReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.APIEndpointLearntSchemaRsp"] = ves_io_schema_app_type.APIEndpointLearntSchemaRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.APIEndpointPDFReq"] = ves_io_schema_app_type.APIEndpointPDFReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.APIEndpointPDFRsp"] = ves_io_schema_app_type.APIEndpointPDFRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.APIEndpointsReq"] = ves_io_schema_app_type.APIEndpointsReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.APIEndpointsRsp"] = ves_io_schema_app_type.APIEndpointsRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.OverridePopReq"] = ves_io_schema_app_type.OverridePopReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.OverridePopRsp"] = ves_io_schema_app_type.OverridePopRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.OverridePushReq"] = ves_io_schema_app_type.OverridePushReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.OverridePushRsp"] = ves_io_schema_app_type.OverridePushRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.OverridesReq"] = ves_io_schema_app_type.OverridesReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.OverridesRsp"] = ves_io_schema_app_type.OverridesRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.ServiceAPIEndpointPDFReq"] = ves_io_schema_app_type.ServiceAPIEndpointPDFReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.ServiceAPIEndpointsReq"] = ves_io_schema_app_type.ServiceAPIEndpointsReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.SwaggerSpecReq"] = ves_io_schema_app_type.SwaggerSpecReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.SwaggerSpecRsp"] = ves_io_schema_app_type.SwaggerSpecRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.app_type.SpecType"] = ves_io_schema_app_type.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.app_type.CreateRequest"] = ves_io_schema_app_type.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.CreateResponse"] = ves_io_schema_app_type.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.DeleteRequest"] = ves_io_schema_app_type.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.GetRequest"] = ves_io_schema_app_type.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.GetResponse"] = ves_io_schema_app_type.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.ListRequest"] = ves_io_schema_app_type.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.ListResponse"] = ves_io_schema_app_type.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.ListResponseItem"] = ves_io_schema_app_type.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.ReplaceRequest"] = ves_io_schema_app_type.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.ReplaceResponse"] = ves_io_schema_app_type.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.app_type.APIEPDynExample"] = ves_io_schema_app_type.APIEPDynExampleValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.APIEPInfo"] = ves_io_schema_app_type.APIEPInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.APIEPPDFInfo"] = ves_io_schema_app_type.APIEPPDFInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.BusinessLogicMarkupSetting"] = ves_io_schema_app_type.BusinessLogicMarkupSettingValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.CreateSpecType"] = ves_io_schema_app_type.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.Feature"] = ves_io_schema_app_type.FeatureValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.GetSpecType"] = ves_io_schema_app_type.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.GlobalSpecType"] = ves_io_schema_app_type.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.OverrideInfo"] = ves_io_schema_app_type.OverrideInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.PDFSpec"] = ves_io_schema_app_type.PDFSpecValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.PDFStat"] = ves_io_schema_app_type.PDFStatValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.ReplaceSpecType"] = ves_io_schema_app_type.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.app_type.crudapi.ObjectCreateReq"] = ves_io_schema_app_type_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.crudapi.ObjectCreateRsp"] = ves_io_schema_app_type_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.crudapi.ObjectDeleteReq"] = ves_io_schema_app_type_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.crudapi.ObjectDeleteRsp"] = ves_io_schema_app_type_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.crudapi.ObjectGetReq"] = ves_io_schema_app_type_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.crudapi.ObjectGetRsp"] = ves_io_schema_app_type_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.crudapi.ObjectListReq"] = ves_io_schema_app_type_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.crudapi.ObjectListRsp"] = ves_io_schema_app_type_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.crudapi.ObjectListRspItem"] = ves_io_schema_app_type_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.crudapi.ObjectReplaceReq"] = ves_io_schema_app_type_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.app_type.crudapi.ObjectReplaceRsp"] = ves_io_schema_app_type_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.authentication.SpecType"] = ves_io_schema_authentication.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.authentication.CreateRequest"] = ves_io_schema_authentication.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.CreateResponse"] = ves_io_schema_authentication.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.DeleteRequest"] = ves_io_schema_authentication.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.GetRequest"] = ves_io_schema_authentication.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.GetResponse"] = ves_io_schema_authentication.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.ListRequest"] = ves_io_schema_authentication.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.ListResponse"] = ves_io_schema_authentication.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.ListResponseItem"] = ves_io_schema_authentication.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.ReplaceRequest"] = ves_io_schema_authentication.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.ReplaceResponse"] = ves_io_schema_authentication.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.authentication.CookieParams"] = ves_io_schema_authentication.CookieParamsValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.CreateSpecType"] = ves_io_schema_authentication.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.GetSpecType"] = ves_io_schema_authentication.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.GlobalSpecType"] = ves_io_schema_authentication.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.HMACKeyPair"] = ves_io_schema_authentication.HMACKeyPairValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.KMSKeyRefType"] = ves_io_schema_authentication.KMSKeyRefTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.OIDCAuthParams"] = ves_io_schema_authentication.OIDCAuthParamsValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.OIDCAuthType"] = ves_io_schema_authentication.OIDCAuthTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.ReplaceSpecType"] = ves_io_schema_authentication.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.authentication.crudapi.ObjectCreateReq"] = ves_io_schema_authentication_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.crudapi.ObjectCreateRsp"] = ves_io_schema_authentication_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.crudapi.ObjectDeleteReq"] = ves_io_schema_authentication_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.crudapi.ObjectDeleteRsp"] = ves_io_schema_authentication_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.crudapi.ObjectGetReq"] = ves_io_schema_authentication_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.crudapi.ObjectGetRsp"] = ves_io_schema_authentication_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.crudapi.ObjectListReq"] = ves_io_schema_authentication_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.crudapi.ObjectListRsp"] = ves_io_schema_authentication_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.crudapi.ObjectListRspItem"] = ves_io_schema_authentication_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.crudapi.ObjectReplaceReq"] = ves_io_schema_authentication_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.authentication.crudapi.ObjectReplaceRsp"] = ves_io_schema_authentication_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.bgp.SpecType"] = ves_io_schema_bgp.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.bgp.CreateRequest"] = ves_io_schema_bgp.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.CreateResponse"] = ves_io_schema_bgp.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.DeleteRequest"] = ves_io_schema_bgp.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.GetRequest"] = ves_io_schema_bgp.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.GetResponse"] = ves_io_schema_bgp.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.ListRequest"] = ves_io_schema_bgp.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.ListResponse"] = ves_io_schema_bgp.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.ListResponseItem"] = ves_io_schema_bgp.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.ReplaceRequest"] = ves_io_schema_bgp.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.ReplaceResponse"] = ves_io_schema_bgp.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.bgp.BgpParameters"] = ves_io_schema_bgp.BgpParametersValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.BgpPeer"] = ves_io_schema_bgp.BgpPeerValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.BgpPeerStatusType"] = ves_io_schema_bgp.BgpPeerStatusTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.BgpStatusType"] = ves_io_schema_bgp.BgpStatusTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.CreateSpecType"] = ves_io_schema_bgp.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.FamilyInet"] = ves_io_schema_bgp.FamilyInetValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.FamilyInet6vpn"] = ves_io_schema_bgp.FamilyInet6VpnValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.FamilyInetvpn"] = ves_io_schema_bgp.FamilyInetvpnValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.FamilyInetvpnParameters"] = ves_io_schema_bgp.FamilyInetvpnParametersValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.FamilyRtarget"] = ves_io_schema_bgp.FamilyRtargetValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.GetSpecType"] = ves_io_schema_bgp.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.GlobalSpecType"] = ves_io_schema_bgp.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.InterfaceList"] = ves_io_schema_bgp.InterfaceListValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.Peer"] = ves_io_schema_bgp.PeerValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.PeerExternal"] = ves_io_schema_bgp.PeerExternalValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.PeerFamilyParameters"] = ves_io_schema_bgp.PeerFamilyParametersValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.PeerInternal"] = ves_io_schema_bgp.PeerInternalValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.ReplaceSpecType"] = ves_io_schema_bgp.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.bgp.crudapi.ObjectCreateReq"] = ves_io_schema_bgp_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.crudapi.ObjectCreateRsp"] = ves_io_schema_bgp_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.crudapi.ObjectDeleteReq"] = ves_io_schema_bgp_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.crudapi.ObjectDeleteRsp"] = ves_io_schema_bgp_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.crudapi.ObjectGetReq"] = ves_io_schema_bgp_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.crudapi.ObjectGetRsp"] = ves_io_schema_bgp_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.crudapi.ObjectListReq"] = ves_io_schema_bgp_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.crudapi.ObjectListRsp"] = ves_io_schema_bgp_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.crudapi.ObjectListRspItem"] = ves_io_schema_bgp_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.crudapi.ObjectReplaceReq"] = ves_io_schema_bgp_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp.crudapi.ObjectReplaceRsp"] = ves_io_schema_bgp_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.SpecType"] = ves_io_schema_bgp_asn_set.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.CreateRequest"] = ves_io_schema_bgp_asn_set.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.CreateResponse"] = ves_io_schema_bgp_asn_set.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.DeleteRequest"] = ves_io_schema_bgp_asn_set.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.GetRequest"] = ves_io_schema_bgp_asn_set.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.GetResponse"] = ves_io_schema_bgp_asn_set.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.ListRequest"] = ves_io_schema_bgp_asn_set.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.ListResponse"] = ves_io_schema_bgp_asn_set.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.ListResponseItem"] = ves_io_schema_bgp_asn_set.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.ReplaceRequest"] = ves_io_schema_bgp_asn_set.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.ReplaceResponse"] = ves_io_schema_bgp_asn_set.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.CreateSpecType"] = ves_io_schema_bgp_asn_set.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.GetSpecType"] = ves_io_schema_bgp_asn_set.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.GlobalSpecType"] = ves_io_schema_bgp_asn_set.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.ReplaceSpecType"] = ves_io_schema_bgp_asn_set.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.crudapi.ObjectCreateReq"] = ves_io_schema_bgp_asn_set_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.crudapi.ObjectCreateRsp"] = ves_io_schema_bgp_asn_set_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.crudapi.ObjectDeleteReq"] = ves_io_schema_bgp_asn_set_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.crudapi.ObjectDeleteRsp"] = ves_io_schema_bgp_asn_set_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.crudapi.ObjectGetReq"] = ves_io_schema_bgp_asn_set_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.crudapi.ObjectGetRsp"] = ves_io_schema_bgp_asn_set_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.crudapi.ObjectListReq"] = ves_io_schema_bgp_asn_set_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.crudapi.ObjectListRsp"] = ves_io_schema_bgp_asn_set_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.crudapi.ObjectListRspItem"] = ves_io_schema_bgp_asn_set_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.crudapi.ObjectReplaceReq"] = ves_io_schema_bgp_asn_set_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.crudapi.ObjectReplaceRsp"] = ves_io_schema_bgp_asn_set_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.SpecType"] = ves_io_schema_certified_hardware.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.GetRequest"] = ves_io_schema_certified_hardware.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.GetResponse"] = ves_io_schema_certified_hardware.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.ListRequest"] = ves_io_schema_certified_hardware.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.ListResponse"] = ves_io_schema_certified_hardware.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.ListResponseItem"] = ves_io_schema_certified_hardware.ListResponseItemValidator()

	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.Aws"] = ves_io_schema_certified_hardware.AwsValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.AwsImage"] = ves_io_schema_certified_hardware.AwsImageValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.Azure"] = ves_io_schema_certified_hardware.AzureValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.AzureImage"] = ves_io_schema_certified_hardware.AzureImageValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.CertifiedHardwareStatus"] = ves_io_schema_certified_hardware.CertifiedHardwareStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.DeviceType"] = ves_io_schema_certified_hardware.DeviceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.Gcp"] = ves_io_schema_certified_hardware.GcpValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.GcpImage"] = ves_io_schema_certified_hardware.GcpImageValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.GetSpecType"] = ves_io_schema_certified_hardware.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.GlobalSpecType"] = ves_io_schema_certified_hardware.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.HardwareVendorModel"] = ves_io_schema_certified_hardware.HardwareVendorModelValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.ImageType"] = ves_io_schema_certified_hardware.ImageTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.Marketplace"] = ves_io_schema_certified_hardware.MarketplaceValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.NumaMem"] = ves_io_schema_certified_hardware.NumaMemValidator()

	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.crudapi.ObjectCreateReq"] = ves_io_schema_certified_hardware_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.crudapi.ObjectCreateRsp"] = ves_io_schema_certified_hardware_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.crudapi.ObjectDeleteReq"] = ves_io_schema_certified_hardware_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.crudapi.ObjectDeleteRsp"] = ves_io_schema_certified_hardware_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.crudapi.ObjectGetReq"] = ves_io_schema_certified_hardware_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.crudapi.ObjectGetRsp"] = ves_io_schema_certified_hardware_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.crudapi.ObjectListReq"] = ves_io_schema_certified_hardware_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.crudapi.ObjectListRsp"] = ves_io_schema_certified_hardware_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.crudapi.ObjectListRspItem"] = ves_io_schema_certified_hardware_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.crudapi.ObjectReplaceReq"] = ves_io_schema_certified_hardware_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.crudapi.ObjectReplaceRsp"] = ves_io_schema_certified_hardware_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.SpecType"] = ves_io_schema_cloud_credentials.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.CreateRequest"] = ves_io_schema_cloud_credentials.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.CreateResponse"] = ves_io_schema_cloud_credentials.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.DeleteRequest"] = ves_io_schema_cloud_credentials.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.GetRequest"] = ves_io_schema_cloud_credentials.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.GetResponse"] = ves_io_schema_cloud_credentials.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.ListRequest"] = ves_io_schema_cloud_credentials.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.ListResponse"] = ves_io_schema_cloud_credentials.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.ListResponseItem"] = ves_io_schema_cloud_credentials.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.ReplaceRequest"] = ves_io_schema_cloud_credentials.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.ReplaceResponse"] = ves_io_schema_cloud_credentials.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.AWSSecretType"] = ves_io_schema_cloud_credentials.AWSSecretTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.AzurePfxType"] = ves_io_schema_cloud_credentials.AzurePfxTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.AzureSecretType"] = ves_io_schema_cloud_credentials.AzureSecretTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.CreateSpecType"] = ves_io_schema_cloud_credentials.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.GCPCredFileType"] = ves_io_schema_cloud_credentials.GCPCredFileTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.GetSpecType"] = ves_io_schema_cloud_credentials.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.GlobalSpecType"] = ves_io_schema_cloud_credentials.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.ReplaceSpecType"] = ves_io_schema_cloud_credentials.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.crudapi.ObjectCreateReq"] = ves_io_schema_cloud_credentials_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.crudapi.ObjectCreateRsp"] = ves_io_schema_cloud_credentials_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.crudapi.ObjectDeleteReq"] = ves_io_schema_cloud_credentials_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.crudapi.ObjectDeleteRsp"] = ves_io_schema_cloud_credentials_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.crudapi.ObjectGetReq"] = ves_io_schema_cloud_credentials_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.crudapi.ObjectGetRsp"] = ves_io_schema_cloud_credentials_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.crudapi.ObjectListReq"] = ves_io_schema_cloud_credentials_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.crudapi.ObjectListRsp"] = ves_io_schema_cloud_credentials_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.crudapi.ObjectListRspItem"] = ves_io_schema_cloud_credentials_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.crudapi.ObjectReplaceReq"] = ves_io_schema_cloud_credentials_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.crudapi.ObjectReplaceRsp"] = ves_io_schema_cloud_credentials_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.cluster.SpecType"] = ves_io_schema_cluster.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.cluster.CreateRequest"] = ves_io_schema_cluster.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.CreateResponse"] = ves_io_schema_cluster.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.DeleteRequest"] = ves_io_schema_cluster.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.GetRequest"] = ves_io_schema_cluster.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.GetResponse"] = ves_io_schema_cluster.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.ListRequest"] = ves_io_schema_cluster.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.ListResponse"] = ves_io_schema_cluster.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.ListResponseItem"] = ves_io_schema_cluster.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.ReplaceRequest"] = ves_io_schema_cluster.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.ReplaceResponse"] = ves_io_schema_cluster.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.cluster.CircuitBreaker"] = ves_io_schema_cluster.CircuitBreakerValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.CreateSpecType"] = ves_io_schema_cluster.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.EndpointSubsetSelectorType"] = ves_io_schema_cluster.EndpointSubsetSelectorTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.GetSpecType"] = ves_io_schema_cluster.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.GlobalSpecType"] = ves_io_schema_cluster.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.Http2ProtocolOptions"] = ves_io_schema_cluster.Http2ProtocolOptionsValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.OutlierDetectionType"] = ves_io_schema_cluster.OutlierDetectionTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.ReplaceSpecType"] = ves_io_schema_cluster.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.cluster.crudapi.ObjectCreateReq"] = ves_io_schema_cluster_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.crudapi.ObjectCreateRsp"] = ves_io_schema_cluster_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.crudapi.ObjectDeleteReq"] = ves_io_schema_cluster_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.crudapi.ObjectDeleteRsp"] = ves_io_schema_cluster_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.crudapi.ObjectGetReq"] = ves_io_schema_cluster_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.crudapi.ObjectGetRsp"] = ves_io_schema_cluster_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.crudapi.ObjectListReq"] = ves_io_schema_cluster_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.crudapi.ObjectListRsp"] = ves_io_schema_cluster_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.crudapi.ObjectListRspItem"] = ves_io_schema_cluster_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.crudapi.ObjectReplaceReq"] = ves_io_schema_cluster_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.cluster.crudapi.ObjectReplaceRsp"] = ves_io_schema_cluster_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.container_registry.SpecType"] = ves_io_schema_container_registry.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.container_registry.CreateRequest"] = ves_io_schema_container_registry.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.CreateResponse"] = ves_io_schema_container_registry.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.DeleteRequest"] = ves_io_schema_container_registry.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.GetRequest"] = ves_io_schema_container_registry.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.GetResponse"] = ves_io_schema_container_registry.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.ListRequest"] = ves_io_schema_container_registry.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.ListResponse"] = ves_io_schema_container_registry.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.ListResponseItem"] = ves_io_schema_container_registry.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.ReplaceRequest"] = ves_io_schema_container_registry.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.ReplaceResponse"] = ves_io_schema_container_registry.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.container_registry.CreateSpecType"] = ves_io_schema_container_registry.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.GetSpecType"] = ves_io_schema_container_registry.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.GlobalSpecType"] = ves_io_schema_container_registry.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.ReplaceSpecType"] = ves_io_schema_container_registry.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.container_registry.crudapi.ObjectCreateReq"] = ves_io_schema_container_registry_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.crudapi.ObjectCreateRsp"] = ves_io_schema_container_registry_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.crudapi.ObjectDeleteReq"] = ves_io_schema_container_registry_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.crudapi.ObjectDeleteRsp"] = ves_io_schema_container_registry_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.crudapi.ObjectGetReq"] = ves_io_schema_container_registry_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.crudapi.ObjectGetRsp"] = ves_io_schema_container_registry_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.crudapi.ObjectListReq"] = ves_io_schema_container_registry_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.crudapi.ObjectListRsp"] = ves_io_schema_container_registry_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.crudapi.ObjectListRspItem"] = ves_io_schema_container_registry_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.crudapi.ObjectReplaceReq"] = ves_io_schema_container_registry_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.container_registry.crudapi.ObjectReplaceRsp"] = ves_io_schema_container_registry_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.SpecType"] = ves_io_schema_dc_cluster_group.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.CreateRequest"] = ves_io_schema_dc_cluster_group.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.CreateResponse"] = ves_io_schema_dc_cluster_group.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.DeleteRequest"] = ves_io_schema_dc_cluster_group.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.GetRequest"] = ves_io_schema_dc_cluster_group.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.GetResponse"] = ves_io_schema_dc_cluster_group.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.ListRequest"] = ves_io_schema_dc_cluster_group.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.ListResponse"] = ves_io_schema_dc_cluster_group.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.ListResponseItem"] = ves_io_schema_dc_cluster_group.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.ReplaceRequest"] = ves_io_schema_dc_cluster_group.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.ReplaceResponse"] = ves_io_schema_dc_cluster_group.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.MetricData"] = ves_io_schema_dc_cluster_group.MetricDataValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.MetricTypeData"] = ves_io_schema_dc_cluster_group.MetricTypeDataValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.MetricsRequest"] = ves_io_schema_dc_cluster_group.MetricsRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.MetricsResponse"] = ves_io_schema_dc_cluster_group.MetricsResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.CreateSpecType"] = ves_io_schema_dc_cluster_group.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.GetSpecType"] = ves_io_schema_dc_cluster_group.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.GlobalSpecType"] = ves_io_schema_dc_cluster_group.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.ReplaceSpecType"] = ves_io_schema_dc_cluster_group.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.crudapi.ObjectCreateReq"] = ves_io_schema_dc_cluster_group_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.crudapi.ObjectCreateRsp"] = ves_io_schema_dc_cluster_group_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.crudapi.ObjectDeleteReq"] = ves_io_schema_dc_cluster_group_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.crudapi.ObjectDeleteRsp"] = ves_io_schema_dc_cluster_group_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.crudapi.ObjectGetReq"] = ves_io_schema_dc_cluster_group_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.crudapi.ObjectGetRsp"] = ves_io_schema_dc_cluster_group_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.crudapi.ObjectListReq"] = ves_io_schema_dc_cluster_group_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.crudapi.ObjectListRsp"] = ves_io_schema_dc_cluster_group_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.crudapi.ObjectListRspItem"] = ves_io_schema_dc_cluster_group_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.crudapi.ObjectReplaceReq"] = ves_io_schema_dc_cluster_group_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.crudapi.ObjectReplaceRsp"] = ves_io_schema_dc_cluster_group_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.discovery.SpecType"] = ves_io_schema_discovery.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.discovery.CreateRequest"] = ves_io_schema_discovery.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.CreateResponse"] = ves_io_schema_discovery.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.DeleteRequest"] = ves_io_schema_discovery.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.GetRequest"] = ves_io_schema_discovery.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.GetResponse"] = ves_io_schema_discovery.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.ListRequest"] = ves_io_schema_discovery.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.ListResponse"] = ves_io_schema_discovery.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.ListResponseItem"] = ves_io_schema_discovery.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.ReplaceRequest"] = ves_io_schema_discovery.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.ReplaceResponse"] = ves_io_schema_discovery.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.discovery.ConsulAccessInfo"] = ves_io_schema_discovery.ConsulAccessInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.ConsulDiscoveryType"] = ves_io_schema_discovery.ConsulDiscoveryTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.ConsulHttpBasicAuthInfoType"] = ves_io_schema_discovery.ConsulHttpBasicAuthInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.ConsulVipDiscoveryInfoType"] = ves_io_schema_discovery.ConsulVipDiscoveryInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.CreateSpecType"] = ves_io_schema_discovery.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.DiscoveredServiceType"] = ves_io_schema_discovery.DiscoveredServiceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.GetSpecType"] = ves_io_schema_discovery.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.GlobalSpecType"] = ves_io_schema_discovery.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.K8SAccessInfo"] = ves_io_schema_discovery.K8SAccessInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.K8SDelegationType"] = ves_io_schema_discovery.K8SDelegationTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.K8SDiscoveryType"] = ves_io_schema_discovery.K8SDiscoveryTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.K8SPublishType"] = ves_io_schema_discovery.K8SPublishTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.K8SVipDiscoveryInfoType"] = ves_io_schema_discovery.K8SVipDiscoveryInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.PodInfoType"] = ves_io_schema_discovery.PodInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.PortInfoType"] = ves_io_schema_discovery.PortInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.ReplaceSpecType"] = ves_io_schema_discovery.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.RestConfigType"] = ves_io_schema_discovery.RestConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.TLSClientConfigType"] = ves_io_schema_discovery.TLSClientConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.VerStatusType"] = ves_io_schema_discovery.VerStatusTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.VipDiscoveryInfoType"] = ves_io_schema_discovery.VipDiscoveryInfoTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.discovery.crudapi.ObjectCreateReq"] = ves_io_schema_discovery_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.crudapi.ObjectCreateRsp"] = ves_io_schema_discovery_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.crudapi.ObjectDeleteReq"] = ves_io_schema_discovery_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.crudapi.ObjectDeleteRsp"] = ves_io_schema_discovery_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.crudapi.ObjectGetReq"] = ves_io_schema_discovery_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.crudapi.ObjectGetRsp"] = ves_io_schema_discovery_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.crudapi.ObjectListReq"] = ves_io_schema_discovery_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.crudapi.ObjectListRsp"] = ves_io_schema_discovery_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.crudapi.ObjectListRspItem"] = ves_io_schema_discovery_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.crudapi.ObjectReplaceReq"] = ves_io_schema_discovery_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.discovery.crudapi.ObjectReplaceRsp"] = ves_io_schema_discovery_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.dns_domain.DNSDomainStatus"] = ves_io_schema_dns_domain.DNSDomainStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.DNSSECStatus"] = ves_io_schema_dns_domain.DNSSECStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.SpecType"] = ves_io_schema_dns_domain.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.dns_domain.CreateRequest"] = ves_io_schema_dns_domain.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.CreateResponse"] = ves_io_schema_dns_domain.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.DeleteRequest"] = ves_io_schema_dns_domain.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.GetRequest"] = ves_io_schema_dns_domain.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.GetResponse"] = ves_io_schema_dns_domain.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.ListRequest"] = ves_io_schema_dns_domain.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.ListResponse"] = ves_io_schema_dns_domain.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.ListResponseItem"] = ves_io_schema_dns_domain.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.ReplaceRequest"] = ves_io_schema_dns_domain.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.ReplaceResponse"] = ves_io_schema_dns_domain.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.dns_domain.VerifyDnsDomainRequest"] = ves_io_schema_dns_domain.VerifyDnsDomainRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.VerifyDnsDomainResponse"] = ves_io_schema_dns_domain.VerifyDnsDomainResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.dns_domain.AWSRoute53Type"] = ves_io_schema_dns_domain.AWSRoute53TypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.CreateSpecType"] = ves_io_schema_dns_domain.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.GetSpecType"] = ves_io_schema_dns_domain.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.GlobalSpecType"] = ves_io_schema_dns_domain.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.ReplaceSpecType"] = ves_io_schema_dns_domain.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.dns_domain.crudapi.ObjectCreateReq"] = ves_io_schema_dns_domain_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.crudapi.ObjectCreateRsp"] = ves_io_schema_dns_domain_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.crudapi.ObjectDeleteReq"] = ves_io_schema_dns_domain_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.crudapi.ObjectDeleteRsp"] = ves_io_schema_dns_domain_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.crudapi.ObjectGetReq"] = ves_io_schema_dns_domain_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.crudapi.ObjectGetRsp"] = ves_io_schema_dns_domain_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.crudapi.ObjectListReq"] = ves_io_schema_dns_domain_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.crudapi.ObjectListRsp"] = ves_io_schema_dns_domain_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.crudapi.ObjectListRspItem"] = ves_io_schema_dns_domain_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.crudapi.ObjectReplaceReq"] = ves_io_schema_dns_domain_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.crudapi.ObjectReplaceRsp"] = ves_io_schema_dns_domain_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.endpoint.SpecType"] = ves_io_schema_endpoint.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.endpoint.CreateRequest"] = ves_io_schema_endpoint.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.CreateResponse"] = ves_io_schema_endpoint.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.DeleteRequest"] = ves_io_schema_endpoint.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.GetRequest"] = ves_io_schema_endpoint.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.GetResponse"] = ves_io_schema_endpoint.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.ListRequest"] = ves_io_schema_endpoint.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.ListResponse"] = ves_io_schema_endpoint.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.ListResponseItem"] = ves_io_schema_endpoint.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.ReplaceRequest"] = ves_io_schema_endpoint.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.ReplaceResponse"] = ves_io_schema_endpoint.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.endpoint.ConsulInfo"] = ves_io_schema_endpoint.ConsulInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.CreateSpecType"] = ves_io_schema_endpoint.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.DNSInfo"] = ves_io_schema_endpoint.DNSInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.DiscoveredInfoType"] = ves_io_schema_endpoint.DiscoveredInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.DnsNameAdvancedType"] = ves_io_schema_endpoint.DnsNameAdvancedTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.GetSpecType"] = ves_io_schema_endpoint.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.GlobalSpecType"] = ves_io_schema_endpoint.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.K8SInfo"] = ves_io_schema_endpoint.K8SInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.ReplaceSpecType"] = ves_io_schema_endpoint.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.ServiceInfoType"] = ves_io_schema_endpoint.ServiceInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.VerStatusType"] = ves_io_schema_endpoint.VerStatusTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.endpoint.crudapi.ObjectCreateReq"] = ves_io_schema_endpoint_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.crudapi.ObjectCreateRsp"] = ves_io_schema_endpoint_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.crudapi.ObjectDeleteReq"] = ves_io_schema_endpoint_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.crudapi.ObjectDeleteRsp"] = ves_io_schema_endpoint_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.crudapi.ObjectGetReq"] = ves_io_schema_endpoint_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.crudapi.ObjectGetRsp"] = ves_io_schema_endpoint_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.crudapi.ObjectListReq"] = ves_io_schema_endpoint_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.crudapi.ObjectListRsp"] = ves_io_schema_endpoint_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.crudapi.ObjectListRspItem"] = ves_io_schema_endpoint_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.crudapi.ObjectReplaceReq"] = ves_io_schema_endpoint_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.endpoint.crudapi.ObjectReplaceRsp"] = ves_io_schema_endpoint_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.fast_acl.SpecType"] = ves_io_schema_fast_acl.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.fast_acl.CreateRequest"] = ves_io_schema_fast_acl.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.CreateResponse"] = ves_io_schema_fast_acl.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.DeleteRequest"] = ves_io_schema_fast_acl.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.GetRequest"] = ves_io_schema_fast_acl.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.GetResponse"] = ves_io_schema_fast_acl.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.ListRequest"] = ves_io_schema_fast_acl.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.ListResponse"] = ves_io_schema_fast_acl.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.ListResponseItem"] = ves_io_schema_fast_acl.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.ReplaceRequest"] = ves_io_schema_fast_acl.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.ReplaceResponse"] = ves_io_schema_fast_acl.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.fast_acl.FastACLHits"] = ves_io_schema_fast_acl.FastACLHitsValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.FastACLHitsId"] = ves_io_schema_fast_acl.FastACLHitsIdValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.FastACLHitsRequest"] = ves_io_schema_fast_acl.FastACLHitsRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.FastACLHitsResponse"] = ves_io_schema_fast_acl.FastACLHitsResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.FastACLMetricLabelFilter"] = ves_io_schema_fast_acl.FastACLMetricLabelFilterValidator()

	MDR.ValidatorRegistry["ves.io.schema.fast_acl.CreateSpecType"] = ves_io_schema_fast_acl.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.DestinationIPAddressType"] = ves_io_schema_fast_acl.DestinationIPAddressTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.DestinationType"] = ves_io_schema_fast_acl.DestinationTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.FastACLRuleType"] = ves_io_schema_fast_acl.FastACLRuleTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.GetSpecType"] = ves_io_schema_fast_acl.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.GlobalSpecType"] = ves_io_schema_fast_acl.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.LegacyACLType"] = ves_io_schema_fast_acl.LegacyACLTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.ReACLType"] = ves_io_schema_fast_acl.ReACLTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.ReplaceSpecType"] = ves_io_schema_fast_acl.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.SelectedTenantVIPsType"] = ves_io_schema_fast_acl.SelectedTenantVIPsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.SelectedVIPAddressType"] = ves_io_schema_fast_acl.SelectedVIPAddressTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.SiteACLType"] = ves_io_schema_fast_acl.SiteACLTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.fast_acl.crudapi.ObjectCreateReq"] = ves_io_schema_fast_acl_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.crudapi.ObjectCreateRsp"] = ves_io_schema_fast_acl_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.crudapi.ObjectDeleteReq"] = ves_io_schema_fast_acl_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.crudapi.ObjectDeleteRsp"] = ves_io_schema_fast_acl_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.crudapi.ObjectGetReq"] = ves_io_schema_fast_acl_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.crudapi.ObjectGetRsp"] = ves_io_schema_fast_acl_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.crudapi.ObjectListReq"] = ves_io_schema_fast_acl_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.crudapi.ObjectListRsp"] = ves_io_schema_fast_acl_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.crudapi.ObjectListRspItem"] = ves_io_schema_fast_acl_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.crudapi.ObjectReplaceReq"] = ves_io_schema_fast_acl_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.crudapi.ObjectReplaceRsp"] = ves_io_schema_fast_acl_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.SpecType"] = ves_io_schema_fast_acl_rule.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.CreateRequest"] = ves_io_schema_fast_acl_rule.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.CreateResponse"] = ves_io_schema_fast_acl_rule.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.DeleteRequest"] = ves_io_schema_fast_acl_rule.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.GetRequest"] = ves_io_schema_fast_acl_rule.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.GetResponse"] = ves_io_schema_fast_acl_rule.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.ListRequest"] = ves_io_schema_fast_acl_rule.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.ListResponse"] = ves_io_schema_fast_acl_rule.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.ListResponseItem"] = ves_io_schema_fast_acl_rule.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.ReplaceRequest"] = ves_io_schema_fast_acl_rule.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.ReplaceResponse"] = ves_io_schema_fast_acl_rule.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.CreateSpecType"] = ves_io_schema_fast_acl_rule.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.FastAclRuleAction"] = ves_io_schema_fast_acl_rule.FastAclRuleActionValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.GetSpecType"] = ves_io_schema_fast_acl_rule.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.GlobalSpecType"] = ves_io_schema_fast_acl_rule.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.ReplaceSpecType"] = ves_io_schema_fast_acl_rule.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.crudapi.ObjectCreateReq"] = ves_io_schema_fast_acl_rule_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.crudapi.ObjectCreateRsp"] = ves_io_schema_fast_acl_rule_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.crudapi.ObjectDeleteReq"] = ves_io_schema_fast_acl_rule_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.crudapi.ObjectDeleteRsp"] = ves_io_schema_fast_acl_rule_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.crudapi.ObjectGetReq"] = ves_io_schema_fast_acl_rule_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.crudapi.ObjectGetRsp"] = ves_io_schema_fast_acl_rule_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.crudapi.ObjectListReq"] = ves_io_schema_fast_acl_rule_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.crudapi.ObjectListRsp"] = ves_io_schema_fast_acl_rule_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.crudapi.ObjectListRspItem"] = ves_io_schema_fast_acl_rule_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.crudapi.ObjectReplaceReq"] = ves_io_schema_fast_acl_rule_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.crudapi.ObjectReplaceRsp"] = ves_io_schema_fast_acl_rule_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.fleet.SpecType"] = ves_io_schema_fleet.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.fleet.CreateRequest"] = ves_io_schema_fleet.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.CreateResponse"] = ves_io_schema_fleet.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.DeleteRequest"] = ves_io_schema_fleet.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.GetRequest"] = ves_io_schema_fleet.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.GetResponse"] = ves_io_schema_fleet.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.ListRequest"] = ves_io_schema_fleet.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.ListResponse"] = ves_io_schema_fleet.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.ListResponseItem"] = ves_io_schema_fleet.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.ReplaceRequest"] = ves_io_schema_fleet.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.ReplaceResponse"] = ves_io_schema_fleet.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.fleet.BGPConfiguration"] = ves_io_schema_fleet.BGPConfigurationValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.BondLacpType"] = ves_io_schema_fleet.BondLacpTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.CreateSpecType"] = ves_io_schema_fleet.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.DeviceInstanceType"] = ves_io_schema_fleet.DeviceInstanceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.DeviceNetappBackendOntapSanChapType"] = ves_io_schema_fleet.DeviceNetappBackendOntapSanChapTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.FlashArrayEndpoint"] = ves_io_schema_fleet.FlashArrayEndpointValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.FlashArrayType"] = ves_io_schema_fleet.FlashArrayTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.FlashBladeEndpoint"] = ves_io_schema_fleet.FlashBladeEndpointValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.FlashBladeType"] = ves_io_schema_fleet.FlashBladeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.FleetBondDeviceType"] = ves_io_schema_fleet.FleetBondDeviceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.FleetBondDevicesListType"] = ves_io_schema_fleet.FleetBondDevicesListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.FleetDeviceListType"] = ves_io_schema_fleet.FleetDeviceListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.FleetInterfaceListType"] = ves_io_schema_fleet.FleetInterfaceListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.FleetStatus"] = ves_io_schema_fleet.FleetStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.FleetStorageClassListType"] = ves_io_schema_fleet.FleetStorageClassListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.FleetStorageClassType"] = ves_io_schema_fleet.FleetStorageClassTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.FleetStorageDeviceListType"] = ves_io_schema_fleet.FleetStorageDeviceListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.FleetStorageDeviceType"] = ves_io_schema_fleet.FleetStorageDeviceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.FleetStorageStaticRoutesListType"] = ves_io_schema_fleet.FleetStorageStaticRoutesListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.GenericDeviceInstanceType"] = ves_io_schema_fleet.GenericDeviceInstanceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.GetSpecType"] = ves_io_schema_fleet.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.GlobalSpecType"] = ves_io_schema_fleet.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.LocalControlPlaneType"] = ves_io_schema_fleet.LocalControlPlaneTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.NetworkingDeviceInstanceType"] = ves_io_schema_fleet.NetworkingDeviceInstanceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.OntapVirtualStoragePoolType"] = ves_io_schema_fleet.OntapVirtualStoragePoolTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.OntapVolumeDefaults"] = ves_io_schema_fleet.OntapVolumeDefaultsValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.OpenebsMayastorPoolType"] = ves_io_schema_fleet.OpenebsMayastorPoolTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.PsoArrayConfiguration"] = ves_io_schema_fleet.PsoArrayConfigurationValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.ReplaceSpecType"] = ves_io_schema_fleet.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.StorageClassCustomType"] = ves_io_schema_fleet.StorageClassCustomTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.StorageClassDellIsilonF800Type"] = ves_io_schema_fleet.StorageClassDellIsilonF800TypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.StorageClassHPENimbusStorageAf40Type"] = ves_io_schema_fleet.StorageClassHPENimbusStorageAf40TypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.StorageClassNetappTridentType"] = ves_io_schema_fleet.StorageClassNetappTridentTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.StorageClassOpenebsEnterpriseType"] = ves_io_schema_fleet.StorageClassOpenebsEnterpriseTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.StorageClassPureServiceOrchestratorType"] = ves_io_schema_fleet.StorageClassPureServiceOrchestratorTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.StorageDeviceDellIsilonF800Type"] = ves_io_schema_fleet.StorageDeviceDellIsilonF800TypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.StorageDeviceHPENimbusStorageAf40Type"] = ves_io_schema_fleet.StorageDeviceHPENimbusStorageAf40TypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.StorageDeviceNetappBackendOntapNasType"] = ves_io_schema_fleet.StorageDeviceNetappBackendOntapNasTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.StorageDeviceNetappBackendOntapSanType"] = ves_io_schema_fleet.StorageDeviceNetappBackendOntapSanTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.StorageDeviceNetappTridentType"] = ves_io_schema_fleet.StorageDeviceNetappTridentTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.StorageDeviceOpenebsEnterpriseType"] = ves_io_schema_fleet.StorageDeviceOpenebsEnterpriseTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.StorageDevicePureStorageServiceOrchestratorType"] = ves_io_schema_fleet.StorageDevicePureStorageServiceOrchestratorTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.VGPUConfiguration"] = ves_io_schema_fleet.VGPUConfigurationValidator()

	MDR.ValidatorRegistry["ves.io.schema.fleet.crudapi.ObjectCreateReq"] = ves_io_schema_fleet_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.crudapi.ObjectCreateRsp"] = ves_io_schema_fleet_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.crudapi.ObjectDeleteReq"] = ves_io_schema_fleet_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.crudapi.ObjectDeleteRsp"] = ves_io_schema_fleet_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.crudapi.ObjectGetReq"] = ves_io_schema_fleet_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.crudapi.ObjectGetRsp"] = ves_io_schema_fleet_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.crudapi.ObjectListReq"] = ves_io_schema_fleet_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.crudapi.ObjectListRsp"] = ves_io_schema_fleet_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.crudapi.ObjectListRspItem"] = ves_io_schema_fleet_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.crudapi.ObjectReplaceReq"] = ves_io_schema_fleet_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.fleet.crudapi.ObjectReplaceRsp"] = ves_io_schema_fleet_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.SpecType"] = ves_io_schema_flow_exporter.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.FlowCollector"] = ves_io_schema_flow_exporter.FlowCollectorValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.FlowCollectorEndPoint"] = ves_io_schema_flow_exporter.FlowCollectorEndPointValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.FlowExportTimeout"] = ves_io_schema_flow_exporter.FlowExportTimeoutValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.FlowSampler"] = ves_io_schema_flow_exporter.FlowSamplerValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.GlobalSpecType"] = ves_io_schema_flow_exporter.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.IpfixParameters"] = ves_io_schema_flow_exporter.IpfixParametersValidator()

	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.crudapi.ObjectCreateReq"] = ves_io_schema_flow_exporter_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.crudapi.ObjectCreateRsp"] = ves_io_schema_flow_exporter_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.crudapi.ObjectDeleteReq"] = ves_io_schema_flow_exporter_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.crudapi.ObjectDeleteRsp"] = ves_io_schema_flow_exporter_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.crudapi.ObjectGetReq"] = ves_io_schema_flow_exporter_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.crudapi.ObjectGetRsp"] = ves_io_schema_flow_exporter_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.crudapi.ObjectListReq"] = ves_io_schema_flow_exporter_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.crudapi.ObjectListRsp"] = ves_io_schema_flow_exporter_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.crudapi.ObjectListRspItem"] = ves_io_schema_flow_exporter_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.crudapi.ObjectReplaceReq"] = ves_io_schema_flow_exporter_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.crudapi.ObjectReplaceRsp"] = ves_io_schema_flow_exporter_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.healthcheck.SpecType"] = ves_io_schema_healthcheck.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.healthcheck.CreateRequest"] = ves_io_schema_healthcheck.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.CreateResponse"] = ves_io_schema_healthcheck.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.DeleteRequest"] = ves_io_schema_healthcheck.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.GetRequest"] = ves_io_schema_healthcheck.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.GetResponse"] = ves_io_schema_healthcheck.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.ListRequest"] = ves_io_schema_healthcheck.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.ListResponse"] = ves_io_schema_healthcheck.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.ListResponseItem"] = ves_io_schema_healthcheck.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.ReplaceRequest"] = ves_io_schema_healthcheck.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.ReplaceResponse"] = ves_io_schema_healthcheck.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.healthcheck.CreateSpecType"] = ves_io_schema_healthcheck.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.GetSpecType"] = ves_io_schema_healthcheck.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.GlobalSpecType"] = ves_io_schema_healthcheck.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.HttpHealthCheck"] = ves_io_schema_healthcheck.HttpHealthCheckValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.ReplaceSpecType"] = ves_io_schema_healthcheck.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.TcpHealthCheck"] = ves_io_schema_healthcheck.TcpHealthCheckValidator()

	MDR.ValidatorRegistry["ves.io.schema.healthcheck.crudapi.ObjectCreateReq"] = ves_io_schema_healthcheck_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.crudapi.ObjectCreateRsp"] = ves_io_schema_healthcheck_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.crudapi.ObjectDeleteReq"] = ves_io_schema_healthcheck_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.crudapi.ObjectDeleteRsp"] = ves_io_schema_healthcheck_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.crudapi.ObjectGetReq"] = ves_io_schema_healthcheck_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.crudapi.ObjectGetRsp"] = ves_io_schema_healthcheck_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.crudapi.ObjectListReq"] = ves_io_schema_healthcheck_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.crudapi.ObjectListRsp"] = ves_io_schema_healthcheck_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.crudapi.ObjectListRspItem"] = ves_io_schema_healthcheck_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.crudapi.ObjectReplaceReq"] = ves_io_schema_healthcheck_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.crudapi.ObjectReplaceRsp"] = ves_io_schema_healthcheck_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.SpecType"] = ves_io_schema_ip_prefix_set.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.CreateRequest"] = ves_io_schema_ip_prefix_set.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.CreateResponse"] = ves_io_schema_ip_prefix_set.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.DeleteRequest"] = ves_io_schema_ip_prefix_set.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.GetRequest"] = ves_io_schema_ip_prefix_set.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.GetResponse"] = ves_io_schema_ip_prefix_set.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.ListRequest"] = ves_io_schema_ip_prefix_set.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.ListResponse"] = ves_io_schema_ip_prefix_set.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.ListResponseItem"] = ves_io_schema_ip_prefix_set.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.ReplaceRequest"] = ves_io_schema_ip_prefix_set.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.ReplaceResponse"] = ves_io_schema_ip_prefix_set.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.CreateSpecType"] = ves_io_schema_ip_prefix_set.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.GetSpecType"] = ves_io_schema_ip_prefix_set.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.GlobalSpecType"] = ves_io_schema_ip_prefix_set.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.ReplaceSpecType"] = ves_io_schema_ip_prefix_set.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.crudapi.ObjectCreateReq"] = ves_io_schema_ip_prefix_set_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.crudapi.ObjectCreateRsp"] = ves_io_schema_ip_prefix_set_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.crudapi.ObjectDeleteReq"] = ves_io_schema_ip_prefix_set_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.crudapi.ObjectDeleteRsp"] = ves_io_schema_ip_prefix_set_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.crudapi.ObjectGetReq"] = ves_io_schema_ip_prefix_set_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.crudapi.ObjectGetRsp"] = ves_io_schema_ip_prefix_set_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.crudapi.ObjectListReq"] = ves_io_schema_ip_prefix_set_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.crudapi.ObjectListRsp"] = ves_io_schema_ip_prefix_set_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.crudapi.ObjectListRspItem"] = ves_io_schema_ip_prefix_set_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.crudapi.ObjectReplaceReq"] = ves_io_schema_ip_prefix_set_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.crudapi.ObjectReplaceRsp"] = ves_io_schema_ip_prefix_set_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.SpecType"] = ves_io_schema_k8s_cluster.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.CreateRequest"] = ves_io_schema_k8s_cluster.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.CreateResponse"] = ves_io_schema_k8s_cluster.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.DeleteRequest"] = ves_io_schema_k8s_cluster.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.GetRequest"] = ves_io_schema_k8s_cluster.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.GetResponse"] = ves_io_schema_k8s_cluster.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.ListRequest"] = ves_io_schema_k8s_cluster.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.ListResponse"] = ves_io_schema_k8s_cluster.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.ListResponseItem"] = ves_io_schema_k8s_cluster.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.ReplaceRequest"] = ves_io_schema_k8s_cluster.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.ReplaceResponse"] = ves_io_schema_k8s_cluster.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.ApplicationArgoCDType"] = ves_io_schema_k8s_cluster.ApplicationArgoCDTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.ApplicationDashboardType"] = ves_io_schema_k8s_cluster.ApplicationDashboardTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.ApplicationMetricsServerType"] = ves_io_schema_k8s_cluster.ApplicationMetricsServerTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.ClusterRoleBindingListType"] = ves_io_schema_k8s_cluster.ClusterRoleBindingListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.ClusterRoleListType"] = ves_io_schema_k8s_cluster.ClusterRoleListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.ClusterWideAppListType"] = ves_io_schema_k8s_cluster.ClusterWideAppListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.ClusterWideAppType"] = ves_io_schema_k8s_cluster.ClusterWideAppTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.CreateSpecType"] = ves_io_schema_k8s_cluster.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.GetSpecType"] = ves_io_schema_k8s_cluster.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.GlobalSpecType"] = ves_io_schema_k8s_cluster.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.InsecureRegistryListType"] = ves_io_schema_k8s_cluster.InsecureRegistryListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.LocalAccessArgoCDType"] = ves_io_schema_k8s_cluster.LocalAccessArgoCDTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.LocalAccessConfigType"] = ves_io_schema_k8s_cluster.LocalAccessConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.PodSecurityPolicyListType"] = ves_io_schema_k8s_cluster.PodSecurityPolicyListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.ReplaceSpecType"] = ves_io_schema_k8s_cluster.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.crudapi.ObjectCreateReq"] = ves_io_schema_k8s_cluster_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.crudapi.ObjectCreateRsp"] = ves_io_schema_k8s_cluster_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.crudapi.ObjectDeleteReq"] = ves_io_schema_k8s_cluster_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.crudapi.ObjectDeleteRsp"] = ves_io_schema_k8s_cluster_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.crudapi.ObjectGetReq"] = ves_io_schema_k8s_cluster_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.crudapi.ObjectGetRsp"] = ves_io_schema_k8s_cluster_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.crudapi.ObjectListReq"] = ves_io_schema_k8s_cluster_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.crudapi.ObjectListRsp"] = ves_io_schema_k8s_cluster_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.crudapi.ObjectListRspItem"] = ves_io_schema_k8s_cluster_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.crudapi.ObjectReplaceReq"] = ves_io_schema_k8s_cluster_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.crudapi.ObjectReplaceRsp"] = ves_io_schema_k8s_cluster_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.SpecType"] = ves_io_schema_k8s_cluster_role.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.CreateRequest"] = ves_io_schema_k8s_cluster_role.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.CreateResponse"] = ves_io_schema_k8s_cluster_role.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.DeleteRequest"] = ves_io_schema_k8s_cluster_role.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.GetRequest"] = ves_io_schema_k8s_cluster_role.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.GetResponse"] = ves_io_schema_k8s_cluster_role.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.ListRequest"] = ves_io_schema_k8s_cluster_role.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.ListResponse"] = ves_io_schema_k8s_cluster_role.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.ListResponseItem"] = ves_io_schema_k8s_cluster_role.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.ReplaceRequest"] = ves_io_schema_k8s_cluster_role.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.ReplaceResponse"] = ves_io_schema_k8s_cluster_role.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.CreateSpecType"] = ves_io_schema_k8s_cluster_role.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.GetSpecType"] = ves_io_schema_k8s_cluster_role.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.GlobalSpecType"] = ves_io_schema_k8s_cluster_role.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.NonResourceURLListType"] = ves_io_schema_k8s_cluster_role.NonResourceURLListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.PolicyRuleListType"] = ves_io_schema_k8s_cluster_role.PolicyRuleListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.PolicyRuleType"] = ves_io_schema_k8s_cluster_role.PolicyRuleTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.ReplaceSpecType"] = ves_io_schema_k8s_cluster_role.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.ResourceListType"] = ves_io_schema_k8s_cluster_role.ResourceListTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.crudapi.ObjectCreateReq"] = ves_io_schema_k8s_cluster_role_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.crudapi.ObjectCreateRsp"] = ves_io_schema_k8s_cluster_role_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.crudapi.ObjectDeleteReq"] = ves_io_schema_k8s_cluster_role_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.crudapi.ObjectDeleteRsp"] = ves_io_schema_k8s_cluster_role_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.crudapi.ObjectGetReq"] = ves_io_schema_k8s_cluster_role_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.crudapi.ObjectGetRsp"] = ves_io_schema_k8s_cluster_role_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.crudapi.ObjectListReq"] = ves_io_schema_k8s_cluster_role_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.crudapi.ObjectListRsp"] = ves_io_schema_k8s_cluster_role_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.crudapi.ObjectListRspItem"] = ves_io_schema_k8s_cluster_role_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.crudapi.ObjectReplaceReq"] = ves_io_schema_k8s_cluster_role_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.crudapi.ObjectReplaceRsp"] = ves_io_schema_k8s_cluster_role_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.SpecType"] = ves_io_schema_k8s_cluster_role_binding.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.CreateRequest"] = ves_io_schema_k8s_cluster_role_binding.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.CreateResponse"] = ves_io_schema_k8s_cluster_role_binding.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.DeleteRequest"] = ves_io_schema_k8s_cluster_role_binding.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.GetRequest"] = ves_io_schema_k8s_cluster_role_binding.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.GetResponse"] = ves_io_schema_k8s_cluster_role_binding.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.ListRequest"] = ves_io_schema_k8s_cluster_role_binding.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.ListResponse"] = ves_io_schema_k8s_cluster_role_binding.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.ListResponseItem"] = ves_io_schema_k8s_cluster_role_binding.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.ReplaceRequest"] = ves_io_schema_k8s_cluster_role_binding.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.ReplaceResponse"] = ves_io_schema_k8s_cluster_role_binding.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.CreateSpecType"] = ves_io_schema_k8s_cluster_role_binding.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.GetSpecType"] = ves_io_schema_k8s_cluster_role_binding.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.GlobalSpecType"] = ves_io_schema_k8s_cluster_role_binding.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.ReplaceSpecType"] = ves_io_schema_k8s_cluster_role_binding.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.ServiceAccountType"] = ves_io_schema_k8s_cluster_role_binding.ServiceAccountTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.SubjectType"] = ves_io_schema_k8s_cluster_role_binding.SubjectTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectCreateReq"] = ves_io_schema_k8s_cluster_role_binding_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectCreateRsp"] = ves_io_schema_k8s_cluster_role_binding_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectDeleteReq"] = ves_io_schema_k8s_cluster_role_binding_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectDeleteRsp"] = ves_io_schema_k8s_cluster_role_binding_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectGetReq"] = ves_io_schema_k8s_cluster_role_binding_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectGetRsp"] = ves_io_schema_k8s_cluster_role_binding_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectListReq"] = ves_io_schema_k8s_cluster_role_binding_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectListRsp"] = ves_io_schema_k8s_cluster_role_binding_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectListRspItem"] = ves_io_schema_k8s_cluster_role_binding_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectReplaceReq"] = ves_io_schema_k8s_cluster_role_binding_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectReplaceRsp"] = ves_io_schema_k8s_cluster_role_binding_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.SpecType"] = ves_io_schema_k8s_pod_security_policy.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.CreateRequest"] = ves_io_schema_k8s_pod_security_policy.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.CreateResponse"] = ves_io_schema_k8s_pod_security_policy.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.DeleteRequest"] = ves_io_schema_k8s_pod_security_policy.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.GetRequest"] = ves_io_schema_k8s_pod_security_policy.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.GetResponse"] = ves_io_schema_k8s_pod_security_policy.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.ListRequest"] = ves_io_schema_k8s_pod_security_policy.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.ListResponse"] = ves_io_schema_k8s_pod_security_policy.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.ListResponseItem"] = ves_io_schema_k8s_pod_security_policy.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.ReplaceRequest"] = ves_io_schema_k8s_pod_security_policy.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.ReplaceResponse"] = ves_io_schema_k8s_pod_security_policy.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.CapabilityListType"] = ves_io_schema_k8s_pod_security_policy.CapabilityListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.CreateSpecType"] = ves_io_schema_k8s_pod_security_policy.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.GetSpecType"] = ves_io_schema_k8s_pod_security_policy.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.GlobalSpecType"] = ves_io_schema_k8s_pod_security_policy.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.HostPathType"] = ves_io_schema_k8s_pod_security_policy.HostPathTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.IDRangeType"] = ves_io_schema_k8s_pod_security_policy.IDRangeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.IDStrategyOptionsType"] = ves_io_schema_k8s_pod_security_policy.IDStrategyOptionsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.PodSecurityPolicySpecType"] = ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.ReplaceSpecType"] = ves_io_schema_k8s_pod_security_policy.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.RuntimeClassStrategyOptions"] = ves_io_schema_k8s_pod_security_policy.RuntimeClassStrategyOptionsValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.SELinuxStrategyOptions"] = ves_io_schema_k8s_pod_security_policy.SELinuxStrategyOptionsValidator()

	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectCreateReq"] = ves_io_schema_k8s_pod_security_policy_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectCreateRsp"] = ves_io_schema_k8s_pod_security_policy_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectDeleteReq"] = ves_io_schema_k8s_pod_security_policy_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectDeleteRsp"] = ves_io_schema_k8s_pod_security_policy_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectGetReq"] = ves_io_schema_k8s_pod_security_policy_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectGetRsp"] = ves_io_schema_k8s_pod_security_policy_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectListReq"] = ves_io_schema_k8s_pod_security_policy_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectListRsp"] = ves_io_schema_k8s_pod_security_policy_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectListRspItem"] = ves_io_schema_k8s_pod_security_policy_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectReplaceReq"] = ves_io_schema_k8s_pod_security_policy_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectReplaceRsp"] = ves_io_schema_k8s_pod_security_policy_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.log.AccessLogAggregationRequest"] = ves_io_schema_log.AccessLogAggregationRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.AccessLogRequestV2"] = ves_io_schema_log.AccessLogRequestV2Validator()
	MDR.ValidatorRegistry["ves.io.schema.log.AuditLogAggregationRequest"] = ves_io_schema_log.AuditLogAggregationRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.AuditLogRequestV2"] = ves_io_schema_log.AuditLogRequestV2Validator()
	MDR.ValidatorRegistry["ves.io.schema.log.FirewallLogAggregationRequest"] = ves_io_schema_log.FirewallLogAggregationRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.FirewallLogRequest"] = ves_io_schema_log.FirewallLogRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.K8SAuditLogAggregationRequest"] = ves_io_schema_log.K8SAuditLogAggregationRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.K8SAuditLogRequest"] = ves_io_schema_log.K8SAuditLogRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.K8SEventsAggregationRequest"] = ves_io_schema_log.K8SEventsAggregationRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.K8SEventsRequest"] = ves_io_schema_log.K8SEventsRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.LogAggregationResponse"] = ves_io_schema_log.LogAggregationResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.LogResponse"] = ves_io_schema_log.LogResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.LogScrollRequest"] = ves_io_schema_log.LogScrollRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.VK8SAuditLogAggregationRequest"] = ves_io_schema_log.VK8SAuditLogAggregationRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.VK8SAuditLogRequest"] = ves_io_schema_log.VK8SAuditLogRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.VK8SEventsAggregationRequest"] = ves_io_schema_log.VK8SEventsAggregationRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.VK8SEventsRequest"] = ves_io_schema_log.VK8SEventsRequestValidator()

	MDR.ValidatorRegistry["ves.io.schema.log.CardinalityAggregationData"] = ves_io_schema_log.CardinalityAggregationDataValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.DateAggregationBucket"] = ves_io_schema_log.DateAggregationBucketValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.DateAggregationData"] = ves_io_schema_log.DateAggregationDataValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.DateSubAggregationData"] = ves_io_schema_log.DateSubAggregationDataValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.FieldAggregationBucket"] = ves_io_schema_log.FieldAggregationBucketValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.FieldAggregationData"] = ves_io_schema_log.FieldAggregationDataValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.LogAggregationData"] = ves_io_schema_log.LogAggregationDataValidator()

	MDR.ValidatorRegistry["ves.io.schema.log.access_log.AggregationRequest"] = ves_io_schema_log_access_log.AggregationRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.access_log.CardinalityAggregation"] = ves_io_schema_log_access_log.CardinalityAggregationValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.access_log.DateAggregation"] = ves_io_schema_log_access_log.DateAggregationValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.access_log.DateSubAggregation"] = ves_io_schema_log_access_log.DateSubAggregationValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.access_log.FieldAggregation"] = ves_io_schema_log_access_log.FieldAggregationValidator()

	MDR.ValidatorRegistry["ves.io.schema.log.audit_log.AggregationRequest"] = ves_io_schema_log_audit_log.AggregationRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.audit_log.DateAggregation"] = ves_io_schema_log_audit_log.DateAggregationValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.audit_log.FieldAggregation"] = ves_io_schema_log_audit_log.FieldAggregationValidator()

	MDR.ValidatorRegistry["ves.io.schema.log.firewall_log.AggregationRequest"] = ves_io_schema_log_firewall_log.AggregationRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.firewall_log.CardinalityAggregation"] = ves_io_schema_log_firewall_log.CardinalityAggregationValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.firewall_log.DateAggregation"] = ves_io_schema_log_firewall_log.DateAggregationValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.firewall_log.DateSubAggregation"] = ves_io_schema_log_firewall_log.DateSubAggregationValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.firewall_log.FieldAggregation"] = ves_io_schema_log_firewall_log.FieldAggregationValidator()

	MDR.ValidatorRegistry["ves.io.schema.log.k8s_audit_log.AggregationRequest"] = ves_io_schema_log_k8s_audit_log.AggregationRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.k8s_audit_log.DateAggregation"] = ves_io_schema_log_k8s_audit_log.DateAggregationValidator()

	MDR.ValidatorRegistry["ves.io.schema.log.k8s_events.AggregationRequest"] = ves_io_schema_log_k8s_events.AggregationRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.k8s_events.DateAggregation"] = ves_io_schema_log_k8s_events.DateAggregationValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.k8s_events.FieldAggregation"] = ves_io_schema_log_k8s_events.FieldAggregationValidator()

	MDR.ValidatorRegistry["ves.io.schema.log.vk8s_audit_log.AggregationRequest"] = ves_io_schema_log_vk8s_audit_log.AggregationRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.vk8s_audit_log.DateAggregation"] = ves_io_schema_log_vk8s_audit_log.DateAggregationValidator()

	MDR.ValidatorRegistry["ves.io.schema.log.vk8s_events.AggregationRequest"] = ves_io_schema_log_vk8s_events.AggregationRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.vk8s_events.DateAggregation"] = ves_io_schema_log_vk8s_events.DateAggregationValidator()
	MDR.ValidatorRegistry["ves.io.schema.log.vk8s_events.FieldAggregation"] = ves_io_schema_log_vk8s_events.FieldAggregationValidator()

	MDR.ValidatorRegistry["ves.io.schema.log_receiver.SpecType"] = ves_io_schema_log_receiver.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.log_receiver.CreateRequest"] = ves_io_schema_log_receiver.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.CreateResponse"] = ves_io_schema_log_receiver.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.DeleteRequest"] = ves_io_schema_log_receiver.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.GetRequest"] = ves_io_schema_log_receiver.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.GetResponse"] = ves_io_schema_log_receiver.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.ListRequest"] = ves_io_schema_log_receiver.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.ListResponse"] = ves_io_schema_log_receiver.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.ListResponseItem"] = ves_io_schema_log_receiver.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.ReplaceRequest"] = ves_io_schema_log_receiver.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.ReplaceResponse"] = ves_io_schema_log_receiver.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.log_receiver.TestLogReceiverRequest"] = ves_io_schema_log_receiver.TestLogReceiverRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.TestLogReceiverResponse"] = ves_io_schema_log_receiver.TestLogReceiverResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.log_receiver.CreateSpecType"] = ves_io_schema_log_receiver.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.DataDogReceiver"] = ves_io_schema_log_receiver.DataDogReceiverValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.GetSpecType"] = ves_io_schema_log_receiver.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.GlobalSpecType"] = ves_io_schema_log_receiver.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.HTTPServerConfigType"] = ves_io_schema_log_receiver.HTTPServerConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.IPServerConfigType"] = ves_io_schema_log_receiver.IPServerConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.ReplaceSpecType"] = ves_io_schema_log_receiver.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.SplunkReceiver"] = ves_io_schema_log_receiver.SplunkReceiverValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.SyslogReceiver"] = ves_io_schema_log_receiver.SyslogReceiverValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.TCPServerConfigType"] = ves_io_schema_log_receiver.TCPServerConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.TLSClientConfigType"] = ves_io_schema_log_receiver.TLSClientConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.TLSConfigType"] = ves_io_schema_log_receiver.TLSConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.UDPServerConfigType"] = ves_io_schema_log_receiver.UDPServerConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.WhereSites"] = ves_io_schema_log_receiver.WhereSitesValidator()

	MDR.ValidatorRegistry["ves.io.schema.log_receiver.crudapi.ObjectCreateReq"] = ves_io_schema_log_receiver_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.crudapi.ObjectCreateRsp"] = ves_io_schema_log_receiver_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.crudapi.ObjectDeleteReq"] = ves_io_schema_log_receiver_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.crudapi.ObjectDeleteRsp"] = ves_io_schema_log_receiver_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.crudapi.ObjectGetReq"] = ves_io_schema_log_receiver_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.crudapi.ObjectGetRsp"] = ves_io_schema_log_receiver_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.crudapi.ObjectListReq"] = ves_io_schema_log_receiver_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.crudapi.ObjectListRsp"] = ves_io_schema_log_receiver_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.crudapi.ObjectListRspItem"] = ves_io_schema_log_receiver_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.crudapi.ObjectReplaceReq"] = ves_io_schema_log_receiver_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.crudapi.ObjectReplaceRsp"] = ves_io_schema_log_receiver_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.SpecType"] = ves_io_schema_malicious_user_mitigation.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.CreateRequest"] = ves_io_schema_malicious_user_mitigation.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.CreateResponse"] = ves_io_schema_malicious_user_mitigation.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.DeleteRequest"] = ves_io_schema_malicious_user_mitigation.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.GetRequest"] = ves_io_schema_malicious_user_mitigation.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.GetResponse"] = ves_io_schema_malicious_user_mitigation.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.ListRequest"] = ves_io_schema_malicious_user_mitigation.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.ListResponse"] = ves_io_schema_malicious_user_mitigation.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.ListResponseItem"] = ves_io_schema_malicious_user_mitigation.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.ReplaceRequest"] = ves_io_schema_malicious_user_mitigation.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.ReplaceResponse"] = ves_io_schema_malicious_user_mitigation.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.CreateSpecType"] = ves_io_schema_malicious_user_mitigation.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.GetSpecType"] = ves_io_schema_malicious_user_mitigation.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.GlobalSpecType"] = ves_io_schema_malicious_user_mitigation.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationAction"] = ves_io_schema_malicious_user_mitigation.MaliciousUserMitigationActionValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationRule"] = ves_io_schema_malicious_user_mitigation.MaliciousUserMitigationRuleValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationType"] = ves_io_schema_malicious_user_mitigation.MaliciousUserMitigationTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.MaliciousUserThreatLevel"] = ves_io_schema_malicious_user_mitigation.MaliciousUserThreatLevelValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.ReplaceSpecType"] = ves_io_schema_malicious_user_mitigation.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.crudapi.ObjectCreateReq"] = ves_io_schema_malicious_user_mitigation_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.crudapi.ObjectCreateRsp"] = ves_io_schema_malicious_user_mitigation_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.crudapi.ObjectDeleteReq"] = ves_io_schema_malicious_user_mitigation_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.crudapi.ObjectDeleteRsp"] = ves_io_schema_malicious_user_mitigation_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.crudapi.ObjectGetReq"] = ves_io_schema_malicious_user_mitigation_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.crudapi.ObjectGetRsp"] = ves_io_schema_malicious_user_mitigation_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.crudapi.ObjectListReq"] = ves_io_schema_malicious_user_mitigation_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.crudapi.ObjectListRsp"] = ves_io_schema_malicious_user_mitigation_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.crudapi.ObjectListRspItem"] = ves_io_schema_malicious_user_mitigation_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.crudapi.ObjectReplaceReq"] = ves_io_schema_malicious_user_mitigation_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.crudapi.ObjectReplaceRsp"] = ves_io_schema_malicious_user_mitigation_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.namespace.SpecType"] = ves_io_schema_namespace.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.namespace.CreateRequest"] = ves_io_schema_namespace.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.CreateResponse"] = ves_io_schema_namespace.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.GetRequest"] = ves_io_schema_namespace.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.GetResponse"] = ves_io_schema_namespace.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.ListRequest"] = ves_io_schema_namespace.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.ListResponse"] = ves_io_schema_namespace.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.ListResponseItem"] = ves_io_schema_namespace.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.ReplaceRequest"] = ves_io_schema_namespace.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.ReplaceResponse"] = ves_io_schema_namespace.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.namespace.APIItem"] = ves_io_schema_namespace.APIItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.APIItemList"] = ves_io_schema_namespace.APIItemListValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.CascadeDeleteItemType"] = ves_io_schema_namespace.CascadeDeleteItemTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.CascadeDeleteRequest"] = ves_io_schema_namespace.CascadeDeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.CascadeDeleteResponse"] = ves_io_schema_namespace.CascadeDeleteResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.EvaluateAPIAccessReq"] = ves_io_schema_namespace.EvaluateAPIAccessReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.EvaluateAPIAccessResp"] = ves_io_schema_namespace.EvaluateAPIAccessRespValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq"] = ves_io_schema_namespace.UpdateAllowAdvertiseOnPublicReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicResp"] = ves_io_schema_namespace.UpdateAllowAdvertiseOnPublicRespValidator()

	MDR.ValidatorRegistry["ves.io.schema.namespace.GetActiveAlertPoliciesRequest"] = ves_io_schema_namespace.GetActiveAlertPoliciesRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.GetActiveAlertPoliciesResponse"] = ves_io_schema_namespace.GetActiveAlertPoliciesResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.GetActiveNetworkPoliciesRequest"] = ves_io_schema_namespace.GetActiveNetworkPoliciesRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.GetActiveNetworkPoliciesResponse"] = ves_io_schema_namespace.GetActiveNetworkPoliciesResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.GetActiveServicePoliciesRequest"] = ves_io_schema_namespace.GetActiveServicePoliciesRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.GetActiveServicePoliciesResponse"] = ves_io_schema_namespace.GetActiveServicePoliciesResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.GetFastACLsForInternetVIPsRequest"] = ves_io_schema_namespace.GetFastACLsForInternetVIPsRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.GetFastACLsForInternetVIPsResponse"] = ves_io_schema_namespace.GetFastACLsForInternetVIPsResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.SetActiveAlertPoliciesRequest"] = ves_io_schema_namespace.SetActiveAlertPoliciesRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.SetActiveAlertPoliciesResponse"] = ves_io_schema_namespace.SetActiveAlertPoliciesResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.SetActiveNetworkPoliciesRequest"] = ves_io_schema_namespace.SetActiveNetworkPoliciesRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.SetActiveNetworkPoliciesResponse"] = ves_io_schema_namespace.SetActiveNetworkPoliciesResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.SetActiveServicePoliciesRequest"] = ves_io_schema_namespace.SetActiveServicePoliciesRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.SetActiveServicePoliciesResponse"] = ves_io_schema_namespace.SetActiveServicePoliciesResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.SetFastACLsForInternetVIPsRequest"] = ves_io_schema_namespace.SetFastACLsForInternetVIPsRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.SetFastACLsForInternetVIPsResponse"] = ves_io_schema_namespace.SetFastACLsForInternetVIPsResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.namespace.CreateSpecType"] = ves_io_schema_namespace.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.GetSpecType"] = ves_io_schema_namespace.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.GlobalSpecType"] = ves_io_schema_namespace.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.ReplaceSpecType"] = ves_io_schema_namespace.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.SubCA"] = ves_io_schema_namespace.SubCAValidator()

	MDR.ValidatorRegistry["ves.io.schema.namespace.crudapi.ObjectCreateReq"] = ves_io_schema_namespace_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.crudapi.ObjectCreateRsp"] = ves_io_schema_namespace_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.crudapi.ObjectDeleteReq"] = ves_io_schema_namespace_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.crudapi.ObjectDeleteRsp"] = ves_io_schema_namespace_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.crudapi.ObjectGetReq"] = ves_io_schema_namespace_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.crudapi.ObjectGetRsp"] = ves_io_schema_namespace_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.crudapi.ObjectListReq"] = ves_io_schema_namespace_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.crudapi.ObjectListRsp"] = ves_io_schema_namespace_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.crudapi.ObjectListRspItem"] = ves_io_schema_namespace_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.crudapi.ObjectReplaceReq"] = ves_io_schema_namespace_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.namespace.crudapi.ObjectReplaceRsp"] = ves_io_schema_namespace_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_connector.SpecType"] = ves_io_schema_network_connector.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_connector.CreateRequest"] = ves_io_schema_network_connector.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.CreateResponse"] = ves_io_schema_network_connector.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.DeleteRequest"] = ves_io_schema_network_connector.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.GetRequest"] = ves_io_schema_network_connector.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.GetResponse"] = ves_io_schema_network_connector.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.ListRequest"] = ves_io_schema_network_connector.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.ListResponse"] = ves_io_schema_network_connector.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.ListResponseItem"] = ves_io_schema_network_connector.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.ReplaceRequest"] = ves_io_schema_network_connector.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.ReplaceResponse"] = ves_io_schema_network_connector.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_connector.CreateSpecType"] = ves_io_schema_network_connector.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.DynamicReverseProxyListType"] = ves_io_schema_network_connector.DynamicReverseProxyListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.GetSpecType"] = ves_io_schema_network_connector.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.GlobalSnatConnectorType"] = ves_io_schema_network_connector.GlobalSnatConnectorTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.GlobalSpecType"] = ves_io_schema_network_connector.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.NetworkConnectorStatus"] = ves_io_schema_network_connector.NetworkConnectorStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.ReplaceSpecType"] = ves_io_schema_network_connector.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.SnatConnectorType"] = ves_io_schema_network_connector.SnatConnectorTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_connector.crudapi.ObjectCreateReq"] = ves_io_schema_network_connector_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.crudapi.ObjectCreateRsp"] = ves_io_schema_network_connector_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.crudapi.ObjectDeleteReq"] = ves_io_schema_network_connector_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.crudapi.ObjectDeleteRsp"] = ves_io_schema_network_connector_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.crudapi.ObjectGetReq"] = ves_io_schema_network_connector_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.crudapi.ObjectGetRsp"] = ves_io_schema_network_connector_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.crudapi.ObjectListReq"] = ves_io_schema_network_connector_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.crudapi.ObjectListRsp"] = ves_io_schema_network_connector_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.crudapi.ObjectListRspItem"] = ves_io_schema_network_connector_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.crudapi.ObjectReplaceReq"] = ves_io_schema_network_connector_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_connector.crudapi.ObjectReplaceRsp"] = ves_io_schema_network_connector_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_firewall.SpecType"] = ves_io_schema_network_firewall.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_firewall.CreateRequest"] = ves_io_schema_network_firewall.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.CreateResponse"] = ves_io_schema_network_firewall.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.DeleteRequest"] = ves_io_schema_network_firewall.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.GetRequest"] = ves_io_schema_network_firewall.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.GetResponse"] = ves_io_schema_network_firewall.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.ListRequest"] = ves_io_schema_network_firewall.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.ListResponse"] = ves_io_schema_network_firewall.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.ListResponseItem"] = ves_io_schema_network_firewall.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.ReplaceRequest"] = ves_io_schema_network_firewall.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.ReplaceResponse"] = ves_io_schema_network_firewall.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_firewall.ActiveFastACLsType"] = ves_io_schema_network_firewall.ActiveFastACLsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.ActiveForwardProxyPoliciesType"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.ActiveNetworkPoliciesType"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.CreateSpecType"] = ves_io_schema_network_firewall.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.GetSpecType"] = ves_io_schema_network_firewall.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.GlobalSpecType"] = ves_io_schema_network_firewall.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.NetworkFirewallStatus"] = ves_io_schema_network_firewall.NetworkFirewallStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.ReplaceSpecType"] = ves_io_schema_network_firewall.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_firewall.crudapi.ObjectCreateReq"] = ves_io_schema_network_firewall_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.crudapi.ObjectCreateRsp"] = ves_io_schema_network_firewall_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.crudapi.ObjectDeleteReq"] = ves_io_schema_network_firewall_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.crudapi.ObjectDeleteRsp"] = ves_io_schema_network_firewall_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.crudapi.ObjectGetReq"] = ves_io_schema_network_firewall_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.crudapi.ObjectGetRsp"] = ves_io_schema_network_firewall_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.crudapi.ObjectListReq"] = ves_io_schema_network_firewall_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.crudapi.ObjectListRsp"] = ves_io_schema_network_firewall_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.crudapi.ObjectListRspItem"] = ves_io_schema_network_firewall_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.crudapi.ObjectReplaceReq"] = ves_io_schema_network_firewall_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.crudapi.ObjectReplaceRsp"] = ves_io_schema_network_firewall_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_interface.SpecType"] = ves_io_schema_network_interface.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_interface.CreateRequest"] = ves_io_schema_network_interface.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.CreateResponse"] = ves_io_schema_network_interface.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.DeleteRequest"] = ves_io_schema_network_interface.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.GetRequest"] = ves_io_schema_network_interface.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.GetResponse"] = ves_io_schema_network_interface.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.ListRequest"] = ves_io_schema_network_interface.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.ListResponse"] = ves_io_schema_network_interface.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.ListResponseItem"] = ves_io_schema_network_interface.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.ReplaceRequest"] = ves_io_schema_network_interface.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.ReplaceResponse"] = ves_io_schema_network_interface.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_interface.CreateSpecType"] = ves_io_schema_network_interface.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.DHCPInterfaceIPType"] = ves_io_schema_network_interface.DHCPInterfaceIPTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.DHCPNetworkType"] = ves_io_schema_network_interface.DHCPNetworkTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.DHCPPoolType"] = ves_io_schema_network_interface.DHCPPoolTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.DHCPServerParametersType"] = ves_io_schema_network_interface.DHCPServerParametersTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.DedicatedInterfaceType"] = ves_io_schema_network_interface.DedicatedInterfaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.DedicatedManagementInterfaceType"] = ves_io_schema_network_interface.DedicatedManagementInterfaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.EthernetInterfaceType"] = ves_io_schema_network_interface.EthernetInterfaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.GetSpecType"] = ves_io_schema_network_interface.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.GlobalSpecType"] = ves_io_schema_network_interface.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.LegacyInterfaceType"] = ves_io_schema_network_interface.LegacyInterfaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.LinkQualityMonitorConfig"] = ves_io_schema_network_interface.LinkQualityMonitorConfigValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.NetworkInterfaceDFGW"] = ves_io_schema_network_interface.NetworkInterfaceDFGWValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.NetworkInterfaceDNS"] = ves_io_schema_network_interface.NetworkInterfaceDNSValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.NetworkInterfaceStatus"] = ves_io_schema_network_interface.NetworkInterfaceStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.NetworkInterfaceTunnel"] = ves_io_schema_network_interface.NetworkInterfaceTunnelValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.ReplaceSpecType"] = ves_io_schema_network_interface.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.StaticIPParametersType"] = ves_io_schema_network_interface.StaticIPParametersTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.StaticIpParametersClusterType"] = ves_io_schema_network_interface.StaticIpParametersClusterTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.StaticIpParametersFleetType"] = ves_io_schema_network_interface.StaticIpParametersFleetTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.StaticIpParametersNodeType"] = ves_io_schema_network_interface.StaticIpParametersNodeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.TunnelInterfaceType"] = ves_io_schema_network_interface.TunnelInterfaceTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_interface.crudapi.ObjectCreateReq"] = ves_io_schema_network_interface_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.crudapi.ObjectCreateRsp"] = ves_io_schema_network_interface_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.crudapi.ObjectDeleteReq"] = ves_io_schema_network_interface_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.crudapi.ObjectDeleteRsp"] = ves_io_schema_network_interface_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.crudapi.ObjectGetReq"] = ves_io_schema_network_interface_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.crudapi.ObjectGetRsp"] = ves_io_schema_network_interface_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.crudapi.ObjectListReq"] = ves_io_schema_network_interface_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.crudapi.ObjectListRsp"] = ves_io_schema_network_interface_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.crudapi.ObjectListRspItem"] = ves_io_schema_network_interface_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.crudapi.ObjectReplaceReq"] = ves_io_schema_network_interface_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_interface.crudapi.ObjectReplaceRsp"] = ves_io_schema_network_interface_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_policy.SpecType"] = ves_io_schema_network_policy.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_policy.CreateRequest"] = ves_io_schema_network_policy.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.CreateResponse"] = ves_io_schema_network_policy.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.DeleteRequest"] = ves_io_schema_network_policy.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.GetRequest"] = ves_io_schema_network_policy.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.GetResponse"] = ves_io_schema_network_policy.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.ListRequest"] = ves_io_schema_network_policy.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.ListResponse"] = ves_io_schema_network_policy.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.ListResponseItem"] = ves_io_schema_network_policy.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.ReplaceRequest"] = ves_io_schema_network_policy.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.ReplaceResponse"] = ves_io_schema_network_policy.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_policy.NetworkPolicyHits"] = ves_io_schema_network_policy.NetworkPolicyHitsValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.NetworkPolicyHitsId"] = ves_io_schema_network_policy.NetworkPolicyHitsIdValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.NetworkPolicyHitsRequest"] = ves_io_schema_network_policy.NetworkPolicyHitsRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.NetworkPolicyHitsResponse"] = ves_io_schema_network_policy.NetworkPolicyHitsResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.NetworkPolicyMetricLabelFilter"] = ves_io_schema_network_policy.NetworkPolicyMetricLabelFilterValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_policy.ApplicationsType"] = ves_io_schema_network_policy.ApplicationsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.CreateSpecType"] = ves_io_schema_network_policy.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.EndpointChoiceType"] = ves_io_schema_network_policy.EndpointChoiceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.GetSpecType"] = ves_io_schema_network_policy.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.GlobalSpecType"] = ves_io_schema_network_policy.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.LegacyNetworkPolicyRuleChoice"] = ves_io_schema_network_policy.LegacyNetworkPolicyRuleChoiceValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.NetworkPolicyRuleChoice"] = ves_io_schema_network_policy.NetworkPolicyRuleChoiceValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.NetworkPolicyRuleType"] = ves_io_schema_network_policy.NetworkPolicyRuleTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.ProtocolPortType"] = ves_io_schema_network_policy.ProtocolPortTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.ReplaceSpecType"] = ves_io_schema_network_policy.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_policy.crudapi.ObjectCreateReq"] = ves_io_schema_network_policy_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.crudapi.ObjectCreateRsp"] = ves_io_schema_network_policy_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.crudapi.ObjectDeleteReq"] = ves_io_schema_network_policy_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.crudapi.ObjectDeleteRsp"] = ves_io_schema_network_policy_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.crudapi.ObjectGetReq"] = ves_io_schema_network_policy_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.crudapi.ObjectGetRsp"] = ves_io_schema_network_policy_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.crudapi.ObjectListReq"] = ves_io_schema_network_policy_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.crudapi.ObjectListRsp"] = ves_io_schema_network_policy_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.crudapi.ObjectListRspItem"] = ves_io_schema_network_policy_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.crudapi.ObjectReplaceReq"] = ves_io_schema_network_policy_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy.crudapi.ObjectReplaceRsp"] = ves_io_schema_network_policy_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.SpecType"] = ves_io_schema_network_policy_rule.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.CreateRequest"] = ves_io_schema_network_policy_rule.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.CreateResponse"] = ves_io_schema_network_policy_rule.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.DeleteRequest"] = ves_io_schema_network_policy_rule.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.GetRequest"] = ves_io_schema_network_policy_rule.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.GetResponse"] = ves_io_schema_network_policy_rule.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.ListRequest"] = ves_io_schema_network_policy_rule.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.ListResponse"] = ves_io_schema_network_policy_rule.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.ListResponseItem"] = ves_io_schema_network_policy_rule.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.ReplaceRequest"] = ves_io_schema_network_policy_rule.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.ReplaceResponse"] = ves_io_schema_network_policy_rule.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.CreateSpecType"] = ves_io_schema_network_policy_rule.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.GetSpecType"] = ves_io_schema_network_policy_rule.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.GlobalSpecType"] = ves_io_schema_network_policy_rule.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.NetworkPolicyPBRRuleAction"] = ves_io_schema_network_policy_rule.NetworkPolicyPBRRuleActionValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.NetworkPolicyRuleAdvancedAction"] = ves_io_schema_network_policy_rule.NetworkPolicyRuleAdvancedActionValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.ReplaceSpecType"] = ves_io_schema_network_policy_rule.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.crudapi.ObjectCreateReq"] = ves_io_schema_network_policy_rule_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.crudapi.ObjectCreateRsp"] = ves_io_schema_network_policy_rule_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.crudapi.ObjectDeleteReq"] = ves_io_schema_network_policy_rule_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.crudapi.ObjectDeleteRsp"] = ves_io_schema_network_policy_rule_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.crudapi.ObjectGetReq"] = ves_io_schema_network_policy_rule_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.crudapi.ObjectGetRsp"] = ves_io_schema_network_policy_rule_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.crudapi.ObjectListReq"] = ves_io_schema_network_policy_rule_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.crudapi.ObjectListRsp"] = ves_io_schema_network_policy_rule_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.crudapi.ObjectListRspItem"] = ves_io_schema_network_policy_rule_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.crudapi.ObjectReplaceReq"] = ves_io_schema_network_policy_rule_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.crudapi.ObjectReplaceRsp"] = ves_io_schema_network_policy_rule_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.policer.SpecType"] = ves_io_schema_policer.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.policer.CreateRequest"] = ves_io_schema_policer.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.CreateResponse"] = ves_io_schema_policer.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.DeleteRequest"] = ves_io_schema_policer.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.GetRequest"] = ves_io_schema_policer.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.GetResponse"] = ves_io_schema_policer.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.ListRequest"] = ves_io_schema_policer.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.ListResponse"] = ves_io_schema_policer.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.ListResponseItem"] = ves_io_schema_policer.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.ReplaceRequest"] = ves_io_schema_policer.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.ReplaceResponse"] = ves_io_schema_policer.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.policer.CreateSpecType"] = ves_io_schema_policer.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.GetSpecType"] = ves_io_schema_policer.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.GlobalSpecType"] = ves_io_schema_policer.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.ReplaceSpecType"] = ves_io_schema_policer.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.SingleRateTwoColorType"] = ves_io_schema_policer.SingleRateTwoColorTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.policer.crudapi.ObjectCreateReq"] = ves_io_schema_policer_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.crudapi.ObjectCreateRsp"] = ves_io_schema_policer_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.crudapi.ObjectDeleteReq"] = ves_io_schema_policer_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.crudapi.ObjectDeleteRsp"] = ves_io_schema_policer_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.crudapi.ObjectGetReq"] = ves_io_schema_policer_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.crudapi.ObjectGetRsp"] = ves_io_schema_policer_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.crudapi.ObjectListReq"] = ves_io_schema_policer_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.crudapi.ObjectListRsp"] = ves_io_schema_policer_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.crudapi.ObjectListRspItem"] = ves_io_schema_policer_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.crudapi.ObjectReplaceReq"] = ves_io_schema_policer_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.policer.crudapi.ObjectReplaceRsp"] = ves_io_schema_policer_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.policy.AppFirewallDetectionControl"] = ves_io_schema_policy.AppFirewallDetectionControlValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.AppFirewallSignatureContext"] = ves_io_schema_policy.AppFirewallSignatureContextValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.AppFirewallViolationContext"] = ves_io_schema_policy.AppFirewallViolationContextValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.ArgMatcherType"] = ves_io_schema_policy.ArgMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.AsnMatchList"] = ves_io_schema_policy.AsnMatchListValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.AsnMatcherType"] = ves_io_schema_policy.AsnMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.ContentRewriteAction"] = ves_io_schema_policy.ContentRewriteActionValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.CookieMatcherType"] = ves_io_schema_policy.CookieMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.DenyInformation"] = ves_io_schema_policy.DenyInformationValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.HeaderMatcherType"] = ves_io_schema_policy.HeaderMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.HttpMethodMatcherType"] = ves_io_schema_policy.HttpMethodMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.IpMatcherType"] = ves_io_schema_policy.IpMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.L4DestMatcherType"] = ves_io_schema_policy.L4DestMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.MatcherType"] = ves_io_schema_policy.MatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.MatcherTypeBasic"] = ves_io_schema_policy.MatcherTypeBasicValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.PathMatcherType"] = ves_io_schema_policy.PathMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.PortMatcherType"] = ves_io_schema_policy.PortMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.PrefixMatchList"] = ves_io_schema_policy.PrefixMatchListValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.QueryParameterMatcherType"] = ves_io_schema_policy.QueryParameterMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.RoleMatcherType"] = ves_io_schema_policy.RoleMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.ShapeBotBlockMitigationActionType"] = ves_io_schema_policy.ShapeBotBlockMitigationActionTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.ShapeBotMitigationAction"] = ves_io_schema_policy.ShapeBotMitigationActionValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.ShapeBotRedirectMitigationActionType"] = ves_io_schema_policy.ShapeBotRedirectMitigationActionTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.ShapeProtectedEndpointAction"] = ves_io_schema_policy.ShapeProtectedEndpointActionValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.SimpleWafExclusionRule"] = ves_io_schema_policy.SimpleWafExclusionRuleValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.StringMatcherType"] = ves_io_schema_policy.StringMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.TlsFingerprintMatcherType"] = ves_io_schema_policy.TlsFingerprintMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.URLItem"] = ves_io_schema_policy.URLItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.URLMatcherType"] = ves_io_schema_policy.URLMatcherTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.WafAction"] = ves_io_schema_policy.WafActionValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.WafInlineRuleControl"] = ves_io_schema_policy.WafInlineRuleControlValidator()
	MDR.ValidatorRegistry["ves.io.schema.policy.WafRuleControl"] = ves_io_schema_policy.WafRuleControlValidator()

	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.SpecType"] = ves_io_schema_protocol_policer.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.CreateRequest"] = ves_io_schema_protocol_policer.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.CreateResponse"] = ves_io_schema_protocol_policer.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.DeleteRequest"] = ves_io_schema_protocol_policer.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.GetRequest"] = ves_io_schema_protocol_policer.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.GetResponse"] = ves_io_schema_protocol_policer.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.ListRequest"] = ves_io_schema_protocol_policer.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.ListResponse"] = ves_io_schema_protocol_policer.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.ListResponseItem"] = ves_io_schema_protocol_policer.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.ReplaceRequest"] = ves_io_schema_protocol_policer.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.ReplaceResponse"] = ves_io_schema_protocol_policer.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.CreateSpecType"] = ves_io_schema_protocol_policer.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.DnsType"] = ves_io_schema_protocol_policer.DnsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.GetSpecType"] = ves_io_schema_protocol_policer.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.GlobalSpecType"] = ves_io_schema_protocol_policer.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.IcmpType"] = ves_io_schema_protocol_policer.IcmpTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.ProtocolPolicerType"] = ves_io_schema_protocol_policer.ProtocolPolicerTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.ProtocolType"] = ves_io_schema_protocol_policer.ProtocolTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.ReplaceSpecType"] = ves_io_schema_protocol_policer.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.TcpType"] = ves_io_schema_protocol_policer.TcpTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.UdpType"] = ves_io_schema_protocol_policer.UdpTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.crudapi.ObjectCreateReq"] = ves_io_schema_protocol_policer_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.crudapi.ObjectCreateRsp"] = ves_io_schema_protocol_policer_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.crudapi.ObjectDeleteReq"] = ves_io_schema_protocol_policer_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.crudapi.ObjectDeleteRsp"] = ves_io_schema_protocol_policer_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.crudapi.ObjectGetReq"] = ves_io_schema_protocol_policer_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.crudapi.ObjectGetRsp"] = ves_io_schema_protocol_policer_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.crudapi.ObjectListReq"] = ves_io_schema_protocol_policer_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.crudapi.ObjectListRsp"] = ves_io_schema_protocol_policer_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.crudapi.ObjectListRspItem"] = ves_io_schema_protocol_policer_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.crudapi.ObjectReplaceReq"] = ves_io_schema_protocol_policer_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.crudapi.ObjectReplaceRsp"] = ves_io_schema_protocol_policer_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.public_ip.SpecType"] = ves_io_schema_public_ip.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.public_ip.GetRequest"] = ves_io_schema_public_ip.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.GetResponse"] = ves_io_schema_public_ip.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.ListRequest"] = ves_io_schema_public_ip.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.ListResponse"] = ves_io_schema_public_ip.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.ListResponseItem"] = ves_io_schema_public_ip.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.ReplaceRequest"] = ves_io_schema_public_ip.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.ReplaceResponse"] = ves_io_schema_public_ip.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.public_ip.GetSpecType"] = ves_io_schema_public_ip.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.GlobalSpecType"] = ves_io_schema_public_ip.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.ReplaceSpecType"] = ves_io_schema_public_ip.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.public_ip.crudapi.ObjectCreateReq"] = ves_io_schema_public_ip_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.crudapi.ObjectCreateRsp"] = ves_io_schema_public_ip_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.crudapi.ObjectDeleteReq"] = ves_io_schema_public_ip_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.crudapi.ObjectDeleteRsp"] = ves_io_schema_public_ip_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.crudapi.ObjectGetReq"] = ves_io_schema_public_ip_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.crudapi.ObjectGetRsp"] = ves_io_schema_public_ip_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.crudapi.ObjectListReq"] = ves_io_schema_public_ip_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.crudapi.ObjectListRsp"] = ves_io_schema_public_ip_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.crudapi.ObjectListRspItem"] = ves_io_schema_public_ip_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.crudapi.ObjectReplaceReq"] = ves_io_schema_public_ip_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.public_ip.crudapi.ObjectReplaceRsp"] = ves_io_schema_public_ip_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.SpecType"] = ves_io_schema_rate_limiter.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.CreateRequest"] = ves_io_schema_rate_limiter.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.CreateResponse"] = ves_io_schema_rate_limiter.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.DeleteRequest"] = ves_io_schema_rate_limiter.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.GetRequest"] = ves_io_schema_rate_limiter.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.GetResponse"] = ves_io_schema_rate_limiter.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.ListRequest"] = ves_io_schema_rate_limiter.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.ListResponse"] = ves_io_schema_rate_limiter.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.ListResponseItem"] = ves_io_schema_rate_limiter.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.ReplaceRequest"] = ves_io_schema_rate_limiter.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.ReplaceResponse"] = ves_io_schema_rate_limiter.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.CreateSpecType"] = ves_io_schema_rate_limiter.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.GetSpecType"] = ves_io_schema_rate_limiter.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.GlobalSpecType"] = ves_io_schema_rate_limiter.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.RateLimitValue"] = ves_io_schema_rate_limiter.RateLimitValueValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.ReplaceSpecType"] = ves_io_schema_rate_limiter.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.crudapi.ObjectCreateReq"] = ves_io_schema_rate_limiter_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.crudapi.ObjectCreateRsp"] = ves_io_schema_rate_limiter_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.crudapi.ObjectDeleteReq"] = ves_io_schema_rate_limiter_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.crudapi.ObjectDeleteRsp"] = ves_io_schema_rate_limiter_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.crudapi.ObjectGetReq"] = ves_io_schema_rate_limiter_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.crudapi.ObjectGetRsp"] = ves_io_schema_rate_limiter_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.crudapi.ObjectListReq"] = ves_io_schema_rate_limiter_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.crudapi.ObjectListRsp"] = ves_io_schema_rate_limiter_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.crudapi.ObjectListRspItem"] = ves_io_schema_rate_limiter_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.crudapi.ObjectReplaceReq"] = ves_io_schema_rate_limiter_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.crudapi.ObjectReplaceRsp"] = ves_io_schema_rate_limiter_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.registration.SpecType"] = ves_io_schema_registration.SpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.StatusType"] = ves_io_schema_registration.StatusTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.registration.CreateRequest"] = ves_io_schema_registration.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.CreateResponse"] = ves_io_schema_registration.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.DeleteRequest"] = ves_io_schema_registration.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.GetRequest"] = ves_io_schema_registration.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.GetResponse"] = ves_io_schema_registration.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.ListRequest"] = ves_io_schema_registration.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.ListResponse"] = ves_io_schema_registration.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.ListResponseItem"] = ves_io_schema_registration.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.ReplaceRequest"] = ves_io_schema_registration.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.ReplaceResponse"] = ves_io_schema_registration.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.registration.ApprovalReq"] = ves_io_schema_registration.ApprovalReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.ConfigReq"] = ves_io_schema_registration.ConfigReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.ConfigResp"] = ves_io_schema_registration.ConfigRespValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.ListBySiteReq"] = ves_io_schema_registration.ListBySiteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.ListStateReq"] = ves_io_schema_registration.ListStateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.ObjectChangeResp"] = ves_io_schema_registration.ObjectChangeRespValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.RegistrationCreateRequest"] = ves_io_schema_registration.RegistrationCreateRequestValidator()

	MDR.ValidatorRegistry["ves.io.schema.registration.CreateSpecType"] = ves_io_schema_registration.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.GetSpecType"] = ves_io_schema_registration.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.GlobalSpecType"] = ves_io_schema_registration.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.Infra"] = ves_io_schema_registration.InfraValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.Interface"] = ves_io_schema_registration.InterfaceValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.InternetProxy"] = ves_io_schema_registration.InternetProxyValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.Passport"] = ves_io_schema_registration.PassportValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.ReplaceSpecType"] = ves_io_schema_registration.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.WorkloadContext"] = ves_io_schema_registration.WorkloadContextValidator()

	MDR.ValidatorRegistry["ves.io.schema.registration.crudapi.ObjectCreateReq"] = ves_io_schema_registration_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.crudapi.ObjectCreateRsp"] = ves_io_schema_registration_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.crudapi.ObjectDeleteReq"] = ves_io_schema_registration_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.crudapi.ObjectDeleteRsp"] = ves_io_schema_registration_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.crudapi.ObjectGetReq"] = ves_io_schema_registration_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.crudapi.ObjectGetRsp"] = ves_io_schema_registration_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.crudapi.ObjectListReq"] = ves_io_schema_registration_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.crudapi.ObjectListRsp"] = ves_io_schema_registration_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.crudapi.ObjectListRspItem"] = ves_io_schema_registration_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.crudapi.ObjectReplaceReq"] = ves_io_schema_registration_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.registration.crudapi.ObjectReplaceRsp"] = ves_io_schema_registration_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.role.SpecType"] = ves_io_schema_role.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.role.CreateRequest"] = ves_io_schema_role.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.CreateResponse"] = ves_io_schema_role.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.DeleteRequest"] = ves_io_schema_role.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.GetRequest"] = ves_io_schema_role.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.GetResponse"] = ves_io_schema_role.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.ListRequest"] = ves_io_schema_role.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.ListResponse"] = ves_io_schema_role.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.ListResponseItem"] = ves_io_schema_role.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.ReplaceRequest"] = ves_io_schema_role.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.ReplaceResponse"] = ves_io_schema_role.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.role.CustomCreateRequest"] = ves_io_schema_role.CustomCreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.CustomGetRequest"] = ves_io_schema_role.CustomGetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.CustomGetResponse"] = ves_io_schema_role.CustomGetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.CustomListRequest"] = ves_io_schema_role.CustomListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.CustomListResponse"] = ves_io_schema_role.CustomListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.CustomReplaceRequest"] = ves_io_schema_role.CustomReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.Role"] = ves_io_schema_role.RoleValidator()

	MDR.ValidatorRegistry["ves.io.schema.role.CreateSpecType"] = ves_io_schema_role.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.GetSpecType"] = ves_io_schema_role.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.GlobalSpecType"] = ves_io_schema_role.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.ReplaceSpecType"] = ves_io_schema_role.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.role.crudapi.ObjectCreateReq"] = ves_io_schema_role_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.crudapi.ObjectCreateRsp"] = ves_io_schema_role_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.crudapi.ObjectDeleteReq"] = ves_io_schema_role_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.crudapi.ObjectDeleteRsp"] = ves_io_schema_role_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.crudapi.ObjectGetReq"] = ves_io_schema_role_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.crudapi.ObjectGetRsp"] = ves_io_schema_role_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.crudapi.ObjectListReq"] = ves_io_schema_role_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.crudapi.ObjectListRsp"] = ves_io_schema_role_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.crudapi.ObjectListRspItem"] = ves_io_schema_role_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.crudapi.ObjectReplaceReq"] = ves_io_schema_role_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.role.crudapi.ObjectReplaceRsp"] = ves_io_schema_role_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.route.SpecType"] = ves_io_schema_route.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.route.CreateRequest"] = ves_io_schema_route.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.CreateResponse"] = ves_io_schema_route.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.DeleteRequest"] = ves_io_schema_route.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.GetRequest"] = ves_io_schema_route.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.GetResponse"] = ves_io_schema_route.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.ListRequest"] = ves_io_schema_route.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.ListResponse"] = ves_io_schema_route.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.ListResponseItem"] = ves_io_schema_route.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.ReplaceRequest"] = ves_io_schema_route.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.ReplaceResponse"] = ves_io_schema_route.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.route.CookieForHashing"] = ves_io_schema_route.CookieForHashingValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.CreateSpecType"] = ves_io_schema_route.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.GetSpecType"] = ves_io_schema_route.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.GlobalSpecType"] = ves_io_schema_route.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.HashPolicyType"] = ves_io_schema_route.HashPolicyTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.MirrorPolicyType"] = ves_io_schema_route.MirrorPolicyTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.ReplaceSpecType"] = ves_io_schema_route.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.RouteDestination"] = ves_io_schema_route.RouteDestinationValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.RouteDestinationList"] = ves_io_schema_route.RouteDestinationListValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.RouteDirectResponse"] = ves_io_schema_route.RouteDirectResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.RouteQueryParams"] = ves_io_schema_route.RouteQueryParamsValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.RouteRedirect"] = ves_io_schema_route.RouteRedirectValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.RouteType"] = ves_io_schema_route.RouteTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.ServicePolicyInfo"] = ves_io_schema_route.ServicePolicyInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.SpdyConfigType"] = ves_io_schema_route.SpdyConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.WebsocketConfigType"] = ves_io_schema_route.WebsocketConfigTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.route.crudapi.ObjectCreateReq"] = ves_io_schema_route_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.crudapi.ObjectCreateRsp"] = ves_io_schema_route_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.crudapi.ObjectDeleteReq"] = ves_io_schema_route_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.crudapi.ObjectDeleteRsp"] = ves_io_schema_route_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.crudapi.ObjectGetReq"] = ves_io_schema_route_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.crudapi.ObjectGetRsp"] = ves_io_schema_route_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.crudapi.ObjectListReq"] = ves_io_schema_route_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.crudapi.ObjectListRsp"] = ves_io_schema_route_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.crudapi.ObjectListRspItem"] = ves_io_schema_route_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.crudapi.ObjectReplaceReq"] = ves_io_schema_route_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.route.crudapi.ObjectReplaceRsp"] = ves_io_schema_route_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.secret_policy.SpecType"] = ves_io_schema_secret_policy.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.secret_policy.CreateRequest"] = ves_io_schema_secret_policy.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.CreateResponse"] = ves_io_schema_secret_policy.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.DeleteRequest"] = ves_io_schema_secret_policy.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.GetRequest"] = ves_io_schema_secret_policy.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.GetResponse"] = ves_io_schema_secret_policy.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.ListRequest"] = ves_io_schema_secret_policy.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.ListResponse"] = ves_io_schema_secret_policy.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.ListResponseItem"] = ves_io_schema_secret_policy.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.ReplaceRequest"] = ves_io_schema_secret_policy.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.ReplaceResponse"] = ves_io_schema_secret_policy.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.secret_policy.RecoverRequest"] = ves_io_schema_secret_policy.RecoverRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.RecoverResponse"] = ves_io_schema_secret_policy.RecoverResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.SoftDeleteRequest"] = ves_io_schema_secret_policy.SoftDeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.SoftDeleteResponse"] = ves_io_schema_secret_policy.SoftDeleteResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.secret_policy.CreateSpecType"] = ves_io_schema_secret_policy.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.GetSpecType"] = ves_io_schema_secret_policy.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.GlobalSpecType"] = ves_io_schema_secret_policy.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.ReplaceSpecType"] = ves_io_schema_secret_policy.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.secret_policy.crudapi.ObjectCreateReq"] = ves_io_schema_secret_policy_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.crudapi.ObjectCreateRsp"] = ves_io_schema_secret_policy_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.crudapi.ObjectDeleteReq"] = ves_io_schema_secret_policy_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.crudapi.ObjectDeleteRsp"] = ves_io_schema_secret_policy_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.crudapi.ObjectGetReq"] = ves_io_schema_secret_policy_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.crudapi.ObjectGetRsp"] = ves_io_schema_secret_policy_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.crudapi.ObjectListReq"] = ves_io_schema_secret_policy_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.crudapi.ObjectListRsp"] = ves_io_schema_secret_policy_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.crudapi.ObjectListRspItem"] = ves_io_schema_secret_policy_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.crudapi.ObjectReplaceReq"] = ves_io_schema_secret_policy_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.crudapi.ObjectReplaceRsp"] = ves_io_schema_secret_policy_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.SpecType"] = ves_io_schema_secret_policy_rule.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.CreateRequest"] = ves_io_schema_secret_policy_rule.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.CreateResponse"] = ves_io_schema_secret_policy_rule.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.DeleteRequest"] = ves_io_schema_secret_policy_rule.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.GetRequest"] = ves_io_schema_secret_policy_rule.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.GetResponse"] = ves_io_schema_secret_policy_rule.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.ListRequest"] = ves_io_schema_secret_policy_rule.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.ListResponse"] = ves_io_schema_secret_policy_rule.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.ListResponseItem"] = ves_io_schema_secret_policy_rule.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.ReplaceRequest"] = ves_io_schema_secret_policy_rule.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.ReplaceResponse"] = ves_io_schema_secret_policy_rule.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.CreateSpecType"] = ves_io_schema_secret_policy_rule.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.GetSpecType"] = ves_io_schema_secret_policy_rule.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.GlobalSpecType"] = ves_io_schema_secret_policy_rule.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.ReplaceSpecType"] = ves_io_schema_secret_policy_rule.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.crudapi.ObjectCreateReq"] = ves_io_schema_secret_policy_rule_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.crudapi.ObjectCreateRsp"] = ves_io_schema_secret_policy_rule_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.crudapi.ObjectDeleteReq"] = ves_io_schema_secret_policy_rule_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.crudapi.ObjectDeleteRsp"] = ves_io_schema_secret_policy_rule_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.crudapi.ObjectGetReq"] = ves_io_schema_secret_policy_rule_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.crudapi.ObjectGetRsp"] = ves_io_schema_secret_policy_rule_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.crudapi.ObjectListReq"] = ves_io_schema_secret_policy_rule_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.crudapi.ObjectListRsp"] = ves_io_schema_secret_policy_rule_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.crudapi.ObjectListRspItem"] = ves_io_schema_secret_policy_rule_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.crudapi.ObjectReplaceReq"] = ves_io_schema_secret_policy_rule_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.crudapi.ObjectReplaceRsp"] = ves_io_schema_secret_policy_rule_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.service_policy.SpecType"] = ves_io_schema_service_policy.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.service_policy.CreateRequest"] = ves_io_schema_service_policy.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.CreateResponse"] = ves_io_schema_service_policy.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.DeleteRequest"] = ves_io_schema_service_policy.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.GetRequest"] = ves_io_schema_service_policy.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.GetResponse"] = ves_io_schema_service_policy.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.ListRequest"] = ves_io_schema_service_policy.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.ListResponse"] = ves_io_schema_service_policy.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.ListResponseItem"] = ves_io_schema_service_policy.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.ReplaceRequest"] = ves_io_schema_service_policy.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.ReplaceResponse"] = ves_io_schema_service_policy.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.service_policy.ServicePolicyHits"] = ves_io_schema_service_policy.ServicePolicyHitsValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.ServicePolicyHitsId"] = ves_io_schema_service_policy.ServicePolicyHitsIdValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.ServicePolicyHitsRequest"] = ves_io_schema_service_policy.ServicePolicyHitsRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.ServicePolicyHitsResponse"] = ves_io_schema_service_policy.ServicePolicyHitsResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.ServicePolicyMetricLabelFilter"] = ves_io_schema_service_policy.ServicePolicyMetricLabelFilterValidator()

	MDR.ValidatorRegistry["ves.io.schema.service_policy.CreateSpecType"] = ves_io_schema_service_policy.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.GetSpecType"] = ves_io_schema_service_policy.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.GlobalSpecType"] = ves_io_schema_service_policy.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.LegacyRuleList"] = ves_io_schema_service_policy.LegacyRuleListValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.ReplaceSpecType"] = ves_io_schema_service_policy.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.Rule"] = ves_io_schema_service_policy.RuleValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.RuleList"] = ves_io_schema_service_policy.RuleListValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.SimpleRule"] = ves_io_schema_service_policy.SimpleRuleValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.SourceList"] = ves_io_schema_service_policy.SourceListValidator()

	MDR.ValidatorRegistry["ves.io.schema.service_policy.crudapi.ObjectCreateReq"] = ves_io_schema_service_policy_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.crudapi.ObjectCreateRsp"] = ves_io_schema_service_policy_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.crudapi.ObjectDeleteReq"] = ves_io_schema_service_policy_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.crudapi.ObjectDeleteRsp"] = ves_io_schema_service_policy_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.crudapi.ObjectGetReq"] = ves_io_schema_service_policy_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.crudapi.ObjectGetRsp"] = ves_io_schema_service_policy_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.crudapi.ObjectListReq"] = ves_io_schema_service_policy_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.crudapi.ObjectListRsp"] = ves_io_schema_service_policy_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.crudapi.ObjectListRspItem"] = ves_io_schema_service_policy_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.crudapi.ObjectReplaceReq"] = ves_io_schema_service_policy_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy.crudapi.ObjectReplaceRsp"] = ves_io_schema_service_policy_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.SpecType"] = ves_io_schema_service_policy_rule.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.CreateRequest"] = ves_io_schema_service_policy_rule.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.CreateResponse"] = ves_io_schema_service_policy_rule.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.DeleteRequest"] = ves_io_schema_service_policy_rule.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.GetRequest"] = ves_io_schema_service_policy_rule.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.GetResponse"] = ves_io_schema_service_policy_rule.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.ListRequest"] = ves_io_schema_service_policy_rule.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.ListResponse"] = ves_io_schema_service_policy_rule.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.ListResponseItem"] = ves_io_schema_service_policy_rule.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.ReplaceRequest"] = ves_io_schema_service_policy_rule.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.ReplaceResponse"] = ves_io_schema_service_policy_rule.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.ChallengeRuleSpec"] = ves_io_schema_service_policy_rule.ChallengeRuleSpecValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.CreateSpecType"] = ves_io_schema_service_policy_rule.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.GetSpecType"] = ves_io_schema_service_policy_rule.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.GlobalSpecType"] = ves_io_schema_service_policy_rule.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.RateLimiterRuleSpec"] = ves_io_schema_service_policy_rule.RateLimiterRuleSpecValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.ReplaceSpecType"] = ves_io_schema_service_policy_rule.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.crudapi.ObjectCreateReq"] = ves_io_schema_service_policy_rule_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.crudapi.ObjectCreateRsp"] = ves_io_schema_service_policy_rule_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.crudapi.ObjectDeleteReq"] = ves_io_schema_service_policy_rule_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.crudapi.ObjectDeleteRsp"] = ves_io_schema_service_policy_rule_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.crudapi.ObjectGetReq"] = ves_io_schema_service_policy_rule_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.crudapi.ObjectGetRsp"] = ves_io_schema_service_policy_rule_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.crudapi.ObjectListReq"] = ves_io_schema_service_policy_rule_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.crudapi.ObjectListRsp"] = ves_io_schema_service_policy_rule_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.crudapi.ObjectListRspItem"] = ves_io_schema_service_policy_rule_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.crudapi.ObjectReplaceReq"] = ves_io_schema_service_policy_rule_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.crudapi.ObjectReplaceRsp"] = ves_io_schema_service_policy_rule_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.site.SpecType"] = ves_io_schema_site.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.site.GetRequest"] = ves_io_schema_site.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.GetResponse"] = ves_io_schema_site.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.ListRequest"] = ves_io_schema_site.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.ListResponse"] = ves_io_schema_site.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.ListResponseItem"] = ves_io_schema_site.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.ReplaceRequest"] = ves_io_schema_site.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.ReplaceResponse"] = ves_io_schema_site.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.site.ConfigMapListRequest"] = ves_io_schema_site.ConfigMapListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.CronJobListRequest"] = ves_io_schema_site.CronJobListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.DaemonSetListRequest"] = ves_io_schema_site.DaemonSetListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.DeploymentListRequest"] = ves_io_schema_site.DeploymentListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.EndpointsListRequest"] = ves_io_schema_site.EndpointsListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.JobListRequest"] = ves_io_schema_site.JobListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.NamespaceListRequest"] = ves_io_schema_site.NamespaceListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.NodeListRequest"] = ves_io_schema_site.NodeListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.PersistentVolumeClaimListRequest"] = ves_io_schema_site.PersistentVolumeClaimListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.PersistentVolumeListRequest"] = ves_io_schema_site.PersistentVolumeListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.PodListRequest"] = ves_io_schema_site.PodListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.ReplicaSetListRequest"] = ves_io_schema_site.ReplicaSetListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.SecretListRequest"] = ves_io_schema_site.SecretListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.ServiceListRequest"] = ves_io_schema_site.ServiceListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.StatefulSetListRequest"] = ves_io_schema_site.StatefulSetListRequestValidator()

	MDR.ValidatorRegistry["ves.io.schema.site.SetStateReq"] = ves_io_schema_site.SetStateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.SetStateResp"] = ves_io_schema_site.SetStateRespValidator()

	MDR.ValidatorRegistry["ves.io.schema.site.UpgradeOSRequest"] = ves_io_schema_site.UpgradeOSRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.UpgradeOSResponse"] = ves_io_schema_site.UpgradeOSResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.UpgradeSWRequest"] = ves_io_schema_site.UpgradeSWRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.UpgradeSWResponse"] = ves_io_schema_site.UpgradeSWResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.site.SiteStatusMetricsRequest"] = ves_io_schema_site.SiteStatusMetricsRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.SiteStatusMetricsResponse"] = ves_io_schema_site.SiteStatusMetricsResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.site.AresConnectionStatus"] = ves_io_schema_site.AresConnectionStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.Bios"] = ves_io_schema_site.BiosValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.Board"] = ves_io_schema_site.BoardValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.BondMembersType"] = ves_io_schema_site.BondMembersTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.Chassis"] = ves_io_schema_site.ChassisValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.Coordinates"] = ves_io_schema_site.CoordinatesValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.Cpu"] = ves_io_schema_site.CpuValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.CreateGlobalKubeConfigReq"] = ves_io_schema_site.CreateGlobalKubeConfigReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.CreateKubeConfigReq"] = ves_io_schema_site.CreateKubeConfigReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.CreateSpecType"] = ves_io_schema_site.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.DefaultUnderlayNetworkType"] = ves_io_schema_site.DefaultUnderlayNetworkTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.DeploymentState"] = ves_io_schema_site.DeploymentStateValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.FleetCondition"] = ves_io_schema_site.FleetConditionValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.FleetDeploymentState"] = ves_io_schema_site.FleetDeploymentStateValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.FleetStatus"] = ves_io_schema_site.FleetStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.GPU"] = ves_io_schema_site.GPUValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.GPUDevice"] = ves_io_schema_site.GPUDeviceValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.GetSpecType"] = ves_io_schema_site.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.GlobalAccessCheckRequest"] = ves_io_schema_site.GlobalAccessCheckRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.GlobalAccessCheckResponse"] = ves_io_schema_site.GlobalAccessCheckResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.GlobalSpecType"] = ves_io_schema_site.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.InterfaceStatus"] = ves_io_schema_site.InterfaceStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.IpsecConnectionStatus"] = ves_io_schema_site.IpsecConnectionStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.K8SApiServerParameters"] = ves_io_schema_site.K8SApiServerParametersValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.Kernel"] = ves_io_schema_site.KernelValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.KubeConfigStatusRsp"] = ves_io_schema_site.KubeConfigStatusRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.ListGlobalKubeConfigReq"] = ves_io_schema_site.ListGlobalKubeConfigReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.ListKubeConfigReq"] = ves_io_schema_site.ListKubeConfigReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.ListKubeConfigRsp"] = ves_io_schema_site.ListKubeConfigRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.ListKubeConfigRspItem"] = ves_io_schema_site.ListKubeConfigRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.Memory"] = ves_io_schema_site.MemoryValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.NetworkDevice"] = ves_io_schema_site.NetworkDeviceValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.NodeInfo"] = ves_io_schema_site.NodeInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.OS"] = ves_io_schema_site.OSValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.OperatingSystemStatus"] = ves_io_schema_site.OperatingSystemStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.OsInfo"] = ves_io_schema_site.OsInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.Product"] = ves_io_schema_site.ProductValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.PublishVIPParamsPerAz"] = ves_io_schema_site.PublishVIPParamsPerAzValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.ReplaceSpecType"] = ves_io_schema_site.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.RevokeKubeConfigReq"] = ves_io_schema_site.RevokeKubeConfigReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.ScalingStatus"] = ves_io_schema_site.ScalingStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.SiteStatusMetricsData"] = ves_io_schema_site.SiteStatusMetricsDataValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.SiteStatusMetricsFieldData"] = ves_io_schema_site.SiteStatusMetricsFieldDataValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.StorageDevice"] = ves_io_schema_site.StorageDeviceValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.TunnelConnectionStatus"] = ves_io_schema_site.TunnelConnectionStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.USBDevice"] = ves_io_schema_site.USBDeviceValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.VerMasterStatusType"] = ves_io_schema_site.VerMasterStatusTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.VerStatusType"] = ves_io_schema_site.VerStatusTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.VolterraSoftwareStatus"] = ves_io_schema_site.VolterraSoftwareStatusValidator()

	MDR.ValidatorRegistry["ves.io.schema.site.crudapi.ObjectCreateReq"] = ves_io_schema_site_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.crudapi.ObjectCreateRsp"] = ves_io_schema_site_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.crudapi.ObjectDeleteReq"] = ves_io_schema_site_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.crudapi.ObjectDeleteRsp"] = ves_io_schema_site_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.crudapi.ObjectGetReq"] = ves_io_schema_site_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.crudapi.ObjectGetRsp"] = ves_io_schema_site_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.crudapi.ObjectListReq"] = ves_io_schema_site_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.crudapi.ObjectListRsp"] = ves_io_schema_site_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.crudapi.ObjectListRspItem"] = ves_io_schema_site_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.crudapi.ObjectReplaceReq"] = ves_io_schema_site_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site.crudapi.ObjectReplaceRsp"] = ves_io_schema_site_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.SpecType"] = ves_io_schema_site_mesh_group.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.CreateRequest"] = ves_io_schema_site_mesh_group.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.CreateResponse"] = ves_io_schema_site_mesh_group.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.DeleteRequest"] = ves_io_schema_site_mesh_group.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.GetRequest"] = ves_io_schema_site_mesh_group.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.GetResponse"] = ves_io_schema_site_mesh_group.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.ListRequest"] = ves_io_schema_site_mesh_group.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.ListResponse"] = ves_io_schema_site_mesh_group.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.ListResponseItem"] = ves_io_schema_site_mesh_group.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.ReplaceRequest"] = ves_io_schema_site_mesh_group.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.ReplaceResponse"] = ves_io_schema_site_mesh_group.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.CreateSpecType"] = ves_io_schema_site_mesh_group.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.GetSpecType"] = ves_io_schema_site_mesh_group.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.GlobalSpecType"] = ves_io_schema_site_mesh_group.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.ReplaceSpecType"] = ves_io_schema_site_mesh_group.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.SiteMeshGroupStatus"] = ves_io_schema_site_mesh_group.SiteMeshGroupStatusValidator()

	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.crudapi.ObjectCreateReq"] = ves_io_schema_site_mesh_group_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.crudapi.ObjectCreateRsp"] = ves_io_schema_site_mesh_group_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.crudapi.ObjectDeleteReq"] = ves_io_schema_site_mesh_group_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.crudapi.ObjectDeleteRsp"] = ves_io_schema_site_mesh_group_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.crudapi.ObjectGetReq"] = ves_io_schema_site_mesh_group_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.crudapi.ObjectGetRsp"] = ves_io_schema_site_mesh_group_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.crudapi.ObjectListReq"] = ves_io_schema_site_mesh_group_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.crudapi.ObjectListRsp"] = ves_io_schema_site_mesh_group_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.crudapi.ObjectListRspItem"] = ves_io_schema_site_mesh_group_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.crudapi.ObjectReplaceReq"] = ves_io_schema_site_mesh_group_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.crudapi.ObjectReplaceRsp"] = ves_io_schema_site_mesh_group_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.token.SpecType"] = ves_io_schema_token.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.token.CreateRequest"] = ves_io_schema_token.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.CreateResponse"] = ves_io_schema_token.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.DeleteRequest"] = ves_io_schema_token.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.GetRequest"] = ves_io_schema_token.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.GetResponse"] = ves_io_schema_token.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.ListRequest"] = ves_io_schema_token.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.ListResponse"] = ves_io_schema_token.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.ListResponseItem"] = ves_io_schema_token.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.ReplaceRequest"] = ves_io_schema_token.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.ReplaceResponse"] = ves_io_schema_token.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.token.ObjectChangeResp"] = ves_io_schema_token.ObjectChangeRespValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.StateReq"] = ves_io_schema_token.StateReqValidator()

	MDR.ValidatorRegistry["ves.io.schema.token.CreateSpecType"] = ves_io_schema_token.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.GetSpecType"] = ves_io_schema_token.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.GlobalSpecType"] = ves_io_schema_token.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.ReplaceSpecType"] = ves_io_schema_token.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.token.crudapi.ObjectCreateReq"] = ves_io_schema_token_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.crudapi.ObjectCreateRsp"] = ves_io_schema_token_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.crudapi.ObjectDeleteReq"] = ves_io_schema_token_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.crudapi.ObjectDeleteRsp"] = ves_io_schema_token_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.crudapi.ObjectGetReq"] = ves_io_schema_token_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.crudapi.ObjectGetRsp"] = ves_io_schema_token_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.crudapi.ObjectListReq"] = ves_io_schema_token_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.crudapi.ObjectListRsp"] = ves_io_schema_token_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.crudapi.ObjectListRspItem"] = ves_io_schema_token_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.crudapi.ObjectReplaceReq"] = ves_io_schema_token_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.token.crudapi.ObjectReplaceRsp"] = ves_io_schema_token_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.tunnel.SpecType"] = ves_io_schema_tunnel.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.tunnel.CreateRequest"] = ves_io_schema_tunnel.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.CreateResponse"] = ves_io_schema_tunnel.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.DeleteRequest"] = ves_io_schema_tunnel.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.GetRequest"] = ves_io_schema_tunnel.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.GetResponse"] = ves_io_schema_tunnel.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.ListRequest"] = ves_io_schema_tunnel.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.ListResponse"] = ves_io_schema_tunnel.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.ListResponseItem"] = ves_io_schema_tunnel.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.ReplaceRequest"] = ves_io_schema_tunnel.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.ReplaceResponse"] = ves_io_schema_tunnel.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.tunnel.CreateSpecType"] = ves_io_schema_tunnel.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.GetSpecType"] = ves_io_schema_tunnel.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.GlobalSpecType"] = ves_io_schema_tunnel.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.InterfaceType"] = ves_io_schema_tunnel.InterfaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.IpsecTunnelParams"] = ves_io_schema_tunnel.IpsecTunnelParamsValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.LocalIpAddressSelector"] = ves_io_schema_tunnel.LocalIpAddressSelectorValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.LocalIpAddressType"] = ves_io_schema_tunnel.LocalIpAddressTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.RemoteEndpointType"] = ves_io_schema_tunnel.RemoteEndpointTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.RemoteIpAddressSelector"] = ves_io_schema_tunnel.RemoteIpAddressSelectorValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.RemoteNodeAttributes"] = ves_io_schema_tunnel.RemoteNodeAttributesValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.ReplaceSpecType"] = ves_io_schema_tunnel.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.TunnelParams"] = ves_io_schema_tunnel.TunnelParamsValidator()

	MDR.ValidatorRegistry["ves.io.schema.tunnel.crudapi.ObjectCreateReq"] = ves_io_schema_tunnel_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.crudapi.ObjectCreateRsp"] = ves_io_schema_tunnel_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.crudapi.ObjectDeleteReq"] = ves_io_schema_tunnel_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.crudapi.ObjectDeleteRsp"] = ves_io_schema_tunnel_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.crudapi.ObjectGetReq"] = ves_io_schema_tunnel_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.crudapi.ObjectGetRsp"] = ves_io_schema_tunnel_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.crudapi.ObjectListReq"] = ves_io_schema_tunnel_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.crudapi.ObjectListRsp"] = ves_io_schema_tunnel_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.crudapi.ObjectListRspItem"] = ves_io_schema_tunnel_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.crudapi.ObjectReplaceReq"] = ves_io_schema_tunnel_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.tunnel.crudapi.ObjectReplaceRsp"] = ves_io_schema_tunnel_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.usb_policy.SpecType"] = ves_io_schema_usb_policy.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.usb_policy.CreateRequest"] = ves_io_schema_usb_policy.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.CreateResponse"] = ves_io_schema_usb_policy.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.DeleteRequest"] = ves_io_schema_usb_policy.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.GetRequest"] = ves_io_schema_usb_policy.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.GetResponse"] = ves_io_schema_usb_policy.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.ListRequest"] = ves_io_schema_usb_policy.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.ListResponse"] = ves_io_schema_usb_policy.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.ListResponseItem"] = ves_io_schema_usb_policy.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.ReplaceRequest"] = ves_io_schema_usb_policy.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.ReplaceResponse"] = ves_io_schema_usb_policy.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.usb_policy.CreateSpecType"] = ves_io_schema_usb_policy.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.GetSpecType"] = ves_io_schema_usb_policy.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.GlobalSpecType"] = ves_io_schema_usb_policy.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.ReplaceSpecType"] = ves_io_schema_usb_policy.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.Rule"] = ves_io_schema_usb_policy.RuleValidator()

	MDR.ValidatorRegistry["ves.io.schema.usb_policy.crudapi.ObjectCreateReq"] = ves_io_schema_usb_policy_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.crudapi.ObjectCreateRsp"] = ves_io_schema_usb_policy_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.crudapi.ObjectDeleteReq"] = ves_io_schema_usb_policy_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.crudapi.ObjectDeleteRsp"] = ves_io_schema_usb_policy_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.crudapi.ObjectGetReq"] = ves_io_schema_usb_policy_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.crudapi.ObjectGetRsp"] = ves_io_schema_usb_policy_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.crudapi.ObjectListReq"] = ves_io_schema_usb_policy_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.crudapi.ObjectListRsp"] = ves_io_schema_usb_policy_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.crudapi.ObjectListRspItem"] = ves_io_schema_usb_policy_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.crudapi.ObjectReplaceReq"] = ves_io_schema_usb_policy_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.crudapi.ObjectReplaceRsp"] = ves_io_schema_usb_policy_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.user.SpecType"] = ves_io_schema_user.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.user.LastLoginUpdateRequest"] = ves_io_schema_user.LastLoginUpdateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.LastLoginUpdateResponse"] = ves_io_schema_user.LastLoginUpdateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.PrivateCascadeDeleteRequest"] = ves_io_schema_user.PrivateCascadeDeleteRequestValidator()

	MDR.ValidatorRegistry["ves.io.schema.user.CreateRequest"] = ves_io_schema_user.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.CreateResponse"] = ves_io_schema_user.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.GetRequest"] = ves_io_schema_user.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.GetResponse"] = ves_io_schema_user.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.ListRequest"] = ves_io_schema_user.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.ListResponse"] = ves_io_schema_user.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.ListResponseItem"] = ves_io_schema_user.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.ReplaceRequest"] = ves_io_schema_user.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.ReplaceResponse"] = ves_io_schema_user.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.user.AcceptTOSRequest"] = ves_io_schema_user.AcceptTOSRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.AcceptTOSResponse"] = ves_io_schema_user.AcceptTOSResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.AssignRoleRequest"] = ves_io_schema_user.AssignRoleRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.BillingFeatureIndicator"] = ves_io_schema_user.BillingFeatureIndicatorValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.CascadeDeleteItemType"] = ves_io_schema_user.CascadeDeleteItemTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.CascadeDeleteRequest"] = ves_io_schema_user.CascadeDeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.CascadeDeleteResponse"] = ves_io_schema_user.CascadeDeleteResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.Empty"] = ves_io_schema_user.EmptyValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.FeatureFlagType"] = ves_io_schema_user.FeatureFlagTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.GetTOSRequest"] = ves_io_schema_user.GetTOSRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.GetTOSResponse"] = ves_io_schema_user.GetTOSResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.GetUserRoleRequest"] = ves_io_schema_user.GetUserRoleRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.GetUserRoleResponse"] = ves_io_schema_user.GetUserRoleResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.ListUserRoleRequest"] = ves_io_schema_user.ListUserRoleRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.ListUserRoleResponse"] = ves_io_schema_user.ListUserRoleResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.ListUserRoleResponseItem"] = ves_io_schema_user.ListUserRoleResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.NamespaceRoleType"] = ves_io_schema_user.NamespaceRoleTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.NamespacesRoleType"] = ves_io_schema_user.NamespacesRoleTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.ResetPasswordByAdminRequest"] = ves_io_schema_user.ResetPasswordByAdminRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.SendPasswordEmailRequest"] = ves_io_schema_user.SendPasswordEmailRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.SendPasswordEmailResponse"] = ves_io_schema_user.SendPasswordEmailResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.UserRoleRequest"] = ves_io_schema_user.UserRoleRequestValidator()

	MDR.ValidatorRegistry["ves.io.schema.user.CreateSpecType"] = ves_io_schema_user.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.GetSpecType"] = ves_io_schema_user.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.GlobalSpecType"] = ves_io_schema_user.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.ReplaceSpecType"] = ves_io_schema_user.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.user.crudapi.ObjectCreateReq"] = ves_io_schema_user_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.crudapi.ObjectCreateRsp"] = ves_io_schema_user_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.crudapi.ObjectDeleteReq"] = ves_io_schema_user_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.crudapi.ObjectDeleteRsp"] = ves_io_schema_user_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.crudapi.ObjectGetReq"] = ves_io_schema_user_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.crudapi.ObjectGetRsp"] = ves_io_schema_user_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.crudapi.ObjectListReq"] = ves_io_schema_user_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.crudapi.ObjectListRsp"] = ves_io_schema_user_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.crudapi.ObjectListRspItem"] = ves_io_schema_user_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.crudapi.ObjectReplaceReq"] = ves_io_schema_user_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.user.crudapi.ObjectReplaceRsp"] = ves_io_schema_user_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.user_identification.SpecType"] = ves_io_schema_user_identification.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.user_identification.CreateRequest"] = ves_io_schema_user_identification.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.CreateResponse"] = ves_io_schema_user_identification.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.DeleteRequest"] = ves_io_schema_user_identification.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.GetRequest"] = ves_io_schema_user_identification.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.GetResponse"] = ves_io_schema_user_identification.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.ListRequest"] = ves_io_schema_user_identification.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.ListResponse"] = ves_io_schema_user_identification.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.ListResponseItem"] = ves_io_schema_user_identification.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.ReplaceRequest"] = ves_io_schema_user_identification.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.ReplaceResponse"] = ves_io_schema_user_identification.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.user_identification.CreateSpecType"] = ves_io_schema_user_identification.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.GetSpecType"] = ves_io_schema_user_identification.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.GlobalSpecType"] = ves_io_schema_user_identification.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.ReplaceSpecType"] = ves_io_schema_user_identification.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.UserIdentificationRule"] = ves_io_schema_user_identification.UserIdentificationRuleValidator()

	MDR.ValidatorRegistry["ves.io.schema.user_identification.crudapi.ObjectCreateReq"] = ves_io_schema_user_identification_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.crudapi.ObjectCreateRsp"] = ves_io_schema_user_identification_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.crudapi.ObjectDeleteReq"] = ves_io_schema_user_identification_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.crudapi.ObjectDeleteRsp"] = ves_io_schema_user_identification_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.crudapi.ObjectGetReq"] = ves_io_schema_user_identification_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.crudapi.ObjectGetRsp"] = ves_io_schema_user_identification_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.crudapi.ObjectListReq"] = ves_io_schema_user_identification_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.crudapi.ObjectListRsp"] = ves_io_schema_user_identification_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.crudapi.ObjectListRspItem"] = ves_io_schema_user_identification_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.crudapi.ObjectReplaceReq"] = ves_io_schema_user_identification_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.user_identification.crudapi.ObjectReplaceRsp"] = ves_io_schema_user_identification_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.vesenv.APIGroupChoice"] = ves_io_schema_vesenv.APIGroupChoiceValidator()

	MDR.ValidatorRegistry["ves.io.schema.vesenv.RouteTargetChoice"] = ves_io_schema_vesenv.RouteTargetChoiceValidator()

	MDR.ValidatorRegistry["ves.io.schema.vesenv.ServiceChoice"] = ves_io_schema_vesenv.ServiceChoiceValidator()

	MDR.ValidatorRegistry["ves.io.schema.vesenv.APIGroupElementInfo"] = ves_io_schema_vesenv.APIGroupElementInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.vesenv.APIGroupElementItem"] = ves_io_schema_vesenv.APIGroupElementItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.vesenv.APIGroupNameMap"] = ves_io_schema_vesenv.APIGroupNameMapValidator()
	MDR.ValidatorRegistry["ves.io.schema.vesenv.APIGroupNameMapItem"] = ves_io_schema_vesenv.APIGroupNameMapItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.vesenv.BFSecretChoice"] = ves_io_schema_vesenv.BFSecretChoiceValidator()
	MDR.ValidatorRegistry["ves.io.schema.vesenv.BFSecretInfo"] = ves_io_schema_vesenv.BFSecretInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.vesenv.NameToUid"] = ves_io_schema_vesenv.NameToUidValidator()
	MDR.ValidatorRegistry["ves.io.schema.vesenv.QuotaResourceKeyInfo"] = ves_io_schema_vesenv.QuotaResourceKeyInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.vesenv.ReEncryptSecretItemType"] = ves_io_schema_vesenv.ReEncryptSecretItemTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.vesenv.ReEncryptSecretsType"] = ves_io_schema_vesenv.ReEncryptSecretsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.vesenv.RouteTargetInfo"] = ves_io_schema_vesenv.RouteTargetInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.vesenv.ServiceInfo"] = ves_io_schema_vesenv.ServiceInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.vesenv.ServiceSlugChoice"] = ves_io_schema_vesenv.ServiceSlugChoiceValidator()
	MDR.ValidatorRegistry["ves.io.schema.vesenv.ServiceSlugInfo"] = ves_io_schema_vesenv.ServiceSlugInfoValidator()

	MDR.ValidatorRegistry["ves.io.schema.vesenv.QuotaResourceKeyChoice"] = ves_io_schema_vesenv.QuotaResourceKeyChoiceValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.AWSVPCOneInterfaceNodeType"] = ves_io_schema_views.AWSVPCOneInterfaceNodeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AWSVPCParamsType"] = ves_io_schema_views.AWSVPCParamsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AWSVPCTwoInterfaceNodeType"] = ves_io_schema_views.AWSVPCTwoInterfaceNodeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AWSVPCchoiceType"] = ves_io_schema_views.AWSVPCchoiceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AllowedVIPPorts"] = ves_io_schema_views.AllowedVIPPortsValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AzureSubnetChoiceType"] = ves_io_schema_views.AzureSubnetChoiceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AzureSubnetType"] = ves_io_schema_views.AzureSubnetTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AzureVnetChoiceType"] = ves_io_schema_views.AzureVnetChoiceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AzureVnetOneInterfaceNodeARType"] = ves_io_schema_views.AzureVnetOneInterfaceNodeARTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AzureVnetOneInterfaceNodeType"] = ves_io_schema_views.AzureVnetOneInterfaceNodeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AzureVnetParamsType"] = ves_io_schema_views.AzureVnetParamsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AzureVnetTwoInterfaceNodeARType"] = ves_io_schema_views.AzureVnetTwoInterfaceNodeARTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AzureVnetTwoInterfaceNodeType"] = ves_io_schema_views.AzureVnetTwoInterfaceNodeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AzureVnetType"] = ves_io_schema_views.AzureVnetTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.CloudSubnetParamType"] = ves_io_schema_views.CloudSubnetParamTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.CloudSubnetType"] = ves_io_schema_views.CloudSubnetTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.CustomPorts"] = ves_io_schema_views.CustomPortsValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.GCPSubnetParamsType"] = ves_io_schema_views.GCPSubnetParamsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.GCPSubnetType"] = ves_io_schema_views.GCPSubnetTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.GCPVPCNetworkAutogenerateParamsType"] = ves_io_schema_views.GCPVPCNetworkAutogenerateParamsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.GCPVPCNetworkChoiceType"] = ves_io_schema_views.GCPVPCNetworkChoiceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.GCPVPCNetworkParamsType"] = ves_io_schema_views.GCPVPCNetworkParamsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.GCPVPCNetworkType"] = ves_io_schema_views.GCPVPCNetworkTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.GCPVPCSubnetChoiceType"] = ves_io_schema_views.GCPVPCSubnetChoiceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.GlobalNetworkConnectionListType"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.GlobalNetworkConnectionType"] = ves_io_schema_views.GlobalNetworkConnectionTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.SiteStaticRoutesListType"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.SiteStaticRoutesType"] = ves_io_schema_views.SiteStaticRoutesTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.StorageClassListType"] = ves_io_schema_views.StorageClassListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.StorageClassOpenebsEnterpriseType"] = ves_io_schema_views.StorageClassOpenebsEnterpriseTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.StorageClassType"] = ves_io_schema_views.StorageClassTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.AdvertiseCustom"] = ves_io_schema_views.AdvertiseCustomValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AdvertisePublic"] = ves_io_schema_views.AdvertisePublicValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.AdvertiseSiteVsite"] = ves_io_schema_views.AdvertiseSiteVsiteValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.CustomCiphers"] = ves_io_schema_views.CustomCiphersValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.GlobalConnectorType"] = ves_io_schema_views.GlobalConnectorTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.ObjectRefType"] = ves_io_schema_views.ObjectRefTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.OperatingSystemType"] = ves_io_schema_views.OperatingSystemTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.OriginPoolWithWeight"] = ves_io_schema_views.OriginPoolWithWeightValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.PrefixStringListType"] = ves_io_schema_views.PrefixStringListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.SiteLocator"] = ves_io_schema_views.SiteLocatorValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.TlsConfig"] = ves_io_schema_views.TlsConfigValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.VolterraSoftwareType"] = ves_io_schema_views.VolterraSoftwareTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.WhereSite"] = ves_io_schema_views.WhereSiteValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.WhereType"] = ves_io_schema_views.WhereTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.WhereTypeSiteVsite"] = ves_io_schema_views.WhereTypeSiteVsiteValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.WhereVK8SService"] = ves_io_schema_views.WhereVK8SServiceValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.WhereVirtualNetwork"] = ves_io_schema_views.WhereVirtualNetworkValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.WhereVirtualSite"] = ves_io_schema_views.WhereVirtualSiteValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.SpecType"] = ves_io_schema_views_aws_tgw_site.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.CreateRequest"] = ves_io_schema_views_aws_tgw_site.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.CreateResponse"] = ves_io_schema_views_aws_tgw_site.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.DeleteRequest"] = ves_io_schema_views_aws_tgw_site.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.GetRequest"] = ves_io_schema_views_aws_tgw_site.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.GetResponse"] = ves_io_schema_views_aws_tgw_site.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.ListRequest"] = ves_io_schema_views_aws_tgw_site.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.ListResponse"] = ves_io_schema_views_aws_tgw_site.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.ListResponseItem"] = ves_io_schema_views_aws_tgw_site.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.ReplaceRequest"] = ves_io_schema_views_aws_tgw_site.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.ReplaceResponse"] = ves_io_schema_views_aws_tgw_site.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.SetTGWInfoRequest"] = ves_io_schema_views_aws_tgw_site.SetTGWInfoRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.SetTGWInfoResponse"] = ves_io_schema_views_aws_tgw_site.SetTGWInfoResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.SetVIPInfoRequest"] = ves_io_schema_views_aws_tgw_site.SetVIPInfoRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.SetVIPInfoResponse"] = ves_io_schema_views_aws_tgw_site.SetVIPInfoResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.SetVPCIpPrefixesRequest"] = ves_io_schema_views_aws_tgw_site.SetVPCIpPrefixesRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.SetVPCIpPrefixesResponse"] = ves_io_schema_views_aws_tgw_site.SetVPCIpPrefixesResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.SetVPNTunnelsRequest"] = ves_io_schema_views_aws_tgw_site.SetVPNTunnelsRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.SetVPNTunnelsResponse"] = ves_io_schema_views_aws_tgw_site.SetVPNTunnelsResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.AWSTGWInfoConfigType"] = ves_io_schema_views_aws_tgw_site.AWSTGWInfoConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.AWSVPNTunnelConfigType"] = ves_io_schema_views_aws_tgw_site.AWSVPNTunnelConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.ActiveServicePoliciesType"] = ves_io_schema_views_aws_tgw_site.ActiveServicePoliciesTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.CreateSpecType"] = ves_io_schema_views_aws_tgw_site.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.ExistingTGWType"] = ves_io_schema_views_aws_tgw_site.ExistingTGWTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.GetSpecType"] = ves_io_schema_views_aws_tgw_site.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.GlobalSpecType"] = ves_io_schema_views_aws_tgw_site.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.ReplaceSpecType"] = ves_io_schema_views_aws_tgw_site.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.SecurityConfigType"] = ves_io_schema_views_aws_tgw_site.SecurityConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.ServicesVPCType"] = ves_io_schema_views_aws_tgw_site.ServicesVPCTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.TGWAssignedASNType"] = ves_io_schema_views_aws_tgw_site.TGWAssignedASNTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.TGWParamsType"] = ves_io_schema_views_aws_tgw_site.TGWParamsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.VPCAttachmentListType"] = ves_io_schema_views_aws_tgw_site.VPCAttachmentListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.VPCAttachmentType"] = ves_io_schema_views_aws_tgw_site.VPCAttachmentTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.VPCIpPrefixesType"] = ves_io_schema_views_aws_tgw_site.VPCIpPrefixesTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.VnConfiguration"] = ves_io_schema_views_aws_tgw_site.VnConfigurationValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.crudapi.ObjectCreateReq"] = ves_io_schema_views_aws_tgw_site_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.crudapi.ObjectCreateRsp"] = ves_io_schema_views_aws_tgw_site_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.crudapi.ObjectDeleteReq"] = ves_io_schema_views_aws_tgw_site_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.crudapi.ObjectDeleteRsp"] = ves_io_schema_views_aws_tgw_site_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.crudapi.ObjectGetReq"] = ves_io_schema_views_aws_tgw_site_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.crudapi.ObjectGetRsp"] = ves_io_schema_views_aws_tgw_site_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.crudapi.ObjectListReq"] = ves_io_schema_views_aws_tgw_site_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.crudapi.ObjectListRsp"] = ves_io_schema_views_aws_tgw_site_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.crudapi.ObjectListRspItem"] = ves_io_schema_views_aws_tgw_site_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.crudapi.ObjectReplaceReq"] = ves_io_schema_views_aws_tgw_site_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.crudapi.ObjectReplaceRsp"] = ves_io_schema_views_aws_tgw_site_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.SpecType"] = ves_io_schema_views_aws_vpc_site.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.CreateRequest"] = ves_io_schema_views_aws_vpc_site.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.CreateResponse"] = ves_io_schema_views_aws_vpc_site.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.DeleteRequest"] = ves_io_schema_views_aws_vpc_site.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.GetRequest"] = ves_io_schema_views_aws_vpc_site.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.GetResponse"] = ves_io_schema_views_aws_vpc_site.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.ListRequest"] = ves_io_schema_views_aws_vpc_site.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.ListResponse"] = ves_io_schema_views_aws_vpc_site.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.ListResponseItem"] = ves_io_schema_views_aws_vpc_site.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.ReplaceRequest"] = ves_io_schema_views_aws_vpc_site.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.ReplaceResponse"] = ves_io_schema_views_aws_vpc_site.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.SetVIPInfoRequest"] = ves_io_schema_views_aws_vpc_site.SetVIPInfoRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.SetVIPInfoResponse"] = ves_io_schema_views_aws_vpc_site.SetVIPInfoResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.SetVPCK8SHostnamesRequest"] = ves_io_schema_views_aws_vpc_site.SetVPCK8SHostnamesRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.SetVPCK8SHostnamesResponse"] = ves_io_schema_views_aws_vpc_site.SetVPCK8SHostnamesResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.AWSVPCIngressEgressGwReplaceType"] = ves_io_schema_views_aws_vpc_site.AWSVPCIngressEgressGwReplaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.AWSVPCIngressEgressGwType"] = ves_io_schema_views_aws_vpc_site.AWSVPCIngressEgressGwTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.AWSVPCIngressGwReplaceType"] = ves_io_schema_views_aws_vpc_site.AWSVPCIngressGwReplaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.AWSVPCIngressGwType"] = ves_io_schema_views_aws_vpc_site.AWSVPCIngressGwTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.AWSVPCVoltstackClusterReplaceType"] = ves_io_schema_views_aws_vpc_site.AWSVPCVoltstackClusterReplaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.AWSVPCVoltstackClusterType"] = ves_io_schema_views_aws_vpc_site.AWSVPCVoltstackClusterTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.CreateSpecType"] = ves_io_schema_views_aws_vpc_site.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.GetSpecType"] = ves_io_schema_views_aws_vpc_site.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.GlobalSpecType"] = ves_io_schema_views_aws_vpc_site.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.ReplaceSpecType"] = ves_io_schema_views_aws_vpc_site.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.crudapi.ObjectCreateReq"] = ves_io_schema_views_aws_vpc_site_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.crudapi.ObjectCreateRsp"] = ves_io_schema_views_aws_vpc_site_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.crudapi.ObjectDeleteReq"] = ves_io_schema_views_aws_vpc_site_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.crudapi.ObjectDeleteRsp"] = ves_io_schema_views_aws_vpc_site_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.crudapi.ObjectGetReq"] = ves_io_schema_views_aws_vpc_site_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.crudapi.ObjectGetRsp"] = ves_io_schema_views_aws_vpc_site_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.crudapi.ObjectListReq"] = ves_io_schema_views_aws_vpc_site_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.crudapi.ObjectListRsp"] = ves_io_schema_views_aws_vpc_site_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.crudapi.ObjectListRspItem"] = ves_io_schema_views_aws_vpc_site_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.crudapi.ObjectReplaceReq"] = ves_io_schema_views_aws_vpc_site_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.crudapi.ObjectReplaceRsp"] = ves_io_schema_views_aws_vpc_site_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.SpecType"] = ves_io_schema_views_azure_vnet_site.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.CreateRequest"] = ves_io_schema_views_azure_vnet_site.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.CreateResponse"] = ves_io_schema_views_azure_vnet_site.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.DeleteRequest"] = ves_io_schema_views_azure_vnet_site.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.GetRequest"] = ves_io_schema_views_azure_vnet_site.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.GetResponse"] = ves_io_schema_views_azure_vnet_site.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.ListRequest"] = ves_io_schema_views_azure_vnet_site.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.ListResponse"] = ves_io_schema_views_azure_vnet_site.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.ListResponseItem"] = ves_io_schema_views_azure_vnet_site.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.ReplaceRequest"] = ves_io_schema_views_azure_vnet_site.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.ReplaceResponse"] = ves_io_schema_views_azure_vnet_site.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.SetVIPInfoRequest"] = ves_io_schema_views_azure_vnet_site.SetVIPInfoRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.SetVIPInfoResponse"] = ves_io_schema_views_azure_vnet_site.SetVIPInfoResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwARReplaceType"] = ves_io_schema_views_azure_vnet_site.AzureVnetIngressEgressGwARReplaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwARType"] = ves_io_schema_views_azure_vnet_site.AzureVnetIngressEgressGwARTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwReplaceType"] = ves_io_schema_views_azure_vnet_site.AzureVnetIngressEgressGwReplaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwType"] = ves_io_schema_views_azure_vnet_site.AzureVnetIngressEgressGwTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwARReplaceType"] = ves_io_schema_views_azure_vnet_site.AzureVnetIngressGwARReplaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwARType"] = ves_io_schema_views_azure_vnet_site.AzureVnetIngressGwARTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwReplaceType"] = ves_io_schema_views_azure_vnet_site.AzureVnetIngressGwReplaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwType"] = ves_io_schema_views_azure_vnet_site.AzureVnetIngressGwTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterARReplaceType"] = ves_io_schema_views_azure_vnet_site.AzureVnetVoltstackClusterARReplaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterARType"] = ves_io_schema_views_azure_vnet_site.AzureVnetVoltstackClusterARTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterReplaceType"] = ves_io_schema_views_azure_vnet_site.AzureVnetVoltstackClusterReplaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterType"] = ves_io_schema_views_azure_vnet_site.AzureVnetVoltstackClusterTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.CreateSpecType"] = ves_io_schema_views_azure_vnet_site.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.GetSpecType"] = ves_io_schema_views_azure_vnet_site.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.GlobalSpecType"] = ves_io_schema_views_azure_vnet_site.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.ReplaceSpecType"] = ves_io_schema_views_azure_vnet_site.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.crudapi.ObjectCreateReq"] = ves_io_schema_views_azure_vnet_site_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.crudapi.ObjectCreateRsp"] = ves_io_schema_views_azure_vnet_site_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.crudapi.ObjectDeleteReq"] = ves_io_schema_views_azure_vnet_site_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.crudapi.ObjectDeleteRsp"] = ves_io_schema_views_azure_vnet_site_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.crudapi.ObjectGetReq"] = ves_io_schema_views_azure_vnet_site_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.crudapi.ObjectGetRsp"] = ves_io_schema_views_azure_vnet_site_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.crudapi.ObjectListReq"] = ves_io_schema_views_azure_vnet_site_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.crudapi.ObjectListRsp"] = ves_io_schema_views_azure_vnet_site_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.crudapi.ObjectListRspItem"] = ves_io_schema_views_azure_vnet_site_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.crudapi.ObjectReplaceReq"] = ves_io_schema_views_azure_vnet_site_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.crudapi.ObjectReplaceRsp"] = ves_io_schema_views_azure_vnet_site_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.SpecType"] = ves_io_schema_views_forward_proxy_policy.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.CreateRequest"] = ves_io_schema_views_forward_proxy_policy.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.CreateResponse"] = ves_io_schema_views_forward_proxy_policy.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.DeleteRequest"] = ves_io_schema_views_forward_proxy_policy.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.GetRequest"] = ves_io_schema_views_forward_proxy_policy.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.GetResponse"] = ves_io_schema_views_forward_proxy_policy.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.ListRequest"] = ves_io_schema_views_forward_proxy_policy.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.ListResponse"] = ves_io_schema_views_forward_proxy_policy.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.ListResponseItem"] = ves_io_schema_views_forward_proxy_policy.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.ReplaceRequest"] = ves_io_schema_views_forward_proxy_policy.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.ReplaceResponse"] = ves_io_schema_views_forward_proxy_policy.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.ForwardProxyPolicyHits"] = ves_io_schema_views_forward_proxy_policy.ForwardProxyPolicyHitsValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.ForwardProxyPolicyHitsId"] = ves_io_schema_views_forward_proxy_policy.ForwardProxyPolicyHitsIdValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.ForwardProxyPolicyHitsRequest"] = ves_io_schema_views_forward_proxy_policy.ForwardProxyPolicyHitsRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.ForwardProxyPolicyHitsResponse"] = ves_io_schema_views_forward_proxy_policy.ForwardProxyPolicyHitsResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.ForwardProxyPolicyMetricLabelFilter"] = ves_io_schema_views_forward_proxy_policy.ForwardProxyPolicyMetricLabelFilterValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.CreateSpecType"] = ves_io_schema_views_forward_proxy_policy.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.DomainListType"] = ves_io_schema_views_forward_proxy_policy.DomainListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.ForwardProxyAdvancedRuleType"] = ves_io_schema_views_forward_proxy_policy.ForwardProxyAdvancedRuleTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.ForwardProxyRuleListType"] = ves_io_schema_views_forward_proxy_policy.ForwardProxyRuleListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.ForwardProxySimpleRuleType"] = ves_io_schema_views_forward_proxy_policy.ForwardProxySimpleRuleTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.GetSpecType"] = ves_io_schema_views_forward_proxy_policy.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.GlobalSpecType"] = ves_io_schema_views_forward_proxy_policy.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.ReplaceSpecType"] = ves_io_schema_views_forward_proxy_policy.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.URLListType"] = ves_io_schema_views_forward_proxy_policy.URLListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.URLType"] = ves_io_schema_views_forward_proxy_policy.URLTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectCreateReq"] = ves_io_schema_views_forward_proxy_policy_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectCreateRsp"] = ves_io_schema_views_forward_proxy_policy_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectDeleteReq"] = ves_io_schema_views_forward_proxy_policy_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectDeleteRsp"] = ves_io_schema_views_forward_proxy_policy_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectGetReq"] = ves_io_schema_views_forward_proxy_policy_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectGetRsp"] = ves_io_schema_views_forward_proxy_policy_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectListReq"] = ves_io_schema_views_forward_proxy_policy_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectListRsp"] = ves_io_schema_views_forward_proxy_policy_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectListRspItem"] = ves_io_schema_views_forward_proxy_policy_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectReplaceReq"] = ves_io_schema_views_forward_proxy_policy_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectReplaceRsp"] = ves_io_schema_views_forward_proxy_policy_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.SpecType"] = ves_io_schema_views_gcp_vpc_site.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.CreateRequest"] = ves_io_schema_views_gcp_vpc_site.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.CreateResponse"] = ves_io_schema_views_gcp_vpc_site.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.DeleteRequest"] = ves_io_schema_views_gcp_vpc_site.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.GetRequest"] = ves_io_schema_views_gcp_vpc_site.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.GetResponse"] = ves_io_schema_views_gcp_vpc_site.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.ListRequest"] = ves_io_schema_views_gcp_vpc_site.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.ListResponse"] = ves_io_schema_views_gcp_vpc_site.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.ListResponseItem"] = ves_io_schema_views_gcp_vpc_site.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.ReplaceRequest"] = ves_io_schema_views_gcp_vpc_site.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.ReplaceResponse"] = ves_io_schema_views_gcp_vpc_site.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.CreateSpecType"] = ves_io_schema_views_gcp_vpc_site.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.GCPVPCIngressEgressGwReplaceType"] = ves_io_schema_views_gcp_vpc_site.GCPVPCIngressEgressGwReplaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.GCPVPCIngressEgressGwType"] = ves_io_schema_views_gcp_vpc_site.GCPVPCIngressEgressGwTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.GCPVPCIngressGwReplaceType"] = ves_io_schema_views_gcp_vpc_site.GCPVPCIngressGwReplaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.GCPVPCIngressGwType"] = ves_io_schema_views_gcp_vpc_site.GCPVPCIngressGwTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.GCPVPCVoltstackClusterReplaceType"] = ves_io_schema_views_gcp_vpc_site.GCPVPCVoltstackClusterReplaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.GCPVPCVoltstackClusterType"] = ves_io_schema_views_gcp_vpc_site.GCPVPCVoltstackClusterTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.GetSpecType"] = ves_io_schema_views_gcp_vpc_site.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.GlobalSpecType"] = ves_io_schema_views_gcp_vpc_site.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.ReplaceSpecType"] = ves_io_schema_views_gcp_vpc_site.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectCreateReq"] = ves_io_schema_views_gcp_vpc_site_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectCreateRsp"] = ves_io_schema_views_gcp_vpc_site_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectDeleteReq"] = ves_io_schema_views_gcp_vpc_site_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectDeleteRsp"] = ves_io_schema_views_gcp_vpc_site_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectGetReq"] = ves_io_schema_views_gcp_vpc_site_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectGetRsp"] = ves_io_schema_views_gcp_vpc_site_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectListReq"] = ves_io_schema_views_gcp_vpc_site_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectListRsp"] = ves_io_schema_views_gcp_vpc_site_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectListRspItem"] = ves_io_schema_views_gcp_vpc_site_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectReplaceReq"] = ves_io_schema_views_gcp_vpc_site_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectReplaceRsp"] = ves_io_schema_views_gcp_vpc_site_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.SpecType"] = ves_io_schema_views_http_loadbalancer.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.SwaggerSpecReq"] = ves_io_schema_views_http_loadbalancer.SwaggerSpecReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.SwaggerSpecRsp"] = ves_io_schema_views_http_loadbalancer.SwaggerSpecRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.CreateRequest"] = ves_io_schema_views_http_loadbalancer.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.CreateResponse"] = ves_io_schema_views_http_loadbalancer.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.DeleteRequest"] = ves_io_schema_views_http_loadbalancer.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.GetRequest"] = ves_io_schema_views_http_loadbalancer.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.GetResponse"] = ves_io_schema_views_http_loadbalancer.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.ListRequest"] = ves_io_schema_views_http_loadbalancer.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.ListResponse"] = ves_io_schema_views_http_loadbalancer.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.ListResponseItem"] = ves_io_schema_views_http_loadbalancer.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.ReplaceRequest"] = ves_io_schema_views_http_loadbalancer.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.ReplaceResponse"] = ves_io_schema_views_http_loadbalancer.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.GetDnsInfoRequest"] = ves_io_schema_views_http_loadbalancer.GetDnsInfoRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.GetDnsInfoResponse"] = ves_io_schema_views_http_loadbalancer.GetDnsInfoResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.AdvancedOptionsType"] = ves_io_schema_views_http_loadbalancer.AdvancedOptionsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.ChallengeRule"] = ves_io_schema_views_http_loadbalancer.ChallengeRuleValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.ChallengeRuleList"] = ves_io_schema_views_http_loadbalancer.ChallengeRuleListValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.CreateSpecType"] = ves_io_schema_views_http_loadbalancer.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.CustomIpAllowedList"] = ves_io_schema_views_http_loadbalancer.CustomIpAllowedListValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.DDoSClientSource"] = ves_io_schema_views_http_loadbalancer.DDoSClientSourceValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.DDoSMitigationRule"] = ves_io_schema_views_http_loadbalancer.DDoSMitigationRuleValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.DownstreamTlsParamsType"] = ves_io_schema_views_http_loadbalancer.DownstreamTlsParamsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.DownstreamTlsValidationContext"] = ves_io_schema_views_http_loadbalancer.DownstreamTlsValidationContextValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.GetSpecType"] = ves_io_schema_views_http_loadbalancer.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.GlobalSpecType"] = ves_io_schema_views_http_loadbalancer.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.HashPolicyListType"] = ves_io_schema_views_http_loadbalancer.HashPolicyListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.MirrorPolicyType"] = ves_io_schema_views_http_loadbalancer.MirrorPolicyTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.PolicyBasedChallenge"] = ves_io_schema_views_http_loadbalancer.PolicyBasedChallengeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.ProxyTypeHttp"] = ves_io_schema_views_http_loadbalancer.ProxyTypeHttpValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.ProxyTypeHttps"] = ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.ProxyTypeHttpsAutoCerts"] = ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCertsValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.RateLimitConfigType"] = ves_io_schema_views_http_loadbalancer.RateLimitConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.ReplaceSpecType"] = ves_io_schema_views_http_loadbalancer.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.RouteSimpleAdvancedOptions"] = ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptionsValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.RouteType"] = ves_io_schema_views_http_loadbalancer.RouteTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.RouteTypeCustomRoute"] = ves_io_schema_views_http_loadbalancer.RouteTypeCustomRouteValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.RouteTypeDirectResponse"] = ves_io_schema_views_http_loadbalancer.RouteTypeDirectResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.RouteTypeRedirect"] = ves_io_schema_views_http_loadbalancer.RouteTypeRedirectValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.RouteTypeSimple"] = ves_io_schema_views_http_loadbalancer.RouteTypeSimpleValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool"] = ves_io_schema_views_http_loadbalancer.RouteTypeSimpleWithDefaultOriginPoolValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.ServicePolicyList"] = ves_io_schema_views_http_loadbalancer.ServicePolicyListValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.SimpleClientSrcRule"] = ves_io_schema_views_http_loadbalancer.SimpleClientSrcRuleValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.crudapi.ObjectCreateReq"] = ves_io_schema_views_http_loadbalancer_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.crudapi.ObjectCreateRsp"] = ves_io_schema_views_http_loadbalancer_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.crudapi.ObjectDeleteReq"] = ves_io_schema_views_http_loadbalancer_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.crudapi.ObjectDeleteRsp"] = ves_io_schema_views_http_loadbalancer_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.crudapi.ObjectGetReq"] = ves_io_schema_views_http_loadbalancer_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.crudapi.ObjectGetRsp"] = ves_io_schema_views_http_loadbalancer_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.crudapi.ObjectListReq"] = ves_io_schema_views_http_loadbalancer_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.crudapi.ObjectListRsp"] = ves_io_schema_views_http_loadbalancer_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.crudapi.ObjectListRspItem"] = ves_io_schema_views_http_loadbalancer_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.crudapi.ObjectReplaceReq"] = ves_io_schema_views_http_loadbalancer_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.crudapi.ObjectReplaceRsp"] = ves_io_schema_views_http_loadbalancer_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.SpecType"] = ves_io_schema_views_network_policy_view.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.CreateRequest"] = ves_io_schema_views_network_policy_view.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.CreateResponse"] = ves_io_schema_views_network_policy_view.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.DeleteRequest"] = ves_io_schema_views_network_policy_view.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.GetRequest"] = ves_io_schema_views_network_policy_view.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.GetResponse"] = ves_io_schema_views_network_policy_view.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.ListRequest"] = ves_io_schema_views_network_policy_view.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.ListResponse"] = ves_io_schema_views_network_policy_view.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.ListResponseItem"] = ves_io_schema_views_network_policy_view.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.ReplaceRequest"] = ves_io_schema_views_network_policy_view.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.ReplaceResponse"] = ves_io_schema_views_network_policy_view.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.NetworkPolicyHits"] = ves_io_schema_views_network_policy_view.NetworkPolicyHitsValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.NetworkPolicyHitsId"] = ves_io_schema_views_network_policy_view.NetworkPolicyHitsIdValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.NetworkPolicyHitsRequest"] = ves_io_schema_views_network_policy_view.NetworkPolicyHitsRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.NetworkPolicyHitsResponse"] = ves_io_schema_views_network_policy_view.NetworkPolicyHitsResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.NetworkPolicyMetricLabelFilter"] = ves_io_schema_views_network_policy_view.NetworkPolicyMetricLabelFilterValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.CreateSpecType"] = ves_io_schema_views_network_policy_view.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.GetSpecType"] = ves_io_schema_views_network_policy_view.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.GlobalSpecType"] = ves_io_schema_views_network_policy_view.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.ReplaceSpecType"] = ves_io_schema_views_network_policy_view.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.crudapi.ObjectCreateReq"] = ves_io_schema_views_network_policy_view_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.crudapi.ObjectCreateRsp"] = ves_io_schema_views_network_policy_view_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.crudapi.ObjectDeleteReq"] = ves_io_schema_views_network_policy_view_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.crudapi.ObjectDeleteRsp"] = ves_io_schema_views_network_policy_view_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.crudapi.ObjectGetReq"] = ves_io_schema_views_network_policy_view_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.crudapi.ObjectGetRsp"] = ves_io_schema_views_network_policy_view_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.crudapi.ObjectListReq"] = ves_io_schema_views_network_policy_view_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.crudapi.ObjectListRsp"] = ves_io_schema_views_network_policy_view_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.crudapi.ObjectListRspItem"] = ves_io_schema_views_network_policy_view_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.crudapi.ObjectReplaceReq"] = ves_io_schema_views_network_policy_view_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.crudapi.ObjectReplaceRsp"] = ves_io_schema_views_network_policy_view_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.SpecType"] = ves_io_schema_views_origin_pool.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.CreateRequest"] = ves_io_schema_views_origin_pool.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.CreateResponse"] = ves_io_schema_views_origin_pool.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.DeleteRequest"] = ves_io_schema_views_origin_pool.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.GetRequest"] = ves_io_schema_views_origin_pool.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.GetResponse"] = ves_io_schema_views_origin_pool.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.ListRequest"] = ves_io_schema_views_origin_pool.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.ListResponse"] = ves_io_schema_views_origin_pool.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.ListResponseItem"] = ves_io_schema_views_origin_pool.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.ReplaceRequest"] = ves_io_schema_views_origin_pool.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.ReplaceResponse"] = ves_io_schema_views_origin_pool.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.CreateSpecType"] = ves_io_schema_views_origin_pool.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.GetSpecType"] = ves_io_schema_views_origin_pool.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.GlobalSpecType"] = ves_io_schema_views_origin_pool.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.OriginPoolAdvancedOptions"] = ves_io_schema_views_origin_pool.OriginPoolAdvancedOptionsValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.OriginPoolDefaultSubset"] = ves_io_schema_views_origin_pool.OriginPoolDefaultSubsetValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.OriginPoolSubsets"] = ves_io_schema_views_origin_pool.OriginPoolSubsetsValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.OriginServerConsulService"] = ves_io_schema_views_origin_pool.OriginServerConsulServiceValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.OriginServerCustomEndpoint"] = ves_io_schema_views_origin_pool.OriginServerCustomEndpointValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.OriginServerK8SService"] = ves_io_schema_views_origin_pool.OriginServerK8SServiceValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.OriginServerPrivateIP"] = ves_io_schema_views_origin_pool.OriginServerPrivateIPValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.OriginServerPrivateName"] = ves_io_schema_views_origin_pool.OriginServerPrivateNameValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.OriginServerPublicIP"] = ves_io_schema_views_origin_pool.OriginServerPublicIPValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.OriginServerPublicName"] = ves_io_schema_views_origin_pool.OriginServerPublicNameValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.OriginServerType"] = ves_io_schema_views_origin_pool.OriginServerTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.OriginServerVirtualNetworkIP"] = ves_io_schema_views_origin_pool.OriginServerVirtualNetworkIPValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.OriginServerVirtualNetworkName"] = ves_io_schema_views_origin_pool.OriginServerVirtualNetworkNameValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.ReplaceSpecType"] = ves_io_schema_views_origin_pool.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.TlsCertificatesType"] = ves_io_schema_views_origin_pool.TlsCertificatesTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.UpstreamTlsParameters"] = ves_io_schema_views_origin_pool.UpstreamTlsParametersValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.UpstreamTlsValidationContext"] = ves_io_schema_views_origin_pool.UpstreamTlsValidationContextValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.crudapi.ObjectCreateReq"] = ves_io_schema_views_origin_pool_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.crudapi.ObjectCreateRsp"] = ves_io_schema_views_origin_pool_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.crudapi.ObjectDeleteReq"] = ves_io_schema_views_origin_pool_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.crudapi.ObjectDeleteRsp"] = ves_io_schema_views_origin_pool_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.crudapi.ObjectGetReq"] = ves_io_schema_views_origin_pool_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.crudapi.ObjectGetRsp"] = ves_io_schema_views_origin_pool_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.crudapi.ObjectListReq"] = ves_io_schema_views_origin_pool_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.crudapi.ObjectListRsp"] = ves_io_schema_views_origin_pool_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.crudapi.ObjectListRspItem"] = ves_io_schema_views_origin_pool_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.crudapi.ObjectReplaceReq"] = ves_io_schema_views_origin_pool_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.crudapi.ObjectReplaceRsp"] = ves_io_schema_views_origin_pool_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.SpecType"] = ves_io_schema_views_rate_limiter_policy.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.CreateRequest"] = ves_io_schema_views_rate_limiter_policy.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.CreateResponse"] = ves_io_schema_views_rate_limiter_policy.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.DeleteRequest"] = ves_io_schema_views_rate_limiter_policy.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.GetRequest"] = ves_io_schema_views_rate_limiter_policy.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.GetResponse"] = ves_io_schema_views_rate_limiter_policy.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.ListRequest"] = ves_io_schema_views_rate_limiter_policy.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.ListResponse"] = ves_io_schema_views_rate_limiter_policy.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.ListResponseItem"] = ves_io_schema_views_rate_limiter_policy.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.ReplaceRequest"] = ves_io_schema_views_rate_limiter_policy.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.ReplaceResponse"] = ves_io_schema_views_rate_limiter_policy.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.CreateSpecType"] = ves_io_schema_views_rate_limiter_policy.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.GetSpecType"] = ves_io_schema_views_rate_limiter_policy.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.GlobalSpecType"] = ves_io_schema_views_rate_limiter_policy.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.PolicyList"] = ves_io_schema_views_rate_limiter_policy.PolicyListValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.RateLimiterRule"] = ves_io_schema_views_rate_limiter_policy.RateLimiterRuleValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.ReplaceSpecType"] = ves_io_schema_views_rate_limiter_policy.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectCreateReq"] = ves_io_schema_views_rate_limiter_policy_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectCreateRsp"] = ves_io_schema_views_rate_limiter_policy_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectDeleteReq"] = ves_io_schema_views_rate_limiter_policy_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectDeleteRsp"] = ves_io_schema_views_rate_limiter_policy_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectGetReq"] = ves_io_schema_views_rate_limiter_policy_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectGetRsp"] = ves_io_schema_views_rate_limiter_policy_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectListReq"] = ves_io_schema_views_rate_limiter_policy_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectListRsp"] = ves_io_schema_views_rate_limiter_policy_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectListRspItem"] = ves_io_schema_views_rate_limiter_policy_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectReplaceReq"] = ves_io_schema_views_rate_limiter_policy_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectReplaceRsp"] = ves_io_schema_views_rate_limiter_policy_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.SpecType"] = ves_io_schema_views_tcp_loadbalancer.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.CreateRequest"] = ves_io_schema_views_tcp_loadbalancer.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.CreateResponse"] = ves_io_schema_views_tcp_loadbalancer.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.DeleteRequest"] = ves_io_schema_views_tcp_loadbalancer.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.GetRequest"] = ves_io_schema_views_tcp_loadbalancer.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.GetResponse"] = ves_io_schema_views_tcp_loadbalancer.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.ListRequest"] = ves_io_schema_views_tcp_loadbalancer.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.ListResponse"] = ves_io_schema_views_tcp_loadbalancer.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.ListResponseItem"] = ves_io_schema_views_tcp_loadbalancer.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.ReplaceRequest"] = ves_io_schema_views_tcp_loadbalancer.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.ReplaceResponse"] = ves_io_schema_views_tcp_loadbalancer.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.GetDnsInfoRequest"] = ves_io_schema_views_tcp_loadbalancer.GetDnsInfoRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.GetDnsInfoResponse"] = ves_io_schema_views_tcp_loadbalancer.GetDnsInfoResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.CreateSpecType"] = ves_io_schema_views_tcp_loadbalancer.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.GetSpecType"] = ves_io_schema_views_tcp_loadbalancer.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.GlobalSpecType"] = ves_io_schema_views_tcp_loadbalancer.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.ReplaceSpecType"] = ves_io_schema_views_tcp_loadbalancer.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectCreateReq"] = ves_io_schema_views_tcp_loadbalancer_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectCreateRsp"] = ves_io_schema_views_tcp_loadbalancer_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectDeleteReq"] = ves_io_schema_views_tcp_loadbalancer_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectDeleteRsp"] = ves_io_schema_views_tcp_loadbalancer_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectGetReq"] = ves_io_schema_views_tcp_loadbalancer_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectGetRsp"] = ves_io_schema_views_tcp_loadbalancer_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectListReq"] = ves_io_schema_views_tcp_loadbalancer_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectListRsp"] = ves_io_schema_views_tcp_loadbalancer_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectListRspItem"] = ves_io_schema_views_tcp_loadbalancer_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectReplaceReq"] = ves_io_schema_views_tcp_loadbalancer_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectReplaceRsp"] = ves_io_schema_views_tcp_loadbalancer_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AWSInstanceType"] = ves_io_schema_views_terraform_parameters.AWSInstanceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AWSTGWInfoType"] = ves_io_schema_views_terraform_parameters.AWSTGWInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AWSTGWTunnelInfoType"] = ves_io_schema_views_terraform_parameters.AWSTGWTunnelInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AWSTGWType"] = ves_io_schema_views_terraform_parameters.AWSTGWTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AWSVPCInfoType"] = ves_io_schema_views_terraform_parameters.AWSVPCInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AWSVPCType"] = ves_io_schema_views_terraform_parameters.AWSVPCTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.CloudSubnetType"] = ves_io_schema_views_terraform_parameters.CloudSubnetTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.SubnetType"] = ves_io_schema_views_terraform_parameters.SubnetTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AvailabilitySetsInfoType"] = ves_io_schema_views_terraform_parameters.AvailabilitySetsInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AzureExistingSubnetParamType"] = ves_io_schema_views_terraform_parameters.AzureExistingSubnetParamTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AzureInstanceType"] = ves_io_schema_views_terraform_parameters.AzureInstanceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AzureSubnetChoice"] = ves_io_schema_views_terraform_parameters.AzureSubnetChoiceValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AzureSubnetParamType"] = ves_io_schema_views_terraform_parameters.AzureSubnetParamTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AzureSubnetType"] = ves_io_schema_views_terraform_parameters.AzureSubnetTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AzureVnetInfoType"] = ves_io_schema_views_terraform_parameters.AzureVnetInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AzureVnetParamsType"] = ves_io_schema_views_terraform_parameters.AzureVnetParamsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.AzureVnetSiteType"] = ves_io_schema_views_terraform_parameters.AzureVnetSiteTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.GCPInstanceType"] = ves_io_schema_views_terraform_parameters.GCPInstanceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.GCPSubnetChoice"] = ves_io_schema_views_terraform_parameters.GCPSubnetChoiceValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.GCPSubnetParamType"] = ves_io_schema_views_terraform_parameters.GCPSubnetParamTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.GCPVPCNetworkChoice"] = ves_io_schema_views_terraform_parameters.GCPVPCNetworkChoiceValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.GCPVpcSiteType"] = ves_io_schema_views_terraform_parameters.GCPVpcSiteTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.SpecType"] = ves_io_schema_views_terraform_parameters.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.ForceDeleteRequest"] = ves_io_schema_views_terraform_parameters.ForceDeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.ForceDeleteResponse"] = ves_io_schema_views_terraform_parameters.ForceDeleteResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.GetRequest"] = ves_io_schema_views_terraform_parameters.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.GetResponse"] = ves_io_schema_views_terraform_parameters.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.GetStatusResponse"] = ves_io_schema_views_terraform_parameters.GetStatusResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.RunRequest"] = ves_io_schema_views_terraform_parameters.RunRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.RunResponse"] = ves_io_schema_views_terraform_parameters.RunResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.ApplyStatus"] = ves_io_schema_views_terraform_parameters.ApplyStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.GlobalSpecType"] = ves_io_schema_views_terraform_parameters.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.PlanStatus"] = ves_io_schema_views_terraform_parameters.PlanStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.VIPPortConfig"] = ves_io_schema_views_terraform_parameters.VIPPortConfigValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.crudapi.ObjectCreateReq"] = ves_io_schema_views_terraform_parameters_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.crudapi.ObjectCreateRsp"] = ves_io_schema_views_terraform_parameters_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.crudapi.ObjectDeleteReq"] = ves_io_schema_views_terraform_parameters_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.crudapi.ObjectDeleteRsp"] = ves_io_schema_views_terraform_parameters_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.crudapi.ObjectGetReq"] = ves_io_schema_views_terraform_parameters_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.crudapi.ObjectGetRsp"] = ves_io_schema_views_terraform_parameters_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.crudapi.ObjectListReq"] = ves_io_schema_views_terraform_parameters_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.crudapi.ObjectListRsp"] = ves_io_schema_views_terraform_parameters_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.crudapi.ObjectListRspItem"] = ves_io_schema_views_terraform_parameters_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.crudapi.ObjectReplaceReq"] = ves_io_schema_views_terraform_parameters_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.crudapi.ObjectReplaceRsp"] = ves_io_schema_views_terraform_parameters_crudapi.ObjectReplaceRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.crudapi.StatusObjectListReq"] = ves_io_schema_views_terraform_parameters_crudapi.StatusObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.crudapi.StatusObjectListRsp"] = ves_io_schema_views_terraform_parameters_crudapi.StatusObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.crudapi.StatusObjectListRspItem"] = ves_io_schema_views_terraform_parameters_crudapi.StatusObjectListRspItemValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.SpecType"] = ves_io_schema_views_voltstack_site.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.CreateRequest"] = ves_io_schema_views_voltstack_site.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.CreateResponse"] = ves_io_schema_views_voltstack_site.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.DeleteRequest"] = ves_io_schema_views_voltstack_site.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.GetRequest"] = ves_io_schema_views_voltstack_site.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.GetResponse"] = ves_io_schema_views_voltstack_site.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.ListRequest"] = ves_io_schema_views_voltstack_site.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.ListResponse"] = ves_io_schema_views_voltstack_site.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.ListResponseItem"] = ves_io_schema_views_voltstack_site.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.ReplaceRequest"] = ves_io_schema_views_voltstack_site.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.ReplaceResponse"] = ves_io_schema_views_voltstack_site.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.CreateSpecType"] = ves_io_schema_views_voltstack_site.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.GetSpecType"] = ves_io_schema_views_voltstack_site.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.GlobalNetworkConnectionListType"] = ves_io_schema_views_voltstack_site.GlobalNetworkConnectionListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.GlobalNetworkConnectionType"] = ves_io_schema_views_voltstack_site.GlobalNetworkConnectionTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.GlobalSpecType"] = ves_io_schema_views_voltstack_site.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.Interface"] = ves_io_schema_views_voltstack_site.InterfaceValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.InterfaceListType"] = ves_io_schema_views_voltstack_site.InterfaceListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.ReplaceSpecType"] = ves_io_schema_views_voltstack_site.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.SliVnConfiguration"] = ves_io_schema_views_voltstack_site.SliVnConfigurationValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.StaticRoutesListType"] = ves_io_schema_views_voltstack_site.StaticRoutesListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.StorageInterfaceListType"] = ves_io_schema_views_voltstack_site.StorageInterfaceListTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.StorageInterfaceType"] = ves_io_schema_views_voltstack_site.StorageInterfaceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.VnConfiguration"] = ves_io_schema_views_voltstack_site.VnConfigurationValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.VssNetworkConfiguration"] = ves_io_schema_views_voltstack_site.VssNetworkConfigurationValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.VssStorageConfiguration"] = ves_io_schema_views_voltstack_site.VssStorageConfigurationValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.crudapi.ObjectCreateReq"] = ves_io_schema_views_voltstack_site_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.crudapi.ObjectCreateRsp"] = ves_io_schema_views_voltstack_site_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.crudapi.ObjectDeleteReq"] = ves_io_schema_views_voltstack_site_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.crudapi.ObjectDeleteRsp"] = ves_io_schema_views_voltstack_site_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.crudapi.ObjectGetReq"] = ves_io_schema_views_voltstack_site_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.crudapi.ObjectGetRsp"] = ves_io_schema_views_voltstack_site_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.crudapi.ObjectListReq"] = ves_io_schema_views_voltstack_site_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.crudapi.ObjectListRsp"] = ves_io_schema_views_voltstack_site_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.crudapi.ObjectListRspItem"] = ves_io_schema_views_voltstack_site_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.crudapi.ObjectReplaceReq"] = ves_io_schema_views_voltstack_site_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.crudapi.ObjectReplaceRsp"] = ves_io_schema_views_voltstack_site_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.workload.SpecType"] = ves_io_schema_views_workload.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.workload.CreateRequest"] = ves_io_schema_views_workload.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.CreateResponse"] = ves_io_schema_views_workload.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.DeleteRequest"] = ves_io_schema_views_workload.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.GetRequest"] = ves_io_schema_views_workload.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.GetResponse"] = ves_io_schema_views_workload.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.ListRequest"] = ves_io_schema_views_workload.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.ListResponse"] = ves_io_schema_views_workload.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.ListResponseItem"] = ves_io_schema_views_workload.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.ReplaceRequest"] = ves_io_schema_views_workload.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.ReplaceResponse"] = ves_io_schema_views_workload.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.workload.UsageData"] = ves_io_schema_views_workload.UsageDataValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.UsageRequest"] = ves_io_schema_views_workload.UsageRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.UsageResponse"] = ves_io_schema_views_workload.UsageResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.UsageTypeData"] = ves_io_schema_views_workload.UsageTypeDataValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.workload.AdvertiseCustomType"] = ves_io_schema_views_workload.AdvertiseCustomTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.AdvertiseInClusterType"] = ves_io_schema_views_workload.AdvertiseInClusterTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.AdvertiseMultiPortType"] = ves_io_schema_views_workload.AdvertiseMultiPortTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.AdvertiseOptionsType"] = ves_io_schema_views_workload.AdvertiseOptionsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.AdvertisePortType"] = ves_io_schema_views_workload.AdvertisePortTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.AdvertisePublicType"] = ves_io_schema_views_workload.AdvertisePublicTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.AdvertiseSimpleServiceType"] = ves_io_schema_views_workload.AdvertiseSimpleServiceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.AdvertiseSinglePortType"] = ves_io_schema_views_workload.AdvertiseSinglePortTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.AdvertiseWhereType"] = ves_io_schema_views_workload.AdvertiseWhereTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.ConfigurationFileType"] = ves_io_schema_views_workload.ConfigurationFileTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.ConfigurationParameterType"] = ves_io_schema_views_workload.ConfigurationParameterTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.ConfigurationParametersType"] = ves_io_schema_views_workload.ConfigurationParametersTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.ContainerType"] = ves_io_schema_views_workload.ContainerTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.CreateSpecType"] = ves_io_schema_views_workload.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.DeployCESiteType"] = ves_io_schema_views_workload.DeployCESiteTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.DeployCEVirtualSiteType"] = ves_io_schema_views_workload.DeployCEVirtualSiteTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.DeployOptionsType"] = ves_io_schema_views_workload.DeployOptionsTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.DeployRESiteType"] = ves_io_schema_views_workload.DeployRESiteTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.DeployREVirtualSiteType"] = ves_io_schema_views_workload.DeployREVirtualSiteTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.EmptyDirectoryVolumeType"] = ves_io_schema_views_workload.EmptyDirectoryVolumeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.EnvironmentVariableType"] = ves_io_schema_views_workload.EnvironmentVariableTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.EphemeralStorageVolumeType"] = ves_io_schema_views_workload.EphemeralStorageVolumeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.ExecHealthCheckType"] = ves_io_schema_views_workload.ExecHealthCheckTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.GetSpecType"] = ves_io_schema_views_workload.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.GlobalSpecType"] = ves_io_schema_views_workload.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.HTTPHealthCheckType"] = ves_io_schema_views_workload.HTTPHealthCheckTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.HTTPLoadBalancerType"] = ves_io_schema_views_workload.HTTPLoadBalancerTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.HealthCheckType"] = ves_io_schema_views_workload.HealthCheckTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.HostPathVolumeType"] = ves_io_schema_views_workload.HostPathVolumeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.ImageType"] = ves_io_schema_views_workload.ImageTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.JobType"] = ves_io_schema_views_workload.JobTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.MatchAllRouteType"] = ves_io_schema_views_workload.MatchAllRouteTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.MultiPortType"] = ves_io_schema_views_workload.MultiPortTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.PersistentStorageType"] = ves_io_schema_views_workload.PersistentStorageTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.PersistentStorageVolumeType"] = ves_io_schema_views_workload.PersistentStorageVolumeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.PersistentVolumeType"] = ves_io_schema_views_workload.PersistentVolumeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.PortChoiceType"] = ves_io_schema_views_workload.PortChoiceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.PortInfoType"] = ves_io_schema_views_workload.PortInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.PortType"] = ves_io_schema_views_workload.PortTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.ReplaceSpecType"] = ves_io_schema_views_workload.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.RouteInfoType"] = ves_io_schema_views_workload.RouteInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.RouteType"] = ves_io_schema_views_workload.RouteTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.ServiceType"] = ves_io_schema_views_workload.ServiceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.SimpleServiceType"] = ves_io_schema_views_workload.SimpleServiceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.SinglePortType"] = ves_io_schema_views_workload.SinglePortTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.StatefulServiceType"] = ves_io_schema_views_workload.StatefulServiceTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.StorageVolumeType"] = ves_io_schema_views_workload.StorageVolumeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.TCPHealthCheckType"] = ves_io_schema_views_workload.TCPHealthCheckTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.TCPLoadBalancerType"] = ves_io_schema_views_workload.TCPLoadBalancerTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.VolumeMountType"] = ves_io_schema_views_workload.VolumeMountTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.views.workload.crudapi.ObjectCreateReq"] = ves_io_schema_views_workload_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.crudapi.ObjectCreateRsp"] = ves_io_schema_views_workload_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.crudapi.ObjectDeleteReq"] = ves_io_schema_views_workload_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.crudapi.ObjectDeleteRsp"] = ves_io_schema_views_workload_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.crudapi.ObjectGetReq"] = ves_io_schema_views_workload_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.crudapi.ObjectGetRsp"] = ves_io_schema_views_workload_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.crudapi.ObjectListReq"] = ves_io_schema_views_workload_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.crudapi.ObjectListRsp"] = ves_io_schema_views_workload_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.crudapi.ObjectListRspItem"] = ves_io_schema_views_workload_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.crudapi.ObjectReplaceReq"] = ves_io_schema_views_workload_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.views.workload.crudapi.ObjectReplaceRsp"] = ves_io_schema_views_workload_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_host.SpecType"] = ves_io_schema_virtual_host.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_host.APIEndpointLearntSchemaReq"] = ves_io_schema_virtual_host.APIEndpointLearntSchemaReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.APIEndpointLearntSchemaRsp"] = ves_io_schema_virtual_host.APIEndpointLearntSchemaRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.APIEndpointPDFReq"] = ves_io_schema_virtual_host.APIEndpointPDFReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.APIEndpointPDFRsp"] = ves_io_schema_virtual_host.APIEndpointPDFRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.APIEndpointsReq"] = ves_io_schema_virtual_host.APIEndpointsReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.APIEndpointsRsp"] = ves_io_schema_virtual_host.APIEndpointsRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.SwaggerSpecReq"] = ves_io_schema_virtual_host.SwaggerSpecReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.SwaggerSpecRsp"] = ves_io_schema_virtual_host.SwaggerSpecRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_host.CreateRequest"] = ves_io_schema_virtual_host.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.CreateResponse"] = ves_io_schema_virtual_host.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.DeleteRequest"] = ves_io_schema_virtual_host.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.GetRequest"] = ves_io_schema_virtual_host.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.GetResponse"] = ves_io_schema_virtual_host.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.ListRequest"] = ves_io_schema_virtual_host.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.ListResponse"] = ves_io_schema_virtual_host.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.ListResponseItem"] = ves_io_schema_virtual_host.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.ReplaceRequest"] = ves_io_schema_virtual_host.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.ReplaceResponse"] = ves_io_schema_virtual_host.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_host.GetDnsInfoRequest"] = ves_io_schema_virtual_host.GetDnsInfoRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.GetDnsInfoResponse"] = ves_io_schema_virtual_host.GetDnsInfoResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_host.AuthenticationDetails"] = ves_io_schema_virtual_host.AuthenticationDetailsValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.AutoCertInfoType"] = ves_io_schema_virtual_host.AutoCertInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.CaptchaChallengeType"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.CompressionType"] = ves_io_schema_virtual_host.CompressionTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.CreateSpecType"] = ves_io_schema_virtual_host.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.DynamicReverseProxyType"] = ves_io_schema_virtual_host.DynamicReverseProxyTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.GetSpecType"] = ves_io_schema_virtual_host.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.GlobalSpecType"] = ves_io_schema_virtual_host.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.JavaScriptConfigType"] = ves_io_schema_virtual_host.JavaScriptConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.JavascriptChallengeType"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.PolicyBasedChallenge"] = ves_io_schema_virtual_host.PolicyBasedChallengeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.ReplaceSpecType"] = ves_io_schema_virtual_host.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.ShapeBotDefenseConfigType"] = ves_io_schema_virtual_host.ShapeBotDefenseConfigTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.TemporaryUserBlockingType"] = ves_io_schema_virtual_host.TemporaryUserBlockingTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_host.crudapi.ObjectCreateReq"] = ves_io_schema_virtual_host_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.crudapi.ObjectCreateRsp"] = ves_io_schema_virtual_host_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.crudapi.ObjectDeleteReq"] = ves_io_schema_virtual_host_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.crudapi.ObjectDeleteRsp"] = ves_io_schema_virtual_host_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.crudapi.ObjectGetReq"] = ves_io_schema_virtual_host_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.crudapi.ObjectGetRsp"] = ves_io_schema_virtual_host_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.crudapi.ObjectListReq"] = ves_io_schema_virtual_host_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.crudapi.ObjectListRsp"] = ves_io_schema_virtual_host_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.crudapi.ObjectListRspItem"] = ves_io_schema_virtual_host_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.crudapi.ObjectReplaceReq"] = ves_io_schema_virtual_host_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.crudapi.ObjectReplaceRsp"] = ves_io_schema_virtual_host_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.DnsInfo"] = ves_io_schema_virtual_host_dns_info.DnsInfoValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.GlobalSpecType"] = ves_io_schema_virtual_host_dns_info.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.SpecType"] = ves_io_schema_virtual_host_dns_info.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.crudapi.ObjectCreateReq"] = ves_io_schema_virtual_host_dns_info_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.crudapi.ObjectCreateRsp"] = ves_io_schema_virtual_host_dns_info_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.crudapi.ObjectDeleteReq"] = ves_io_schema_virtual_host_dns_info_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.crudapi.ObjectDeleteRsp"] = ves_io_schema_virtual_host_dns_info_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.crudapi.ObjectGetReq"] = ves_io_schema_virtual_host_dns_info_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.crudapi.ObjectGetRsp"] = ves_io_schema_virtual_host_dns_info_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.crudapi.ObjectListReq"] = ves_io_schema_virtual_host_dns_info_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.crudapi.ObjectListRsp"] = ves_io_schema_virtual_host_dns_info_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.crudapi.ObjectListRspItem"] = ves_io_schema_virtual_host_dns_info_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.crudapi.ObjectReplaceReq"] = ves_io_schema_virtual_host_dns_info_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.crudapi.ObjectReplaceRsp"] = ves_io_schema_virtual_host_dns_info_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.SpecType"] = ves_io_schema_virtual_k8s.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.CreateRequest"] = ves_io_schema_virtual_k8s.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.CreateResponse"] = ves_io_schema_virtual_k8s.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.DeleteRequest"] = ves_io_schema_virtual_k8s.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.GetRequest"] = ves_io_schema_virtual_k8s.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.GetResponse"] = ves_io_schema_virtual_k8s.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.ListRequest"] = ves_io_schema_virtual_k8s.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.ListResponse"] = ves_io_schema_virtual_k8s.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.ListResponseItem"] = ves_io_schema_virtual_k8s.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.ReplaceRequest"] = ves_io_schema_virtual_k8s.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.ReplaceResponse"] = ves_io_schema_virtual_k8s.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.PVCMetricData"] = ves_io_schema_virtual_k8s.PVCMetricDataValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.PVCMetricTypeData"] = ves_io_schema_virtual_k8s.PVCMetricTypeDataValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.PVCMetricsRequest"] = ves_io_schema_virtual_k8s.PVCMetricsRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.PVCMetricsResponse"] = ves_io_schema_virtual_k8s.PVCMetricsResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.CreateSpecType"] = ves_io_schema_virtual_k8s.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.GetSpecType"] = ves_io_schema_virtual_k8s.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.GlobalSpecType"] = ves_io_schema_virtual_k8s.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.ReplaceSpecType"] = ves_io_schema_virtual_k8s.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.crudapi.ObjectCreateReq"] = ves_io_schema_virtual_k8s_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.crudapi.ObjectCreateRsp"] = ves_io_schema_virtual_k8s_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.crudapi.ObjectDeleteReq"] = ves_io_schema_virtual_k8s_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.crudapi.ObjectDeleteRsp"] = ves_io_schema_virtual_k8s_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.crudapi.ObjectGetReq"] = ves_io_schema_virtual_k8s_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.crudapi.ObjectGetRsp"] = ves_io_schema_virtual_k8s_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.crudapi.ObjectListReq"] = ves_io_schema_virtual_k8s_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.crudapi.ObjectListRsp"] = ves_io_schema_virtual_k8s_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.crudapi.ObjectListRspItem"] = ves_io_schema_virtual_k8s_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.crudapi.ObjectReplaceReq"] = ves_io_schema_virtual_k8s_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.crudapi.ObjectReplaceRsp"] = ves_io_schema_virtual_k8s_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_network.SpecType"] = ves_io_schema_virtual_network.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_network.CreateRequest"] = ves_io_schema_virtual_network.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.CreateResponse"] = ves_io_schema_virtual_network.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.DeleteRequest"] = ves_io_schema_virtual_network.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.GetRequest"] = ves_io_schema_virtual_network.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.GetResponse"] = ves_io_schema_virtual_network.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.ListRequest"] = ves_io_schema_virtual_network.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.ListResponse"] = ves_io_schema_virtual_network.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.ListResponseItem"] = ves_io_schema_virtual_network.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.ReplaceRequest"] = ves_io_schema_virtual_network.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.ReplaceResponse"] = ves_io_schema_virtual_network.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_network.SIDCounterData"] = ves_io_schema_virtual_network.SIDCounterDataValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.SIDCounterRequest"] = ves_io_schema_virtual_network.SIDCounterRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.SIDCounterResponse"] = ves_io_schema_virtual_network.SIDCounterResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.SIDCounterTypeData"] = ves_io_schema_virtual_network.SIDCounterTypeDataValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_network.ActivePBRPoliciesType"] = ves_io_schema_virtual_network.ActivePBRPoliciesTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.AnyCastVIPFleetType"] = ves_io_schema_virtual_network.AnyCastVIPFleetTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.CreateSpecType"] = ves_io_schema_virtual_network.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.DNSServersList"] = ves_io_schema_virtual_network.DNSServersListValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.GetSpecType"] = ves_io_schema_virtual_network.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.GlobalSpecType"] = ves_io_schema_virtual_network.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.NextHopInterfaceList"] = ves_io_schema_virtual_network.NextHopInterfaceListValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.PerSiteSrv6NetworkType"] = ves_io_schema_virtual_network.PerSiteSrv6NetworkTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.PerTenantVIPType"] = ves_io_schema_virtual_network.PerTenantVIPTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.ReplaceSpecType"] = ves_io_schema_virtual_network.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.SNATPoolFleetType"] = ves_io_schema_virtual_network.SNATPoolFleetTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.SNATPoolSiteType"] = ves_io_schema_virtual_network.SNATPoolSiteTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.SNATPoolType"] = ves_io_schema_virtual_network.SNATPoolTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.Srv6NetworkNsParametersType"] = ves_io_schema_virtual_network.Srv6NetworkNsParametersTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.StaticRouteViewType"] = ves_io_schema_virtual_network.StaticRouteViewTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.VoltADNPrivateNetworkReInfoType"] = ves_io_schema_virtual_network.VoltADNPrivateNetworkReInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.VoltADNPrivateNetworkTenantInfoType"] = ves_io_schema_virtual_network.VoltADNPrivateNetworkTenantInfoTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.VoltADNPrivateNetworkType"] = ves_io_schema_virtual_network.VoltADNPrivateNetworkTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_network.crudapi.ObjectCreateReq"] = ves_io_schema_virtual_network_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.crudapi.ObjectCreateRsp"] = ves_io_schema_virtual_network_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.crudapi.ObjectDeleteReq"] = ves_io_schema_virtual_network_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.crudapi.ObjectDeleteRsp"] = ves_io_schema_virtual_network_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.crudapi.ObjectGetReq"] = ves_io_schema_virtual_network_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.crudapi.ObjectGetRsp"] = ves_io_schema_virtual_network_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.crudapi.ObjectListReq"] = ves_io_schema_virtual_network_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.crudapi.ObjectListRsp"] = ves_io_schema_virtual_network_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.crudapi.ObjectListRspItem"] = ves_io_schema_virtual_network_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.crudapi.ObjectReplaceReq"] = ves_io_schema_virtual_network_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.crudapi.ObjectReplaceRsp"] = ves_io_schema_virtual_network_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_site.SpecType"] = ves_io_schema_virtual_site.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_site.CreateRequest"] = ves_io_schema_virtual_site.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.CreateResponse"] = ves_io_schema_virtual_site.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.DeleteRequest"] = ves_io_schema_virtual_site.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.GetRequest"] = ves_io_schema_virtual_site.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.GetResponse"] = ves_io_schema_virtual_site.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.ListRequest"] = ves_io_schema_virtual_site.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.ListResponse"] = ves_io_schema_virtual_site.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.ListResponseItem"] = ves_io_schema_virtual_site.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.ReplaceRequest"] = ves_io_schema_virtual_site.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.ReplaceResponse"] = ves_io_schema_virtual_site.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_site.SelecteeItemType"] = ves_io_schema_virtual_site.SelecteeItemTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.SelecteeRequest"] = ves_io_schema_virtual_site.SelecteeRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.SelecteeResponse"] = ves_io_schema_virtual_site.SelecteeResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_site.CreateSpecType"] = ves_io_schema_virtual_site.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.GetSpecType"] = ves_io_schema_virtual_site.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.GlobalSpecType"] = ves_io_schema_virtual_site.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.ReplaceSpecType"] = ves_io_schema_virtual_site.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.virtual_site.crudapi.ObjectCreateReq"] = ves_io_schema_virtual_site_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.crudapi.ObjectCreateRsp"] = ves_io_schema_virtual_site_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.crudapi.ObjectDeleteReq"] = ves_io_schema_virtual_site_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.crudapi.ObjectDeleteRsp"] = ves_io_schema_virtual_site_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.crudapi.ObjectGetReq"] = ves_io_schema_virtual_site_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.crudapi.ObjectGetRsp"] = ves_io_schema_virtual_site_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.crudapi.ObjectListReq"] = ves_io_schema_virtual_site_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.crudapi.ObjectListRsp"] = ves_io_schema_virtual_site_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.crudapi.ObjectListRspItem"] = ves_io_schema_virtual_site_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.crudapi.ObjectReplaceReq"] = ves_io_schema_virtual_site_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.crudapi.ObjectReplaceRsp"] = ves_io_schema_virtual_site_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf.SpecType"] = ves_io_schema_waf.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf.CreateRequest"] = ves_io_schema_waf.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.CreateResponse"] = ves_io_schema_waf.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.DeleteRequest"] = ves_io_schema_waf.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.GetRequest"] = ves_io_schema_waf.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.GetResponse"] = ves_io_schema_waf.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.ListRequest"] = ves_io_schema_waf.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.ListResponse"] = ves_io_schema_waf.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.ListResponseItem"] = ves_io_schema_waf.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.ReplaceRequest"] = ves_io_schema_waf.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.ReplaceResponse"] = ves_io_schema_waf.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf.VirtualHostWafStatusReq"] = ves_io_schema_waf.VirtualHostWafStatusReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.VirtualHostWafStatusRsp"] = ves_io_schema_waf.VirtualHostWafStatusRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.WafStatus"] = ves_io_schema_waf.WafStatusValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf.RuleHitsCountRequest"] = ves_io_schema_waf.RuleHitsCountRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.RuleHitsCountResponse"] = ves_io_schema_waf.RuleHitsCountResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.SecurityEventsCountRequest"] = ves_io_schema_waf.SecurityEventsCountRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.SecurityEventsCountResponse"] = ves_io_schema_waf.SecurityEventsCountResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf.AppProfile"] = ves_io_schema_waf.AppProfileValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.CreateSpecType"] = ves_io_schema_waf.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.DisabledDetectionTags"] = ves_io_schema_waf.DisabledDetectionTagsValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.GetSpecType"] = ves_io_schema_waf.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.GlobalSpecType"] = ves_io_schema_waf.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.MetricLabelFilter"] = ves_io_schema_waf.MetricLabelFilterValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.MetricValue"] = ves_io_schema_waf.MetricValueValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.ReplaceSpecType"] = ves_io_schema_waf.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.RuleHitsCounter"] = ves_io_schema_waf.RuleHitsCounterValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.RuleHitsId"] = ves_io_schema_waf.RuleHitsIdValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.SecurityEventAggregation"] = ves_io_schema_waf.SecurityEventAggregationValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.SecurityEventsCounter"] = ves_io_schema_waf.SecurityEventsCounterValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.SecurityEventsId"] = ves_io_schema_waf.SecurityEventsIdValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf.crudapi.ObjectCreateReq"] = ves_io_schema_waf_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.crudapi.ObjectCreateRsp"] = ves_io_schema_waf_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.crudapi.ObjectDeleteReq"] = ves_io_schema_waf_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.crudapi.ObjectDeleteRsp"] = ves_io_schema_waf_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.crudapi.ObjectGetReq"] = ves_io_schema_waf_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.crudapi.ObjectGetRsp"] = ves_io_schema_waf_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.crudapi.ObjectListReq"] = ves_io_schema_waf_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.crudapi.ObjectListRsp"] = ves_io_schema_waf_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.crudapi.ObjectListRspItem"] = ves_io_schema_waf_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.crudapi.ObjectReplaceReq"] = ves_io_schema_waf_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf.crudapi.ObjectReplaceRsp"] = ves_io_schema_waf_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.SpecType"] = ves_io_schema_waf_rule_list.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.CreateRequest"] = ves_io_schema_waf_rule_list.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.CreateResponse"] = ves_io_schema_waf_rule_list.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.DeleteRequest"] = ves_io_schema_waf_rule_list.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.GetRequest"] = ves_io_schema_waf_rule_list.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.GetResponse"] = ves_io_schema_waf_rule_list.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.ListRequest"] = ves_io_schema_waf_rule_list.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.ListResponse"] = ves_io_schema_waf_rule_list.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.ListResponseItem"] = ves_io_schema_waf_rule_list.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.ReplaceRequest"] = ves_io_schema_waf_rule_list.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.ReplaceResponse"] = ves_io_schema_waf_rule_list.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.CreateSpecType"] = ves_io_schema_waf_rule_list.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.GetSpecType"] = ves_io_schema_waf_rule_list.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.GlobalSpecType"] = ves_io_schema_waf_rule_list.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.ReplaceSpecType"] = ves_io_schema_waf_rule_list.ReplaceSpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.crudapi.ObjectCreateReq"] = ves_io_schema_waf_rule_list_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.crudapi.ObjectCreateRsp"] = ves_io_schema_waf_rule_list_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.crudapi.ObjectDeleteReq"] = ves_io_schema_waf_rule_list_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.crudapi.ObjectDeleteRsp"] = ves_io_schema_waf_rule_list_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.crudapi.ObjectGetReq"] = ves_io_schema_waf_rule_list_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.crudapi.ObjectGetRsp"] = ves_io_schema_waf_rule_list_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.crudapi.ObjectListReq"] = ves_io_schema_waf_rule_list_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.crudapi.ObjectListRsp"] = ves_io_schema_waf_rule_list_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.crudapi.ObjectListRspItem"] = ves_io_schema_waf_rule_list_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.crudapi.ObjectReplaceReq"] = ves_io_schema_waf_rule_list_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.crudapi.ObjectReplaceRsp"] = ves_io_schema_waf_rule_list_crudapi.ObjectReplaceRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf_rules.SpecType"] = ves_io_schema_waf_rules.SpecTypeValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf_rules.CreateRequest"] = ves_io_schema_waf_rules.CreateRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.CreateResponse"] = ves_io_schema_waf_rules.CreateResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.DeleteRequest"] = ves_io_schema_waf_rules.DeleteRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.GetRequest"] = ves_io_schema_waf_rules.GetRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.GetResponse"] = ves_io_schema_waf_rules.GetResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.ListRequest"] = ves_io_schema_waf_rules.ListRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.ListResponse"] = ves_io_schema_waf_rules.ListResponseValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.ListResponseItem"] = ves_io_schema_waf_rules.ListResponseItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.ReplaceRequest"] = ves_io_schema_waf_rules.ReplaceRequestValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.ReplaceResponse"] = ves_io_schema_waf_rules.ReplaceResponseValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf_rules.RulesReq"] = ves_io_schema_waf_rules.RulesReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.RulesRsp"] = ves_io_schema_waf_rules.RulesRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.VirtualHostWafRulesStatusReq"] = ves_io_schema_waf_rules.VirtualHostWafRulesStatusReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.VirtualHostWafRulesStatusRsp"] = ves_io_schema_waf_rules.VirtualHostWafRulesStatusRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.WafRulesStatus"] = ves_io_schema_waf_rules.WafRulesStatusValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.WafRulesStatusReq"] = ves_io_schema_waf_rules.WafRulesStatusReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.WafRulesStatusRsp"] = ves_io_schema_waf_rules.WafRulesStatusRspValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf_rules.CreateSpecType"] = ves_io_schema_waf_rules.CreateSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.GetSpecType"] = ves_io_schema_waf_rules.GetSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.GlobalSpecType"] = ves_io_schema_waf_rules.GlobalSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.ReplaceSpecType"] = ves_io_schema_waf_rules.ReplaceSpecTypeValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.Rules"] = ves_io_schema_waf_rules.RulesValidator()

	MDR.ValidatorRegistry["ves.io.schema.waf_rules.crudapi.ObjectCreateReq"] = ves_io_schema_waf_rules_crudapi.ObjectCreateReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.crudapi.ObjectCreateRsp"] = ves_io_schema_waf_rules_crudapi.ObjectCreateRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.crudapi.ObjectDeleteReq"] = ves_io_schema_waf_rules_crudapi.ObjectDeleteReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.crudapi.ObjectDeleteRsp"] = ves_io_schema_waf_rules_crudapi.ObjectDeleteRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.crudapi.ObjectGetReq"] = ves_io_schema_waf_rules_crudapi.ObjectGetReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.crudapi.ObjectGetRsp"] = ves_io_schema_waf_rules_crudapi.ObjectGetRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.crudapi.ObjectListReq"] = ves_io_schema_waf_rules_crudapi.ObjectListReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.crudapi.ObjectListRsp"] = ves_io_schema_waf_rules_crudapi.ObjectListRspValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.crudapi.ObjectListRspItem"] = ves_io_schema_waf_rules_crudapi.ObjectListRspItemValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.crudapi.ObjectReplaceReq"] = ves_io_schema_waf_rules_crudapi.ObjectReplaceReqValidator()
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.crudapi.ObjectReplaceRsp"] = ves_io_schema_waf_rules_crudapi.ObjectReplaceRspValidator()

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.advertise_policy.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.tls_parameters.common_params.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_network", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.advertise_policy.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.tls_parameters.common_params.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_network", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.advertise_policy.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.tls_parameters.common_params.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_network", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.advertise_policy.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.tls_parameters.common_params.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_network", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.alert_policy.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.notification_parameters": []sets.String{
				sets.NewString([]string{"custom", "default", "individual", "ves_io_group"}...),
			},
			"spec.routes": []sets.String{
				sets.NewString([]string{"alertname", "alertname_regex", "any", "custom", "group", "severity"}...),
				sets.NewString([]string{"dont_send", "send"}...),
			},
			"spec.routes.custom.alertname": []sets.String{
				sets.NewString([]string{"exact_match", "regex_match"}...),
			},
			"spec.routes.custom.group": []sets.String{
				sets.NewString([]string{"exact_match", "regex_match"}...),
			},
			"spec.routes.custom.severity": []sets.String{
				sets.NewString([]string{"exact_match", "regex_match"}...),
			},
			"spec.routes.notification_parameters": []sets.String{
				sets.NewString([]string{"custom", "default", "individual", "ves_io_group"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.alert_policy.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.notification_parameters": []sets.String{
				sets.NewString([]string{"custom", "default", "individual", "ves_io_group"}...),
			},
			"spec.routes": []sets.String{
				sets.NewString([]string{"alertname", "alertname_regex", "any", "custom", "group", "severity"}...),
				sets.NewString([]string{"dont_send", "send"}...),
			},
			"spec.routes.custom.alertname": []sets.String{
				sets.NewString([]string{"exact_match", "regex_match"}...),
			},
			"spec.routes.custom.group": []sets.String{
				sets.NewString([]string{"exact_match", "regex_match"}...),
			},
			"spec.routes.custom.severity": []sets.String{
				sets.NewString([]string{"exact_match", "regex_match"}...),
			},
			"spec.routes.notification_parameters": []sets.String{
				sets.NewString([]string{"custom", "default", "individual", "ves_io_group"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.alert_policy.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.notification_parameters": []sets.String{
				sets.NewString([]string{"custom", "default", "individual", "ves_io_group"}...),
			},
			"spec.gc_spec.routes": []sets.String{
				sets.NewString([]string{"alertname", "alertname_regex", "any", "custom", "group", "severity"}...),
				sets.NewString([]string{"dont_send", "send"}...),
			},
			"spec.gc_spec.routes.custom.alertname": []sets.String{
				sets.NewString([]string{"exact_match", "regex_match"}...),
			},
			"spec.gc_spec.routes.custom.group": []sets.String{
				sets.NewString([]string{"exact_match", "regex_match"}...),
			},
			"spec.gc_spec.routes.custom.severity": []sets.String{
				sets.NewString([]string{"exact_match", "regex_match"}...),
			},
			"spec.gc_spec.routes.notification_parameters": []sets.String{
				sets.NewString([]string{"custom", "default", "individual", "ves_io_group"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.alert_policy.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.notification_parameters": []sets.String{
				sets.NewString([]string{"custom", "default", "individual", "ves_io_group"}...),
			},
			"spec.gc_spec.routes": []sets.String{
				sets.NewString([]string{"alertname", "alertname_regex", "any", "custom", "group", "severity"}...),
				sets.NewString([]string{"dont_send", "send"}...),
			},
			"spec.gc_spec.routes.custom.alertname": []sets.String{
				sets.NewString([]string{"exact_match", "regex_match"}...),
			},
			"spec.gc_spec.routes.custom.group": []sets.String{
				sets.NewString([]string{"exact_match", "regex_match"}...),
			},
			"spec.gc_spec.routes.custom.severity": []sets.String{
				sets.NewString([]string{"exact_match", "regex_match"}...),
			},
			"spec.gc_spec.routes.notification_parameters": []sets.String{
				sets.NewString([]string{"custom", "default", "individual", "ves_io_group"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.alert_receiver.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"email", "opsgenie", "pagerduty", "slack", "sms"}...),
			},
			"spec.opsgenie.api_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.pagerduty.routing_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.slack.url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.alert_receiver.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"email", "opsgenie", "pagerduty", "slack", "sms"}...),
			},
			"spec.opsgenie.api_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.pagerduty.routing_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.slack.url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.alert_receiver.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"email", "opsgenie", "pagerduty", "slack", "sms"}...),
			},
			"spec.gc_spec.opsgenie.api_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.pagerduty.routing_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.slack.url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.alert_receiver.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"email", "opsgenie", "pagerduty", "slack", "sms"}...),
			},
			"spec.gc_spec.opsgenie.api_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.pagerduty.routing_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.slack.url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.app_firewall.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"blocking", "monitoring", "use_loadbalancer_setting"}...),
				sets.NewString([]string{"bot_protection_setting", "default_bot_setting"}...),
				sets.NewString([]string{"default_detection_settings", "detection_settings"}...),
			},
			"spec.detection_settings": []sets.String{
				sets.NewString([]string{"default_violation_settings", "enabled_violation_types"}...),
				sets.NewString([]string{"disable_suppression", "enable_suppression"}...),
				sets.NewString([]string{"disable_threat_campaigns", "enable_threat_campaigns"}...),
			},
			"spec.detection_settings.signature_selection_setting": []sets.String{
				sets.NewString([]string{"default_attack_type_settings", "enabled_attack_types"}...),
				sets.NewString([]string{"high_medium_accuracy_signatures", "high_medium_low_accuracy_signatures", "only_high_accuracy_signatures"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.app_firewall.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"blocking", "monitoring", "use_loadbalancer_setting"}...),
				sets.NewString([]string{"bot_protection_setting", "default_bot_setting"}...),
				sets.NewString([]string{"default_detection_settings", "detection_settings"}...),
			},
			"spec.detection_settings": []sets.String{
				sets.NewString([]string{"default_violation_settings", "enabled_violation_types"}...),
				sets.NewString([]string{"disable_suppression", "enable_suppression"}...),
				sets.NewString([]string{"disable_threat_campaigns", "enable_threat_campaigns"}...),
			},
			"spec.detection_settings.signature_selection_setting": []sets.String{
				sets.NewString([]string{"default_attack_type_settings", "enabled_attack_types"}...),
				sets.NewString([]string{"high_medium_accuracy_signatures", "high_medium_low_accuracy_signatures", "only_high_accuracy_signatures"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.app_firewall.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"blocking", "monitoring", "use_loadbalancer_setting"}...),
				sets.NewString([]string{"bot_protection_setting", "default_bot_setting"}...),
				sets.NewString([]string{"default_detection_settings", "detection_settings"}...),
			},
			"spec.gc_spec.detection_settings": []sets.String{
				sets.NewString([]string{"default_violation_settings", "enabled_violation_types"}...),
				sets.NewString([]string{"disable_suppression", "enable_suppression"}...),
				sets.NewString([]string{"disable_threat_campaigns", "enable_threat_campaigns"}...),
			},
			"spec.gc_spec.detection_settings.signature_selection_setting": []sets.String{
				sets.NewString([]string{"default_attack_type_settings", "enabled_attack_types"}...),
				sets.NewString([]string{"high_medium_accuracy_signatures", "high_medium_low_accuracy_signatures", "only_high_accuracy_signatures"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.app_firewall.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"blocking", "monitoring", "use_loadbalancer_setting"}...),
				sets.NewString([]string{"bot_protection_setting", "default_bot_setting"}...),
				sets.NewString([]string{"default_detection_settings", "detection_settings"}...),
			},
			"spec.gc_spec.detection_settings": []sets.String{
				sets.NewString([]string{"default_violation_settings", "enabled_violation_types"}...),
				sets.NewString([]string{"disable_suppression", "enable_suppression"}...),
				sets.NewString([]string{"disable_threat_campaigns", "enable_threat_campaigns"}...),
			},
			"spec.gc_spec.detection_settings.signature_selection_setting": []sets.String{
				sets.NewString([]string{"default_attack_type_settings", "enabled_attack_types"}...),
				sets.NewString([]string{"high_medium_accuracy_signatures", "high_medium_low_accuracy_signatures", "only_high_accuracy_signatures"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.app_setting.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.app_type_settings.business_logic_markup_setting": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.app_type_settings.user_behavior_analysis_setting": []sets.String{
				sets.NewString([]string{"disable_detection", "enable_detection"}...),
				sets.NewString([]string{"disable_learning", "enable_learning"}...),
			},
			"spec.app_type_settings.user_behavior_analysis_setting.enable_detection": []sets.String{
				sets.NewString([]string{"cooling_off_period"}...),
				sets.NewString([]string{"exclude_failed_login_activity", "include_failed_login_activity"}...),
				sets.NewString([]string{"exclude_forbidden_activity", "include_forbidden_activity"}...),
				sets.NewString([]string{"exclude_waf_activity", "include_waf_activity"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.app_setting.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.app_type_settings.business_logic_markup_setting": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.app_type_settings.user_behavior_analysis_setting": []sets.String{
				sets.NewString([]string{"disable_detection", "enable_detection"}...),
				sets.NewString([]string{"disable_learning", "enable_learning"}...),
			},
			"spec.app_type_settings.user_behavior_analysis_setting.enable_detection": []sets.String{
				sets.NewString([]string{"cooling_off_period"}...),
				sets.NewString([]string{"exclude_failed_login_activity", "include_failed_login_activity"}...),
				sets.NewString([]string{"exclude_forbidden_activity", "include_forbidden_activity"}...),
				sets.NewString([]string{"exclude_waf_activity", "include_waf_activity"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.app_setting.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.app_type_settings.business_logic_markup_setting": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.app_type_settings.user_behavior_analysis_setting": []sets.String{
				sets.NewString([]string{"disable_detection", "enable_detection"}...),
				sets.NewString([]string{"disable_learning", "enable_learning"}...),
			},
			"spec.gc_spec.app_type_settings.user_behavior_analysis_setting.enable_detection": []sets.String{
				sets.NewString([]string{"cooling_off_period"}...),
				sets.NewString([]string{"exclude_failed_login_activity", "include_failed_login_activity"}...),
				sets.NewString([]string{"exclude_forbidden_activity", "include_forbidden_activity"}...),
				sets.NewString([]string{"exclude_waf_activity", "include_waf_activity"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.app_setting.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.app_type_settings.business_logic_markup_setting": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.app_type_settings.user_behavior_analysis_setting": []sets.String{
				sets.NewString([]string{"disable_detection", "enable_detection"}...),
				sets.NewString([]string{"disable_learning", "enable_learning"}...),
			},
			"spec.gc_spec.app_type_settings.user_behavior_analysis_setting.enable_detection": []sets.String{
				sets.NewString([]string{"cooling_off_period"}...),
				sets.NewString([]string{"exclude_failed_login_activity", "include_failed_login_activity"}...),
				sets.NewString([]string{"exclude_forbidden_activity", "include_forbidden_activity"}...),
				sets.NewString([]string{"exclude_waf_activity", "include_waf_activity"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.app_type.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.business_logic_markup_setting": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.app_type.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.business_logic_markup_setting": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.app_type.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.business_logic_markup_setting": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.app_type.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.business_logic_markup_setting": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.authentication.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"oidc_auth"}...),
			},
			"spec.cookie_params": []sets.String{
				sets.NewString([]string{"auth_hmac", "kms_key_hmac"}...),
			},
			"spec.cookie_params.auth_hmac.prim_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.cookie_params.auth_hmac.sec_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.oidc_auth": []sets.String{
				sets.NewString([]string{"oidc_auth_params", "oidc_well_known_config_url"}...),
			},
			"spec.oidc_auth.client_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.authentication.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"oidc_auth"}...),
			},
			"spec.cookie_params": []sets.String{
				sets.NewString([]string{"auth_hmac", "kms_key_hmac"}...),
			},
			"spec.cookie_params.auth_hmac.prim_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.cookie_params.auth_hmac.sec_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.oidc_auth": []sets.String{
				sets.NewString([]string{"oidc_auth_params", "oidc_well_known_config_url"}...),
			},
			"spec.oidc_auth.client_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.authentication.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"oidc_auth"}...),
			},
			"spec.gc_spec.cookie_params": []sets.String{
				sets.NewString([]string{"auth_hmac", "kms_key_hmac"}...),
			},
			"spec.gc_spec.cookie_params.auth_hmac.prim_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.cookie_params.auth_hmac.sec_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.oidc_auth": []sets.String{
				sets.NewString([]string{"oidc_auth_params", "oidc_well_known_config_url"}...),
			},
			"spec.gc_spec.oidc_auth.client_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.authentication.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"oidc_auth"}...),
			},
			"spec.gc_spec.cookie_params": []sets.String{
				sets.NewString([]string{"auth_hmac", "kms_key_hmac"}...),
			},
			"spec.gc_spec.cookie_params.auth_hmac.prim_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.cookie_params.auth_hmac.sec_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.oidc_auth": []sets.String{
				sets.NewString([]string{"oidc_auth_params", "oidc_well_known_config_url"}...),
			},
			"spec.gc_spec.oidc_auth.client_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.bgp.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.bgp_parameters": []sets.String{
				sets.NewString([]string{"from_site", "ip_address", "local_address"}...),
			},
			"spec.bgp_parameters.bgp_router_id": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.peers": []sets.String{
				sets.NewString([]string{"external", "internal"}...),
			},
			"spec.peers.external": []sets.String{
				sets.NewString([]string{"address", "default_gateway", "from_site", "subnet_begin_offset", "subnet_end_offset"}...),
				sets.NewString([]string{"inside_interfaces", "interface", "interface_list", "outside_interfaces"}...),
			},
			"spec.peers.external.family_inet": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.peers.internal": []sets.String{
				sets.NewString([]string{"address", "dns_name", "from_site"}...),
				sets.NewString([]string{"disable_mtls", "enable_mtls"}...),
			},
			"spec.peers.internal.family_inet6vpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.peers.internal.family_inetvpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.peers.internal.family_inetvpn.enable": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.peers.internal.family_rtarget": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.bgp.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.bgp_parameters": []sets.String{
				sets.NewString([]string{"from_site", "ip_address", "local_address"}...),
			},
			"spec.bgp_parameters.bgp_router_id": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.peers": []sets.String{
				sets.NewString([]string{"external", "internal"}...),
			},
			"spec.peers.external": []sets.String{
				sets.NewString([]string{"address", "default_gateway", "from_site", "subnet_begin_offset", "subnet_end_offset"}...),
				sets.NewString([]string{"inside_interfaces", "interface", "interface_list", "outside_interfaces"}...),
			},
			"spec.peers.external.family_inet": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.peers.internal": []sets.String{
				sets.NewString([]string{"address", "dns_name", "from_site"}...),
				sets.NewString([]string{"disable_mtls", "enable_mtls"}...),
			},
			"spec.peers.internal.family_inet6vpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.peers.internal.family_inetvpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.peers.internal.family_inetvpn.enable": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.peers.internal.family_rtarget": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.bgp.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.bgp_parameters": []sets.String{
				sets.NewString([]string{"from_site", "ip_address", "local_address"}...),
			},
			"spec.gc_spec.bgp_parameters.bgp_router_id": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.bgp_peers.bgp_peer_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.peers": []sets.String{
				sets.NewString([]string{"external", "internal"}...),
			},
			"spec.gc_spec.peers.external": []sets.String{
				sets.NewString([]string{"address", "default_gateway", "from_site", "subnet_begin_offset", "subnet_end_offset"}...),
				sets.NewString([]string{"inside_interfaces", "interface", "interface_list", "outside_interfaces"}...),
			},
			"spec.gc_spec.peers.external.family_inet": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.peers.internal": []sets.String{
				sets.NewString([]string{"address", "dns_name", "from_site"}...),
				sets.NewString([]string{"disable_mtls", "enable_mtls"}...),
			},
			"spec.gc_spec.peers.internal.family_inet6vpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.peers.internal.family_inetvpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.peers.internal.family_inetvpn.enable": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.peers.internal.family_rtarget": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.bgp.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.bgp_parameters": []sets.String{
				sets.NewString([]string{"from_site", "ip_address", "local_address"}...),
			},
			"spec.gc_spec.bgp_parameters.bgp_router_id": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.bgp_peers.bgp_peer_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.peers": []sets.String{
				sets.NewString([]string{"external", "internal"}...),
			},
			"spec.gc_spec.peers.external": []sets.String{
				sets.NewString([]string{"address", "default_gateway", "from_site", "subnet_begin_offset", "subnet_end_offset"}...),
				sets.NewString([]string{"inside_interfaces", "interface", "interface_list", "outside_interfaces"}...),
			},
			"spec.gc_spec.peers.external.family_inet": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.peers.internal": []sets.String{
				sets.NewString([]string{"address", "dns_name", "from_site"}...),
				sets.NewString([]string{"disable_mtls", "enable_mtls"}...),
			},
			"spec.gc_spec.peers.internal.family_inet6vpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.peers.internal.family_inetvpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.peers.internal.family_inetvpn.enable": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.peers.internal.family_rtarget": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.certified_hardware.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.image_list": []sets.String{
				sets.NewString([]string{"aws", "azure", "gcp"}...),
			},
			"spec.gc_spec.image_list.aws": []sets.String{
				sets.NewString([]string{"image_id"}...),
			},
			"spec.gc_spec.image_list.azure": []sets.String{
				sets.NewString([]string{"image_id", "marketplace"}...),
			},
			"spec.gc_spec.image_list.gcp": []sets.String{
				sets.NewString([]string{"image_id"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.certified_hardware.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.image_list": []sets.String{
				sets.NewString([]string{"aws", "azure", "gcp"}...),
			},
			"spec.gc_spec.image_list.aws": []sets.String{
				sets.NewString([]string{"image_id"}...),
			},
			"spec.gc_spec.image_list.azure": []sets.String{
				sets.NewString([]string{"image_id", "marketplace"}...),
			},
			"spec.gc_spec.image_list.gcp": []sets.String{
				sets.NewString([]string{"image_id"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.cloud_credentials.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"aws_secret_key", "azure_client_secret", "azure_pfx_certificate", "gcp_cred_file"}...),
			},
			"spec.aws_secret_key.secret_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.azure_client_secret.client_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.azure_pfx_certificate.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gcp_cred_file.credential_file": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.cloud_credentials.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"aws_secret_key", "azure_client_secret", "azure_pfx_certificate", "gcp_cred_file"}...),
			},
			"spec.aws_secret_key.secret_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.azure_client_secret.client_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.azure_pfx_certificate.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gcp_cred_file.credential_file": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.cloud_credentials.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"aws_secret_key", "azure_client_secret", "azure_pfx_certificate", "gcp_cred_file"}...),
			},
			"spec.gc_spec.aws_secret_key.secret_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.azure_client_secret.client_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.azure_pfx_certificate.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.gcp_cred_file.credential_file": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.cloud_credentials.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"aws_secret_key", "azure_client_secret", "azure_pfx_certificate", "gcp_cred_file"}...),
			},
			"spec.gc_spec.aws_secret_key.secret_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.azure_client_secret.client_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.azure_pfx_certificate.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.gcp_cred_file.credential_file": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.cluster.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"no_panic_threshold", "panic_threshold"}...),
			},
			"spec.tls_parameters": []sets.String{
				sets.NewString([]string{"disable_sni", "sni", "use_host_header_as_sni"}...),
			},
			"spec.tls_parameters.common_params.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.cluster.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"no_panic_threshold", "panic_threshold"}...),
			},
			"spec.tls_parameters": []sets.String{
				sets.NewString([]string{"disable_sni", "sni", "use_host_header_as_sni"}...),
			},
			"spec.tls_parameters.common_params.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.cluster.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"no_panic_threshold", "panic_threshold"}...),
			},
			"spec.gc_spec.tls_parameters": []sets.String{
				sets.NewString([]string{"disable_sni", "sni", "use_host_header_as_sni"}...),
			},
			"spec.gc_spec.tls_parameters.common_params.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.cluster.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"no_panic_threshold", "panic_threshold"}...),
			},
			"spec.gc_spec.tls_parameters": []sets.String{
				sets.NewString([]string{"disable_sni", "sni", "use_host_header_as_sni"}...),
			},
			"spec.gc_spec.tls_parameters.common_params.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.container_registry.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.container_registry.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.container_registry.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.container_registry.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.discovery.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"discovery_consul", "discovery_k8s"}...),
			},
			"spec.discovery_consul.access_info.connection_info.tls_info.ca_certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_consul.access_info.connection_info.tls_info.certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_consul.access_info.connection_info.tls_info.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_consul.access_info.http_basic_auth_info.passwd_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_consul.publish_info": []sets.String{
				sets.NewString([]string{"disable", "publish"}...),
			},
			"spec.discovery_k8s.access_info": []sets.String{
				sets.NewString([]string{"connection_info", "in_cluster", "kubeconfig_url"}...),
				sets.NewString([]string{"isolated", "reachable"}...),
			},
			"spec.discovery_k8s.access_info.connection_info.tls_info.ca_certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_k8s.access_info.connection_info.tls_info.certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_k8s.access_info.connection_info.tls_info.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_k8s.access_info.kubeconfig_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_k8s.publish_info": []sets.String{
				sets.NewString([]string{"disable", "dns_delegation", "publish", "publish_fqdns"}...),
			},
			"spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_network", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.discovery.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"discovery_consul", "discovery_k8s"}...),
			},
			"spec.discovery_consul.access_info.connection_info.tls_info.ca_certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_consul.access_info.connection_info.tls_info.certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_consul.access_info.connection_info.tls_info.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_consul.access_info.http_basic_auth_info.passwd_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_consul.publish_info": []sets.String{
				sets.NewString([]string{"disable", "publish"}...),
			},
			"spec.discovery_k8s.access_info": []sets.String{
				sets.NewString([]string{"connection_info", "in_cluster", "kubeconfig_url"}...),
				sets.NewString([]string{"isolated", "reachable"}...),
			},
			"spec.discovery_k8s.access_info.connection_info.tls_info.ca_certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_k8s.access_info.connection_info.tls_info.certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_k8s.access_info.connection_info.tls_info.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_k8s.access_info.kubeconfig_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.discovery_k8s.publish_info": []sets.String{
				sets.NewString([]string{"disable", "dns_delegation", "publish", "publish_fqdns"}...),
			},
			"spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_network", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.discovery.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"consul", "k8s"}...),
				sets.NewString([]string{"discovery_consul", "discovery_k8s"}...),
			},
			"spec.gc_spec.consul.connection_info.tls_info.ca_certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.consul.connection_info.tls_info.certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.consul.connection_info.tls_info.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.consul.http_basic_auth_info.passwd_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_consul.access_info.connection_info.tls_info.ca_certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_consul.access_info.connection_info.tls_info.certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_consul.access_info.connection_info.tls_info.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_consul.access_info.http_basic_auth_info.passwd_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_consul.publish_info": []sets.String{
				sets.NewString([]string{"disable", "publish"}...),
			},
			"spec.gc_spec.discovery_k8s.access_info": []sets.String{
				sets.NewString([]string{"connection_info", "in_cluster", "kubeconfig_url"}...),
				sets.NewString([]string{"isolated", "reachable"}...),
			},
			"spec.gc_spec.discovery_k8s.access_info.connection_info.tls_info.ca_certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_k8s.access_info.connection_info.tls_info.certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_k8s.access_info.connection_info.tls_info.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_k8s.access_info.kubeconfig_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_k8s.publish_info": []sets.String{
				sets.NewString([]string{"disable", "dns_delegation", "publish", "publish_fqdns"}...),
			},
			"spec.gc_spec.k8s": []sets.String{
				sets.NewString([]string{"connection_info", "in_cluster", "kubeconfig_url"}...),
				sets.NewString([]string{"isolated", "reachable"}...),
			},
			"spec.gc_spec.k8s.connection_info.tls_info.ca_certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.k8s.connection_info.tls_info.certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.k8s.connection_info.tls_info.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.k8s.kubeconfig_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_network", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.discovery.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"consul", "k8s"}...),
				sets.NewString([]string{"discovery_consul", "discovery_k8s"}...),
			},
			"spec.gc_spec.consul.connection_info.tls_info.ca_certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.consul.connection_info.tls_info.certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.consul.connection_info.tls_info.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.consul.http_basic_auth_info.passwd_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_consul.access_info.connection_info.tls_info.ca_certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_consul.access_info.connection_info.tls_info.certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_consul.access_info.connection_info.tls_info.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_consul.access_info.http_basic_auth_info.passwd_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_consul.publish_info": []sets.String{
				sets.NewString([]string{"disable", "publish"}...),
			},
			"spec.gc_spec.discovery_k8s.access_info": []sets.String{
				sets.NewString([]string{"connection_info", "in_cluster", "kubeconfig_url"}...),
				sets.NewString([]string{"isolated", "reachable"}...),
			},
			"spec.gc_spec.discovery_k8s.access_info.connection_info.tls_info.ca_certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_k8s.access_info.connection_info.tls_info.certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_k8s.access_info.connection_info.tls_info.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_k8s.access_info.kubeconfig_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.discovery_k8s.publish_info": []sets.String{
				sets.NewString([]string{"disable", "dns_delegation", "publish", "publish_fqdns"}...),
			},
			"spec.gc_spec.k8s": []sets.String{
				sets.NewString([]string{"connection_info", "in_cluster", "kubeconfig_url"}...),
				sets.NewString([]string{"isolated", "reachable"}...),
			},
			"spec.gc_spec.k8s.connection_info.tls_info.ca_certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.k8s.connection_info.tls_info.certificate_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.k8s.connection_info.tls_info.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.k8s.kubeconfig_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_network", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.dns_domain.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"route53", "verification_only", "volterra_managed"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.dns_domain.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"route53", "verification_only", "volterra_managed"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.dns_domain.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"route53", "verification_only", "volterra_managed"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.dns_domain.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"route53", "verification_only", "volterra_managed"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.endpoint.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"dns_name", "dns_name_advanced", "ip", "service_info"}...),
			},
			"spec.dns_name_advanced": []sets.String{
				sets.NewString([]string{"refresh_interval", "strict_ttl"}...),
			},
			"spec.service_info": []sets.String{
				sets.NewString([]string{"service_name", "service_selector"}...),
			},
			"spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_network", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.endpoint.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"dns_name", "dns_name_advanced", "ip", "service_info"}...),
			},
			"spec.dns_name_advanced": []sets.String{
				sets.NewString([]string{"refresh_interval", "strict_ttl"}...),
			},
			"spec.service_info": []sets.String{
				sets.NewString([]string{"service_name", "service_selector"}...),
			},
			"spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_network", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.endpoint.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"dns_name", "dns_name_advanced", "ip", "k8s_cluster_api_server", "serverless_service_name", "service_info"}...),
			},
			"spec.gc_spec.dns_name_advanced": []sets.String{
				sets.NewString([]string{"refresh_interval", "strict_ttl"}...),
			},
			"spec.gc_spec.service_info": []sets.String{
				sets.NewString([]string{"service_name", "service_selector"}...),
			},
			"spec.gc_spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_network", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.endpoint.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"dns_name", "dns_name_advanced", "ip", "k8s_cluster_api_server", "serverless_service_name", "service_info"}...),
			},
			"spec.gc_spec.dns_name_advanced": []sets.String{
				sets.NewString([]string{"refresh_interval", "strict_ttl"}...),
			},
			"spec.gc_spec.service_info": []sets.String{
				sets.NewString([]string{"service_name", "service_selector"}...),
			},
			"spec.gc_spec.where": []sets.String{
				sets.NewString([]string{"site", "virtual_network", "virtual_site"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.fast_acl.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"legacy_acl", "re_acl", "site_acl"}...),
			},
			"spec.legacy_acl.destination_type": []sets.String{
				sets.NewString([]string{"all_services", "destination_ip_address", "interface_services", "selected_vip_address", "shared_vip_services", "vip_services"}...),
			},
			"spec.legacy_acl.destination_type.destination_ip_address.address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.legacy_acl.destination_type.destination_ip_address.ports": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
			"spec.legacy_acl.destination_type.selected_vip_address.address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.legacy_acl.network_type": []sets.String{
				sets.NewString([]string{"public", "site_local", "site_local_inside"}...),
			},
			"spec.re_acl": []sets.String{
				sets.NewString([]string{"all_public_vips", "default_tenant_vip", "selected_tenant_vip"}...),
			},
			"spec.re_acl.fast_acl_rules": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix"}...),
			},
			"spec.re_acl.fast_acl_rules.action": []sets.String{
				sets.NewString([]string{"policer_action", "protocol_policer_action", "simple_action"}...),
			},
			"spec.re_acl.fast_acl_rules.port": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
			"spec.site_acl": []sets.String{
				sets.NewString([]string{"all_services", "interface_services", "vip_services"}...),
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.site_acl.fast_acl_rules": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix"}...),
			},
			"spec.site_acl.fast_acl_rules.action": []sets.String{
				sets.NewString([]string{"policer_action", "protocol_policer_action", "simple_action"}...),
			},
			"spec.site_acl.fast_acl_rules.port": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.fast_acl.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"legacy_acl", "re_acl", "site_acl"}...),
			},
			"spec.legacy_acl.destination_type": []sets.String{
				sets.NewString([]string{"all_services", "destination_ip_address", "interface_services", "selected_vip_address", "shared_vip_services", "vip_services"}...),
			},
			"spec.legacy_acl.destination_type.destination_ip_address.address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.legacy_acl.destination_type.destination_ip_address.ports": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
			"spec.legacy_acl.destination_type.selected_vip_address.address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.legacy_acl.network_type": []sets.String{
				sets.NewString([]string{"public", "site_local", "site_local_inside"}...),
			},
			"spec.re_acl": []sets.String{
				sets.NewString([]string{"all_public_vips", "default_tenant_vip", "selected_tenant_vip"}...),
			},
			"spec.re_acl.fast_acl_rules": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix"}...),
			},
			"spec.re_acl.fast_acl_rules.action": []sets.String{
				sets.NewString([]string{"policer_action", "protocol_policer_action", "simple_action"}...),
			},
			"spec.re_acl.fast_acl_rules.port": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
			"spec.site_acl": []sets.String{
				sets.NewString([]string{"all_services", "interface_services", "vip_services"}...),
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.site_acl.fast_acl_rules": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix"}...),
			},
			"spec.site_acl.fast_acl_rules.action": []sets.String{
				sets.NewString([]string{"policer_action", "protocol_policer_action", "simple_action"}...),
			},
			"spec.site_acl.fast_acl_rules.port": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.fast_acl.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"legacy_acl", "re_acl", "site_acl"}...),
			},
			"spec.gc_spec.destination_type": []sets.String{
				sets.NewString([]string{"all_services", "destination_ip_address", "interface_services", "selected_vip_address", "shared_vip_services", "vip_services"}...),
			},
			"spec.gc_spec.destination_type.destination_ip_address.address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.destination_type.destination_ip_address.ports": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
			"spec.gc_spec.destination_type.selected_vip_address.address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.network_type": []sets.String{
				sets.NewString([]string{"public", "site_local", "site_local_inside"}...),
			},
			"spec.gc_spec.re_acl": []sets.String{
				sets.NewString([]string{"all_public_vips", "default_tenant_vip", "selected_tenant_vip"}...),
			},
			"spec.gc_spec.re_acl.fast_acl_rules": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix"}...),
			},
			"spec.gc_spec.re_acl.fast_acl_rules.action": []sets.String{
				sets.NewString([]string{"policer_action", "protocol_policer_action", "simple_action"}...),
			},
			"spec.gc_spec.re_acl.fast_acl_rules.port": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
			"spec.gc_spec.site_acl": []sets.String{
				sets.NewString([]string{"all_services", "interface_services", "vip_services"}...),
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.gc_spec.site_acl.fast_acl_rules": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix"}...),
			},
			"spec.gc_spec.site_acl.fast_acl_rules.action": []sets.String{
				sets.NewString([]string{"policer_action", "protocol_policer_action", "simple_action"}...),
			},
			"spec.gc_spec.site_acl.fast_acl_rules.port": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.fast_acl.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"legacy_acl", "re_acl", "site_acl"}...),
			},
			"spec.gc_spec.destination_type": []sets.String{
				sets.NewString([]string{"all_services", "destination_ip_address", "interface_services", "selected_vip_address", "shared_vip_services", "vip_services"}...),
			},
			"spec.gc_spec.destination_type.destination_ip_address.address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.destination_type.destination_ip_address.ports": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
			"spec.gc_spec.destination_type.selected_vip_address.address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.network_type": []sets.String{
				sets.NewString([]string{"public", "site_local", "site_local_inside"}...),
			},
			"spec.gc_spec.re_acl": []sets.String{
				sets.NewString([]string{"all_public_vips", "default_tenant_vip", "selected_tenant_vip"}...),
			},
			"spec.gc_spec.re_acl.fast_acl_rules": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix"}...),
			},
			"spec.gc_spec.re_acl.fast_acl_rules.action": []sets.String{
				sets.NewString([]string{"policer_action", "protocol_policer_action", "simple_action"}...),
			},
			"spec.gc_spec.re_acl.fast_acl_rules.port": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
			"spec.gc_spec.site_acl": []sets.String{
				sets.NewString([]string{"all_services", "interface_services", "vip_services"}...),
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.gc_spec.site_acl.fast_acl_rules": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix"}...),
			},
			"spec.gc_spec.site_acl.fast_acl_rules.action": []sets.String{
				sets.NewString([]string{"policer_action", "protocol_policer_action", "simple_action"}...),
			},
			"spec.gc_spec.site_acl.fast_acl_rules.port": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.fast_acl_rule.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix"}...),
			},
			"spec.action": []sets.String{
				sets.NewString([]string{"policer_action", "protocol_policer_action", "simple_action"}...),
			},
			"spec.port": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.fast_acl_rule.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix"}...),
			},
			"spec.action": []sets.String{
				sets.NewString([]string{"policer_action", "protocol_policer_action", "simple_action"}...),
			},
			"spec.port": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.fast_acl_rule.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix"}...),
			},
			"spec.gc_spec.action": []sets.String{
				sets.NewString([]string{"policer_action", "protocol_policer_action", "simple_action"}...),
			},
			"spec.gc_spec.port": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.fast_acl_rule.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix"}...),
			},
			"spec.gc_spec.action": []sets.String{
				sets.NewString([]string{"policer_action", "protocol_policer_action", "simple_action"}...),
			},
			"spec.gc_spec.port": []sets.String{
				sets.NewString([]string{"all", "dns", "user_defined"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.fleet.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"allow_all_usb", "deny_all_usb", "usb_policy"}...),
				sets.NewString([]string{"bond_device_list", "no_bond_devices"}...),
				sets.NewString([]string{"dc_cluster_group", "dc_cluster_group_inside", "no_dc_cluster_group"}...),
				sets.NewString([]string{"default_config", "device_list", "interface_list"}...),
				sets.NewString([]string{"default_storage_class", "storage_class_list"}...),
				sets.NewString([]string{"disable_gpu", "enable_gpu", "enable_vgpu"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
				sets.NewString([]string{"no_storage_device", "storage_device_list"}...),
				sets.NewString([]string{"no_storage_interfaces", "storage_interface_list"}...),
				sets.NewString([]string{"no_storage_static_routes", "storage_static_routes"}...),
			},
			"spec.bond_device_list.bond_devices": []sets.String{
				sets.NewString([]string{"active_backup", "lacp"}...),
			},
			"spec.device_list.devices": []sets.String{
				sets.NewString([]string{"network_device"}...),
			},
			"spec.storage_class_list.storage_classes": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.storage_device_list.storage_devices": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident": []sets.String{
				sets.NewString([]string{"netapp_backend_ontap_nas", "netapp_backend_ontap_san"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
				sets.NewString([]string{"no_chap", "use_chap"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_target_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
			},
			"spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
				sets.NewString([]string{"nfs_endpoint_dns_name", "nfs_endpoint_ip"}...),
			},
			"spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_static_routes.storage_routes.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.storage_static_routes.storage_routes.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.fleet.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"allow_all_usb", "deny_all_usb", "usb_policy"}...),
				sets.NewString([]string{"bond_device_list", "no_bond_devices"}...),
				sets.NewString([]string{"dc_cluster_group", "dc_cluster_group_inside", "no_dc_cluster_group"}...),
				sets.NewString([]string{"default_config", "device_list", "interface_list"}...),
				sets.NewString([]string{"default_storage_class", "storage_class_list"}...),
				sets.NewString([]string{"disable_gpu", "enable_gpu", "enable_vgpu"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
				sets.NewString([]string{"no_storage_device", "storage_device_list"}...),
				sets.NewString([]string{"no_storage_interfaces", "storage_interface_list"}...),
				sets.NewString([]string{"no_storage_static_routes", "storage_static_routes"}...),
			},
			"spec.bond_device_list.bond_devices": []sets.String{
				sets.NewString([]string{"active_backup", "lacp"}...),
			},
			"spec.device_list.devices": []sets.String{
				sets.NewString([]string{"network_device"}...),
			},
			"spec.storage_class_list.storage_classes": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.storage_device_list.storage_devices": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident": []sets.String{
				sets.NewString([]string{"netapp_backend_ontap_nas", "netapp_backend_ontap_san"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
				sets.NewString([]string{"no_chap", "use_chap"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_target_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
			},
			"spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
				sets.NewString([]string{"nfs_endpoint_dns_name", "nfs_endpoint_ip"}...),
			},
			"spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.storage_static_routes.storage_routes.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.storage_static_routes.storage_routes.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.fleet.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"allow_all_usb", "deny_all_usb", "usb_policy"}...),
				sets.NewString([]string{"bond_device_list", "no_bond_devices"}...),
				sets.NewString([]string{"dc_cluster_group", "dc_cluster_group_inside", "no_dc_cluster_group"}...),
				sets.NewString([]string{"default_interfaces", "interface_list", "legacy_devices"}...),
				sets.NewString([]string{"default_storage_class", "storage_class_list"}...),
				sets.NewString([]string{"disable_flow_export", "enable_flow_export"}...),
				sets.NewString([]string{"disable_gpu", "enable_gpu", "enable_vgpu"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
				sets.NewString([]string{"no_storage_device", "storage_device_list"}...),
				sets.NewString([]string{"no_storage_interfaces", "storage_interface_list"}...),
				sets.NewString([]string{"no_storage_static_routes", "storage_static_routes"}...),
			},
			"spec.gc_spec.bond_device_list.bond_devices": []sets.String{
				sets.NewString([]string{"active_backup", "lacp"}...),
			},
			"spec.gc_spec.devices": []sets.String{
				sets.NewString([]string{"network_device"}...),
			},
			"spec.gc_spec.local_control_plane": []sets.String{
				sets.NewString([]string{"inside_vn", "outside_vn"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers": []sets.String{
				sets.NewString([]string{"external", "internal"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.external": []sets.String{
				sets.NewString([]string{"address", "default_gateway", "from_site", "subnet_begin_offset", "subnet_end_offset"}...),
				sets.NewString([]string{"inside_interfaces", "interface", "interface_list", "outside_interfaces"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.external.family_inet": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal": []sets.String{
				sets.NewString([]string{"address", "dns_name", "from_site"}...),
				sets.NewString([]string{"disable_mtls", "enable_mtls"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_inet6vpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_inetvpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_inetvpn.enable": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_rtarget": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.storage_class_list.storage_classes": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident": []sets.String{
				sets.NewString([]string{"netapp_backend_ontap_nas", "netapp_backend_ontap_san"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
				sets.NewString([]string{"no_chap", "use_chap"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_target_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
				sets.NewString([]string{"nfs_endpoint_dns_name", "nfs_endpoint_ip"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_static_routes.storage_routes.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.storage_static_routes.storage_routes.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.fleet.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"allow_all_usb", "deny_all_usb", "usb_policy"}...),
				sets.NewString([]string{"bond_device_list", "no_bond_devices"}...),
				sets.NewString([]string{"dc_cluster_group", "dc_cluster_group_inside", "no_dc_cluster_group"}...),
				sets.NewString([]string{"default_interfaces", "interface_list", "legacy_devices"}...),
				sets.NewString([]string{"default_storage_class", "storage_class_list"}...),
				sets.NewString([]string{"disable_flow_export", "enable_flow_export"}...),
				sets.NewString([]string{"disable_gpu", "enable_gpu", "enable_vgpu"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
				sets.NewString([]string{"no_storage_device", "storage_device_list"}...),
				sets.NewString([]string{"no_storage_interfaces", "storage_interface_list"}...),
				sets.NewString([]string{"no_storage_static_routes", "storage_static_routes"}...),
			},
			"spec.gc_spec.bond_device_list.bond_devices": []sets.String{
				sets.NewString([]string{"active_backup", "lacp"}...),
			},
			"spec.gc_spec.devices": []sets.String{
				sets.NewString([]string{"network_device"}...),
			},
			"spec.gc_spec.local_control_plane": []sets.String{
				sets.NewString([]string{"inside_vn", "outside_vn"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers": []sets.String{
				sets.NewString([]string{"external", "internal"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.external": []sets.String{
				sets.NewString([]string{"address", "default_gateway", "from_site", "subnet_begin_offset", "subnet_end_offset"}...),
				sets.NewString([]string{"inside_interfaces", "interface", "interface_list", "outside_interfaces"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.external.family_inet": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal": []sets.String{
				sets.NewString([]string{"address", "dns_name", "from_site"}...),
				sets.NewString([]string{"disable_mtls", "enable_mtls"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_inet6vpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_inetvpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_inetvpn.enable": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_rtarget": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.storage_class_list.storage_classes": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident": []sets.String{
				sets.NewString([]string{"netapp_backend_ontap_nas", "netapp_backend_ontap_san"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
				sets.NewString([]string{"no_chap", "use_chap"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_target_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
				sets.NewString([]string{"nfs_endpoint_dns_name", "nfs_endpoint_ip"}...),
			},
			"spec.gc_spec.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.storage_static_routes.storage_routes.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.storage_static_routes.storage_routes.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.flow_exporter.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.flow_collector": []sets.String{
				sets.NewString([]string{"ipfix_collector_parameters"}...),
			},
			"spec.gc_spec.flow_collector.collector_end_point": []sets.String{
				sets.NewString([]string{"collector_ip", "collector_service_name"}...),
				sets.NewString([]string{"site_local_inside_network", "site_local_network"}...),
			},
			"spec.gc_spec.flow_collector.collector_end_point.collector_ip": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.flow_exporter.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.flow_collector": []sets.String{
				sets.NewString([]string{"ipfix_collector_parameters"}...),
			},
			"spec.gc_spec.flow_collector.collector_end_point": []sets.String{
				sets.NewString([]string{"collector_ip", "collector_service_name"}...),
				sets.NewString([]string{"site_local_inside_network", "site_local_network"}...),
			},
			"spec.gc_spec.flow_collector.collector_end_point.collector_ip": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.healthcheck.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"http_health_check", "tcp_health_check"}...),
			},
			"spec.http_health_check": []sets.String{
				sets.NewString([]string{"host_header", "use_origin_server_name"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.healthcheck.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"http_health_check", "tcp_health_check"}...),
			},
			"spec.http_health_check": []sets.String{
				sets.NewString([]string{"host_header", "use_origin_server_name"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.healthcheck.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.http_health_check": []sets.String{
				sets.NewString([]string{"host_header", "use_origin_server_name"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.healthcheck.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.http_health_check": []sets.String{
				sets.NewString([]string{"host_header", "use_origin_server_name"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_cluster.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"cluster_wide_app_list", "no_cluster_wide_apps"}...),
				sets.NewString([]string{"global_access_enable", "no_global_access"}...),
				sets.NewString([]string{"insecure_registry_list", "no_insecure_registries"}...),
				sets.NewString([]string{"local_access_config", "no_local_access"}...),
				sets.NewString([]string{"use_custom_cluster_role_bindings", "use_default_cluster_role_bindings"}...),
				sets.NewString([]string{"use_custom_cluster_role_list", "use_default_cluster_roles"}...),
				sets.NewString([]string{"use_custom_psp_list", "use_default_psp"}...),
			},
			"spec.cluster_wide_app_list.cluster_wide_apps": []sets.String{
				sets.NewString([]string{"argo_cd", "dashboard", "metrics_server"}...),
			},
			"spec.cluster_wide_app_list.cluster_wide_apps.argo_cd.local_domain": []sets.String{
				sets.NewString([]string{"default_port", "port"}...),
			},
			"spec.cluster_wide_app_list.cluster_wide_apps.argo_cd.local_domain.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.local_access_config": []sets.String{
				sets.NewString([]string{"default_port", "port"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_cluster.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"cluster_wide_app_list", "no_cluster_wide_apps"}...),
				sets.NewString([]string{"global_access_enable", "no_global_access"}...),
				sets.NewString([]string{"insecure_registry_list", "no_insecure_registries"}...),
				sets.NewString([]string{"local_access_config", "no_local_access"}...),
				sets.NewString([]string{"use_custom_cluster_role_bindings", "use_default_cluster_role_bindings"}...),
				sets.NewString([]string{"use_custom_cluster_role_list", "use_default_cluster_roles"}...),
				sets.NewString([]string{"use_custom_psp_list", "use_default_psp"}...),
			},
			"spec.cluster_wide_app_list.cluster_wide_apps": []sets.String{
				sets.NewString([]string{"argo_cd", "dashboard", "metrics_server"}...),
			},
			"spec.cluster_wide_app_list.cluster_wide_apps.argo_cd.local_domain": []sets.String{
				sets.NewString([]string{"default_port", "port"}...),
			},
			"spec.cluster_wide_app_list.cluster_wide_apps.argo_cd.local_domain.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.local_access_config": []sets.String{
				sets.NewString([]string{"default_port", "port"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_cluster.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"cluster_wide_app_list", "no_cluster_wide_apps"}...),
				sets.NewString([]string{"global_access_enable", "no_global_access"}...),
				sets.NewString([]string{"insecure_registry_list", "no_insecure_registries"}...),
				sets.NewString([]string{"local_access_config", "no_local_access"}...),
				sets.NewString([]string{"use_custom_cluster_role_bindings", "use_default_cluster_role_bindings"}...),
				sets.NewString([]string{"use_custom_cluster_role_list", "use_default_cluster_roles"}...),
				sets.NewString([]string{"use_custom_psp_list", "use_default_psp"}...),
			},
			"spec.gc_spec.cluster_wide_app_list.cluster_wide_apps": []sets.String{
				sets.NewString([]string{"argo_cd", "dashboard", "metrics_server"}...),
			},
			"spec.gc_spec.cluster_wide_app_list.cluster_wide_apps.argo_cd.local_domain": []sets.String{
				sets.NewString([]string{"default_port", "port"}...),
			},
			"spec.gc_spec.cluster_wide_app_list.cluster_wide_apps.argo_cd.local_domain.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.local_access_config": []sets.String{
				sets.NewString([]string{"default_port", "port"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_cluster.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"cluster_wide_app_list", "no_cluster_wide_apps"}...),
				sets.NewString([]string{"global_access_enable", "no_global_access"}...),
				sets.NewString([]string{"insecure_registry_list", "no_insecure_registries"}...),
				sets.NewString([]string{"local_access_config", "no_local_access"}...),
				sets.NewString([]string{"use_custom_cluster_role_bindings", "use_default_cluster_role_bindings"}...),
				sets.NewString([]string{"use_custom_cluster_role_list", "use_default_cluster_roles"}...),
				sets.NewString([]string{"use_custom_psp_list", "use_default_psp"}...),
			},
			"spec.gc_spec.cluster_wide_app_list.cluster_wide_apps": []sets.String{
				sets.NewString([]string{"argo_cd", "dashboard", "metrics_server"}...),
			},
			"spec.gc_spec.cluster_wide_app_list.cluster_wide_apps.argo_cd.local_domain": []sets.String{
				sets.NewString([]string{"default_port", "port"}...),
			},
			"spec.gc_spec.cluster_wide_app_list.cluster_wide_apps.argo_cd.local_domain.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.local_access_config": []sets.String{
				sets.NewString([]string{"default_port", "port"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_cluster_role.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"k8s_cluster_role_selector", "policy_rule_list", "yaml"}...),
			},
			"spec.policy_rule_list.policy_rule": []sets.String{
				sets.NewString([]string{"non_resource_url_list", "resource_list"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_cluster_role.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"k8s_cluster_role_selector", "policy_rule_list", "yaml"}...),
			},
			"spec.policy_rule_list.policy_rule": []sets.String{
				sets.NewString([]string{"non_resource_url_list", "resource_list"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_cluster_role.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"k8s_cluster_role_selector", "policy_rule_list", "yaml"}...),
			},
			"spec.gc_spec.policy_rule_list.policy_rule": []sets.String{
				sets.NewString([]string{"non_resource_url_list", "resource_list"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_cluster_role.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"k8s_cluster_role_selector", "policy_rule_list", "yaml"}...),
			},
			"spec.gc_spec.policy_rule_list.policy_rule": []sets.String{
				sets.NewString([]string{"non_resource_url_list", "resource_list"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_cluster_role_binding.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.subjects": []sets.String{
				sets.NewString([]string{"group", "service_account", "user"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_cluster_role_binding.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.subjects": []sets.String{
				sets.NewString([]string{"group", "service_account", "user"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_cluster_role_binding.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.subjects": []sets.String{
				sets.NewString([]string{"group", "service_account", "user"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_cluster_role_binding.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.subjects": []sets.String{
				sets.NewString([]string{"group", "service_account", "user"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_pod_security_policy.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"psp_spec", "yaml"}...),
			},
			"spec.psp_spec": []sets.String{
				sets.NewString([]string{"allowed_capabilities", "no_allowed_capabilities"}...),
				sets.NewString([]string{"default_capabilities", "no_default_capabilities"}...),
				sets.NewString([]string{"drop_capabilities", "no_drop_capabilities"}...),
				sets.NewString([]string{"fs_group_strategy_options", "no_fs_groups"}...),
				sets.NewString([]string{"no_run_as_group", "run_as_group"}...),
				sets.NewString([]string{"no_run_as_user", "run_as_user"}...),
				sets.NewString([]string{"no_runtime_class", "runtime_class"}...),
				sets.NewString([]string{"no_se_linux_options", "se_linux_options"}...),
				sets.NewString([]string{"no_supplemental_groups", "supplemental_groups"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_pod_security_policy.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"psp_spec", "yaml"}...),
			},
			"spec.psp_spec": []sets.String{
				sets.NewString([]string{"allowed_capabilities", "no_allowed_capabilities"}...),
				sets.NewString([]string{"default_capabilities", "no_default_capabilities"}...),
				sets.NewString([]string{"drop_capabilities", "no_drop_capabilities"}...),
				sets.NewString([]string{"fs_group_strategy_options", "no_fs_groups"}...),
				sets.NewString([]string{"no_run_as_group", "run_as_group"}...),
				sets.NewString([]string{"no_run_as_user", "run_as_user"}...),
				sets.NewString([]string{"no_runtime_class", "runtime_class"}...),
				sets.NewString([]string{"no_se_linux_options", "se_linux_options"}...),
				sets.NewString([]string{"no_supplemental_groups", "supplemental_groups"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_pod_security_policy.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"psp_spec", "yaml"}...),
			},
			"spec.gc_spec.psp_spec": []sets.String{
				sets.NewString([]string{"allowed_capabilities", "no_allowed_capabilities"}...),
				sets.NewString([]string{"default_capabilities", "no_default_capabilities"}...),
				sets.NewString([]string{"drop_capabilities", "no_drop_capabilities"}...),
				sets.NewString([]string{"fs_group_strategy_options", "no_fs_groups"}...),
				sets.NewString([]string{"no_run_as_group", "run_as_group"}...),
				sets.NewString([]string{"no_run_as_user", "run_as_user"}...),
				sets.NewString([]string{"no_runtime_class", "runtime_class"}...),
				sets.NewString([]string{"no_se_linux_options", "se_linux_options"}...),
				sets.NewString([]string{"no_supplemental_groups", "supplemental_groups"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.k8s_pod_security_policy.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"psp_spec", "yaml"}...),
			},
			"spec.gc_spec.psp_spec": []sets.String{
				sets.NewString([]string{"allowed_capabilities", "no_allowed_capabilities"}...),
				sets.NewString([]string{"default_capabilities", "no_default_capabilities"}...),
				sets.NewString([]string{"drop_capabilities", "no_drop_capabilities"}...),
				sets.NewString([]string{"fs_group_strategy_options", "no_fs_groups"}...),
				sets.NewString([]string{"no_run_as_group", "run_as_group"}...),
				sets.NewString([]string{"no_run_as_user", "run_as_user"}...),
				sets.NewString([]string{"no_runtime_class", "runtime_class"}...),
				sets.NewString([]string{"no_se_linux_options", "se_linux_options"}...),
				sets.NewString([]string{"no_supplemental_groups", "supplemental_groups"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log.CustomAPI.AccessLogAggregationQuery"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"aggs": []sets.String{
				sets.NewString([]string{"cardinality_aggregation", "date_aggregation", "field_aggregation"}...),
			},
			"aggs.date_aggregation.sub_aggs": []sets.String{
				sets.NewString([]string{"field_aggregation"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log.CustomAPI.AccessLogQueryV2"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"aggs": []sets.String{
				sets.NewString([]string{"cardinality_aggregation", "date_aggregation", "field_aggregation"}...),
			},
			"aggs.date_aggregation.sub_aggs": []sets.String{
				sets.NewString([]string{"field_aggregation"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log.CustomAPI.AuditLogAggregationQuery"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"aggs": []sets.String{
				sets.NewString([]string{"date_aggregation", "field_aggregation"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log.CustomAPI.AuditLogQueryV2"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"aggs": []sets.String{
				sets.NewString([]string{"date_aggregation", "field_aggregation"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log.CustomAPI.FirewallLogAggregationQuery"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"aggs": []sets.String{
				sets.NewString([]string{"cardinality_aggregation", "date_aggregation", "field_aggregation"}...),
			},
			"aggs.date_aggregation.sub_aggs": []sets.String{
				sets.NewString([]string{"field_aggregation"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log.CustomAPI.FirewallLogQuery"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"aggs": []sets.String{
				sets.NewString([]string{"cardinality_aggregation", "date_aggregation", "field_aggregation"}...),
			},
			"aggs.date_aggregation.sub_aggs": []sets.String{
				sets.NewString([]string{"field_aggregation"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log.CustomAPI.K8SAuditLogAggregationQuery"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"aggs": []sets.String{
				sets.NewString([]string{"date_aggregation"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log.CustomAPI.K8SAuditLogQuery"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"aggs": []sets.String{
				sets.NewString([]string{"date_aggregation"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log.CustomAPI.K8SEventsAggregationQuery"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"aggs": []sets.String{
				sets.NewString([]string{"date_aggregation", "field_aggregation"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log.CustomAPI.K8SEventsQuery"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"aggs": []sets.String{
				sets.NewString([]string{"date_aggregation", "field_aggregation"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log.CustomAPI.VK8SAuditLogAggregationQuery"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"aggs": []sets.String{
				sets.NewString([]string{"date_aggregation"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log.CustomAPI.VK8SAuditLogQuery"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"aggs": []sets.String{
				sets.NewString([]string{"date_aggregation"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log.CustomAPI.VK8SEventsAggregationQuery"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"aggs": []sets.String{
				sets.NewString([]string{"date_aggregation", "field_aggregation"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log.CustomAPI.VK8SEventsQuery"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"aggs": []sets.String{
				sets.NewString([]string{"date_aggregation", "field_aggregation"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log_receiver.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"data_dog", "splunk", "syslog"}...),
				sets.NewString([]string{"log_receiver_sites", "site_local"}...),
			},
			"spec.data_dog": []sets.String{
				sets.NewString([]string{"compression_disabled", "compression_enabled"}...),
				sets.NewString([]string{"datadog_default_server", "server_name"}...),
				sets.NewString([]string{"default_port", "port"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_ca"}...),
			},
			"spec.data_dog.datadog_api_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.splunk": []sets.String{
				sets.NewString([]string{"splunk_server_ip", "splunk_server_name", "splunk_server_tls"}...),
			},
			"spec.splunk.splunk_hec_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.splunk.splunk_server_tls": []sets.String{
				sets.NewString([]string{"default_https_port", "default_syslog_tls_port", "port"}...),
				sets.NewString([]string{"mtls_disabled", "mtls_enable"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_ca"}...),
			},
			"spec.splunk.splunk_server_tls.mtls_enable.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.syslog": []sets.String{
				sets.NewString([]string{"syslog_rfc3164", "syslog_rfc5424"}...),
				sets.NewString([]string{"tcp_server", "tls_server", "udp_server"}...),
			},
			"spec.syslog.tls_server": []sets.String{
				sets.NewString([]string{"default_https_port", "default_syslog_tls_port", "port"}...),
				sets.NewString([]string{"mtls_disabled", "mtls_enable"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_ca"}...),
			},
			"spec.syslog.tls_server.mtls_enable.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log_receiver.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"data_dog", "splunk", "syslog"}...),
				sets.NewString([]string{"log_receiver_sites", "site_local"}...),
			},
			"spec.data_dog": []sets.String{
				sets.NewString([]string{"compression_disabled", "compression_enabled"}...),
				sets.NewString([]string{"datadog_default_server", "server_name"}...),
				sets.NewString([]string{"default_port", "port"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_ca"}...),
			},
			"spec.data_dog.datadog_api_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.splunk": []sets.String{
				sets.NewString([]string{"splunk_server_ip", "splunk_server_name", "splunk_server_tls"}...),
			},
			"spec.splunk.splunk_hec_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.splunk.splunk_server_tls": []sets.String{
				sets.NewString([]string{"default_https_port", "default_syslog_tls_port", "port"}...),
				sets.NewString([]string{"mtls_disabled", "mtls_enable"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_ca"}...),
			},
			"spec.splunk.splunk_server_tls.mtls_enable.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.syslog": []sets.String{
				sets.NewString([]string{"syslog_rfc3164", "syslog_rfc5424"}...),
				sets.NewString([]string{"tcp_server", "tls_server", "udp_server"}...),
			},
			"spec.syslog.tls_server": []sets.String{
				sets.NewString([]string{"default_https_port", "default_syslog_tls_port", "port"}...),
				sets.NewString([]string{"mtls_disabled", "mtls_enable"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_ca"}...),
			},
			"spec.syslog.tls_server.mtls_enable.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log_receiver.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"data_dog", "splunk", "syslog"}...),
				sets.NewString([]string{"log_receiver_sites", "site_local"}...),
			},
			"spec.gc_spec.data_dog": []sets.String{
				sets.NewString([]string{"compression_disabled", "compression_enabled"}...),
				sets.NewString([]string{"datadog_default_server", "server_name"}...),
				sets.NewString([]string{"default_port", "port"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_ca"}...),
			},
			"spec.gc_spec.data_dog.datadog_api_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.splunk": []sets.String{
				sets.NewString([]string{"splunk_server_ip", "splunk_server_name", "splunk_server_tls"}...),
			},
			"spec.gc_spec.splunk.splunk_hec_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.splunk.splunk_server_tls": []sets.String{
				sets.NewString([]string{"default_https_port", "default_syslog_tls_port", "port"}...),
				sets.NewString([]string{"mtls_disabled", "mtls_enable"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_ca"}...),
			},
			"spec.gc_spec.splunk.splunk_server_tls.mtls_enable.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.syslog": []sets.String{
				sets.NewString([]string{"syslog_rfc3164", "syslog_rfc5424"}...),
				sets.NewString([]string{"tcp_server", "tls_server", "udp_server"}...),
			},
			"spec.gc_spec.syslog.tls_server": []sets.String{
				sets.NewString([]string{"default_https_port", "default_syslog_tls_port", "port"}...),
				sets.NewString([]string{"mtls_disabled", "mtls_enable"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_ca"}...),
			},
			"spec.gc_spec.syslog.tls_server.mtls_enable.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.log_receiver.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"data_dog", "splunk", "syslog"}...),
				sets.NewString([]string{"log_receiver_sites", "site_local"}...),
			},
			"spec.gc_spec.data_dog": []sets.String{
				sets.NewString([]string{"compression_disabled", "compression_enabled"}...),
				sets.NewString([]string{"datadog_default_server", "server_name"}...),
				sets.NewString([]string{"default_port", "port"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_ca"}...),
			},
			"spec.gc_spec.data_dog.datadog_api_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.splunk": []sets.String{
				sets.NewString([]string{"splunk_server_ip", "splunk_server_name", "splunk_server_tls"}...),
			},
			"spec.gc_spec.splunk.splunk_hec_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.splunk.splunk_server_tls": []sets.String{
				sets.NewString([]string{"default_https_port", "default_syslog_tls_port", "port"}...),
				sets.NewString([]string{"mtls_disabled", "mtls_enable"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_ca"}...),
			},
			"spec.gc_spec.splunk.splunk_server_tls.mtls_enable.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.syslog": []sets.String{
				sets.NewString([]string{"syslog_rfc3164", "syslog_rfc5424"}...),
				sets.NewString([]string{"tcp_server", "tls_server", "udp_server"}...),
			},
			"spec.gc_spec.syslog.tls_server": []sets.String{
				sets.NewString([]string{"default_https_port", "default_syslog_tls_port", "port"}...),
				sets.NewString([]string{"mtls_disabled", "mtls_enable"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_ca"}...),
			},
			"spec.gc_spec.syslog.tls_server.mtls_enable.key_url": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.malicious_user_mitigation.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.mitigation_type.rules.mitigation_action": []sets.String{
				sets.NewString([]string{"alert_only", "block_temporarily", "captcha_challenge", "javascript_challenge", "none"}...),
			},
			"spec.mitigation_type.rules.threat_level": []sets.String{
				sets.NewString([]string{"high", "low", "medium"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.malicious_user_mitigation.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.mitigation_type.rules.mitigation_action": []sets.String{
				sets.NewString([]string{"alert_only", "block_temporarily", "captcha_challenge", "javascript_challenge", "none"}...),
			},
			"spec.mitigation_type.rules.threat_level": []sets.String{
				sets.NewString([]string{"high", "low", "medium"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.malicious_user_mitigation.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.mitigation_type.rules.mitigation_action": []sets.String{
				sets.NewString([]string{"alert_only", "block_temporarily", "captcha_challenge", "javascript_challenge", "none"}...),
			},
			"spec.gc_spec.mitigation_type.rules.threat_level": []sets.String{
				sets.NewString([]string{"high", "low", "medium"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.malicious_user_mitigation.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.mitigation_type.rules.mitigation_action": []sets.String{
				sets.NewString([]string{"alert_only", "block_temporarily", "captcha_challenge", "javascript_challenge", "none"}...),
			},
			"spec.gc_spec.mitigation_type.rules.threat_level": []sets.String{
				sets.NewString([]string{"high", "low", "medium"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.namespace.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.proxy_sub_cas.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.namespace.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.proxy_sub_cas.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_connector.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "sli_to_global_snat", "sli_to_slo_dr", "sli_to_slo_snat", "slo_to_global_dr", "slo_to_global_snat"}...),
			},
			"spec.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.sli_to_global_snat.snat_config": []sets.String{
				sets.NewString([]string{"default_gw_snat", "dynamic_routing"}...),
				sets.NewString([]string{"interface_ip", "snat_pool", "snat_pool_allocator"}...),
			},
			"spec.sli_to_slo_snat": []sets.String{
				sets.NewString([]string{"default_gw_snat", "dynamic_routing"}...),
				sets.NewString([]string{"interface_ip", "snat_pool", "snat_pool_allocator"}...),
			},
			"spec.slo_to_global_snat.snat_config": []sets.String{
				sets.NewString([]string{"default_gw_snat", "dynamic_routing"}...),
				sets.NewString([]string{"interface_ip", "snat_pool", "snat_pool_allocator"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_connector.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "sli_to_global_snat", "sli_to_slo_dr", "sli_to_slo_snat", "slo_to_global_dr", "slo_to_global_snat"}...),
			},
			"spec.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.sli_to_global_snat.snat_config": []sets.String{
				sets.NewString([]string{"default_gw_snat", "dynamic_routing"}...),
				sets.NewString([]string{"interface_ip", "snat_pool", "snat_pool_allocator"}...),
			},
			"spec.sli_to_slo_snat": []sets.String{
				sets.NewString([]string{"default_gw_snat", "dynamic_routing"}...),
				sets.NewString([]string{"interface_ip", "snat_pool", "snat_pool_allocator"}...),
			},
			"spec.slo_to_global_snat.snat_config": []sets.String{
				sets.NewString([]string{"default_gw_snat", "dynamic_routing"}...),
				sets.NewString([]string{"interface_ip", "snat_pool", "snat_pool_allocator"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_connector.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_connector.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_firewall.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"active_fast_acls", "disable_fast_acl", "fast_acl_set"}...),
				sets.NewString([]string{"active_forward_proxy_policies", "disable_forward_proxy_policy", "forward_proxy_policy_set"}...),
				sets.NewString([]string{"active_network_policies", "disable_network_policy", "network_policy_set"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_firewall.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"active_fast_acls", "disable_fast_acl", "fast_acl_set"}...),
				sets.NewString([]string{"active_forward_proxy_policies", "disable_forward_proxy_policy", "forward_proxy_policy_set"}...),
				sets.NewString([]string{"active_network_policies", "disable_network_policy", "network_policy_set"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_firewall.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"active_fast_acls", "disable_fast_acl", "fast_acl_legacy_mode"}...),
				sets.NewString([]string{"active_forward_proxy_policies", "disable_forward_proxy_policy", "forward_proxy_policy_legacy_mode"}...),
				sets.NewString([]string{"active_network_policies", "disable_network_policy", "network_policy_legacy_mode"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_firewall.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"active_fast_acls", "disable_fast_acl", "fast_acl_legacy_mode"}...),
				sets.NewString([]string{"active_forward_proxy_policies", "disable_forward_proxy_policy", "forward_proxy_policy_legacy_mode"}...),
				sets.NewString([]string{"active_network_policies", "disable_network_policy", "network_policy_legacy_mode"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_interface.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"dedicated_interface", "dedicated_management_interface", "ethernet_interface", "legacy_interface", "tunnel_interface"}...),
			},
			"spec.dedicated_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
			},
			"spec.dedicated_management_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
			},
			"spec.ethernet_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"dhcp_client", "dhcp_server", "static_ip"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network", "srv6_network", "storage_network"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
				sets.NewString([]string{"no_ipv6_address", "static_ipv6_address"}...),
				sets.NewString([]string{"untagged", "vlan_id"}...),
			},
			"spec.ethernet_interface.dhcp_server": []sets.String{
				sets.NewString([]string{"automatic_from_end", "automatic_from_start", "interface_ip_map"}...),
			},
			"spec.ethernet_interface.dhcp_server.dhcp_networks": []sets.String{
				sets.NewString([]string{"dgw_address", "first_address", "last_address"}...),
				sets.NewString([]string{"dns_address", "same_as_dgw"}...),
				sets.NewString([]string{"network_prefix", "network_prefix_allocator"}...),
			},
			"spec.ethernet_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.ethernet_interface.static_ipv6_address": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.legacy_interface": []sets.String{
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
			},
			"spec.tunnel_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network"}...),
			},
			"spec.tunnel_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_interface.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"dedicated_interface", "dedicated_management_interface", "ethernet_interface", "legacy_interface", "tunnel_interface"}...),
			},
			"spec.dedicated_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
			},
			"spec.dedicated_management_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
			},
			"spec.ethernet_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"dhcp_client", "dhcp_server", "static_ip"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network", "srv6_network", "storage_network"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
				sets.NewString([]string{"no_ipv6_address", "static_ipv6_address"}...),
				sets.NewString([]string{"untagged", "vlan_id"}...),
			},
			"spec.ethernet_interface.dhcp_server": []sets.String{
				sets.NewString([]string{"automatic_from_end", "automatic_from_start", "interface_ip_map"}...),
			},
			"spec.ethernet_interface.dhcp_server.dhcp_networks": []sets.String{
				sets.NewString([]string{"dgw_address", "first_address", "last_address"}...),
				sets.NewString([]string{"dns_address", "same_as_dgw"}...),
				sets.NewString([]string{"network_prefix", "network_prefix_allocator"}...),
			},
			"spec.ethernet_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.ethernet_interface.static_ipv6_address": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.legacy_interface": []sets.String{
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
			},
			"spec.tunnel_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network"}...),
			},
			"spec.tunnel_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_interface.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"dedicated_interface", "dedicated_management_interface", "ethernet_interface", "legacy", "tunnel_interface"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
			},
			"spec.gc_spec.dedicated_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
			},
			"spec.gc_spec.dedicated_management_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
			},
			"spec.gc_spec.dhcp_server_params": []sets.String{
				sets.NewString([]string{"automatic_from_end", "automatic_from_start", "interface_ip_map"}...),
			},
			"spec.gc_spec.dhcp_server_params.dhcp_networks": []sets.String{
				sets.NewString([]string{"dgw_address", "first_address", "last_address"}...),
				sets.NewString([]string{"dns_address", "same_as_dgw"}...),
				sets.NewString([]string{"network_prefix", "network_prefix_allocator"}...),
			},
			"spec.gc_spec.ethernet_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"dhcp_client", "dhcp_server", "static_ip"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network", "srv6_network", "storage_network"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
				sets.NewString([]string{"no_ipv6_address", "static_ipv6_address"}...),
				sets.NewString([]string{"untagged", "vlan_id"}...),
			},
			"spec.gc_spec.ethernet_interface.dhcp_server": []sets.String{
				sets.NewString([]string{"automatic_from_end", "automatic_from_start", "interface_ip_map"}...),
			},
			"spec.gc_spec.ethernet_interface.dhcp_server.dhcp_networks": []sets.String{
				sets.NewString([]string{"dgw_address", "first_address", "last_address"}...),
				sets.NewString([]string{"dns_address", "same_as_dgw"}...),
				sets.NewString([]string{"network_prefix", "network_prefix_allocator"}...),
			},
			"spec.gc_spec.ethernet_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.ethernet_interface.static_ipv6_address": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.ipv6_static_addresses": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.tunnel_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network"}...),
			},
			"spec.gc_spec.tunnel_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_interface.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"dedicated_interface", "dedicated_management_interface", "ethernet_interface", "legacy", "tunnel_interface"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
			},
			"spec.gc_spec.dedicated_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
			},
			"spec.gc_spec.dedicated_management_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
			},
			"spec.gc_spec.dhcp_server_params": []sets.String{
				sets.NewString([]string{"automatic_from_end", "automatic_from_start", "interface_ip_map"}...),
			},
			"spec.gc_spec.dhcp_server_params.dhcp_networks": []sets.String{
				sets.NewString([]string{"dgw_address", "first_address", "last_address"}...),
				sets.NewString([]string{"dns_address", "same_as_dgw"}...),
				sets.NewString([]string{"network_prefix", "network_prefix_allocator"}...),
			},
			"spec.gc_spec.ethernet_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"dhcp_client", "dhcp_server", "static_ip"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network", "srv6_network", "storage_network"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
				sets.NewString([]string{"no_ipv6_address", "static_ipv6_address"}...),
				sets.NewString([]string{"untagged", "vlan_id"}...),
			},
			"spec.gc_spec.ethernet_interface.dhcp_server": []sets.String{
				sets.NewString([]string{"automatic_from_end", "automatic_from_start", "interface_ip_map"}...),
			},
			"spec.gc_spec.ethernet_interface.dhcp_server.dhcp_networks": []sets.String{
				sets.NewString([]string{"dgw_address", "first_address", "last_address"}...),
				sets.NewString([]string{"dns_address", "same_as_dgw"}...),
				sets.NewString([]string{"network_prefix", "network_prefix_allocator"}...),
			},
			"spec.gc_spec.ethernet_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.ethernet_interface.static_ipv6_address": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.ipv6_static_addresses": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.tunnel_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network"}...),
			},
			"spec.gc_spec.tunnel_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_policy.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.endpoint": []sets.String{
				sets.NewString([]string{"any", "inside_endpoints", "interface", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.rules.egress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.rules.ingress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_policy.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"legacy_rules", "rules"}...),
			},
			"spec.endpoint": []sets.String{
				sets.NewString([]string{"any", "inside_endpoints", "interface", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.rules.egress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.rules.ingress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_policy.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"legacy_rules", "rules"}...),
				sets.NewString([]string{"prefix", "prefix_selector"}...),
			},
			"spec.gc_spec.endpoint": []sets.String{
				sets.NewString([]string{"any", "inside_endpoints", "interface", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.gc_spec.rules.egress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.gc_spec.rules.ingress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_policy.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"legacy_rules", "rules"}...),
				sets.NewString([]string{"prefix", "prefix_selector"}...),
			},
			"spec.gc_spec.endpoint": []sets.String{
				sets.NewString([]string{"any", "inside_endpoints", "interface", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.gc_spec.rules.egress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.gc_spec.rules.ingress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_policy_rule.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix", "prefix_selector"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_policy_rule.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix", "prefix_selector"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_policy_rule.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix", "prefix_selector"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.network_policy_rule.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"ip_prefix_set", "prefix", "prefix_selector"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.protocol_policer.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.protocol_policer.protocol": []sets.String{
				sets.NewString([]string{"dns", "icmp", "tcp", "udp"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.protocol_policer.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.protocol_policer.protocol": []sets.String{
				sets.NewString([]string{"dns", "icmp", "tcp", "udp"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.protocol_policer.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.protocol_policer.protocol": []sets.String{
				sets.NewString([]string{"dns", "icmp", "tcp", "udp"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.protocol_policer.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.protocol_policer.protocol": []sets.String{
				sets.NewString([]string{"dns", "icmp", "tcp", "udp"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.registration.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.passport": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.registration.CustomAPI.RegistrationApprove"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"passport": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.registration.CustomAPI.RegistrationCreate"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.passport": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.registration.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.passport": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.registration.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.passport": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.route.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.routes": []sets.String{
				sets.NewString([]string{"route_destination", "route_direct_response", "route_redirect"}...),
			},
			"spec.routes.match.headers": []sets.String{
				sets.NewString([]string{"exact", "presence", "regex"}...),
			},
			"spec.routes.match.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.routes.match.query_params": []sets.String{
				sets.NewString([]string{"exact", "regex"}...),
			},
			"spec.routes.route_destination": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "host_rewrite"}...),
				sets.NewString([]string{"do_not_retract_cluster", "retract_cluster"}...),
			},
			"spec.routes.route_destination.hash_policy": []sets.String{
				sets.NewString([]string{"cookie", "header_name", "source_ip"}...),
			},
			"spec.routes.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.routes.waf_type": []sets.String{
				sets.NewString([]string{"app_firewall", "waf", "waf_rules"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.route.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.routes": []sets.String{
				sets.NewString([]string{"route_destination", "route_direct_response", "route_redirect"}...),
			},
			"spec.routes.match.headers": []sets.String{
				sets.NewString([]string{"exact", "presence", "regex"}...),
			},
			"spec.routes.match.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.routes.match.query_params": []sets.String{
				sets.NewString([]string{"exact", "regex"}...),
			},
			"spec.routes.route_destination": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "host_rewrite"}...),
				sets.NewString([]string{"do_not_retract_cluster", "retract_cluster"}...),
			},
			"spec.routes.route_destination.hash_policy": []sets.String{
				sets.NewString([]string{"cookie", "header_name", "source_ip"}...),
			},
			"spec.routes.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.routes.waf_type": []sets.String{
				sets.NewString([]string{"app_firewall", "waf", "waf_rules"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.route.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.routes": []sets.String{
				sets.NewString([]string{"route_destination", "route_direct_response", "route_redirect"}...),
			},
			"spec.gc_spec.routes.match.headers": []sets.String{
				sets.NewString([]string{"exact", "presence", "regex"}...),
			},
			"spec.gc_spec.routes.match.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.routes.match.query_params": []sets.String{
				sets.NewString([]string{"exact", "regex"}...),
			},
			"spec.gc_spec.routes.route_destination": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "host_rewrite"}...),
				sets.NewString([]string{"do_not_retract_cluster", "retract_cluster"}...),
			},
			"spec.gc_spec.routes.route_destination.hash_policy": []sets.String{
				sets.NewString([]string{"cookie", "header_name", "source_ip"}...),
			},
			"spec.gc_spec.routes.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.routes.waf_type": []sets.String{
				sets.NewString([]string{"app_firewall", "waf", "waf_rules"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.route.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.routes": []sets.String{
				sets.NewString([]string{"route_destination", "route_direct_response", "route_redirect"}...),
			},
			"spec.gc_spec.routes.match.headers": []sets.String{
				sets.NewString([]string{"exact", "presence", "regex"}...),
			},
			"spec.gc_spec.routes.match.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.routes.match.query_params": []sets.String{
				sets.NewString([]string{"exact", "regex"}...),
			},
			"spec.gc_spec.routes.route_destination": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "host_rewrite"}...),
				sets.NewString([]string{"do_not_retract_cluster", "retract_cluster"}...),
			},
			"spec.gc_spec.routes.route_destination.hash_policy": []sets.String{
				sets.NewString([]string{"cookie", "header_name", "source_ip"}...),
			},
			"spec.gc_spec.routes.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.routes.waf_type": []sets.String{
				sets.NewString([]string{"app_firewall", "waf", "waf_rules"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.secret_policy_rule.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"client_name", "client_name_matcher", "client_selector"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.secret_policy_rule.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"client_name", "client_name_matcher", "client_selector"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.secret_policy_rule.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"client_name", "client_name_matcher", "client_selector"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.secret_policy_rule.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"client_name", "client_name_matcher", "client_selector"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.service_policy.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"allow_all_requests", "allow_list", "deny_all_requests", "deny_list", "internally_generated", "legacy_rule_list", "rule_list"}...),
				sets.NewString([]string{"any_server", "server_name", "server_name_matcher", "server_selector"}...),
			},
			"spec.allow_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.deny_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.rule_list.rules.spec": []sets.String{
				sets.NewString([]string{"any_asn", "asn_list", "asn_matcher"}...),
				sets.NewString([]string{"any_client", "client_name", "client_name_matcher", "client_selector"}...),
				sets.NewString([]string{"any_dst_asn", "dst_asn_list", "dst_asn_matcher"}...),
				sets.NewString([]string{"any_dst_ip", "dst_ip_matcher", "dst_ip_prefix_list"}...),
				sets.NewString([]string{"any_ip", "ip_matcher", "ip_prefix_list"}...),
			},
			"spec.rule_list.rules.spec.arg_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.rule_list.rules.spec.cookie_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.rule_list.rules.spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.rule_list.rules.spec.query_params": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.rule_list.rules.spec.shape_protected_endpoint_action.mitigation": []sets.String{
				sets.NewString([]string{"alert", "block", "drop", "none", "redirect"}...),
			},
			"spec.rule_list.rules.spec.url_matcher.url_items": []sets.String{
				sets.NewString([]string{"domain_regex", "domain_value"}...),
				sets.NewString([]string{"path_prefix", "path_regex", "path_value"}...),
			},
			"spec.rule_list.rules.spec.waf_action": []sets.String{
				sets.NewString([]string{"app_firewall_detection_control", "none", "waf_in_monitoring_mode", "waf_inline_rule_control", "waf_rule_control", "waf_skip_processing"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.service_policy.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"allow_all_requests", "allow_list", "deny_all_requests", "deny_list", "internally_generated", "legacy_rule_list", "rule_list"}...),
				sets.NewString([]string{"any_server", "server_name", "server_name_matcher", "server_selector"}...),
			},
			"spec.allow_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.deny_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.rule_list.rules.spec": []sets.String{
				sets.NewString([]string{"any_asn", "asn_list", "asn_matcher"}...),
				sets.NewString([]string{"any_client", "client_name", "client_name_matcher", "client_selector"}...),
				sets.NewString([]string{"any_dst_asn", "dst_asn_list", "dst_asn_matcher"}...),
				sets.NewString([]string{"any_dst_ip", "dst_ip_matcher", "dst_ip_prefix_list"}...),
				sets.NewString([]string{"any_ip", "ip_matcher", "ip_prefix_list"}...),
			},
			"spec.rule_list.rules.spec.arg_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.rule_list.rules.spec.cookie_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.rule_list.rules.spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.rule_list.rules.spec.query_params": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.rule_list.rules.spec.shape_protected_endpoint_action.mitigation": []sets.String{
				sets.NewString([]string{"alert", "block", "drop", "none", "redirect"}...),
			},
			"spec.rule_list.rules.spec.url_matcher.url_items": []sets.String{
				sets.NewString([]string{"domain_regex", "domain_value"}...),
				sets.NewString([]string{"path_prefix", "path_regex", "path_value"}...),
			},
			"spec.rule_list.rules.spec.waf_action": []sets.String{
				sets.NewString([]string{"app_firewall_detection_control", "none", "waf_in_monitoring_mode", "waf_inline_rule_control", "waf_rule_control", "waf_skip_processing"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.service_policy.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"allow_all_requests", "allow_list", "deny_all_requests", "deny_list", "internally_generated", "legacy_rule_list", "rule_list"}...),
				sets.NewString([]string{"any_server", "server_name", "server_name_matcher", "server_selector"}...),
			},
			"spec.gc_spec.allow_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.gc_spec.deny_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.gc_spec.rule_list.rules.spec": []sets.String{
				sets.NewString([]string{"any_asn", "asn_list", "asn_matcher"}...),
				sets.NewString([]string{"any_client", "client_name", "client_name_matcher", "client_selector"}...),
				sets.NewString([]string{"any_dst_asn", "dst_asn_list", "dst_asn_matcher"}...),
				sets.NewString([]string{"any_dst_ip", "dst_ip_matcher", "dst_ip_prefix_list"}...),
				sets.NewString([]string{"any_ip", "ip_matcher", "ip_prefix_list"}...),
			},
			"spec.gc_spec.rule_list.rules.spec.arg_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.rule_list.rules.spec.cookie_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.rule_list.rules.spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.rule_list.rules.spec.query_params": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.rule_list.rules.spec.shape_protected_endpoint_action.mitigation": []sets.String{
				sets.NewString([]string{"alert", "block", "drop", "none", "redirect"}...),
			},
			"spec.gc_spec.rule_list.rules.spec.url_matcher.url_items": []sets.String{
				sets.NewString([]string{"domain_regex", "domain_value"}...),
				sets.NewString([]string{"path_prefix", "path_regex", "path_value"}...),
			},
			"spec.gc_spec.rule_list.rules.spec.waf_action": []sets.String{
				sets.NewString([]string{"app_firewall_detection_control", "none", "waf_in_monitoring_mode", "waf_inline_rule_control", "waf_rule_control", "waf_skip_processing"}...),
			},
			"spec.gc_spec.simple_rules.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.simple_rules.url_matcher.url_items": []sets.String{
				sets.NewString([]string{"domain_regex", "domain_value"}...),
				sets.NewString([]string{"path_prefix", "path_regex", "path_value"}...),
			},
			"spec.gc_spec.simple_rules.waf_action": []sets.String{
				sets.NewString([]string{"app_firewall_detection_control", "none", "waf_in_monitoring_mode", "waf_inline_rule_control", "waf_rule_control", "waf_skip_processing"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.service_policy.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"allow_all_requests", "allow_list", "deny_all_requests", "deny_list", "internally_generated", "legacy_rule_list", "rule_list"}...),
				sets.NewString([]string{"any_server", "server_name", "server_name_matcher", "server_selector"}...),
			},
			"spec.gc_spec.allow_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.gc_spec.deny_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.gc_spec.rule_list.rules.spec": []sets.String{
				sets.NewString([]string{"any_asn", "asn_list", "asn_matcher"}...),
				sets.NewString([]string{"any_client", "client_name", "client_name_matcher", "client_selector"}...),
				sets.NewString([]string{"any_dst_asn", "dst_asn_list", "dst_asn_matcher"}...),
				sets.NewString([]string{"any_dst_ip", "dst_ip_matcher", "dst_ip_prefix_list"}...),
				sets.NewString([]string{"any_ip", "ip_matcher", "ip_prefix_list"}...),
			},
			"spec.gc_spec.rule_list.rules.spec.arg_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.rule_list.rules.spec.cookie_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.rule_list.rules.spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.rule_list.rules.spec.query_params": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.rule_list.rules.spec.shape_protected_endpoint_action.mitigation": []sets.String{
				sets.NewString([]string{"alert", "block", "drop", "none", "redirect"}...),
			},
			"spec.gc_spec.rule_list.rules.spec.url_matcher.url_items": []sets.String{
				sets.NewString([]string{"domain_regex", "domain_value"}...),
				sets.NewString([]string{"path_prefix", "path_regex", "path_value"}...),
			},
			"spec.gc_spec.rule_list.rules.spec.waf_action": []sets.String{
				sets.NewString([]string{"app_firewall_detection_control", "none", "waf_in_monitoring_mode", "waf_inline_rule_control", "waf_rule_control", "waf_skip_processing"}...),
			},
			"spec.gc_spec.simple_rules.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.simple_rules.url_matcher.url_items": []sets.String{
				sets.NewString([]string{"domain_regex", "domain_value"}...),
				sets.NewString([]string{"path_prefix", "path_regex", "path_value"}...),
			},
			"spec.gc_spec.simple_rules.waf_action": []sets.String{
				sets.NewString([]string{"app_firewall_detection_control", "none", "waf_in_monitoring_mode", "waf_inline_rule_control", "waf_rule_control", "waf_skip_processing"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.service_policy_rule.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"any_asn", "asn_list", "asn_matcher"}...),
				sets.NewString([]string{"any_client", "client_name", "client_name_matcher", "client_selector"}...),
				sets.NewString([]string{"any_dst_asn", "dst_asn_list", "dst_asn_matcher"}...),
				sets.NewString([]string{"any_dst_ip", "dst_ip_matcher", "dst_ip_prefix_list"}...),
				sets.NewString([]string{"any_ip", "ip_matcher", "ip_prefix_list"}...),
			},
			"spec.arg_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.cookie_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.query_params": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.shape_protected_endpoint_action.mitigation": []sets.String{
				sets.NewString([]string{"alert", "block", "drop", "none", "redirect"}...),
			},
			"spec.url_matcher.url_items": []sets.String{
				sets.NewString([]string{"domain_regex", "domain_value"}...),
				sets.NewString([]string{"path_prefix", "path_regex", "path_value"}...),
			},
			"spec.waf_action": []sets.String{
				sets.NewString([]string{"app_firewall_detection_control", "none", "waf_in_monitoring_mode", "waf_inline_rule_control", "waf_rule_control", "waf_skip_processing"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.service_policy_rule.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"any_asn", "asn_list", "asn_matcher"}...),
				sets.NewString([]string{"any_client", "client_name", "client_name_matcher", "client_selector"}...),
				sets.NewString([]string{"any_dst_asn", "dst_asn_list", "dst_asn_matcher"}...),
				sets.NewString([]string{"any_dst_ip", "dst_ip_matcher", "dst_ip_prefix_list"}...),
				sets.NewString([]string{"any_ip", "ip_matcher", "ip_prefix_list"}...),
			},
			"spec.arg_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.cookie_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.query_params": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.shape_protected_endpoint_action.mitigation": []sets.String{
				sets.NewString([]string{"alert", "block", "drop", "none", "redirect"}...),
			},
			"spec.url_matcher.url_items": []sets.String{
				sets.NewString([]string{"domain_regex", "domain_value"}...),
				sets.NewString([]string{"path_prefix", "path_regex", "path_value"}...),
			},
			"spec.waf_action": []sets.String{
				sets.NewString([]string{"app_firewall_detection_control", "none", "waf_in_monitoring_mode", "waf_inline_rule_control", "waf_rule_control", "waf_skip_processing"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.service_policy_rule.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"any_asn", "asn_list", "asn_matcher"}...),
				sets.NewString([]string{"any_client", "client_name", "client_name_matcher", "client_selector"}...),
				sets.NewString([]string{"any_dst_asn", "dst_asn_list", "dst_asn_matcher"}...),
				sets.NewString([]string{"any_dst_ip", "dst_ip_matcher", "dst_ip_prefix_list"}...),
				sets.NewString([]string{"any_ip", "ip_matcher", "ip_prefix_list"}...),
			},
			"spec.gc_spec.arg_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.cookie_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.query_params": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.shape_protected_endpoint_action.mitigation": []sets.String{
				sets.NewString([]string{"alert", "block", "drop", "none", "redirect"}...),
			},
			"spec.gc_spec.url_matcher.url_items": []sets.String{
				sets.NewString([]string{"domain_regex", "domain_value"}...),
				sets.NewString([]string{"path_prefix", "path_regex", "path_value"}...),
			},
			"spec.gc_spec.waf_action": []sets.String{
				sets.NewString([]string{"app_firewall_detection_control", "none", "waf_in_monitoring_mode", "waf_inline_rule_control", "waf_rule_control", "waf_skip_processing"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.service_policy_rule.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"any_asn", "asn_list", "asn_matcher"}...),
				sets.NewString([]string{"any_client", "client_name", "client_name_matcher", "client_selector"}...),
				sets.NewString([]string{"any_dst_asn", "dst_asn_list", "dst_asn_matcher"}...),
				sets.NewString([]string{"any_dst_ip", "dst_ip_matcher", "dst_ip_prefix_list"}...),
				sets.NewString([]string{"any_ip", "ip_matcher", "ip_prefix_list"}...),
			},
			"spec.gc_spec.arg_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.cookie_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.query_params": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.shape_protected_endpoint_action.mitigation": []sets.String{
				sets.NewString([]string{"alert", "block", "drop", "none", "redirect"}...),
			},
			"spec.gc_spec.url_matcher.url_items": []sets.String{
				sets.NewString([]string{"domain_regex", "domain_value"}...),
				sets.NewString([]string{"path_prefix", "path_regex", "path_value"}...),
			},
			"spec.gc_spec.waf_action": []sets.String{
				sets.NewString([]string{"app_firewall_detection_control", "none", "waf_in_monitoring_mode", "waf_inline_rule_control", "waf_rule_control", "waf_skip_processing"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.site.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.default_underlay_network": []sets.String{
				sets.NewString([]string{"site_local_inside", "site_local_outside"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.site.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.default_underlay_network": []sets.String{
				sets.NewString([]string{"site_local_inside", "site_local_outside"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.site.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.default_underlay_network": []sets.String{
				sets.NewString([]string{"site_local_inside", "site_local_outside"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.tunnel.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.local_ip": []sets.String{
				sets.NewString([]string{"intf", "ip_address"}...),
			},
			"spec.local_ip.ip_address": []sets.String{
				sets.NewString([]string{"auto", "ip_address"}...),
			},
			"spec.local_ip.ip_address.ip_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.local_ip.ip_address.virtual_network_type": []sets.String{
				sets.NewString([]string{"public", "site_local", "site_local_inside"}...),
			},
			"spec.params": []sets.String{
				sets.NewString([]string{"ipsec"}...),
			},
			"spec.params.ipsec.ipsec_psk": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.remote_ip": []sets.String{
				sets.NewString([]string{"endpoints", "ip"}...),
			},
			"spec.remote_ip.endpoints.endpoints.ip": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.remote_ip.ip": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.tunnel.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.local_ip": []sets.String{
				sets.NewString([]string{"intf", "ip_address"}...),
			},
			"spec.local_ip.ip_address": []sets.String{
				sets.NewString([]string{"auto", "ip_address"}...),
			},
			"spec.local_ip.ip_address.ip_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.local_ip.ip_address.virtual_network_type": []sets.String{
				sets.NewString([]string{"public", "site_local", "site_local_inside"}...),
			},
			"spec.params": []sets.String{
				sets.NewString([]string{"ipsec"}...),
			},
			"spec.params.ipsec.ipsec_psk": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.remote_ip": []sets.String{
				sets.NewString([]string{"endpoints", "ip"}...),
			},
			"spec.remote_ip.endpoints.endpoints.ip": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.remote_ip.ip": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.tunnel.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.local_ip": []sets.String{
				sets.NewString([]string{"intf", "ip_address"}...),
			},
			"spec.gc_spec.local_ip.ip_address": []sets.String{
				sets.NewString([]string{"auto", "ip_address"}...),
			},
			"spec.gc_spec.local_ip.ip_address.ip_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.local_ip.ip_address.virtual_network_type": []sets.String{
				sets.NewString([]string{"public", "site_local", "site_local_inside"}...),
			},
			"spec.gc_spec.params": []sets.String{
				sets.NewString([]string{"ipsec"}...),
			},
			"spec.gc_spec.params.ipsec.ipsec_psk": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.remote_ip": []sets.String{
				sets.NewString([]string{"endpoints", "ip"}...),
			},
			"spec.gc_spec.remote_ip.endpoints.endpoints.ip": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.remote_ip.ip": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.tunnel.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.local_ip": []sets.String{
				sets.NewString([]string{"intf", "ip_address"}...),
			},
			"spec.gc_spec.local_ip.ip_address": []sets.String{
				sets.NewString([]string{"auto", "ip_address"}...),
			},
			"spec.gc_spec.local_ip.ip_address.ip_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.local_ip.ip_address.virtual_network_type": []sets.String{
				sets.NewString([]string{"public", "site_local", "site_local_inside"}...),
			},
			"spec.gc_spec.params": []sets.String{
				sets.NewString([]string{"ipsec"}...),
			},
			"spec.gc_spec.params.ipsec.ipsec_psk": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.remote_ip": []sets.String{
				sets.NewString([]string{"endpoints", "ip"}...),
			},
			"spec.gc_spec.remote_ip.endpoints.endpoints.ip": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.remote_ip.ip": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.user_identification.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.rules": []sets.String{
				sets.NewString([]string{"client_asn", "client_ip", "cookie_name", "http_header_name", "none", "query_param_key"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.user_identification.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.rules": []sets.String{
				sets.NewString([]string{"client_asn", "client_ip", "cookie_name", "http_header_name", "none", "query_param_key"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.user_identification.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.rules": []sets.String{
				sets.NewString([]string{"client_asn", "client_ip", "cookie_name", "http_header_name", "none", "query_param_key"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.user_identification.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.rules": []sets.String{
				sets.NewString([]string{"client_asn", "client_ip", "cookie_name", "http_header_name", "none", "query_param_key"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.aws_tgw_site.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
			},
			"spec.aws_parameters": []sets.String{
				sets.NewString([]string{"assisted", "aws_cred"}...),
				sets.NewString([]string{"existing_tgw", "new_tgw"}...),
				sets.NewString([]string{"new_vpc", "vpc_id"}...),
				sets.NewString([]string{"no_worker_nodes", "nodes_per_az", "total_nodes"}...),
			},
			"spec.aws_parameters.az_nodes": []sets.String{
				sets.NewString([]string{"inside_subnet", "reserved_inside_subnet"}...),
			},
			"spec.aws_parameters.az_nodes.inside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.aws_parameters.az_nodes.outside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.aws_parameters.az_nodes.workload_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.aws_parameters.new_tgw": []sets.String{
				sets.NewString([]string{"system_generated", "user_assigned"}...),
			},
			"spec.aws_parameters.new_vpc": []sets.String{
				sets.NewString([]string{"autogenerate", "name_tag"}...),
			},
			"spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
			"spec.tgw_security": []sets.String{
				sets.NewString([]string{"active_east_west_service_policies", "east_west_service_policy_allow_all", "no_east_west_policy"}...),
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
			},
			"spec.vn_config": []sets.String{
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.vn_config.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.vn_config.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.vn_config.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.vn_config.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.vn_config.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.vn_config.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.vn_config.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.vn_config.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.aws_tgw_site.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
			},
			"spec.tgw_security": []sets.String{
				sets.NewString([]string{"active_east_west_service_policies", "east_west_service_policy_allow_all", "no_east_west_policy"}...),
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
			},
			"spec.vn_config": []sets.String{
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.vn_config.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.vn_config.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.vn_config.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.vn_config.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.vn_config.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.vn_config.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.vn_config.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.vn_config.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.aws_tgw_site.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
			},
			"spec.gc_spec.aws_parameters": []sets.String{
				sets.NewString([]string{"assisted", "aws_cred"}...),
				sets.NewString([]string{"existing_tgw", "new_tgw"}...),
				sets.NewString([]string{"new_vpc", "vpc_id"}...),
				sets.NewString([]string{"no_worker_nodes", "nodes_per_az", "total_nodes"}...),
			},
			"spec.gc_spec.aws_parameters.az_nodes": []sets.String{
				sets.NewString([]string{"inside_subnet", "reserved_inside_subnet"}...),
			},
			"spec.gc_spec.aws_parameters.az_nodes.inside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.aws_parameters.az_nodes.outside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.aws_parameters.az_nodes.workload_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.aws_parameters.new_tgw": []sets.String{
				sets.NewString([]string{"system_generated", "user_assigned"}...),
			},
			"spec.gc_spec.aws_parameters.new_vpc": []sets.String{
				sets.NewString([]string{"autogenerate", "name_tag"}...),
			},
			"spec.gc_spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.gc_spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
			"spec.gc_spec.tgw_security": []sets.String{
				sets.NewString([]string{"active_east_west_service_policies", "east_west_service_policy_allow_all", "no_east_west_policy"}...),
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
			},
			"spec.gc_spec.vn_config": []sets.String{
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.vn_config.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.gc_spec.vn_config.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.vn_config.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.vn_config.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.vn_config.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.vn_config.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.vn_config.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.vn_config.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.aws_tgw_site.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
			},
			"spec.gc_spec.aws_parameters": []sets.String{
				sets.NewString([]string{"assisted", "aws_cred"}...),
				sets.NewString([]string{"existing_tgw", "new_tgw"}...),
				sets.NewString([]string{"new_vpc", "vpc_id"}...),
				sets.NewString([]string{"no_worker_nodes", "nodes_per_az", "total_nodes"}...),
			},
			"spec.gc_spec.aws_parameters.az_nodes": []sets.String{
				sets.NewString([]string{"inside_subnet", "reserved_inside_subnet"}...),
			},
			"spec.gc_spec.aws_parameters.az_nodes.inside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.aws_parameters.az_nodes.outside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.aws_parameters.az_nodes.workload_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.aws_parameters.new_tgw": []sets.String{
				sets.NewString([]string{"system_generated", "user_assigned"}...),
			},
			"spec.gc_spec.aws_parameters.new_vpc": []sets.String{
				sets.NewString([]string{"autogenerate", "name_tag"}...),
			},
			"spec.gc_spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.gc_spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
			"spec.gc_spec.tgw_security": []sets.String{
				sets.NewString([]string{"active_east_west_service_policies", "east_west_service_policy_allow_all", "no_east_west_policy"}...),
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
			},
			"spec.gc_spec.vn_config": []sets.String{
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.vn_config.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.gc_spec.vn_config.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.vn_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.vn_config.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.vn_config.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.vn_config.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.vn_config.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.vn_config.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.vn_config.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.aws_vpc_site.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"assisted", "aws_cred"}...),
				sets.NewString([]string{"ingress_egress_gw", "ingress_gw", "voltstack_cluster"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
				sets.NewString([]string{"no_worker_nodes", "nodes_per_az", "total_nodes"}...),
			},
			"spec.ingress_egress_gw": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.ingress_egress_gw.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.ingress_egress_gw.allowed_vip_port_sli": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.ingress_egress_gw.az_nodes": []sets.String{
				sets.NewString([]string{"inside_subnet", "reserved_inside_subnet"}...),
			},
			"spec.ingress_egress_gw.az_nodes.inside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.ingress_egress_gw.az_nodes.outside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.ingress_egress_gw.az_nodes.workload_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_gw.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.ingress_gw.az_nodes.local_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
			"spec.voltstack_cluster": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"default_storage", "storage_class_list"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.voltstack_cluster.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.voltstack_cluster.az_nodes.local_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.voltstack_cluster.storage_class_list.storage_classes": []sets.String{
				sets.NewString([]string{"openebs_enterprise"}...),
			},
			"spec.vpc": []sets.String{
				sets.NewString([]string{"new_vpc", "vpc_id"}...),
			},
			"spec.vpc.new_vpc": []sets.String{
				sets.NewString([]string{"autogenerate", "name_tag"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.aws_vpc_site.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"ingress_egress_gw", "ingress_gw", "voltstack_cluster"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
				sets.NewString([]string{"no_worker_nodes", "nodes_per_az", "total_nodes"}...),
			},
			"spec.ingress_egress_gw": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.ingress_egress_gw.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.ingress_egress_gw.allowed_vip_port_sli": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_gw.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.voltstack_cluster": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.voltstack_cluster.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.aws_vpc_site.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"assisted", "aws_cred"}...),
				sets.NewString([]string{"ingress_egress_gw", "ingress_gw", "voltstack_cluster"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
				sets.NewString([]string{"no_worker_nodes", "nodes_per_az", "total_nodes"}...),
			},
			"spec.gc_spec.ingress_egress_gw": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.ingress_egress_gw.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.gc_spec.ingress_egress_gw.allowed_vip_port_sli": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes": []sets.String{
				sets.NewString([]string{"inside_subnet", "reserved_inside_subnet"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes.inside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes.outside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes.workload_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_gw.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.gc_spec.ingress_gw.az_nodes.local_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.gc_spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
			"spec.gc_spec.voltstack_cluster": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"default_storage", "storage_class_list"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.voltstack_cluster.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.gc_spec.voltstack_cluster.az_nodes.local_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.voltstack_cluster.storage_class_list.storage_classes": []sets.String{
				sets.NewString([]string{"openebs_enterprise"}...),
			},
			"spec.gc_spec.vpc": []sets.String{
				sets.NewString([]string{"new_vpc", "vpc_id"}...),
			},
			"spec.gc_spec.vpc.new_vpc": []sets.String{
				sets.NewString([]string{"autogenerate", "name_tag"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.aws_vpc_site.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"assisted", "aws_cred"}...),
				sets.NewString([]string{"ingress_egress_gw", "ingress_gw", "voltstack_cluster"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
				sets.NewString([]string{"no_worker_nodes", "nodes_per_az", "total_nodes"}...),
			},
			"spec.gc_spec.ingress_egress_gw": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.ingress_egress_gw.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.gc_spec.ingress_egress_gw.allowed_vip_port_sli": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes": []sets.String{
				sets.NewString([]string{"inside_subnet", "reserved_inside_subnet"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes.inside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes.outside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes.workload_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_gw.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.gc_spec.ingress_gw.az_nodes.local_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.gc_spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
			"spec.gc_spec.voltstack_cluster": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"default_storage", "storage_class_list"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.voltstack_cluster.allowed_vip_port": []sets.String{
				sets.NewString([]string{"custom_ports", "use_http_https_port", "use_http_port", "use_https_port"}...),
			},
			"spec.gc_spec.voltstack_cluster.az_nodes.local_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet_id", "subnet_param"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.voltstack_cluster.storage_class_list.storage_classes": []sets.String{
				sets.NewString([]string{"openebs_enterprise"}...),
			},
			"spec.gc_spec.vpc": []sets.String{
				sets.NewString([]string{"new_vpc", "vpc_id"}...),
			},
			"spec.gc_spec.vpc.new_vpc": []sets.String{
				sets.NewString([]string{"autogenerate", "name_tag"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.azure_vnet_site.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"alternate_region", "azure_region"}...),
				sets.NewString([]string{"assisted", "azure_cred"}...),
				sets.NewString([]string{"ingress_egress_gw", "ingress_egress_gw_ar", "ingress_gw", "ingress_gw_ar", "voltstack_cluster", "voltstack_cluster_ar"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
				sets.NewString([]string{"no_worker_nodes", "nodes_per_az", "total_nodes"}...),
			},
			"spec.ingress_egress_gw": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.ingress_egress_gw.az_nodes.inside_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.ingress_egress_gw.az_nodes.inside_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.ingress_egress_gw.az_nodes.outside_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.ingress_egress_gw.az_nodes.outside_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw_ar": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.ingress_egress_gw_ar.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.ingress_egress_gw_ar.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw_ar.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw_ar.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw_ar.node.inside_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.ingress_egress_gw_ar.node.inside_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.ingress_egress_gw_ar.node.outside_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.ingress_egress_gw_ar.node.outside_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.ingress_egress_gw_ar.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw_ar.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw_ar.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_gw.az_nodes.local_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.ingress_gw.az_nodes.local_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.ingress_gw_ar.node.local_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.ingress_gw_ar.node.local_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
			"spec.vnet": []sets.String{
				sets.NewString([]string{"existing_vnet", "new_vnet"}...),
			},
			"spec.vnet.new_vnet": []sets.String{
				sets.NewString([]string{"autogenerate", "name"}...),
			},
			"spec.voltstack_cluster": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.voltstack_cluster.az_nodes.local_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.voltstack_cluster.az_nodes.local_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.voltstack_cluster_ar": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.voltstack_cluster_ar.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.voltstack_cluster_ar.node.local_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.voltstack_cluster_ar.node.local_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.voltstack_cluster_ar.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.voltstack_cluster_ar.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.voltstack_cluster_ar.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.azure_vnet_site.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"ingress_egress_gw", "ingress_egress_gw_ar", "ingress_gw", "ingress_gw_ar", "voltstack_cluster", "voltstack_cluster_ar"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
				sets.NewString([]string{"no_worker_nodes", "nodes_per_az", "total_nodes"}...),
			},
			"spec.ingress_egress_gw": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw_ar": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.ingress_egress_gw_ar.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.ingress_egress_gw_ar.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw_ar.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw_ar.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw_ar.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw_ar.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw_ar.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.voltstack_cluster": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.voltstack_cluster_ar": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.voltstack_cluster_ar.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.voltstack_cluster_ar.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.voltstack_cluster_ar.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.voltstack_cluster_ar.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.azure_vnet_site.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"alternate_region", "azure_region"}...),
				sets.NewString([]string{"assisted", "azure_cred"}...),
				sets.NewString([]string{"ingress_egress_gw", "ingress_egress_gw_ar", "ingress_gw", "ingress_gw_ar", "voltstack_cluster", "voltstack_cluster_ar"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
				sets.NewString([]string{"no_worker_nodes", "nodes_per_az", "total_nodes"}...),
			},
			"spec.gc_spec.ingress_egress_gw": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes.inside_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes.inside_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes.outside_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes.outside_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.node.inside_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.node.inside_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.node.outside_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.node.outside_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_gw.az_nodes.local_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_gw.az_nodes.local_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.ingress_gw_ar.node.local_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_gw_ar.node.local_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.gc_spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
			"spec.gc_spec.vnet": []sets.String{
				sets.NewString([]string{"existing_vnet", "new_vnet"}...),
			},
			"spec.gc_spec.vnet.new_vnet": []sets.String{
				sets.NewString([]string{"autogenerate", "name"}...),
			},
			"spec.gc_spec.voltstack_cluster": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.voltstack_cluster.az_nodes.local_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.voltstack_cluster.az_nodes.local_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.node.local_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.node.local_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.azure_vnet_site.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"alternate_region", "azure_region"}...),
				sets.NewString([]string{"assisted", "azure_cred"}...),
				sets.NewString([]string{"ingress_egress_gw", "ingress_egress_gw_ar", "ingress_gw", "ingress_gw_ar", "voltstack_cluster", "voltstack_cluster_ar"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
				sets.NewString([]string{"no_worker_nodes", "nodes_per_az", "total_nodes"}...),
			},
			"spec.gc_spec.ingress_egress_gw": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes.inside_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes.inside_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes.outside_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_egress_gw.az_nodes.outside_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.node.inside_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.node.inside_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.node.outside_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.node.outside_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw_ar.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_gw.az_nodes.local_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_gw.az_nodes.local_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.ingress_gw_ar.node.local_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.ingress_gw_ar.node.local_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.gc_spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
			"spec.gc_spec.vnet": []sets.String{
				sets.NewString([]string{"existing_vnet", "new_vnet"}...),
			},
			"spec.gc_spec.vnet.new_vnet": []sets.String{
				sets.NewString([]string{"autogenerate", "name"}...),
			},
			"spec.gc_spec.voltstack_cluster": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.voltstack_cluster.az_nodes.local_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.voltstack_cluster.az_nodes.local_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.node.local_subnet": []sets.String{
				sets.NewString([]string{"subnet", "subnet_param"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.node.local_subnet.subnet": []sets.String{
				sets.NewString([]string{"subnet_resource_grp", "vnet_resource_group"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.voltstack_cluster_ar.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.forward_proxy_policy.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"allow_all", "allow_list", "deny_list", "rule_list"}...),
				sets.NewString([]string{"any_proxy", "drp_http_connect", "network_connector", "proxy_label_selector"}...),
			},
			"spec.allow_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.allow_list.http_list": []sets.String{
				sets.NewString([]string{"any_path", "path_exact_value", "path_prefix_value", "path_regex_value"}...),
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.allow_list.tls_list": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.deny_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.deny_list.http_list": []sets.String{
				sets.NewString([]string{"any_path", "path_exact_value", "path_prefix_value", "path_regex_value"}...),
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.deny_list.tls_list": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.rule_list.rules": []sets.String{
				sets.NewString([]string{"all_destinations", "dst_asn_list", "dst_asn_set", "dst_ip_prefix_set", "dst_label_selector", "dst_prefix_list", "http_list", "tls_list"}...),
				sets.NewString([]string{"all_sources", "inside_sources", "interface", "ip_prefix_set", "label_selector", "namespace", "prefix_list"}...),
				sets.NewString([]string{"no_http_connect_port", "port_matcher"}...),
			},
			"spec.rule_list.rules.http_list.http_list": []sets.String{
				sets.NewString([]string{"any_path", "path_exact_value", "path_prefix_value", "path_regex_value"}...),
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.rule_list.rules.tls_list.tls_list": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.forward_proxy_policy.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"allow_all", "allow_list", "deny_list", "rule_list"}...),
				sets.NewString([]string{"any_proxy", "drp_http_connect", "network_connector", "proxy_label_selector"}...),
			},
			"spec.allow_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.allow_list.http_list": []sets.String{
				sets.NewString([]string{"any_path", "path_exact_value", "path_prefix_value", "path_regex_value"}...),
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.allow_list.tls_list": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.deny_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.deny_list.http_list": []sets.String{
				sets.NewString([]string{"any_path", "path_exact_value", "path_prefix_value", "path_regex_value"}...),
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.deny_list.tls_list": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.rule_list.rules": []sets.String{
				sets.NewString([]string{"all_destinations", "dst_asn_list", "dst_asn_set", "dst_ip_prefix_set", "dst_label_selector", "dst_prefix_list", "http_list", "tls_list"}...),
				sets.NewString([]string{"all_sources", "inside_sources", "interface", "ip_prefix_set", "label_selector", "namespace", "prefix_list"}...),
				sets.NewString([]string{"no_http_connect_port", "port_matcher"}...),
			},
			"spec.rule_list.rules.http_list.http_list": []sets.String{
				sets.NewString([]string{"any_path", "path_exact_value", "path_prefix_value", "path_regex_value"}...),
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.rule_list.rules.tls_list.tls_list": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.forward_proxy_policy.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"allow_all", "allow_list", "deny_list", "rule_list"}...),
				sets.NewString([]string{"any_proxy", "drp_http_connect", "network_connector", "proxy_label_selector"}...),
			},
			"spec.gc_spec.allow_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.gc_spec.allow_list.http_list": []sets.String{
				sets.NewString([]string{"any_path", "path_exact_value", "path_prefix_value", "path_regex_value"}...),
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.allow_list.tls_list": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.deny_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.gc_spec.deny_list.http_list": []sets.String{
				sets.NewString([]string{"any_path", "path_exact_value", "path_prefix_value", "path_regex_value"}...),
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.deny_list.tls_list": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.rule_list.rules": []sets.String{
				sets.NewString([]string{"all_destinations", "dst_asn_list", "dst_asn_set", "dst_ip_prefix_set", "dst_label_selector", "dst_prefix_list", "http_list", "tls_list"}...),
				sets.NewString([]string{"all_sources", "inside_sources", "interface", "ip_prefix_set", "label_selector", "namespace", "prefix_list"}...),
				sets.NewString([]string{"no_http_connect_port", "port_matcher"}...),
			},
			"spec.gc_spec.rule_list.rules.http_list.http_list": []sets.String{
				sets.NewString([]string{"any_path", "path_exact_value", "path_prefix_value", "path_regex_value"}...),
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.rule_list.rules.tls_list.tls_list": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.forward_proxy_policy.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"allow_all", "allow_list", "deny_list", "rule_list"}...),
				sets.NewString([]string{"any_proxy", "drp_http_connect", "network_connector", "proxy_label_selector"}...),
			},
			"spec.gc_spec.allow_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.gc_spec.allow_list.http_list": []sets.String{
				sets.NewString([]string{"any_path", "path_exact_value", "path_prefix_value", "path_regex_value"}...),
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.allow_list.tls_list": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.deny_list": []sets.String{
				sets.NewString([]string{"default_action_allow", "default_action_deny", "default_action_next_policy"}...),
			},
			"spec.gc_spec.deny_list.http_list": []sets.String{
				sets.NewString([]string{"any_path", "path_exact_value", "path_prefix_value", "path_regex_value"}...),
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.deny_list.tls_list": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.rule_list.rules": []sets.String{
				sets.NewString([]string{"all_destinations", "dst_asn_list", "dst_asn_set", "dst_ip_prefix_set", "dst_label_selector", "dst_prefix_list", "http_list", "tls_list"}...),
				sets.NewString([]string{"all_sources", "inside_sources", "interface", "ip_prefix_set", "label_selector", "namespace", "prefix_list"}...),
				sets.NewString([]string{"no_http_connect_port", "port_matcher"}...),
			},
			"spec.gc_spec.rule_list.rules.http_list.http_list": []sets.String{
				sets.NewString([]string{"any_path", "path_exact_value", "path_prefix_value", "path_regex_value"}...),
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.rule_list.rules.tls_list.tls_list": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.gcp_vpc_site.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"assisted", "cloud_credentials"}...),
				sets.NewString([]string{"ingress_egress_gw", "ingress_gw", "voltstack_cluster"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
			},
			"spec.ingress_egress_gw": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.ingress_egress_gw.inside_network": []sets.String{
				sets.NewString([]string{"existing_network", "new_network", "new_network_autogenerate"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.inside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet", "new_subnet"}...),
			},
			"spec.ingress_egress_gw.outside_network": []sets.String{
				sets.NewString([]string{"existing_network", "new_network", "new_network_autogenerate"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.outside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet", "new_subnet"}...),
			},
			"spec.ingress_gw.local_network": []sets.String{
				sets.NewString([]string{"existing_network", "new_network", "new_network_autogenerate"}...),
			},
			"spec.ingress_gw.local_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet", "new_subnet"}...),
			},
			"spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
			"spec.voltstack_cluster": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.voltstack_cluster.site_local_network": []sets.String{
				sets.NewString([]string{"existing_network", "new_network", "new_network_autogenerate"}...),
			},
			"spec.voltstack_cluster.site_local_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet", "new_subnet"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.gcp_vpc_site.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"ingress_egress_gw", "ingress_gw", "voltstack_cluster"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
			},
			"spec.ingress_egress_gw": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.voltstack_cluster": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.gcp_vpc_site.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"assisted", "cloud_credentials"}...),
				sets.NewString([]string{"ingress_egress_gw", "ingress_gw", "voltstack_cluster"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
			},
			"spec.gc_spec.ingress_egress_gw": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_network": []sets.String{
				sets.NewString([]string{"existing_network", "new_network", "new_network_autogenerate"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet", "new_subnet"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_network": []sets.String{
				sets.NewString([]string{"existing_network", "new_network", "new_network_autogenerate"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet", "new_subnet"}...),
			},
			"spec.gc_spec.ingress_gw.local_network": []sets.String{
				sets.NewString([]string{"existing_network", "new_network", "new_network_autogenerate"}...),
			},
			"spec.gc_spec.ingress_gw.local_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet", "new_subnet"}...),
			},
			"spec.gc_spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.gc_spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
			"spec.gc_spec.voltstack_cluster": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.voltstack_cluster.site_local_network": []sets.String{
				sets.NewString([]string{"existing_network", "new_network", "new_network_autogenerate"}...),
			},
			"spec.gc_spec.voltstack_cluster.site_local_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet", "new_subnet"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.gcp_vpc_site.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"assisted", "cloud_credentials"}...),
				sets.NewString([]string{"ingress_egress_gw", "ingress_gw", "voltstack_cluster"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
			},
			"spec.gc_spec.ingress_egress_gw": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"inside_static_routes", "no_inside_static_routes"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.ingress_egress_gw.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_network": []sets.String{
				sets.NewString([]string{"existing_network", "new_network", "new_network_autogenerate"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.inside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet", "new_subnet"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_network": []sets.String{
				sets.NewString([]string{"existing_network", "new_network", "new_network_autogenerate"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.ingress_egress_gw.outside_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet", "new_subnet"}...),
			},
			"spec.gc_spec.ingress_gw.local_network": []sets.String{
				sets.NewString([]string{"existing_network", "new_network", "new_network_autogenerate"}...),
			},
			"spec.gc_spec.ingress_gw.local_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet", "new_subnet"}...),
			},
			"spec.gc_spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.gc_spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
			"spec.gc_spec.voltstack_cluster": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"no_outside_static_routes", "outside_static_routes"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.voltstack_cluster.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list": []sets.String{
				sets.NewString([]string{"custom_static_route", "simple_static_route"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.voltstack_cluster.outside_static_routes.static_route_list.custom_static_route.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.voltstack_cluster.site_local_network": []sets.String{
				sets.NewString([]string{"existing_network", "new_network", "new_network_autogenerate"}...),
			},
			"spec.gc_spec.voltstack_cluster.site_local_subnet": []sets.String{
				sets.NewString([]string{"existing_subnet", "new_subnet"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.http_loadbalancer.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"active_service_policies", "no_service_policies", "service_policies_from_namespace"}...),
				sets.NewString([]string{"advertise_custom", "advertise_on_public", "advertise_on_public_default_vip", "do_not_advertise"}...),
				sets.NewString([]string{"app_firewall", "disable_waf", "waf", "waf_rule"}...),
				sets.NewString([]string{"captcha_challenge", "js_challenge", "no_challenge", "policy_based_challenge"}...),
				sets.NewString([]string{"cookie_stickiness", "least_active", "random", "ring_hash", "round_robin", "source_ip_stickiness"}...),
				sets.NewString([]string{"disable_rate_limit", "rate_limit"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"port", "use_default_port"}...),
				sets.NewString([]string{"site", "virtual_network", "virtual_site", "vk8s_service"}...),
			},
			"spec.advertise_custom.advertise_where.virtual_network": []sets.String{
				sets.NewString([]string{"default_vip", "specific_vip"}...),
			},
			"spec.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.blocked_clients": []sets.String{
				sets.NewString([]string{"as_number", "ip_prefix"}...),
			},
			"spec.ddos_mitigation_rules": []sets.String{
				sets.NewString([]string{"block"}...),
				sets.NewString([]string{"ddos_client_source", "ip_prefix_list"}...),
			},
			"spec.default_route_pools": []sets.String{
				sets.NewString([]string{"cluster", "pool"}...),
			},
			"spec.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.more_option": []sets.String{
				sets.NewString([]string{"disable_path_normalize", "enable_path_normalize"}...),
			},
			"spec.policy_based_challenge": []sets.String{
				sets.NewString([]string{"always_enable_captcha_challenge", "always_enable_js_challenge", "no_challenge"}...),
				sets.NewString([]string{"captcha_challenge_parameters", "default_captcha_challenge_parameters"}...),
				sets.NewString([]string{"default_js_challenge_parameters", "js_challenge_parameters"}...),
				sets.NewString([]string{"default_mitigation_settings", "malicious_user_mitigation"}...),
				sets.NewString([]string{"default_temporary_blocking_parameters", "temporary_user_blocking"}...),
			},
			"spec.policy_based_challenge.rule_list.rules.spec": []sets.String{
				sets.NewString([]string{"any_asn", "asn_list", "asn_matcher"}...),
				sets.NewString([]string{"any_client", "client_name", "client_name_matcher", "client_selector"}...),
				sets.NewString([]string{"any_ip", "ip_matcher", "ip_prefix_list"}...),
				sets.NewString([]string{"disable_challenge", "enable_captcha_challenge", "enable_javascript_challenge"}...),
			},
			"spec.policy_based_challenge.rule_list.rules.spec.arg_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.policy_based_challenge.rule_list.rules.spec.cookie_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.policy_based_challenge.rule_list.rules.spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.policy_based_challenge.rule_list.rules.spec.query_params": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.rate_limit": []sets.String{
				sets.NewString([]string{"custom_ip_allowed_list", "ip_allowed_list", "no_ip_allowed_list"}...),
				sets.NewString([]string{"no_policies", "policies"}...),
			},
			"spec.ring_hash.hash_policy": []sets.String{
				sets.NewString([]string{"cookie", "header_name", "source_ip"}...),
			},
			"spec.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.routes.simple_route.advanced_options": []sets.String{
				sets.NewString([]string{"app_firewall", "disable_waf", "waf", "waf_rule"}...),
				sets.NewString([]string{"buffer_policy", "common_buffering"}...),
				sets.NewString([]string{"common_hash_policy", "specific_hash_policy"}...),
				sets.NewString([]string{"default_retry_policy", "retry_policy"}...),
				sets.NewString([]string{"disable_mirroring", "mirror_policy"}...),
				sets.NewString([]string{"disable_prefix_rewrite", "prefix_rewrite"}...),
				sets.NewString([]string{"disable_spdy", "enable_spdy"}...),
				sets.NewString([]string{"disable_web_socket_config", "web_socket_config"}...),
				sets.NewString([]string{"do_not_retract_cluster", "retract_cluster"}...),
			},
			"spec.routes.simple_route.advanced_options.specific_hash_policy.hash_policy": []sets.String{
				sets.NewString([]string{"cookie", "header_name", "source_ip"}...),
			},
			"spec.routes.simple_route.origin_pools": []sets.String{
				sets.NewString([]string{"cluster", "pool"}...),
			},
			"spec.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.trusted_clients": []sets.String{
				sets.NewString([]string{"as_number", "ip_prefix"}...),
			},
			"spec.waf_exclusion_rules": []sets.String{
				sets.NewString([]string{"any_domain", "domain_regex"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.http_loadbalancer.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"active_service_policies", "no_service_policies", "service_policies_from_namespace"}...),
				sets.NewString([]string{"advertise_custom", "advertise_on_public", "advertise_on_public_default_vip", "do_not_advertise"}...),
				sets.NewString([]string{"app_firewall", "disable_waf", "waf", "waf_rule"}...),
				sets.NewString([]string{"captcha_challenge", "js_challenge", "no_challenge", "policy_based_challenge"}...),
				sets.NewString([]string{"cookie_stickiness", "least_active", "random", "ring_hash", "round_robin", "source_ip_stickiness"}...),
				sets.NewString([]string{"disable_rate_limit", "rate_limit"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"port", "use_default_port"}...),
				sets.NewString([]string{"site", "virtual_network", "virtual_site", "vk8s_service"}...),
			},
			"spec.advertise_custom.advertise_where.virtual_network": []sets.String{
				sets.NewString([]string{"default_vip", "specific_vip"}...),
			},
			"spec.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.blocked_clients": []sets.String{
				sets.NewString([]string{"as_number", "ip_prefix"}...),
			},
			"spec.ddos_mitigation_rules": []sets.String{
				sets.NewString([]string{"block"}...),
				sets.NewString([]string{"ddos_client_source", "ip_prefix_list"}...),
			},
			"spec.default_route_pools": []sets.String{
				sets.NewString([]string{"cluster", "pool"}...),
			},
			"spec.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.more_option": []sets.String{
				sets.NewString([]string{"disable_path_normalize", "enable_path_normalize"}...),
			},
			"spec.policy_based_challenge": []sets.String{
				sets.NewString([]string{"always_enable_captcha_challenge", "always_enable_js_challenge", "no_challenge"}...),
				sets.NewString([]string{"captcha_challenge_parameters", "default_captcha_challenge_parameters"}...),
				sets.NewString([]string{"default_js_challenge_parameters", "js_challenge_parameters"}...),
				sets.NewString([]string{"default_mitigation_settings", "malicious_user_mitigation"}...),
				sets.NewString([]string{"default_temporary_blocking_parameters", "temporary_user_blocking"}...),
			},
			"spec.policy_based_challenge.rule_list.rules.spec": []sets.String{
				sets.NewString([]string{"any_asn", "asn_list", "asn_matcher"}...),
				sets.NewString([]string{"any_client", "client_name", "client_name_matcher", "client_selector"}...),
				sets.NewString([]string{"any_ip", "ip_matcher", "ip_prefix_list"}...),
				sets.NewString([]string{"disable_challenge", "enable_captcha_challenge", "enable_javascript_challenge"}...),
			},
			"spec.policy_based_challenge.rule_list.rules.spec.arg_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.policy_based_challenge.rule_list.rules.spec.cookie_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.policy_based_challenge.rule_list.rules.spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.policy_based_challenge.rule_list.rules.spec.query_params": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.rate_limit": []sets.String{
				sets.NewString([]string{"custom_ip_allowed_list", "ip_allowed_list", "no_ip_allowed_list"}...),
				sets.NewString([]string{"no_policies", "policies"}...),
			},
			"spec.ring_hash.hash_policy": []sets.String{
				sets.NewString([]string{"cookie", "header_name", "source_ip"}...),
			},
			"spec.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.routes.simple_route.advanced_options": []sets.String{
				sets.NewString([]string{"app_firewall", "disable_waf", "waf", "waf_rule"}...),
				sets.NewString([]string{"buffer_policy", "common_buffering"}...),
				sets.NewString([]string{"common_hash_policy", "specific_hash_policy"}...),
				sets.NewString([]string{"default_retry_policy", "retry_policy"}...),
				sets.NewString([]string{"disable_mirroring", "mirror_policy"}...),
				sets.NewString([]string{"disable_prefix_rewrite", "prefix_rewrite"}...),
				sets.NewString([]string{"disable_spdy", "enable_spdy"}...),
				sets.NewString([]string{"disable_web_socket_config", "web_socket_config"}...),
				sets.NewString([]string{"do_not_retract_cluster", "retract_cluster"}...),
			},
			"spec.routes.simple_route.advanced_options.specific_hash_policy.hash_policy": []sets.String{
				sets.NewString([]string{"cookie", "header_name", "source_ip"}...),
			},
			"spec.routes.simple_route.origin_pools": []sets.String{
				sets.NewString([]string{"cluster", "pool"}...),
			},
			"spec.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.trusted_clients": []sets.String{
				sets.NewString([]string{"as_number", "ip_prefix"}...),
			},
			"spec.waf_exclusion_rules": []sets.String{
				sets.NewString([]string{"any_domain", "domain_regex"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.http_loadbalancer.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"active_service_policies", "no_service_policies", "service_policies_from_namespace"}...),
				sets.NewString([]string{"advertise_custom", "advertise_on_public", "advertise_on_public_default_vip", "do_not_advertise"}...),
				sets.NewString([]string{"app_firewall", "disable_waf", "waf", "waf_rule"}...),
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
				sets.NewString([]string{"captcha_challenge", "js_challenge", "no_challenge", "policy_based_challenge"}...),
				sets.NewString([]string{"cookie_stickiness", "least_active", "random", "ring_hash", "round_robin", "source_ip_stickiness"}...),
				sets.NewString([]string{"disable_rate_limit", "rate_limit"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.gc_spec.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"port", "use_default_port"}...),
				sets.NewString([]string{"site", "virtual_network", "virtual_site", "vk8s_service"}...),
			},
			"spec.gc_spec.advertise_custom.advertise_where.virtual_network": []sets.String{
				sets.NewString([]string{"default_vip", "specific_vip"}...),
			},
			"spec.gc_spec.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.blocked_clients": []sets.String{
				sets.NewString([]string{"as_number", "ip_prefix"}...),
			},
			"spec.gc_spec.ddos_mitigation_rules": []sets.String{
				sets.NewString([]string{"block"}...),
				sets.NewString([]string{"ddos_client_source", "ip_prefix_list"}...),
			},
			"spec.gc_spec.default_route_pools": []sets.String{
				sets.NewString([]string{"cluster", "pool"}...),
			},
			"spec.gc_spec.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.gc_spec.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.more_option": []sets.String{
				sets.NewString([]string{"disable_path_normalize", "enable_path_normalize"}...),
			},
			"spec.gc_spec.policy_based_challenge": []sets.String{
				sets.NewString([]string{"always_enable_captcha_challenge", "always_enable_js_challenge", "no_challenge"}...),
				sets.NewString([]string{"captcha_challenge_parameters", "default_captcha_challenge_parameters"}...),
				sets.NewString([]string{"default_js_challenge_parameters", "js_challenge_parameters"}...),
				sets.NewString([]string{"default_mitigation_settings", "malicious_user_mitigation"}...),
				sets.NewString([]string{"default_temporary_blocking_parameters", "temporary_user_blocking"}...),
			},
			"spec.gc_spec.policy_based_challenge.rule_list.rules.spec": []sets.String{
				sets.NewString([]string{"any_asn", "asn_list", "asn_matcher"}...),
				sets.NewString([]string{"any_client", "client_name", "client_name_matcher", "client_selector"}...),
				sets.NewString([]string{"any_ip", "ip_matcher", "ip_prefix_list"}...),
				sets.NewString([]string{"disable_challenge", "enable_captcha_challenge", "enable_javascript_challenge"}...),
			},
			"spec.gc_spec.policy_based_challenge.rule_list.rules.spec.arg_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.policy_based_challenge.rule_list.rules.spec.cookie_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.policy_based_challenge.rule_list.rules.spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.policy_based_challenge.rule_list.rules.spec.query_params": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.rate_limit": []sets.String{
				sets.NewString([]string{"custom_ip_allowed_list", "ip_allowed_list", "no_ip_allowed_list"}...),
				sets.NewString([]string{"no_policies", "policies"}...),
			},
			"spec.gc_spec.ring_hash.hash_policy": []sets.String{
				sets.NewString([]string{"cookie", "header_name", "source_ip"}...),
			},
			"spec.gc_spec.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.gc_spec.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.routes.simple_route.advanced_options": []sets.String{
				sets.NewString([]string{"app_firewall", "disable_waf", "waf", "waf_rule"}...),
				sets.NewString([]string{"buffer_policy", "common_buffering"}...),
				sets.NewString([]string{"common_hash_policy", "specific_hash_policy"}...),
				sets.NewString([]string{"default_retry_policy", "retry_policy"}...),
				sets.NewString([]string{"disable_mirroring", "mirror_policy"}...),
				sets.NewString([]string{"disable_prefix_rewrite", "prefix_rewrite"}...),
				sets.NewString([]string{"disable_spdy", "enable_spdy"}...),
				sets.NewString([]string{"disable_web_socket_config", "web_socket_config"}...),
				sets.NewString([]string{"do_not_retract_cluster", "retract_cluster"}...),
			},
			"spec.gc_spec.routes.simple_route.advanced_options.specific_hash_policy.hash_policy": []sets.String{
				sets.NewString([]string{"cookie", "header_name", "source_ip"}...),
			},
			"spec.gc_spec.routes.simple_route.origin_pools": []sets.String{
				sets.NewString([]string{"cluster", "pool"}...),
			},
			"spec.gc_spec.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.trusted_clients": []sets.String{
				sets.NewString([]string{"as_number", "ip_prefix"}...),
			},
			"spec.gc_spec.waf_exclusion_rules": []sets.String{
				sets.NewString([]string{"any_domain", "domain_regex"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.http_loadbalancer.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"active_service_policies", "no_service_policies", "service_policies_from_namespace"}...),
				sets.NewString([]string{"advertise_custom", "advertise_on_public", "advertise_on_public_default_vip", "do_not_advertise"}...),
				sets.NewString([]string{"app_firewall", "disable_waf", "waf", "waf_rule"}...),
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
				sets.NewString([]string{"captcha_challenge", "js_challenge", "no_challenge", "policy_based_challenge"}...),
				sets.NewString([]string{"cookie_stickiness", "least_active", "random", "ring_hash", "round_robin", "source_ip_stickiness"}...),
				sets.NewString([]string{"disable_rate_limit", "rate_limit"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.gc_spec.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"port", "use_default_port"}...),
				sets.NewString([]string{"site", "virtual_network", "virtual_site", "vk8s_service"}...),
			},
			"spec.gc_spec.advertise_custom.advertise_where.virtual_network": []sets.String{
				sets.NewString([]string{"default_vip", "specific_vip"}...),
			},
			"spec.gc_spec.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.blocked_clients": []sets.String{
				sets.NewString([]string{"as_number", "ip_prefix"}...),
			},
			"spec.gc_spec.ddos_mitigation_rules": []sets.String{
				sets.NewString([]string{"block"}...),
				sets.NewString([]string{"ddos_client_source", "ip_prefix_list"}...),
			},
			"spec.gc_spec.default_route_pools": []sets.String{
				sets.NewString([]string{"cluster", "pool"}...),
			},
			"spec.gc_spec.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.gc_spec.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.more_option": []sets.String{
				sets.NewString([]string{"disable_path_normalize", "enable_path_normalize"}...),
			},
			"spec.gc_spec.policy_based_challenge": []sets.String{
				sets.NewString([]string{"always_enable_captcha_challenge", "always_enable_js_challenge", "no_challenge"}...),
				sets.NewString([]string{"captcha_challenge_parameters", "default_captcha_challenge_parameters"}...),
				sets.NewString([]string{"default_js_challenge_parameters", "js_challenge_parameters"}...),
				sets.NewString([]string{"default_mitigation_settings", "malicious_user_mitigation"}...),
				sets.NewString([]string{"default_temporary_blocking_parameters", "temporary_user_blocking"}...),
			},
			"spec.gc_spec.policy_based_challenge.rule_list.rules.spec": []sets.String{
				sets.NewString([]string{"any_asn", "asn_list", "asn_matcher"}...),
				sets.NewString([]string{"any_client", "client_name", "client_name_matcher", "client_selector"}...),
				sets.NewString([]string{"any_ip", "ip_matcher", "ip_prefix_list"}...),
				sets.NewString([]string{"disable_challenge", "enable_captcha_challenge", "enable_javascript_challenge"}...),
			},
			"spec.gc_spec.policy_based_challenge.rule_list.rules.spec.arg_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.policy_based_challenge.rule_list.rules.spec.cookie_matchers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.policy_based_challenge.rule_list.rules.spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.policy_based_challenge.rule_list.rules.spec.query_params": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
			"spec.gc_spec.rate_limit": []sets.String{
				sets.NewString([]string{"custom_ip_allowed_list", "ip_allowed_list", "no_ip_allowed_list"}...),
				sets.NewString([]string{"no_policies", "policies"}...),
			},
			"spec.gc_spec.ring_hash.hash_policy": []sets.String{
				sets.NewString([]string{"cookie", "header_name", "source_ip"}...),
			},
			"spec.gc_spec.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.gc_spec.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.routes.simple_route.advanced_options": []sets.String{
				sets.NewString([]string{"app_firewall", "disable_waf", "waf", "waf_rule"}...),
				sets.NewString([]string{"buffer_policy", "common_buffering"}...),
				sets.NewString([]string{"common_hash_policy", "specific_hash_policy"}...),
				sets.NewString([]string{"default_retry_policy", "retry_policy"}...),
				sets.NewString([]string{"disable_mirroring", "mirror_policy"}...),
				sets.NewString([]string{"disable_prefix_rewrite", "prefix_rewrite"}...),
				sets.NewString([]string{"disable_spdy", "enable_spdy"}...),
				sets.NewString([]string{"disable_web_socket_config", "web_socket_config"}...),
				sets.NewString([]string{"do_not_retract_cluster", "retract_cluster"}...),
			},
			"spec.gc_spec.routes.simple_route.advanced_options.specific_hash_policy.hash_policy": []sets.String{
				sets.NewString([]string{"cookie", "header_name", "source_ip"}...),
			},
			"spec.gc_spec.routes.simple_route.origin_pools": []sets.String{
				sets.NewString([]string{"cluster", "pool"}...),
			},
			"spec.gc_spec.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.trusted_clients": []sets.String{
				sets.NewString([]string{"as_number", "ip_prefix"}...),
			},
			"spec.gc_spec.waf_exclusion_rules": []sets.String{
				sets.NewString([]string{"any_domain", "domain_regex"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.network_policy_view.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.egress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.endpoint": []sets.String{
				sets.NewString([]string{"any", "inside_endpoints", "interface", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.ingress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.network_policy_view.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.egress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.endpoint": []sets.String{
				sets.NewString([]string{"any", "inside_endpoints", "interface", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.ingress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.network_policy_view.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.egress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.gc_spec.endpoint": []sets.String{
				sets.NewString([]string{"any", "inside_endpoints", "interface", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.gc_spec.ingress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.network_policy_view.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec.egress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.gc_spec.endpoint": []sets.String{
				sets.NewString([]string{"any", "inside_endpoints", "interface", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
			"spec.gc_spec.ingress_rules": []sets.String{
				sets.NewString([]string{"all_tcp_traffic", "all_traffic", "all_udp_traffic", "applications", "protocol_port_range"}...),
				sets.NewString([]string{"any", "inside_endpoints", "ip_prefix_set", "label_selector", "namespace", "outside_endpoints", "prefix_list"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.origin_pool.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"health_check_port", "same_as_endpoint_port"}...),
				sets.NewString([]string{"no_tls", "use_tls"}...),
			},
			"spec.advanced_options": []sets.String{
				sets.NewString([]string{"circuit_breaker", "disable_circuit_breaker"}...),
				sets.NewString([]string{"disable_outlier_detection", "outlier_detection"}...),
				sets.NewString([]string{"disable_subsets", "enable_subsets"}...),
				sets.NewString([]string{"no_panic_threshold", "panic_threshold"}...),
			},
			"spec.advanced_options.enable_subsets": []sets.String{
				sets.NewString([]string{"any_endpoint", "default_subset", "fail_request"}...),
			},
			"spec.origin_servers": []sets.String{
				sets.NewString([]string{"consul_service", "custom_endpoint_object", "k8s_service", "private_ip", "private_name", "public_ip", "public_name", "vn_private_ip", "vn_private_name"}...),
			},
			"spec.origin_servers.consul_service": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.origin_servers.consul_service.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.origin_servers.k8s_service": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network", "vk8s_networks"}...),
			},
			"spec.origin_servers.k8s_service.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.origin_servers.private_ip": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.origin_servers.private_ip.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.origin_servers.private_name": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.origin_servers.private_name.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.use_tls": []sets.String{
				sets.NewString([]string{"disable_sni", "sni", "use_host_header_as_sni"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
				sets.NewString([]string{"skip_server_verification", "use_server_verification", "volterra_trusted_ca"}...),
			},
			"spec.use_tls.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.use_tls.use_mtls.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.origin_pool.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"health_check_port", "same_as_endpoint_port"}...),
				sets.NewString([]string{"no_tls", "use_tls"}...),
			},
			"spec.advanced_options": []sets.String{
				sets.NewString([]string{"circuit_breaker", "disable_circuit_breaker"}...),
				sets.NewString([]string{"disable_outlier_detection", "outlier_detection"}...),
				sets.NewString([]string{"disable_subsets", "enable_subsets"}...),
				sets.NewString([]string{"no_panic_threshold", "panic_threshold"}...),
			},
			"spec.advanced_options.enable_subsets": []sets.String{
				sets.NewString([]string{"any_endpoint", "default_subset", "fail_request"}...),
			},
			"spec.origin_servers": []sets.String{
				sets.NewString([]string{"consul_service", "custom_endpoint_object", "k8s_service", "private_ip", "private_name", "public_ip", "public_name", "vn_private_ip", "vn_private_name"}...),
			},
			"spec.origin_servers.consul_service": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.origin_servers.consul_service.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.origin_servers.k8s_service": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network", "vk8s_networks"}...),
			},
			"spec.origin_servers.k8s_service.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.origin_servers.private_ip": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.origin_servers.private_ip.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.origin_servers.private_name": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.origin_servers.private_name.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.use_tls": []sets.String{
				sets.NewString([]string{"disable_sni", "sni", "use_host_header_as_sni"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
				sets.NewString([]string{"skip_server_verification", "use_server_verification", "volterra_trusted_ca"}...),
			},
			"spec.use_tls.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.use_tls.use_mtls.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.origin_pool.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"health_check_port", "same_as_endpoint_port"}...),
				sets.NewString([]string{"no_tls", "use_tls"}...),
			},
			"spec.gc_spec.advanced_options": []sets.String{
				sets.NewString([]string{"circuit_breaker", "disable_circuit_breaker"}...),
				sets.NewString([]string{"disable_outlier_detection", "outlier_detection"}...),
				sets.NewString([]string{"disable_subsets", "enable_subsets"}...),
				sets.NewString([]string{"no_panic_threshold", "panic_threshold"}...),
			},
			"spec.gc_spec.advanced_options.enable_subsets": []sets.String{
				sets.NewString([]string{"any_endpoint", "default_subset", "fail_request"}...),
			},
			"spec.gc_spec.origin_servers": []sets.String{
				sets.NewString([]string{"consul_service", "custom_endpoint_object", "k8s_service", "private_ip", "private_name", "public_ip", "public_name", "vn_private_ip", "vn_private_name"}...),
			},
			"spec.gc_spec.origin_servers.consul_service": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.gc_spec.origin_servers.consul_service.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.origin_servers.k8s_service": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network", "vk8s_networks"}...),
			},
			"spec.gc_spec.origin_servers.k8s_service.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.origin_servers.private_ip": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.gc_spec.origin_servers.private_ip.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.origin_servers.private_name": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.gc_spec.origin_servers.private_name.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.use_tls": []sets.String{
				sets.NewString([]string{"disable_sni", "sni", "use_host_header_as_sni"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
				sets.NewString([]string{"skip_server_verification", "use_server_verification", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.use_tls.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.use_tls.use_mtls.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.origin_pool.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"health_check_port", "same_as_endpoint_port"}...),
				sets.NewString([]string{"no_tls", "use_tls"}...),
			},
			"spec.gc_spec.advanced_options": []sets.String{
				sets.NewString([]string{"circuit_breaker", "disable_circuit_breaker"}...),
				sets.NewString([]string{"disable_outlier_detection", "outlier_detection"}...),
				sets.NewString([]string{"disable_subsets", "enable_subsets"}...),
				sets.NewString([]string{"no_panic_threshold", "panic_threshold"}...),
			},
			"spec.gc_spec.advanced_options.enable_subsets": []sets.String{
				sets.NewString([]string{"any_endpoint", "default_subset", "fail_request"}...),
			},
			"spec.gc_spec.origin_servers": []sets.String{
				sets.NewString([]string{"consul_service", "custom_endpoint_object", "k8s_service", "private_ip", "private_name", "public_ip", "public_name", "vn_private_ip", "vn_private_name"}...),
			},
			"spec.gc_spec.origin_servers.consul_service": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.gc_spec.origin_servers.consul_service.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.origin_servers.k8s_service": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network", "vk8s_networks"}...),
			},
			"spec.gc_spec.origin_servers.k8s_service.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.origin_servers.private_ip": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.gc_spec.origin_servers.private_ip.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.origin_servers.private_name": []sets.String{
				sets.NewString([]string{"inside_network", "outside_network"}...),
			},
			"spec.gc_spec.origin_servers.private_name.site_locator": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.use_tls": []sets.String{
				sets.NewString([]string{"disable_sni", "sni", "use_host_header_as_sni"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
				sets.NewString([]string{"skip_server_verification", "use_server_verification", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.use_tls.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.use_tls.use_mtls.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.rate_limiter_policy.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"any_server", "server_name", "server_name_matcher", "server_selector"}...),
			},
			"spec.rules.spec": []sets.String{
				sets.NewString([]string{"apply_rate_limiter", "bypass_rate_limiter", "custom_rate_limiter"}...),
			},
			"spec.rules.spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.rate_limiter_policy.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"any_server", "server_name", "server_name_matcher", "server_selector"}...),
			},
			"spec.rules.spec": []sets.String{
				sets.NewString([]string{"apply_rate_limiter", "bypass_rate_limiter", "custom_rate_limiter"}...),
			},
			"spec.rules.spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.rate_limiter_policy.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"any_server", "server_name", "server_name_matcher", "server_selector"}...),
			},
			"spec.gc_spec.rules.spec": []sets.String{
				sets.NewString([]string{"apply_rate_limiter", "bypass_rate_limiter", "custom_rate_limiter"}...),
			},
			"spec.gc_spec.rules.spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.rate_limiter_policy.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"any_server", "server_name", "server_name_matcher", "server_selector"}...),
			},
			"spec.gc_spec.rules.spec": []sets.String{
				sets.NewString([]string{"apply_rate_limiter", "bypass_rate_limiter", "custom_rate_limiter"}...),
			},
			"spec.gc_spec.rules.spec.headers": []sets.String{
				sets.NewString([]string{"check_not_present", "check_present", "item", "presence"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.tcp_loadbalancer.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"advertise_custom", "advertise_on_public", "advertise_on_public_default_vip", "do_not_advertise"}...),
				sets.NewString([]string{"do_not_retract_cluster", "retract_cluster"}...),
				sets.NewString([]string{"hash_policy_choice_least_active", "hash_policy_choice_random", "hash_policy_choice_round_robin", "hash_policy_choice_source_ip_stickiness"}...),
			},
			"spec.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"port", "use_default_port"}...),
				sets.NewString([]string{"site", "virtual_network", "virtual_site", "vk8s_service"}...),
			},
			"spec.advertise_custom.advertise_where.virtual_network": []sets.String{
				sets.NewString([]string{"default_vip", "specific_vip"}...),
			},
			"spec.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.origin_pools_weights": []sets.String{
				sets.NewString([]string{"cluster", "pool"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.tcp_loadbalancer.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"advertise_custom", "advertise_on_public", "advertise_on_public_default_vip", "do_not_advertise"}...),
				sets.NewString([]string{"do_not_retract_cluster", "retract_cluster"}...),
				sets.NewString([]string{"hash_policy_choice_least_active", "hash_policy_choice_random", "hash_policy_choice_round_robin", "hash_policy_choice_source_ip_stickiness"}...),
			},
			"spec.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"port", "use_default_port"}...),
				sets.NewString([]string{"site", "virtual_network", "virtual_site", "vk8s_service"}...),
			},
			"spec.advertise_custom.advertise_where.virtual_network": []sets.String{
				sets.NewString([]string{"default_vip", "specific_vip"}...),
			},
			"spec.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.origin_pools_weights": []sets.String{
				sets.NewString([]string{"cluster", "pool"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.tcp_loadbalancer.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"advertise_custom", "advertise_on_public", "advertise_on_public_default_vip", "do_not_advertise"}...),
				sets.NewString([]string{"do_not_retract_cluster", "retract_cluster"}...),
				sets.NewString([]string{"hash_policy_choice_least_active", "hash_policy_choice_random", "hash_policy_choice_round_robin", "hash_policy_choice_source_ip_stickiness"}...),
			},
			"spec.gc_spec.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"port", "use_default_port"}...),
				sets.NewString([]string{"site", "virtual_network", "virtual_site", "vk8s_service"}...),
			},
			"spec.gc_spec.advertise_custom.advertise_where.virtual_network": []sets.String{
				sets.NewString([]string{"default_vip", "specific_vip"}...),
			},
			"spec.gc_spec.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.origin_pools_weights": []sets.String{
				sets.NewString([]string{"cluster", "pool"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.tcp_loadbalancer.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"advertise_custom", "advertise_on_public", "advertise_on_public_default_vip", "do_not_advertise"}...),
				sets.NewString([]string{"do_not_retract_cluster", "retract_cluster"}...),
				sets.NewString([]string{"hash_policy_choice_least_active", "hash_policy_choice_random", "hash_policy_choice_round_robin", "hash_policy_choice_source_ip_stickiness"}...),
			},
			"spec.gc_spec.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"port", "use_default_port"}...),
				sets.NewString([]string{"site", "virtual_network", "virtual_site", "vk8s_service"}...),
			},
			"spec.gc_spec.advertise_custom.advertise_where.virtual_network": []sets.String{
				sets.NewString([]string{"default_vip", "specific_vip"}...),
			},
			"spec.gc_spec.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.origin_pools_weights": []sets.String{
				sets.NewString([]string{"cluster", "pool"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.voltstack_site.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"allow_all_usb", "deny_all_usb", "usb_policy"}...),
				sets.NewString([]string{"bond_device_list", "no_bond_devices"}...),
				sets.NewString([]string{"custom_network_config", "default_network_config"}...),
				sets.NewString([]string{"custom_storage_config", "default_storage_config"}...),
				sets.NewString([]string{"disable_gpu", "enable_gpu", "enable_vgpu"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"local_control_plane", "no_local_control_plane"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
			},
			"spec.bond_device_list.bond_devices": []sets.String{
				sets.NewString([]string{"active_backup", "lacp"}...),
			},
			"spec.custom_network_config": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"default_config", "slo_config"}...),
				sets.NewString([]string{"default_interface_config", "interface_list"}...),
				sets.NewString([]string{"default_sli_config", "sli_config"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
			},
			"spec.custom_network_config.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.custom_network_config.interface_list.interfaces": []sets.String{
				sets.NewString([]string{"dedicated_interface", "dedicated_management_interface", "ethernet_interface", "tunnel_interface"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.dedicated_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.dedicated_management_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.ethernet_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"dhcp_client", "dhcp_server", "static_ip"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network", "srv6_network", "storage_network"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
				sets.NewString([]string{"no_ipv6_address", "static_ipv6_address"}...),
				sets.NewString([]string{"untagged", "vlan_id"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.ethernet_interface.dhcp_server": []sets.String{
				sets.NewString([]string{"automatic_from_end", "automatic_from_start", "interface_ip_map"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.ethernet_interface.dhcp_server.dhcp_networks": []sets.String{
				sets.NewString([]string{"dgw_address", "first_address", "last_address"}...),
				sets.NewString([]string{"dns_address", "same_as_dgw"}...),
				sets.NewString([]string{"network_prefix", "network_prefix_allocator"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.ethernet_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.ethernet_interface.static_ipv6_address": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.tunnel_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.tunnel_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.custom_network_config.sli_config": []sets.String{
				sets.NewString([]string{"no_static_routes", "static_routes"}...),
			},
			"spec.custom_network_config.sli_config.static_routes.static_routes": []sets.String{
				sets.NewString([]string{"default_gateway", "interface", "ip_address"}...),
			},
			"spec.custom_network_config.slo_config": []sets.String{
				sets.NewString([]string{"dc_cluster_group", "no_dc_cluster_group"}...),
				sets.NewString([]string{"no_static_routes", "static_routes"}...),
			},
			"spec.custom_network_config.slo_config.static_routes.static_routes": []sets.String{
				sets.NewString([]string{"default_gateway", "interface", "ip_address"}...),
			},
			"spec.custom_storage_config": []sets.String{
				sets.NewString([]string{"default_storage_class", "storage_class_list"}...),
				sets.NewString([]string{"no_static_routes", "static_routes"}...),
				sets.NewString([]string{"no_storage_device", "storage_device_list"}...),
				sets.NewString([]string{"no_storage_interfaces", "storage_interface_list"}...),
			},
			"spec.custom_storage_config.static_routes.static_routes": []sets.String{
				sets.NewString([]string{"default_gateway", "interface", "ip_address"}...),
			},
			"spec.custom_storage_config.storage_class_list.storage_classes": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident": []sets.String{
				sets.NewString([]string{"netapp_backend_ontap_nas", "netapp_backend_ontap_san"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
				sets.NewString([]string{"no_chap", "use_chap"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_target_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
				sets.NewString([]string{"nfs_endpoint_dns_name", "nfs_endpoint_ip"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"dhcp_client", "dhcp_server", "static_ip"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network", "srv6_network", "storage_network"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
				sets.NewString([]string{"no_ipv6_address", "static_ipv6_address"}...),
				sets.NewString([]string{"untagged", "vlan_id"}...),
			},
			"spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.dhcp_server": []sets.String{
				sets.NewString([]string{"automatic_from_end", "automatic_from_start", "interface_ip_map"}...),
			},
			"spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.dhcp_server.dhcp_networks": []sets.String{
				sets.NewString([]string{"dgw_address", "first_address", "last_address"}...),
				sets.NewString([]string{"dns_address", "same_as_dgw"}...),
				sets.NewString([]string{"network_prefix", "network_prefix_allocator"}...),
			},
			"spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.static_ipv6_address": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.local_control_plane": []sets.String{
				sets.NewString([]string{"inside_vn", "outside_vn"}...),
			},
			"spec.local_control_plane.bgp_config.peers": []sets.String{
				sets.NewString([]string{"external", "internal"}...),
			},
			"spec.local_control_plane.bgp_config.peers.external": []sets.String{
				sets.NewString([]string{"address", "default_gateway", "from_site", "subnet_begin_offset", "subnet_end_offset"}...),
				sets.NewString([]string{"inside_interfaces", "interface", "interface_list", "outside_interfaces"}...),
			},
			"spec.local_control_plane.bgp_config.peers.external.family_inet": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.local_control_plane.bgp_config.peers.internal": []sets.String{
				sets.NewString([]string{"address", "dns_name", "from_site"}...),
				sets.NewString([]string{"disable_mtls", "enable_mtls"}...),
			},
			"spec.local_control_plane.bgp_config.peers.internal.family_inet6vpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.local_control_plane.bgp_config.peers.internal.family_inetvpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.local_control_plane.bgp_config.peers.internal.family_inetvpn.enable": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.local_control_plane.bgp_config.peers.internal.family_rtarget": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.voltstack_site.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"allow_all_usb", "deny_all_usb", "usb_policy"}...),
				sets.NewString([]string{"bond_device_list", "no_bond_devices"}...),
				sets.NewString([]string{"custom_network_config", "default_network_config"}...),
				sets.NewString([]string{"custom_storage_config", "default_storage_config"}...),
				sets.NewString([]string{"disable_gpu", "enable_gpu", "enable_vgpu"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"local_control_plane", "no_local_control_plane"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
			},
			"spec.bond_device_list.bond_devices": []sets.String{
				sets.NewString([]string{"active_backup", "lacp"}...),
			},
			"spec.custom_network_config": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"default_config", "slo_config"}...),
				sets.NewString([]string{"default_interface_config", "interface_list"}...),
				sets.NewString([]string{"default_sli_config", "sli_config"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
			},
			"spec.custom_network_config.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.custom_network_config.interface_list.interfaces": []sets.String{
				sets.NewString([]string{"dedicated_interface", "dedicated_management_interface", "ethernet_interface", "tunnel_interface"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.dedicated_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.dedicated_management_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.ethernet_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"dhcp_client", "dhcp_server", "static_ip"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network", "srv6_network", "storage_network"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
				sets.NewString([]string{"no_ipv6_address", "static_ipv6_address"}...),
				sets.NewString([]string{"untagged", "vlan_id"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.ethernet_interface.dhcp_server": []sets.String{
				sets.NewString([]string{"automatic_from_end", "automatic_from_start", "interface_ip_map"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.ethernet_interface.dhcp_server.dhcp_networks": []sets.String{
				sets.NewString([]string{"dgw_address", "first_address", "last_address"}...),
				sets.NewString([]string{"dns_address", "same_as_dgw"}...),
				sets.NewString([]string{"network_prefix", "network_prefix_allocator"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.ethernet_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.ethernet_interface.static_ipv6_address": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.tunnel_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network"}...),
			},
			"spec.custom_network_config.interface_list.interfaces.tunnel_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.custom_network_config.sli_config": []sets.String{
				sets.NewString([]string{"no_static_routes", "static_routes"}...),
			},
			"spec.custom_network_config.sli_config.static_routes.static_routes": []sets.String{
				sets.NewString([]string{"default_gateway", "interface", "ip_address"}...),
			},
			"spec.custom_network_config.slo_config": []sets.String{
				sets.NewString([]string{"dc_cluster_group", "no_dc_cluster_group"}...),
				sets.NewString([]string{"no_static_routes", "static_routes"}...),
			},
			"spec.custom_network_config.slo_config.static_routes.static_routes": []sets.String{
				sets.NewString([]string{"default_gateway", "interface", "ip_address"}...),
			},
			"spec.custom_storage_config": []sets.String{
				sets.NewString([]string{"default_storage_class", "storage_class_list"}...),
				sets.NewString([]string{"no_static_routes", "static_routes"}...),
				sets.NewString([]string{"no_storage_device", "storage_device_list"}...),
				sets.NewString([]string{"no_storage_interfaces", "storage_interface_list"}...),
			},
			"spec.custom_storage_config.static_routes.static_routes": []sets.String{
				sets.NewString([]string{"default_gateway", "interface", "ip_address"}...),
			},
			"spec.custom_storage_config.storage_class_list.storage_classes": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident": []sets.String{
				sets.NewString([]string{"netapp_backend_ontap_nas", "netapp_backend_ontap_san"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
				sets.NewString([]string{"no_chap", "use_chap"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_target_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
				sets.NewString([]string{"nfs_endpoint_dns_name", "nfs_endpoint_ip"}...),
			},
			"spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"dhcp_client", "dhcp_server", "static_ip"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network", "srv6_network", "storage_network"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
				sets.NewString([]string{"no_ipv6_address", "static_ipv6_address"}...),
				sets.NewString([]string{"untagged", "vlan_id"}...),
			},
			"spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.dhcp_server": []sets.String{
				sets.NewString([]string{"automatic_from_end", "automatic_from_start", "interface_ip_map"}...),
			},
			"spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.dhcp_server.dhcp_networks": []sets.String{
				sets.NewString([]string{"dgw_address", "first_address", "last_address"}...),
				sets.NewString([]string{"dns_address", "same_as_dgw"}...),
				sets.NewString([]string{"network_prefix", "network_prefix_allocator"}...),
			},
			"spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.static_ipv6_address": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.local_control_plane": []sets.String{
				sets.NewString([]string{"inside_vn", "outside_vn"}...),
			},
			"spec.local_control_plane.bgp_config.peers": []sets.String{
				sets.NewString([]string{"external", "internal"}...),
			},
			"spec.local_control_plane.bgp_config.peers.external": []sets.String{
				sets.NewString([]string{"address", "default_gateway", "from_site", "subnet_begin_offset", "subnet_end_offset"}...),
				sets.NewString([]string{"inside_interfaces", "interface", "interface_list", "outside_interfaces"}...),
			},
			"spec.local_control_plane.bgp_config.peers.external.family_inet": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.local_control_plane.bgp_config.peers.internal": []sets.String{
				sets.NewString([]string{"address", "dns_name", "from_site"}...),
				sets.NewString([]string{"disable_mtls", "enable_mtls"}...),
			},
			"spec.local_control_plane.bgp_config.peers.internal.family_inet6vpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.local_control_plane.bgp_config.peers.internal.family_inetvpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.local_control_plane.bgp_config.peers.internal.family_inetvpn.enable": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.local_control_plane.bgp_config.peers.internal.family_rtarget": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.voltstack_site.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"allow_all_usb", "deny_all_usb", "usb_policy"}...),
				sets.NewString([]string{"bond_device_list", "no_bond_devices"}...),
				sets.NewString([]string{"custom_network_config", "default_network_config"}...),
				sets.NewString([]string{"custom_storage_config", "default_storage_config"}...),
				sets.NewString([]string{"disable_gpu", "enable_gpu", "enable_vgpu"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"local_control_plane", "no_local_control_plane"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
			},
			"spec.gc_spec.bond_device_list.bond_devices": []sets.String{
				sets.NewString([]string{"active_backup", "lacp"}...),
			},
			"spec.gc_spec.custom_network_config": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"default_config", "slo_config"}...),
				sets.NewString([]string{"default_interface_config", "interface_list"}...),
				sets.NewString([]string{"default_sli_config", "sli_config"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
			},
			"spec.gc_spec.custom_network_config.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces": []sets.String{
				sets.NewString([]string{"dedicated_interface", "dedicated_management_interface", "ethernet_interface", "tunnel_interface"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.dedicated_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.dedicated_management_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.ethernet_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"dhcp_client", "dhcp_server", "static_ip"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network", "srv6_network", "storage_network"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
				sets.NewString([]string{"no_ipv6_address", "static_ipv6_address"}...),
				sets.NewString([]string{"untagged", "vlan_id"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.ethernet_interface.dhcp_server": []sets.String{
				sets.NewString([]string{"automatic_from_end", "automatic_from_start", "interface_ip_map"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.ethernet_interface.dhcp_server.dhcp_networks": []sets.String{
				sets.NewString([]string{"dgw_address", "first_address", "last_address"}...),
				sets.NewString([]string{"dns_address", "same_as_dgw"}...),
				sets.NewString([]string{"network_prefix", "network_prefix_allocator"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.ethernet_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.ethernet_interface.static_ipv6_address": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.tunnel_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.tunnel_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.custom_network_config.sli_config": []sets.String{
				sets.NewString([]string{"no_static_routes", "static_routes"}...),
			},
			"spec.gc_spec.custom_network_config.sli_config.static_routes.static_routes": []sets.String{
				sets.NewString([]string{"default_gateway", "interface", "ip_address"}...),
			},
			"spec.gc_spec.custom_network_config.slo_config": []sets.String{
				sets.NewString([]string{"dc_cluster_group", "no_dc_cluster_group"}...),
				sets.NewString([]string{"no_static_routes", "static_routes"}...),
			},
			"spec.gc_spec.custom_network_config.slo_config.static_routes.static_routes": []sets.String{
				sets.NewString([]string{"default_gateway", "interface", "ip_address"}...),
			},
			"spec.gc_spec.custom_storage_config": []sets.String{
				sets.NewString([]string{"default_storage_class", "storage_class_list"}...),
				sets.NewString([]string{"no_static_routes", "static_routes"}...),
				sets.NewString([]string{"no_storage_device", "storage_device_list"}...),
				sets.NewString([]string{"no_storage_interfaces", "storage_interface_list"}...),
			},
			"spec.gc_spec.custom_storage_config.static_routes.static_routes": []sets.String{
				sets.NewString([]string{"default_gateway", "interface", "ip_address"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_class_list.storage_classes": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident": []sets.String{
				sets.NewString([]string{"netapp_backend_ontap_nas", "netapp_backend_ontap_san"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
				sets.NewString([]string{"no_chap", "use_chap"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_target_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
				sets.NewString([]string{"nfs_endpoint_dns_name", "nfs_endpoint_ip"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"dhcp_client", "dhcp_server", "static_ip"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network", "srv6_network", "storage_network"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
				sets.NewString([]string{"no_ipv6_address", "static_ipv6_address"}...),
				sets.NewString([]string{"untagged", "vlan_id"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.dhcp_server": []sets.String{
				sets.NewString([]string{"automatic_from_end", "automatic_from_start", "interface_ip_map"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.dhcp_server.dhcp_networks": []sets.String{
				sets.NewString([]string{"dgw_address", "first_address", "last_address"}...),
				sets.NewString([]string{"dns_address", "same_as_dgw"}...),
				sets.NewString([]string{"network_prefix", "network_prefix_allocator"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.static_ipv6_address": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.local_control_plane": []sets.String{
				sets.NewString([]string{"inside_vn", "outside_vn"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers": []sets.String{
				sets.NewString([]string{"external", "internal"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.external": []sets.String{
				sets.NewString([]string{"address", "default_gateway", "from_site", "subnet_begin_offset", "subnet_end_offset"}...),
				sets.NewString([]string{"inside_interfaces", "interface", "interface_list", "outside_interfaces"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.external.family_inet": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal": []sets.String{
				sets.NewString([]string{"address", "dns_name", "from_site"}...),
				sets.NewString([]string{"disable_mtls", "enable_mtls"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_inet6vpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_inetvpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_inetvpn.enable": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_rtarget": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.gc_spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.voltstack_site.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"allow_all_usb", "deny_all_usb", "usb_policy"}...),
				sets.NewString([]string{"bond_device_list", "no_bond_devices"}...),
				sets.NewString([]string{"custom_network_config", "default_network_config"}...),
				sets.NewString([]string{"custom_storage_config", "default_storage_config"}...),
				sets.NewString([]string{"disable_gpu", "enable_gpu", "enable_vgpu"}...),
				sets.NewString([]string{"k8s_cluster", "no_k8s_cluster"}...),
				sets.NewString([]string{"local_control_plane", "no_local_control_plane"}...),
				sets.NewString([]string{"log_receiver", "logs_streaming_disabled"}...),
			},
			"spec.gc_spec.bond_device_list.bond_devices": []sets.String{
				sets.NewString([]string{"active_backup", "lacp"}...),
			},
			"spec.gc_spec.custom_network_config": []sets.String{
				sets.NewString([]string{"active_forward_proxy_policies", "forward_proxy_allow_all", "no_forward_proxy"}...),
				sets.NewString([]string{"active_network_policies", "no_network_policy"}...),
				sets.NewString([]string{"default_config", "slo_config"}...),
				sets.NewString([]string{"default_interface_config", "interface_list"}...),
				sets.NewString([]string{"default_sli_config", "sli_config"}...),
				sets.NewString([]string{"global_network_list", "no_global_network"}...),
			},
			"spec.gc_spec.custom_network_config.global_network_list.global_network_connections": []sets.String{
				sets.NewString([]string{"disable_forward_proxy", "enable_forward_proxy"}...),
				sets.NewString([]string{"sli_to_global_dr", "slo_to_global_dr"}...),
			},
			"spec.gc_spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy": []sets.String{
				sets.NewString([]string{"no_interception", "tls_intercept"}...),
			},
			"spec.gc_spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.custom_network_config.global_network_list.global_network_connections.enable_forward_proxy.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces": []sets.String{
				sets.NewString([]string{"dedicated_interface", "dedicated_management_interface", "ethernet_interface", "tunnel_interface"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.dedicated_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.dedicated_management_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.ethernet_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"dhcp_client", "dhcp_server", "static_ip"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network", "srv6_network", "storage_network"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
				sets.NewString([]string{"no_ipv6_address", "static_ipv6_address"}...),
				sets.NewString([]string{"untagged", "vlan_id"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.ethernet_interface.dhcp_server": []sets.String{
				sets.NewString([]string{"automatic_from_end", "automatic_from_start", "interface_ip_map"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.ethernet_interface.dhcp_server.dhcp_networks": []sets.String{
				sets.NewString([]string{"dgw_address", "first_address", "last_address"}...),
				sets.NewString([]string{"dns_address", "same_as_dgw"}...),
				sets.NewString([]string{"network_prefix", "network_prefix_allocator"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.ethernet_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.ethernet_interface.static_ipv6_address": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.tunnel_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network"}...),
			},
			"spec.gc_spec.custom_network_config.interface_list.interfaces.tunnel_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.custom_network_config.sli_config": []sets.String{
				sets.NewString([]string{"no_static_routes", "static_routes"}...),
			},
			"spec.gc_spec.custom_network_config.sli_config.static_routes.static_routes": []sets.String{
				sets.NewString([]string{"default_gateway", "interface", "ip_address"}...),
			},
			"spec.gc_spec.custom_network_config.slo_config": []sets.String{
				sets.NewString([]string{"dc_cluster_group", "no_dc_cluster_group"}...),
				sets.NewString([]string{"no_static_routes", "static_routes"}...),
			},
			"spec.gc_spec.custom_network_config.slo_config.static_routes.static_routes": []sets.String{
				sets.NewString([]string{"default_gateway", "interface", "ip_address"}...),
			},
			"spec.gc_spec.custom_storage_config": []sets.String{
				sets.NewString([]string{"default_storage_class", "storage_class_list"}...),
				sets.NewString([]string{"no_static_routes", "static_routes"}...),
				sets.NewString([]string{"no_storage_device", "storage_device_list"}...),
				sets.NewString([]string{"no_storage_interfaces", "storage_interface_list"}...),
			},
			"spec.gc_spec.custom_storage_config.static_routes.static_routes": []sets.String{
				sets.NewString([]string{"default_gateway", "interface", "ip_address"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_class_list.storage_classes": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices": []sets.String{
				sets.NewString([]string{"custom_storage", "netapp_trident", "openebs_enterprise", "pure_service_orchestrator"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident": []sets.String{
				sets.NewString([]string{"netapp_backend_ontap_nas", "netapp_backend_ontap_san"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_nas.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san": []sets.String{
				sets.NewString([]string{"data_lif_dns_name", "data_lif_ip"}...),
				sets.NewString([]string{"management_lif_dns_name", "management_lif_ip"}...),
				sets.NewString([]string{"no_chap", "use_chap"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.client_private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.password": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.storage.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.use_chap.chap_target_initiator_secret": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.netapp_trident.netapp_backend_ontap_san.volume_defaults": []sets.String{
				sets.NewString([]string{"adaptive_qos_policy", "no_qos", "qos_policy"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_array.flash_arrays.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades": []sets.String{
				sets.NewString([]string{"mgmt_dns_name", "mgmt_ip"}...),
				sets.NewString([]string{"nfs_endpoint_dns_name", "nfs_endpoint_ip"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_device_list.storage_devices.pure_service_orchestrator.arrays.flash_blade.flash_blades.api_token": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface": []sets.String{
				sets.NewString([]string{"cluster", "node"}...),
				sets.NewString([]string{"dhcp_client", "dhcp_server", "static_ip"}...),
				sets.NewString([]string{"inside_network", "site_local_inside_network", "site_local_network", "srv6_network", "storage_network"}...),
				sets.NewString([]string{"is_primary", "not_primary"}...),
				sets.NewString([]string{"monitor", "monitor_disabled"}...),
				sets.NewString([]string{"no_ipv6_address", "static_ipv6_address"}...),
				sets.NewString([]string{"untagged", "vlan_id"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.dhcp_server": []sets.String{
				sets.NewString([]string{"automatic_from_end", "automatic_from_start", "interface_ip_map"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.dhcp_server.dhcp_networks": []sets.String{
				sets.NewString([]string{"dgw_address", "first_address", "last_address"}...),
				sets.NewString([]string{"dns_address", "same_as_dgw"}...),
				sets.NewString([]string{"network_prefix", "network_prefix_allocator"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.static_ip": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.custom_storage_config.storage_interface_list.storage_interfaces.storage_interface.static_ipv6_address": []sets.String{
				sets.NewString([]string{"cluster_static_ip", "fleet_static_ip", "node_static_ip"}...),
			},
			"spec.gc_spec.local_control_plane": []sets.String{
				sets.NewString([]string{"inside_vn", "outside_vn"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers": []sets.String{
				sets.NewString([]string{"external", "internal"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.external": []sets.String{
				sets.NewString([]string{"address", "default_gateway", "from_site", "subnet_begin_offset", "subnet_end_offset"}...),
				sets.NewString([]string{"inside_interfaces", "interface", "interface_list", "outside_interfaces"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.external.family_inet": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal": []sets.String{
				sets.NewString([]string{"address", "dns_name", "from_site"}...),
				sets.NewString([]string{"disable_mtls", "enable_mtls"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_inet6vpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_inetvpn": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_inetvpn.enable": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.local_control_plane.bgp_config.peers.internal.family_rtarget": []sets.String{
				sets.NewString([]string{"disable", "enable"}...),
			},
			"spec.gc_spec.os": []sets.String{
				sets.NewString([]string{"default_os_version", "operating_system_version"}...),
			},
			"spec.gc_spec.sw": []sets.String{
				sets.NewString([]string{"default_sw_version", "volterra_software_version"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.workload.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"job", "service", "simple_service", "stateful_service"}...),
			},
			"spec.job.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.job.containers.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.job.containers.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.job.containers.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.job.containers.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.job.containers.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.job.containers.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.job.containers.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.job.deploy_options": []sets.String{
				sets.NewString([]string{"all_res", "default_virtual_sites", "deploy_ce_sites", "deploy_ce_virtual_sites", "deploy_re_sites", "deploy_re_virtual_sites"}...),
			},
			"spec.job.volumes": []sets.String{
				sets.NewString([]string{"empty_dir", "host_path", "persistent_volume"}...),
			},
			"spec.job.volumes.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.service": []sets.String{
				sets.NewString([]string{"num_replicas", "scale_to_zero"}...),
			},
			"spec.service.advertise_options": []sets.String{
				sets.NewString([]string{"advertise_custom", "advertise_in_cluster", "advertise_on_public", "do_not_advertise"}...),
			},
			"spec.service.advertise_options.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"site", "virtual_site", "vk8s_service"}...),
			},
			"spec.service.advertise_options.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.service.advertise_options.advertise_in_cluster": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.service.advertise_options.advertise_in_cluster.multi_ports.ports.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.service.advertise_options.advertise_in_cluster.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.service.advertise_options.advertise_on_public": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.service.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.service.containers.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.service.containers.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.service.containers.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.service.containers.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.service.containers.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.service.containers.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.service.containers.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.service.deploy_options": []sets.String{
				sets.NewString([]string{"all_res", "default_virtual_sites", "deploy_ce_sites", "deploy_ce_virtual_sites", "deploy_re_sites", "deploy_re_virtual_sites"}...),
			},
			"spec.service.volumes": []sets.String{
				sets.NewString([]string{"empty_dir", "host_path", "persistent_volume"}...),
			},
			"spec.service.volumes.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.simple_service": []sets.String{
				sets.NewString([]string{"disabled", "enabled"}...),
				sets.NewString([]string{"do_not_advertise", "service_port", "simple_advertise"}...),
			},
			"spec.simple_service.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.simple_service.container.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.simple_service.container.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.simple_service.container.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.simple_service.container.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.simple_service.container.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.simple_service.container.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.simple_service.container.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.simple_service.enabled.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.stateful_service": []sets.String{
				sets.NewString([]string{"num_replicas", "scale_to_zero"}...),
			},
			"spec.stateful_service.advertise_options": []sets.String{
				sets.NewString([]string{"advertise_custom", "advertise_in_cluster", "advertise_on_public", "do_not_advertise"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"site", "virtual_site", "vk8s_service"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.stateful_service.advertise_options.advertise_in_cluster": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.stateful_service.advertise_options.advertise_in_cluster.multi_ports.ports.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.stateful_service.advertise_options.advertise_in_cluster.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.stateful_service.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.stateful_service.containers.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.stateful_service.containers.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.stateful_service.containers.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.stateful_service.containers.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.stateful_service.containers.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.stateful_service.containers.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.stateful_service.containers.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.stateful_service.deploy_options": []sets.String{
				sets.NewString([]string{"all_res", "default_virtual_sites", "deploy_ce_sites", "deploy_ce_virtual_sites", "deploy_re_sites", "deploy_re_virtual_sites"}...),
			},
			"spec.stateful_service.persistent_volumes.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.stateful_service.volumes": []sets.String{
				sets.NewString([]string{"empty_dir", "host_path"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.workload.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"job", "service", "simple_service", "stateful_service"}...),
			},
			"spec.job.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.job.containers.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.job.containers.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.job.containers.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.job.containers.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.job.containers.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.job.containers.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.job.containers.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.job.deploy_options": []sets.String{
				sets.NewString([]string{"all_res", "default_virtual_sites", "deploy_ce_sites", "deploy_ce_virtual_sites", "deploy_re_sites", "deploy_re_virtual_sites"}...),
			},
			"spec.job.volumes": []sets.String{
				sets.NewString([]string{"empty_dir", "host_path", "persistent_volume"}...),
			},
			"spec.job.volumes.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.service": []sets.String{
				sets.NewString([]string{"num_replicas", "scale_to_zero"}...),
			},
			"spec.service.advertise_options": []sets.String{
				sets.NewString([]string{"advertise_custom", "advertise_in_cluster", "advertise_on_public", "do_not_advertise"}...),
			},
			"spec.service.advertise_options.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"site", "virtual_site", "vk8s_service"}...),
			},
			"spec.service.advertise_options.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_custom.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.service.advertise_options.advertise_in_cluster": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.service.advertise_options.advertise_in_cluster.multi_ports.ports.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.service.advertise_options.advertise_in_cluster.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.service.advertise_options.advertise_on_public": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_on_public.multi_ports.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.service.advertise_options.advertise_on_public.port.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.service.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.service.containers.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.service.containers.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.service.containers.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.service.containers.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.service.containers.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.service.containers.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.service.containers.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.service.deploy_options": []sets.String{
				sets.NewString([]string{"all_res", "default_virtual_sites", "deploy_ce_sites", "deploy_ce_virtual_sites", "deploy_re_sites", "deploy_re_virtual_sites"}...),
			},
			"spec.service.volumes": []sets.String{
				sets.NewString([]string{"empty_dir", "host_path", "persistent_volume"}...),
			},
			"spec.service.volumes.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.simple_service": []sets.String{
				sets.NewString([]string{"disabled", "enabled"}...),
				sets.NewString([]string{"do_not_advertise", "service_port", "simple_advertise"}...),
			},
			"spec.simple_service.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.simple_service.container.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.simple_service.container.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.simple_service.container.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.simple_service.container.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.simple_service.container.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.simple_service.container.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.simple_service.container.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.simple_service.enabled.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.stateful_service": []sets.String{
				sets.NewString([]string{"num_replicas", "scale_to_zero"}...),
			},
			"spec.stateful_service.advertise_options": []sets.String{
				sets.NewString([]string{"advertise_custom", "advertise_in_cluster", "advertise_on_public", "do_not_advertise"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"site", "virtual_site", "vk8s_service"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_custom.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.stateful_service.advertise_options.advertise_in_cluster": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.stateful_service.advertise_options.advertise_in_cluster.multi_ports.ports.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.stateful_service.advertise_options.advertise_in_cluster.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.stateful_service.advertise_options.advertise_on_public.port.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.stateful_service.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.stateful_service.containers.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.stateful_service.containers.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.stateful_service.containers.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.stateful_service.containers.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.stateful_service.containers.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.stateful_service.containers.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.stateful_service.containers.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.stateful_service.deploy_options": []sets.String{
				sets.NewString([]string{"all_res", "default_virtual_sites", "deploy_ce_sites", "deploy_ce_virtual_sites", "deploy_re_sites", "deploy_re_virtual_sites"}...),
			},
			"spec.stateful_service.persistent_volumes.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.stateful_service.volumes": []sets.String{
				sets.NewString([]string{"empty_dir", "host_path"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.workload.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"job", "service", "simple_service", "stateful_service"}...),
			},
			"spec.gc_spec.job.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.gc_spec.job.containers.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.gc_spec.job.containers.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.job.containers.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.job.containers.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.job.containers.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.job.containers.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.job.containers.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.job.deploy_options": []sets.String{
				sets.NewString([]string{"all_res", "default_virtual_sites", "deploy_ce_sites", "deploy_ce_virtual_sites", "deploy_re_sites", "deploy_re_virtual_sites"}...),
			},
			"spec.gc_spec.job.volumes": []sets.String{
				sets.NewString([]string{"empty_dir", "host_path", "persistent_volume"}...),
			},
			"spec.gc_spec.job.volumes.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.gc_spec.service": []sets.String{
				sets.NewString([]string{"num_replicas", "scale_to_zero"}...),
			},
			"spec.gc_spec.service.advertise_options": []sets.String{
				sets.NewString([]string{"advertise_custom", "advertise_in_cluster", "advertise_on_public", "do_not_advertise"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"site", "virtual_site", "vk8s_service"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_in_cluster": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_in_cluster.multi_ports.ports.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_in_cluster.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.service.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.gc_spec.service.containers.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.gc_spec.service.containers.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.service.containers.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.service.containers.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.service.containers.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.service.containers.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.service.containers.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.service.deploy_options": []sets.String{
				sets.NewString([]string{"all_res", "default_virtual_sites", "deploy_ce_sites", "deploy_ce_virtual_sites", "deploy_re_sites", "deploy_re_virtual_sites"}...),
			},
			"spec.gc_spec.service.volumes": []sets.String{
				sets.NewString([]string{"empty_dir", "host_path", "persistent_volume"}...),
			},
			"spec.gc_spec.service.volumes.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.gc_spec.simple_service": []sets.String{
				sets.NewString([]string{"disabled", "enabled"}...),
				sets.NewString([]string{"do_not_advertise", "service_port", "simple_advertise"}...),
			},
			"spec.gc_spec.simple_service.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.gc_spec.simple_service.container.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.gc_spec.simple_service.container.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.simple_service.container.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.simple_service.container.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.simple_service.container.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.simple_service.container.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.simple_service.container.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.simple_service.enabled.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.gc_spec.stateful_service": []sets.String{
				sets.NewString([]string{"num_replicas", "scale_to_zero"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options": []sets.String{
				sets.NewString([]string{"advertise_custom", "advertise_in_cluster", "advertise_on_public", "do_not_advertise"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"site", "virtual_site", "vk8s_service"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_in_cluster": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_in_cluster.multi_ports.ports.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_in_cluster.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.stateful_service.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.gc_spec.stateful_service.containers.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.gc_spec.stateful_service.containers.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.stateful_service.containers.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.stateful_service.containers.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.stateful_service.containers.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.stateful_service.containers.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.stateful_service.containers.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.stateful_service.deploy_options": []sets.String{
				sets.NewString([]string{"all_res", "default_virtual_sites", "deploy_ce_sites", "deploy_ce_virtual_sites", "deploy_re_sites", "deploy_re_virtual_sites"}...),
			},
			"spec.gc_spec.stateful_service.persistent_volumes.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.gc_spec.stateful_service.volumes": []sets.String{
				sets.NewString([]string{"empty_dir", "host_path"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.views.workload.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"job", "service", "simple_service", "stateful_service"}...),
			},
			"spec.gc_spec.job.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.gc_spec.job.containers.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.gc_spec.job.containers.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.job.containers.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.job.containers.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.job.containers.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.job.containers.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.job.containers.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.job.deploy_options": []sets.String{
				sets.NewString([]string{"all_res", "default_virtual_sites", "deploy_ce_sites", "deploy_ce_virtual_sites", "deploy_re_sites", "deploy_re_virtual_sites"}...),
			},
			"spec.gc_spec.job.volumes": []sets.String{
				sets.NewString([]string{"empty_dir", "host_path", "persistent_volume"}...),
			},
			"spec.gc_spec.job.volumes.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.gc_spec.service": []sets.String{
				sets.NewString([]string{"num_replicas", "scale_to_zero"}...),
			},
			"spec.gc_spec.service.advertise_options": []sets.String{
				sets.NewString([]string{"advertise_custom", "advertise_in_cluster", "advertise_on_public", "do_not_advertise"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"site", "virtual_site", "vk8s_service"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_custom.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_in_cluster": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_in_cluster.multi_ports.ports.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_in_cluster.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.multi_ports.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.service.advertise_options.advertise_on_public.port.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.service.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.gc_spec.service.containers.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.gc_spec.service.containers.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.service.containers.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.service.containers.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.service.containers.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.service.containers.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.service.containers.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.service.deploy_options": []sets.String{
				sets.NewString([]string{"all_res", "default_virtual_sites", "deploy_ce_sites", "deploy_ce_virtual_sites", "deploy_re_sites", "deploy_re_virtual_sites"}...),
			},
			"spec.gc_spec.service.volumes": []sets.String{
				sets.NewString([]string{"empty_dir", "host_path", "persistent_volume"}...),
			},
			"spec.gc_spec.service.volumes.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.gc_spec.simple_service": []sets.String{
				sets.NewString([]string{"disabled", "enabled"}...),
				sets.NewString([]string{"do_not_advertise", "service_port", "simple_advertise"}...),
			},
			"spec.gc_spec.simple_service.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.gc_spec.simple_service.container.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.gc_spec.simple_service.container.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.simple_service.container.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.simple_service.container.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.simple_service.container.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.simple_service.container.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.simple_service.container.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.simple_service.enabled.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.gc_spec.stateful_service": []sets.String{
				sets.NewString([]string{"num_replicas", "scale_to_zero"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options": []sets.String{
				sets.NewString([]string{"advertise_custom", "advertise_in_cluster", "advertise_on_public", "do_not_advertise"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.advertise_where": []sets.String{
				sets.NewString([]string{"site", "virtual_site", "vk8s_service"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.advertise_where.vk8s_service": []sets.String{
				sets.NewString([]string{"site", "virtual_site"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_custom.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_in_cluster": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_in_cluster.multi_ports.ports.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_in_cluster.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public": []sets.String{
				sets.NewString([]string{"multi_ports", "port"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.multi_ports.ports.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port": []sets.String{
				sets.NewString([]string{"http_loadbalancer", "tcp_loadbalancer"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer": []sets.String{
				sets.NewString([]string{"default_route", "specific_routes"}...),
				sets.NewString([]string{"http", "https", "https_auto_cert"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.default_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters": []sets.String{
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https.tls_parameters.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"no_mtls", "use_mtls"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.https_auto_cert.tls_config": []sets.String{
				sets.NewString([]string{"custom_security", "default_security", "low_security", "medium_security"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes": []sets.String{
				sets.NewString([]string{"custom_route_object", "direct_response_route", "redirect_route", "simple_route"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.direct_response_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.redirect_route.route_redirect": []sets.String{
				sets.NewString([]string{"all_params", "remove_all_params", "retain_all_params", "strip_query_params"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route": []sets.String{
				sets.NewString([]string{"auto_host_rewrite", "disable_host_rewrite", "host_rewrite"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.http_loadbalancer.specific_routes.routes.simple_route.path": []sets.String{
				sets.NewString([]string{"path", "prefix", "regex"}...),
			},
			"spec.gc_spec.stateful_service.advertise_options.advertise_on_public.port.port.info": []sets.String{
				sets.NewString([]string{"same_as_port", "target_port"}...),
			},
			"spec.gc_spec.stateful_service.configuration.parameters": []sets.String{
				sets.NewString([]string{"env_var", "file"}...),
			},
			"spec.gc_spec.stateful_service.containers.image": []sets.String{
				sets.NewString([]string{"container_registry", "public"}...),
			},
			"spec.gc_spec.stateful_service.containers.liveness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.stateful_service.containers.liveness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.stateful_service.containers.liveness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.stateful_service.containers.readiness_check": []sets.String{
				sets.NewString([]string{"exec_health_check", "http_health_check", "tcp_health_check"}...),
			},
			"spec.gc_spec.stateful_service.containers.readiness_check.http_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.stateful_service.containers.readiness_check.tcp_health_check.port": []sets.String{
				sets.NewString([]string{"name", "num"}...),
			},
			"spec.gc_spec.stateful_service.deploy_options": []sets.String{
				sets.NewString([]string{"all_res", "default_virtual_sites", "deploy_ce_sites", "deploy_ce_virtual_sites", "deploy_re_sites", "deploy_re_virtual_sites"}...),
			},
			"spec.gc_spec.stateful_service.persistent_volumes.persistent_volume.storage": []sets.String{
				sets.NewString([]string{"class_name", "default"}...),
			},
			"spec.gc_spec.stateful_service.volumes": []sets.String{
				sets.NewString([]string{"empty_dir", "host_path"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.virtual_host.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"authentication", "no_authentication"}...),
				sets.NewString([]string{"captcha_challenge", "js_challenge", "no_challenge"}...),
				sets.NewString([]string{"disable_path_normalize", "enable_path_normalize"}...),
			},
			"spec.authentication": []sets.String{
				sets.NewString([]string{"cookie_params", "use_auth_object_config"}...),
				sets.NewString([]string{"redirect_dynamic", "redirect_url"}...),
			},
			"spec.authentication.cookie_params": []sets.String{
				sets.NewString([]string{"auth_hmac", "kms_key_hmac"}...),
			},
			"spec.authentication.cookie_params.auth_hmac.prim_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.authentication.cookie_params.auth_hmac.sec_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.tls_parameters.common_params.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.waf_type": []sets.String{
				sets.NewString([]string{"app_firewall", "waf", "waf_rules"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.virtual_host.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"authentication", "no_authentication"}...),
				sets.NewString([]string{"captcha_challenge", "js_challenge", "no_challenge"}...),
				sets.NewString([]string{"disable_path_normalize", "enable_path_normalize"}...),
			},
			"spec.authentication": []sets.String{
				sets.NewString([]string{"cookie_params", "use_auth_object_config"}...),
				sets.NewString([]string{"redirect_dynamic", "redirect_url"}...),
			},
			"spec.authentication.cookie_params": []sets.String{
				sets.NewString([]string{"auth_hmac", "kms_key_hmac"}...),
			},
			"spec.authentication.cookie_params.auth_hmac.prim_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.authentication.cookie_params.auth_hmac.sec_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.tls_parameters.common_params.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.waf_type": []sets.String{
				sets.NewString([]string{"app_firewall", "waf", "waf_rules"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.virtual_host.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"authentication", "no_authentication"}...),
				sets.NewString([]string{"bot_defense", "disable_bot_defense"}...),
				sets.NewString([]string{"captcha_challenge", "js_challenge", "no_challenge", "policy_based_challenge"}...),
				sets.NewString([]string{"disable_path_normalize", "enable_path_normalize"}...),
			},
			"spec.gc_spec.authentication": []sets.String{
				sets.NewString([]string{"cookie_params", "use_auth_object_config"}...),
				sets.NewString([]string{"redirect_dynamic", "redirect_url"}...),
			},
			"spec.gc_spec.authentication.cookie_params": []sets.String{
				sets.NewString([]string{"auth_hmac", "kms_key_hmac"}...),
			},
			"spec.gc_spec.authentication.cookie_params.auth_hmac.prim_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.authentication.cookie_params.auth_hmac.sec_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.bot_defense.api_auth_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.policy_based_challenge": []sets.String{
				sets.NewString([]string{"always_enable_captcha_challenge", "always_enable_js_challenge", "no_challenge"}...),
			},
			"spec.gc_spec.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.tls_parameters.common_params.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.waf_type": []sets.String{
				sets.NewString([]string{"app_firewall", "waf", "waf_rules"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.virtual_host.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"append_server_name", "default_header", "pass_through", "server_name"}...),
				sets.NewString([]string{"authentication", "no_authentication"}...),
				sets.NewString([]string{"bot_defense", "disable_bot_defense"}...),
				sets.NewString([]string{"captcha_challenge", "js_challenge", "no_challenge", "policy_based_challenge"}...),
				sets.NewString([]string{"disable_path_normalize", "enable_path_normalize"}...),
			},
			"spec.gc_spec.authentication": []sets.String{
				sets.NewString([]string{"cookie_params", "use_auth_object_config"}...),
				sets.NewString([]string{"redirect_dynamic", "redirect_url"}...),
			},
			"spec.gc_spec.authentication.cookie_params": []sets.String{
				sets.NewString([]string{"auth_hmac", "kms_key_hmac"}...),
			},
			"spec.gc_spec.authentication.cookie_params.auth_hmac.prim_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.authentication.cookie_params.auth_hmac.sec_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.bot_defense.api_auth_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.policy_based_challenge": []sets.String{
				sets.NewString([]string{"always_enable_captcha_challenge", "always_enable_js_challenge", "no_challenge"}...),
			},
			"spec.gc_spec.tls_intercept": []sets.String{
				sets.NewString([]string{"custom_certificate", "volterra_certificate"}...),
				sets.NewString([]string{"enable_for_all_domains", "policy"}...),
				sets.NewString([]string{"trusted_ca_url", "volterra_trusted_ca"}...),
			},
			"spec.gc_spec.tls_intercept.custom_certificate.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.tls_intercept.policy.interception_rules": []sets.String{
				sets.NewString([]string{"disable_interception", "enable_interception"}...),
			},
			"spec.gc_spec.tls_intercept.policy.interception_rules.domain_match": []sets.String{
				sets.NewString([]string{"exact_value", "regex_value", "suffix_value"}...),
			},
			"spec.gc_spec.tls_parameters.common_params.tls_certificates.private_key": []sets.String{
				sets.NewString([]string{"blindfold_secret_info", "clear_secret_info", "vault_secret_info", "wingman_secret_info"}...),
			},
			"spec.gc_spec.waf_type": []sets.String{
				sets.NewString([]string{"app_firewall", "waf", "waf_rules"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.virtual_k8s.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"disabled", "isolated"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.virtual_k8s.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"disabled", "isolated"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.virtual_k8s.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"disabled", "isolated"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.virtual_k8s.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"disabled", "isolated"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.virtual_network.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"global_network", "legacy_type", "site_local_inside_network", "site_local_network", "srv6_network"}...),
			},
			"spec.srv6_network": []sets.String{
				sets.NewString([]string{"anycast_vip", "fleet_vip", "interface_ip_vip"}...),
				sets.NewString([]string{"fleet_snat_pool", "interface_ip_snat_pool", "site_snat_pool"}...),
				sets.NewString([]string{"no_namespace_network", "srv6_network_ns_params"}...),
			},
			"spec.srv6_network.access_network_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.srv6_network.enterprise_network_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.srv6_network.export_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.srv6_network.internet_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.static_routes": []sets.String{
				sets.NewString([]string{"default_gateway", "interface", "ip_address"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.virtual_network.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec": []sets.String{
				sets.NewString([]string{"global_network", "legacy_type", "private_network", "site_local_inside_network", "site_local_network", "srv6_network"}...),
			},
			"spec.srv6_network": []sets.String{
				sets.NewString([]string{"anycast_vip", "fleet_vip", "interface_ip_vip"}...),
				sets.NewString([]string{"fleet_snat_pool", "interface_ip_snat_pool", "site_snat_pool"}...),
				sets.NewString([]string{"no_namespace_network", "srv6_network_ns_params"}...),
			},
			"spec.srv6_network.access_network_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.srv6_network.enterprise_network_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.srv6_network.export_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.srv6_network.internet_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.static_routes": []sets.String{
				sets.NewString([]string{"default_gateway", "interface", "ip_address"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.virtual_network.crudapi.API.Create"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"fleet_snat_pool", "interface_ip", "site_snat_pool"}...),
				sets.NewString([]string{"fleet_vip", "tenant_vip"}...),
				sets.NewString([]string{"global_network", "inside_network", "legacy_type", "private_network", "site_local_inside_network", "site_local_network", "srv6_network"}...),
			},
			"spec.gc_spec.private_network_parameters": []sets.String{
				sets.NewString([]string{"advertise_dedicated_vips", "no_advertise_dedicated_vips"}...),
				sets.NewString([]string{"no_private_access", "private_access_enabled"}...),
				sets.NewString([]string{"no_private_dns", "private_dns"}...),
			},
			"spec.gc_spec.srv6_network": []sets.String{
				sets.NewString([]string{"anycast_vip", "fleet_vip", "interface_ip_vip"}...),
				sets.NewString([]string{"fleet_snat_pool", "interface_ip_snat_pool", "site_snat_pool"}...),
				sets.NewString([]string{"no_namespace_network", "srv6_network_ns_params"}...),
			},
			"spec.gc_spec.srv6_network.access_network_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.gc_spec.srv6_network.enterprise_network_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.gc_spec.srv6_network.export_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.gc_spec.srv6_network.internet_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.gc_spec.static_routes.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.static_routes.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	MDR.RPCOneofExclusiveRegistry["ves.io.schema.virtual_network.crudapi.API.Replace"] = svcfw.OOExclusiveSet{
		FieldsByAncestor: map[string][]sets.String{
			"spec.gc_spec": []sets.String{
				sets.NewString([]string{"fleet_snat_pool", "interface_ip", "site_snat_pool"}...),
				sets.NewString([]string{"fleet_vip", "tenant_vip"}...),
				sets.NewString([]string{"global_network", "inside_network", "legacy_type", "private_network", "site_local_inside_network", "site_local_network", "srv6_network"}...),
			},
			"spec.gc_spec.private_network_parameters": []sets.String{
				sets.NewString([]string{"advertise_dedicated_vips", "no_advertise_dedicated_vips"}...),
				sets.NewString([]string{"no_private_access", "private_access_enabled"}...),
				sets.NewString([]string{"no_private_dns", "private_dns"}...),
			},
			"spec.gc_spec.srv6_network": []sets.String{
				sets.NewString([]string{"anycast_vip", "fleet_vip", "interface_ip_vip"}...),
				sets.NewString([]string{"fleet_snat_pool", "interface_ip_snat_pool", "site_snat_pool"}...),
				sets.NewString([]string{"no_namespace_network", "srv6_network_ns_params"}...),
			},
			"spec.gc_spec.srv6_network.access_network_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.gc_spec.srv6_network.enterprise_network_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.gc_spec.srv6_network.export_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.gc_spec.srv6_network.internet_rtargets": []sets.String{
				sets.NewString([]string{"asn2byte_rtarget", "asn4byte_rtarget", "ipv4_addr_rtarget"}...),
			},
			"spec.gc_spec.static_routes.nexthop.nexthop_address": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.static_routes.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
			"spec.gc_spec.subnets": []sets.String{
				sets.NewString([]string{"ipv4", "ipv6"}...),
			},
		},
	}

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.address_allocator.Object"] = ves_io_schema_address_allocator.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.address_allocator.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.address_allocator.Object"] = reflect.TypeOf(&ves_io_schema_address_allocator.DBObject{})
	MDR.EntryIndexers["ves.io.schema.address_allocator.Object"] = ves_io_schema_address_allocator.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.Object"] = ves_io_schema_address_allocator.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.address_allocator.StatusObject"] = ves_io_schema_address_allocator.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.address_allocator.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.address_allocator.StatusObject"] = reflect.TypeOf(&ves_io_schema_address_allocator.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.address_allocator.StatusObject"] = ves_io_schema_address_allocator.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.address_allocator.StatusObject"] = ves_io_schema_address_allocator.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.address_allocator.API"] = ves_io_schema_address_allocator.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.address_allocator.API"] = ves_io_schema_address_allocator.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.address_allocator.Object"] = ves_io_schema_address_allocator.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.address_allocator.Object"] = ves_io_schema_address_allocator.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.address_allocator.Object"] = ves_io_schema_address_allocator.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.address_allocator.Object"] = ves_io_schema_address_allocator.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.address_allocator.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.address_allocator.Object"] = ves_io_schema_address_allocator.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.address_allocator.crudapi.API"] = ves_io_schema_address_allocator_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.address_allocator.crudapi.API"] = ves_io_schema_address_allocator_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.address_allocator.Object"] = ves_io_schema_address_allocator_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.address_allocator.Object"] = ves_io_schema_address_allocator_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.address_allocator.Object"] = ves_io_schema_address_allocator_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.address_allocator.Object"] = ves_io_schema_address_allocator_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.address_allocator.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.address_allocator.Object"] = ves_io_schema_address_allocator_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.advertise_policy.Object"] = ves_io_schema_advertise_policy.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.advertise_policy.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.advertise_policy.Object"] = reflect.TypeOf(&ves_io_schema_advertise_policy.DBObject{})
	MDR.EntryIndexers["ves.io.schema.advertise_policy.Object"] = ves_io_schema_advertise_policy.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.Object"] = ves_io_schema_advertise_policy.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.advertise_policy.StatusObject"] = ves_io_schema_advertise_policy.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.advertise_policy.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.advertise_policy.StatusObject"] = reflect.TypeOf(&ves_io_schema_advertise_policy.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.advertise_policy.StatusObject"] = ves_io_schema_advertise_policy.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.advertise_policy.StatusObject"] = ves_io_schema_advertise_policy.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.advertise_policy.API"] = ves_io_schema_advertise_policy.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.advertise_policy.API"] = ves_io_schema_advertise_policy.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.advertise_policy.Object"] = ves_io_schema_advertise_policy.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.advertise_policy.Object"] = ves_io_schema_advertise_policy.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.advertise_policy.Object"] = ves_io_schema_advertise_policy.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.advertise_policy.Object"] = ves_io_schema_advertise_policy.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.advertise_policy.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.advertise_policy.Object"] = ves_io_schema_advertise_policy.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.advertise_policy.crudapi.API"] = ves_io_schema_advertise_policy_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.advertise_policy.crudapi.API"] = ves_io_schema_advertise_policy_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.advertise_policy.Object"] = ves_io_schema_advertise_policy_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.advertise_policy.Object"] = ves_io_schema_advertise_policy_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.advertise_policy.Object"] = ves_io_schema_advertise_policy_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.advertise_policy.Object"] = ves_io_schema_advertise_policy_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.advertise_policy.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.advertise_policy.Object"] = ves_io_schema_advertise_policy_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.alert_policy.Object"] = ves_io_schema_alert_policy.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.alert_policy.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.alert_policy.Object"] = reflect.TypeOf(&ves_io_schema_alert_policy.DBObject{})
	MDR.EntryIndexers["ves.io.schema.alert_policy.Object"] = ves_io_schema_alert_policy.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.Object"] = ves_io_schema_alert_policy.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.alert_policy.StatusObject"] = ves_io_schema_alert_policy.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.alert_policy.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.alert_policy.StatusObject"] = reflect.TypeOf(&ves_io_schema_alert_policy.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.alert_policy.StatusObject"] = ves_io_schema_alert_policy.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.alert_policy.StatusObject"] = ves_io_schema_alert_policy.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.alert_policy.API"] = ves_io_schema_alert_policy.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.alert_policy.API"] = ves_io_schema_alert_policy.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.alert_policy.Object"] = ves_io_schema_alert_policy.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.alert_policy.Object"] = ves_io_schema_alert_policy.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.alert_policy.Object"] = ves_io_schema_alert_policy.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.alert_policy.Object"] = ves_io_schema_alert_policy.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.alert_policy.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.alert_policy.Object"] = ves_io_schema_alert_policy.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.alert_policy.crudapi.API"] = ves_io_schema_alert_policy_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.alert_policy.crudapi.API"] = ves_io_schema_alert_policy_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.alert_policy.Object"] = ves_io_schema_alert_policy_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.alert_policy.Object"] = ves_io_schema_alert_policy_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.alert_policy.Object"] = ves_io_schema_alert_policy_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.alert_policy.Object"] = ves_io_schema_alert_policy_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.alert_policy.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.alert_policy.Object"] = ves_io_schema_alert_policy_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.alert_receiver.Object"] = ves_io_schema_alert_receiver.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.alert_receiver.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.alert_receiver.Object"] = reflect.TypeOf(&ves_io_schema_alert_receiver.DBObject{})
	MDR.EntryIndexers["ves.io.schema.alert_receiver.Object"] = ves_io_schema_alert_receiver.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.Object"] = ves_io_schema_alert_receiver.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.alert_receiver.StatusObject"] = ves_io_schema_alert_receiver.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.alert_receiver.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.alert_receiver.StatusObject"] = reflect.TypeOf(&ves_io_schema_alert_receiver.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.alert_receiver.StatusObject"] = ves_io_schema_alert_receiver.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.alert_receiver.StatusObject"] = ves_io_schema_alert_receiver.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.alert_receiver.API"] = ves_io_schema_alert_receiver.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.alert_receiver.API"] = ves_io_schema_alert_receiver.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.alert_receiver.Object"] = ves_io_schema_alert_receiver.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.alert_receiver.Object"] = ves_io_schema_alert_receiver.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.alert_receiver.Object"] = ves_io_schema_alert_receiver.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.alert_receiver.Object"] = ves_io_schema_alert_receiver.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.alert_receiver.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.alert_receiver.Object"] = ves_io_schema_alert_receiver.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.alert_receiver.CustomAPI"] = ves_io_schema_alert_receiver.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.alert_receiver.CustomAPI"] = ves_io_schema_alert_receiver.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.alert_receiver.CustomAPI"] = ves_io_schema_alert_receiver.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.alert_receiver.CustomAPI"] = ves_io_schema_alert_receiver.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.alert_receiver.Object"] = ves_io_schema_alert_receiver.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.alert_receiver.crudapi.API"] = ves_io_schema_alert_receiver_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.alert_receiver.crudapi.API"] = ves_io_schema_alert_receiver_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.alert_receiver.Object"] = ves_io_schema_alert_receiver_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.alert_receiver.Object"] = ves_io_schema_alert_receiver_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.alert_receiver.Object"] = ves_io_schema_alert_receiver_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.alert_receiver.Object"] = ves_io_schema_alert_receiver_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.alert_receiver.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.alert_receiver.Object"] = ves_io_schema_alert_receiver_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.api_credential.Object"] = ves_io_schema_api_credential.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.api_credential.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.api_credential.Object"] = reflect.TypeOf(&ves_io_schema_api_credential.DBObject{})
	MDR.EntryIndexers["ves.io.schema.api_credential.Object"] = ves_io_schema_api_credential.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.api_credential.Object"] = ves_io_schema_api_credential.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.api_credential.StatusObject"] = ves_io_schema_api_credential.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.api_credential.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.api_credential.StatusObject"] = reflect.TypeOf(&ves_io_schema_api_credential.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.api_credential.StatusObject"] = ves_io_schema_api_credential.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.api_credential.StatusObject"] = ves_io_schema_api_credential.StatusObjectValidator()

	customCSR = MDR.PvtCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.api_credential.CustomPrivateAPI"] = ves_io_schema_api_credential.NewCustomPrivateAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.api_credential.CustomPrivateAPI"] = ves_io_schema_api_credential.NewCustomPrivateAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.api_credential.CustomPrivateAPI"] = ves_io_schema_api_credential.RegisterCustomPrivateAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.api_credential.CustomPrivateAPI"] = ves_io_schema_api_credential.RegisterGwCustomPrivateAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.api_credential.Object"] = ves_io_schema_api_credential.CustomPrivateAPISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.api_credential.CustomAPI"] = ves_io_schema_api_credential.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.api_credential.CustomAPI"] = ves_io_schema_api_credential.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.api_credential.CustomAPI"] = ves_io_schema_api_credential.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.api_credential.CustomAPI"] = ves_io_schema_api_credential.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.api_credential.Object"] = ves_io_schema_api_credential.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.api_credential.crudapi.API"] = ves_io_schema_api_credential_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.api_credential.crudapi.API"] = ves_io_schema_api_credential_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.api_credential.Object"] = ves_io_schema_api_credential_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.api_credential.Object"] = ves_io_schema_api_credential_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.api_credential.Object"] = ves_io_schema_api_credential_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.api_credential.Object"] = ves_io_schema_api_credential_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.api_credential.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.api_credential.Object"] = ves_io_schema_api_credential_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.app_firewall.Object"] = ves_io_schema_app_firewall.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.app_firewall.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.app_firewall.Object"] = reflect.TypeOf(&ves_io_schema_app_firewall.DBObject{})
	MDR.EntryIndexers["ves.io.schema.app_firewall.Object"] = ves_io_schema_app_firewall.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.Object"] = ves_io_schema_app_firewall.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.app_firewall.StatusObject"] = ves_io_schema_app_firewall.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.app_firewall.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.app_firewall.StatusObject"] = reflect.TypeOf(&ves_io_schema_app_firewall.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.app_firewall.StatusObject"] = ves_io_schema_app_firewall.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.app_firewall.StatusObject"] = ves_io_schema_app_firewall.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.app_firewall.API"] = ves_io_schema_app_firewall.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.app_firewall.API"] = ves_io_schema_app_firewall.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.app_firewall.Object"] = ves_io_schema_app_firewall.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.app_firewall.Object"] = ves_io_schema_app_firewall.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.app_firewall.Object"] = ves_io_schema_app_firewall.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.app_firewall.Object"] = ves_io_schema_app_firewall.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.app_firewall.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.app_firewall.Object"] = ves_io_schema_app_firewall.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.app_firewall.crudapi.API"] = ves_io_schema_app_firewall_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.app_firewall.crudapi.API"] = ves_io_schema_app_firewall_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.app_firewall.Object"] = ves_io_schema_app_firewall_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.app_firewall.Object"] = ves_io_schema_app_firewall_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.app_firewall.Object"] = ves_io_schema_app_firewall_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.app_firewall.Object"] = ves_io_schema_app_firewall_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.app_firewall.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.app_firewall.Object"] = ves_io_schema_app_firewall_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.app_setting.Object"] = ves_io_schema_app_setting.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.app_setting.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.app_setting.Object"] = reflect.TypeOf(&ves_io_schema_app_setting.DBObject{})
	MDR.EntryIndexers["ves.io.schema.app_setting.Object"] = ves_io_schema_app_setting.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.app_setting.Object"] = ves_io_schema_app_setting.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.app_setting.StatusObject"] = ves_io_schema_app_setting.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.app_setting.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.app_setting.StatusObject"] = reflect.TypeOf(&ves_io_schema_app_setting.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.app_setting.StatusObject"] = ves_io_schema_app_setting.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.app_setting.StatusObject"] = ves_io_schema_app_setting.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.app_setting.API"] = ves_io_schema_app_setting.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.app_setting.API"] = ves_io_schema_app_setting.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.app_setting.Object"] = ves_io_schema_app_setting.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.app_setting.Object"] = ves_io_schema_app_setting.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.app_setting.Object"] = ves_io_schema_app_setting.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.app_setting.Object"] = ves_io_schema_app_setting.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.app_setting.Object"] = []svcfw.NamespaceType{svcfw.UserNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.app_setting.Object"] = ves_io_schema_app_setting.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.app_setting.CustomAPI"] = ves_io_schema_app_setting.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.app_setting.CustomAPI"] = ves_io_schema_app_setting.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.app_setting.CustomAPI"] = ves_io_schema_app_setting.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.app_setting.CustomAPI"] = ves_io_schema_app_setting.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.app_setting.Object"] = ves_io_schema_app_setting.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.app_setting.crudapi.API"] = ves_io_schema_app_setting_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.app_setting.crudapi.API"] = ves_io_schema_app_setting_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.app_setting.Object"] = ves_io_schema_app_setting_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.app_setting.Object"] = ves_io_schema_app_setting_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.app_setting.Object"] = ves_io_schema_app_setting_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.app_setting.Object"] = ves_io_schema_app_setting_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.app_setting.Object"] = []svcfw.NamespaceType{svcfw.UserNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.app_setting.Object"] = ves_io_schema_app_setting_crudapi.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.app_type.CustomAPI"] = ves_io_schema_app_type.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.app_type.CustomAPI"] = ves_io_schema_app_type.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.app_type.CustomAPI"] = ves_io_schema_app_type.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.app_type.CustomAPI"] = ves_io_schema_app_type.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.app_type.Object"] = ves_io_schema_app_type.CustomAPISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.app_type.Object"] = ves_io_schema_app_type.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.app_type.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.app_type.Object"] = reflect.TypeOf(&ves_io_schema_app_type.DBObject{})
	MDR.EntryIndexers["ves.io.schema.app_type.Object"] = ves_io_schema_app_type.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.app_type.Object"] = ves_io_schema_app_type.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.app_type.StatusObject"] = ves_io_schema_app_type.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.app_type.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.app_type.StatusObject"] = reflect.TypeOf(&ves_io_schema_app_type.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.app_type.StatusObject"] = ves_io_schema_app_type.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.app_type.StatusObject"] = ves_io_schema_app_type.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.app_type.API"] = ves_io_schema_app_type.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.app_type.API"] = ves_io_schema_app_type.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.app_type.Object"] = ves_io_schema_app_type.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.app_type.Object"] = ves_io_schema_app_type.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.app_type.Object"] = ves_io_schema_app_type.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.app_type.Object"] = ves_io_schema_app_type.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.app_type.Object"] = []svcfw.NamespaceType{svcfw.SharedNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.app_type.Object"] = ves_io_schema_app_type.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.app_type.crudapi.API"] = ves_io_schema_app_type_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.app_type.crudapi.API"] = ves_io_schema_app_type_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.app_type.Object"] = ves_io_schema_app_type_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.app_type.Object"] = ves_io_schema_app_type_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.app_type.Object"] = ves_io_schema_app_type_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.app_type.Object"] = ves_io_schema_app_type_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.app_type.Object"] = []svcfw.NamespaceType{svcfw.SharedNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.app_type.Object"] = ves_io_schema_app_type_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.authentication.Object"] = ves_io_schema_authentication.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.authentication.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.authentication.Object"] = reflect.TypeOf(&ves_io_schema_authentication.DBObject{})
	MDR.EntryIndexers["ves.io.schema.authentication.Object"] = ves_io_schema_authentication.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.authentication.Object"] = ves_io_schema_authentication.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.authentication.StatusObject"] = ves_io_schema_authentication.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.authentication.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.authentication.StatusObject"] = reflect.TypeOf(&ves_io_schema_authentication.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.authentication.StatusObject"] = ves_io_schema_authentication.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.authentication.StatusObject"] = ves_io_schema_authentication.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.authentication.API"] = ves_io_schema_authentication.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.authentication.API"] = ves_io_schema_authentication.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.authentication.Object"] = ves_io_schema_authentication.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.authentication.Object"] = ves_io_schema_authentication.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.authentication.Object"] = ves_io_schema_authentication.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.authentication.Object"] = ves_io_schema_authentication.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.authentication.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.authentication.Object"] = ves_io_schema_authentication.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.authentication.crudapi.API"] = ves_io_schema_authentication_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.authentication.crudapi.API"] = ves_io_schema_authentication_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.authentication.Object"] = ves_io_schema_authentication_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.authentication.Object"] = ves_io_schema_authentication_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.authentication.Object"] = ves_io_schema_authentication_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.authentication.Object"] = ves_io_schema_authentication_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.authentication.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.authentication.Object"] = ves_io_schema_authentication_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.bgp.Object"] = ves_io_schema_bgp.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.bgp.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.bgp.Object"] = reflect.TypeOf(&ves_io_schema_bgp.DBObject{})
	MDR.EntryIndexers["ves.io.schema.bgp.Object"] = ves_io_schema_bgp.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.bgp.Object"] = ves_io_schema_bgp.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.bgp.StatusObject"] = ves_io_schema_bgp.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.bgp.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.bgp.StatusObject"] = reflect.TypeOf(&ves_io_schema_bgp.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.bgp.StatusObject"] = ves_io_schema_bgp.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.bgp.StatusObject"] = ves_io_schema_bgp.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.bgp.API"] = ves_io_schema_bgp.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.bgp.API"] = ves_io_schema_bgp.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.bgp.Object"] = ves_io_schema_bgp.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.bgp.Object"] = ves_io_schema_bgp.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.bgp.Object"] = ves_io_schema_bgp.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.bgp.Object"] = ves_io_schema_bgp.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.bgp.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.bgp.Object"] = ves_io_schema_bgp.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.bgp.crudapi.API"] = ves_io_schema_bgp_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.bgp.crudapi.API"] = ves_io_schema_bgp_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.bgp.Object"] = ves_io_schema_bgp_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.bgp.Object"] = ves_io_schema_bgp_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.bgp.Object"] = ves_io_schema_bgp_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.bgp.Object"] = ves_io_schema_bgp_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.bgp.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.bgp.Object"] = ves_io_schema_bgp_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.bgp_asn_set.Object"] = ves_io_schema_bgp_asn_set.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.bgp_asn_set.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.bgp_asn_set.Object"] = reflect.TypeOf(&ves_io_schema_bgp_asn_set.DBObject{})
	MDR.EntryIndexers["ves.io.schema.bgp_asn_set.Object"] = ves_io_schema_bgp_asn_set.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.Object"] = ves_io_schema_bgp_asn_set.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.bgp_asn_set.StatusObject"] = ves_io_schema_bgp_asn_set.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.bgp_asn_set.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.bgp_asn_set.StatusObject"] = reflect.TypeOf(&ves_io_schema_bgp_asn_set.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.bgp_asn_set.StatusObject"] = ves_io_schema_bgp_asn_set.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.bgp_asn_set.StatusObject"] = ves_io_schema_bgp_asn_set.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.bgp_asn_set.API"] = ves_io_schema_bgp_asn_set.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.bgp_asn_set.API"] = ves_io_schema_bgp_asn_set.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.bgp_asn_set.Object"] = ves_io_schema_bgp_asn_set.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.bgp_asn_set.Object"] = ves_io_schema_bgp_asn_set.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.bgp_asn_set.Object"] = ves_io_schema_bgp_asn_set.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.bgp_asn_set.Object"] = ves_io_schema_bgp_asn_set.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.bgp_asn_set.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.bgp_asn_set.Object"] = ves_io_schema_bgp_asn_set.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.bgp_asn_set.crudapi.API"] = ves_io_schema_bgp_asn_set_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.bgp_asn_set.crudapi.API"] = ves_io_schema_bgp_asn_set_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.bgp_asn_set.Object"] = ves_io_schema_bgp_asn_set_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.bgp_asn_set.Object"] = ves_io_schema_bgp_asn_set_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.bgp_asn_set.Object"] = ves_io_schema_bgp_asn_set_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.bgp_asn_set.Object"] = ves_io_schema_bgp_asn_set_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.bgp_asn_set.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.bgp_asn_set.Object"] = ves_io_schema_bgp_asn_set_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.certified_hardware.Object"] = ves_io_schema_certified_hardware.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.certified_hardware.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.certified_hardware.Object"] = reflect.TypeOf(&ves_io_schema_certified_hardware.DBObject{})
	MDR.EntryIndexers["ves.io.schema.certified_hardware.Object"] = ves_io_schema_certified_hardware.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.Object"] = ves_io_schema_certified_hardware.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.certified_hardware.StatusObject"] = ves_io_schema_certified_hardware.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.certified_hardware.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.certified_hardware.StatusObject"] = reflect.TypeOf(&ves_io_schema_certified_hardware.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.certified_hardware.StatusObject"] = ves_io_schema_certified_hardware.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.certified_hardware.StatusObject"] = ves_io_schema_certified_hardware.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.certified_hardware.API"] = ves_io_schema_certified_hardware.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.certified_hardware.API"] = ves_io_schema_certified_hardware.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.certified_hardware.Object"] = ves_io_schema_certified_hardware.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.certified_hardware.Object"] = ves_io_schema_certified_hardware.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.certified_hardware.Object"] = ves_io_schema_certified_hardware.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.certified_hardware.Object"] = ves_io_schema_certified_hardware.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.certified_hardware.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.certified_hardware.Object"] = ves_io_schema_certified_hardware.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.certified_hardware.crudapi.API"] = ves_io_schema_certified_hardware_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.certified_hardware.crudapi.API"] = ves_io_schema_certified_hardware_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.certified_hardware.Object"] = ves_io_schema_certified_hardware_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.certified_hardware.Object"] = ves_io_schema_certified_hardware_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.certified_hardware.Object"] = ves_io_schema_certified_hardware_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.certified_hardware.Object"] = ves_io_schema_certified_hardware_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.certified_hardware.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.certified_hardware.Object"] = ves_io_schema_certified_hardware_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.cloud_credentials.Object"] = ves_io_schema_cloud_credentials.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.cloud_credentials.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.cloud_credentials.Object"] = reflect.TypeOf(&ves_io_schema_cloud_credentials.DBObject{})
	MDR.EntryIndexers["ves.io.schema.cloud_credentials.Object"] = ves_io_schema_cloud_credentials.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.Object"] = ves_io_schema_cloud_credentials.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.cloud_credentials.StatusObject"] = ves_io_schema_cloud_credentials.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.cloud_credentials.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.cloud_credentials.StatusObject"] = reflect.TypeOf(&ves_io_schema_cloud_credentials.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.cloud_credentials.StatusObject"] = ves_io_schema_cloud_credentials.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.cloud_credentials.StatusObject"] = ves_io_schema_cloud_credentials.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.cloud_credentials.API"] = ves_io_schema_cloud_credentials.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.cloud_credentials.API"] = ves_io_schema_cloud_credentials.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.cloud_credentials.Object"] = ves_io_schema_cloud_credentials.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.cloud_credentials.Object"] = ves_io_schema_cloud_credentials.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.cloud_credentials.Object"] = ves_io_schema_cloud_credentials.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.cloud_credentials.Object"] = ves_io_schema_cloud_credentials.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.cloud_credentials.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.cloud_credentials.Object"] = ves_io_schema_cloud_credentials.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.cloud_credentials.crudapi.API"] = ves_io_schema_cloud_credentials_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.cloud_credentials.crudapi.API"] = ves_io_schema_cloud_credentials_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.cloud_credentials.Object"] = ves_io_schema_cloud_credentials_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.cloud_credentials.Object"] = ves_io_schema_cloud_credentials_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.cloud_credentials.Object"] = ves_io_schema_cloud_credentials_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.cloud_credentials.Object"] = ves_io_schema_cloud_credentials_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.cloud_credentials.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.cloud_credentials.Object"] = ves_io_schema_cloud_credentials_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.cluster.Object"] = ves_io_schema_cluster.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.cluster.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.cluster.Object"] = reflect.TypeOf(&ves_io_schema_cluster.DBObject{})
	MDR.EntryIndexers["ves.io.schema.cluster.Object"] = ves_io_schema_cluster.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.cluster.Object"] = ves_io_schema_cluster.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.cluster.StatusObject"] = ves_io_schema_cluster.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.cluster.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.cluster.StatusObject"] = reflect.TypeOf(&ves_io_schema_cluster.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.cluster.StatusObject"] = ves_io_schema_cluster.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.cluster.StatusObject"] = ves_io_schema_cluster.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.cluster.API"] = ves_io_schema_cluster.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.cluster.API"] = ves_io_schema_cluster.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.cluster.Object"] = ves_io_schema_cluster.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.cluster.Object"] = ves_io_schema_cluster.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.cluster.Object"] = ves_io_schema_cluster.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.cluster.Object"] = ves_io_schema_cluster.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.cluster.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.cluster.Object"] = ves_io_schema_cluster.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.cluster.crudapi.API"] = ves_io_schema_cluster_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.cluster.crudapi.API"] = ves_io_schema_cluster_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.cluster.Object"] = ves_io_schema_cluster_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.cluster.Object"] = ves_io_schema_cluster_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.cluster.Object"] = ves_io_schema_cluster_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.cluster.Object"] = ves_io_schema_cluster_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.cluster.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.cluster.Object"] = ves_io_schema_cluster_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.container_registry.Object"] = ves_io_schema_container_registry.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.container_registry.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.container_registry.Object"] = reflect.TypeOf(&ves_io_schema_container_registry.DBObject{})
	MDR.EntryIndexers["ves.io.schema.container_registry.Object"] = ves_io_schema_container_registry.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.container_registry.Object"] = ves_io_schema_container_registry.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.container_registry.StatusObject"] = ves_io_schema_container_registry.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.container_registry.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.container_registry.StatusObject"] = reflect.TypeOf(&ves_io_schema_container_registry.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.container_registry.StatusObject"] = ves_io_schema_container_registry.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.container_registry.StatusObject"] = ves_io_schema_container_registry.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.container_registry.API"] = ves_io_schema_container_registry.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.container_registry.API"] = ves_io_schema_container_registry.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.container_registry.Object"] = ves_io_schema_container_registry.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.container_registry.Object"] = ves_io_schema_container_registry.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.container_registry.Object"] = ves_io_schema_container_registry.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.container_registry.Object"] = ves_io_schema_container_registry.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.container_registry.Object"] = []svcfw.NamespaceType{svcfw.SharedNSType, svcfw.UserNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.container_registry.Object"] = ves_io_schema_container_registry.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.container_registry.crudapi.API"] = ves_io_schema_container_registry_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.container_registry.crudapi.API"] = ves_io_schema_container_registry_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.container_registry.Object"] = ves_io_schema_container_registry_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.container_registry.Object"] = ves_io_schema_container_registry_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.container_registry.Object"] = ves_io_schema_container_registry_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.container_registry.Object"] = ves_io_schema_container_registry_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.container_registry.Object"] = []svcfw.NamespaceType{svcfw.SharedNSType, svcfw.UserNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.container_registry.Object"] = ves_io_schema_container_registry_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.dc_cluster_group.Object"] = ves_io_schema_dc_cluster_group.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.dc_cluster_group.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.dc_cluster_group.Object"] = reflect.TypeOf(&ves_io_schema_dc_cluster_group.DBObject{})
	MDR.EntryIndexers["ves.io.schema.dc_cluster_group.Object"] = ves_io_schema_dc_cluster_group.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.Object"] = ves_io_schema_dc_cluster_group.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.dc_cluster_group.StatusObject"] = ves_io_schema_dc_cluster_group.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.dc_cluster_group.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.dc_cluster_group.StatusObject"] = reflect.TypeOf(&ves_io_schema_dc_cluster_group.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.dc_cluster_group.StatusObject"] = ves_io_schema_dc_cluster_group.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.dc_cluster_group.StatusObject"] = ves_io_schema_dc_cluster_group.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.dc_cluster_group.API"] = ves_io_schema_dc_cluster_group.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.dc_cluster_group.API"] = ves_io_schema_dc_cluster_group.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.dc_cluster_group.Object"] = ves_io_schema_dc_cluster_group.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.dc_cluster_group.Object"] = ves_io_schema_dc_cluster_group.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.dc_cluster_group.Object"] = ves_io_schema_dc_cluster_group.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.dc_cluster_group.Object"] = ves_io_schema_dc_cluster_group.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.dc_cluster_group.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.dc_cluster_group.Object"] = ves_io_schema_dc_cluster_group.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.dc_cluster_group.CustomDataAPI"] = ves_io_schema_dc_cluster_group.NewCustomDataAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.dc_cluster_group.CustomDataAPI"] = ves_io_schema_dc_cluster_group.NewCustomDataAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.dc_cluster_group.CustomDataAPI"] = ves_io_schema_dc_cluster_group.RegisterCustomDataAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.dc_cluster_group.CustomDataAPI"] = ves_io_schema_dc_cluster_group.RegisterGwCustomDataAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.dc_cluster_group.Object"] = ves_io_schema_dc_cluster_group.CustomDataAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.dc_cluster_group.crudapi.API"] = ves_io_schema_dc_cluster_group_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.dc_cluster_group.crudapi.API"] = ves_io_schema_dc_cluster_group_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.dc_cluster_group.Object"] = ves_io_schema_dc_cluster_group_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.dc_cluster_group.Object"] = ves_io_schema_dc_cluster_group_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.dc_cluster_group.Object"] = ves_io_schema_dc_cluster_group_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.dc_cluster_group.Object"] = ves_io_schema_dc_cluster_group_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.dc_cluster_group.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.dc_cluster_group.Object"] = ves_io_schema_dc_cluster_group_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.discovery.Object"] = ves_io_schema_discovery.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.discovery.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.discovery.Object"] = reflect.TypeOf(&ves_io_schema_discovery.DBObject{})
	MDR.EntryIndexers["ves.io.schema.discovery.Object"] = ves_io_schema_discovery.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.discovery.Object"] = ves_io_schema_discovery.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.discovery.StatusObject"] = ves_io_schema_discovery.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.discovery.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.discovery.StatusObject"] = reflect.TypeOf(&ves_io_schema_discovery.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.discovery.StatusObject"] = ves_io_schema_discovery.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.discovery.StatusObject"] = ves_io_schema_discovery.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.discovery.API"] = ves_io_schema_discovery.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.discovery.API"] = ves_io_schema_discovery.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.discovery.Object"] = ves_io_schema_discovery.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.discovery.Object"] = ves_io_schema_discovery.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.discovery.Object"] = ves_io_schema_discovery.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.discovery.Object"] = ves_io_schema_discovery.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.discovery.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.discovery.Object"] = ves_io_schema_discovery.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.discovery.crudapi.API"] = ves_io_schema_discovery_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.discovery.crudapi.API"] = ves_io_schema_discovery_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.discovery.Object"] = ves_io_schema_discovery_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.discovery.Object"] = ves_io_schema_discovery_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.discovery.Object"] = ves_io_schema_discovery_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.discovery.Object"] = ves_io_schema_discovery_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.discovery.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.discovery.Object"] = ves_io_schema_discovery_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.dns_domain.Object"] = ves_io_schema_dns_domain.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.dns_domain.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.dns_domain.Object"] = reflect.TypeOf(&ves_io_schema_dns_domain.DBObject{})
	MDR.EntryIndexers["ves.io.schema.dns_domain.Object"] = ves_io_schema_dns_domain.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.Object"] = ves_io_schema_dns_domain.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.dns_domain.StatusObject"] = ves_io_schema_dns_domain.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.dns_domain.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.dns_domain.StatusObject"] = reflect.TypeOf(&ves_io_schema_dns_domain.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.dns_domain.StatusObject"] = ves_io_schema_dns_domain.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.dns_domain.StatusObject"] = ves_io_schema_dns_domain.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.dns_domain.API"] = ves_io_schema_dns_domain.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.dns_domain.API"] = ves_io_schema_dns_domain.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.dns_domain.Object"] = ves_io_schema_dns_domain.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.dns_domain.Object"] = ves_io_schema_dns_domain.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.dns_domain.Object"] = ves_io_schema_dns_domain.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.dns_domain.Object"] = ves_io_schema_dns_domain.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.dns_domain.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.dns_domain.Object"] = ves_io_schema_dns_domain.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.dns_domain.CustomAPI"] = ves_io_schema_dns_domain.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.dns_domain.CustomAPI"] = ves_io_schema_dns_domain.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.dns_domain.CustomAPI"] = ves_io_schema_dns_domain.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.dns_domain.CustomAPI"] = ves_io_schema_dns_domain.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.dns_domain.Object"] = ves_io_schema_dns_domain.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.dns_domain.crudapi.API"] = ves_io_schema_dns_domain_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.dns_domain.crudapi.API"] = ves_io_schema_dns_domain_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.dns_domain.Object"] = ves_io_schema_dns_domain_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.dns_domain.Object"] = ves_io_schema_dns_domain_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.dns_domain.Object"] = ves_io_schema_dns_domain_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.dns_domain.Object"] = ves_io_schema_dns_domain_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.dns_domain.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.dns_domain.Object"] = ves_io_schema_dns_domain_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.endpoint.Object"] = ves_io_schema_endpoint.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.endpoint.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.endpoint.Object"] = reflect.TypeOf(&ves_io_schema_endpoint.DBObject{})
	MDR.EntryIndexers["ves.io.schema.endpoint.Object"] = ves_io_schema_endpoint.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.endpoint.Object"] = ves_io_schema_endpoint.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.endpoint.StatusObject"] = ves_io_schema_endpoint.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.endpoint.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.endpoint.StatusObject"] = reflect.TypeOf(&ves_io_schema_endpoint.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.endpoint.StatusObject"] = ves_io_schema_endpoint.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.endpoint.StatusObject"] = ves_io_schema_endpoint.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.endpoint.API"] = ves_io_schema_endpoint.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.endpoint.API"] = ves_io_schema_endpoint.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.endpoint.Object"] = ves_io_schema_endpoint.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.endpoint.Object"] = ves_io_schema_endpoint.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.endpoint.Object"] = ves_io_schema_endpoint.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.endpoint.Object"] = ves_io_schema_endpoint.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.endpoint.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.endpoint.Object"] = ves_io_schema_endpoint.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.endpoint.crudapi.API"] = ves_io_schema_endpoint_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.endpoint.crudapi.API"] = ves_io_schema_endpoint_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.endpoint.Object"] = ves_io_schema_endpoint_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.endpoint.Object"] = ves_io_schema_endpoint_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.endpoint.Object"] = ves_io_schema_endpoint_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.endpoint.Object"] = ves_io_schema_endpoint_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.endpoint.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.endpoint.Object"] = ves_io_schema_endpoint_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.fast_acl.Object"] = ves_io_schema_fast_acl.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.fast_acl.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.fast_acl.Object"] = reflect.TypeOf(&ves_io_schema_fast_acl.DBObject{})
	MDR.EntryIndexers["ves.io.schema.fast_acl.Object"] = ves_io_schema_fast_acl.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.Object"] = ves_io_schema_fast_acl.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.fast_acl.StatusObject"] = ves_io_schema_fast_acl.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.fast_acl.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.fast_acl.StatusObject"] = reflect.TypeOf(&ves_io_schema_fast_acl.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.fast_acl.StatusObject"] = ves_io_schema_fast_acl.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.fast_acl.StatusObject"] = ves_io_schema_fast_acl.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.fast_acl.API"] = ves_io_schema_fast_acl.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.fast_acl.API"] = ves_io_schema_fast_acl.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.fast_acl.Object"] = ves_io_schema_fast_acl.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.fast_acl.Object"] = ves_io_schema_fast_acl.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.fast_acl.Object"] = ves_io_schema_fast_acl.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.fast_acl.Object"] = ves_io_schema_fast_acl.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.fast_acl.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.fast_acl.Object"] = ves_io_schema_fast_acl.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.fast_acl.CustomDataAPI"] = ves_io_schema_fast_acl.NewCustomDataAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.fast_acl.CustomDataAPI"] = ves_io_schema_fast_acl.NewCustomDataAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.fast_acl.CustomDataAPI"] = ves_io_schema_fast_acl.RegisterCustomDataAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.fast_acl.CustomDataAPI"] = ves_io_schema_fast_acl.RegisterGwCustomDataAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.fast_acl.Object"] = ves_io_schema_fast_acl.CustomDataAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.fast_acl.crudapi.API"] = ves_io_schema_fast_acl_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.fast_acl.crudapi.API"] = ves_io_schema_fast_acl_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.fast_acl.Object"] = ves_io_schema_fast_acl_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.fast_acl.Object"] = ves_io_schema_fast_acl_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.fast_acl.Object"] = ves_io_schema_fast_acl_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.fast_acl.Object"] = ves_io_schema_fast_acl_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.fast_acl.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.fast_acl.Object"] = ves_io_schema_fast_acl_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.fast_acl_rule.Object"] = ves_io_schema_fast_acl_rule.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.fast_acl_rule.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.fast_acl_rule.Object"] = reflect.TypeOf(&ves_io_schema_fast_acl_rule.DBObject{})
	MDR.EntryIndexers["ves.io.schema.fast_acl_rule.Object"] = ves_io_schema_fast_acl_rule.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.Object"] = ves_io_schema_fast_acl_rule.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.fast_acl_rule.StatusObject"] = ves_io_schema_fast_acl_rule.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.fast_acl_rule.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.fast_acl_rule.StatusObject"] = reflect.TypeOf(&ves_io_schema_fast_acl_rule.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.fast_acl_rule.StatusObject"] = ves_io_schema_fast_acl_rule.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.fast_acl_rule.StatusObject"] = ves_io_schema_fast_acl_rule.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.fast_acl_rule.API"] = ves_io_schema_fast_acl_rule.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.fast_acl_rule.API"] = ves_io_schema_fast_acl_rule.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.fast_acl_rule.Object"] = ves_io_schema_fast_acl_rule.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.fast_acl_rule.Object"] = ves_io_schema_fast_acl_rule.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.fast_acl_rule.Object"] = ves_io_schema_fast_acl_rule.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.fast_acl_rule.Object"] = ves_io_schema_fast_acl_rule.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.fast_acl_rule.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.fast_acl_rule.Object"] = ves_io_schema_fast_acl_rule.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.fast_acl_rule.crudapi.API"] = ves_io_schema_fast_acl_rule_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.fast_acl_rule.crudapi.API"] = ves_io_schema_fast_acl_rule_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.fast_acl_rule.Object"] = ves_io_schema_fast_acl_rule_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.fast_acl_rule.Object"] = ves_io_schema_fast_acl_rule_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.fast_acl_rule.Object"] = ves_io_schema_fast_acl_rule_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.fast_acl_rule.Object"] = ves_io_schema_fast_acl_rule_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.fast_acl_rule.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.fast_acl_rule.Object"] = ves_io_schema_fast_acl_rule_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.fleet.Object"] = ves_io_schema_fleet.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.fleet.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.fleet.Object"] = reflect.TypeOf(&ves_io_schema_fleet.DBObject{})
	MDR.EntryIndexers["ves.io.schema.fleet.Object"] = ves_io_schema_fleet.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.fleet.Object"] = ves_io_schema_fleet.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.fleet.StatusObject"] = ves_io_schema_fleet.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.fleet.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.fleet.StatusObject"] = reflect.TypeOf(&ves_io_schema_fleet.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.fleet.StatusObject"] = ves_io_schema_fleet.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.fleet.StatusObject"] = ves_io_schema_fleet.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.fleet.API"] = ves_io_schema_fleet.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.fleet.API"] = ves_io_schema_fleet.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.fleet.Object"] = ves_io_schema_fleet.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.fleet.Object"] = ves_io_schema_fleet.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.fleet.Object"] = ves_io_schema_fleet.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.fleet.Object"] = ves_io_schema_fleet.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.fleet.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.fleet.Object"] = ves_io_schema_fleet.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.fleet.crudapi.API"] = ves_io_schema_fleet_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.fleet.crudapi.API"] = ves_io_schema_fleet_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.fleet.Object"] = ves_io_schema_fleet_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.fleet.Object"] = ves_io_schema_fleet_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.fleet.Object"] = ves_io_schema_fleet_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.fleet.Object"] = ves_io_schema_fleet_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.fleet.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.fleet.Object"] = ves_io_schema_fleet_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.flow_exporter.Object"] = ves_io_schema_flow_exporter.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.flow_exporter.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.flow_exporter.Object"] = reflect.TypeOf(&ves_io_schema_flow_exporter.DBObject{})
	MDR.EntryIndexers["ves.io.schema.flow_exporter.Object"] = ves_io_schema_flow_exporter.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.Object"] = ves_io_schema_flow_exporter.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.flow_exporter.StatusObject"] = ves_io_schema_flow_exporter.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.flow_exporter.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.flow_exporter.StatusObject"] = reflect.TypeOf(&ves_io_schema_flow_exporter.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.flow_exporter.StatusObject"] = ves_io_schema_flow_exporter.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.flow_exporter.StatusObject"] = ves_io_schema_flow_exporter.StatusObjectValidator()

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.flow_exporter.crudapi.API"] = ves_io_schema_flow_exporter_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.flow_exporter.crudapi.API"] = ves_io_schema_flow_exporter_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.flow_exporter.Object"] = ves_io_schema_flow_exporter_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.flow_exporter.Object"] = ves_io_schema_flow_exporter_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.flow_exporter.Object"] = ves_io_schema_flow_exporter_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.flow_exporter.Object"] = ves_io_schema_flow_exporter_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.flow_exporter.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.flow_exporter.Object"] = ves_io_schema_flow_exporter_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.healthcheck.Object"] = ves_io_schema_healthcheck.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.healthcheck.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.healthcheck.Object"] = reflect.TypeOf(&ves_io_schema_healthcheck.DBObject{})
	MDR.EntryIndexers["ves.io.schema.healthcheck.Object"] = ves_io_schema_healthcheck.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.Object"] = ves_io_schema_healthcheck.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.healthcheck.StatusObject"] = ves_io_schema_healthcheck.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.healthcheck.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.healthcheck.StatusObject"] = reflect.TypeOf(&ves_io_schema_healthcheck.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.healthcheck.StatusObject"] = ves_io_schema_healthcheck.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.healthcheck.StatusObject"] = ves_io_schema_healthcheck.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.healthcheck.API"] = ves_io_schema_healthcheck.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.healthcheck.API"] = ves_io_schema_healthcheck.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.healthcheck.Object"] = ves_io_schema_healthcheck.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.healthcheck.Object"] = ves_io_schema_healthcheck.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.healthcheck.Object"] = ves_io_schema_healthcheck.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.healthcheck.Object"] = ves_io_schema_healthcheck.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.healthcheck.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.healthcheck.Object"] = ves_io_schema_healthcheck.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.healthcheck.crudapi.API"] = ves_io_schema_healthcheck_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.healthcheck.crudapi.API"] = ves_io_schema_healthcheck_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.healthcheck.Object"] = ves_io_schema_healthcheck_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.healthcheck.Object"] = ves_io_schema_healthcheck_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.healthcheck.Object"] = ves_io_schema_healthcheck_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.healthcheck.Object"] = ves_io_schema_healthcheck_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.healthcheck.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.healthcheck.Object"] = ves_io_schema_healthcheck_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.ip_prefix_set.Object"] = ves_io_schema_ip_prefix_set.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.ip_prefix_set.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.ip_prefix_set.Object"] = reflect.TypeOf(&ves_io_schema_ip_prefix_set.DBObject{})
	MDR.EntryIndexers["ves.io.schema.ip_prefix_set.Object"] = ves_io_schema_ip_prefix_set.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.Object"] = ves_io_schema_ip_prefix_set.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.ip_prefix_set.StatusObject"] = ves_io_schema_ip_prefix_set.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.ip_prefix_set.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.ip_prefix_set.StatusObject"] = reflect.TypeOf(&ves_io_schema_ip_prefix_set.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.ip_prefix_set.StatusObject"] = ves_io_schema_ip_prefix_set.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.ip_prefix_set.StatusObject"] = ves_io_schema_ip_prefix_set.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.ip_prefix_set.API"] = ves_io_schema_ip_prefix_set.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.ip_prefix_set.API"] = ves_io_schema_ip_prefix_set.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.ip_prefix_set.Object"] = ves_io_schema_ip_prefix_set.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.ip_prefix_set.Object"] = ves_io_schema_ip_prefix_set.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.ip_prefix_set.Object"] = ves_io_schema_ip_prefix_set.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.ip_prefix_set.Object"] = ves_io_schema_ip_prefix_set.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.ip_prefix_set.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.ip_prefix_set.Object"] = ves_io_schema_ip_prefix_set.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.ip_prefix_set.crudapi.API"] = ves_io_schema_ip_prefix_set_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.ip_prefix_set.crudapi.API"] = ves_io_schema_ip_prefix_set_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.ip_prefix_set.Object"] = ves_io_schema_ip_prefix_set_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.ip_prefix_set.Object"] = ves_io_schema_ip_prefix_set_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.ip_prefix_set.Object"] = ves_io_schema_ip_prefix_set_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.ip_prefix_set.Object"] = ves_io_schema_ip_prefix_set_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.ip_prefix_set.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.ip_prefix_set.Object"] = ves_io_schema_ip_prefix_set_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.k8s_cluster.Object"] = ves_io_schema_k8s_cluster.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.k8s_cluster.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.k8s_cluster.Object"] = reflect.TypeOf(&ves_io_schema_k8s_cluster.DBObject{})
	MDR.EntryIndexers["ves.io.schema.k8s_cluster.Object"] = ves_io_schema_k8s_cluster.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.Object"] = ves_io_schema_k8s_cluster.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.k8s_cluster.StatusObject"] = ves_io_schema_k8s_cluster.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.k8s_cluster.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.k8s_cluster.StatusObject"] = reflect.TypeOf(&ves_io_schema_k8s_cluster.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.k8s_cluster.StatusObject"] = ves_io_schema_k8s_cluster.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster.StatusObject"] = ves_io_schema_k8s_cluster.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.k8s_cluster.API"] = ves_io_schema_k8s_cluster.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.k8s_cluster.API"] = ves_io_schema_k8s_cluster.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.k8s_cluster.Object"] = ves_io_schema_k8s_cluster.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.k8s_cluster.Object"] = ves_io_schema_k8s_cluster.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.k8s_cluster.Object"] = ves_io_schema_k8s_cluster.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.k8s_cluster.Object"] = ves_io_schema_k8s_cluster.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.k8s_cluster.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.k8s_cluster.Object"] = ves_io_schema_k8s_cluster.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.k8s_cluster.crudapi.API"] = ves_io_schema_k8s_cluster_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.k8s_cluster.crudapi.API"] = ves_io_schema_k8s_cluster_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.k8s_cluster.Object"] = ves_io_schema_k8s_cluster_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.k8s_cluster.Object"] = ves_io_schema_k8s_cluster_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.k8s_cluster.Object"] = ves_io_schema_k8s_cluster_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.k8s_cluster.Object"] = ves_io_schema_k8s_cluster_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.k8s_cluster.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.k8s_cluster.Object"] = ves_io_schema_k8s_cluster_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.k8s_cluster_role.Object"] = ves_io_schema_k8s_cluster_role.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.k8s_cluster_role.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.k8s_cluster_role.Object"] = reflect.TypeOf(&ves_io_schema_k8s_cluster_role.DBObject{})
	MDR.EntryIndexers["ves.io.schema.k8s_cluster_role.Object"] = ves_io_schema_k8s_cluster_role.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.Object"] = ves_io_schema_k8s_cluster_role.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.k8s_cluster_role.StatusObject"] = ves_io_schema_k8s_cluster_role.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.k8s_cluster_role.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.k8s_cluster_role.StatusObject"] = reflect.TypeOf(&ves_io_schema_k8s_cluster_role.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.k8s_cluster_role.StatusObject"] = ves_io_schema_k8s_cluster_role.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role.StatusObject"] = ves_io_schema_k8s_cluster_role.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.k8s_cluster_role.API"] = ves_io_schema_k8s_cluster_role.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.k8s_cluster_role.API"] = ves_io_schema_k8s_cluster_role.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.k8s_cluster_role.Object"] = ves_io_schema_k8s_cluster_role.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.k8s_cluster_role.Object"] = ves_io_schema_k8s_cluster_role.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.k8s_cluster_role.Object"] = ves_io_schema_k8s_cluster_role.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.k8s_cluster_role.Object"] = ves_io_schema_k8s_cluster_role.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.k8s_cluster_role.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.k8s_cluster_role.Object"] = ves_io_schema_k8s_cluster_role.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.k8s_cluster_role.crudapi.API"] = ves_io_schema_k8s_cluster_role_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.k8s_cluster_role.crudapi.API"] = ves_io_schema_k8s_cluster_role_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.k8s_cluster_role.Object"] = ves_io_schema_k8s_cluster_role_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.k8s_cluster_role.Object"] = ves_io_schema_k8s_cluster_role_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.k8s_cluster_role.Object"] = ves_io_schema_k8s_cluster_role_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.k8s_cluster_role.Object"] = ves_io_schema_k8s_cluster_role_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.k8s_cluster_role.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.k8s_cluster_role.Object"] = ves_io_schema_k8s_cluster_role_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.k8s_cluster_role_binding.Object"] = ves_io_schema_k8s_cluster_role_binding.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.k8s_cluster_role_binding.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.k8s_cluster_role_binding.Object"] = reflect.TypeOf(&ves_io_schema_k8s_cluster_role_binding.DBObject{})
	MDR.EntryIndexers["ves.io.schema.k8s_cluster_role_binding.Object"] = ves_io_schema_k8s_cluster_role_binding.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.Object"] = ves_io_schema_k8s_cluster_role_binding.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.k8s_cluster_role_binding.StatusObject"] = ves_io_schema_k8s_cluster_role_binding.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.k8s_cluster_role_binding.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.k8s_cluster_role_binding.StatusObject"] = reflect.TypeOf(&ves_io_schema_k8s_cluster_role_binding.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.k8s_cluster_role_binding.StatusObject"] = ves_io_schema_k8s_cluster_role_binding.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.k8s_cluster_role_binding.StatusObject"] = ves_io_schema_k8s_cluster_role_binding.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.k8s_cluster_role_binding.API"] = ves_io_schema_k8s_cluster_role_binding.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.k8s_cluster_role_binding.API"] = ves_io_schema_k8s_cluster_role_binding.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.k8s_cluster_role_binding.Object"] = ves_io_schema_k8s_cluster_role_binding.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.k8s_cluster_role_binding.Object"] = ves_io_schema_k8s_cluster_role_binding.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.k8s_cluster_role_binding.Object"] = ves_io_schema_k8s_cluster_role_binding.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.k8s_cluster_role_binding.Object"] = ves_io_schema_k8s_cluster_role_binding.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.k8s_cluster_role_binding.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.k8s_cluster_role_binding.Object"] = ves_io_schema_k8s_cluster_role_binding.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.k8s_cluster_role_binding.crudapi.API"] = ves_io_schema_k8s_cluster_role_binding_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.k8s_cluster_role_binding.crudapi.API"] = ves_io_schema_k8s_cluster_role_binding_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.k8s_cluster_role_binding.Object"] = ves_io_schema_k8s_cluster_role_binding_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.k8s_cluster_role_binding.Object"] = ves_io_schema_k8s_cluster_role_binding_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.k8s_cluster_role_binding.Object"] = ves_io_schema_k8s_cluster_role_binding_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.k8s_cluster_role_binding.Object"] = ves_io_schema_k8s_cluster_role_binding_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.k8s_cluster_role_binding.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.k8s_cluster_role_binding.Object"] = ves_io_schema_k8s_cluster_role_binding_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.k8s_pod_security_policy.Object"] = ves_io_schema_k8s_pod_security_policy.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.k8s_pod_security_policy.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.k8s_pod_security_policy.Object"] = reflect.TypeOf(&ves_io_schema_k8s_pod_security_policy.DBObject{})
	MDR.EntryIndexers["ves.io.schema.k8s_pod_security_policy.Object"] = ves_io_schema_k8s_pod_security_policy.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.Object"] = ves_io_schema_k8s_pod_security_policy.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.k8s_pod_security_policy.StatusObject"] = ves_io_schema_k8s_pod_security_policy.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.k8s_pod_security_policy.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.k8s_pod_security_policy.StatusObject"] = reflect.TypeOf(&ves_io_schema_k8s_pod_security_policy.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.k8s_pod_security_policy.StatusObject"] = ves_io_schema_k8s_pod_security_policy.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.k8s_pod_security_policy.StatusObject"] = ves_io_schema_k8s_pod_security_policy.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.k8s_pod_security_policy.API"] = ves_io_schema_k8s_pod_security_policy.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.k8s_pod_security_policy.API"] = ves_io_schema_k8s_pod_security_policy.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.k8s_pod_security_policy.Object"] = ves_io_schema_k8s_pod_security_policy.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.k8s_pod_security_policy.Object"] = ves_io_schema_k8s_pod_security_policy.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.k8s_pod_security_policy.Object"] = ves_io_schema_k8s_pod_security_policy.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.k8s_pod_security_policy.Object"] = ves_io_schema_k8s_pod_security_policy.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.k8s_pod_security_policy.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.k8s_pod_security_policy.Object"] = ves_io_schema_k8s_pod_security_policy.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.k8s_pod_security_policy.crudapi.API"] = ves_io_schema_k8s_pod_security_policy_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.k8s_pod_security_policy.crudapi.API"] = ves_io_schema_k8s_pod_security_policy_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.k8s_pod_security_policy.Object"] = ves_io_schema_k8s_pod_security_policy_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.k8s_pod_security_policy.Object"] = ves_io_schema_k8s_pod_security_policy_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.k8s_pod_security_policy.Object"] = ves_io_schema_k8s_pod_security_policy_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.k8s_pod_security_policy.Object"] = ves_io_schema_k8s_pod_security_policy_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.k8s_pod_security_policy.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.k8s_pod_security_policy.Object"] = ves_io_schema_k8s_pod_security_policy_crudapi.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.log.CustomAPI"] = ves_io_schema_log.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.log.CustomAPI"] = ves_io_schema_log.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.log.CustomAPI"] = ves_io_schema_log.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.log.CustomAPI"] = ves_io_schema_log.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.log.Object"] = ves_io_schema_log.CustomAPISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.log_receiver.Object"] = ves_io_schema_log_receiver.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.log_receiver.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.log_receiver.Object"] = reflect.TypeOf(&ves_io_schema_log_receiver.DBObject{})
	MDR.EntryIndexers["ves.io.schema.log_receiver.Object"] = ves_io_schema_log_receiver.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.Object"] = ves_io_schema_log_receiver.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.log_receiver.StatusObject"] = ves_io_schema_log_receiver.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.log_receiver.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.log_receiver.StatusObject"] = reflect.TypeOf(&ves_io_schema_log_receiver.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.log_receiver.StatusObject"] = ves_io_schema_log_receiver.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.log_receiver.StatusObject"] = ves_io_schema_log_receiver.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.log_receiver.API"] = ves_io_schema_log_receiver.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.log_receiver.API"] = ves_io_schema_log_receiver.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.log_receiver.Object"] = ves_io_schema_log_receiver.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.log_receiver.Object"] = ves_io_schema_log_receiver.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.log_receiver.Object"] = ves_io_schema_log_receiver.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.log_receiver.Object"] = ves_io_schema_log_receiver.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.log_receiver.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.log_receiver.Object"] = ves_io_schema_log_receiver.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.log_receiver.CustomAPI"] = ves_io_schema_log_receiver.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.log_receiver.CustomAPI"] = ves_io_schema_log_receiver.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.log_receiver.CustomAPI"] = ves_io_schema_log_receiver.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.log_receiver.CustomAPI"] = ves_io_schema_log_receiver.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.log_receiver.Object"] = ves_io_schema_log_receiver.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.log_receiver.crudapi.API"] = ves_io_schema_log_receiver_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.log_receiver.crudapi.API"] = ves_io_schema_log_receiver_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.log_receiver.Object"] = ves_io_schema_log_receiver_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.log_receiver.Object"] = ves_io_schema_log_receiver_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.log_receiver.Object"] = ves_io_schema_log_receiver_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.log_receiver.Object"] = ves_io_schema_log_receiver_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.log_receiver.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.log_receiver.Object"] = ves_io_schema_log_receiver_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.malicious_user_mitigation.Object"] = ves_io_schema_malicious_user_mitigation.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.malicious_user_mitigation.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.malicious_user_mitigation.Object"] = reflect.TypeOf(&ves_io_schema_malicious_user_mitigation.DBObject{})
	MDR.EntryIndexers["ves.io.schema.malicious_user_mitigation.Object"] = ves_io_schema_malicious_user_mitigation.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.Object"] = ves_io_schema_malicious_user_mitigation.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.malicious_user_mitigation.StatusObject"] = ves_io_schema_malicious_user_mitigation.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.malicious_user_mitigation.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.malicious_user_mitigation.StatusObject"] = reflect.TypeOf(&ves_io_schema_malicious_user_mitigation.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.malicious_user_mitigation.StatusObject"] = ves_io_schema_malicious_user_mitigation.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.malicious_user_mitigation.StatusObject"] = ves_io_schema_malicious_user_mitigation.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.malicious_user_mitigation.API"] = ves_io_schema_malicious_user_mitigation.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.malicious_user_mitigation.API"] = ves_io_schema_malicious_user_mitigation.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.malicious_user_mitigation.Object"] = ves_io_schema_malicious_user_mitigation.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.malicious_user_mitigation.Object"] = ves_io_schema_malicious_user_mitigation.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.malicious_user_mitigation.Object"] = ves_io_schema_malicious_user_mitigation.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.malicious_user_mitigation.Object"] = ves_io_schema_malicious_user_mitigation.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.malicious_user_mitigation.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.malicious_user_mitigation.Object"] = ves_io_schema_malicious_user_mitigation.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.malicious_user_mitigation.crudapi.API"] = ves_io_schema_malicious_user_mitigation_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.malicious_user_mitigation.crudapi.API"] = ves_io_schema_malicious_user_mitigation_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.malicious_user_mitigation.Object"] = ves_io_schema_malicious_user_mitigation_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.malicious_user_mitigation.Object"] = ves_io_schema_malicious_user_mitigation_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.malicious_user_mitigation.Object"] = ves_io_schema_malicious_user_mitigation_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.malicious_user_mitigation.Object"] = ves_io_schema_malicious_user_mitigation_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.malicious_user_mitigation.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.malicious_user_mitigation.Object"] = ves_io_schema_malicious_user_mitigation_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.namespace.Object"] = ves_io_schema_namespace.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.namespace.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.namespace.Object"] = reflect.TypeOf(&ves_io_schema_namespace.DBObject{})
	MDR.EntryIndexers["ves.io.schema.namespace.Object"] = ves_io_schema_namespace.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.namespace.Object"] = ves_io_schema_namespace.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.namespace.StatusObject"] = ves_io_schema_namespace.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.namespace.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.namespace.StatusObject"] = reflect.TypeOf(&ves_io_schema_namespace.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.namespace.StatusObject"] = ves_io_schema_namespace.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.namespace.StatusObject"] = ves_io_schema_namespace.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.namespace.API"] = ves_io_schema_namespace.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.namespace.API"] = ves_io_schema_namespace.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.namespace.Object"] = ves_io_schema_namespace.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.namespace.Object"] = ves_io_schema_namespace.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.namespace.Object"] = ves_io_schema_namespace.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.namespace.Object"] = ves_io_schema_namespace.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.namespace.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.namespace.Object"] = ves_io_schema_namespace.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.namespace.CustomAPI"] = ves_io_schema_namespace.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.namespace.CustomAPI"] = ves_io_schema_namespace.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.namespace.CustomAPI"] = ves_io_schema_namespace.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.namespace.CustomAPI"] = ves_io_schema_namespace.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.namespace.Object"] = ves_io_schema_namespace.CustomAPISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.namespace.NamespaceCustomAPI"] = ves_io_schema_namespace.NewNamespaceCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.namespace.NamespaceCustomAPI"] = ves_io_schema_namespace.NewNamespaceCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.namespace.NamespaceCustomAPI"] = ves_io_schema_namespace.RegisterNamespaceCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.namespace.NamespaceCustomAPI"] = ves_io_schema_namespace.RegisterGwNamespaceCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.namespace.Object"] = ves_io_schema_namespace.NamespaceCustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.namespace.crudapi.API"] = ves_io_schema_namespace_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.namespace.crudapi.API"] = ves_io_schema_namespace_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.namespace.Object"] = ves_io_schema_namespace_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.namespace.Object"] = ves_io_schema_namespace_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.namespace.Object"] = ves_io_schema_namespace_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.namespace.Object"] = ves_io_schema_namespace_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.namespace.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.namespace.Object"] = ves_io_schema_namespace_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.network_connector.Object"] = ves_io_schema_network_connector.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.network_connector.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.network_connector.Object"] = reflect.TypeOf(&ves_io_schema_network_connector.DBObject{})
	MDR.EntryIndexers["ves.io.schema.network_connector.Object"] = ves_io_schema_network_connector.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.network_connector.Object"] = ves_io_schema_network_connector.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.network_connector.StatusObject"] = ves_io_schema_network_connector.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.network_connector.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.network_connector.StatusObject"] = reflect.TypeOf(&ves_io_schema_network_connector.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.network_connector.StatusObject"] = ves_io_schema_network_connector.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.network_connector.StatusObject"] = ves_io_schema_network_connector.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.network_connector.API"] = ves_io_schema_network_connector.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.network_connector.API"] = ves_io_schema_network_connector.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.network_connector.Object"] = ves_io_schema_network_connector.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.network_connector.Object"] = ves_io_schema_network_connector.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.network_connector.Object"] = ves_io_schema_network_connector.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.network_connector.Object"] = ves_io_schema_network_connector.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.network_connector.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.network_connector.Object"] = ves_io_schema_network_connector.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.network_connector.crudapi.API"] = ves_io_schema_network_connector_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.network_connector.crudapi.API"] = ves_io_schema_network_connector_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.network_connector.Object"] = ves_io_schema_network_connector_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.network_connector.Object"] = ves_io_schema_network_connector_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.network_connector.Object"] = ves_io_schema_network_connector_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.network_connector.Object"] = ves_io_schema_network_connector_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.network_connector.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.network_connector.Object"] = ves_io_schema_network_connector_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.network_firewall.Object"] = ves_io_schema_network_firewall.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.network_firewall.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.network_firewall.Object"] = reflect.TypeOf(&ves_io_schema_network_firewall.DBObject{})
	MDR.EntryIndexers["ves.io.schema.network_firewall.Object"] = ves_io_schema_network_firewall.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.Object"] = ves_io_schema_network_firewall.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.network_firewall.StatusObject"] = ves_io_schema_network_firewall.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.network_firewall.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.network_firewall.StatusObject"] = reflect.TypeOf(&ves_io_schema_network_firewall.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.network_firewall.StatusObject"] = ves_io_schema_network_firewall.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.network_firewall.StatusObject"] = ves_io_schema_network_firewall.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.network_firewall.API"] = ves_io_schema_network_firewall.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.network_firewall.API"] = ves_io_schema_network_firewall.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.network_firewall.Object"] = ves_io_schema_network_firewall.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.network_firewall.Object"] = ves_io_schema_network_firewall.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.network_firewall.Object"] = ves_io_schema_network_firewall.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.network_firewall.Object"] = ves_io_schema_network_firewall.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.network_firewall.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.network_firewall.Object"] = ves_io_schema_network_firewall.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.network_firewall.crudapi.API"] = ves_io_schema_network_firewall_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.network_firewall.crudapi.API"] = ves_io_schema_network_firewall_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.network_firewall.Object"] = ves_io_schema_network_firewall_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.network_firewall.Object"] = ves_io_schema_network_firewall_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.network_firewall.Object"] = ves_io_schema_network_firewall_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.network_firewall.Object"] = ves_io_schema_network_firewall_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.network_firewall.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.network_firewall.Object"] = ves_io_schema_network_firewall_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.network_interface.Object"] = ves_io_schema_network_interface.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.network_interface.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.network_interface.Object"] = reflect.TypeOf(&ves_io_schema_network_interface.DBObject{})
	MDR.EntryIndexers["ves.io.schema.network_interface.Object"] = ves_io_schema_network_interface.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.network_interface.Object"] = ves_io_schema_network_interface.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.network_interface.StatusObject"] = ves_io_schema_network_interface.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.network_interface.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.network_interface.StatusObject"] = reflect.TypeOf(&ves_io_schema_network_interface.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.network_interface.StatusObject"] = ves_io_schema_network_interface.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.network_interface.StatusObject"] = ves_io_schema_network_interface.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.network_interface.API"] = ves_io_schema_network_interface.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.network_interface.API"] = ves_io_schema_network_interface.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.network_interface.Object"] = ves_io_schema_network_interface.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.network_interface.Object"] = ves_io_schema_network_interface.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.network_interface.Object"] = ves_io_schema_network_interface.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.network_interface.Object"] = ves_io_schema_network_interface.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.network_interface.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.network_interface.Object"] = ves_io_schema_network_interface.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.network_interface.crudapi.API"] = ves_io_schema_network_interface_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.network_interface.crudapi.API"] = ves_io_schema_network_interface_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.network_interface.Object"] = ves_io_schema_network_interface_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.network_interface.Object"] = ves_io_schema_network_interface_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.network_interface.Object"] = ves_io_schema_network_interface_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.network_interface.Object"] = ves_io_schema_network_interface_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.network_interface.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.network_interface.Object"] = ves_io_schema_network_interface_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.network_policy.Object"] = ves_io_schema_network_policy.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.network_policy.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.network_policy.Object"] = reflect.TypeOf(&ves_io_schema_network_policy.DBObject{})
	MDR.EntryIndexers["ves.io.schema.network_policy.Object"] = ves_io_schema_network_policy.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.network_policy.Object"] = ves_io_schema_network_policy.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.network_policy.StatusObject"] = ves_io_schema_network_policy.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.network_policy.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.network_policy.StatusObject"] = reflect.TypeOf(&ves_io_schema_network_policy.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.network_policy.StatusObject"] = ves_io_schema_network_policy.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.network_policy.StatusObject"] = ves_io_schema_network_policy.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.network_policy.API"] = ves_io_schema_network_policy.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.network_policy.API"] = ves_io_schema_network_policy.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.network_policy.Object"] = ves_io_schema_network_policy.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.network_policy.Object"] = ves_io_schema_network_policy.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.network_policy.Object"] = ves_io_schema_network_policy.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.network_policy.Object"] = ves_io_schema_network_policy.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.network_policy.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.network_policy.Object"] = ves_io_schema_network_policy.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.network_policy.CustomDataAPI"] = ves_io_schema_network_policy.NewCustomDataAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.network_policy.CustomDataAPI"] = ves_io_schema_network_policy.NewCustomDataAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.network_policy.CustomDataAPI"] = ves_io_schema_network_policy.RegisterCustomDataAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.network_policy.CustomDataAPI"] = ves_io_schema_network_policy.RegisterGwCustomDataAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.network_policy.Object"] = ves_io_schema_network_policy.CustomDataAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.network_policy.crudapi.API"] = ves_io_schema_network_policy_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.network_policy.crudapi.API"] = ves_io_schema_network_policy_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.network_policy.Object"] = ves_io_schema_network_policy_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.network_policy.Object"] = ves_io_schema_network_policy_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.network_policy.Object"] = ves_io_schema_network_policy_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.network_policy.Object"] = ves_io_schema_network_policy_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.network_policy.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.network_policy.Object"] = ves_io_schema_network_policy_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.network_policy_rule.Object"] = ves_io_schema_network_policy_rule.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.network_policy_rule.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.network_policy_rule.Object"] = reflect.TypeOf(&ves_io_schema_network_policy_rule.DBObject{})
	MDR.EntryIndexers["ves.io.schema.network_policy_rule.Object"] = ves_io_schema_network_policy_rule.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.Object"] = ves_io_schema_network_policy_rule.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.network_policy_rule.StatusObject"] = ves_io_schema_network_policy_rule.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.network_policy_rule.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.network_policy_rule.StatusObject"] = reflect.TypeOf(&ves_io_schema_network_policy_rule.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.network_policy_rule.StatusObject"] = ves_io_schema_network_policy_rule.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.network_policy_rule.StatusObject"] = ves_io_schema_network_policy_rule.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.network_policy_rule.API"] = ves_io_schema_network_policy_rule.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.network_policy_rule.API"] = ves_io_schema_network_policy_rule.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.network_policy_rule.Object"] = ves_io_schema_network_policy_rule.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.network_policy_rule.Object"] = ves_io_schema_network_policy_rule.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.network_policy_rule.Object"] = ves_io_schema_network_policy_rule.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.network_policy_rule.Object"] = ves_io_schema_network_policy_rule.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.network_policy_rule.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.network_policy_rule.Object"] = ves_io_schema_network_policy_rule.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.network_policy_rule.crudapi.API"] = ves_io_schema_network_policy_rule_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.network_policy_rule.crudapi.API"] = ves_io_schema_network_policy_rule_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.network_policy_rule.Object"] = ves_io_schema_network_policy_rule_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.network_policy_rule.Object"] = ves_io_schema_network_policy_rule_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.network_policy_rule.Object"] = ves_io_schema_network_policy_rule_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.network_policy_rule.Object"] = ves_io_schema_network_policy_rule_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.network_policy_rule.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.network_policy_rule.Object"] = ves_io_schema_network_policy_rule_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.policer.Object"] = ves_io_schema_policer.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.policer.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.policer.Object"] = reflect.TypeOf(&ves_io_schema_policer.DBObject{})
	MDR.EntryIndexers["ves.io.schema.policer.Object"] = ves_io_schema_policer.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.policer.Object"] = ves_io_schema_policer.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.policer.StatusObject"] = ves_io_schema_policer.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.policer.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.policer.StatusObject"] = reflect.TypeOf(&ves_io_schema_policer.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.policer.StatusObject"] = ves_io_schema_policer.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.policer.StatusObject"] = ves_io_schema_policer.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.policer.API"] = ves_io_schema_policer.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.policer.API"] = ves_io_schema_policer.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.policer.Object"] = ves_io_schema_policer.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.policer.Object"] = ves_io_schema_policer.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.policer.Object"] = ves_io_schema_policer.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.policer.Object"] = ves_io_schema_policer.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.policer.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.policer.Object"] = ves_io_schema_policer.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.policer.crudapi.API"] = ves_io_schema_policer_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.policer.crudapi.API"] = ves_io_schema_policer_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.policer.Object"] = ves_io_schema_policer_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.policer.Object"] = ves_io_schema_policer_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.policer.Object"] = ves_io_schema_policer_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.policer.Object"] = ves_io_schema_policer_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.policer.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.policer.Object"] = ves_io_schema_policer_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.protocol_policer.Object"] = ves_io_schema_protocol_policer.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.protocol_policer.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.protocol_policer.Object"] = reflect.TypeOf(&ves_io_schema_protocol_policer.DBObject{})
	MDR.EntryIndexers["ves.io.schema.protocol_policer.Object"] = ves_io_schema_protocol_policer.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.Object"] = ves_io_schema_protocol_policer.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.protocol_policer.StatusObject"] = ves_io_schema_protocol_policer.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.protocol_policer.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.protocol_policer.StatusObject"] = reflect.TypeOf(&ves_io_schema_protocol_policer.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.protocol_policer.StatusObject"] = ves_io_schema_protocol_policer.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.protocol_policer.StatusObject"] = ves_io_schema_protocol_policer.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.protocol_policer.API"] = ves_io_schema_protocol_policer.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.protocol_policer.API"] = ves_io_schema_protocol_policer.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.protocol_policer.Object"] = ves_io_schema_protocol_policer.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.protocol_policer.Object"] = ves_io_schema_protocol_policer.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.protocol_policer.Object"] = ves_io_schema_protocol_policer.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.protocol_policer.Object"] = ves_io_schema_protocol_policer.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.protocol_policer.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.protocol_policer.Object"] = ves_io_schema_protocol_policer.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.protocol_policer.crudapi.API"] = ves_io_schema_protocol_policer_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.protocol_policer.crudapi.API"] = ves_io_schema_protocol_policer_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.protocol_policer.Object"] = ves_io_schema_protocol_policer_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.protocol_policer.Object"] = ves_io_schema_protocol_policer_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.protocol_policer.Object"] = ves_io_schema_protocol_policer_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.protocol_policer.Object"] = ves_io_schema_protocol_policer_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.protocol_policer.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.protocol_policer.Object"] = ves_io_schema_protocol_policer_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.public_ip.Object"] = ves_io_schema_public_ip.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.public_ip.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.public_ip.Object"] = reflect.TypeOf(&ves_io_schema_public_ip.DBObject{})
	MDR.EntryIndexers["ves.io.schema.public_ip.Object"] = ves_io_schema_public_ip.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.public_ip.Object"] = ves_io_schema_public_ip.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.public_ip.StatusObject"] = ves_io_schema_public_ip.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.public_ip.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.public_ip.StatusObject"] = reflect.TypeOf(&ves_io_schema_public_ip.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.public_ip.StatusObject"] = ves_io_schema_public_ip.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.public_ip.StatusObject"] = ves_io_schema_public_ip.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.public_ip.API"] = ves_io_schema_public_ip.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.public_ip.API"] = ves_io_schema_public_ip.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.public_ip.Object"] = ves_io_schema_public_ip.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.public_ip.Object"] = ves_io_schema_public_ip.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.public_ip.Object"] = ves_io_schema_public_ip.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.public_ip.Object"] = ves_io_schema_public_ip.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.public_ip.Object"] = []svcfw.NamespaceType{svcfw.SharedNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.public_ip.Object"] = ves_io_schema_public_ip.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.public_ip.crudapi.API"] = ves_io_schema_public_ip_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.public_ip.crudapi.API"] = ves_io_schema_public_ip_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.public_ip.Object"] = ves_io_schema_public_ip_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.public_ip.Object"] = ves_io_schema_public_ip_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.public_ip.Object"] = ves_io_schema_public_ip_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.public_ip.Object"] = ves_io_schema_public_ip_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.public_ip.Object"] = []svcfw.NamespaceType{svcfw.SharedNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.public_ip.Object"] = ves_io_schema_public_ip_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.rate_limiter.Object"] = ves_io_schema_rate_limiter.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.rate_limiter.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.rate_limiter.Object"] = reflect.TypeOf(&ves_io_schema_rate_limiter.DBObject{})
	MDR.EntryIndexers["ves.io.schema.rate_limiter.Object"] = ves_io_schema_rate_limiter.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.Object"] = ves_io_schema_rate_limiter.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.rate_limiter.StatusObject"] = ves_io_schema_rate_limiter.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.rate_limiter.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.rate_limiter.StatusObject"] = reflect.TypeOf(&ves_io_schema_rate_limiter.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.rate_limiter.StatusObject"] = ves_io_schema_rate_limiter.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.rate_limiter.StatusObject"] = ves_io_schema_rate_limiter.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.rate_limiter.API"] = ves_io_schema_rate_limiter.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.rate_limiter.API"] = ves_io_schema_rate_limiter.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.rate_limiter.Object"] = ves_io_schema_rate_limiter.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.rate_limiter.Object"] = ves_io_schema_rate_limiter.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.rate_limiter.Object"] = ves_io_schema_rate_limiter.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.rate_limiter.Object"] = ves_io_schema_rate_limiter.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.rate_limiter.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.rate_limiter.Object"] = ves_io_schema_rate_limiter.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.rate_limiter.crudapi.API"] = ves_io_schema_rate_limiter_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.rate_limiter.crudapi.API"] = ves_io_schema_rate_limiter_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.rate_limiter.Object"] = ves_io_schema_rate_limiter_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.rate_limiter.Object"] = ves_io_schema_rate_limiter_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.rate_limiter.Object"] = ves_io_schema_rate_limiter_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.rate_limiter.Object"] = ves_io_schema_rate_limiter_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.rate_limiter.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.rate_limiter.Object"] = ves_io_schema_rate_limiter_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.registration.Object"] = ves_io_schema_registration.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.registration.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.registration.Object"] = reflect.TypeOf(&ves_io_schema_registration.DBObject{})
	MDR.EntryIndexers["ves.io.schema.registration.Object"] = ves_io_schema_registration.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.registration.Object"] = ves_io_schema_registration.ObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.registration.API"] = ves_io_schema_registration.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.registration.API"] = ves_io_schema_registration.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.registration.Object"] = ves_io_schema_registration.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.registration.Object"] = ves_io_schema_registration.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.registration.Object"] = ves_io_schema_registration.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.registration.Object"] = ves_io_schema_registration.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.registration.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.registration.Object"] = ves_io_schema_registration.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.registration.CustomAPI"] = ves_io_schema_registration.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.registration.CustomAPI"] = ves_io_schema_registration.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.registration.CustomAPI"] = ves_io_schema_registration.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.registration.CustomAPI"] = ves_io_schema_registration.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.registration.Object"] = ves_io_schema_registration.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.registration.crudapi.API"] = ves_io_schema_registration_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.registration.crudapi.API"] = ves_io_schema_registration_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.registration.Object"] = ves_io_schema_registration_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.registration.Object"] = ves_io_schema_registration_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.registration.Object"] = ves_io_schema_registration_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.registration.Object"] = ves_io_schema_registration_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.registration.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.registration.Object"] = ves_io_schema_registration_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.role.Object"] = ves_io_schema_role.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.role.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.role.Object"] = reflect.TypeOf(&ves_io_schema_role.DBObject{})
	MDR.EntryIndexers["ves.io.schema.role.Object"] = ves_io_schema_role.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.role.Object"] = ves_io_schema_role.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.role.StatusObject"] = ves_io_schema_role.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.role.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.role.StatusObject"] = reflect.TypeOf(&ves_io_schema_role.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.role.StatusObject"] = ves_io_schema_role.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.role.StatusObject"] = ves_io_schema_role.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.role.API"] = ves_io_schema_role.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.role.API"] = ves_io_schema_role.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.role.Object"] = ves_io_schema_role.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.role.Object"] = ves_io_schema_role.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.role.Object"] = ves_io_schema_role.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.role.Object"] = ves_io_schema_role.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.role.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.role.Object"] = ves_io_schema_role.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.role.CustomAPI"] = ves_io_schema_role.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.role.CustomAPI"] = ves_io_schema_role.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.role.CustomAPI"] = ves_io_schema_role.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.role.CustomAPI"] = ves_io_schema_role.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.role.Object"] = ves_io_schema_role.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.role.crudapi.API"] = ves_io_schema_role_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.role.crudapi.API"] = ves_io_schema_role_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.role.Object"] = ves_io_schema_role_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.role.Object"] = ves_io_schema_role_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.role.Object"] = ves_io_schema_role_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.role.Object"] = ves_io_schema_role_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.role.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.role.Object"] = ves_io_schema_role_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.route.Object"] = ves_io_schema_route.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.route.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.route.Object"] = reflect.TypeOf(&ves_io_schema_route.DBObject{})
	MDR.EntryIndexers["ves.io.schema.route.Object"] = ves_io_schema_route.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.route.Object"] = ves_io_schema_route.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.route.StatusObject"] = ves_io_schema_route.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.route.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.route.StatusObject"] = reflect.TypeOf(&ves_io_schema_route.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.route.StatusObject"] = ves_io_schema_route.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.route.StatusObject"] = ves_io_schema_route.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.route.API"] = ves_io_schema_route.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.route.API"] = ves_io_schema_route.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.route.Object"] = ves_io_schema_route.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.route.Object"] = ves_io_schema_route.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.route.Object"] = ves_io_schema_route.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.route.Object"] = ves_io_schema_route.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.route.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.route.Object"] = ves_io_schema_route.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.route.crudapi.API"] = ves_io_schema_route_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.route.crudapi.API"] = ves_io_schema_route_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.route.Object"] = ves_io_schema_route_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.route.Object"] = ves_io_schema_route_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.route.Object"] = ves_io_schema_route_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.route.Object"] = ves_io_schema_route_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.route.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.route.Object"] = ves_io_schema_route_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.secret_policy.Object"] = ves_io_schema_secret_policy.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.secret_policy.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.secret_policy.Object"] = reflect.TypeOf(&ves_io_schema_secret_policy.DBObject{})
	MDR.EntryIndexers["ves.io.schema.secret_policy.Object"] = ves_io_schema_secret_policy.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.Object"] = ves_io_schema_secret_policy.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.secret_policy.StatusObject"] = ves_io_schema_secret_policy.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.secret_policy.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.secret_policy.StatusObject"] = reflect.TypeOf(&ves_io_schema_secret_policy.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.secret_policy.StatusObject"] = ves_io_schema_secret_policy.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.secret_policy.StatusObject"] = ves_io_schema_secret_policy.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.secret_policy.API"] = ves_io_schema_secret_policy.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.secret_policy.API"] = ves_io_schema_secret_policy.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.secret_policy.Object"] = ves_io_schema_secret_policy.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.secret_policy.Object"] = ves_io_schema_secret_policy.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.secret_policy.Object"] = ves_io_schema_secret_policy.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.secret_policy.Object"] = ves_io_schema_secret_policy.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.secret_policy.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.secret_policy.Object"] = ves_io_schema_secret_policy.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.secret_policy.CustomAPI"] = ves_io_schema_secret_policy.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.secret_policy.CustomAPI"] = ves_io_schema_secret_policy.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.secret_policy.CustomAPI"] = ves_io_schema_secret_policy.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.secret_policy.CustomAPI"] = ves_io_schema_secret_policy.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.secret_policy.Object"] = ves_io_schema_secret_policy.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.secret_policy.crudapi.API"] = ves_io_schema_secret_policy_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.secret_policy.crudapi.API"] = ves_io_schema_secret_policy_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.secret_policy.Object"] = ves_io_schema_secret_policy_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.secret_policy.Object"] = ves_io_schema_secret_policy_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.secret_policy.Object"] = ves_io_schema_secret_policy_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.secret_policy.Object"] = ves_io_schema_secret_policy_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.secret_policy.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.secret_policy.Object"] = ves_io_schema_secret_policy_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.secret_policy_rule.Object"] = ves_io_schema_secret_policy_rule.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.secret_policy_rule.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.secret_policy_rule.Object"] = reflect.TypeOf(&ves_io_schema_secret_policy_rule.DBObject{})
	MDR.EntryIndexers["ves.io.schema.secret_policy_rule.Object"] = ves_io_schema_secret_policy_rule.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.Object"] = ves_io_schema_secret_policy_rule.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.secret_policy_rule.StatusObject"] = ves_io_schema_secret_policy_rule.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.secret_policy_rule.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.secret_policy_rule.StatusObject"] = reflect.TypeOf(&ves_io_schema_secret_policy_rule.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.secret_policy_rule.StatusObject"] = ves_io_schema_secret_policy_rule.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.secret_policy_rule.StatusObject"] = ves_io_schema_secret_policy_rule.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.secret_policy_rule.API"] = ves_io_schema_secret_policy_rule.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.secret_policy_rule.API"] = ves_io_schema_secret_policy_rule.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.secret_policy_rule.Object"] = ves_io_schema_secret_policy_rule.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.secret_policy_rule.Object"] = ves_io_schema_secret_policy_rule.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.secret_policy_rule.Object"] = ves_io_schema_secret_policy_rule.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.secret_policy_rule.Object"] = ves_io_schema_secret_policy_rule.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.secret_policy_rule.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.secret_policy_rule.Object"] = ves_io_schema_secret_policy_rule.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.secret_policy_rule.crudapi.API"] = ves_io_schema_secret_policy_rule_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.secret_policy_rule.crudapi.API"] = ves_io_schema_secret_policy_rule_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.secret_policy_rule.Object"] = ves_io_schema_secret_policy_rule_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.secret_policy_rule.Object"] = ves_io_schema_secret_policy_rule_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.secret_policy_rule.Object"] = ves_io_schema_secret_policy_rule_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.secret_policy_rule.Object"] = ves_io_schema_secret_policy_rule_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.secret_policy_rule.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.secret_policy_rule.Object"] = ves_io_schema_secret_policy_rule_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.service_policy.Object"] = ves_io_schema_service_policy.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.service_policy.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.service_policy.Object"] = reflect.TypeOf(&ves_io_schema_service_policy.DBObject{})
	MDR.EntryIndexers["ves.io.schema.service_policy.Object"] = ves_io_schema_service_policy.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.service_policy.Object"] = ves_io_schema_service_policy.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.service_policy.StatusObject"] = ves_io_schema_service_policy.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.service_policy.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.service_policy.StatusObject"] = reflect.TypeOf(&ves_io_schema_service_policy.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.service_policy.StatusObject"] = ves_io_schema_service_policy.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.service_policy.StatusObject"] = ves_io_schema_service_policy.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.service_policy.API"] = ves_io_schema_service_policy.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.service_policy.API"] = ves_io_schema_service_policy.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.service_policy.Object"] = ves_io_schema_service_policy.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.service_policy.Object"] = ves_io_schema_service_policy.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.service_policy.Object"] = ves_io_schema_service_policy.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.service_policy.Object"] = ves_io_schema_service_policy.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.service_policy.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.service_policy.Object"] = ves_io_schema_service_policy.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.service_policy.CustomDataAPI"] = ves_io_schema_service_policy.NewCustomDataAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.service_policy.CustomDataAPI"] = ves_io_schema_service_policy.NewCustomDataAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.service_policy.CustomDataAPI"] = ves_io_schema_service_policy.RegisterCustomDataAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.service_policy.CustomDataAPI"] = ves_io_schema_service_policy.RegisterGwCustomDataAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.service_policy.Object"] = ves_io_schema_service_policy.CustomDataAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.service_policy.crudapi.API"] = ves_io_schema_service_policy_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.service_policy.crudapi.API"] = ves_io_schema_service_policy_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.service_policy.Object"] = ves_io_schema_service_policy_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.service_policy.Object"] = ves_io_schema_service_policy_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.service_policy.Object"] = ves_io_schema_service_policy_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.service_policy.Object"] = ves_io_schema_service_policy_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.service_policy.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.service_policy.Object"] = ves_io_schema_service_policy_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.service_policy_rule.Object"] = ves_io_schema_service_policy_rule.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.service_policy_rule.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.service_policy_rule.Object"] = reflect.TypeOf(&ves_io_schema_service_policy_rule.DBObject{})
	MDR.EntryIndexers["ves.io.schema.service_policy_rule.Object"] = ves_io_schema_service_policy_rule.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.Object"] = ves_io_schema_service_policy_rule.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.service_policy_rule.StatusObject"] = ves_io_schema_service_policy_rule.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.service_policy_rule.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.service_policy_rule.StatusObject"] = reflect.TypeOf(&ves_io_schema_service_policy_rule.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.service_policy_rule.StatusObject"] = ves_io_schema_service_policy_rule.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.service_policy_rule.StatusObject"] = ves_io_schema_service_policy_rule.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.service_policy_rule.API"] = ves_io_schema_service_policy_rule.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.service_policy_rule.API"] = ves_io_schema_service_policy_rule.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.service_policy_rule.Object"] = ves_io_schema_service_policy_rule.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.service_policy_rule.Object"] = ves_io_schema_service_policy_rule.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.service_policy_rule.Object"] = ves_io_schema_service_policy_rule.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.service_policy_rule.Object"] = ves_io_schema_service_policy_rule.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.service_policy_rule.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.service_policy_rule.Object"] = ves_io_schema_service_policy_rule.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.service_policy_rule.crudapi.API"] = ves_io_schema_service_policy_rule_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.service_policy_rule.crudapi.API"] = ves_io_schema_service_policy_rule_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.service_policy_rule.Object"] = ves_io_schema_service_policy_rule_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.service_policy_rule.Object"] = ves_io_schema_service_policy_rule_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.service_policy_rule.Object"] = ves_io_schema_service_policy_rule_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.service_policy_rule.Object"] = ves_io_schema_service_policy_rule_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.service_policy_rule.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.service_policy_rule.Object"] = ves_io_schema_service_policy_rule_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.site.Object"] = ves_io_schema_site.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.site.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.site.Object"] = reflect.TypeOf(&ves_io_schema_site.DBObject{})
	MDR.EntryIndexers["ves.io.schema.site.Object"] = ves_io_schema_site.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.site.Object"] = ves_io_schema_site.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.site.StatusObject"] = ves_io_schema_site.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.site.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.site.StatusObject"] = reflect.TypeOf(&ves_io_schema_site.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.site.StatusObject"] = ves_io_schema_site.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.site.StatusObject"] = ves_io_schema_site.StatusObjectValidator()

	customCSR = MDR.PvtCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.site.PrivateConfigKubeConfigAPI"] = ves_io_schema_site.NewPrivateConfigKubeConfigAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.site.PrivateConfigKubeConfigAPI"] = ves_io_schema_site.NewPrivateConfigKubeConfigAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.site.PrivateConfigKubeConfigAPI"] = ves_io_schema_site.RegisterPrivateConfigKubeConfigAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.site.PrivateConfigKubeConfigAPI"] = ves_io_schema_site.RegisterGwPrivateConfigKubeConfigAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.site.Object"] = ves_io_schema_site.PrivateConfigKubeConfigAPISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.site.ConfigKubeConfigAPI"] = ves_io_schema_site.NewConfigKubeConfigAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.site.ConfigKubeConfigAPI"] = ves_io_schema_site.NewConfigKubeConfigAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.site.ConfigKubeConfigAPI"] = ves_io_schema_site.RegisterConfigKubeConfigAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.site.ConfigKubeConfigAPI"] = ves_io_schema_site.RegisterGwConfigKubeConfigAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.site.Object"] = ves_io_schema_site.ConfigKubeConfigAPISwaggerJSON

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.site.API"] = ves_io_schema_site.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.site.API"] = ves_io_schema_site.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.site.Object"] = ves_io_schema_site.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.site.Object"] = ves_io_schema_site.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.site.Object"] = ves_io_schema_site.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.site.Object"] = ves_io_schema_site.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.site.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.site.Object"] = ves_io_schema_site.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.site.CustomDataK8SAPI"] = ves_io_schema_site.NewCustomDataK8SAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.site.CustomDataK8SAPI"] = ves_io_schema_site.NewCustomDataK8SAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.site.CustomDataK8SAPI"] = ves_io_schema_site.RegisterCustomDataK8SAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.site.CustomDataK8SAPI"] = ves_io_schema_site.RegisterGwCustomDataK8SAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.site.Object"] = ves_io_schema_site.CustomDataK8SAPISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.site.CustomStateAPI"] = ves_io_schema_site.NewCustomStateAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.site.CustomStateAPI"] = ves_io_schema_site.NewCustomStateAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.site.CustomStateAPI"] = ves_io_schema_site.RegisterCustomStateAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.site.CustomStateAPI"] = ves_io_schema_site.RegisterGwCustomStateAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.site.Object"] = ves_io_schema_site.CustomStateAPISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.site.UamKubeConfigAPI"] = ves_io_schema_site.NewUamKubeConfigAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.site.UamKubeConfigAPI"] = ves_io_schema_site.NewUamKubeConfigAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.site.UamKubeConfigAPI"] = ves_io_schema_site.RegisterUamKubeConfigAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.site.UamKubeConfigAPI"] = ves_io_schema_site.RegisterGwUamKubeConfigAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.site.Object"] = ves_io_schema_site.UamKubeConfigAPISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.site.UpgradeAPI"] = ves_io_schema_site.NewUpgradeAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.site.UpgradeAPI"] = ves_io_schema_site.NewUpgradeAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.site.UpgradeAPI"] = ves_io_schema_site.RegisterUpgradeAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.site.UpgradeAPI"] = ves_io_schema_site.RegisterGwUpgradeAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.site.Object"] = ves_io_schema_site.UpgradeAPISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.site.CustomSiteStatusAPI"] = ves_io_schema_site.NewCustomSiteStatusAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.site.CustomSiteStatusAPI"] = ves_io_schema_site.NewCustomSiteStatusAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.site.CustomSiteStatusAPI"] = ves_io_schema_site.RegisterCustomSiteStatusAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.site.CustomSiteStatusAPI"] = ves_io_schema_site.RegisterGwCustomSiteStatusAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.site.Object"] = ves_io_schema_site.CustomSiteStatusAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.site.crudapi.API"] = ves_io_schema_site_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.site.crudapi.API"] = ves_io_schema_site_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.site.Object"] = ves_io_schema_site_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.site.Object"] = ves_io_schema_site_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.site.Object"] = ves_io_schema_site_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.site.Object"] = ves_io_schema_site_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.site.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.site.Object"] = ves_io_schema_site_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.site_mesh_group.Object"] = ves_io_schema_site_mesh_group.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.site_mesh_group.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.site_mesh_group.Object"] = reflect.TypeOf(&ves_io_schema_site_mesh_group.DBObject{})
	MDR.EntryIndexers["ves.io.schema.site_mesh_group.Object"] = ves_io_schema_site_mesh_group.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.Object"] = ves_io_schema_site_mesh_group.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.site_mesh_group.StatusObject"] = ves_io_schema_site_mesh_group.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.site_mesh_group.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.site_mesh_group.StatusObject"] = reflect.TypeOf(&ves_io_schema_site_mesh_group.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.site_mesh_group.StatusObject"] = ves_io_schema_site_mesh_group.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.site_mesh_group.StatusObject"] = ves_io_schema_site_mesh_group.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.site_mesh_group.API"] = ves_io_schema_site_mesh_group.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.site_mesh_group.API"] = ves_io_schema_site_mesh_group.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.site_mesh_group.Object"] = ves_io_schema_site_mesh_group.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.site_mesh_group.Object"] = ves_io_schema_site_mesh_group.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.site_mesh_group.Object"] = ves_io_schema_site_mesh_group.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.site_mesh_group.Object"] = ves_io_schema_site_mesh_group.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.site_mesh_group.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.site_mesh_group.Object"] = ves_io_schema_site_mesh_group.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.site_mesh_group.crudapi.API"] = ves_io_schema_site_mesh_group_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.site_mesh_group.crudapi.API"] = ves_io_schema_site_mesh_group_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.site_mesh_group.Object"] = ves_io_schema_site_mesh_group_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.site_mesh_group.Object"] = ves_io_schema_site_mesh_group_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.site_mesh_group.Object"] = ves_io_schema_site_mesh_group_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.site_mesh_group.Object"] = ves_io_schema_site_mesh_group_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.site_mesh_group.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.site_mesh_group.Object"] = ves_io_schema_site_mesh_group_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.token.Object"] = ves_io_schema_token.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.token.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.token.Object"] = reflect.TypeOf(&ves_io_schema_token.DBObject{})
	MDR.EntryIndexers["ves.io.schema.token.Object"] = ves_io_schema_token.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.token.Object"] = ves_io_schema_token.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.token.StatusObject"] = ves_io_schema_token.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.token.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.token.StatusObject"] = reflect.TypeOf(&ves_io_schema_token.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.token.StatusObject"] = ves_io_schema_token.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.token.StatusObject"] = ves_io_schema_token.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.token.API"] = ves_io_schema_token.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.token.API"] = ves_io_schema_token.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.token.Object"] = ves_io_schema_token.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.token.Object"] = ves_io_schema_token.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.token.Object"] = ves_io_schema_token.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.token.Object"] = ves_io_schema_token.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.token.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.token.Object"] = ves_io_schema_token.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.token.CustomAPI"] = ves_io_schema_token.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.token.CustomAPI"] = ves_io_schema_token.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.token.CustomAPI"] = ves_io_schema_token.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.token.CustomAPI"] = ves_io_schema_token.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.token.Object"] = ves_io_schema_token.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.token.crudapi.API"] = ves_io_schema_token_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.token.crudapi.API"] = ves_io_schema_token_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.token.Object"] = ves_io_schema_token_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.token.Object"] = ves_io_schema_token_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.token.Object"] = ves_io_schema_token_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.token.Object"] = ves_io_schema_token_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.token.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.token.Object"] = ves_io_schema_token_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.tunnel.Object"] = ves_io_schema_tunnel.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.tunnel.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.tunnel.Object"] = reflect.TypeOf(&ves_io_schema_tunnel.DBObject{})
	MDR.EntryIndexers["ves.io.schema.tunnel.Object"] = ves_io_schema_tunnel.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.tunnel.Object"] = ves_io_schema_tunnel.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.tunnel.StatusObject"] = ves_io_schema_tunnel.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.tunnel.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.tunnel.StatusObject"] = reflect.TypeOf(&ves_io_schema_tunnel.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.tunnel.StatusObject"] = ves_io_schema_tunnel.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.tunnel.StatusObject"] = ves_io_schema_tunnel.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.tunnel.API"] = ves_io_schema_tunnel.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.tunnel.API"] = ves_io_schema_tunnel.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.tunnel.Object"] = ves_io_schema_tunnel.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.tunnel.Object"] = ves_io_schema_tunnel.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.tunnel.Object"] = ves_io_schema_tunnel.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.tunnel.Object"] = ves_io_schema_tunnel.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.tunnel.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.tunnel.Object"] = ves_io_schema_tunnel.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.tunnel.crudapi.API"] = ves_io_schema_tunnel_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.tunnel.crudapi.API"] = ves_io_schema_tunnel_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.tunnel.Object"] = ves_io_schema_tunnel_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.tunnel.Object"] = ves_io_schema_tunnel_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.tunnel.Object"] = ves_io_schema_tunnel_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.tunnel.Object"] = ves_io_schema_tunnel_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.tunnel.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.tunnel.Object"] = ves_io_schema_tunnel_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.usb_policy.Object"] = ves_io_schema_usb_policy.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.usb_policy.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.usb_policy.Object"] = reflect.TypeOf(&ves_io_schema_usb_policy.DBObject{})
	MDR.EntryIndexers["ves.io.schema.usb_policy.Object"] = ves_io_schema_usb_policy.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.Object"] = ves_io_schema_usb_policy.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.usb_policy.StatusObject"] = ves_io_schema_usb_policy.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.usb_policy.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.usb_policy.StatusObject"] = reflect.TypeOf(&ves_io_schema_usb_policy.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.usb_policy.StatusObject"] = ves_io_schema_usb_policy.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.usb_policy.StatusObject"] = ves_io_schema_usb_policy.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.usb_policy.API"] = ves_io_schema_usb_policy.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.usb_policy.API"] = ves_io_schema_usb_policy.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.usb_policy.Object"] = ves_io_schema_usb_policy.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.usb_policy.Object"] = ves_io_schema_usb_policy.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.usb_policy.Object"] = ves_io_schema_usb_policy.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.usb_policy.Object"] = ves_io_schema_usb_policy.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.usb_policy.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.usb_policy.Object"] = ves_io_schema_usb_policy.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.usb_policy.crudapi.API"] = ves_io_schema_usb_policy_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.usb_policy.crudapi.API"] = ves_io_schema_usb_policy_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.usb_policy.Object"] = ves_io_schema_usb_policy_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.usb_policy.Object"] = ves_io_schema_usb_policy_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.usb_policy.Object"] = ves_io_schema_usb_policy_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.usb_policy.Object"] = ves_io_schema_usb_policy_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.usb_policy.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.usb_policy.Object"] = ves_io_schema_usb_policy_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.user.Object"] = ves_io_schema_user.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.user.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.user.Object"] = reflect.TypeOf(&ves_io_schema_user.DBObject{})
	MDR.EntryIndexers["ves.io.schema.user.Object"] = ves_io_schema_user.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.user.Object"] = ves_io_schema_user.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.user.StatusObject"] = ves_io_schema_user.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.user.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.user.StatusObject"] = reflect.TypeOf(&ves_io_schema_user.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.user.StatusObject"] = ves_io_schema_user.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.user.StatusObject"] = ves_io_schema_user.StatusObjectValidator()

	customCSR = MDR.PvtCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.user.CustomPrivateAPI"] = ves_io_schema_user.NewCustomPrivateAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.user.CustomPrivateAPI"] = ves_io_schema_user.NewCustomPrivateAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.user.CustomPrivateAPI"] = ves_io_schema_user.RegisterCustomPrivateAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.user.CustomPrivateAPI"] = ves_io_schema_user.RegisterGwCustomPrivateAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.user.Object"] = ves_io_schema_user.CustomPrivateAPISwaggerJSON

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.user.API"] = ves_io_schema_user.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.user.API"] = ves_io_schema_user.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.user.Object"] = ves_io_schema_user.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.user.Object"] = ves_io_schema_user.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.user.Object"] = ves_io_schema_user.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.user.Object"] = ves_io_schema_user.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.user.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.user.Object"] = ves_io_schema_user.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.user.CustomAPI"] = ves_io_schema_user.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.user.CustomAPI"] = ves_io_schema_user.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.user.CustomAPI"] = ves_io_schema_user.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.user.CustomAPI"] = ves_io_schema_user.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.user.Object"] = ves_io_schema_user.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.user.crudapi.API"] = ves_io_schema_user_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.user.crudapi.API"] = ves_io_schema_user_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.user.Object"] = ves_io_schema_user_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.user.Object"] = ves_io_schema_user_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.user.Object"] = ves_io_schema_user_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.user.Object"] = ves_io_schema_user_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.user.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.user.Object"] = ves_io_schema_user_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.user_identification.Object"] = ves_io_schema_user_identification.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.user_identification.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.user_identification.Object"] = reflect.TypeOf(&ves_io_schema_user_identification.DBObject{})
	MDR.EntryIndexers["ves.io.schema.user_identification.Object"] = ves_io_schema_user_identification.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.user_identification.Object"] = ves_io_schema_user_identification.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.user_identification.StatusObject"] = ves_io_schema_user_identification.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.user_identification.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.user_identification.StatusObject"] = reflect.TypeOf(&ves_io_schema_user_identification.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.user_identification.StatusObject"] = ves_io_schema_user_identification.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.user_identification.StatusObject"] = ves_io_schema_user_identification.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.user_identification.API"] = ves_io_schema_user_identification.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.user_identification.API"] = ves_io_schema_user_identification.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.user_identification.Object"] = ves_io_schema_user_identification.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.user_identification.Object"] = ves_io_schema_user_identification.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.user_identification.Object"] = ves_io_schema_user_identification.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.user_identification.Object"] = ves_io_schema_user_identification.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.user_identification.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.user_identification.Object"] = ves_io_schema_user_identification.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.user_identification.crudapi.API"] = ves_io_schema_user_identification_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.user_identification.crudapi.API"] = ves_io_schema_user_identification_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.user_identification.Object"] = ves_io_schema_user_identification_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.user_identification.Object"] = ves_io_schema_user_identification_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.user_identification.Object"] = ves_io_schema_user_identification_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.user_identification.Object"] = ves_io_schema_user_identification_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.user_identification.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.user_identification.Object"] = ves_io_schema_user_identification_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.aws_tgw_site.Object"] = ves_io_schema_views_aws_tgw_site.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.views.aws_tgw_site.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.aws_tgw_site.Object"] = reflect.TypeOf(&ves_io_schema_views_aws_tgw_site.DBObject{})
	MDR.EntryIndexers["ves.io.schema.views.aws_tgw_site.Object"] = ves_io_schema_views_aws_tgw_site.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.Object"] = ves_io_schema_views_aws_tgw_site.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.aws_tgw_site.StatusObject"] = ves_io_schema_views_aws_tgw_site.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.views.aws_tgw_site.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.aws_tgw_site.StatusObject"] = reflect.TypeOf(&ves_io_schema_views_aws_tgw_site.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.views.aws_tgw_site.StatusObject"] = ves_io_schema_views_aws_tgw_site.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.aws_tgw_site.StatusObject"] = ves_io_schema_views_aws_tgw_site.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.aws_tgw_site.API"] = ves_io_schema_views_aws_tgw_site.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.aws_tgw_site.API"] = ves_io_schema_views_aws_tgw_site.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.aws_tgw_site.Object"] = ves_io_schema_views_aws_tgw_site.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.aws_tgw_site.Object"] = ves_io_schema_views_aws_tgw_site.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.aws_tgw_site.Object"] = ves_io_schema_views_aws_tgw_site.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.aws_tgw_site.Object"] = ves_io_schema_views_aws_tgw_site.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.aws_tgw_site.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.views.aws_tgw_site.Object"] = ves_io_schema_views_aws_tgw_site.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.views.aws_tgw_site.CustomAPI"] = ves_io_schema_views_aws_tgw_site.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.views.aws_tgw_site.CustomAPI"] = ves_io_schema_views_aws_tgw_site.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.aws_tgw_site.CustomAPI"] = ves_io_schema_views_aws_tgw_site.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.aws_tgw_site.CustomAPI"] = ves_io_schema_views_aws_tgw_site.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.views.aws_tgw_site.Object"] = ves_io_schema_views_aws_tgw_site.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.aws_tgw_site.crudapi.API"] = ves_io_schema_views_aws_tgw_site_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.aws_tgw_site.crudapi.API"] = ves_io_schema_views_aws_tgw_site_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.aws_tgw_site.Object"] = ves_io_schema_views_aws_tgw_site_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.aws_tgw_site.Object"] = ves_io_schema_views_aws_tgw_site_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.aws_tgw_site.Object"] = ves_io_schema_views_aws_tgw_site_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.aws_tgw_site.Object"] = ves_io_schema_views_aws_tgw_site_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.aws_tgw_site.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.views.aws_tgw_site.Object"] = ves_io_schema_views_aws_tgw_site_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.aws_vpc_site.Object"] = ves_io_schema_views_aws_vpc_site.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.views.aws_vpc_site.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.aws_vpc_site.Object"] = reflect.TypeOf(&ves_io_schema_views_aws_vpc_site.DBObject{})
	MDR.EntryIndexers["ves.io.schema.views.aws_vpc_site.Object"] = ves_io_schema_views_aws_vpc_site.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.Object"] = ves_io_schema_views_aws_vpc_site.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.aws_vpc_site.StatusObject"] = ves_io_schema_views_aws_vpc_site.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.views.aws_vpc_site.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.aws_vpc_site.StatusObject"] = reflect.TypeOf(&ves_io_schema_views_aws_vpc_site.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.views.aws_vpc_site.StatusObject"] = ves_io_schema_views_aws_vpc_site.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.aws_vpc_site.StatusObject"] = ves_io_schema_views_aws_vpc_site.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.aws_vpc_site.API"] = ves_io_schema_views_aws_vpc_site.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.aws_vpc_site.API"] = ves_io_schema_views_aws_vpc_site.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.aws_vpc_site.Object"] = ves_io_schema_views_aws_vpc_site.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.aws_vpc_site.Object"] = ves_io_schema_views_aws_vpc_site.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.aws_vpc_site.Object"] = ves_io_schema_views_aws_vpc_site.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.aws_vpc_site.Object"] = ves_io_schema_views_aws_vpc_site.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.aws_vpc_site.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.views.aws_vpc_site.Object"] = ves_io_schema_views_aws_vpc_site.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.views.aws_vpc_site.CustomAPI"] = ves_io_schema_views_aws_vpc_site.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.views.aws_vpc_site.CustomAPI"] = ves_io_schema_views_aws_vpc_site.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.aws_vpc_site.CustomAPI"] = ves_io_schema_views_aws_vpc_site.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.aws_vpc_site.CustomAPI"] = ves_io_schema_views_aws_vpc_site.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.views.aws_vpc_site.Object"] = ves_io_schema_views_aws_vpc_site.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.aws_vpc_site.crudapi.API"] = ves_io_schema_views_aws_vpc_site_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.aws_vpc_site.crudapi.API"] = ves_io_schema_views_aws_vpc_site_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.aws_vpc_site.Object"] = ves_io_schema_views_aws_vpc_site_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.aws_vpc_site.Object"] = ves_io_schema_views_aws_vpc_site_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.aws_vpc_site.Object"] = ves_io_schema_views_aws_vpc_site_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.aws_vpc_site.Object"] = ves_io_schema_views_aws_vpc_site_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.aws_vpc_site.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.views.aws_vpc_site.Object"] = ves_io_schema_views_aws_vpc_site_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.azure_vnet_site.Object"] = ves_io_schema_views_azure_vnet_site.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.views.azure_vnet_site.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.azure_vnet_site.Object"] = reflect.TypeOf(&ves_io_schema_views_azure_vnet_site.DBObject{})
	MDR.EntryIndexers["ves.io.schema.views.azure_vnet_site.Object"] = ves_io_schema_views_azure_vnet_site.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.Object"] = ves_io_schema_views_azure_vnet_site.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.azure_vnet_site.StatusObject"] = ves_io_schema_views_azure_vnet_site.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.views.azure_vnet_site.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.azure_vnet_site.StatusObject"] = reflect.TypeOf(&ves_io_schema_views_azure_vnet_site.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.views.azure_vnet_site.StatusObject"] = ves_io_schema_views_azure_vnet_site.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.azure_vnet_site.StatusObject"] = ves_io_schema_views_azure_vnet_site.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.azure_vnet_site.API"] = ves_io_schema_views_azure_vnet_site.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.azure_vnet_site.API"] = ves_io_schema_views_azure_vnet_site.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.azure_vnet_site.Object"] = ves_io_schema_views_azure_vnet_site.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.azure_vnet_site.Object"] = ves_io_schema_views_azure_vnet_site.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.azure_vnet_site.Object"] = ves_io_schema_views_azure_vnet_site.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.azure_vnet_site.Object"] = ves_io_schema_views_azure_vnet_site.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.azure_vnet_site.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.views.azure_vnet_site.Object"] = ves_io_schema_views_azure_vnet_site.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.views.azure_vnet_site.CustomAPI"] = ves_io_schema_views_azure_vnet_site.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.views.azure_vnet_site.CustomAPI"] = ves_io_schema_views_azure_vnet_site.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.azure_vnet_site.CustomAPI"] = ves_io_schema_views_azure_vnet_site.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.azure_vnet_site.CustomAPI"] = ves_io_schema_views_azure_vnet_site.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.views.azure_vnet_site.Object"] = ves_io_schema_views_azure_vnet_site.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.azure_vnet_site.crudapi.API"] = ves_io_schema_views_azure_vnet_site_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.azure_vnet_site.crudapi.API"] = ves_io_schema_views_azure_vnet_site_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.azure_vnet_site.Object"] = ves_io_schema_views_azure_vnet_site_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.azure_vnet_site.Object"] = ves_io_schema_views_azure_vnet_site_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.azure_vnet_site.Object"] = ves_io_schema_views_azure_vnet_site_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.azure_vnet_site.Object"] = ves_io_schema_views_azure_vnet_site_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.azure_vnet_site.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.views.azure_vnet_site.Object"] = ves_io_schema_views_azure_vnet_site_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.forward_proxy_policy.Object"] = ves_io_schema_views_forward_proxy_policy.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.views.forward_proxy_policy.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.forward_proxy_policy.Object"] = reflect.TypeOf(&ves_io_schema_views_forward_proxy_policy.DBObject{})
	MDR.EntryIndexers["ves.io.schema.views.forward_proxy_policy.Object"] = ves_io_schema_views_forward_proxy_policy.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.Object"] = ves_io_schema_views_forward_proxy_policy.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.forward_proxy_policy.StatusObject"] = ves_io_schema_views_forward_proxy_policy.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.views.forward_proxy_policy.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.forward_proxy_policy.StatusObject"] = reflect.TypeOf(&ves_io_schema_views_forward_proxy_policy.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.views.forward_proxy_policy.StatusObject"] = ves_io_schema_views_forward_proxy_policy.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.forward_proxy_policy.StatusObject"] = ves_io_schema_views_forward_proxy_policy.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.forward_proxy_policy.API"] = ves_io_schema_views_forward_proxy_policy.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.forward_proxy_policy.API"] = ves_io_schema_views_forward_proxy_policy.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.forward_proxy_policy.Object"] = ves_io_schema_views_forward_proxy_policy.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.forward_proxy_policy.Object"] = ves_io_schema_views_forward_proxy_policy.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.forward_proxy_policy.Object"] = ves_io_schema_views_forward_proxy_policy.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.forward_proxy_policy.Object"] = ves_io_schema_views_forward_proxy_policy.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.forward_proxy_policy.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.views.forward_proxy_policy.Object"] = ves_io_schema_views_forward_proxy_policy.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.views.forward_proxy_policy.CustomDataAPI"] = ves_io_schema_views_forward_proxy_policy.NewCustomDataAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.views.forward_proxy_policy.CustomDataAPI"] = ves_io_schema_views_forward_proxy_policy.NewCustomDataAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.forward_proxy_policy.CustomDataAPI"] = ves_io_schema_views_forward_proxy_policy.RegisterCustomDataAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.forward_proxy_policy.CustomDataAPI"] = ves_io_schema_views_forward_proxy_policy.RegisterGwCustomDataAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.views.forward_proxy_policy.Object"] = ves_io_schema_views_forward_proxy_policy.CustomDataAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.forward_proxy_policy.crudapi.API"] = ves_io_schema_views_forward_proxy_policy_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.forward_proxy_policy.crudapi.API"] = ves_io_schema_views_forward_proxy_policy_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.forward_proxy_policy.Object"] = ves_io_schema_views_forward_proxy_policy_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.forward_proxy_policy.Object"] = ves_io_schema_views_forward_proxy_policy_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.forward_proxy_policy.Object"] = ves_io_schema_views_forward_proxy_policy_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.forward_proxy_policy.Object"] = ves_io_schema_views_forward_proxy_policy_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.forward_proxy_policy.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.views.forward_proxy_policy.Object"] = ves_io_schema_views_forward_proxy_policy_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.gcp_vpc_site.Object"] = ves_io_schema_views_gcp_vpc_site.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.views.gcp_vpc_site.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.gcp_vpc_site.Object"] = reflect.TypeOf(&ves_io_schema_views_gcp_vpc_site.DBObject{})
	MDR.EntryIndexers["ves.io.schema.views.gcp_vpc_site.Object"] = ves_io_schema_views_gcp_vpc_site.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.Object"] = ves_io_schema_views_gcp_vpc_site.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.gcp_vpc_site.StatusObject"] = ves_io_schema_views_gcp_vpc_site.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.views.gcp_vpc_site.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.gcp_vpc_site.StatusObject"] = reflect.TypeOf(&ves_io_schema_views_gcp_vpc_site.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.views.gcp_vpc_site.StatusObject"] = ves_io_schema_views_gcp_vpc_site.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.gcp_vpc_site.StatusObject"] = ves_io_schema_views_gcp_vpc_site.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.gcp_vpc_site.API"] = ves_io_schema_views_gcp_vpc_site.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.gcp_vpc_site.API"] = ves_io_schema_views_gcp_vpc_site.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.gcp_vpc_site.Object"] = ves_io_schema_views_gcp_vpc_site.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.gcp_vpc_site.Object"] = ves_io_schema_views_gcp_vpc_site.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.gcp_vpc_site.Object"] = ves_io_schema_views_gcp_vpc_site.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.gcp_vpc_site.Object"] = ves_io_schema_views_gcp_vpc_site.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.gcp_vpc_site.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.views.gcp_vpc_site.Object"] = ves_io_schema_views_gcp_vpc_site.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.gcp_vpc_site.crudapi.API"] = ves_io_schema_views_gcp_vpc_site_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.gcp_vpc_site.crudapi.API"] = ves_io_schema_views_gcp_vpc_site_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.gcp_vpc_site.Object"] = ves_io_schema_views_gcp_vpc_site_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.gcp_vpc_site.Object"] = ves_io_schema_views_gcp_vpc_site_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.gcp_vpc_site.Object"] = ves_io_schema_views_gcp_vpc_site_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.gcp_vpc_site.Object"] = ves_io_schema_views_gcp_vpc_site_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.gcp_vpc_site.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.views.gcp_vpc_site.Object"] = ves_io_schema_views_gcp_vpc_site_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.views.http_loadbalancer.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.http_loadbalancer.Object"] = reflect.TypeOf(&ves_io_schema_views_http_loadbalancer.DBObject{})
	MDR.EntryIndexers["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.http_loadbalancer.StatusObject"] = ves_io_schema_views_http_loadbalancer.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.views.http_loadbalancer.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.http_loadbalancer.StatusObject"] = reflect.TypeOf(&ves_io_schema_views_http_loadbalancer.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.views.http_loadbalancer.StatusObject"] = ves_io_schema_views_http_loadbalancer.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.http_loadbalancer.StatusObject"] = ves_io_schema_views_http_loadbalancer.StatusObjectValidator()

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI"] = ves_io_schema_views_http_loadbalancer.NewApiepLBCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI"] = ves_io_schema_views_http_loadbalancer.NewApiepLBCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI"] = ves_io_schema_views_http_loadbalancer.RegisterApiepLBCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI"] = ves_io_schema_views_http_loadbalancer.RegisterGwApiepLBCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer.ApiepLBCustomAPISwaggerJSON

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.http_loadbalancer.API"] = ves_io_schema_views_http_loadbalancer.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.http_loadbalancer.API"] = ves_io_schema_views_http_loadbalancer.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.http_loadbalancer.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.views.http_loadbalancer.CustomAPI"] = ves_io_schema_views_http_loadbalancer.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.views.http_loadbalancer.CustomAPI"] = ves_io_schema_views_http_loadbalancer.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.http_loadbalancer.CustomAPI"] = ves_io_schema_views_http_loadbalancer.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.http_loadbalancer.CustomAPI"] = ves_io_schema_views_http_loadbalancer.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.http_loadbalancer.crudapi.API"] = ves_io_schema_views_http_loadbalancer_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.http_loadbalancer.crudapi.API"] = ves_io_schema_views_http_loadbalancer_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.http_loadbalancer.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.views.http_loadbalancer.Object"] = ves_io_schema_views_http_loadbalancer_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.network_policy_view.Object"] = ves_io_schema_views_network_policy_view.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.views.network_policy_view.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.network_policy_view.Object"] = reflect.TypeOf(&ves_io_schema_views_network_policy_view.DBObject{})
	MDR.EntryIndexers["ves.io.schema.views.network_policy_view.Object"] = ves_io_schema_views_network_policy_view.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.Object"] = ves_io_schema_views_network_policy_view.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.network_policy_view.StatusObject"] = ves_io_schema_views_network_policy_view.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.views.network_policy_view.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.network_policy_view.StatusObject"] = reflect.TypeOf(&ves_io_schema_views_network_policy_view.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.views.network_policy_view.StatusObject"] = ves_io_schema_views_network_policy_view.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.network_policy_view.StatusObject"] = ves_io_schema_views_network_policy_view.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.network_policy_view.API"] = ves_io_schema_views_network_policy_view.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.network_policy_view.API"] = ves_io_schema_views_network_policy_view.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.network_policy_view.Object"] = ves_io_schema_views_network_policy_view.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.network_policy_view.Object"] = ves_io_schema_views_network_policy_view.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.network_policy_view.Object"] = ves_io_schema_views_network_policy_view.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.network_policy_view.Object"] = ves_io_schema_views_network_policy_view.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.network_policy_view.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.views.network_policy_view.Object"] = ves_io_schema_views_network_policy_view.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.views.network_policy_view.CustomDataAPI"] = ves_io_schema_views_network_policy_view.NewCustomDataAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.views.network_policy_view.CustomDataAPI"] = ves_io_schema_views_network_policy_view.NewCustomDataAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.network_policy_view.CustomDataAPI"] = ves_io_schema_views_network_policy_view.RegisterCustomDataAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.network_policy_view.CustomDataAPI"] = ves_io_schema_views_network_policy_view.RegisterGwCustomDataAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.views.network_policy_view.Object"] = ves_io_schema_views_network_policy_view.CustomDataAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.network_policy_view.crudapi.API"] = ves_io_schema_views_network_policy_view_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.network_policy_view.crudapi.API"] = ves_io_schema_views_network_policy_view_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.network_policy_view.Object"] = ves_io_schema_views_network_policy_view_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.network_policy_view.Object"] = ves_io_schema_views_network_policy_view_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.network_policy_view.Object"] = ves_io_schema_views_network_policy_view_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.network_policy_view.Object"] = ves_io_schema_views_network_policy_view_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.network_policy_view.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.views.network_policy_view.Object"] = ves_io_schema_views_network_policy_view_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.origin_pool.Object"] = ves_io_schema_views_origin_pool.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.views.origin_pool.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.origin_pool.Object"] = reflect.TypeOf(&ves_io_schema_views_origin_pool.DBObject{})
	MDR.EntryIndexers["ves.io.schema.views.origin_pool.Object"] = ves_io_schema_views_origin_pool.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.origin_pool.Object"] = ves_io_schema_views_origin_pool.ObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.origin_pool.API"] = ves_io_schema_views_origin_pool.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.origin_pool.API"] = ves_io_schema_views_origin_pool.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.origin_pool.Object"] = ves_io_schema_views_origin_pool.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.origin_pool.Object"] = ves_io_schema_views_origin_pool.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.origin_pool.Object"] = ves_io_schema_views_origin_pool.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.origin_pool.Object"] = ves_io_schema_views_origin_pool.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.origin_pool.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.views.origin_pool.Object"] = ves_io_schema_views_origin_pool.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.origin_pool.crudapi.API"] = ves_io_schema_views_origin_pool_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.origin_pool.crudapi.API"] = ves_io_schema_views_origin_pool_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.origin_pool.Object"] = ves_io_schema_views_origin_pool_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.origin_pool.Object"] = ves_io_schema_views_origin_pool_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.origin_pool.Object"] = ves_io_schema_views_origin_pool_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.origin_pool.Object"] = ves_io_schema_views_origin_pool_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.origin_pool.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.views.origin_pool.Object"] = ves_io_schema_views_origin_pool_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.rate_limiter_policy.Object"] = ves_io_schema_views_rate_limiter_policy.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.views.rate_limiter_policy.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.rate_limiter_policy.Object"] = reflect.TypeOf(&ves_io_schema_views_rate_limiter_policy.DBObject{})
	MDR.EntryIndexers["ves.io.schema.views.rate_limiter_policy.Object"] = ves_io_schema_views_rate_limiter_policy.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.Object"] = ves_io_schema_views_rate_limiter_policy.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.rate_limiter_policy.StatusObject"] = ves_io_schema_views_rate_limiter_policy.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.views.rate_limiter_policy.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.rate_limiter_policy.StatusObject"] = reflect.TypeOf(&ves_io_schema_views_rate_limiter_policy.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.views.rate_limiter_policy.StatusObject"] = ves_io_schema_views_rate_limiter_policy.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.rate_limiter_policy.StatusObject"] = ves_io_schema_views_rate_limiter_policy.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.rate_limiter_policy.API"] = ves_io_schema_views_rate_limiter_policy.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.rate_limiter_policy.API"] = ves_io_schema_views_rate_limiter_policy.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.rate_limiter_policy.Object"] = ves_io_schema_views_rate_limiter_policy.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.rate_limiter_policy.Object"] = ves_io_schema_views_rate_limiter_policy.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.rate_limiter_policy.Object"] = ves_io_schema_views_rate_limiter_policy.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.rate_limiter_policy.Object"] = ves_io_schema_views_rate_limiter_policy.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.rate_limiter_policy.Object"] = []svcfw.NamespaceType{svcfw.SharedNSType, svcfw.UserNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.views.rate_limiter_policy.Object"] = ves_io_schema_views_rate_limiter_policy.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.rate_limiter_policy.crudapi.API"] = ves_io_schema_views_rate_limiter_policy_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.rate_limiter_policy.crudapi.API"] = ves_io_schema_views_rate_limiter_policy_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.rate_limiter_policy.Object"] = ves_io_schema_views_rate_limiter_policy_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.rate_limiter_policy.Object"] = ves_io_schema_views_rate_limiter_policy_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.rate_limiter_policy.Object"] = ves_io_schema_views_rate_limiter_policy_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.rate_limiter_policy.Object"] = ves_io_schema_views_rate_limiter_policy_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.rate_limiter_policy.Object"] = []svcfw.NamespaceType{svcfw.SharedNSType, svcfw.UserNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.views.rate_limiter_policy.Object"] = ves_io_schema_views_rate_limiter_policy_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.tcp_loadbalancer.Object"] = ves_io_schema_views_tcp_loadbalancer.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.views.tcp_loadbalancer.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.tcp_loadbalancer.Object"] = reflect.TypeOf(&ves_io_schema_views_tcp_loadbalancer.DBObject{})
	MDR.EntryIndexers["ves.io.schema.views.tcp_loadbalancer.Object"] = ves_io_schema_views_tcp_loadbalancer.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.Object"] = ves_io_schema_views_tcp_loadbalancer.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.tcp_loadbalancer.StatusObject"] = ves_io_schema_views_tcp_loadbalancer.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.views.tcp_loadbalancer.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.tcp_loadbalancer.StatusObject"] = reflect.TypeOf(&ves_io_schema_views_tcp_loadbalancer.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.views.tcp_loadbalancer.StatusObject"] = ves_io_schema_views_tcp_loadbalancer.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.tcp_loadbalancer.StatusObject"] = ves_io_schema_views_tcp_loadbalancer.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.tcp_loadbalancer.API"] = ves_io_schema_views_tcp_loadbalancer.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.tcp_loadbalancer.API"] = ves_io_schema_views_tcp_loadbalancer.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.tcp_loadbalancer.Object"] = ves_io_schema_views_tcp_loadbalancer.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.tcp_loadbalancer.Object"] = ves_io_schema_views_tcp_loadbalancer.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.tcp_loadbalancer.Object"] = ves_io_schema_views_tcp_loadbalancer.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.tcp_loadbalancer.Object"] = ves_io_schema_views_tcp_loadbalancer.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.tcp_loadbalancer.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.views.tcp_loadbalancer.Object"] = ves_io_schema_views_tcp_loadbalancer.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.views.tcp_loadbalancer.CustomAPI"] = ves_io_schema_views_tcp_loadbalancer.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.views.tcp_loadbalancer.CustomAPI"] = ves_io_schema_views_tcp_loadbalancer.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.tcp_loadbalancer.CustomAPI"] = ves_io_schema_views_tcp_loadbalancer.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.tcp_loadbalancer.CustomAPI"] = ves_io_schema_views_tcp_loadbalancer.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.views.tcp_loadbalancer.Object"] = ves_io_schema_views_tcp_loadbalancer.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.tcp_loadbalancer.crudapi.API"] = ves_io_schema_views_tcp_loadbalancer_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.tcp_loadbalancer.crudapi.API"] = ves_io_schema_views_tcp_loadbalancer_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.tcp_loadbalancer.Object"] = ves_io_schema_views_tcp_loadbalancer_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.tcp_loadbalancer.Object"] = ves_io_schema_views_tcp_loadbalancer_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.tcp_loadbalancer.Object"] = ves_io_schema_views_tcp_loadbalancer_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.tcp_loadbalancer.Object"] = ves_io_schema_views_tcp_loadbalancer_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.tcp_loadbalancer.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.views.tcp_loadbalancer.Object"] = ves_io_schema_views_tcp_loadbalancer_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.terraform_parameters.Object"] = ves_io_schema_views_terraform_parameters.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.views.terraform_parameters.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.terraform_parameters.Object"] = reflect.TypeOf(&ves_io_schema_views_terraform_parameters.DBObject{})
	MDR.EntryIndexers["ves.io.schema.views.terraform_parameters.Object"] = ves_io_schema_views_terraform_parameters.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.Object"] = ves_io_schema_views_terraform_parameters.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.terraform_parameters.StatusObject"] = ves_io_schema_views_terraform_parameters.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.views.terraform_parameters.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.terraform_parameters.StatusObject"] = reflect.TypeOf(&ves_io_schema_views_terraform_parameters.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.views.terraform_parameters.StatusObject"] = ves_io_schema_views_terraform_parameters.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.terraform_parameters.StatusObject"] = ves_io_schema_views_terraform_parameters.StatusObjectValidator()

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.views.terraform_parameters.CustomAPI"] = ves_io_schema_views_terraform_parameters.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.views.terraform_parameters.CustomAPI"] = ves_io_schema_views_terraform_parameters.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.terraform_parameters.CustomAPI"] = ves_io_schema_views_terraform_parameters.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.terraform_parameters.CustomAPI"] = ves_io_schema_views_terraform_parameters.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.views.terraform_parameters.Object"] = ves_io_schema_views_terraform_parameters.CustomAPISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.views.terraform_parameters.CustomActionAPI"] = ves_io_schema_views_terraform_parameters.NewCustomActionAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.views.terraform_parameters.CustomActionAPI"] = ves_io_schema_views_terraform_parameters.NewCustomActionAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.terraform_parameters.CustomActionAPI"] = ves_io_schema_views_terraform_parameters.RegisterCustomActionAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.terraform_parameters.CustomActionAPI"] = ves_io_schema_views_terraform_parameters.RegisterGwCustomActionAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.views.terraform_parameters.Object"] = ves_io_schema_views_terraform_parameters.CustomActionAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.terraform_parameters.crudapi.API"] = ves_io_schema_views_terraform_parameters_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.terraform_parameters.crudapi.API"] = ves_io_schema_views_terraform_parameters_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.terraform_parameters.Object"] = ves_io_schema_views_terraform_parameters_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.terraform_parameters.Object"] = ves_io_schema_views_terraform_parameters_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.terraform_parameters.Object"] = ves_io_schema_views_terraform_parameters_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.terraform_parameters.Object"] = ves_io_schema_views_terraform_parameters_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.terraform_parameters.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.views.terraform_parameters.Object"] = ves_io_schema_views_terraform_parameters_crudapi.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.terraform_parameters.crudapi.StatusAPI"] = ves_io_schema_views_terraform_parameters_crudapi.RegisterStatusAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.terraform_parameters.crudapi.StatusAPI"] = ves_io_schema_views_terraform_parameters_crudapi.RegisterGwStatusAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.terraform_parameters.StatusObject"] = ves_io_schema_views_terraform_parameters_crudapi.NewCRUDStatusAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.terraform_parameters.StatusObject"] = ves_io_schema_views_terraform_parameters_crudapi.NewCRUDStatusAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.terraform_parameters.StatusObject"] = ves_io_schema_views_terraform_parameters_crudapi.NewCRUDStatusAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.terraform_parameters.StatusObject"] = ves_io_schema_views_terraform_parameters_crudapi.NewCRUDStatusAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.terraform_parameters.StatusObject"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.views.terraform_parameters.StatusObject"] = ves_io_schema_views_terraform_parameters_crudapi.StatusAPISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.voltstack_site.Object"] = ves_io_schema_views_voltstack_site.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.views.voltstack_site.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.voltstack_site.Object"] = reflect.TypeOf(&ves_io_schema_views_voltstack_site.DBObject{})
	MDR.EntryIndexers["ves.io.schema.views.voltstack_site.Object"] = ves_io_schema_views_voltstack_site.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.Object"] = ves_io_schema_views_voltstack_site.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.voltstack_site.StatusObject"] = ves_io_schema_views_voltstack_site.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.views.voltstack_site.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.voltstack_site.StatusObject"] = reflect.TypeOf(&ves_io_schema_views_voltstack_site.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.views.voltstack_site.StatusObject"] = ves_io_schema_views_voltstack_site.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.voltstack_site.StatusObject"] = ves_io_schema_views_voltstack_site.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.voltstack_site.API"] = ves_io_schema_views_voltstack_site.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.voltstack_site.API"] = ves_io_schema_views_voltstack_site.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.voltstack_site.Object"] = ves_io_schema_views_voltstack_site.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.voltstack_site.Object"] = ves_io_schema_views_voltstack_site.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.voltstack_site.Object"] = ves_io_schema_views_voltstack_site.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.voltstack_site.Object"] = ves_io_schema_views_voltstack_site.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.voltstack_site.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.views.voltstack_site.Object"] = ves_io_schema_views_voltstack_site.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.voltstack_site.crudapi.API"] = ves_io_schema_views_voltstack_site_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.voltstack_site.crudapi.API"] = ves_io_schema_views_voltstack_site_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.voltstack_site.Object"] = ves_io_schema_views_voltstack_site_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.voltstack_site.Object"] = ves_io_schema_views_voltstack_site_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.voltstack_site.Object"] = ves_io_schema_views_voltstack_site_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.voltstack_site.Object"] = ves_io_schema_views_voltstack_site_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.voltstack_site.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.views.voltstack_site.Object"] = ves_io_schema_views_voltstack_site_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.workload.Object"] = ves_io_schema_views_workload.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.views.workload.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.workload.Object"] = reflect.TypeOf(&ves_io_schema_views_workload.DBObject{})
	MDR.EntryIndexers["ves.io.schema.views.workload.Object"] = ves_io_schema_views_workload.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.workload.Object"] = ves_io_schema_views_workload.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.views.workload.StatusObject"] = ves_io_schema_views_workload.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.views.workload.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.views.workload.StatusObject"] = reflect.TypeOf(&ves_io_schema_views_workload.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.views.workload.StatusObject"] = ves_io_schema_views_workload.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.views.workload.StatusObject"] = ves_io_schema_views_workload.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.workload.API"] = ves_io_schema_views_workload.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.workload.API"] = ves_io_schema_views_workload.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.workload.Object"] = ves_io_schema_views_workload.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.workload.Object"] = ves_io_schema_views_workload.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.workload.Object"] = ves_io_schema_views_workload.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.workload.Object"] = ves_io_schema_views_workload.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.workload.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.views.workload.Object"] = ves_io_schema_views_workload.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.views.workload.CustomDataAPI"] = ves_io_schema_views_workload.NewCustomDataAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.views.workload.CustomDataAPI"] = ves_io_schema_views_workload.NewCustomDataAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.workload.CustomDataAPI"] = ves_io_schema_views_workload.RegisterCustomDataAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.workload.CustomDataAPI"] = ves_io_schema_views_workload.RegisterGwCustomDataAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.views.workload.Object"] = ves_io_schema_views_workload.CustomDataAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.views.workload.crudapi.API"] = ves_io_schema_views_workload_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.views.workload.crudapi.API"] = ves_io_schema_views_workload_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.views.workload.Object"] = ves_io_schema_views_workload_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.views.workload.Object"] = ves_io_schema_views_workload_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.views.workload.Object"] = ves_io_schema_views_workload_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.views.workload.Object"] = ves_io_schema_views_workload_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.views.workload.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.views.workload.Object"] = ves_io_schema_views_workload_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.virtual_host.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.virtual_host.Object"] = reflect.TypeOf(&ves_io_schema_virtual_host.DBObject{})
	MDR.EntryIndexers["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.virtual_host.StatusObject"] = ves_io_schema_virtual_host.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.virtual_host.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.virtual_host.StatusObject"] = reflect.TypeOf(&ves_io_schema_virtual_host.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.virtual_host.StatusObject"] = ves_io_schema_virtual_host.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.virtual_host.StatusObject"] = ves_io_schema_virtual_host.StatusObjectValidator()

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.virtual_host.ApiepCustomAPI"] = ves_io_schema_virtual_host.NewApiepCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.virtual_host.ApiepCustomAPI"] = ves_io_schema_virtual_host.NewApiepCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.virtual_host.ApiepCustomAPI"] = ves_io_schema_virtual_host.RegisterApiepCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.virtual_host.ApiepCustomAPI"] = ves_io_schema_virtual_host.RegisterGwApiepCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host.ApiepCustomAPISwaggerJSON

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.virtual_host.API"] = ves_io_schema_virtual_host.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.virtual_host.API"] = ves_io_schema_virtual_host.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.virtual_host.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.virtual_host.CustomAPI"] = ves_io_schema_virtual_host.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.virtual_host.CustomAPI"] = ves_io_schema_virtual_host.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.virtual_host.CustomAPI"] = ves_io_schema_virtual_host.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.virtual_host.CustomAPI"] = ves_io_schema_virtual_host.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.virtual_host.crudapi.API"] = ves_io_schema_virtual_host_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.virtual_host.crudapi.API"] = ves_io_schema_virtual_host_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.virtual_host.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.virtual_host.Object"] = ves_io_schema_virtual_host_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.virtual_host_dns_info.Object"] = ves_io_schema_virtual_host_dns_info.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.virtual_host_dns_info.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.virtual_host_dns_info.Object"] = reflect.TypeOf(&ves_io_schema_virtual_host_dns_info.DBObject{})
	MDR.EntryIndexers["ves.io.schema.virtual_host_dns_info.Object"] = ves_io_schema_virtual_host_dns_info.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.virtual_host_dns_info.Object"] = ves_io_schema_virtual_host_dns_info.ObjectValidator()

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.virtual_host_dns_info.crudapi.API"] = ves_io_schema_virtual_host_dns_info_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.virtual_host_dns_info.crudapi.API"] = ves_io_schema_virtual_host_dns_info_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.virtual_host_dns_info.Object"] = ves_io_schema_virtual_host_dns_info_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.virtual_host_dns_info.Object"] = ves_io_schema_virtual_host_dns_info_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.virtual_host_dns_info.Object"] = ves_io_schema_virtual_host_dns_info_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.virtual_host_dns_info.Object"] = ves_io_schema_virtual_host_dns_info_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.virtual_host_dns_info.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.virtual_host_dns_info.Object"] = ves_io_schema_virtual_host_dns_info_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.virtual_k8s.Object"] = ves_io_schema_virtual_k8s.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.virtual_k8s.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.virtual_k8s.Object"] = reflect.TypeOf(&ves_io_schema_virtual_k8s.DBObject{})
	MDR.EntryIndexers["ves.io.schema.virtual_k8s.Object"] = ves_io_schema_virtual_k8s.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.Object"] = ves_io_schema_virtual_k8s.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.virtual_k8s.StatusObject"] = ves_io_schema_virtual_k8s.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.virtual_k8s.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.virtual_k8s.StatusObject"] = reflect.TypeOf(&ves_io_schema_virtual_k8s.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.virtual_k8s.StatusObject"] = ves_io_schema_virtual_k8s.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.virtual_k8s.StatusObject"] = ves_io_schema_virtual_k8s.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.virtual_k8s.API"] = ves_io_schema_virtual_k8s.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.virtual_k8s.API"] = ves_io_schema_virtual_k8s.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.virtual_k8s.Object"] = ves_io_schema_virtual_k8s.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.virtual_k8s.Object"] = ves_io_schema_virtual_k8s.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.virtual_k8s.Object"] = ves_io_schema_virtual_k8s.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.virtual_k8s.Object"] = ves_io_schema_virtual_k8s.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.virtual_k8s.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.virtual_k8s.Object"] = ves_io_schema_virtual_k8s.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.virtual_k8s.CustomDataAPI"] = ves_io_schema_virtual_k8s.NewCustomDataAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.virtual_k8s.CustomDataAPI"] = ves_io_schema_virtual_k8s.NewCustomDataAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.virtual_k8s.CustomDataAPI"] = ves_io_schema_virtual_k8s.RegisterCustomDataAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.virtual_k8s.CustomDataAPI"] = ves_io_schema_virtual_k8s.RegisterGwCustomDataAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.virtual_k8s.Object"] = ves_io_schema_virtual_k8s.CustomDataAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.virtual_k8s.crudapi.API"] = ves_io_schema_virtual_k8s_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.virtual_k8s.crudapi.API"] = ves_io_schema_virtual_k8s_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.virtual_k8s.Object"] = ves_io_schema_virtual_k8s_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.virtual_k8s.Object"] = ves_io_schema_virtual_k8s_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.virtual_k8s.Object"] = ves_io_schema_virtual_k8s_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.virtual_k8s.Object"] = ves_io_schema_virtual_k8s_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.virtual_k8s.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.virtual_k8s.Object"] = ves_io_schema_virtual_k8s_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.virtual_network.Object"] = ves_io_schema_virtual_network.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.virtual_network.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.virtual_network.Object"] = reflect.TypeOf(&ves_io_schema_virtual_network.DBObject{})
	MDR.EntryIndexers["ves.io.schema.virtual_network.Object"] = ves_io_schema_virtual_network.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.Object"] = ves_io_schema_virtual_network.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.virtual_network.StatusObject"] = ves_io_schema_virtual_network.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.virtual_network.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.virtual_network.StatusObject"] = reflect.TypeOf(&ves_io_schema_virtual_network.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.virtual_network.StatusObject"] = ves_io_schema_virtual_network.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.virtual_network.StatusObject"] = ves_io_schema_virtual_network.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.virtual_network.API"] = ves_io_schema_virtual_network.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.virtual_network.API"] = ves_io_schema_virtual_network.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.virtual_network.Object"] = ves_io_schema_virtual_network.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.virtual_network.Object"] = ves_io_schema_virtual_network.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.virtual_network.Object"] = ves_io_schema_virtual_network.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.virtual_network.Object"] = ves_io_schema_virtual_network.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.virtual_network.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.virtual_network.Object"] = ves_io_schema_virtual_network.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.virtual_network.CustomDataAPI"] = ves_io_schema_virtual_network.NewCustomDataAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.virtual_network.CustomDataAPI"] = ves_io_schema_virtual_network.NewCustomDataAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.virtual_network.CustomDataAPI"] = ves_io_schema_virtual_network.RegisterCustomDataAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.virtual_network.CustomDataAPI"] = ves_io_schema_virtual_network.RegisterGwCustomDataAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.virtual_network.Object"] = ves_io_schema_virtual_network.CustomDataAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.virtual_network.crudapi.API"] = ves_io_schema_virtual_network_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.virtual_network.crudapi.API"] = ves_io_schema_virtual_network_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.virtual_network.Object"] = ves_io_schema_virtual_network_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.virtual_network.Object"] = ves_io_schema_virtual_network_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.virtual_network.Object"] = ves_io_schema_virtual_network_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.virtual_network.Object"] = ves_io_schema_virtual_network_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.virtual_network.Object"] = []svcfw.NamespaceType{svcfw.SystemNSType}

	csr.CRUDSwaggerRegistry["ves.io.schema.virtual_network.Object"] = ves_io_schema_virtual_network_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.virtual_site.Object"] = ves_io_schema_virtual_site.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.virtual_site.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.virtual_site.Object"] = reflect.TypeOf(&ves_io_schema_virtual_site.DBObject{})
	MDR.EntryIndexers["ves.io.schema.virtual_site.Object"] = ves_io_schema_virtual_site.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.Object"] = ves_io_schema_virtual_site.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.virtual_site.StatusObject"] = ves_io_schema_virtual_site.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.virtual_site.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.virtual_site.StatusObject"] = reflect.TypeOf(&ves_io_schema_virtual_site.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.virtual_site.StatusObject"] = ves_io_schema_virtual_site.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.virtual_site.StatusObject"] = ves_io_schema_virtual_site.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.virtual_site.API"] = ves_io_schema_virtual_site.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.virtual_site.API"] = ves_io_schema_virtual_site.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.virtual_site.Object"] = ves_io_schema_virtual_site.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.virtual_site.Object"] = ves_io_schema_virtual_site.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.virtual_site.Object"] = ves_io_schema_virtual_site.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.virtual_site.Object"] = ves_io_schema_virtual_site.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.virtual_site.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.virtual_site.Object"] = ves_io_schema_virtual_site.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.virtual_site.CustomAPI"] = ves_io_schema_virtual_site.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.virtual_site.CustomAPI"] = ves_io_schema_virtual_site.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.virtual_site.CustomAPI"] = ves_io_schema_virtual_site.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.virtual_site.CustomAPI"] = ves_io_schema_virtual_site.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.virtual_site.Object"] = ves_io_schema_virtual_site.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.virtual_site.crudapi.API"] = ves_io_schema_virtual_site_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.virtual_site.crudapi.API"] = ves_io_schema_virtual_site_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.virtual_site.Object"] = ves_io_schema_virtual_site_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.virtual_site.Object"] = ves_io_schema_virtual_site_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.virtual_site.Object"] = ves_io_schema_virtual_site_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.virtual_site.Object"] = ves_io_schema_virtual_site_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.virtual_site.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.virtual_site.Object"] = ves_io_schema_virtual_site_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.waf.Object"] = ves_io_schema_waf.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.waf.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.waf.Object"] = reflect.TypeOf(&ves_io_schema_waf.DBObject{})
	MDR.EntryIndexers["ves.io.schema.waf.Object"] = ves_io_schema_waf.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.waf.Object"] = ves_io_schema_waf.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.waf.StatusObject"] = ves_io_schema_waf.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.waf.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.waf.StatusObject"] = reflect.TypeOf(&ves_io_schema_waf.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.waf.StatusObject"] = ves_io_schema_waf.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.waf.StatusObject"] = ves_io_schema_waf.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.waf.API"] = ves_io_schema_waf.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.waf.API"] = ves_io_schema_waf.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.waf.Object"] = ves_io_schema_waf.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.waf.Object"] = ves_io_schema_waf.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.waf.Object"] = ves_io_schema_waf.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.waf.Object"] = ves_io_schema_waf.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.waf.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.waf.Object"] = ves_io_schema_waf.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.waf.CustomAPI"] = ves_io_schema_waf.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.waf.CustomAPI"] = ves_io_schema_waf.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.waf.CustomAPI"] = ves_io_schema_waf.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.waf.CustomAPI"] = ves_io_schema_waf.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.waf.CustomAPI"] = ves_io_schema_waf.CustomAPISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.waf.WAFMonitoringAPI"] = ves_io_schema_waf.NewWAFMonitoringAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.waf.WAFMonitoringAPI"] = ves_io_schema_waf.NewWAFMonitoringAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.waf.WAFMonitoringAPI"] = ves_io_schema_waf.RegisterWAFMonitoringAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.waf.WAFMonitoringAPI"] = ves_io_schema_waf.RegisterGwWAFMonitoringAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.waf.Object"] = ves_io_schema_waf.WAFMonitoringAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.waf.crudapi.API"] = ves_io_schema_waf_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.waf.crudapi.API"] = ves_io_schema_waf_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.waf.Object"] = ves_io_schema_waf_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.waf.Object"] = ves_io_schema_waf_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.waf.Object"] = ves_io_schema_waf_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.waf.Object"] = ves_io_schema_waf_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.waf.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.waf.Object"] = ves_io_schema_waf_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.waf_rule_list.Object"] = ves_io_schema_waf_rule_list.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.waf_rule_list.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.waf_rule_list.Object"] = reflect.TypeOf(&ves_io_schema_waf_rule_list.DBObject{})
	MDR.EntryIndexers["ves.io.schema.waf_rule_list.Object"] = ves_io_schema_waf_rule_list.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.Object"] = ves_io_schema_waf_rule_list.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.waf_rule_list.StatusObject"] = ves_io_schema_waf_rule_list.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.waf_rule_list.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.waf_rule_list.StatusObject"] = reflect.TypeOf(&ves_io_schema_waf_rule_list.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.waf_rule_list.StatusObject"] = ves_io_schema_waf_rule_list.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.waf_rule_list.StatusObject"] = ves_io_schema_waf_rule_list.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.waf_rule_list.API"] = ves_io_schema_waf_rule_list.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.waf_rule_list.API"] = ves_io_schema_waf_rule_list.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.waf_rule_list.Object"] = ves_io_schema_waf_rule_list.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.waf_rule_list.Object"] = ves_io_schema_waf_rule_list.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.waf_rule_list.Object"] = ves_io_schema_waf_rule_list.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.waf_rule_list.Object"] = ves_io_schema_waf_rule_list.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.waf_rule_list.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.waf_rule_list.Object"] = ves_io_schema_waf_rule_list.APISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.waf_rule_list.crudapi.API"] = ves_io_schema_waf_rule_list_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.waf_rule_list.crudapi.API"] = ves_io_schema_waf_rule_list_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.waf_rule_list.Object"] = ves_io_schema_waf_rule_list_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.waf_rule_list.Object"] = ves_io_schema_waf_rule_list_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.waf_rule_list.Object"] = ves_io_schema_waf_rule_list_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.waf_rule_list.Object"] = ves_io_schema_waf_rule_list_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.waf_rule_list.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.waf_rule_list.Object"] = ves_io_schema_waf_rule_list_crudapi.APISwaggerJSON

	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.waf_rules.Object"] = ves_io_schema_waf_rules.NewEntryObject
	MDR.EntryStoreMap["ves.io.schema.waf_rules.Object"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.waf_rules.Object"] = reflect.TypeOf(&ves_io_schema_waf_rules.DBObject{})
	MDR.EntryIndexers["ves.io.schema.waf_rules.Object"] = ves_io_schema_waf_rules.GetObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.Object"] = ves_io_schema_waf_rules.ObjectValidator()
	// Generate Entry registry and factory
	MDR.EntryFactory["ves.io.schema.waf_rules.StatusObject"] = ves_io_schema_waf_rules.NewEntryStatusObject
	MDR.EntryStoreMap["ves.io.schema.waf_rules.StatusObject"] = store.InMemory
	MDR.EntryRegistry["ves.io.schema.waf_rules.StatusObject"] = reflect.TypeOf(&ves_io_schema_waf_rules.DBStatusObject{})
	MDR.EntryIndexers["ves.io.schema.waf_rules.StatusObject"] = ves_io_schema_waf_rules.GetStatusObjectIndexers
	MDR.ValidatorRegistry["ves.io.schema.waf_rules.StatusObject"] = ves_io_schema_waf_rules.StatusObjectValidator()

	csr = MDR.PubCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.waf_rules.API"] = ves_io_schema_waf_rules.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.waf_rules.API"] = ves_io_schema_waf_rules.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.waf_rules.Object"] = ves_io_schema_waf_rules.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.waf_rules.Object"] = ves_io_schema_waf_rules.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.waf_rules.Object"] = ves_io_schema_waf_rules.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.waf_rules.Object"] = ves_io_schema_waf_rules.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.waf_rules.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.waf_rules.Object"] = ves_io_schema_waf_rules.APISwaggerJSON

	customCSR = MDR.PubCustomServiceRegistry
	customCSR.GrpcClientRegistry["ves.io.schema.waf_rules.CustomAPI"] = ves_io_schema_waf_rules.NewCustomAPIGrpcClient
	customCSR.RestClientRegistry["ves.io.schema.waf_rules.CustomAPI"] = ves_io_schema_waf_rules.NewCustomAPIRestClient

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.waf_rules.CustomAPI"] = ves_io_schema_waf_rules.RegisterCustomAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.waf_rules.CustomAPI"] = ves_io_schema_waf_rules.RegisterGwCustomAPIHandler

	customCSR.SwaggerRegistry["ves.io.schema.waf_rules.CustomAPI"] = ves_io_schema_waf_rules.CustomAPISwaggerJSON

	csr = MDR.PvtCRUDServiceRegistry

	// Generate Service register handlers
	MDR.SvcRegisterHandlers["ves.io.schema.waf_rules.crudapi.API"] = ves_io_schema_waf_rules_crudapi.RegisterAPIServer
	MDR.SvcGwRegisterHandlers["ves.io.schema.waf_rules.crudapi.API"] = ves_io_schema_waf_rules_crudapi.RegisterGwAPIHandler

	csr.CRUDGrpcClientRegistry["ves.io.schema.waf_rules.Object"] = ves_io_schema_waf_rules_crudapi.NewCRUDAPIGrpcClient
	csr.CRUDRestClientRegistry["ves.io.schema.waf_rules.Object"] = ves_io_schema_waf_rules_crudapi.NewCRUDAPIRestClient
	csr.CRUDInprocClientRegistry["ves.io.schema.waf_rules.Object"] = ves_io_schema_waf_rules_crudapi.NewCRUDAPIInprocClient
	csr.CRUDServerRegistry["ves.io.schema.waf_rules.Object"] = ves_io_schema_waf_rules_crudapi.NewCRUDAPIServer
	csr.AllowedInNSTypes["ves.io.schema.waf_rules.Object"] = nil

	csr.CRUDSwaggerRegistry["ves.io.schema.waf_rules.Object"] = ves_io_schema_waf_rules_crudapi.APISwaggerJSON

	// Set singleton functions in MDRegistry
	MDR.GetEntryDepsFn = GetEntryDeps
	if err := isStructField(MDR, "GetEntryDepsSummaryFn"); err == nil {
		MDR.GetEntryDepsSummaryFn = GetEntryDepsSummary
	}
	MDR.RegisterGrpcAPIFn = RegisterGrpcAPI
	MDR.InitializeFn = initialize
	MDR.EntryFactory[metastatus.ObjectType] = metastatus.NewEntry

	// get schema details into MDR except for MsgIdx as there is an issue setting large number of entries into MsgIdx in init()
	MDR.MsgIdx = nil
	GetSchemaData(MDR)
}

func initialize() error {
	return nil
}

func GetEntryDepsSummary(ctx context.Context, e db.Entry, d db.Interface) (map[string][]db.Reference, error) {
	return nil, nil

}

func GetEntryDeps(ctx context.Context, e db.Entry, d db.Interface) (map[string][]db.Entry, error) {
	return nil, nil

}

// RegisterGrpcAPI registers api with the gRPC server
func RegisterGrpcAPI(api string, gSrv *grpc.Server, srv interface{}) error {
	var err error
	_, exists := MDR.SvcRegisterHandlers[api]
	if !exists {
		return fmt.Errorf("No gRPC API reg func %s", api)
	}
	switch api {

	case "ves.io.schema.address_allocator.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_address_allocator.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_address_allocator.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_address_allocator.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_address_allocator.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.address_allocator.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_address_allocator_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_address_allocator_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_address_allocator_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_address_allocator_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.advertise_policy.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_advertise_policy.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_advertise_policy.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_advertise_policy.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_advertise_policy.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.advertise_policy.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_advertise_policy_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_advertise_policy_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_advertise_policy_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_advertise_policy_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.alert_policy.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_alert_policy.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_alert_policy.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_alert_policy.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_alert_policy.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.alert_policy.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_alert_policy_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_alert_policy_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_alert_policy_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_alert_policy_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.alert_receiver.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_alert_receiver.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_alert_receiver.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_alert_receiver.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_alert_receiver.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.alert_receiver.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_alert_receiver.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_alert_receiver.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_alert_receiver.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_alert_receiver.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.alert_receiver.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_alert_receiver_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_alert_receiver_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_alert_receiver_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_alert_receiver_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.api_credential.CustomPrivateAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_api_credential.CustomPrivateAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_api_credential.CustomPrivateAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_api_credential.CustomPrivateAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_api_credential.CustomPrivateAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.api_credential.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_api_credential.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_api_credential.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_api_credential.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_api_credential.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.api_credential.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_api_credential_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_api_credential_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_api_credential_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_api_credential_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.app_firewall.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_app_firewall.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_app_firewall.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_app_firewall.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_app_firewall.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.app_firewall.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_app_firewall_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_app_firewall_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_app_firewall_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_app_firewall_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.app_setting.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_app_setting.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_app_setting.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_app_setting.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_app_setting.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.app_setting.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_app_setting.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_app_setting.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_app_setting.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_app_setting.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.app_setting.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_app_setting_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_app_setting_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_app_setting_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_app_setting_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.app_type.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_app_type.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_app_type.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_app_type.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_app_type.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.app_type.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_app_type.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_app_type.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_app_type.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_app_type.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.app_type.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_app_type_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_app_type_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_app_type_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_app_type_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.authentication.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_authentication.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_authentication.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_authentication.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_authentication.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.authentication.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_authentication_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_authentication_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_authentication_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_authentication_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.bgp.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_bgp.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_bgp.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_bgp.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_bgp.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.bgp.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_bgp_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_bgp_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_bgp_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_bgp_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.bgp_asn_set.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_bgp_asn_set.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_bgp_asn_set.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_bgp_asn_set.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_bgp_asn_set.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.bgp_asn_set.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_bgp_asn_set_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_bgp_asn_set_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_bgp_asn_set_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_bgp_asn_set_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.certified_hardware.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_certified_hardware.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_certified_hardware.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_certified_hardware.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_certified_hardware.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.certified_hardware.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_certified_hardware_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_certified_hardware_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_certified_hardware_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_certified_hardware_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.cloud_credentials.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_cloud_credentials.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_cloud_credentials.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_cloud_credentials.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_cloud_credentials.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.cloud_credentials.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_cloud_credentials_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_cloud_credentials_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_cloud_credentials_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_cloud_credentials_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.cluster.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_cluster.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_cluster.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_cluster.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_cluster.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.cluster.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_cluster_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_cluster_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_cluster_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_cluster_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.container_registry.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_container_registry.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_container_registry.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_container_registry.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_container_registry.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.container_registry.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_container_registry_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_container_registry_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_container_registry_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_container_registry_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.dc_cluster_group.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_dc_cluster_group.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_dc_cluster_group.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_dc_cluster_group.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_dc_cluster_group.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.dc_cluster_group.CustomDataAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_dc_cluster_group.CustomDataAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_dc_cluster_group.CustomDataAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_dc_cluster_group.CustomDataAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_dc_cluster_group.CustomDataAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.dc_cluster_group.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_dc_cluster_group_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_dc_cluster_group_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_dc_cluster_group_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_dc_cluster_group_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.discovery.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_discovery.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_discovery.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_discovery.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_discovery.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.discovery.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_discovery_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_discovery_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_discovery_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_discovery_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.dns_domain.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_dns_domain.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_dns_domain.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_dns_domain.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_dns_domain.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.dns_domain.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_dns_domain.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_dns_domain.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_dns_domain.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_dns_domain.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.dns_domain.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_dns_domain_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_dns_domain_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_dns_domain_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_dns_domain_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.endpoint.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_endpoint.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_endpoint.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_endpoint.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_endpoint.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.endpoint.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_endpoint_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_endpoint_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_endpoint_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_endpoint_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.fast_acl.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_fast_acl.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_fast_acl.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_fast_acl.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_fast_acl.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.fast_acl.CustomDataAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_fast_acl.CustomDataAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_fast_acl.CustomDataAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_fast_acl.CustomDataAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_fast_acl.CustomDataAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.fast_acl.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_fast_acl_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_fast_acl_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_fast_acl_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_fast_acl_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.fast_acl_rule.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_fast_acl_rule.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_fast_acl_rule.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_fast_acl_rule.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_fast_acl_rule.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.fast_acl_rule.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_fast_acl_rule_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_fast_acl_rule_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_fast_acl_rule_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_fast_acl_rule_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.fleet.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_fleet.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_fleet.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_fleet.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_fleet.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.fleet.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_fleet_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_fleet_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_fleet_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_fleet_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.flow_exporter.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_flow_exporter_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_flow_exporter_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_flow_exporter_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_flow_exporter_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.healthcheck.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_healthcheck.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_healthcheck.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_healthcheck.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_healthcheck.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.healthcheck.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_healthcheck_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_healthcheck_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_healthcheck_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_healthcheck_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.ip_prefix_set.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_ip_prefix_set.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_ip_prefix_set.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_ip_prefix_set.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_ip_prefix_set.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.ip_prefix_set.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_ip_prefix_set_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_ip_prefix_set_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_ip_prefix_set_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_ip_prefix_set_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.k8s_cluster.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_k8s_cluster.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_k8s_cluster.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_k8s_cluster.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_k8s_cluster.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.k8s_cluster.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_k8s_cluster_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_k8s_cluster_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_k8s_cluster_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_k8s_cluster_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.k8s_cluster_role.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_k8s_cluster_role.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_k8s_cluster_role.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_k8s_cluster_role.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_k8s_cluster_role.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.k8s_cluster_role.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_k8s_cluster_role_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_k8s_cluster_role_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_k8s_cluster_role_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_k8s_cluster_role_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.k8s_cluster_role_binding.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_k8s_cluster_role_binding.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_k8s_cluster_role_binding.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_k8s_cluster_role_binding.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_k8s_cluster_role_binding.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.k8s_cluster_role_binding.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_k8s_cluster_role_binding_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_k8s_cluster_role_binding_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_k8s_cluster_role_binding_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_k8s_cluster_role_binding_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.k8s_pod_security_policy.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_k8s_pod_security_policy.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_k8s_pod_security_policy.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_k8s_pod_security_policy.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_k8s_pod_security_policy.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.k8s_pod_security_policy.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_k8s_pod_security_policy_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_k8s_pod_security_policy_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_k8s_pod_security_policy_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_k8s_pod_security_policy_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.log.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_log.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_log.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_log.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_log.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.log_receiver.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_log_receiver.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_log_receiver.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_log_receiver.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_log_receiver.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.log_receiver.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_log_receiver.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_log_receiver.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_log_receiver.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_log_receiver.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.log_receiver.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_log_receiver_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_log_receiver_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_log_receiver_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_log_receiver_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.malicious_user_mitigation.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_malicious_user_mitigation.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_malicious_user_mitigation.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_malicious_user_mitigation.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_malicious_user_mitigation.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.malicious_user_mitigation.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_malicious_user_mitigation_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_malicious_user_mitigation_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_malicious_user_mitigation_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_malicious_user_mitigation_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.namespace.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_namespace.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_namespace.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_namespace.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_namespace.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.namespace.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_namespace.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_namespace.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_namespace.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_namespace.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.namespace.NamespaceCustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_namespace.NamespaceCustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_namespace.NamespaceCustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_namespace.NamespaceCustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_namespace.NamespaceCustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.namespace.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_namespace_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_namespace_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_namespace_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_namespace_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.network_connector.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_network_connector.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_network_connector.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_network_connector.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_network_connector.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.network_connector.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_network_connector_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_network_connector_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_network_connector_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_network_connector_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.network_firewall.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_network_firewall.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_network_firewall.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_network_firewall.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_network_firewall.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.network_firewall.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_network_firewall_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_network_firewall_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_network_firewall_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_network_firewall_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.network_interface.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_network_interface.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_network_interface.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_network_interface.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_network_interface.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.network_interface.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_network_interface_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_network_interface_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_network_interface_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_network_interface_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.network_policy.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_network_policy.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_network_policy.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_network_policy.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_network_policy.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.network_policy.CustomDataAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_network_policy.CustomDataAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_network_policy.CustomDataAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_network_policy.CustomDataAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_network_policy.CustomDataAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.network_policy.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_network_policy_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_network_policy_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_network_policy_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_network_policy_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.network_policy_rule.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_network_policy_rule.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_network_policy_rule.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_network_policy_rule.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_network_policy_rule.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.network_policy_rule.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_network_policy_rule_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_network_policy_rule_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_network_policy_rule_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_network_policy_rule_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.policer.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_policer.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_policer.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_policer.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_policer.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.policer.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_policer_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_policer_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_policer_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_policer_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.protocol_policer.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_protocol_policer.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_protocol_policer.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_protocol_policer.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_protocol_policer.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.protocol_policer.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_protocol_policer_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_protocol_policer_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_protocol_policer_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_protocol_policer_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.public_ip.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_public_ip.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_public_ip.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_public_ip.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_public_ip.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.public_ip.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_public_ip_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_public_ip_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_public_ip_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_public_ip_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.rate_limiter.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_rate_limiter.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_rate_limiter.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_rate_limiter.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_rate_limiter.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.rate_limiter.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_rate_limiter_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_rate_limiter_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_rate_limiter_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_rate_limiter_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.registration.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_registration.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_registration.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_registration.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_registration.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.registration.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_registration.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_registration.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_registration.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_registration.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.registration.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_registration_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_registration_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_registration_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_registration_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.role.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_role.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_role.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_role.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_role.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.role.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_role.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_role.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_role.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_role.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.role.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_role_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_role_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_role_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_role_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.route.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_route.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_route.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_route.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_route.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.route.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_route_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_route_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_route_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_route_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.secret_policy.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_secret_policy.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_secret_policy.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_secret_policy.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_secret_policy.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.secret_policy.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_secret_policy.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_secret_policy.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_secret_policy.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_secret_policy.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.secret_policy.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_secret_policy_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_secret_policy_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_secret_policy_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_secret_policy_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.secret_policy_rule.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_secret_policy_rule.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_secret_policy_rule.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_secret_policy_rule.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_secret_policy_rule.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.secret_policy_rule.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_secret_policy_rule_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_secret_policy_rule_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_secret_policy_rule_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_secret_policy_rule_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.service_policy.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_service_policy.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_service_policy.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_service_policy.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_service_policy.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.service_policy.CustomDataAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_service_policy.CustomDataAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_service_policy.CustomDataAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_service_policy.CustomDataAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_service_policy.CustomDataAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.service_policy.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_service_policy_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_service_policy_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_service_policy_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_service_policy_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.service_policy_rule.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_service_policy_rule.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_service_policy_rule.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_service_policy_rule.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_service_policy_rule.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.service_policy_rule.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_service_policy_rule_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_service_policy_rule_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_service_policy_rule_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_service_policy_rule_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.site.PrivateConfigKubeConfigAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_site.PrivateConfigKubeConfigAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_site.PrivateConfigKubeConfigAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_site.PrivateConfigKubeConfigAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_site.PrivateConfigKubeConfigAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.site.ConfigKubeConfigAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_site.ConfigKubeConfigAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_site.ConfigKubeConfigAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_site.ConfigKubeConfigAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_site.ConfigKubeConfigAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.site.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_site.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_site.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_site.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_site.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.site.CustomDataK8SAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_site.CustomDataK8SAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_site.CustomDataK8SAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_site.CustomDataK8SAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_site.CustomDataK8SAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.site.CustomStateAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_site.CustomStateAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_site.CustomStateAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_site.CustomStateAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_site.CustomStateAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.site.UamKubeConfigAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_site.UamKubeConfigAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_site.UamKubeConfigAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_site.UamKubeConfigAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_site.UamKubeConfigAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.site.UpgradeAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_site.UpgradeAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_site.UpgradeAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_site.UpgradeAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_site.UpgradeAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.site.CustomSiteStatusAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_site.CustomSiteStatusAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_site.CustomSiteStatusAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_site.CustomSiteStatusAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_site.CustomSiteStatusAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.site.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_site_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_site_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_site_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_site_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.site_mesh_group.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_site_mesh_group.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_site_mesh_group.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_site_mesh_group.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_site_mesh_group.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.site_mesh_group.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_site_mesh_group_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_site_mesh_group_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_site_mesh_group_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_site_mesh_group_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.token.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_token.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_token.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_token.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_token.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.token.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_token.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_token.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_token.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_token.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.token.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_token_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_token_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_token_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_token_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.tunnel.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_tunnel.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_tunnel.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_tunnel.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_tunnel.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.tunnel.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_tunnel_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_tunnel_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_tunnel_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_tunnel_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.usb_policy.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_usb_policy.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_usb_policy.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_usb_policy.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_usb_policy.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.usb_policy.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_usb_policy_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_usb_policy_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_usb_policy_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_usb_policy_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.user.CustomPrivateAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_user.CustomPrivateAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_user.CustomPrivateAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_user.CustomPrivateAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_user.CustomPrivateAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.user.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_user.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_user.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_user.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_user.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.user.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_user.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_user.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_user.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_user.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.user.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_user_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_user_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_user_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_user_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.user_identification.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_user_identification.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_user_identification.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_user_identification.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_user_identification.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.user_identification.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_user_identification_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_user_identification_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_user_identification_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_user_identification_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.aws_tgw_site.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_aws_tgw_site.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_aws_tgw_site.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_aws_tgw_site.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_aws_tgw_site.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.aws_tgw_site.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_aws_tgw_site.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_aws_tgw_site.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_aws_tgw_site.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_aws_tgw_site.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.aws_tgw_site.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_aws_tgw_site_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_aws_tgw_site_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_aws_tgw_site_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_aws_tgw_site_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.aws_vpc_site.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_aws_vpc_site.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_aws_vpc_site.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_aws_vpc_site.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_aws_vpc_site.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.aws_vpc_site.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_aws_vpc_site.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_aws_vpc_site.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_aws_vpc_site.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_aws_vpc_site.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.aws_vpc_site.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_aws_vpc_site_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_aws_vpc_site_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_aws_vpc_site_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_aws_vpc_site_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.azure_vnet_site.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_azure_vnet_site.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_azure_vnet_site.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_azure_vnet_site.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_azure_vnet_site.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.azure_vnet_site.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_azure_vnet_site.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_azure_vnet_site.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_azure_vnet_site.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_azure_vnet_site.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.azure_vnet_site.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_azure_vnet_site_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_azure_vnet_site_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_azure_vnet_site_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_azure_vnet_site_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.forward_proxy_policy.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_forward_proxy_policy.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_forward_proxy_policy.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_forward_proxy_policy.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_forward_proxy_policy.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.forward_proxy_policy.CustomDataAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_forward_proxy_policy.CustomDataAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_forward_proxy_policy.CustomDataAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_forward_proxy_policy.CustomDataAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_forward_proxy_policy.CustomDataAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.forward_proxy_policy.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_forward_proxy_policy_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_forward_proxy_policy_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_forward_proxy_policy_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_forward_proxy_policy_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.gcp_vpc_site.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_gcp_vpc_site.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_gcp_vpc_site.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_gcp_vpc_site.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_gcp_vpc_site.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.gcp_vpc_site.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_gcp_vpc_site_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_gcp_vpc_site_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_gcp_vpc_site_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_gcp_vpc_site_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_http_loadbalancer.ApiepLBCustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_http_loadbalancer.ApiepLBCustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_http_loadbalancer.ApiepLBCustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_http_loadbalancer.ApiepLBCustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.http_loadbalancer.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_http_loadbalancer.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_http_loadbalancer.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_http_loadbalancer.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_http_loadbalancer.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.http_loadbalancer.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_http_loadbalancer.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_http_loadbalancer.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_http_loadbalancer.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_http_loadbalancer.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.http_loadbalancer.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_http_loadbalancer_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_http_loadbalancer_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_http_loadbalancer_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_http_loadbalancer_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.network_policy_view.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_network_policy_view.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_network_policy_view.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_network_policy_view.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_network_policy_view.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.network_policy_view.CustomDataAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_network_policy_view.CustomDataAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_network_policy_view.CustomDataAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_network_policy_view.CustomDataAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_network_policy_view.CustomDataAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.network_policy_view.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_network_policy_view_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_network_policy_view_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_network_policy_view_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_network_policy_view_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.origin_pool.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_origin_pool.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_origin_pool.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_origin_pool.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_origin_pool.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.origin_pool.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_origin_pool_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_origin_pool_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_origin_pool_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_origin_pool_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.rate_limiter_policy.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_rate_limiter_policy.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_rate_limiter_policy.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_rate_limiter_policy.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_rate_limiter_policy.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.rate_limiter_policy.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_rate_limiter_policy_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_rate_limiter_policy_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_rate_limiter_policy_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_rate_limiter_policy_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.tcp_loadbalancer.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_tcp_loadbalancer.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_tcp_loadbalancer.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_tcp_loadbalancer.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_tcp_loadbalancer.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.tcp_loadbalancer.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_tcp_loadbalancer.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_tcp_loadbalancer.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_tcp_loadbalancer.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_tcp_loadbalancer.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.tcp_loadbalancer.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_tcp_loadbalancer_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_tcp_loadbalancer_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_tcp_loadbalancer_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_tcp_loadbalancer_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.terraform_parameters.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_terraform_parameters.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_terraform_parameters.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_terraform_parameters.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_terraform_parameters.CustomAPIServer", srv))
		}
		h(gSrv, s)
	case "ves.io.schema.views.terraform_parameters.CustomActionAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_terraform_parameters.CustomActionAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_terraform_parameters.CustomActionAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_terraform_parameters.CustomActionAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_terraform_parameters.CustomActionAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.terraform_parameters.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_terraform_parameters_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_terraform_parameters_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_terraform_parameters_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_terraform_parameters_crudapi.APIServer", srv))
		}
		h(gSrv, s)
	case "ves.io.schema.views.terraform_parameters.crudapi.StatusAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_terraform_parameters_crudapi.StatusAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_terraform_parameters_crudapi.StatusAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_terraform_parameters_crudapi.StatusAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_terraform_parameters_crudapi.StatusAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.voltstack_site.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_voltstack_site.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_voltstack_site.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_voltstack_site.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_voltstack_site.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.voltstack_site.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_voltstack_site_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_voltstack_site_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_voltstack_site_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_voltstack_site_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.workload.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_workload.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_workload.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_workload.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_workload.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.workload.CustomDataAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_workload.CustomDataAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_workload.CustomDataAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_workload.CustomDataAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_workload.CustomDataAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.views.workload.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_views_workload_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_views_workload_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_views_workload_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_views_workload_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.virtual_host.ApiepCustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_virtual_host.ApiepCustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_virtual_host.ApiepCustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_virtual_host.ApiepCustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_virtual_host.ApiepCustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.virtual_host.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_virtual_host.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_virtual_host.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_virtual_host.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_virtual_host.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.virtual_host.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_virtual_host.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_virtual_host.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_virtual_host.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_virtual_host.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.virtual_host.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_virtual_host_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_virtual_host_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_virtual_host_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_virtual_host_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.virtual_host_dns_info.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_virtual_host_dns_info_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_virtual_host_dns_info_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_virtual_host_dns_info_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_virtual_host_dns_info_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.virtual_k8s.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_virtual_k8s.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_virtual_k8s.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_virtual_k8s.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_virtual_k8s.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.virtual_k8s.CustomDataAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_virtual_k8s.CustomDataAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_virtual_k8s.CustomDataAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_virtual_k8s.CustomDataAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_virtual_k8s.CustomDataAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.virtual_k8s.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_virtual_k8s_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_virtual_k8s_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_virtual_k8s_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_virtual_k8s_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.virtual_network.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_virtual_network.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_virtual_network.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_virtual_network.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_virtual_network.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.virtual_network.CustomDataAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_virtual_network.CustomDataAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_virtual_network.CustomDataAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_virtual_network.CustomDataAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_virtual_network.CustomDataAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.virtual_network.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_virtual_network_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_virtual_network_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_virtual_network_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_virtual_network_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.virtual_site.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_virtual_site.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_virtual_site.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_virtual_site.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_virtual_site.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.virtual_site.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_virtual_site.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_virtual_site.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_virtual_site.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_virtual_site.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.virtual_site.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_virtual_site_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_virtual_site_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_virtual_site_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_virtual_site_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.waf.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_waf.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_waf.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_waf.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_waf.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.waf.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_waf.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_waf.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_waf.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_waf.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.waf.WAFMonitoringAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_waf.WAFMonitoringAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_waf.WAFMonitoringAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_waf.WAFMonitoringAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_waf.WAFMonitoringAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.waf.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_waf_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_waf_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_waf_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_waf_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.waf_rule_list.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_waf_rule_list.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_waf_rule_list.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_waf_rule_list.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_waf_rule_list.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.waf_rule_list.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_waf_rule_list_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_waf_rule_list_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_waf_rule_list_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_waf_rule_list_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.waf_rules.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_waf_rules.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_waf_rules.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_waf_rules.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_waf_rules.APIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.waf_rules.CustomAPI":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_waf_rules.CustomAPIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_waf_rules.CustomAPIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_waf_rules.CustomAPIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_waf_rules.CustomAPIServer", srv))
		}
		h(gSrv, s)

	case "ves.io.schema.waf_rules.crudapi.API":
		gh, _ := MDR.SvcRegisterHandlers[api]
		h, ok := gh.(func(*grpc.Server, ves_io_schema_waf_rules_crudapi.APIServer))
		if !ok {
			return fmt.Errorf("gRPC API reg expected func(*grpc.Server, ves_io_schema_waf_rules_crudapi.APIServer), got %T", gh)
		}
		s, ok := srv.(ves_io_schema_waf_rules_crudapi.APIServer)
		if !ok {
			panic(fmt.Sprintf("%T does not satisfy interface ves_io_schema_waf_rules_crudapi.APIServer", srv))
		}
		h(gSrv, s)

	default:
		err = fmt.Errorf("gRPC API %s reg func not handled", api)
	}
	return err
}
